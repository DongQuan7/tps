// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_manual_fusion.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_MANUAL_FUSION_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_MANUAL_FUSION_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fmanual_5ffusion_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_manual_fusion.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_MANUAL_FUSION_descriptor_ = file->message_type(0);
  static const int RT_TPS_MANUAL_FUSION_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, xstart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, ystart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, xend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, yend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, lastaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, viewercontrolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, hittestmode_),
  };
  RT_TPS_MANUAL_FUSION_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_MANUAL_FUSION_descriptor_,
      RT_TPS_MANUAL_FUSION::default_instance_,
      RT_TPS_MANUAL_FUSION_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MANUAL_FUSION, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_MANUAL_FUSION));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fmanual_5ffusion_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_MANUAL_FUSION_descriptor_, &RT_TPS_MANUAL_FUSION::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fmanual_5ffusion_2eproto() {
  delete RT_TPS_MANUAL_FUSION::default_instance_;
  delete RT_TPS_MANUAL_FUSION_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_manual_fusion.proto\022\ttps.proto\""
    "\264\001\n\024RT_TPS_MANUAL_FUSION\022\016\n\006xStart\030\001 \002(\001"
    "\022\016\n\006yStart\030\002 \002(\001\022\014\n\004xEnd\030\003 \002(\001\022\014\n\004yEnd\030\004"
    " \002(\001\022\016\n\006action\030\005 \002(\005\022\022\n\nlastaction\030\006 \002(\005"
    "\022\027\n\017viewerControlID\030\007 \002(\005\022\016\n\006cellID\030\010 \001("
    "\005\022\023\n\013hittestMode\030\t \001(\005", 222);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_manual_fusion.proto", &protobuf_RegisterTypes);
  RT_TPS_MANUAL_FUSION::default_instance_ = new RT_TPS_MANUAL_FUSION();
  RT_TPS_MANUAL_FUSION::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fmanual_5ffusion_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fmanual_5ffusion_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fmanual_5ffusion_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fmanual_5ffusion_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_MANUAL_FUSION::kXStartFieldNumber;
const int RT_TPS_MANUAL_FUSION::kYStartFieldNumber;
const int RT_TPS_MANUAL_FUSION::kXEndFieldNumber;
const int RT_TPS_MANUAL_FUSION::kYEndFieldNumber;
const int RT_TPS_MANUAL_FUSION::kActionFieldNumber;
const int RT_TPS_MANUAL_FUSION::kLastactionFieldNumber;
const int RT_TPS_MANUAL_FUSION::kViewerControlIDFieldNumber;
const int RT_TPS_MANUAL_FUSION::kCellIDFieldNumber;
const int RT_TPS_MANUAL_FUSION::kHittestModeFieldNumber;
#endif  // !_MSC_VER

RT_TPS_MANUAL_FUSION::RT_TPS_MANUAL_FUSION()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_MANUAL_FUSION::InitAsDefaultInstance() {
}

RT_TPS_MANUAL_FUSION::RT_TPS_MANUAL_FUSION(const RT_TPS_MANUAL_FUSION& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_MANUAL_FUSION::SharedCtor() {
  _cached_size_ = 0;
  xstart_ = 0;
  ystart_ = 0;
  xend_ = 0;
  yend_ = 0;
  action_ = 0;
  lastaction_ = 0;
  viewercontrolid_ = 0;
  cellid_ = 0;
  hittestmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_MANUAL_FUSION::~RT_TPS_MANUAL_FUSION() {
  SharedDtor();
}

void RT_TPS_MANUAL_FUSION::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_MANUAL_FUSION::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_MANUAL_FUSION::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MANUAL_FUSION_descriptor_;
}

const RT_TPS_MANUAL_FUSION& RT_TPS_MANUAL_FUSION::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto();  return *default_instance_;
}

RT_TPS_MANUAL_FUSION* RT_TPS_MANUAL_FUSION::default_instance_ = NULL;

RT_TPS_MANUAL_FUSION* RT_TPS_MANUAL_FUSION::New() const {
  return new RT_TPS_MANUAL_FUSION;
}

void RT_TPS_MANUAL_FUSION::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xstart_ = 0;
    ystart_ = 0;
    xend_ = 0;
    yend_ = 0;
    action_ = 0;
    lastaction_ = 0;
    viewercontrolid_ = 0;
    cellid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hittestmode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_MANUAL_FUSION::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double xStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xstart_)));
          set_has_xstart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_yStart;
        break;
      }
      
      // required double yStart = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ystart_)));
          set_has_ystart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_xEnd;
        break;
      }
      
      // required double xEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_xEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xend_)));
          set_has_xend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_yEnd;
        break;
      }
      
      // required double yEnd = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_yEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yend_)));
          set_has_yend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }
      
      // required int32 action = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastaction;
        break;
      }
      
      // required int32 lastaction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastaction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastaction_)));
          set_has_lastaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viewerControlID;
        break;
      }
      
      // required int32 viewerControlID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viewerControlID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewercontrolid_)));
          set_has_viewercontrolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cellID;
        break;
      }
      
      // optional int32 cellID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hittestMode;
        break;
      }
      
      // optional int32 hittestMode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hittestMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hittestmode_)));
          set_has_hittestmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_MANUAL_FUSION::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double xStart = 1;
  if (has_xstart()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->xstart(), output);
  }
  
  // required double yStart = 2;
  if (has_ystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ystart(), output);
  }
  
  // required double xEnd = 3;
  if (has_xend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->xend(), output);
  }
  
  // required double yEnd = 4;
  if (has_yend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->yend(), output);
  }
  
  // required int32 action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->action(), output);
  }
  
  // required int32 lastaction = 6;
  if (has_lastaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastaction(), output);
  }
  
  // required int32 viewerControlID = 7;
  if (has_viewercontrolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viewercontrolid(), output);
  }
  
  // optional int32 cellID = 8;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cellid(), output);
  }
  
  // optional int32 hittestMode = 9;
  if (has_hittestmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hittestmode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_MANUAL_FUSION::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double xStart = 1;
  if (has_xstart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->xstart(), target);
  }
  
  // required double yStart = 2;
  if (has_ystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ystart(), target);
  }
  
  // required double xEnd = 3;
  if (has_xend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->xend(), target);
  }
  
  // required double yEnd = 4;
  if (has_yend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->yend(), target);
  }
  
  // required int32 action = 5;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->action(), target);
  }
  
  // required int32 lastaction = 6;
  if (has_lastaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastaction(), target);
  }
  
  // required int32 viewerControlID = 7;
  if (has_viewercontrolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viewercontrolid(), target);
  }
  
  // optional int32 cellID = 8;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cellid(), target);
  }
  
  // optional int32 hittestMode = 9;
  if (has_hittestmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hittestmode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_MANUAL_FUSION::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double xStart = 1;
    if (has_xstart()) {
      total_size += 1 + 8;
    }
    
    // required double yStart = 2;
    if (has_ystart()) {
      total_size += 1 + 8;
    }
    
    // required double xEnd = 3;
    if (has_xend()) {
      total_size += 1 + 8;
    }
    
    // required double yEnd = 4;
    if (has_yend()) {
      total_size += 1 + 8;
    }
    
    // required int32 action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // required int32 lastaction = 6;
    if (has_lastaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastaction());
    }
    
    // required int32 viewerControlID = 7;
    if (has_viewercontrolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewercontrolid());
    }
    
    // optional int32 cellID = 8;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hittestMode = 9;
    if (has_hittestmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hittestmode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_MANUAL_FUSION::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_MANUAL_FUSION* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_MANUAL_FUSION*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_MANUAL_FUSION::MergeFrom(const RT_TPS_MANUAL_FUSION& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xstart()) {
      set_xstart(from.xstart());
    }
    if (from.has_ystart()) {
      set_ystart(from.ystart());
    }
    if (from.has_xend()) {
      set_xend(from.xend());
    }
    if (from.has_yend()) {
      set_yend(from.yend());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_lastaction()) {
      set_lastaction(from.lastaction());
    }
    if (from.has_viewercontrolid()) {
      set_viewercontrolid(from.viewercontrolid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hittestmode()) {
      set_hittestmode(from.hittestmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_MANUAL_FUSION::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_MANUAL_FUSION::CopyFrom(const RT_TPS_MANUAL_FUSION& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_MANUAL_FUSION::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void RT_TPS_MANUAL_FUSION::Swap(RT_TPS_MANUAL_FUSION* other) {
  if (other != this) {
    std::swap(xstart_, other->xstart_);
    std::swap(ystart_, other->ystart_);
    std::swap(xend_, other->xend_);
    std::swap(yend_, other->yend_);
    std::swap(action_, other->action_);
    std::swap(lastaction_, other->lastaction_);
    std::swap(viewercontrolid_, other->viewercontrolid_);
    std::swap(cellid_, other->cellid_);
    std::swap(hittestmode_, other->hittestmode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_MANUAL_FUSION::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_MANUAL_FUSION_descriptor_;
  metadata.reflection = RT_TPS_MANUAL_FUSION_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
