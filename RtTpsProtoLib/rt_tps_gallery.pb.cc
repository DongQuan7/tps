// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_gallery.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_Gallery_PatientTreeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_PatientTreeData_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Patient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_Patient_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Course_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_Course_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_EditCourse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_EditCourse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_EditCourseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_EditCourseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Series_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_Series_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SeriesGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_SeriesGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_RepeatedSeriesGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_CornerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_CornerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_CornerInfoVisible_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_CornerInfoVisible_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_ExpandSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_ExpandSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SliceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_SliceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SaveSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Gallery_SaveSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_gallery.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_Gallery_PatientTreeData_descriptor_ = file->message_type(0);
  static const int RT_TPS_Gallery_PatientTreeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, patient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, courselist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, serieslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, seriesgroup_),
  };
  RT_TPS_Gallery_PatientTreeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_PatientTreeData_descriptor_,
      RT_TPS_Gallery_PatientTreeData::default_instance_,
      RT_TPS_Gallery_PatientTreeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_PatientTreeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_PatientTreeData));
  RT_TPS_Gallery_Patient_descriptor_ = file->message_type(1);
  static const int RT_TPS_Gallery_Patient_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientnameprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientfirstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientmiddlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientlastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientnamesuffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, patientdateofbirth_),
  };
  RT_TPS_Gallery_Patient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_Patient_descriptor_,
      RT_TPS_Gallery_Patient::default_instance_,
      RT_TPS_Gallery_Patient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Patient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_Patient));
  RT_TPS_Gallery_Course_descriptor_ = file->message_type(2);
  static const int RT_TPS_Gallery_Course_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, courseuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, coursename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, hasbeamgroup_),
  };
  RT_TPS_Gallery_Course_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_Course_descriptor_,
      RT_TPS_Gallery_Course::default_instance_,
      RT_TPS_Gallery_Course_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Course, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_Course));
  RT_TPS_Gallery_EditCourse_descriptor_ = file->message_type(3);
  static const int RT_TPS_Gallery_EditCourse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, addedcourses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, deletedcourses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, updatedcourses_),
  };
  RT_TPS_Gallery_EditCourse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_EditCourse_descriptor_,
      RT_TPS_Gallery_EditCourse::default_instance_,
      RT_TPS_Gallery_EditCourse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_EditCourse));
  RT_TPS_Gallery_EditCourseItem_descriptor_ = file->message_type(4);
  static const int RT_TPS_Gallery_EditCourseItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, addedseriesuids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, removedseriesuids_),
  };
  RT_TPS_Gallery_EditCourseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_EditCourseItem_descriptor_,
      RT_TPS_Gallery_EditCourseItem::default_instance_,
      RT_TPS_Gallery_EditCourseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_EditCourseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_EditCourseItem));
  RT_TPS_Gallery_Series_descriptor_ = file->message_type(5);
  static const int RT_TPS_Gallery_Series_offsets_[32] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, windowingcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, windowingwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, slicecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, xdimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, ydimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, xpixelspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, ypixelspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, slicespacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, modality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, bitallocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, seriestime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, seriesdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, seriesdescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, imageslicebuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, iscopied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, seriesnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, frameofreferenceuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, manufacturermodelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, hasvoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, slicethickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, studyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, studydescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientbirthday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, patientsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, institutionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, groupuid_),
  };
  RT_TPS_Gallery_Series_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_Series_descriptor_,
      RT_TPS_Gallery_Series::default_instance_,
      RT_TPS_Gallery_Series_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_Series, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_Series));
  RT_TPS_Gallery_SeriesGroup_descriptor_ = file->message_type(6);
  static const int RT_TPS_Gallery_SeriesGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, groupuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, groupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, grouptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, mainseries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, serieslist_),
  };
  RT_TPS_Gallery_SeriesGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_SeriesGroup_descriptor_,
      RT_TPS_Gallery_SeriesGroup::default_instance_,
      RT_TPS_Gallery_SeriesGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SeriesGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_SeriesGroup));
  RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_ = file->message_type(7);
  static const int RT_TPS_Gallery_RepeatedSeriesGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_RepeatedSeriesGroup, series_group_),
  };
  RT_TPS_Gallery_RepeatedSeriesGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_,
      RT_TPS_Gallery_RepeatedSeriesGroup::default_instance_,
      RT_TPS_Gallery_RepeatedSeriesGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_RepeatedSeriesGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_RepeatedSeriesGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_RepeatedSeriesGroup));
  RT_TPS_Gallery_CornerInfo_descriptor_ = file->message_type(8);
  static const int RT_TPS_Gallery_CornerInfo_offsets_[18] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, patientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, seriesname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, seriesdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, patientposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, pixelpositionx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, pixelpositiony_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, pixelpositionz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, windowwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, windowcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, slicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, totalslicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, slicethickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, isvaluevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, modality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, zoomfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, rotate_),
  };
  RT_TPS_Gallery_CornerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_CornerInfo_descriptor_,
      RT_TPS_Gallery_CornerInfo::default_instance_,
      RT_TPS_Gallery_CornerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_CornerInfo));
  RT_TPS_Gallery_CornerInfoVisible_descriptor_ = file->message_type(9);
  static const int RT_TPS_Gallery_CornerInfoVisible_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfoVisible, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfoVisible, isvisible_),
  };
  RT_TPS_Gallery_CornerInfoVisible_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_CornerInfoVisible_descriptor_,
      RT_TPS_Gallery_CornerInfoVisible::default_instance_,
      RT_TPS_Gallery_CornerInfoVisible_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfoVisible, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_CornerInfoVisible, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_CornerInfoVisible));
  RT_TPS_Gallery_ExpandSeries_descriptor_ = file->message_type(10);
  static const int RT_TPS_Gallery_ExpandSeries_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, isexpandbottom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, slicenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, issaveasnewseries_),
  };
  RT_TPS_Gallery_ExpandSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_ExpandSeries_descriptor_,
      RT_TPS_Gallery_ExpandSeries::default_instance_,
      RT_TPS_Gallery_ExpandSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_ExpandSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_ExpandSeries));
  RT_TPS_Gallery_SliceInfo_descriptor_ = file->message_type(11);
  static const int RT_TPS_Gallery_SliceInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SliceInfo, currentslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SliceInfo, totalslice_),
  };
  RT_TPS_Gallery_SliceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_SliceInfo_descriptor_,
      RT_TPS_Gallery_SliceInfo::default_instance_,
      RT_TPS_Gallery_SliceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SliceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SliceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_SliceInfo));
  RT_TPS_Gallery_SaveSeries_descriptor_ = file->message_type(12);
  static const int RT_TPS_Gallery_SaveSeries_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SaveSeries, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SaveSeries, issaveasnewseries_),
  };
  RT_TPS_Gallery_SaveSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Gallery_SaveSeries_descriptor_,
      RT_TPS_Gallery_SaveSeries::default_instance_,
      RT_TPS_Gallery_SaveSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SaveSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Gallery_SaveSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Gallery_SaveSeries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_PatientTreeData_descriptor_, &RT_TPS_Gallery_PatientTreeData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_Patient_descriptor_, &RT_TPS_Gallery_Patient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_Course_descriptor_, &RT_TPS_Gallery_Course::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_EditCourse_descriptor_, &RT_TPS_Gallery_EditCourse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_EditCourseItem_descriptor_, &RT_TPS_Gallery_EditCourseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_Series_descriptor_, &RT_TPS_Gallery_Series::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_SeriesGroup_descriptor_, &RT_TPS_Gallery_SeriesGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_, &RT_TPS_Gallery_RepeatedSeriesGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_CornerInfo_descriptor_, &RT_TPS_Gallery_CornerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_CornerInfoVisible_descriptor_, &RT_TPS_Gallery_CornerInfoVisible::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_ExpandSeries_descriptor_, &RT_TPS_Gallery_ExpandSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_SliceInfo_descriptor_, &RT_TPS_Gallery_SliceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Gallery_SaveSeries_descriptor_, &RT_TPS_Gallery_SaveSeries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto() {
  delete RT_TPS_Gallery_PatientTreeData::default_instance_;
  delete RT_TPS_Gallery_PatientTreeData_reflection_;
  delete RT_TPS_Gallery_Patient::default_instance_;
  delete RT_TPS_Gallery_Patient_reflection_;
  delete RT_TPS_Gallery_Course::default_instance_;
  delete RT_TPS_Gallery_Course_reflection_;
  delete RT_TPS_Gallery_EditCourse::default_instance_;
  delete RT_TPS_Gallery_EditCourse_reflection_;
  delete RT_TPS_Gallery_EditCourseItem::default_instance_;
  delete RT_TPS_Gallery_EditCourseItem_reflection_;
  delete RT_TPS_Gallery_Series::default_instance_;
  delete RT_TPS_Gallery_Series_reflection_;
  delete RT_TPS_Gallery_SeriesGroup::default_instance_;
  delete RT_TPS_Gallery_SeriesGroup_reflection_;
  delete RT_TPS_Gallery_RepeatedSeriesGroup::default_instance_;
  delete RT_TPS_Gallery_RepeatedSeriesGroup_reflection_;
  delete RT_TPS_Gallery_CornerInfo::default_instance_;
  delete RT_TPS_Gallery_CornerInfo_reflection_;
  delete RT_TPS_Gallery_CornerInfoVisible::default_instance_;
  delete RT_TPS_Gallery_CornerInfoVisible_reflection_;
  delete RT_TPS_Gallery_ExpandSeries::default_instance_;
  delete RT_TPS_Gallery_ExpandSeries_reflection_;
  delete RT_TPS_Gallery_SliceInfo::default_instance_;
  delete RT_TPS_Gallery_SliceInfo_reflection_;
  delete RT_TPS_Gallery_SaveSeries::default_instance_;
  delete RT_TPS_Gallery_SaveSeries_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fgallery_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024rt_tps_gallery.proto\022\ttps.proto\"\374\001\n\036RT"
    "_TPS_Gallery_PatientTreeData\0222\n\007patient\030"
    "\001 \001(\0132!.tps.proto.RT_TPS_Gallery_Patient"
    "\0224\n\ncourseList\030\002 \003(\0132 .tps.proto.RT_TPS_"
    "Gallery_Course\0224\n\nseriesList\030\003 \003(\0132 .tps"
    ".proto.RT_TPS_Gallery_Series\022:\n\013seriesGr"
    "oup\030\004 \003(\0132%.tps.proto.RT_TPS_Gallery_Ser"
    "iesGroup\"\363\001\n\026RT_TPS_Gallery_Patient\022\022\n\np"
    "atientUID\030\001 \002(\t\022\031\n\021patientNamePrefix\030\002 \001"
    "(\t\022\030\n\020patientFirstName\030\003 \001(\t\022\031\n\021patientM"
    "iddleName\030\004 \001(\t\022\027\n\017patientLastName\030\005 \001(\t"
    "\022\031\n\021patientNameSuffix\030\006 \001(\t\022\021\n\tpatientID"
    "\030\007 \001(\t\022\022\n\npatientsex\030\010 \001(\005\022\032\n\022patientDat"
    "eOfBirth\030\t \001(\t\"h\n\025RT_TPS_Gallery_Course\022"
    "\021\n\tcourseUID\030\001 \002(\t\022\022\n\ncourseName\030\002 \001(\t\022\022"
    "\n\npatientUID\030\003 \001(\t\022\024\n\014hasbeamgroup\030\004 \002(\010"
    "\"\363\001\n\031RT_TPS_Gallery_EditCourse\022\022\n\npatien"
    "tuid\030\001 \002(\t\022>\n\014addedcourses\030\002 \003(\0132(.tps.p"
    "roto.RT_TPS_Gallery_EditCourseItem\022@\n\016de"
    "letedcourses\030\003 \003(\0132(.tps.proto.RT_TPS_Ga"
    "llery_EditCourseItem\022@\n\016updatedcourses\030\004"
    " \003(\0132(.tps.proto.RT_TPS_Gallery_EditCour"
    "seItem\"n\n\035RT_TPS_Gallery_EditCourseItem\022"
    "\013\n\003uid\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\027\n\017addedserie"
    "suids\030\003 \003(\t\022\031\n\021removedseriesuids\030\004 \003(\t\"\332"
    "\005\n\025RT_TPS_Gallery_Series\022\021\n\tseriesUID\030\001 "
    "\002(\t\022\027\n\017windowingCenter\030\002 \002(\002\022\026\n\016windowin"
    "gWidth\030\003 \002(\002\022\022\n\nsliceCount\030\004 \002(\005\022\022\n\nxDim"
    "ension\030\005 \002(\005\022\022\n\nyDimension\030\006 \002(\005\022\025\n\rxPix"
    "elSpacing\030\007 \002(\002\022\025\n\ryPixelSpacing\030\010 \002(\002\022\024"
    "\n\014sliceSpacing\030\t \002(\002\022\020\n\010modality\030\n \001(\t\022\024"
    "\n\014bitAllocated\030\013 \001(\005\022\022\n\nseriesTime\030\014 \001(\t"
    "\022\022\n\nseriesDate\030\r \001(\t\022\031\n\021seriesDescriptio"
    "n\030\016 \001(\t\022\027\n\017patientPosition\030\017 \001(\t\022\030\n\020imag"
    "eSliceBuffer\030\020 \001(\014\022\020\n\010isCopied\030\021 \001(\010\022\024\n\014"
    "seriesNumber\030\022 \001(\005\022\033\n\023frameOfReferenceUI"
    "D\030\023 \001(\t\022\035\n\025ManufacturerModelName\030\024 \001(\t\022\016"
    "\n\006hasVOI\030\025 \002(\010\022\026\n\016sliceThickness\030\026 \001(\t\022\017"
    "\n\007studyID\030\027 \001(\t\022\030\n\020studyDescription\030\030 \001("
    "\t\022\023\n\013patientName\030\031 \001(\t\022\021\n\tpatientID\030\032 \001("
    "\t\022\027\n\017patientBirthday\030\033 \001(\t\022\022\n\npatientAge"
    "\030\034 \001(\t\022\022\n\npatientSex\030\035 \001(\t\022\027\n\017institutio"
    "nName\030\036 \001(\t\022\024\n\014manufacturer\030\037 \001(\t\022\020\n\010gro"
    "upUID\030  \001(\t\"|\n\032RT_TPS_Gallery_SeriesGrou"
    "p\022\020\n\010groupUID\030\001 \002(\t\022\021\n\tgroupName\030\002 \001(\t\022\021"
    "\n\tgroupType\030\003 \001(\005\022\022\n\nmainSeries\030\004 \001(\t\022\022\n"
    "\nseriesList\030\005 \003(\t\"a\n\"RT_TPS_Gallery_Repe"
    "atedSeriesGroup\022;\n\014series_group\030\001 \003(\0132%."
    "tps.proto.RT_TPS_Gallery_SeriesGroup\"\233\003\n"
    "\031RT_TPS_Gallery_CornerInfo\022\023\n\013patientnam"
    "e\030\001 \001(\t\022\022\n\nseriesname\030\002 \001(\t\022\026\n\016seriesdat"
    "etime\030\003 \001(\t\022\027\n\017patientposition\030\004 \001(\t\022\r\n\005"
    "value\030\005 \001(\001\022\017\n\007density\030\006 \001(\001\022\026\n\016pixelpos"
    "itionx\030\007 \001(\001\022\026\n\016pixelpositiony\030\010 \001(\001\022\026\n\016"
    "pixelpositionz\030\t \001(\001\022\023\n\013windowwidth\030\n \001("
    "\001\022\024\n\014windowcenter\030\013 \001(\001\022\023\n\013slicenumber\030\014"
    " \001(\005\022\030\n\020totalslicenumber\030\r \001(\005\022\026\n\016slicet"
    "hickness\030\016 \001(\001\022\024\n\014isvaluevalid\030\017 \001(\010\022\020\n\010"
    "modality\030\020 \001(\t\022\022\n\nzoomfactor\030\021 \001(\001\022\016\n\006ro"
    "tate\030\022 \001(\001\"H\n RT_TPS_Gallery_CornerInfoV"
    "isible\022\021\n\tseriesUID\030\001 \002(\t\022\021\n\tisVisible\030\002"
    " \002(\010\"x\n\033RT_TPS_Gallery_ExpandSeries\022\021\n\ts"
    "eriesUID\030\001 \002(\t\022\026\n\016IsExpandBottom\030\002 \002(\010\022\023"
    "\n\013SliceNumber\030\003 \002(\005\022\031\n\021IsSaveAsNewSeries"
    "\030\004 \002(\010\"D\n\030RT_TPS_Gallery_SliceInfo\022\024\n\014cu"
    "rrentSlice\030\001 \002(\005\022\022\n\ntotalSlice\030\002 \002(\005\"I\n\031"
    "RT_TPS_Gallery_SaveSeries\022\021\n\tseriesUID\030\001"
    " \002(\t\022\031\n\021isSaveAsNewSeries\030\002 \002(\010", 2711);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_gallery.proto", &protobuf_RegisterTypes);
  RT_TPS_Gallery_PatientTreeData::default_instance_ = new RT_TPS_Gallery_PatientTreeData();
  RT_TPS_Gallery_Patient::default_instance_ = new RT_TPS_Gallery_Patient();
  RT_TPS_Gallery_Course::default_instance_ = new RT_TPS_Gallery_Course();
  RT_TPS_Gallery_EditCourse::default_instance_ = new RT_TPS_Gallery_EditCourse();
  RT_TPS_Gallery_EditCourseItem::default_instance_ = new RT_TPS_Gallery_EditCourseItem();
  RT_TPS_Gallery_Series::default_instance_ = new RT_TPS_Gallery_Series();
  RT_TPS_Gallery_SeriesGroup::default_instance_ = new RT_TPS_Gallery_SeriesGroup();
  RT_TPS_Gallery_RepeatedSeriesGroup::default_instance_ = new RT_TPS_Gallery_RepeatedSeriesGroup();
  RT_TPS_Gallery_CornerInfo::default_instance_ = new RT_TPS_Gallery_CornerInfo();
  RT_TPS_Gallery_CornerInfoVisible::default_instance_ = new RT_TPS_Gallery_CornerInfoVisible();
  RT_TPS_Gallery_ExpandSeries::default_instance_ = new RT_TPS_Gallery_ExpandSeries();
  RT_TPS_Gallery_SliceInfo::default_instance_ = new RT_TPS_Gallery_SliceInfo();
  RT_TPS_Gallery_SaveSeries::default_instance_ = new RT_TPS_Gallery_SaveSeries();
  RT_TPS_Gallery_PatientTreeData::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_Patient::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_Course::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_EditCourse::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_EditCourseItem::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_Series::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_SeriesGroup::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_RepeatedSeriesGroup::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_CornerInfo::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_CornerInfoVisible::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_ExpandSeries::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_SliceInfo::default_instance_->InitAsDefaultInstance();
  RT_TPS_Gallery_SaveSeries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fgallery_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fgallery_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fgallery_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_PatientTreeData::kPatientFieldNumber;
const int RT_TPS_Gallery_PatientTreeData::kCourseListFieldNumber;
const int RT_TPS_Gallery_PatientTreeData::kSeriesListFieldNumber;
const int RT_TPS_Gallery_PatientTreeData::kSeriesGroupFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_PatientTreeData::RT_TPS_Gallery_PatientTreeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_PatientTreeData::InitAsDefaultInstance() {
  patient_ = const_cast< ::tps::proto::RT_TPS_Gallery_Patient*>(&::tps::proto::RT_TPS_Gallery_Patient::default_instance());
}

RT_TPS_Gallery_PatientTreeData::RT_TPS_Gallery_PatientTreeData(const RT_TPS_Gallery_PatientTreeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_PatientTreeData::SharedCtor() {
  _cached_size_ = 0;
  patient_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_PatientTreeData::~RT_TPS_Gallery_PatientTreeData() {
  SharedDtor();
}

void RT_TPS_Gallery_PatientTreeData::SharedDtor() {
  if (this != default_instance_) {
    delete patient_;
  }
}

void RT_TPS_Gallery_PatientTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_PatientTreeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_PatientTreeData_descriptor_;
}

const RT_TPS_Gallery_PatientTreeData& RT_TPS_Gallery_PatientTreeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_PatientTreeData* RT_TPS_Gallery_PatientTreeData::default_instance_ = NULL;

RT_TPS_Gallery_PatientTreeData* RT_TPS_Gallery_PatientTreeData::New() const {
  return new RT_TPS_Gallery_PatientTreeData;
}

void RT_TPS_Gallery_PatientTreeData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patient()) {
      if (patient_ != NULL) patient_->::tps::proto::RT_TPS_Gallery_Patient::Clear();
    }
  }
  courselist_.Clear();
  serieslist_.Clear();
  seriesgroup_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_PatientTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_patient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_courseList;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_courselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_courseList;
        if (input->ExpectTag(26)) goto parse_seriesList;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serieslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seriesList;
        if (input->ExpectTag(34)) goto parse_seriesGroup;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesGroup:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seriesgroup()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_seriesGroup;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_PatientTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
  if (has_patient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patient(), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
  for (int i = 0; i < this->courselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->courselist(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
  for (int i = 0; i < this->serieslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->serieslist(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
  for (int i = 0; i < this->seriesgroup_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->seriesgroup(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_PatientTreeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
  if (has_patient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patient(), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
  for (int i = 0; i < this->courselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->courselist(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
  for (int i = 0; i < this->serieslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->serieslist(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
  for (int i = 0; i < this->seriesgroup_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->seriesgroup(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_PatientTreeData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
    if (has_patient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->patient());
    }
    
  }
  // repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
  total_size += 1 * this->courselist_size();
  for (int i = 0; i < this->courselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->courselist(i));
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
  total_size += 1 * this->serieslist_size();
  for (int i = 0; i < this->serieslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serieslist(i));
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
  total_size += 1 * this->seriesgroup_size();
  for (int i = 0; i < this->seriesgroup_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seriesgroup(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_PatientTreeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_PatientTreeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_PatientTreeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_PatientTreeData::MergeFrom(const RT_TPS_Gallery_PatientTreeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  courselist_.MergeFrom(from.courselist_);
  serieslist_.MergeFrom(from.serieslist_);
  seriesgroup_.MergeFrom(from.seriesgroup_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patient()) {
      mutable_patient()->::tps::proto::RT_TPS_Gallery_Patient::MergeFrom(from.patient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_PatientTreeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_PatientTreeData::CopyFrom(const RT_TPS_Gallery_PatientTreeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_PatientTreeData::IsInitialized() const {
  
  if (has_patient()) {
    if (!this->patient().IsInitialized()) return false;
  }
  for (int i = 0; i < courselist_size(); i++) {
    if (!this->courselist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < serieslist_size(); i++) {
    if (!this->serieslist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < seriesgroup_size(); i++) {
    if (!this->seriesgroup(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_Gallery_PatientTreeData::Swap(RT_TPS_Gallery_PatientTreeData* other) {
  if (other != this) {
    std::swap(patient_, other->patient_);
    courselist_.Swap(&other->courselist_);
    serieslist_.Swap(&other->serieslist_);
    seriesgroup_.Swap(&other->seriesgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_PatientTreeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_PatientTreeData_descriptor_;
  metadata.reflection = RT_TPS_Gallery_PatientTreeData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_Patient::kPatientUIDFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientNamePrefixFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientFirstNameFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientMiddleNameFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientLastNameFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientNameSuffixFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientIDFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientsexFieldNumber;
const int RT_TPS_Gallery_Patient::kPatientDateOfBirthFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_Patient::RT_TPS_Gallery_Patient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_Patient::InitAsDefaultInstance() {
}

RT_TPS_Gallery_Patient::RT_TPS_Gallery_Patient(const RT_TPS_Gallery_Patient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_Patient::SharedCtor() {
  _cached_size_ = 0;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientnameprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientmiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientnamesuffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientsex_ = 0;
  patientdateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_Patient::~RT_TPS_Gallery_Patient() {
  SharedDtor();
}

void RT_TPS_Gallery_Patient::SharedDtor() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (patientnameprefix_ != &::google::protobuf::internal::kEmptyString) {
    delete patientnameprefix_;
  }
  if (patientfirstname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientfirstname_;
  }
  if (patientmiddlename_ != &::google::protobuf::internal::kEmptyString) {
    delete patientmiddlename_;
  }
  if (patientlastname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientlastname_;
  }
  if (patientnamesuffix_ != &::google::protobuf::internal::kEmptyString) {
    delete patientnamesuffix_;
  }
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientdateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    delete patientdateofbirth_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_Patient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Patient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_Patient_descriptor_;
}

const RT_TPS_Gallery_Patient& RT_TPS_Gallery_Patient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_Patient* RT_TPS_Gallery_Patient::default_instance_ = NULL;

RT_TPS_Gallery_Patient* RT_TPS_Gallery_Patient::New() const {
  return new RT_TPS_Gallery_Patient;
}

void RT_TPS_Gallery_Patient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
    if (has_patientnameprefix()) {
      if (patientnameprefix_ != &::google::protobuf::internal::kEmptyString) {
        patientnameprefix_->clear();
      }
    }
    if (has_patientfirstname()) {
      if (patientfirstname_ != &::google::protobuf::internal::kEmptyString) {
        patientfirstname_->clear();
      }
    }
    if (has_patientmiddlename()) {
      if (patientmiddlename_ != &::google::protobuf::internal::kEmptyString) {
        patientmiddlename_->clear();
      }
    }
    if (has_patientlastname()) {
      if (patientlastname_ != &::google::protobuf::internal::kEmptyString) {
        patientlastname_->clear();
      }
    }
    if (has_patientnamesuffix()) {
      if (patientnamesuffix_ != &::google::protobuf::internal::kEmptyString) {
        patientnamesuffix_->clear();
      }
    }
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    patientsex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_patientdateofbirth()) {
      if (patientdateofbirth_ != &::google::protobuf::internal::kEmptyString) {
        patientdateofbirth_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_Patient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string patientUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_patientNamePrefix;
        break;
      }
      
      // optional string patientNamePrefix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientNamePrefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientnameprefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientnameprefix().data(), this->patientnameprefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patientFirstName;
        break;
      }
      
      // optional string patientFirstName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientFirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientfirstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientfirstname().data(), this->patientfirstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_patientMiddleName;
        break;
      }
      
      // optional string patientMiddleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientMiddleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientmiddlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientmiddlename().data(), this->patientmiddlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_patientLastName;
        break;
      }
      
      // optional string patientLastName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientLastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientlastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientlastname().data(), this->patientlastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patientNameSuffix;
        break;
      }
      
      // optional string patientNameSuffix = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientNameSuffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientnamesuffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientnamesuffix().data(), this->patientnamesuffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_patientID;
        break;
      }
      
      // optional string patientID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_patientsex;
        break;
      }
      
      // optional int32 patientsex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patientsex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patientsex_)));
          set_has_patientsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_patientDateOfBirth;
        break;
      }
      
      // optional string patientDateOfBirth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientDateOfBirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientdateofbirth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientdateofbirth().data(), this->patientdateofbirth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_Patient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->patientuid(), output);
  }
  
  // optional string patientNamePrefix = 2;
  if (has_patientnameprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnameprefix().data(), this->patientnameprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->patientnameprefix(), output);
  }
  
  // optional string patientFirstName = 3;
  if (has_patientfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientfirstname().data(), this->patientfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->patientfirstname(), output);
  }
  
  // optional string patientMiddleName = 4;
  if (has_patientmiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientmiddlename().data(), this->patientmiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->patientmiddlename(), output);
  }
  
  // optional string patientLastName = 5;
  if (has_patientlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientlastname().data(), this->patientlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->patientlastname(), output);
  }
  
  // optional string patientNameSuffix = 6;
  if (has_patientnamesuffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnamesuffix().data(), this->patientnamesuffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->patientnamesuffix(), output);
  }
  
  // optional string patientID = 7;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->patientid(), output);
  }
  
  // optional int32 patientsex = 8;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->patientsex(), output);
  }
  
  // optional string patientDateOfBirth = 9;
  if (has_patientdateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientdateofbirth().data(), this->patientdateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->patientdateofbirth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_Patient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patientuid(), target);
  }
  
  // optional string patientNamePrefix = 2;
  if (has_patientnameprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnameprefix().data(), this->patientnameprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patientnameprefix(), target);
  }
  
  // optional string patientFirstName = 3;
  if (has_patientfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientfirstname().data(), this->patientfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patientfirstname(), target);
  }
  
  // optional string patientMiddleName = 4;
  if (has_patientmiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientmiddlename().data(), this->patientmiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->patientmiddlename(), target);
  }
  
  // optional string patientLastName = 5;
  if (has_patientlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientlastname().data(), this->patientlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->patientlastname(), target);
  }
  
  // optional string patientNameSuffix = 6;
  if (has_patientnamesuffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnamesuffix().data(), this->patientnamesuffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->patientnamesuffix(), target);
  }
  
  // optional string patientID = 7;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->patientid(), target);
  }
  
  // optional int32 patientsex = 8;
  if (has_patientsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->patientsex(), target);
  }
  
  // optional string patientDateOfBirth = 9;
  if (has_patientdateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientdateofbirth().data(), this->patientdateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->patientdateofbirth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_Patient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string patientUID = 1;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
    // optional string patientNamePrefix = 2;
    if (has_patientnameprefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientnameprefix());
    }
    
    // optional string patientFirstName = 3;
    if (has_patientfirstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientfirstname());
    }
    
    // optional string patientMiddleName = 4;
    if (has_patientmiddlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientmiddlename());
    }
    
    // optional string patientLastName = 5;
    if (has_patientlastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientlastname());
    }
    
    // optional string patientNameSuffix = 6;
    if (has_patientnamesuffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientnamesuffix());
    }
    
    // optional string patientID = 7;
    if (has_patientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }
    
    // optional int32 patientsex = 8;
    if (has_patientsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patientsex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string patientDateOfBirth = 9;
    if (has_patientdateofbirth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientdateofbirth());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_Patient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_Patient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_Patient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_Patient::MergeFrom(const RT_TPS_Gallery_Patient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
    if (from.has_patientnameprefix()) {
      set_patientnameprefix(from.patientnameprefix());
    }
    if (from.has_patientfirstname()) {
      set_patientfirstname(from.patientfirstname());
    }
    if (from.has_patientmiddlename()) {
      set_patientmiddlename(from.patientmiddlename());
    }
    if (from.has_patientlastname()) {
      set_patientlastname(from.patientlastname());
    }
    if (from.has_patientnamesuffix()) {
      set_patientnamesuffix(from.patientnamesuffix());
    }
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientsex()) {
      set_patientsex(from.patientsex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patientdateofbirth()) {
      set_patientdateofbirth(from.patientdateofbirth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_Patient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_Patient::CopyFrom(const RT_TPS_Gallery_Patient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_Patient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RT_TPS_Gallery_Patient::Swap(RT_TPS_Gallery_Patient* other) {
  if (other != this) {
    std::swap(patientuid_, other->patientuid_);
    std::swap(patientnameprefix_, other->patientnameprefix_);
    std::swap(patientfirstname_, other->patientfirstname_);
    std::swap(patientmiddlename_, other->patientmiddlename_);
    std::swap(patientlastname_, other->patientlastname_);
    std::swap(patientnamesuffix_, other->patientnamesuffix_);
    std::swap(patientid_, other->patientid_);
    std::swap(patientsex_, other->patientsex_);
    std::swap(patientdateofbirth_, other->patientdateofbirth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_Patient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_Patient_descriptor_;
  metadata.reflection = RT_TPS_Gallery_Patient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_Course::kCourseUIDFieldNumber;
const int RT_TPS_Gallery_Course::kCourseNameFieldNumber;
const int RT_TPS_Gallery_Course::kPatientUIDFieldNumber;
const int RT_TPS_Gallery_Course::kHasbeamgroupFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_Course::RT_TPS_Gallery_Course()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_Course::InitAsDefaultInstance() {
}

RT_TPS_Gallery_Course::RT_TPS_Gallery_Course(const RT_TPS_Gallery_Course& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_Course::SharedCtor() {
  _cached_size_ = 0;
  courseuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coursename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasbeamgroup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_Course::~RT_TPS_Gallery_Course() {
  SharedDtor();
}

void RT_TPS_Gallery_Course::SharedDtor() {
  if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseuid_;
  }
  if (coursename_ != &::google::protobuf::internal::kEmptyString) {
    delete coursename_;
  }
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_Course::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Course::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_Course_descriptor_;
}

const RT_TPS_Gallery_Course& RT_TPS_Gallery_Course::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_Course* RT_TPS_Gallery_Course::default_instance_ = NULL;

RT_TPS_Gallery_Course* RT_TPS_Gallery_Course::New() const {
  return new RT_TPS_Gallery_Course;
}

void RT_TPS_Gallery_Course::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_courseuid()) {
      if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
        courseuid_->clear();
      }
    }
    if (has_coursename()) {
      if (coursename_ != &::google::protobuf::internal::kEmptyString) {
        coursename_->clear();
      }
    }
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
    hasbeamgroup_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_Course::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string courseUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseuid().data(), this->courseuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_courseName;
        break;
      }
      
      // optional string courseName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courseName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coursename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coursename().data(), this->coursename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patientUID;
        break;
      }
      
      // optional string patientUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hasbeamgroup;
        break;
      }
      
      // required bool hasbeamgroup = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasbeamgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasbeamgroup_)));
          set_has_hasbeamgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_Course::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string courseUID = 1;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->courseuid(), output);
  }
  
  // optional string courseName = 2;
  if (has_coursename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coursename().data(), this->coursename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->coursename(), output);
  }
  
  // optional string patientUID = 3;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->patientuid(), output);
  }
  
  // required bool hasbeamgroup = 4;
  if (has_hasbeamgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->hasbeamgroup(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_Course::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string courseUID = 1;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->courseuid(), target);
  }
  
  // optional string courseName = 2;
  if (has_coursename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coursename().data(), this->coursename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->coursename(), target);
  }
  
  // optional string patientUID = 3;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patientuid(), target);
  }
  
  // required bool hasbeamgroup = 4;
  if (has_hasbeamgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->hasbeamgroup(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_Course::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string courseUID = 1;
    if (has_courseuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseuid());
    }
    
    // optional string courseName = 2;
    if (has_coursename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coursename());
    }
    
    // optional string patientUID = 3;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
    // required bool hasbeamgroup = 4;
    if (has_hasbeamgroup()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_Course::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_Course* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_Course*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_Course::MergeFrom(const RT_TPS_Gallery_Course& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_courseuid()) {
      set_courseuid(from.courseuid());
    }
    if (from.has_coursename()) {
      set_coursename(from.coursename());
    }
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
    if (from.has_hasbeamgroup()) {
      set_hasbeamgroup(from.hasbeamgroup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_Course::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_Course::CopyFrom(const RT_TPS_Gallery_Course& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_Course::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000009) != 0x00000009) return false;
  
  return true;
}

void RT_TPS_Gallery_Course::Swap(RT_TPS_Gallery_Course* other) {
  if (other != this) {
    std::swap(courseuid_, other->courseuid_);
    std::swap(coursename_, other->coursename_);
    std::swap(patientuid_, other->patientuid_);
    std::swap(hasbeamgroup_, other->hasbeamgroup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_Course::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_Course_descriptor_;
  metadata.reflection = RT_TPS_Gallery_Course_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_EditCourse::kPatientuidFieldNumber;
const int RT_TPS_Gallery_EditCourse::kAddedcoursesFieldNumber;
const int RT_TPS_Gallery_EditCourse::kDeletedcoursesFieldNumber;
const int RT_TPS_Gallery_EditCourse::kUpdatedcoursesFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_EditCourse::RT_TPS_Gallery_EditCourse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_EditCourse::InitAsDefaultInstance() {
}

RT_TPS_Gallery_EditCourse::RT_TPS_Gallery_EditCourse(const RT_TPS_Gallery_EditCourse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_EditCourse::SharedCtor() {
  _cached_size_ = 0;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_EditCourse::~RT_TPS_Gallery_EditCourse() {
  SharedDtor();
}

void RT_TPS_Gallery_EditCourse::SharedDtor() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_EditCourse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_EditCourse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_EditCourse_descriptor_;
}

const RT_TPS_Gallery_EditCourse& RT_TPS_Gallery_EditCourse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_EditCourse* RT_TPS_Gallery_EditCourse::default_instance_ = NULL;

RT_TPS_Gallery_EditCourse* RT_TPS_Gallery_EditCourse::New() const {
  return new RT_TPS_Gallery_EditCourse;
}

void RT_TPS_Gallery_EditCourse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
  }
  addedcourses_.Clear();
  deletedcourses_.Clear();
  updatedcourses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_EditCourse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string patientuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addedcourses;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addedcourses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_addedcourses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addedcourses;
        if (input->ExpectTag(26)) goto parse_deletedcourses;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deletedcourses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deletedcourses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_deletedcourses;
        if (input->ExpectTag(34)) goto parse_updatedcourses;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_updatedcourses:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_updatedcourses()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_updatedcourses;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_EditCourse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string patientuid = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->patientuid(), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
  for (int i = 0; i < this->addedcourses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->addedcourses(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
  for (int i = 0; i < this->deletedcourses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->deletedcourses(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
  for (int i = 0; i < this->updatedcourses_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->updatedcourses(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_EditCourse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string patientuid = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patientuid(), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
  for (int i = 0; i < this->addedcourses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->addedcourses(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
  for (int i = 0; i < this->deletedcourses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->deletedcourses(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
  for (int i = 0; i < this->updatedcourses_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->updatedcourses(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_EditCourse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string patientuid = 1;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
  }
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
  total_size += 1 * this->addedcourses_size();
  for (int i = 0; i < this->addedcourses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->addedcourses(i));
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
  total_size += 1 * this->deletedcourses_size();
  for (int i = 0; i < this->deletedcourses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deletedcourses(i));
  }
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
  total_size += 1 * this->updatedcourses_size();
  for (int i = 0; i < this->updatedcourses_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->updatedcourses(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_EditCourse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_EditCourse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_EditCourse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_EditCourse::MergeFrom(const RT_TPS_Gallery_EditCourse& from) {
  GOOGLE_CHECK_NE(&from, this);
  addedcourses_.MergeFrom(from.addedcourses_);
  deletedcourses_.MergeFrom(from.deletedcourses_);
  updatedcourses_.MergeFrom(from.updatedcourses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_EditCourse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_EditCourse::CopyFrom(const RT_TPS_Gallery_EditCourse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_EditCourse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RT_TPS_Gallery_EditCourse::Swap(RT_TPS_Gallery_EditCourse* other) {
  if (other != this) {
    std::swap(patientuid_, other->patientuid_);
    addedcourses_.Swap(&other->addedcourses_);
    deletedcourses_.Swap(&other->deletedcourses_);
    updatedcourses_.Swap(&other->updatedcourses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_EditCourse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_EditCourse_descriptor_;
  metadata.reflection = RT_TPS_Gallery_EditCourse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_EditCourseItem::kUidFieldNumber;
const int RT_TPS_Gallery_EditCourseItem::kNameFieldNumber;
const int RT_TPS_Gallery_EditCourseItem::kAddedseriesuidsFieldNumber;
const int RT_TPS_Gallery_EditCourseItem::kRemovedseriesuidsFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_EditCourseItem::RT_TPS_Gallery_EditCourseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_EditCourseItem::InitAsDefaultInstance() {
}

RT_TPS_Gallery_EditCourseItem::RT_TPS_Gallery_EditCourseItem(const RT_TPS_Gallery_EditCourseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_EditCourseItem::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_EditCourseItem::~RT_TPS_Gallery_EditCourseItem() {
  SharedDtor();
}

void RT_TPS_Gallery_EditCourseItem::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_EditCourseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_EditCourseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_EditCourseItem_descriptor_;
}

const RT_TPS_Gallery_EditCourseItem& RT_TPS_Gallery_EditCourseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourseItem::default_instance_ = NULL;

RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourseItem::New() const {
  return new RT_TPS_Gallery_EditCourseItem;
}

void RT_TPS_Gallery_EditCourseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  addedseriesuids_.Clear();
  removedseriesuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_EditCourseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addedseriesuids;
        break;
      }
      
      // repeated string addedseriesuids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addedseriesuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_addedseriesuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addedseriesuids(0).data(), this->addedseriesuids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_addedseriesuids;
        if (input->ExpectTag(34)) goto parse_removedseriesuids;
        break;
      }
      
      // repeated string removedseriesuids = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_removedseriesuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_removedseriesuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->removedseriesuids(0).data(), this->removedseriesuids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_removedseriesuids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_EditCourseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // repeated string addedseriesuids = 3;
  for (int i = 0; i < this->addedseriesuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->addedseriesuids(i).data(), this->addedseriesuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->addedseriesuids(i), output);
  }
  
  // repeated string removedseriesuids = 4;
  for (int i = 0; i < this->removedseriesuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->removedseriesuids(i).data(), this->removedseriesuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->removedseriesuids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_EditCourseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // repeated string addedseriesuids = 3;
  for (int i = 0; i < this->addedseriesuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addedseriesuids(i).data(), this->addedseriesuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->addedseriesuids(i), target);
  }
  
  // repeated string removedseriesuids = 4;
  for (int i = 0; i < this->removedseriesuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->removedseriesuids(i).data(), this->removedseriesuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->removedseriesuids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_EditCourseItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  // repeated string addedseriesuids = 3;
  total_size += 1 * this->addedseriesuids_size();
  for (int i = 0; i < this->addedseriesuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->addedseriesuids(i));
  }
  
  // repeated string removedseriesuids = 4;
  total_size += 1 * this->removedseriesuids_size();
  for (int i = 0; i < this->removedseriesuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->removedseriesuids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_EditCourseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_EditCourseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_EditCourseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_EditCourseItem::MergeFrom(const RT_TPS_Gallery_EditCourseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  addedseriesuids_.MergeFrom(from.addedseriesuids_);
  removedseriesuids_.MergeFrom(from.removedseriesuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_EditCourseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_EditCourseItem::CopyFrom(const RT_TPS_Gallery_EditCourseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_EditCourseItem::IsInitialized() const {
  
  return true;
}

void RT_TPS_Gallery_EditCourseItem::Swap(RT_TPS_Gallery_EditCourseItem* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(name_, other->name_);
    addedseriesuids_.Swap(&other->addedseriesuids_);
    removedseriesuids_.Swap(&other->removedseriesuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_EditCourseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_EditCourseItem_descriptor_;
  metadata.reflection = RT_TPS_Gallery_EditCourseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_Series::kSeriesUIDFieldNumber;
const int RT_TPS_Gallery_Series::kWindowingCenterFieldNumber;
const int RT_TPS_Gallery_Series::kWindowingWidthFieldNumber;
const int RT_TPS_Gallery_Series::kSliceCountFieldNumber;
const int RT_TPS_Gallery_Series::kXDimensionFieldNumber;
const int RT_TPS_Gallery_Series::kYDimensionFieldNumber;
const int RT_TPS_Gallery_Series::kXPixelSpacingFieldNumber;
const int RT_TPS_Gallery_Series::kYPixelSpacingFieldNumber;
const int RT_TPS_Gallery_Series::kSliceSpacingFieldNumber;
const int RT_TPS_Gallery_Series::kModalityFieldNumber;
const int RT_TPS_Gallery_Series::kBitAllocatedFieldNumber;
const int RT_TPS_Gallery_Series::kSeriesTimeFieldNumber;
const int RT_TPS_Gallery_Series::kSeriesDateFieldNumber;
const int RT_TPS_Gallery_Series::kSeriesDescriptionFieldNumber;
const int RT_TPS_Gallery_Series::kPatientPositionFieldNumber;
const int RT_TPS_Gallery_Series::kImageSliceBufferFieldNumber;
const int RT_TPS_Gallery_Series::kIsCopiedFieldNumber;
const int RT_TPS_Gallery_Series::kSeriesNumberFieldNumber;
const int RT_TPS_Gallery_Series::kFrameOfReferenceUIDFieldNumber;
const int RT_TPS_Gallery_Series::kManufacturerModelNameFieldNumber;
const int RT_TPS_Gallery_Series::kHasVOIFieldNumber;
const int RT_TPS_Gallery_Series::kSliceThicknessFieldNumber;
const int RT_TPS_Gallery_Series::kStudyIDFieldNumber;
const int RT_TPS_Gallery_Series::kStudyDescriptionFieldNumber;
const int RT_TPS_Gallery_Series::kPatientNameFieldNumber;
const int RT_TPS_Gallery_Series::kPatientIDFieldNumber;
const int RT_TPS_Gallery_Series::kPatientBirthdayFieldNumber;
const int RT_TPS_Gallery_Series::kPatientAgeFieldNumber;
const int RT_TPS_Gallery_Series::kPatientSexFieldNumber;
const int RT_TPS_Gallery_Series::kInstitutionNameFieldNumber;
const int RT_TPS_Gallery_Series::kManufacturerFieldNumber;
const int RT_TPS_Gallery_Series::kGroupUIDFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_Series::RT_TPS_Gallery_Series()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_Series::InitAsDefaultInstance() {
}

RT_TPS_Gallery_Series::RT_TPS_Gallery_Series(const RT_TPS_Gallery_Series& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_Series::SharedCtor() {
  _cached_size_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  windowingcenter_ = 0;
  windowingwidth_ = 0;
  slicecount_ = 0;
  xdimension_ = 0;
  ydimension_ = 0;
  xpixelspacing_ = 0;
  ypixelspacing_ = 0;
  slicespacing_ = 0;
  modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bitallocated_ = 0;
  seriestime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageslicebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iscopied_ = false;
  seriesnumber_ = 0;
  frameofreferenceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturermodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasvoi_ = false;
  slicethickness_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  studyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  studydescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientbirthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientsex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  institutionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_Series::~RT_TPS_Gallery_Series() {
  SharedDtor();
}

void RT_TPS_Gallery_Series::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (modality_ != &::google::protobuf::internal::kEmptyString) {
    delete modality_;
  }
  if (seriestime_ != &::google::protobuf::internal::kEmptyString) {
    delete seriestime_;
  }
  if (seriesdate_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesdate_;
  }
  if (seriesdescription_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesdescription_;
  }
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    delete patientposition_;
  }
  if (imageslicebuffer_ != &::google::protobuf::internal::kEmptyString) {
    delete imageslicebuffer_;
  }
  if (frameofreferenceuid_ != &::google::protobuf::internal::kEmptyString) {
    delete frameofreferenceuid_;
  }
  if (manufacturermodelname_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturermodelname_;
  }
  if (slicethickness_ != &::google::protobuf::internal::kEmptyString) {
    delete slicethickness_;
  }
  if (studyid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyid_;
  }
  if (studydescription_ != &::google::protobuf::internal::kEmptyString) {
    delete studydescription_;
  }
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientname_;
  }
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientbirthday_ != &::google::protobuf::internal::kEmptyString) {
    delete patientbirthday_;
  }
  if (patientage_ != &::google::protobuf::internal::kEmptyString) {
    delete patientage_;
  }
  if (patientsex_ != &::google::protobuf::internal::kEmptyString) {
    delete patientsex_;
  }
  if (institutionname_ != &::google::protobuf::internal::kEmptyString) {
    delete institutionname_;
  }
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_Series::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_Series::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_Series_descriptor_;
}

const RT_TPS_Gallery_Series& RT_TPS_Gallery_Series::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_Series* RT_TPS_Gallery_Series::default_instance_ = NULL;

RT_TPS_Gallery_Series* RT_TPS_Gallery_Series::New() const {
  return new RT_TPS_Gallery_Series;
}

void RT_TPS_Gallery_Series::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    windowingcenter_ = 0;
    windowingwidth_ = 0;
    slicecount_ = 0;
    xdimension_ = 0;
    ydimension_ = 0;
    xpixelspacing_ = 0;
    ypixelspacing_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    slicespacing_ = 0;
    if (has_modality()) {
      if (modality_ != &::google::protobuf::internal::kEmptyString) {
        modality_->clear();
      }
    }
    bitallocated_ = 0;
    if (has_seriestime()) {
      if (seriestime_ != &::google::protobuf::internal::kEmptyString) {
        seriestime_->clear();
      }
    }
    if (has_seriesdate()) {
      if (seriesdate_ != &::google::protobuf::internal::kEmptyString) {
        seriesdate_->clear();
      }
    }
    if (has_seriesdescription()) {
      if (seriesdescription_ != &::google::protobuf::internal::kEmptyString) {
        seriesdescription_->clear();
      }
    }
    if (has_patientposition()) {
      if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
        patientposition_->clear();
      }
    }
    if (has_imageslicebuffer()) {
      if (imageslicebuffer_ != &::google::protobuf::internal::kEmptyString) {
        imageslicebuffer_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    iscopied_ = false;
    seriesnumber_ = 0;
    if (has_frameofreferenceuid()) {
      if (frameofreferenceuid_ != &::google::protobuf::internal::kEmptyString) {
        frameofreferenceuid_->clear();
      }
    }
    if (has_manufacturermodelname()) {
      if (manufacturermodelname_ != &::google::protobuf::internal::kEmptyString) {
        manufacturermodelname_->clear();
      }
    }
    hasvoi_ = false;
    if (has_slicethickness()) {
      if (slicethickness_ != &::google::protobuf::internal::kEmptyString) {
        slicethickness_->clear();
      }
    }
    if (has_studyid()) {
      if (studyid_ != &::google::protobuf::internal::kEmptyString) {
        studyid_->clear();
      }
    }
    if (has_studydescription()) {
      if (studydescription_ != &::google::protobuf::internal::kEmptyString) {
        studydescription_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_patientname()) {
      if (patientname_ != &::google::protobuf::internal::kEmptyString) {
        patientname_->clear();
      }
    }
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    if (has_patientbirthday()) {
      if (patientbirthday_ != &::google::protobuf::internal::kEmptyString) {
        patientbirthday_->clear();
      }
    }
    if (has_patientage()) {
      if (patientage_ != &::google::protobuf::internal::kEmptyString) {
        patientage_->clear();
      }
    }
    if (has_patientsex()) {
      if (patientsex_ != &::google::protobuf::internal::kEmptyString) {
        patientsex_->clear();
      }
    }
    if (has_institutionname()) {
      if (institutionname_ != &::google::protobuf::internal::kEmptyString) {
        institutionname_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        manufacturer_->clear();
      }
    }
    if (has_groupuid()) {
      if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
        groupuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_Series::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seriesUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_windowingCenter;
        break;
      }
      
      // required float windowingCenter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_windowingCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windowingcenter_)));
          set_has_windowingcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_windowingWidth;
        break;
      }
      
      // required float windowingWidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_windowingWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windowingwidth_)));
          set_has_windowingwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sliceCount;
        break;
      }
      
      // required int32 sliceCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slicecount_)));
          set_has_slicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_xDimension;
        break;
      }
      
      // required int32 xDimension = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdimension_)));
          set_has_xdimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_yDimension;
        break;
      }
      
      // required int32 yDimension = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydimension_)));
          set_has_ydimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_xPixelSpacing;
        break;
      }
      
      // required float xPixelSpacing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xPixelSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpixelspacing_)));
          set_has_xpixelspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_yPixelSpacing;
        break;
      }
      
      // required float yPixelSpacing = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yPixelSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypixelspacing_)));
          set_has_ypixelspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sliceSpacing;
        break;
      }
      
      // required float sliceSpacing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sliceSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slicespacing_)));
          set_has_slicespacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_modality;
        break;
      }
      
      // optional string modality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modality().data(), this->modality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bitAllocated;
        break;
      }
      
      // optional int32 bitAllocated = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitAllocated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitallocated_)));
          set_has_bitallocated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_seriesTime;
        break;
      }
      
      // optional string seriesTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriestime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriestime().data(), this->seriestime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_seriesDate;
        break;
      }
      
      // optional string seriesDate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesdate().data(), this->seriesdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_seriesDescription;
        break;
      }
      
      // optional string seriesDescription = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesdescription().data(), this->seriesdescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_patientPosition;
        break;
      }
      
      // optional string patientPosition = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientposition().data(), this->patientposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_imageSliceBuffer;
        break;
      }
      
      // optional bytes imageSliceBuffer = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageSliceBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imageslicebuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isCopied;
        break;
      }
      
      // optional bool isCopied = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCopied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscopied_)));
          set_has_iscopied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_seriesNumber;
        break;
      }
      
      // optional int32 seriesNumber = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnumber_)));
          set_has_seriesnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_frameOfReferenceUID;
        break;
      }
      
      // optional string frameOfReferenceUID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameOfReferenceUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameofreferenceuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frameofreferenceuid().data(), this->frameofreferenceuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_ManufacturerModelName;
        break;
      }
      
      // optional string ManufacturerModelName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ManufacturerModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturermodelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturermodelname().data(), this->manufacturermodelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_hasVOI;
        break;
      }
      
      // required bool hasVOI = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasVOI:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasvoi_)));
          set_has_hasvoi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_sliceThickness;
        break;
      }
      
      // optional string sliceThickness = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sliceThickness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slicethickness()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slicethickness().data(), this->slicethickness().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_studyID;
        break;
      }
      
      // optional string studyID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_studyID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyid().data(), this->studyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_studyDescription;
        break;
      }
      
      // optional string studyDescription = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_studyDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studydescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studydescription().data(), this->studydescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_patientName;
        break;
      }
      
      // optional string patientName = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientname().data(), this->patientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_patientID;
        break;
      }
      
      // optional string patientID = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_patientBirthday;
        break;
      }
      
      // optional string patientBirthday = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientBirthday:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientbirthday()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientbirthday().data(), this->patientbirthday().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_patientAge;
        break;
      }
      
      // optional string patientAge = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientAge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientage().data(), this->patientage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_patientSex;
        break;
      }
      
      // optional string patientSex = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientSex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientsex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientsex().data(), this->patientsex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_institutionName;
        break;
      }
      
      // optional string institutionName = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_institutionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_institutionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->institutionname().data(), this->institutionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_manufacturer;
        break;
      }
      
      // optional string manufacturer = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_groupUID;
        break;
      }
      
      // optional string groupUID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupuid().data(), this->groupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_Series::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seriesuid(), output);
  }
  
  // required float windowingCenter = 2;
  if (has_windowingcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->windowingcenter(), output);
  }
  
  // required float windowingWidth = 3;
  if (has_windowingwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->windowingwidth(), output);
  }
  
  // required int32 sliceCount = 4;
  if (has_slicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->slicecount(), output);
  }
  
  // required int32 xDimension = 5;
  if (has_xdimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xdimension(), output);
  }
  
  // required int32 yDimension = 6;
  if (has_ydimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ydimension(), output);
  }
  
  // required float xPixelSpacing = 7;
  if (has_xpixelspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->xpixelspacing(), output);
  }
  
  // required float yPixelSpacing = 8;
  if (has_ypixelspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ypixelspacing(), output);
  }
  
  // required float sliceSpacing = 9;
  if (has_slicespacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->slicespacing(), output);
  }
  
  // optional string modality = 10;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->modality(), output);
  }
  
  // optional int32 bitAllocated = 11;
  if (has_bitallocated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bitallocated(), output);
  }
  
  // optional string seriesTime = 12;
  if (has_seriestime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriestime().data(), this->seriestime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->seriestime(), output);
  }
  
  // optional string seriesDate = 13;
  if (has_seriesdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdate().data(), this->seriesdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->seriesdate(), output);
  }
  
  // optional string seriesDescription = 14;
  if (has_seriesdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdescription().data(), this->seriesdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->seriesdescription(), output);
  }
  
  // optional string patientPosition = 15;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->patientposition(), output);
  }
  
  // optional bytes imageSliceBuffer = 16;
  if (has_imageslicebuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->imageslicebuffer(), output);
  }
  
  // optional bool isCopied = 17;
  if (has_iscopied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->iscopied(), output);
  }
  
  // optional int32 seriesNumber = 18;
  if (has_seriesnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->seriesnumber(), output);
  }
  
  // optional string frameOfReferenceUID = 19;
  if (has_frameofreferenceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameofreferenceuid().data(), this->frameofreferenceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->frameofreferenceuid(), output);
  }
  
  // optional string ManufacturerModelName = 20;
  if (has_manufacturermodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturermodelname().data(), this->manufacturermodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->manufacturermodelname(), output);
  }
  
  // required bool hasVOI = 21;
  if (has_hasvoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->hasvoi(), output);
  }
  
  // optional string sliceThickness = 22;
  if (has_slicethickness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slicethickness().data(), this->slicethickness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->slicethickness(), output);
  }
  
  // optional string studyID = 23;
  if (has_studyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyid().data(), this->studyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->studyid(), output);
  }
  
  // optional string studyDescription = 24;
  if (has_studydescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studydescription().data(), this->studydescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->studydescription(), output);
  }
  
  // optional string patientName = 25;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->patientname(), output);
  }
  
  // optional string patientID = 26;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->patientid(), output);
  }
  
  // optional string patientBirthday = 27;
  if (has_patientbirthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthday().data(), this->patientbirthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->patientbirthday(), output);
  }
  
  // optional string patientAge = 28;
  if (has_patientage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientage().data(), this->patientage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->patientage(), output);
  }
  
  // optional string patientSex = 29;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientsex().data(), this->patientsex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->patientsex(), output);
  }
  
  // optional string institutionName = 30;
  if (has_institutionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->institutionname().data(), this->institutionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->institutionname(), output);
  }
  
  // optional string manufacturer = 31;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->manufacturer(), output);
  }
  
  // optional string groupUID = 32;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->groupuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_Series::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seriesuid(), target);
  }
  
  // required float windowingCenter = 2;
  if (has_windowingcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->windowingcenter(), target);
  }
  
  // required float windowingWidth = 3;
  if (has_windowingwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->windowingwidth(), target);
  }
  
  // required int32 sliceCount = 4;
  if (has_slicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->slicecount(), target);
  }
  
  // required int32 xDimension = 5;
  if (has_xdimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xdimension(), target);
  }
  
  // required int32 yDimension = 6;
  if (has_ydimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ydimension(), target);
  }
  
  // required float xPixelSpacing = 7;
  if (has_xpixelspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->xpixelspacing(), target);
  }
  
  // required float yPixelSpacing = 8;
  if (has_ypixelspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ypixelspacing(), target);
  }
  
  // required float sliceSpacing = 9;
  if (has_slicespacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->slicespacing(), target);
  }
  
  // optional string modality = 10;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->modality(), target);
  }
  
  // optional int32 bitAllocated = 11;
  if (has_bitallocated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bitallocated(), target);
  }
  
  // optional string seriesTime = 12;
  if (has_seriestime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriestime().data(), this->seriestime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->seriestime(), target);
  }
  
  // optional string seriesDate = 13;
  if (has_seriesdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdate().data(), this->seriesdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->seriesdate(), target);
  }
  
  // optional string seriesDescription = 14;
  if (has_seriesdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdescription().data(), this->seriesdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->seriesdescription(), target);
  }
  
  // optional string patientPosition = 15;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->patientposition(), target);
  }
  
  // optional bytes imageSliceBuffer = 16;
  if (has_imageslicebuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->imageslicebuffer(), target);
  }
  
  // optional bool isCopied = 17;
  if (has_iscopied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->iscopied(), target);
  }
  
  // optional int32 seriesNumber = 18;
  if (has_seriesnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->seriesnumber(), target);
  }
  
  // optional string frameOfReferenceUID = 19;
  if (has_frameofreferenceuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameofreferenceuid().data(), this->frameofreferenceuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->frameofreferenceuid(), target);
  }
  
  // optional string ManufacturerModelName = 20;
  if (has_manufacturermodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturermodelname().data(), this->manufacturermodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->manufacturermodelname(), target);
  }
  
  // required bool hasVOI = 21;
  if (has_hasvoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->hasvoi(), target);
  }
  
  // optional string sliceThickness = 22;
  if (has_slicethickness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slicethickness().data(), this->slicethickness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->slicethickness(), target);
  }
  
  // optional string studyID = 23;
  if (has_studyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyid().data(), this->studyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->studyid(), target);
  }
  
  // optional string studyDescription = 24;
  if (has_studydescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studydescription().data(), this->studydescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->studydescription(), target);
  }
  
  // optional string patientName = 25;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->patientname(), target);
  }
  
  // optional string patientID = 26;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->patientid(), target);
  }
  
  // optional string patientBirthday = 27;
  if (has_patientbirthday()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthday().data(), this->patientbirthday().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->patientbirthday(), target);
  }
  
  // optional string patientAge = 28;
  if (has_patientage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientage().data(), this->patientage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->patientage(), target);
  }
  
  // optional string patientSex = 29;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientsex().data(), this->patientsex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->patientsex(), target);
  }
  
  // optional string institutionName = 30;
  if (has_institutionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->institutionname().data(), this->institutionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->institutionname(), target);
  }
  
  // optional string manufacturer = 31;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->manufacturer(), target);
  }
  
  // optional string groupUID = 32;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->groupuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_Series::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seriesUID = 1;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required float windowingCenter = 2;
    if (has_windowingcenter()) {
      total_size += 1 + 4;
    }
    
    // required float windowingWidth = 3;
    if (has_windowingwidth()) {
      total_size += 1 + 4;
    }
    
    // required int32 sliceCount = 4;
    if (has_slicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slicecount());
    }
    
    // required int32 xDimension = 5;
    if (has_xdimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdimension());
    }
    
    // required int32 yDimension = 6;
    if (has_ydimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydimension());
    }
    
    // required float xPixelSpacing = 7;
    if (has_xpixelspacing()) {
      total_size += 1 + 4;
    }
    
    // required float yPixelSpacing = 8;
    if (has_ypixelspacing()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float sliceSpacing = 9;
    if (has_slicespacing()) {
      total_size += 1 + 4;
    }
    
    // optional string modality = 10;
    if (has_modality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modality());
    }
    
    // optional int32 bitAllocated = 11;
    if (has_bitallocated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitallocated());
    }
    
    // optional string seriesTime = 12;
    if (has_seriestime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriestime());
    }
    
    // optional string seriesDate = 13;
    if (has_seriesdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesdate());
    }
    
    // optional string seriesDescription = 14;
    if (has_seriesdescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesdescription());
    }
    
    // optional string patientPosition = 15;
    if (has_patientposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientposition());
    }
    
    // optional bytes imageSliceBuffer = 16;
    if (has_imageslicebuffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imageslicebuffer());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool isCopied = 17;
    if (has_iscopied()) {
      total_size += 2 + 1;
    }
    
    // optional int32 seriesNumber = 18;
    if (has_seriesnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnumber());
    }
    
    // optional string frameOfReferenceUID = 19;
    if (has_frameofreferenceuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frameofreferenceuid());
    }
    
    // optional string ManufacturerModelName = 20;
    if (has_manufacturermodelname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturermodelname());
    }
    
    // required bool hasVOI = 21;
    if (has_hasvoi()) {
      total_size += 2 + 1;
    }
    
    // optional string sliceThickness = 22;
    if (has_slicethickness()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slicethickness());
    }
    
    // optional string studyID = 23;
    if (has_studyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyid());
    }
    
    // optional string studyDescription = 24;
    if (has_studydescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studydescription());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string patientName = 25;
    if (has_patientname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientname());
    }
    
    // optional string patientID = 26;
    if (has_patientid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }
    
    // optional string patientBirthday = 27;
    if (has_patientbirthday()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientbirthday());
    }
    
    // optional string patientAge = 28;
    if (has_patientage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientage());
    }
    
    // optional string patientSex = 29;
    if (has_patientsex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientsex());
    }
    
    // optional string institutionName = 30;
    if (has_institutionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->institutionname());
    }
    
    // optional string manufacturer = 31;
    if (has_manufacturer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }
    
    // optional string groupUID = 32;
    if (has_groupuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_Series::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_Series* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_Series*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_Series::MergeFrom(const RT_TPS_Gallery_Series& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_windowingcenter()) {
      set_windowingcenter(from.windowingcenter());
    }
    if (from.has_windowingwidth()) {
      set_windowingwidth(from.windowingwidth());
    }
    if (from.has_slicecount()) {
      set_slicecount(from.slicecount());
    }
    if (from.has_xdimension()) {
      set_xdimension(from.xdimension());
    }
    if (from.has_ydimension()) {
      set_ydimension(from.ydimension());
    }
    if (from.has_xpixelspacing()) {
      set_xpixelspacing(from.xpixelspacing());
    }
    if (from.has_ypixelspacing()) {
      set_ypixelspacing(from.ypixelspacing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_slicespacing()) {
      set_slicespacing(from.slicespacing());
    }
    if (from.has_modality()) {
      set_modality(from.modality());
    }
    if (from.has_bitallocated()) {
      set_bitallocated(from.bitallocated());
    }
    if (from.has_seriestime()) {
      set_seriestime(from.seriestime());
    }
    if (from.has_seriesdate()) {
      set_seriesdate(from.seriesdate());
    }
    if (from.has_seriesdescription()) {
      set_seriesdescription(from.seriesdescription());
    }
    if (from.has_patientposition()) {
      set_patientposition(from.patientposition());
    }
    if (from.has_imageslicebuffer()) {
      set_imageslicebuffer(from.imageslicebuffer());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iscopied()) {
      set_iscopied(from.iscopied());
    }
    if (from.has_seriesnumber()) {
      set_seriesnumber(from.seriesnumber());
    }
    if (from.has_frameofreferenceuid()) {
      set_frameofreferenceuid(from.frameofreferenceuid());
    }
    if (from.has_manufacturermodelname()) {
      set_manufacturermodelname(from.manufacturermodelname());
    }
    if (from.has_hasvoi()) {
      set_hasvoi(from.hasvoi());
    }
    if (from.has_slicethickness()) {
      set_slicethickness(from.slicethickness());
    }
    if (from.has_studyid()) {
      set_studyid(from.studyid());
    }
    if (from.has_studydescription()) {
      set_studydescription(from.studydescription());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_patientname()) {
      set_patientname(from.patientname());
    }
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientbirthday()) {
      set_patientbirthday(from.patientbirthday());
    }
    if (from.has_patientage()) {
      set_patientage(from.patientage());
    }
    if (from.has_patientsex()) {
      set_patientsex(from.patientsex());
    }
    if (from.has_institutionname()) {
      set_institutionname(from.institutionname());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_groupuid()) {
      set_groupuid(from.groupuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_Series::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_Series::CopyFrom(const RT_TPS_Gallery_Series& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_Series::IsInitialized() const {
  if ((_has_bits_[0] & 0x001001ff) != 0x001001ff) return false;
  
  return true;
}

void RT_TPS_Gallery_Series::Swap(RT_TPS_Gallery_Series* other) {
  if (other != this) {
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(windowingcenter_, other->windowingcenter_);
    std::swap(windowingwidth_, other->windowingwidth_);
    std::swap(slicecount_, other->slicecount_);
    std::swap(xdimension_, other->xdimension_);
    std::swap(ydimension_, other->ydimension_);
    std::swap(xpixelspacing_, other->xpixelspacing_);
    std::swap(ypixelspacing_, other->ypixelspacing_);
    std::swap(slicespacing_, other->slicespacing_);
    std::swap(modality_, other->modality_);
    std::swap(bitallocated_, other->bitallocated_);
    std::swap(seriestime_, other->seriestime_);
    std::swap(seriesdate_, other->seriesdate_);
    std::swap(seriesdescription_, other->seriesdescription_);
    std::swap(patientposition_, other->patientposition_);
    std::swap(imageslicebuffer_, other->imageslicebuffer_);
    std::swap(iscopied_, other->iscopied_);
    std::swap(seriesnumber_, other->seriesnumber_);
    std::swap(frameofreferenceuid_, other->frameofreferenceuid_);
    std::swap(manufacturermodelname_, other->manufacturermodelname_);
    std::swap(hasvoi_, other->hasvoi_);
    std::swap(slicethickness_, other->slicethickness_);
    std::swap(studyid_, other->studyid_);
    std::swap(studydescription_, other->studydescription_);
    std::swap(patientname_, other->patientname_);
    std::swap(patientid_, other->patientid_);
    std::swap(patientbirthday_, other->patientbirthday_);
    std::swap(patientage_, other->patientage_);
    std::swap(patientsex_, other->patientsex_);
    std::swap(institutionname_, other->institutionname_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(groupuid_, other->groupuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_Series::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_Series_descriptor_;
  metadata.reflection = RT_TPS_Gallery_Series_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_SeriesGroup::kGroupUIDFieldNumber;
const int RT_TPS_Gallery_SeriesGroup::kGroupNameFieldNumber;
const int RT_TPS_Gallery_SeriesGroup::kGroupTypeFieldNumber;
const int RT_TPS_Gallery_SeriesGroup::kMainSeriesFieldNumber;
const int RT_TPS_Gallery_SeriesGroup::kSeriesListFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_SeriesGroup::RT_TPS_Gallery_SeriesGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_SeriesGroup::InitAsDefaultInstance() {
}

RT_TPS_Gallery_SeriesGroup::RT_TPS_Gallery_SeriesGroup(const RT_TPS_Gallery_SeriesGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_SeriesGroup::SharedCtor() {
  _cached_size_ = 0;
  groupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  grouptype_ = 0;
  mainseries_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_SeriesGroup::~RT_TPS_Gallery_SeriesGroup() {
  SharedDtor();
}

void RT_TPS_Gallery_SeriesGroup::SharedDtor() {
  if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupuid_;
  }
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    delete groupname_;
  }
  if (mainseries_ != &::google::protobuf::internal::kEmptyString) {
    delete mainseries_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_SeriesGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SeriesGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_SeriesGroup_descriptor_;
}

const RT_TPS_Gallery_SeriesGroup& RT_TPS_Gallery_SeriesGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_SeriesGroup::default_instance_ = NULL;

RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_SeriesGroup::New() const {
  return new RT_TPS_Gallery_SeriesGroup;
}

void RT_TPS_Gallery_SeriesGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupuid()) {
      if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
        groupuid_->clear();
      }
    }
    if (has_groupname()) {
      if (groupname_ != &::google::protobuf::internal::kEmptyString) {
        groupname_->clear();
      }
    }
    grouptype_ = 0;
    if (has_mainseries()) {
      if (mainseries_ != &::google::protobuf::internal::kEmptyString) {
        mainseries_->clear();
      }
    }
  }
  serieslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_SeriesGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupuid().data(), this->groupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupName;
        break;
      }
      
      // optional string groupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupname().data(), this->groupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_groupType;
        break;
      }
      
      // optional int32 groupType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouptype_)));
          set_has_grouptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_mainSeries;
        break;
      }
      
      // optional string mainSeries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainSeries:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mainseries()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mainseries().data(), this->mainseries().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_seriesList;
        break;
      }
      
      // repeated string seriesList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_serieslist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->serieslist(0).data(), this->serieslist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_seriesList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_SeriesGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string groupUID = 1;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupuid(), output);
  }
  
  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupname(), output);
  }
  
  // optional int32 groupType = 3;
  if (has_grouptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->grouptype(), output);
  }
  
  // optional string mainSeries = 4;
  if (has_mainseries()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainseries().data(), this->mainseries().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->mainseries(), output);
  }
  
  // repeated string seriesList = 5;
  for (int i = 0; i < this->serieslist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->serieslist(i).data(), this->serieslist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->serieslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_SeriesGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string groupUID = 1;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupuid(), target);
  }
  
  // optional string groupName = 2;
  if (has_groupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupname().data(), this->groupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupname(), target);
  }
  
  // optional int32 groupType = 3;
  if (has_grouptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->grouptype(), target);
  }
  
  // optional string mainSeries = 4;
  if (has_mainseries()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mainseries().data(), this->mainseries().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->mainseries(), target);
  }
  
  // repeated string seriesList = 5;
  for (int i = 0; i < this->serieslist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->serieslist(i).data(), this->serieslist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->serieslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_SeriesGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string groupUID = 1;
    if (has_groupuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupuid());
    }
    
    // optional string groupName = 2;
    if (has_groupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupname());
    }
    
    // optional int32 groupType = 3;
    if (has_grouptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouptype());
    }
    
    // optional string mainSeries = 4;
    if (has_mainseries()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mainseries());
    }
    
  }
  // repeated string seriesList = 5;
  total_size += 1 * this->serieslist_size();
  for (int i = 0; i < this->serieslist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->serieslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_SeriesGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_SeriesGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_SeriesGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_SeriesGroup::MergeFrom(const RT_TPS_Gallery_SeriesGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  serieslist_.MergeFrom(from.serieslist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupuid()) {
      set_groupuid(from.groupuid());
    }
    if (from.has_groupname()) {
      set_groupname(from.groupname());
    }
    if (from.has_grouptype()) {
      set_grouptype(from.grouptype());
    }
    if (from.has_mainseries()) {
      set_mainseries(from.mainseries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_SeriesGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_SeriesGroup::CopyFrom(const RT_TPS_Gallery_SeriesGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_SeriesGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RT_TPS_Gallery_SeriesGroup::Swap(RT_TPS_Gallery_SeriesGroup* other) {
  if (other != this) {
    std::swap(groupuid_, other->groupuid_);
    std::swap(groupname_, other->groupname_);
    std::swap(grouptype_, other->grouptype_);
    std::swap(mainseries_, other->mainseries_);
    serieslist_.Swap(&other->serieslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_SeriesGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_SeriesGroup_descriptor_;
  metadata.reflection = RT_TPS_Gallery_SeriesGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_RepeatedSeriesGroup::kSeriesGroupFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_RepeatedSeriesGroup::RT_TPS_Gallery_RepeatedSeriesGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_RepeatedSeriesGroup::InitAsDefaultInstance() {
}

RT_TPS_Gallery_RepeatedSeriesGroup::RT_TPS_Gallery_RepeatedSeriesGroup(const RT_TPS_Gallery_RepeatedSeriesGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_RepeatedSeriesGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_RepeatedSeriesGroup::~RT_TPS_Gallery_RepeatedSeriesGroup() {
  SharedDtor();
}

void RT_TPS_Gallery_RepeatedSeriesGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_RepeatedSeriesGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_RepeatedSeriesGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_;
}

const RT_TPS_Gallery_RepeatedSeriesGroup& RT_TPS_Gallery_RepeatedSeriesGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_RepeatedSeriesGroup* RT_TPS_Gallery_RepeatedSeriesGroup::default_instance_ = NULL;

RT_TPS_Gallery_RepeatedSeriesGroup* RT_TPS_Gallery_RepeatedSeriesGroup::New() const {
  return new RT_TPS_Gallery_RepeatedSeriesGroup;
}

void RT_TPS_Gallery_RepeatedSeriesGroup::Clear() {
  series_group_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_RepeatedSeriesGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_series_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_series_group()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_series_group;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_RepeatedSeriesGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
  for (int i = 0; i < this->series_group_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->series_group(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_RepeatedSeriesGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
  for (int i = 0; i < this->series_group_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->series_group(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_RepeatedSeriesGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
  total_size += 1 * this->series_group_size();
  for (int i = 0; i < this->series_group_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->series_group(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_RepeatedSeriesGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_RepeatedSeriesGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_RepeatedSeriesGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_RepeatedSeriesGroup::MergeFrom(const RT_TPS_Gallery_RepeatedSeriesGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  series_group_.MergeFrom(from.series_group_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_RepeatedSeriesGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_RepeatedSeriesGroup::CopyFrom(const RT_TPS_Gallery_RepeatedSeriesGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_RepeatedSeriesGroup::IsInitialized() const {
  
  for (int i = 0; i < series_group_size(); i++) {
    if (!this->series_group(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_Gallery_RepeatedSeriesGroup::Swap(RT_TPS_Gallery_RepeatedSeriesGroup* other) {
  if (other != this) {
    series_group_.Swap(&other->series_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_RepeatedSeriesGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_RepeatedSeriesGroup_descriptor_;
  metadata.reflection = RT_TPS_Gallery_RepeatedSeriesGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_CornerInfo::kPatientnameFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kSeriesnameFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kSeriesdatetimeFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kPatientpositionFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kValueFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kDensityFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kPixelpositionxFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kPixelpositionyFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kPixelpositionzFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kWindowwidthFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kWindowcenterFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kSlicenumberFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kTotalslicenumberFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kSlicethicknessFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kIsvaluevalidFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kModalityFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kZoomfactorFieldNumber;
const int RT_TPS_Gallery_CornerInfo::kRotateFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_CornerInfo::RT_TPS_Gallery_CornerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_CornerInfo::InitAsDefaultInstance() {
}

RT_TPS_Gallery_CornerInfo::RT_TPS_Gallery_CornerInfo(const RT_TPS_Gallery_CornerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_CornerInfo::SharedCtor() {
  _cached_size_ = 0;
  patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  density_ = 0;
  pixelpositionx_ = 0;
  pixelpositiony_ = 0;
  pixelpositionz_ = 0;
  windowwidth_ = 0;
  windowcenter_ = 0;
  slicenumber_ = 0;
  totalslicenumber_ = 0;
  slicethickness_ = 0;
  isvaluevalid_ = false;
  modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoomfactor_ = 0;
  rotate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_CornerInfo::~RT_TPS_Gallery_CornerInfo() {
  SharedDtor();
}

void RT_TPS_Gallery_CornerInfo::SharedDtor() {
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientname_;
  }
  if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesname_;
  }
  if (seriesdatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesdatetime_;
  }
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    delete patientposition_;
  }
  if (modality_ != &::google::protobuf::internal::kEmptyString) {
    delete modality_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_CornerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_CornerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_CornerInfo_descriptor_;
}

const RT_TPS_Gallery_CornerInfo& RT_TPS_Gallery_CornerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_CornerInfo* RT_TPS_Gallery_CornerInfo::default_instance_ = NULL;

RT_TPS_Gallery_CornerInfo* RT_TPS_Gallery_CornerInfo::New() const {
  return new RT_TPS_Gallery_CornerInfo;
}

void RT_TPS_Gallery_CornerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientname()) {
      if (patientname_ != &::google::protobuf::internal::kEmptyString) {
        patientname_->clear();
      }
    }
    if (has_seriesname()) {
      if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
        seriesname_->clear();
      }
    }
    if (has_seriesdatetime()) {
      if (seriesdatetime_ != &::google::protobuf::internal::kEmptyString) {
        seriesdatetime_->clear();
      }
    }
    if (has_patientposition()) {
      if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
        patientposition_->clear();
      }
    }
    value_ = 0;
    density_ = 0;
    pixelpositionx_ = 0;
    pixelpositiony_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pixelpositionz_ = 0;
    windowwidth_ = 0;
    windowcenter_ = 0;
    slicenumber_ = 0;
    totalslicenumber_ = 0;
    slicethickness_ = 0;
    isvaluevalid_ = false;
    if (has_modality()) {
      if (modality_ != &::google::protobuf::internal::kEmptyString) {
        modality_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    zoomfactor_ = 0;
    rotate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_CornerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string patientname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientname().data(), this->patientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesname;
        break;
      }
      
      // optional string seriesname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesname().data(), this->seriesname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seriesdatetime;
        break;
      }
      
      // optional string seriesdatetime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesdatetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesdatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesdatetime().data(), this->seriesdatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_patientposition;
        break;
      }
      
      // optional string patientposition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientposition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientposition().data(), this->patientposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_value;
        break;
      }
      
      // optional double value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_density;
        break;
      }
      
      // optional double density = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_pixelpositionx;
        break;
      }
      
      // optional double pixelpositionx = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pixelpositionx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixelpositionx_)));
          set_has_pixelpositionx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_pixelpositiony;
        break;
      }
      
      // optional double pixelpositiony = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pixelpositiony:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixelpositiony_)));
          set_has_pixelpositiony();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_pixelpositionz;
        break;
      }
      
      // optional double pixelpositionz = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pixelpositionz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pixelpositionz_)));
          set_has_pixelpositionz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_windowwidth;
        break;
      }
      
      // optional double windowwidth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_windowwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &windowwidth_)));
          set_has_windowwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_windowcenter;
        break;
      }
      
      // optional double windowcenter = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_windowcenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &windowcenter_)));
          set_has_windowcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_slicenumber;
        break;
      }
      
      // optional int32 slicenumber = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slicenumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slicenumber_)));
          set_has_slicenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_totalslicenumber;
        break;
      }
      
      // optional int32 totalslicenumber = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalslicenumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalslicenumber_)));
          set_has_totalslicenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_slicethickness;
        break;
      }
      
      // optional double slicethickness = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_slicethickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &slicethickness_)));
          set_has_slicethickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isvaluevalid;
        break;
      }
      
      // optional bool isvaluevalid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvaluevalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvaluevalid_)));
          set_has_isvaluevalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_modality;
        break;
      }
      
      // optional string modality = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modality().data(), this->modality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_zoomfactor;
        break;
      }
      
      // optional double zoomfactor = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_zoomfactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoomfactor_)));
          set_has_zoomfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_rotate;
        break;
      }
      
      // optional double rotate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rotate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rotate_)));
          set_has_rotate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_CornerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string patientname = 1;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->patientname(), output);
  }
  
  // optional string seriesname = 2;
  if (has_seriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname().data(), this->seriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seriesname(), output);
  }
  
  // optional string seriesdatetime = 3;
  if (has_seriesdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdatetime().data(), this->seriesdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seriesdatetime(), output);
  }
  
  // optional string patientposition = 4;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->patientposition(), output);
  }
  
  // optional double value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->value(), output);
  }
  
  // optional double density = 6;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->density(), output);
  }
  
  // optional double pixelpositionx = 7;
  if (has_pixelpositionx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->pixelpositionx(), output);
  }
  
  // optional double pixelpositiony = 8;
  if (has_pixelpositiony()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pixelpositiony(), output);
  }
  
  // optional double pixelpositionz = 9;
  if (has_pixelpositionz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pixelpositionz(), output);
  }
  
  // optional double windowwidth = 10;
  if (has_windowwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->windowwidth(), output);
  }
  
  // optional double windowcenter = 11;
  if (has_windowcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->windowcenter(), output);
  }
  
  // optional int32 slicenumber = 12;
  if (has_slicenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->slicenumber(), output);
  }
  
  // optional int32 totalslicenumber = 13;
  if (has_totalslicenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->totalslicenumber(), output);
  }
  
  // optional double slicethickness = 14;
  if (has_slicethickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->slicethickness(), output);
  }
  
  // optional bool isvaluevalid = 15;
  if (has_isvaluevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isvaluevalid(), output);
  }
  
  // optional string modality = 16;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->modality(), output);
  }
  
  // optional double zoomfactor = 17;
  if (has_zoomfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->zoomfactor(), output);
  }
  
  // optional double rotate = 18;
  if (has_rotate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->rotate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_CornerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string patientname = 1;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patientname(), target);
  }
  
  // optional string seriesname = 2;
  if (has_seriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname().data(), this->seriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesname(), target);
  }
  
  // optional string seriesdatetime = 3;
  if (has_seriesdatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdatetime().data(), this->seriesdatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seriesdatetime(), target);
  }
  
  // optional string patientposition = 4;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->patientposition(), target);
  }
  
  // optional double value = 5;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->value(), target);
  }
  
  // optional double density = 6;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->density(), target);
  }
  
  // optional double pixelpositionx = 7;
  if (has_pixelpositionx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->pixelpositionx(), target);
  }
  
  // optional double pixelpositiony = 8;
  if (has_pixelpositiony()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pixelpositiony(), target);
  }
  
  // optional double pixelpositionz = 9;
  if (has_pixelpositionz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pixelpositionz(), target);
  }
  
  // optional double windowwidth = 10;
  if (has_windowwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->windowwidth(), target);
  }
  
  // optional double windowcenter = 11;
  if (has_windowcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->windowcenter(), target);
  }
  
  // optional int32 slicenumber = 12;
  if (has_slicenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->slicenumber(), target);
  }
  
  // optional int32 totalslicenumber = 13;
  if (has_totalslicenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->totalslicenumber(), target);
  }
  
  // optional double slicethickness = 14;
  if (has_slicethickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->slicethickness(), target);
  }
  
  // optional bool isvaluevalid = 15;
  if (has_isvaluevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isvaluevalid(), target);
  }
  
  // optional string modality = 16;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->modality(), target);
  }
  
  // optional double zoomfactor = 17;
  if (has_zoomfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->zoomfactor(), target);
  }
  
  // optional double rotate = 18;
  if (has_rotate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->rotate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_CornerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string patientname = 1;
    if (has_patientname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientname());
    }
    
    // optional string seriesname = 2;
    if (has_seriesname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesname());
    }
    
    // optional string seriesdatetime = 3;
    if (has_seriesdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesdatetime());
    }
    
    // optional string patientposition = 4;
    if (has_patientposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientposition());
    }
    
    // optional double value = 5;
    if (has_value()) {
      total_size += 1 + 8;
    }
    
    // optional double density = 6;
    if (has_density()) {
      total_size += 1 + 8;
    }
    
    // optional double pixelpositionx = 7;
    if (has_pixelpositionx()) {
      total_size += 1 + 8;
    }
    
    // optional double pixelpositiony = 8;
    if (has_pixelpositiony()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double pixelpositionz = 9;
    if (has_pixelpositionz()) {
      total_size += 1 + 8;
    }
    
    // optional double windowwidth = 10;
    if (has_windowwidth()) {
      total_size += 1 + 8;
    }
    
    // optional double windowcenter = 11;
    if (has_windowcenter()) {
      total_size += 1 + 8;
    }
    
    // optional int32 slicenumber = 12;
    if (has_slicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slicenumber());
    }
    
    // optional int32 totalslicenumber = 13;
    if (has_totalslicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalslicenumber());
    }
    
    // optional double slicethickness = 14;
    if (has_slicethickness()) {
      total_size += 1 + 8;
    }
    
    // optional bool isvaluevalid = 15;
    if (has_isvaluevalid()) {
      total_size += 1 + 1;
    }
    
    // optional string modality = 16;
    if (has_modality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modality());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double zoomfactor = 17;
    if (has_zoomfactor()) {
      total_size += 2 + 8;
    }
    
    // optional double rotate = 18;
    if (has_rotate()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_CornerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_CornerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_CornerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_CornerInfo::MergeFrom(const RT_TPS_Gallery_CornerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientname()) {
      set_patientname(from.patientname());
    }
    if (from.has_seriesname()) {
      set_seriesname(from.seriesname());
    }
    if (from.has_seriesdatetime()) {
      set_seriesdatetime(from.seriesdatetime());
    }
    if (from.has_patientposition()) {
      set_patientposition(from.patientposition());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
    if (from.has_pixelpositionx()) {
      set_pixelpositionx(from.pixelpositionx());
    }
    if (from.has_pixelpositiony()) {
      set_pixelpositiony(from.pixelpositiony());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pixelpositionz()) {
      set_pixelpositionz(from.pixelpositionz());
    }
    if (from.has_windowwidth()) {
      set_windowwidth(from.windowwidth());
    }
    if (from.has_windowcenter()) {
      set_windowcenter(from.windowcenter());
    }
    if (from.has_slicenumber()) {
      set_slicenumber(from.slicenumber());
    }
    if (from.has_totalslicenumber()) {
      set_totalslicenumber(from.totalslicenumber());
    }
    if (from.has_slicethickness()) {
      set_slicethickness(from.slicethickness());
    }
    if (from.has_isvaluevalid()) {
      set_isvaluevalid(from.isvaluevalid());
    }
    if (from.has_modality()) {
      set_modality(from.modality());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_zoomfactor()) {
      set_zoomfactor(from.zoomfactor());
    }
    if (from.has_rotate()) {
      set_rotate(from.rotate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_CornerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_CornerInfo::CopyFrom(const RT_TPS_Gallery_CornerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_CornerInfo::IsInitialized() const {
  
  return true;
}

void RT_TPS_Gallery_CornerInfo::Swap(RT_TPS_Gallery_CornerInfo* other) {
  if (other != this) {
    std::swap(patientname_, other->patientname_);
    std::swap(seriesname_, other->seriesname_);
    std::swap(seriesdatetime_, other->seriesdatetime_);
    std::swap(patientposition_, other->patientposition_);
    std::swap(value_, other->value_);
    std::swap(density_, other->density_);
    std::swap(pixelpositionx_, other->pixelpositionx_);
    std::swap(pixelpositiony_, other->pixelpositiony_);
    std::swap(pixelpositionz_, other->pixelpositionz_);
    std::swap(windowwidth_, other->windowwidth_);
    std::swap(windowcenter_, other->windowcenter_);
    std::swap(slicenumber_, other->slicenumber_);
    std::swap(totalslicenumber_, other->totalslicenumber_);
    std::swap(slicethickness_, other->slicethickness_);
    std::swap(isvaluevalid_, other->isvaluevalid_);
    std::swap(modality_, other->modality_);
    std::swap(zoomfactor_, other->zoomfactor_);
    std::swap(rotate_, other->rotate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_CornerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_CornerInfo_descriptor_;
  metadata.reflection = RT_TPS_Gallery_CornerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_CornerInfoVisible::kSeriesUIDFieldNumber;
const int RT_TPS_Gallery_CornerInfoVisible::kIsVisibleFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_CornerInfoVisible::RT_TPS_Gallery_CornerInfoVisible()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_CornerInfoVisible::InitAsDefaultInstance() {
}

RT_TPS_Gallery_CornerInfoVisible::RT_TPS_Gallery_CornerInfoVisible(const RT_TPS_Gallery_CornerInfoVisible& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_CornerInfoVisible::SharedCtor() {
  _cached_size_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvisible_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_CornerInfoVisible::~RT_TPS_Gallery_CornerInfoVisible() {
  SharedDtor();
}

void RT_TPS_Gallery_CornerInfoVisible::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_CornerInfoVisible::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_CornerInfoVisible::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_CornerInfoVisible_descriptor_;
}

const RT_TPS_Gallery_CornerInfoVisible& RT_TPS_Gallery_CornerInfoVisible::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_CornerInfoVisible* RT_TPS_Gallery_CornerInfoVisible::default_instance_ = NULL;

RT_TPS_Gallery_CornerInfoVisible* RT_TPS_Gallery_CornerInfoVisible::New() const {
  return new RT_TPS_Gallery_CornerInfoVisible;
}

void RT_TPS_Gallery_CornerInfoVisible::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    isvisible_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_CornerInfoVisible::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seriesUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isVisible;
        break;
      }
      
      // required bool isVisible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_CornerInfoVisible::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seriesuid(), output);
  }
  
  // required bool isVisible = 2;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isvisible(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_CornerInfoVisible::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seriesuid(), target);
  }
  
  // required bool isVisible = 2;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isvisible(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_CornerInfoVisible::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seriesUID = 1;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required bool isVisible = 2;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_CornerInfoVisible::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_CornerInfoVisible* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_CornerInfoVisible*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_CornerInfoVisible::MergeFrom(const RT_TPS_Gallery_CornerInfoVisible& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_CornerInfoVisible::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_CornerInfoVisible::CopyFrom(const RT_TPS_Gallery_CornerInfoVisible& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_CornerInfoVisible::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RT_TPS_Gallery_CornerInfoVisible::Swap(RT_TPS_Gallery_CornerInfoVisible* other) {
  if (other != this) {
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_CornerInfoVisible::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_CornerInfoVisible_descriptor_;
  metadata.reflection = RT_TPS_Gallery_CornerInfoVisible_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_ExpandSeries::kSeriesUIDFieldNumber;
const int RT_TPS_Gallery_ExpandSeries::kIsExpandBottomFieldNumber;
const int RT_TPS_Gallery_ExpandSeries::kSliceNumberFieldNumber;
const int RT_TPS_Gallery_ExpandSeries::kIsSaveAsNewSeriesFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_ExpandSeries::RT_TPS_Gallery_ExpandSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_ExpandSeries::InitAsDefaultInstance() {
}

RT_TPS_Gallery_ExpandSeries::RT_TPS_Gallery_ExpandSeries(const RT_TPS_Gallery_ExpandSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_ExpandSeries::SharedCtor() {
  _cached_size_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isexpandbottom_ = false;
  slicenumber_ = 0;
  issaveasnewseries_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_ExpandSeries::~RT_TPS_Gallery_ExpandSeries() {
  SharedDtor();
}

void RT_TPS_Gallery_ExpandSeries::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_ExpandSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_ExpandSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_ExpandSeries_descriptor_;
}

const RT_TPS_Gallery_ExpandSeries& RT_TPS_Gallery_ExpandSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_ExpandSeries* RT_TPS_Gallery_ExpandSeries::default_instance_ = NULL;

RT_TPS_Gallery_ExpandSeries* RT_TPS_Gallery_ExpandSeries::New() const {
  return new RT_TPS_Gallery_ExpandSeries;
}

void RT_TPS_Gallery_ExpandSeries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    isexpandbottom_ = false;
    slicenumber_ = 0;
    issaveasnewseries_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_ExpandSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seriesUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsExpandBottom;
        break;
      }
      
      // required bool IsExpandBottom = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsExpandBottom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexpandbottom_)));
          set_has_isexpandbottom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_SliceNumber;
        break;
      }
      
      // required int32 SliceNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SliceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slicenumber_)));
          set_has_slicenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsSaveAsNewSeries;
        break;
      }
      
      // required bool IsSaveAsNewSeries = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSaveAsNewSeries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issaveasnewseries_)));
          set_has_issaveasnewseries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_ExpandSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seriesuid(), output);
  }
  
  // required bool IsExpandBottom = 2;
  if (has_isexpandbottom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isexpandbottom(), output);
  }
  
  // required int32 SliceNumber = 3;
  if (has_slicenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->slicenumber(), output);
  }
  
  // required bool IsSaveAsNewSeries = 4;
  if (has_issaveasnewseries()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->issaveasnewseries(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_ExpandSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seriesuid(), target);
  }
  
  // required bool IsExpandBottom = 2;
  if (has_isexpandbottom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isexpandbottom(), target);
  }
  
  // required int32 SliceNumber = 3;
  if (has_slicenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->slicenumber(), target);
  }
  
  // required bool IsSaveAsNewSeries = 4;
  if (has_issaveasnewseries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->issaveasnewseries(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_ExpandSeries::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seriesUID = 1;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required bool IsExpandBottom = 2;
    if (has_isexpandbottom()) {
      total_size += 1 + 1;
    }
    
    // required int32 SliceNumber = 3;
    if (has_slicenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slicenumber());
    }
    
    // required bool IsSaveAsNewSeries = 4;
    if (has_issaveasnewseries()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_ExpandSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_ExpandSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_ExpandSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_ExpandSeries::MergeFrom(const RT_TPS_Gallery_ExpandSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_isexpandbottom()) {
      set_isexpandbottom(from.isexpandbottom());
    }
    if (from.has_slicenumber()) {
      set_slicenumber(from.slicenumber());
    }
    if (from.has_issaveasnewseries()) {
      set_issaveasnewseries(from.issaveasnewseries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_ExpandSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_ExpandSeries::CopyFrom(const RT_TPS_Gallery_ExpandSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_ExpandSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RT_TPS_Gallery_ExpandSeries::Swap(RT_TPS_Gallery_ExpandSeries* other) {
  if (other != this) {
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(isexpandbottom_, other->isexpandbottom_);
    std::swap(slicenumber_, other->slicenumber_);
    std::swap(issaveasnewseries_, other->issaveasnewseries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_ExpandSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_ExpandSeries_descriptor_;
  metadata.reflection = RT_TPS_Gallery_ExpandSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_SliceInfo::kCurrentSliceFieldNumber;
const int RT_TPS_Gallery_SliceInfo::kTotalSliceFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_SliceInfo::RT_TPS_Gallery_SliceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_SliceInfo::InitAsDefaultInstance() {
}

RT_TPS_Gallery_SliceInfo::RT_TPS_Gallery_SliceInfo(const RT_TPS_Gallery_SliceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_SliceInfo::SharedCtor() {
  _cached_size_ = 0;
  currentslice_ = 0;
  totalslice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_SliceInfo::~RT_TPS_Gallery_SliceInfo() {
  SharedDtor();
}

void RT_TPS_Gallery_SliceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_SliceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SliceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_SliceInfo_descriptor_;
}

const RT_TPS_Gallery_SliceInfo& RT_TPS_Gallery_SliceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_SliceInfo* RT_TPS_Gallery_SliceInfo::default_instance_ = NULL;

RT_TPS_Gallery_SliceInfo* RT_TPS_Gallery_SliceInfo::New() const {
  return new RT_TPS_Gallery_SliceInfo;
}

void RT_TPS_Gallery_SliceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentslice_ = 0;
    totalslice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_SliceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 currentSlice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentslice_)));
          set_has_currentslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalSlice;
        break;
      }
      
      // required int32 totalSlice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalslice_)));
          set_has_totalslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_SliceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 currentSlice = 1;
  if (has_currentslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentslice(), output);
  }
  
  // required int32 totalSlice = 2;
  if (has_totalslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalslice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_SliceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 currentSlice = 1;
  if (has_currentslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentslice(), target);
  }
  
  // required int32 totalSlice = 2;
  if (has_totalslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalslice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_SliceInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 currentSlice = 1;
    if (has_currentslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentslice());
    }
    
    // required int32 totalSlice = 2;
    if (has_totalslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalslice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_SliceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_SliceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_SliceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_SliceInfo::MergeFrom(const RT_TPS_Gallery_SliceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentslice()) {
      set_currentslice(from.currentslice());
    }
    if (from.has_totalslice()) {
      set_totalslice(from.totalslice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_SliceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_SliceInfo::CopyFrom(const RT_TPS_Gallery_SliceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_SliceInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RT_TPS_Gallery_SliceInfo::Swap(RT_TPS_Gallery_SliceInfo* other) {
  if (other != this) {
    std::swap(currentslice_, other->currentslice_);
    std::swap(totalslice_, other->totalslice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_SliceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_SliceInfo_descriptor_;
  metadata.reflection = RT_TPS_Gallery_SliceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Gallery_SaveSeries::kSeriesUIDFieldNumber;
const int RT_TPS_Gallery_SaveSeries::kIsSaveAsNewSeriesFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Gallery_SaveSeries::RT_TPS_Gallery_SaveSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Gallery_SaveSeries::InitAsDefaultInstance() {
}

RT_TPS_Gallery_SaveSeries::RT_TPS_Gallery_SaveSeries(const RT_TPS_Gallery_SaveSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Gallery_SaveSeries::SharedCtor() {
  _cached_size_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  issaveasnewseries_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Gallery_SaveSeries::~RT_TPS_Gallery_SaveSeries() {
  SharedDtor();
}

void RT_TPS_Gallery_SaveSeries::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Gallery_SaveSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Gallery_SaveSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Gallery_SaveSeries_descriptor_;
}

const RT_TPS_Gallery_SaveSeries& RT_TPS_Gallery_SaveSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();  return *default_instance_;
}

RT_TPS_Gallery_SaveSeries* RT_TPS_Gallery_SaveSeries::default_instance_ = NULL;

RT_TPS_Gallery_SaveSeries* RT_TPS_Gallery_SaveSeries::New() const {
  return new RT_TPS_Gallery_SaveSeries;
}

void RT_TPS_Gallery_SaveSeries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    issaveasnewseries_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Gallery_SaveSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seriesUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isSaveAsNewSeries;
        break;
      }
      
      // required bool isSaveAsNewSeries = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isSaveAsNewSeries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issaveasnewseries_)));
          set_has_issaveasnewseries();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Gallery_SaveSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seriesuid(), output);
  }
  
  // required bool isSaveAsNewSeries = 2;
  if (has_issaveasnewseries()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->issaveasnewseries(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Gallery_SaveSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seriesuid(), target);
  }
  
  // required bool isSaveAsNewSeries = 2;
  if (has_issaveasnewseries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->issaveasnewseries(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Gallery_SaveSeries::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seriesUID = 1;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required bool isSaveAsNewSeries = 2;
    if (has_issaveasnewseries()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Gallery_SaveSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Gallery_SaveSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Gallery_SaveSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Gallery_SaveSeries::MergeFrom(const RT_TPS_Gallery_SaveSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_issaveasnewseries()) {
      set_issaveasnewseries(from.issaveasnewseries());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Gallery_SaveSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Gallery_SaveSeries::CopyFrom(const RT_TPS_Gallery_SaveSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Gallery_SaveSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RT_TPS_Gallery_SaveSeries::Swap(RT_TPS_Gallery_SaveSeries* other) {
  if (other != this) {
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(issaveasnewseries_, other->issaveasnewseries_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Gallery_SaveSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Gallery_SaveSeries_descriptor_;
  metadata.reflection = RT_TPS_Gallery_SaveSeries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
