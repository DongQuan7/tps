// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_bolus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsBolus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsBolus_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fbolus_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fbolus_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_bolus.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsBolus_descriptor_ = file->message_type(0);
  static const int RtTpsBolus_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, bolusuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, bolusname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, planningrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, beam_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, bolus_thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, mass_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, reference_electron_density_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, margin_uniformed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, margin_x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, margin_x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, margin_y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, margin_y2_),
  };
  RtTpsBolus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsBolus_descriptor_,
      RtTpsBolus::default_instance_,
      RtTpsBolus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsBolus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsBolus));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fbolus_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsBolus_descriptor_, &RtTpsBolus::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fbolus_2eproto() {
  delete RtTpsBolus::default_instance_;
  delete RtTpsBolus_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fbolus_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022rt_tps_bolus.proto\022\ttps.proto\"\245\002\n\nRtTp"
    "sBolus\022\020\n\010bolusuid\030\001 \002(\t\022\021\n\tseriesuid\030\002 "
    "\002(\t\022\021\n\tbolusname\030\003 \002(\t\022\024\n\014planningrole\030\004"
    " \001(\005\022\020\n\010beam_uid\030\005 \001(\t\022\027\n\017bolus_thicknes"
    "s\030\006 \001(\002\022\024\n\014mass_density\030\007 \001(\002\022\"\n\032referen"
    "ce_electron_density\030\010 \001(\002\022\030\n\020margin_unif"
    "ormed\030\t \001(\010\022\021\n\tmargin_x1\030\n \001(\002\022\021\n\tmargin"
    "_x2\030\013 \001(\002\022\021\n\tmargin_y1\030\014 \001(\002\022\021\n\tmargin_y"
    "2\030\r \001(\002", 327);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_bolus.proto", &protobuf_RegisterTypes);
  RtTpsBolus::default_instance_ = new RtTpsBolus();
  RtTpsBolus::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fbolus_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fbolus_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fbolus_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fbolus_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fbolus_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsBolus::kBolusuidFieldNumber;
const int RtTpsBolus::kSeriesuidFieldNumber;
const int RtTpsBolus::kBolusnameFieldNumber;
const int RtTpsBolus::kPlanningroleFieldNumber;
const int RtTpsBolus::kBeamUidFieldNumber;
const int RtTpsBolus::kBolusThicknessFieldNumber;
const int RtTpsBolus::kMassDensityFieldNumber;
const int RtTpsBolus::kReferenceElectronDensityFieldNumber;
const int RtTpsBolus::kMarginUniformedFieldNumber;
const int RtTpsBolus::kMarginX1FieldNumber;
const int RtTpsBolus::kMarginX2FieldNumber;
const int RtTpsBolus::kMarginY1FieldNumber;
const int RtTpsBolus::kMarginY2FieldNumber;
#endif  // !_MSC_VER

RtTpsBolus::RtTpsBolus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsBolus::InitAsDefaultInstance() {
}

RtTpsBolus::RtTpsBolus(const RtTpsBolus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsBolus::SharedCtor() {
  _cached_size_ = 0;
  bolusuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bolusname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planningrole_ = 0;
  beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bolus_thickness_ = 0;
  mass_density_ = 0;
  reference_electron_density_ = 0;
  margin_uniformed_ = false;
  margin_x1_ = 0;
  margin_x2_ = 0;
  margin_y1_ = 0;
  margin_y2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsBolus::~RtTpsBolus() {
  SharedDtor();
}

void RtTpsBolus::SharedDtor() {
  if (bolusuid_ != &::google::protobuf::internal::kEmptyString) {
    delete bolusuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (bolusname_ != &::google::protobuf::internal::kEmptyString) {
    delete bolusname_;
  }
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_uid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsBolus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsBolus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsBolus_descriptor_;
}

const RtTpsBolus& RtTpsBolus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fbolus_2eproto();  return *default_instance_;
}

RtTpsBolus* RtTpsBolus::default_instance_ = NULL;

RtTpsBolus* RtTpsBolus::New() const {
  return new RtTpsBolus;
}

void RtTpsBolus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bolusuid()) {
      if (bolusuid_ != &::google::protobuf::internal::kEmptyString) {
        bolusuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    if (has_bolusname()) {
      if (bolusname_ != &::google::protobuf::internal::kEmptyString) {
        bolusname_->clear();
      }
    }
    planningrole_ = 0;
    if (has_beam_uid()) {
      if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
        beam_uid_->clear();
      }
    }
    bolus_thickness_ = 0;
    mass_density_ = 0;
    reference_electron_density_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    margin_uniformed_ = false;
    margin_x1_ = 0;
    margin_x2_ = 0;
    margin_y1_ = 0;
    margin_y2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsBolus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bolusuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bolusuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bolusuid().data(), this->bolusuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesuid;
        break;
      }
      
      // required string seriesuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bolusname;
        break;
      }
      
      // required string bolusname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bolusname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bolusname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bolusname().data(), this->bolusname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_planningrole;
        break;
      }
      
      // optional int32 planningrole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planningrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planningrole_)));
          set_has_planningrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beam_uid;
        break;
      }
      
      // optional string beam_uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_uid().data(), this->beam_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_bolus_thickness;
        break;
      }
      
      // optional float bolus_thickness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bolus_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bolus_thickness_)));
          set_has_bolus_thickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mass_density;
        break;
      }
      
      // optional float mass_density = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mass_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_density_)));
          set_has_mass_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_reference_electron_density;
        break;
      }
      
      // optional float reference_electron_density = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_reference_electron_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reference_electron_density_)));
          set_has_reference_electron_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_margin_uniformed;
        break;
      }
      
      // optional bool margin_uniformed = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_margin_uniformed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &margin_uniformed_)));
          set_has_margin_uniformed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_margin_x1;
        break;
      }
      
      // optional float margin_x1 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_x1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_x1_)));
          set_has_margin_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_margin_x2;
        break;
      }
      
      // optional float margin_x2 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_x2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_x2_)));
          set_has_margin_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_margin_y1;
        break;
      }
      
      // optional float margin_y1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_y1_)));
          set_has_margin_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_margin_y2;
        break;
      }
      
      // optional float margin_y2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin_y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &margin_y2_)));
          set_has_margin_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsBolus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string bolusuid = 1;
  if (has_bolusuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolusuid().data(), this->bolusuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->bolusuid(), output);
  }
  
  // required string seriesuid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seriesuid(), output);
  }
  
  // required string bolusname = 3;
  if (has_bolusname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolusname().data(), this->bolusname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->bolusname(), output);
  }
  
  // optional int32 planningrole = 4;
  if (has_planningrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->planningrole(), output);
  }
  
  // optional string beam_uid = 5;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beam_uid(), output);
  }
  
  // optional float bolus_thickness = 6;
  if (has_bolus_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bolus_thickness(), output);
  }
  
  // optional float mass_density = 7;
  if (has_mass_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mass_density(), output);
  }
  
  // optional float reference_electron_density = 8;
  if (has_reference_electron_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->reference_electron_density(), output);
  }
  
  // optional bool margin_uniformed = 9;
  if (has_margin_uniformed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->margin_uniformed(), output);
  }
  
  // optional float margin_x1 = 10;
  if (has_margin_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->margin_x1(), output);
  }
  
  // optional float margin_x2 = 11;
  if (has_margin_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->margin_x2(), output);
  }
  
  // optional float margin_y1 = 12;
  if (has_margin_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->margin_y1(), output);
  }
  
  // optional float margin_y2 = 13;
  if (has_margin_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->margin_y2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsBolus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string bolusuid = 1;
  if (has_bolusuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolusuid().data(), this->bolusuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bolusuid(), target);
  }
  
  // required string seriesuid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesuid(), target);
  }
  
  // required string bolusname = 3;
  if (has_bolusname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolusname().data(), this->bolusname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->bolusname(), target);
  }
  
  // optional int32 planningrole = 4;
  if (has_planningrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->planningrole(), target);
  }
  
  // optional string beam_uid = 5;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->beam_uid(), target);
  }
  
  // optional float bolus_thickness = 6;
  if (has_bolus_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->bolus_thickness(), target);
  }
  
  // optional float mass_density = 7;
  if (has_mass_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mass_density(), target);
  }
  
  // optional float reference_electron_density = 8;
  if (has_reference_electron_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->reference_electron_density(), target);
  }
  
  // optional bool margin_uniformed = 9;
  if (has_margin_uniformed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->margin_uniformed(), target);
  }
  
  // optional float margin_x1 = 10;
  if (has_margin_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->margin_x1(), target);
  }
  
  // optional float margin_x2 = 11;
  if (has_margin_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->margin_x2(), target);
  }
  
  // optional float margin_y1 = 12;
  if (has_margin_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->margin_y1(), target);
  }
  
  // optional float margin_y2 = 13;
  if (has_margin_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->margin_y2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsBolus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bolusuid = 1;
    if (has_bolusuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bolusuid());
    }
    
    // required string seriesuid = 2;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required string bolusname = 3;
    if (has_bolusname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bolusname());
    }
    
    // optional int32 planningrole = 4;
    if (has_planningrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planningrole());
    }
    
    // optional string beam_uid = 5;
    if (has_beam_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_uid());
    }
    
    // optional float bolus_thickness = 6;
    if (has_bolus_thickness()) {
      total_size += 1 + 4;
    }
    
    // optional float mass_density = 7;
    if (has_mass_density()) {
      total_size += 1 + 4;
    }
    
    // optional float reference_electron_density = 8;
    if (has_reference_electron_density()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool margin_uniformed = 9;
    if (has_margin_uniformed()) {
      total_size += 1 + 1;
    }
    
    // optional float margin_x1 = 10;
    if (has_margin_x1()) {
      total_size += 1 + 4;
    }
    
    // optional float margin_x2 = 11;
    if (has_margin_x2()) {
      total_size += 1 + 4;
    }
    
    // optional float margin_y1 = 12;
    if (has_margin_y1()) {
      total_size += 1 + 4;
    }
    
    // optional float margin_y2 = 13;
    if (has_margin_y2()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsBolus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsBolus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsBolus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsBolus::MergeFrom(const RtTpsBolus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bolusuid()) {
      set_bolusuid(from.bolusuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_bolusname()) {
      set_bolusname(from.bolusname());
    }
    if (from.has_planningrole()) {
      set_planningrole(from.planningrole());
    }
    if (from.has_beam_uid()) {
      set_beam_uid(from.beam_uid());
    }
    if (from.has_bolus_thickness()) {
      set_bolus_thickness(from.bolus_thickness());
    }
    if (from.has_mass_density()) {
      set_mass_density(from.mass_density());
    }
    if (from.has_reference_electron_density()) {
      set_reference_electron_density(from.reference_electron_density());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_margin_uniformed()) {
      set_margin_uniformed(from.margin_uniformed());
    }
    if (from.has_margin_x1()) {
      set_margin_x1(from.margin_x1());
    }
    if (from.has_margin_x2()) {
      set_margin_x2(from.margin_x2());
    }
    if (from.has_margin_y1()) {
      set_margin_y1(from.margin_y1());
    }
    if (from.has_margin_y2()) {
      set_margin_y2(from.margin_y2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsBolus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsBolus::CopyFrom(const RtTpsBolus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsBolus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RtTpsBolus::Swap(RtTpsBolus* other) {
  if (other != this) {
    std::swap(bolusuid_, other->bolusuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(bolusname_, other->bolusname_);
    std::swap(planningrole_, other->planningrole_);
    std::swap(beam_uid_, other->beam_uid_);
    std::swap(bolus_thickness_, other->bolus_thickness_);
    std::swap(mass_density_, other->mass_density_);
    std::swap(reference_electron_density_, other->reference_electron_density_);
    std::swap(margin_uniformed_, other->margin_uniformed_);
    std::swap(margin_x1_, other->margin_x1_);
    std::swap(margin_x2_, other->margin_x2_);
    std::swap(margin_y1_, other->margin_y1_);
    std::swap(margin_y2_, other->margin_y2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsBolus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsBolus_descriptor_;
  metadata.reflection = RtTpsBolus_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
