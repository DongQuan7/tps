// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_move_voi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_MOVE_VOI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_MOVE_VOI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fmove_5fvoi_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fmove_5fvoi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_move_voi.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_MOVE_VOI_descriptor_ = file->message_type(0);
  static const int RT_TPS_MOVE_VOI_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, windowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, windowuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, precoordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, precoordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, curcoordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, curcoordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, voiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, offsetz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, movedbyoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, ispancurrentslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, mouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, isshowwarning_),
  };
  RT_TPS_MOVE_VOI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_MOVE_VOI_descriptor_,
      RT_TPS_MOVE_VOI::default_instance_,
      RT_TPS_MOVE_VOI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MOVE_VOI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_MOVE_VOI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fmove_5fvoi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_MOVE_VOI_descriptor_, &RT_TPS_MOVE_VOI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fmove_5fvoi_2eproto() {
  delete RT_TPS_MOVE_VOI::default_instance_;
  delete RT_TPS_MOVE_VOI_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fmove_5fvoi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rt_tps_move_voi.proto\022\ttps.proto\"\246\002\n\017R"
    "T_TPS_MOVE_VOI\022\022\n\nwindowType\030\001 \001(\005\022\021\n\twi"
    "ndowUid\030\002 \001(\t\022\021\n\tprecoordx\030\003 \001(\002\022\021\n\tprec"
    "oordy\030\004 \001(\002\022\021\n\tcurcoordx\030\005 \001(\002\022\021\n\tcurcoo"
    "rdy\030\006 \001(\002\022\016\n\006voiuid\030\007 \001(\t\022\017\n\007offsetx\030\010 \001"
    "(\002\022\017\n\007offsety\030\t \001(\002\022\017\n\007offsetz\030\n \001(\002\022\022\n\n"
    "movedbyoff\030\013 \001(\010\022\031\n\021isPanCurrentSlice\030\014 "
    "\001(\010\022\027\n\017mouseActionType\030\r \001(\005\022\025\n\risShowWa"
    "rning\030\017 \001(\010", 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_move_voi.proto", &protobuf_RegisterTypes);
  RT_TPS_MOVE_VOI::default_instance_ = new RT_TPS_MOVE_VOI();
  RT_TPS_MOVE_VOI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fmove_5fvoi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fmove_5fvoi_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fmove_5fvoi_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fmove_5fvoi_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fmove_5fvoi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_MOVE_VOI::kWindowTypeFieldNumber;
const int RT_TPS_MOVE_VOI::kWindowUidFieldNumber;
const int RT_TPS_MOVE_VOI::kPrecoordxFieldNumber;
const int RT_TPS_MOVE_VOI::kPrecoordyFieldNumber;
const int RT_TPS_MOVE_VOI::kCurcoordxFieldNumber;
const int RT_TPS_MOVE_VOI::kCurcoordyFieldNumber;
const int RT_TPS_MOVE_VOI::kVoiuidFieldNumber;
const int RT_TPS_MOVE_VOI::kOffsetxFieldNumber;
const int RT_TPS_MOVE_VOI::kOffsetyFieldNumber;
const int RT_TPS_MOVE_VOI::kOffsetzFieldNumber;
const int RT_TPS_MOVE_VOI::kMovedbyoffFieldNumber;
const int RT_TPS_MOVE_VOI::kIsPanCurrentSliceFieldNumber;
const int RT_TPS_MOVE_VOI::kMouseActionTypeFieldNumber;
const int RT_TPS_MOVE_VOI::kIsShowWarningFieldNumber;
#endif  // !_MSC_VER

RT_TPS_MOVE_VOI::RT_TPS_MOVE_VOI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_MOVE_VOI::InitAsDefaultInstance() {
}

RT_TPS_MOVE_VOI::RT_TPS_MOVE_VOI(const RT_TPS_MOVE_VOI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_MOVE_VOI::SharedCtor() {
  _cached_size_ = 0;
  windowtype_ = 0;
  windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  precoordx_ = 0;
  precoordy_ = 0;
  curcoordx_ = 0;
  curcoordy_ = 0;
  voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  offsetx_ = 0;
  offsety_ = 0;
  offsetz_ = 0;
  movedbyoff_ = false;
  ispancurrentslice_ = false;
  mouseactiontype_ = 0;
  isshowwarning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_MOVE_VOI::~RT_TPS_MOVE_VOI() {
  SharedDtor();
}

void RT_TPS_MOVE_VOI::SharedDtor() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    delete windowuid_;
  }
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete voiuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_MOVE_VOI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_MOVE_VOI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MOVE_VOI_descriptor_;
}

const RT_TPS_MOVE_VOI& RT_TPS_MOVE_VOI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmove_5fvoi_2eproto();  return *default_instance_;
}

RT_TPS_MOVE_VOI* RT_TPS_MOVE_VOI::default_instance_ = NULL;

RT_TPS_MOVE_VOI* RT_TPS_MOVE_VOI::New() const {
  return new RT_TPS_MOVE_VOI;
}

void RT_TPS_MOVE_VOI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    windowtype_ = 0;
    if (has_windowuid()) {
      if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
        windowuid_->clear();
      }
    }
    precoordx_ = 0;
    precoordy_ = 0;
    curcoordx_ = 0;
    curcoordy_ = 0;
    if (has_voiuid()) {
      if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
        voiuid_->clear();
      }
    }
    offsetx_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    offsety_ = 0;
    offsetz_ = 0;
    movedbyoff_ = false;
    ispancurrentslice_ = false;
    mouseactiontype_ = 0;
    isshowwarning_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_MOVE_VOI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 windowType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowtype_)));
          set_has_windowtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_windowUid;
        break;
      }
      
      // optional string windowUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windowuid().data(), this->windowuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_precoordx;
        break;
      }
      
      // optional float precoordx = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_precoordx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precoordx_)));
          set_has_precoordx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_precoordy;
        break;
      }
      
      // optional float precoordy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_precoordy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precoordy_)));
          set_has_precoordy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_curcoordx;
        break;
      }
      
      // optional float curcoordx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_curcoordx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curcoordx_)));
          set_has_curcoordx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_curcoordy;
        break;
      }
      
      // optional float curcoordy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_curcoordy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &curcoordy_)));
          set_has_curcoordy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_voiuid;
        break;
      }
      
      // optional string voiuid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiuid().data(), this->voiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_offsetx;
        break;
      }
      
      // optional float offsetx = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_offsety;
        break;
      }
      
      // optional float offsety = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsety:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_offsetz;
        break;
      }
      
      // optional float offsetz = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetz_)));
          set_has_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_movedbyoff;
        break;
      }
      
      // optional bool movedbyoff = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movedbyoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &movedbyoff_)));
          set_has_movedbyoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isPanCurrentSlice;
        break;
      }
      
      // optional bool isPanCurrentSlice = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPanCurrentSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispancurrentslice_)));
          set_has_ispancurrentslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mouseActionType;
        break;
      }
      
      // optional int32 mouseActionType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouseActionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mouseactiontype_)));
          set_has_mouseactiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isShowWarning;
        break;
      }
      
      // optional bool isShowWarning = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShowWarning:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshowwarning_)));
          set_has_isshowwarning();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_MOVE_VOI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 windowType = 1;
  if (has_windowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->windowtype(), output);
  }
  
  // optional string windowUid = 2;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->windowuid(), output);
  }
  
  // optional float precoordx = 3;
  if (has_precoordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->precoordx(), output);
  }
  
  // optional float precoordy = 4;
  if (has_precoordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->precoordy(), output);
  }
  
  // optional float curcoordx = 5;
  if (has_curcoordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->curcoordx(), output);
  }
  
  // optional float curcoordy = 6;
  if (has_curcoordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->curcoordy(), output);
  }
  
  // optional string voiuid = 7;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->voiuid(), output);
  }
  
  // optional float offsetx = 8;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->offsetx(), output);
  }
  
  // optional float offsety = 9;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->offsety(), output);
  }
  
  // optional float offsetz = 10;
  if (has_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->offsetz(), output);
  }
  
  // optional bool movedbyoff = 11;
  if (has_movedbyoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->movedbyoff(), output);
  }
  
  // optional bool isPanCurrentSlice = 12;
  if (has_ispancurrentslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ispancurrentslice(), output);
  }
  
  // optional int32 mouseActionType = 13;
  if (has_mouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mouseactiontype(), output);
  }
  
  // optional bool isShowWarning = 15;
  if (has_isshowwarning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isshowwarning(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_MOVE_VOI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 windowType = 1;
  if (has_windowtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->windowtype(), target);
  }
  
  // optional string windowUid = 2;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->windowuid(), target);
  }
  
  // optional float precoordx = 3;
  if (has_precoordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->precoordx(), target);
  }
  
  // optional float precoordy = 4;
  if (has_precoordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->precoordy(), target);
  }
  
  // optional float curcoordx = 5;
  if (has_curcoordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->curcoordx(), target);
  }
  
  // optional float curcoordy = 6;
  if (has_curcoordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->curcoordy(), target);
  }
  
  // optional string voiuid = 7;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->voiuid(), target);
  }
  
  // optional float offsetx = 8;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->offsetx(), target);
  }
  
  // optional float offsety = 9;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->offsety(), target);
  }
  
  // optional float offsetz = 10;
  if (has_offsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->offsetz(), target);
  }
  
  // optional bool movedbyoff = 11;
  if (has_movedbyoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->movedbyoff(), target);
  }
  
  // optional bool isPanCurrentSlice = 12;
  if (has_ispancurrentslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ispancurrentslice(), target);
  }
  
  // optional int32 mouseActionType = 13;
  if (has_mouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mouseactiontype(), target);
  }
  
  // optional bool isShowWarning = 15;
  if (has_isshowwarning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isshowwarning(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_MOVE_VOI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 windowType = 1;
    if (has_windowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowtype());
    }
    
    // optional string windowUid = 2;
    if (has_windowuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windowuid());
    }
    
    // optional float precoordx = 3;
    if (has_precoordx()) {
      total_size += 1 + 4;
    }
    
    // optional float precoordy = 4;
    if (has_precoordy()) {
      total_size += 1 + 4;
    }
    
    // optional float curcoordx = 5;
    if (has_curcoordx()) {
      total_size += 1 + 4;
    }
    
    // optional float curcoordy = 6;
    if (has_curcoordy()) {
      total_size += 1 + 4;
    }
    
    // optional string voiuid = 7;
    if (has_voiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiuid());
    }
    
    // optional float offsetx = 8;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float offsety = 9;
    if (has_offsety()) {
      total_size += 1 + 4;
    }
    
    // optional float offsetz = 10;
    if (has_offsetz()) {
      total_size += 1 + 4;
    }
    
    // optional bool movedbyoff = 11;
    if (has_movedbyoff()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPanCurrentSlice = 12;
    if (has_ispancurrentslice()) {
      total_size += 1 + 1;
    }
    
    // optional int32 mouseActionType = 13;
    if (has_mouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mouseactiontype());
    }
    
    // optional bool isShowWarning = 15;
    if (has_isshowwarning()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_MOVE_VOI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_MOVE_VOI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_MOVE_VOI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_MOVE_VOI::MergeFrom(const RT_TPS_MOVE_VOI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windowtype()) {
      set_windowtype(from.windowtype());
    }
    if (from.has_windowuid()) {
      set_windowuid(from.windowuid());
    }
    if (from.has_precoordx()) {
      set_precoordx(from.precoordx());
    }
    if (from.has_precoordy()) {
      set_precoordy(from.precoordy());
    }
    if (from.has_curcoordx()) {
      set_curcoordx(from.curcoordx());
    }
    if (from.has_curcoordy()) {
      set_curcoordy(from.curcoordy());
    }
    if (from.has_voiuid()) {
      set_voiuid(from.voiuid());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_offsetz()) {
      set_offsetz(from.offsetz());
    }
    if (from.has_movedbyoff()) {
      set_movedbyoff(from.movedbyoff());
    }
    if (from.has_ispancurrentslice()) {
      set_ispancurrentslice(from.ispancurrentslice());
    }
    if (from.has_mouseactiontype()) {
      set_mouseactiontype(from.mouseactiontype());
    }
    if (from.has_isshowwarning()) {
      set_isshowwarning(from.isshowwarning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_MOVE_VOI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_MOVE_VOI::CopyFrom(const RT_TPS_MOVE_VOI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_MOVE_VOI::IsInitialized() const {
  
  return true;
}

void RT_TPS_MOVE_VOI::Swap(RT_TPS_MOVE_VOI* other) {
  if (other != this) {
    std::swap(windowtype_, other->windowtype_);
    std::swap(windowuid_, other->windowuid_);
    std::swap(precoordx_, other->precoordx_);
    std::swap(precoordy_, other->precoordy_);
    std::swap(curcoordx_, other->curcoordx_);
    std::swap(curcoordy_, other->curcoordy_);
    std::swap(voiuid_, other->voiuid_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(offsetz_, other->offsetz_);
    std::swap(movedbyoff_, other->movedbyoff_);
    std::swap(ispancurrentslice_, other->ispancurrentslice_);
    std::swap(mouseactiontype_, other->mouseactiontype_);
    std::swap(isshowwarning_, other->isshowwarning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_MOVE_VOI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_MOVE_VOI_descriptor_;
  metadata.reflection = RT_TPS_MOVE_VOI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
