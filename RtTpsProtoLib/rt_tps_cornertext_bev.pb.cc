// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_cornertext_bev.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_CornerText_BEV_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_CornerText_BEV_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fcornertext_5fbev_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_cornertext_bev.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_CornerText_BEV_descriptor_ = file->message_type(0);
  static const int RT_TPS_CornerText_BEV_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, beamname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, beamweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, beammu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, displaycontent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, windowwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, windowcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, zoomfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, segmentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, segmentweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, segmentmu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, leafindex_),
  };
  RT_TPS_CornerText_BEV_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_CornerText_BEV_descriptor_,
      RT_TPS_CornerText_BEV::default_instance_,
      RT_TPS_CornerText_BEV_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_BEV, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_CornerText_BEV));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fcornertext_5fbev_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_CornerText_BEV_descriptor_, &RT_TPS_CornerText_BEV::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fbev_2eproto() {
  delete RT_TPS_CornerText_BEV::default_instance_;
  delete RT_TPS_CornerText_BEV_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033rt_tps_cornertext_bev.proto\022\ttps.proto"
    "\"\367\001\n\025RT_TPS_CornerText_BEV\022\020\n\010beamname\030\001"
    " \001(\t\022\022\n\nbeamweight\030\002 \001(\001\022\016\n\006beammu\030\003 \001(\001"
    "\022\026\n\016displaycontent\030\004 \001(\005\022\023\n\013windowwidth\030"
    "\005 \001(\001\022\024\n\014windowcenter\030\006 \001(\001\022\022\n\nzoomfacto"
    "r\030\007 \001(\001\022\024\n\014segmentindex\030\010 \001(\001\022\025\n\rsegment"
    "weight\030\t \001(\001\022\021\n\tsegmentmu\030\n \001(\001\022\021\n\tleafi"
    "ndex\030\013 \001(\001", 290);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_cornertext_bev.proto", &protobuf_RegisterTypes);
  RT_TPS_CornerText_BEV::default_instance_ = new RT_TPS_CornerText_BEV();
  RT_TPS_CornerText_BEV::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fbev_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fcornertext_5fbev_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fcornertext_5fbev_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fcornertext_5fbev_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_CornerText_BEV::kBeamnameFieldNumber;
const int RT_TPS_CornerText_BEV::kBeamweightFieldNumber;
const int RT_TPS_CornerText_BEV::kBeammuFieldNumber;
const int RT_TPS_CornerText_BEV::kDisplaycontentFieldNumber;
const int RT_TPS_CornerText_BEV::kWindowwidthFieldNumber;
const int RT_TPS_CornerText_BEV::kWindowcenterFieldNumber;
const int RT_TPS_CornerText_BEV::kZoomfactorFieldNumber;
const int RT_TPS_CornerText_BEV::kSegmentindexFieldNumber;
const int RT_TPS_CornerText_BEV::kSegmentweightFieldNumber;
const int RT_TPS_CornerText_BEV::kSegmentmuFieldNumber;
const int RT_TPS_CornerText_BEV::kLeafindexFieldNumber;
#endif  // !_MSC_VER

RT_TPS_CornerText_BEV::RT_TPS_CornerText_BEV()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_CornerText_BEV::InitAsDefaultInstance() {
}

RT_TPS_CornerText_BEV::RT_TPS_CornerText_BEV(const RT_TPS_CornerText_BEV& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_CornerText_BEV::SharedCtor() {
  _cached_size_ = 0;
  beamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beamweight_ = 0;
  beammu_ = 0;
  displaycontent_ = 0;
  windowwidth_ = 0;
  windowcenter_ = 0;
  zoomfactor_ = 0;
  segmentindex_ = 0;
  segmentweight_ = 0;
  segmentmu_ = 0;
  leafindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_CornerText_BEV::~RT_TPS_CornerText_BEV() {
  SharedDtor();
}

void RT_TPS_CornerText_BEV::SharedDtor() {
  if (beamname_ != &::google::protobuf::internal::kEmptyString) {
    delete beamname_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_CornerText_BEV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_CornerText_BEV::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_CornerText_BEV_descriptor_;
}

const RT_TPS_CornerText_BEV& RT_TPS_CornerText_BEV::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto();  return *default_instance_;
}

RT_TPS_CornerText_BEV* RT_TPS_CornerText_BEV::default_instance_ = NULL;

RT_TPS_CornerText_BEV* RT_TPS_CornerText_BEV::New() const {
  return new RT_TPS_CornerText_BEV;
}

void RT_TPS_CornerText_BEV::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beamname()) {
      if (beamname_ != &::google::protobuf::internal::kEmptyString) {
        beamname_->clear();
      }
    }
    beamweight_ = 0;
    beammu_ = 0;
    displaycontent_ = 0;
    windowwidth_ = 0;
    windowcenter_ = 0;
    zoomfactor_ = 0;
    segmentindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    segmentweight_ = 0;
    segmentmu_ = 0;
    leafindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_CornerText_BEV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string beamname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamname().data(), this->beamname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_beamweight;
        break;
      }
      
      // optional double beamweight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beamweight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beamweight_)));
          set_has_beamweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_beammu;
        break;
      }
      
      // optional double beammu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beammu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beammu_)));
          set_has_beammu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_displaycontent;
        break;
      }
      
      // optional int32 displaycontent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displaycontent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displaycontent_)));
          set_has_displaycontent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_windowwidth;
        break;
      }
      
      // optional double windowwidth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_windowwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &windowwidth_)));
          set_has_windowwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_windowcenter;
        break;
      }
      
      // optional double windowcenter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_windowcenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &windowcenter_)));
          set_has_windowcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_zoomfactor;
        break;
      }
      
      // optional double zoomfactor = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_zoomfactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zoomfactor_)));
          set_has_zoomfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_segmentindex;
        break;
      }
      
      // optional double segmentindex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmentindex_)));
          set_has_segmentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_segmentweight;
        break;
      }
      
      // optional double segmentweight = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentweight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmentweight_)));
          set_has_segmentweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_segmentmu;
        break;
      }
      
      // optional double segmentmu = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_segmentmu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &segmentmu_)));
          set_has_segmentmu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_leafindex;
        break;
      }
      
      // optional double leafindex = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leafindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leafindex_)));
          set_has_leafindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_CornerText_BEV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string beamname = 1;
  if (has_beamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamname().data(), this->beamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->beamname(), output);
  }
  
  // optional double beamweight = 2;
  if (has_beamweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->beamweight(), output);
  }
  
  // optional double beammu = 3;
  if (has_beammu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->beammu(), output);
  }
  
  // optional int32 displaycontent = 4;
  if (has_displaycontent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->displaycontent(), output);
  }
  
  // optional double windowwidth = 5;
  if (has_windowwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->windowwidth(), output);
  }
  
  // optional double windowcenter = 6;
  if (has_windowcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->windowcenter(), output);
  }
  
  // optional double zoomfactor = 7;
  if (has_zoomfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->zoomfactor(), output);
  }
  
  // optional double segmentindex = 8;
  if (has_segmentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->segmentindex(), output);
  }
  
  // optional double segmentweight = 9;
  if (has_segmentweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->segmentweight(), output);
  }
  
  // optional double segmentmu = 10;
  if (has_segmentmu()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->segmentmu(), output);
  }
  
  // optional double leafindex = 11;
  if (has_leafindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->leafindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_CornerText_BEV::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string beamname = 1;
  if (has_beamname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamname().data(), this->beamname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beamname(), target);
  }
  
  // optional double beamweight = 2;
  if (has_beamweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->beamweight(), target);
  }
  
  // optional double beammu = 3;
  if (has_beammu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->beammu(), target);
  }
  
  // optional int32 displaycontent = 4;
  if (has_displaycontent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->displaycontent(), target);
  }
  
  // optional double windowwidth = 5;
  if (has_windowwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->windowwidth(), target);
  }
  
  // optional double windowcenter = 6;
  if (has_windowcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->windowcenter(), target);
  }
  
  // optional double zoomfactor = 7;
  if (has_zoomfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->zoomfactor(), target);
  }
  
  // optional double segmentindex = 8;
  if (has_segmentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->segmentindex(), target);
  }
  
  // optional double segmentweight = 9;
  if (has_segmentweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->segmentweight(), target);
  }
  
  // optional double segmentmu = 10;
  if (has_segmentmu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->segmentmu(), target);
  }
  
  // optional double leafindex = 11;
  if (has_leafindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->leafindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_CornerText_BEV::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string beamname = 1;
    if (has_beamname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamname());
    }
    
    // optional double beamweight = 2;
    if (has_beamweight()) {
      total_size += 1 + 8;
    }
    
    // optional double beammu = 3;
    if (has_beammu()) {
      total_size += 1 + 8;
    }
    
    // optional int32 displaycontent = 4;
    if (has_displaycontent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displaycontent());
    }
    
    // optional double windowwidth = 5;
    if (has_windowwidth()) {
      total_size += 1 + 8;
    }
    
    // optional double windowcenter = 6;
    if (has_windowcenter()) {
      total_size += 1 + 8;
    }
    
    // optional double zoomfactor = 7;
    if (has_zoomfactor()) {
      total_size += 1 + 8;
    }
    
    // optional double segmentindex = 8;
    if (has_segmentindex()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double segmentweight = 9;
    if (has_segmentweight()) {
      total_size += 1 + 8;
    }
    
    // optional double segmentmu = 10;
    if (has_segmentmu()) {
      total_size += 1 + 8;
    }
    
    // optional double leafindex = 11;
    if (has_leafindex()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_CornerText_BEV::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_CornerText_BEV* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CornerText_BEV*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_CornerText_BEV::MergeFrom(const RT_TPS_CornerText_BEV& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beamname()) {
      set_beamname(from.beamname());
    }
    if (from.has_beamweight()) {
      set_beamweight(from.beamweight());
    }
    if (from.has_beammu()) {
      set_beammu(from.beammu());
    }
    if (from.has_displaycontent()) {
      set_displaycontent(from.displaycontent());
    }
    if (from.has_windowwidth()) {
      set_windowwidth(from.windowwidth());
    }
    if (from.has_windowcenter()) {
      set_windowcenter(from.windowcenter());
    }
    if (from.has_zoomfactor()) {
      set_zoomfactor(from.zoomfactor());
    }
    if (from.has_segmentindex()) {
      set_segmentindex(from.segmentindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_segmentweight()) {
      set_segmentweight(from.segmentweight());
    }
    if (from.has_segmentmu()) {
      set_segmentmu(from.segmentmu());
    }
    if (from.has_leafindex()) {
      set_leafindex(from.leafindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_CornerText_BEV::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_CornerText_BEV::CopyFrom(const RT_TPS_CornerText_BEV& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_CornerText_BEV::IsInitialized() const {
  
  return true;
}

void RT_TPS_CornerText_BEV::Swap(RT_TPS_CornerText_BEV* other) {
  if (other != this) {
    std::swap(beamname_, other->beamname_);
    std::swap(beamweight_, other->beamweight_);
    std::swap(beammu_, other->beammu_);
    std::swap(displaycontent_, other->displaycontent_);
    std::swap(windowwidth_, other->windowwidth_);
    std::swap(windowcenter_, other->windowcenter_);
    std::swap(zoomfactor_, other->zoomfactor_);
    std::swap(segmentindex_, other->segmentindex_);
    std::swap(segmentweight_, other->segmentweight_);
    std::swap(segmentmu_, other->segmentmu_);
    std::swap(leafindex_, other->leafindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_CornerText_BEV::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_CornerText_BEV_descriptor_;
  metadata.reflection = RT_TPS_CornerText_BEV_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
