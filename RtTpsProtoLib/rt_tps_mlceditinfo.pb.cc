// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_mlceditinfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_MLC_EDIT_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_MLC_EDIT_INFO_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fmlceditinfo_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fmlceditinfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_mlceditinfo.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_MLC_EDIT_INFO_descriptor_ = file->message_type(0);
  static const int RT_TPS_MLC_EDIT_INFO_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, mouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, lastmouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, windowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, windowuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, beamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, segmentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, iseditingstarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, mlceditmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, height_),
  };
  RT_TPS_MLC_EDIT_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_MLC_EDIT_INFO_descriptor_,
      RT_TPS_MLC_EDIT_INFO::default_instance_,
      RT_TPS_MLC_EDIT_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MLC_EDIT_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_MLC_EDIT_INFO));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fmlceditinfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_MLC_EDIT_INFO_descriptor_, &RT_TPS_MLC_EDIT_INFO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fmlceditinfo_2eproto() {
  delete RT_TPS_MLC_EDIT_INFO::default_instance_;
  delete RT_TPS_MLC_EDIT_INFO_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fmlceditinfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030rt_tps_mlceditinfo.proto\022\ttps.proto\"\213\002"
    "\n\024RT_TPS_MLC_EDIT_INFO\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002"
    " \002(\001\022\027\n\017mouseActionType\030\003 \002(\005\022\033\n\023lastMou"
    "seActionType\030\004 \002(\005\022\022\n\nwindowType\030\005 \002(\005\022\021"
    "\n\twindowUID\030\006 \001(\t\022\017\n\007beamUID\030\007 \002(\t\022\021\n\tse"
    "gmentID\030\010 \002(\005\022\016\n\006radius\030\t \001(\001\022\030\n\020isEditi"
    "ngStarted\030\n \001(\010\022\023\n\013mlcEditMode\030\013 \001(\005\022\r\n\005"
    "width\030\014 \001(\001\022\016\n\006height\030\r \001(\001", 307);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_mlceditinfo.proto", &protobuf_RegisterTypes);
  RT_TPS_MLC_EDIT_INFO::default_instance_ = new RT_TPS_MLC_EDIT_INFO();
  RT_TPS_MLC_EDIT_INFO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fmlceditinfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fmlceditinfo_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fmlceditinfo_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fmlceditinfo_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fmlceditinfo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_MLC_EDIT_INFO::kXFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kYFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kMouseActionTypeFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kLastMouseActionTypeFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kWindowTypeFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kWindowUIDFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kBeamUIDFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kSegmentIDFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kRadiusFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kIsEditingStartedFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kMlcEditModeFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kWidthFieldNumber;
const int RT_TPS_MLC_EDIT_INFO::kHeightFieldNumber;
#endif  // !_MSC_VER

RT_TPS_MLC_EDIT_INFO::RT_TPS_MLC_EDIT_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_MLC_EDIT_INFO::InitAsDefaultInstance() {
}

RT_TPS_MLC_EDIT_INFO::RT_TPS_MLC_EDIT_INFO(const RT_TPS_MLC_EDIT_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_MLC_EDIT_INFO::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  mouseactiontype_ = 0;
  lastmouseactiontype_ = 0;
  windowtype_ = 0;
  windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentid_ = 0;
  radius_ = 0;
  iseditingstarted_ = false;
  mlceditmode_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_MLC_EDIT_INFO::~RT_TPS_MLC_EDIT_INFO() {
  SharedDtor();
}

void RT_TPS_MLC_EDIT_INFO::SharedDtor() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    delete windowuid_;
  }
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beamuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_MLC_EDIT_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_MLC_EDIT_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MLC_EDIT_INFO_descriptor_;
}

const RT_TPS_MLC_EDIT_INFO& RT_TPS_MLC_EDIT_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmlceditinfo_2eproto();  return *default_instance_;
}

RT_TPS_MLC_EDIT_INFO* RT_TPS_MLC_EDIT_INFO::default_instance_ = NULL;

RT_TPS_MLC_EDIT_INFO* RT_TPS_MLC_EDIT_INFO::New() const {
  return new RT_TPS_MLC_EDIT_INFO;
}

void RT_TPS_MLC_EDIT_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    mouseactiontype_ = 0;
    lastmouseactiontype_ = 0;
    windowtype_ = 0;
    if (has_windowuid()) {
      if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
        windowuid_->clear();
      }
    }
    if (has_beamuid()) {
      if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
        beamuid_->clear();
      }
    }
    segmentid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    radius_ = 0;
    iseditingstarted_ = false;
    mlceditmode_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_MLC_EDIT_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mouseActionType;
        break;
      }
      
      // required int32 mouseActionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouseActionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mouseactiontype_)));
          set_has_mouseactiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastMouseActionType;
        break;
      }
      
      // required int32 lastMouseActionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMouseActionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastmouseactiontype_)));
          set_has_lastmouseactiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_windowType;
        break;
      }
      
      // required int32 windowType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowtype_)));
          set_has_windowtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_windowUID;
        break;
      }
      
      // optional string windowUID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windowuid().data(), this->windowuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_beamUID;
        break;
      }
      
      // required string beamUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamuid().data(), this->beamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_segmentID;
        break;
      }
      
      // required int32 segmentID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_segmentID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &segmentid_)));
          set_has_segmentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_radius;
        break;
      }
      
      // optional double radius = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isEditingStarted;
        break;
      }
      
      // optional bool isEditingStarted = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEditingStarted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iseditingstarted_)));
          set_has_iseditingstarted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_mlcEditMode;
        break;
      }
      
      // optional int32 mlcEditMode = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mlcEditMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mlceditmode_)));
          set_has_mlceditmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_width;
        break;
      }
      
      // optional double width = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_height;
        break;
      }
      
      // optional double height = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_MLC_EDIT_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required int32 mouseActionType = 3;
  if (has_mouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mouseactiontype(), output);
  }
  
  // required int32 lastMouseActionType = 4;
  if (has_lastmouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastmouseactiontype(), output);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->windowtype(), output);
  }
  
  // optional string windowUID = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->windowuid(), output);
  }
  
  // required string beamUID = 7;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->beamuid(), output);
  }
  
  // required int32 segmentID = 8;
  if (has_segmentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->segmentid(), output);
  }
  
  // optional double radius = 9;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->radius(), output);
  }
  
  // optional bool isEditingStarted = 10;
  if (has_iseditingstarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->iseditingstarted(), output);
  }
  
  // optional int32 mlcEditMode = 11;
  if (has_mlceditmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->mlceditmode(), output);
  }
  
  // optional double width = 12;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->width(), output);
  }
  
  // optional double height = 13;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_MLC_EDIT_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required int32 mouseActionType = 3;
  if (has_mouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mouseactiontype(), target);
  }
  
  // required int32 lastMouseActionType = 4;
  if (has_lastmouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastmouseactiontype(), target);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->windowtype(), target);
  }
  
  // optional string windowUID = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->windowuid(), target);
  }
  
  // required string beamUID = 7;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->beamuid(), target);
  }
  
  // required int32 segmentID = 8;
  if (has_segmentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->segmentid(), target);
  }
  
  // optional double radius = 9;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->radius(), target);
  }
  
  // optional bool isEditingStarted = 10;
  if (has_iseditingstarted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->iseditingstarted(), target);
  }
  
  // optional int32 mlcEditMode = 11;
  if (has_mlceditmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->mlceditmode(), target);
  }
  
  // optional double width = 12;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->width(), target);
  }
  
  // optional double height = 13;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_MLC_EDIT_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required int32 mouseActionType = 3;
    if (has_mouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mouseactiontype());
    }
    
    // required int32 lastMouseActionType = 4;
    if (has_lastmouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastmouseactiontype());
    }
    
    // required int32 windowType = 5;
    if (has_windowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowtype());
    }
    
    // optional string windowUID = 6;
    if (has_windowuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windowuid());
    }
    
    // required string beamUID = 7;
    if (has_beamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamuid());
    }
    
    // required int32 segmentID = 8;
    if (has_segmentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->segmentid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double radius = 9;
    if (has_radius()) {
      total_size += 1 + 8;
    }
    
    // optional bool isEditingStarted = 10;
    if (has_iseditingstarted()) {
      total_size += 1 + 1;
    }
    
    // optional int32 mlcEditMode = 11;
    if (has_mlceditmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mlceditmode());
    }
    
    // optional double width = 12;
    if (has_width()) {
      total_size += 1 + 8;
    }
    
    // optional double height = 13;
    if (has_height()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_MLC_EDIT_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_MLC_EDIT_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_MLC_EDIT_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_MLC_EDIT_INFO::MergeFrom(const RT_TPS_MLC_EDIT_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_mouseactiontype()) {
      set_mouseactiontype(from.mouseactiontype());
    }
    if (from.has_lastmouseactiontype()) {
      set_lastmouseactiontype(from.lastmouseactiontype());
    }
    if (from.has_windowtype()) {
      set_windowtype(from.windowtype());
    }
    if (from.has_windowuid()) {
      set_windowuid(from.windowuid());
    }
    if (from.has_beamuid()) {
      set_beamuid(from.beamuid());
    }
    if (from.has_segmentid()) {
      set_segmentid(from.segmentid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_iseditingstarted()) {
      set_iseditingstarted(from.iseditingstarted());
    }
    if (from.has_mlceditmode()) {
      set_mlceditmode(from.mlceditmode());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_MLC_EDIT_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_MLC_EDIT_INFO::CopyFrom(const RT_TPS_MLC_EDIT_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_MLC_EDIT_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000df) != 0x000000df) return false;
  
  return true;
}

void RT_TPS_MLC_EDIT_INFO::Swap(RT_TPS_MLC_EDIT_INFO* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(mouseactiontype_, other->mouseactiontype_);
    std::swap(lastmouseactiontype_, other->lastmouseactiontype_);
    std::swap(windowtype_, other->windowtype_);
    std::swap(windowuid_, other->windowuid_);
    std::swap(beamuid_, other->beamuid_);
    std::swap(segmentid_, other->segmentid_);
    std::swap(radius_, other->radius_);
    std::swap(iseditingstarted_, other->iseditingstarted_);
    std::swap(mlceditmode_, other->mlceditmode_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_MLC_EDIT_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_MLC_EDIT_INFO_descriptor_;
  metadata.reflection = RT_TPS_MLC_EDIT_INFO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
