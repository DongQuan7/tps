// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_planqaaddnormalgroupconfigtable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPlanQAAddNormalGroupConfigTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_planqaaddnormalgroupconfigtable.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_ = file->message_type(0);
  static const int RtTpsProtoPlanQAAddNormalGroupConfigTable_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, treatmentplannormalgroupuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isbeamgantryfromtreatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isbeamtablefromtreatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isbeamcollimatorfromtreatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, gantrystartangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, collimatorangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, couchangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isocentertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isocenterpoiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isocentervoiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, isgoalfromtreatment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, doseperfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, fractioncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, totaldose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, doselinepercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, goaltargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, targetvoiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, voidosetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, doseatvolumepercentage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, targetpoiuid_),
  };
  RtTpsProtoPlanQAAddNormalGroupConfigTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_,
      RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance_,
      RtTpsProtoPlanQAAddNormalGroupConfigTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlanQAAddNormalGroupConfigTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPlanQAAddNormalGroupConfigTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_, &RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto() {
  delete RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance_;
  delete RtTpsProtoPlanQAAddNormalGroupConfigTable_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n,rt_tps_planqaaddnormalgroupconfigtable"
    ".proto\022\ttps.proto\"\301\004\n)RtTpsProtoPlanQAAd"
    "dNormalGroupConfigTable\022#\n\033treatmentPlan"
    "NormalGroupUID\030\001 \002(\t\022!\n\031isBeamGantryFrom"
    "Treatment\030\002 \002(\010\022 \n\030isBeamTableFromTreatm"
    "ent\030\003 \002(\010\022%\n\035isBeamCollimatorFromTreatme"
    "nt\030\004 \002(\010\022\030\n\020gantryStartAngle\030\005 \001(\002\022\027\n\017co"
    "llimatorAngle\030\006 \001(\002\022\022\n\ncouchAngle\030\007 \001(\002\022"
    "\025\n\rIsoCenterType\030\010 \002(\005\022\027\n\017IsocenterPOIUI"
    "D\030\t \001(\t\022\027\n\017IsocenterVOIUID\030\n \001(\t\022\033\n\023isGo"
    "alFromTreatment\030\013 \002(\010\022\027\n\017dosePerFraction"
    "\030\014 \001(\001\022\025\n\rfractionCount\030\r \001(\005\022\021\n\ttotalDo"
    "se\030\016 \001(\001\022\032\n\022doseLinePercentage\030\017 \001(\001\022\026\n\016"
    "goalTargetType\030\020 \002(\005\022\024\n\014targetVOIUID\030\021 \001"
    "(\t\022\023\n\013voiDoseType\030\022 \001(\005\022\036\n\026doseAtVolumeP"
    "ercentage\030\023 \001(\001\022\024\n\014targetPOIUID\030\024 \001(\t", 637);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_planqaaddnormalgroupconfigtable.proto", &protobuf_RegisterTypes);
  RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance_ = new RtTpsProtoPlanQAAddNormalGroupConfigTable();
  RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kTreatmentPlanNormalGroupUIDFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsBeamGantryFromTreatmentFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsBeamTableFromTreatmentFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsBeamCollimatorFromTreatmentFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kGantryStartAngleFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kCollimatorAngleFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kCouchAngleFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsoCenterTypeFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsocenterPOIUIDFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsocenterVOIUIDFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kIsGoalFromTreatmentFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kDosePerFractionFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kFractionCountFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kTotalDoseFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kDoseLinePercentageFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kGoalTargetTypeFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kTargetVOIUIDFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kVoiDoseTypeFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kDoseAtVolumePercentageFieldNumber;
const int RtTpsProtoPlanQAAddNormalGroupConfigTable::kTargetPOIUIDFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPlanQAAddNormalGroupConfigTable::RtTpsProtoPlanQAAddNormalGroupConfigTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::InitAsDefaultInstance() {
}

RtTpsProtoPlanQAAddNormalGroupConfigTable::RtTpsProtoPlanQAAddNormalGroupConfigTable(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::SharedCtor() {
  _cached_size_ = 0;
  treatmentplannormalgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isbeamgantryfromtreatment_ = false;
  isbeamtablefromtreatment_ = false;
  isbeamcollimatorfromtreatment_ = false;
  gantrystartangle_ = 0;
  collimatorangle_ = 0;
  couchangle_ = 0;
  isocentertype_ = 0;
  isocenterpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isocentervoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isgoalfromtreatment_ = false;
  doseperfraction_ = 0;
  fractioncount_ = 0;
  totaldose_ = 0;
  doselinepercentage_ = 0;
  goaltargettype_ = 0;
  targetvoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voidosetype_ = 0;
  doseatvolumepercentage_ = 0;
  targetpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPlanQAAddNormalGroupConfigTable::~RtTpsProtoPlanQAAddNormalGroupConfigTable() {
  SharedDtor();
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::SharedDtor() {
  if (treatmentplannormalgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete treatmentplannormalgroupuid_;
  }
  if (isocenterpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete isocenterpoiuid_;
  }
  if (isocentervoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete isocentervoiuid_;
  }
  if (targetvoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetvoiuid_;
  }
  if (targetpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete targetpoiuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPlanQAAddNormalGroupConfigTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_;
}

const RtTpsProtoPlanQAAddNormalGroupConfigTable& RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();  return *default_instance_;
}

RtTpsProtoPlanQAAddNormalGroupConfigTable* RtTpsProtoPlanQAAddNormalGroupConfigTable::default_instance_ = NULL;

RtTpsProtoPlanQAAddNormalGroupConfigTable* RtTpsProtoPlanQAAddNormalGroupConfigTable::New() const {
  return new RtTpsProtoPlanQAAddNormalGroupConfigTable;
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_treatmentplannormalgroupuid()) {
      if (treatmentplannormalgroupuid_ != &::google::protobuf::internal::kEmptyString) {
        treatmentplannormalgroupuid_->clear();
      }
    }
    isbeamgantryfromtreatment_ = false;
    isbeamtablefromtreatment_ = false;
    isbeamcollimatorfromtreatment_ = false;
    gantrystartangle_ = 0;
    collimatorangle_ = 0;
    couchangle_ = 0;
    isocentertype_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_isocenterpoiuid()) {
      if (isocenterpoiuid_ != &::google::protobuf::internal::kEmptyString) {
        isocenterpoiuid_->clear();
      }
    }
    if (has_isocentervoiuid()) {
      if (isocentervoiuid_ != &::google::protobuf::internal::kEmptyString) {
        isocentervoiuid_->clear();
      }
    }
    isgoalfromtreatment_ = false;
    doseperfraction_ = 0;
    fractioncount_ = 0;
    totaldose_ = 0;
    doselinepercentage_ = 0;
    goaltargettype_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_targetvoiuid()) {
      if (targetvoiuid_ != &::google::protobuf::internal::kEmptyString) {
        targetvoiuid_->clear();
      }
    }
    voidosetype_ = 0;
    doseatvolumepercentage_ = 0;
    if (has_targetpoiuid()) {
      if (targetpoiuid_ != &::google::protobuf::internal::kEmptyString) {
        targetpoiuid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPlanQAAddNormalGroupConfigTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string treatmentPlanNormalGroupUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_treatmentplannormalgroupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->treatmentplannormalgroupuid().data(), this->treatmentplannormalgroupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isBeamGantryFromTreatment;
        break;
      }
      
      // required bool isBeamGantryFromTreatment = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBeamGantryFromTreatment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeamgantryfromtreatment_)));
          set_has_isbeamgantryfromtreatment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isBeamTableFromTreatment;
        break;
      }
      
      // required bool isBeamTableFromTreatment = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBeamTableFromTreatment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeamtablefromtreatment_)));
          set_has_isbeamtablefromtreatment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isBeamCollimatorFromTreatment;
        break;
      }
      
      // required bool isBeamCollimatorFromTreatment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBeamCollimatorFromTreatment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbeamcollimatorfromtreatment_)));
          set_has_isbeamcollimatorfromtreatment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_gantryStartAngle;
        break;
      }
      
      // optional float gantryStartAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gantryStartAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gantrystartangle_)));
          set_has_gantrystartangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_collimatorAngle;
        break;
      }
      
      // optional float collimatorAngle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorangle_)));
          set_has_collimatorangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_couchAngle;
        break;
      }
      
      // optional float couchAngle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_couchAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &couchangle_)));
          set_has_couchangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_IsoCenterType;
        break;
      }
      
      // required int32 IsoCenterType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsoCenterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isocentertype_)));
          set_has_isocentertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_IsocenterPOIUID;
        break;
      }
      
      // optional string IsocenterPOIUID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IsocenterPOIUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocenterpoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocenterpoiuid().data(), this->isocenterpoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_IsocenterVOIUID;
        break;
      }
      
      // optional string IsocenterVOIUID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_IsocenterVOIUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocentervoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocentervoiuid().data(), this->isocentervoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isGoalFromTreatment;
        break;
      }
      
      // required bool isGoalFromTreatment = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGoalFromTreatment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgoalfromtreatment_)));
          set_has_isgoalfromtreatment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_dosePerFraction;
        break;
      }
      
      // optional double dosePerFraction = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dosePerFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doseperfraction_)));
          set_has_doseperfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fractionCount;
        break;
      }
      
      // optional int32 fractionCount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fractionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fractioncount_)));
          set_has_fractioncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_totalDose;
        break;
      }
      
      // optional double totalDose = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totaldose_)));
          set_has_totaldose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_doseLinePercentage;
        break;
      }
      
      // optional double doseLinePercentage = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseLinePercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doselinepercentage_)));
          set_has_doselinepercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_goalTargetType;
        break;
      }
      
      // required int32 goalTargetType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goalTargetType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goaltargettype_)));
          set_has_goaltargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_targetVOIUID;
        break;
      }
      
      // optional string targetVOIUID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetVOIUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetvoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetvoiuid().data(), this->targetvoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_voiDoseType;
        break;
      }
      
      // optional int32 voiDoseType = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_voiDoseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voidosetype_)));
          set_has_voidosetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_doseAtVolumePercentage;
        break;
      }
      
      // optional double doseAtVolumePercentage = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseAtVolumePercentage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doseatvolumepercentage_)));
          set_has_doseatvolumepercentage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_targetPOIUID;
        break;
      }
      
      // optional string targetPOIUID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetPOIUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_targetpoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->targetpoiuid().data(), this->targetpoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string treatmentPlanNormalGroupUID = 1;
  if (has_treatmentplannormalgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->treatmentplannormalgroupuid().data(), this->treatmentplannormalgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->treatmentplannormalgroupuid(), output);
  }
  
  // required bool isBeamGantryFromTreatment = 2;
  if (has_isbeamgantryfromtreatment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isbeamgantryfromtreatment(), output);
  }
  
  // required bool isBeamTableFromTreatment = 3;
  if (has_isbeamtablefromtreatment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isbeamtablefromtreatment(), output);
  }
  
  // required bool isBeamCollimatorFromTreatment = 4;
  if (has_isbeamcollimatorfromtreatment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isbeamcollimatorfromtreatment(), output);
  }
  
  // optional float gantryStartAngle = 5;
  if (has_gantrystartangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->gantrystartangle(), output);
  }
  
  // optional float collimatorAngle = 6;
  if (has_collimatorangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->collimatorangle(), output);
  }
  
  // optional float couchAngle = 7;
  if (has_couchangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->couchangle(), output);
  }
  
  // required int32 IsoCenterType = 8;
  if (has_isocentertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->isocentertype(), output);
  }
  
  // optional string IsocenterPOIUID = 9;
  if (has_isocenterpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenterpoiuid().data(), this->isocenterpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->isocenterpoiuid(), output);
  }
  
  // optional string IsocenterVOIUID = 10;
  if (has_isocentervoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocentervoiuid().data(), this->isocentervoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->isocentervoiuid(), output);
  }
  
  // required bool isGoalFromTreatment = 11;
  if (has_isgoalfromtreatment()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isgoalfromtreatment(), output);
  }
  
  // optional double dosePerFraction = 12;
  if (has_doseperfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->doseperfraction(), output);
  }
  
  // optional int32 fractionCount = 13;
  if (has_fractioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fractioncount(), output);
  }
  
  // optional double totalDose = 14;
  if (has_totaldose()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->totaldose(), output);
  }
  
  // optional double doseLinePercentage = 15;
  if (has_doselinepercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->doselinepercentage(), output);
  }
  
  // required int32 goalTargetType = 16;
  if (has_goaltargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->goaltargettype(), output);
  }
  
  // optional string targetVOIUID = 17;
  if (has_targetvoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetvoiuid().data(), this->targetvoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->targetvoiuid(), output);
  }
  
  // optional int32 voiDoseType = 18;
  if (has_voidosetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->voidosetype(), output);
  }
  
  // optional double doseAtVolumePercentage = 19;
  if (has_doseatvolumepercentage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->doseatvolumepercentage(), output);
  }
  
  // optional string targetPOIUID = 20;
  if (has_targetpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpoiuid().data(), this->targetpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->targetpoiuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPlanQAAddNormalGroupConfigTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string treatmentPlanNormalGroupUID = 1;
  if (has_treatmentplannormalgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->treatmentplannormalgroupuid().data(), this->treatmentplannormalgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->treatmentplannormalgroupuid(), target);
  }
  
  // required bool isBeamGantryFromTreatment = 2;
  if (has_isbeamgantryfromtreatment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isbeamgantryfromtreatment(), target);
  }
  
  // required bool isBeamTableFromTreatment = 3;
  if (has_isbeamtablefromtreatment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isbeamtablefromtreatment(), target);
  }
  
  // required bool isBeamCollimatorFromTreatment = 4;
  if (has_isbeamcollimatorfromtreatment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isbeamcollimatorfromtreatment(), target);
  }
  
  // optional float gantryStartAngle = 5;
  if (has_gantrystartangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->gantrystartangle(), target);
  }
  
  // optional float collimatorAngle = 6;
  if (has_collimatorangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->collimatorangle(), target);
  }
  
  // optional float couchAngle = 7;
  if (has_couchangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->couchangle(), target);
  }
  
  // required int32 IsoCenterType = 8;
  if (has_isocentertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->isocentertype(), target);
  }
  
  // optional string IsocenterPOIUID = 9;
  if (has_isocenterpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenterpoiuid().data(), this->isocenterpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->isocenterpoiuid(), target);
  }
  
  // optional string IsocenterVOIUID = 10;
  if (has_isocentervoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocentervoiuid().data(), this->isocentervoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->isocentervoiuid(), target);
  }
  
  // required bool isGoalFromTreatment = 11;
  if (has_isgoalfromtreatment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isgoalfromtreatment(), target);
  }
  
  // optional double dosePerFraction = 12;
  if (has_doseperfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->doseperfraction(), target);
  }
  
  // optional int32 fractionCount = 13;
  if (has_fractioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fractioncount(), target);
  }
  
  // optional double totalDose = 14;
  if (has_totaldose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->totaldose(), target);
  }
  
  // optional double doseLinePercentage = 15;
  if (has_doselinepercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->doselinepercentage(), target);
  }
  
  // required int32 goalTargetType = 16;
  if (has_goaltargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->goaltargettype(), target);
  }
  
  // optional string targetVOIUID = 17;
  if (has_targetvoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetvoiuid().data(), this->targetvoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->targetvoiuid(), target);
  }
  
  // optional int32 voiDoseType = 18;
  if (has_voidosetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->voidosetype(), target);
  }
  
  // optional double doseAtVolumePercentage = 19;
  if (has_doseatvolumepercentage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->doseatvolumepercentage(), target);
  }
  
  // optional string targetPOIUID = 20;
  if (has_targetpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->targetpoiuid().data(), this->targetpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->targetpoiuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPlanQAAddNormalGroupConfigTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string treatmentPlanNormalGroupUID = 1;
    if (has_treatmentplannormalgroupuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->treatmentplannormalgroupuid());
    }
    
    // required bool isBeamGantryFromTreatment = 2;
    if (has_isbeamgantryfromtreatment()) {
      total_size += 1 + 1;
    }
    
    // required bool isBeamTableFromTreatment = 3;
    if (has_isbeamtablefromtreatment()) {
      total_size += 1 + 1;
    }
    
    // required bool isBeamCollimatorFromTreatment = 4;
    if (has_isbeamcollimatorfromtreatment()) {
      total_size += 1 + 1;
    }
    
    // optional float gantryStartAngle = 5;
    if (has_gantrystartangle()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorAngle = 6;
    if (has_collimatorangle()) {
      total_size += 1 + 4;
    }
    
    // optional float couchAngle = 7;
    if (has_couchangle()) {
      total_size += 1 + 4;
    }
    
    // required int32 IsoCenterType = 8;
    if (has_isocentertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isocentertype());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string IsocenterPOIUID = 9;
    if (has_isocenterpoiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocenterpoiuid());
    }
    
    // optional string IsocenterVOIUID = 10;
    if (has_isocentervoiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocentervoiuid());
    }
    
    // required bool isGoalFromTreatment = 11;
    if (has_isgoalfromtreatment()) {
      total_size += 1 + 1;
    }
    
    // optional double dosePerFraction = 12;
    if (has_doseperfraction()) {
      total_size += 1 + 8;
    }
    
    // optional int32 fractionCount = 13;
    if (has_fractioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fractioncount());
    }
    
    // optional double totalDose = 14;
    if (has_totaldose()) {
      total_size += 1 + 8;
    }
    
    // optional double doseLinePercentage = 15;
    if (has_doselinepercentage()) {
      total_size += 1 + 8;
    }
    
    // required int32 goalTargetType = 16;
    if (has_goaltargettype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goaltargettype());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string targetVOIUID = 17;
    if (has_targetvoiuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetvoiuid());
    }
    
    // optional int32 voiDoseType = 18;
    if (has_voidosetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->voidosetype());
    }
    
    // optional double doseAtVolumePercentage = 19;
    if (has_doseatvolumepercentage()) {
      total_size += 2 + 8;
    }
    
    // optional string targetPOIUID = 20;
    if (has_targetpoiuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->targetpoiuid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPlanQAAddNormalGroupConfigTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPlanQAAddNormalGroupConfigTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::MergeFrom(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_treatmentplannormalgroupuid()) {
      set_treatmentplannormalgroupuid(from.treatmentplannormalgroupuid());
    }
    if (from.has_isbeamgantryfromtreatment()) {
      set_isbeamgantryfromtreatment(from.isbeamgantryfromtreatment());
    }
    if (from.has_isbeamtablefromtreatment()) {
      set_isbeamtablefromtreatment(from.isbeamtablefromtreatment());
    }
    if (from.has_isbeamcollimatorfromtreatment()) {
      set_isbeamcollimatorfromtreatment(from.isbeamcollimatorfromtreatment());
    }
    if (from.has_gantrystartangle()) {
      set_gantrystartangle(from.gantrystartangle());
    }
    if (from.has_collimatorangle()) {
      set_collimatorangle(from.collimatorangle());
    }
    if (from.has_couchangle()) {
      set_couchangle(from.couchangle());
    }
    if (from.has_isocentertype()) {
      set_isocentertype(from.isocentertype());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isocenterpoiuid()) {
      set_isocenterpoiuid(from.isocenterpoiuid());
    }
    if (from.has_isocentervoiuid()) {
      set_isocentervoiuid(from.isocentervoiuid());
    }
    if (from.has_isgoalfromtreatment()) {
      set_isgoalfromtreatment(from.isgoalfromtreatment());
    }
    if (from.has_doseperfraction()) {
      set_doseperfraction(from.doseperfraction());
    }
    if (from.has_fractioncount()) {
      set_fractioncount(from.fractioncount());
    }
    if (from.has_totaldose()) {
      set_totaldose(from.totaldose());
    }
    if (from.has_doselinepercentage()) {
      set_doselinepercentage(from.doselinepercentage());
    }
    if (from.has_goaltargettype()) {
      set_goaltargettype(from.goaltargettype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_targetvoiuid()) {
      set_targetvoiuid(from.targetvoiuid());
    }
    if (from.has_voidosetype()) {
      set_voidosetype(from.voidosetype());
    }
    if (from.has_doseatvolumepercentage()) {
      set_doseatvolumepercentage(from.doseatvolumepercentage());
    }
    if (from.has_targetpoiuid()) {
      set_targetpoiuid(from.targetpoiuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::CopyFrom(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPlanQAAddNormalGroupConfigTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000848f) != 0x0000848f) return false;
  
  return true;
}

void RtTpsProtoPlanQAAddNormalGroupConfigTable::Swap(RtTpsProtoPlanQAAddNormalGroupConfigTable* other) {
  if (other != this) {
    std::swap(treatmentplannormalgroupuid_, other->treatmentplannormalgroupuid_);
    std::swap(isbeamgantryfromtreatment_, other->isbeamgantryfromtreatment_);
    std::swap(isbeamtablefromtreatment_, other->isbeamtablefromtreatment_);
    std::swap(isbeamcollimatorfromtreatment_, other->isbeamcollimatorfromtreatment_);
    std::swap(gantrystartangle_, other->gantrystartangle_);
    std::swap(collimatorangle_, other->collimatorangle_);
    std::swap(couchangle_, other->couchangle_);
    std::swap(isocentertype_, other->isocentertype_);
    std::swap(isocenterpoiuid_, other->isocenterpoiuid_);
    std::swap(isocentervoiuid_, other->isocentervoiuid_);
    std::swap(isgoalfromtreatment_, other->isgoalfromtreatment_);
    std::swap(doseperfraction_, other->doseperfraction_);
    std::swap(fractioncount_, other->fractioncount_);
    std::swap(totaldose_, other->totaldose_);
    std::swap(doselinepercentage_, other->doselinepercentage_);
    std::swap(goaltargettype_, other->goaltargettype_);
    std::swap(targetvoiuid_, other->targetvoiuid_);
    std::swap(voidosetype_, other->voidosetype_);
    std::swap(doseatvolumepercentage_, other->doseatvolumepercentage_);
    std::swap(targetpoiuid_, other->targetpoiuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPlanQAAddNormalGroupConfigTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPlanQAAddNormalGroupConfigTable_descriptor_;
  metadata.reflection = RtTpsProtoPlanQAAddNormalGroupConfigTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
