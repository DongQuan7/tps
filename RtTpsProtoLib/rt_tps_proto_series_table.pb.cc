// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_series_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoSeriesTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoSeriesTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSeriesTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedSeriesTable_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_series_table.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoSeriesTable_descriptor_ = file->message_type(0);
  static const int RtTpsProtoSeriesTable_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, tableuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, averagemassdensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, offsetz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, anglex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, angley_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, anglez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, referenceelectrondensity_),
  };
  RtTpsProtoSeriesTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoSeriesTable_descriptor_,
      RtTpsProtoSeriesTable::default_instance_,
      RtTpsProtoSeriesTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeriesTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoSeriesTable));
  RtTpsProtoRepeatedSeriesTable_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedSeriesTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeriesTable, seriestable_),
  };
  RtTpsProtoRepeatedSeriesTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedSeriesTable_descriptor_,
      RtTpsProtoRepeatedSeriesTable::default_instance_,
      RtTpsProtoRepeatedSeriesTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeriesTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeriesTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedSeriesTable));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoSeriesTable_descriptor_, &RtTpsProtoSeriesTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedSeriesTable_descriptor_, &RtTpsProtoRepeatedSeriesTable::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_5ftable_2eproto() {
  delete RtTpsProtoSeriesTable::default_instance_;
  delete RtTpsProtoSeriesTable_reflection_;
  delete RtTpsProtoRepeatedSeriesTable::default_instance_;
  delete RtTpsProtoRepeatedSeriesTable_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rt_tps_proto_series_table.proto\022\ttps.p"
    "roto\"\335\001\n\025RtTpsProtoSeriesTable\022\020\n\010tableU"
    "id\030\001 \002(\t\022\021\n\tseriesUid\030\002 \002(\t\022\032\n\022averageMa"
    "ssDensity\030\003 \002(\002\022\017\n\007offsetX\030\004 \002(\002\022\017\n\007offs"
    "etY\030\005 \002(\002\022\017\n\007offsetZ\030\006 \002(\002\022\016\n\006angleX\030\007 \002"
    "(\002\022\016\n\006angleY\030\010 \002(\002\022\016\n\006angleZ\030\t \002(\002\022 \n\030re"
    "ferenceElectronDensity\030\n \002(\002\"V\n\035RtTpsPro"
    "toRepeatedSeriesTable\0225\n\013seriesTable\030\001 \003"
    "(\0132 .tps.proto.RtTpsProtoSeriesTable", 356);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_series_table.proto", &protobuf_RegisterTypes);
  RtTpsProtoSeriesTable::default_instance_ = new RtTpsProtoSeriesTable();
  RtTpsProtoRepeatedSeriesTable::default_instance_ = new RtTpsProtoRepeatedSeriesTable();
  RtTpsProtoSeriesTable::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedSeriesTable::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_5ftable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fseries_5ftable_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fseries_5ftable_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fseries_5ftable_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoSeriesTable::kTableUidFieldNumber;
const int RtTpsProtoSeriesTable::kSeriesUidFieldNumber;
const int RtTpsProtoSeriesTable::kAverageMassDensityFieldNumber;
const int RtTpsProtoSeriesTable::kOffsetXFieldNumber;
const int RtTpsProtoSeriesTable::kOffsetYFieldNumber;
const int RtTpsProtoSeriesTable::kOffsetZFieldNumber;
const int RtTpsProtoSeriesTable::kAngleXFieldNumber;
const int RtTpsProtoSeriesTable::kAngleYFieldNumber;
const int RtTpsProtoSeriesTable::kAngleZFieldNumber;
const int RtTpsProtoSeriesTable::kReferenceElectronDensityFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoSeriesTable::RtTpsProtoSeriesTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoSeriesTable::InitAsDefaultInstance() {
}

RtTpsProtoSeriesTable::RtTpsProtoSeriesTable(const RtTpsProtoSeriesTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoSeriesTable::SharedCtor() {
  _cached_size_ = 0;
  tableuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  averagemassdensity_ = 0;
  offsetx_ = 0;
  offsety_ = 0;
  offsetz_ = 0;
  anglex_ = 0;
  angley_ = 0;
  anglez_ = 0;
  referenceelectrondensity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoSeriesTable::~RtTpsProtoSeriesTable() {
  SharedDtor();
}

void RtTpsProtoSeriesTable::SharedDtor() {
  if (tableuid_ != &::google::protobuf::internal::kEmptyString) {
    delete tableuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoSeriesTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoSeriesTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoSeriesTable_descriptor_;
}

const RtTpsProtoSeriesTable& RtTpsProtoSeriesTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();  return *default_instance_;
}

RtTpsProtoSeriesTable* RtTpsProtoSeriesTable::default_instance_ = NULL;

RtTpsProtoSeriesTable* RtTpsProtoSeriesTable::New() const {
  return new RtTpsProtoSeriesTable;
}

void RtTpsProtoSeriesTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tableuid()) {
      if (tableuid_ != &::google::protobuf::internal::kEmptyString) {
        tableuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    averagemassdensity_ = 0;
    offsetx_ = 0;
    offsety_ = 0;
    offsetz_ = 0;
    anglex_ = 0;
    angley_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    anglez_ = 0;
    referenceelectrondensity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoSeriesTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tableUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tableuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tableuid().data(), this->tableuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesUid;
        break;
      }
      
      // required string seriesUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_averageMassDensity;
        break;
      }
      
      // required float averageMassDensity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageMassDensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagemassdensity_)));
          set_has_averagemassdensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_offsetX;
        break;
      }
      
      // required float offsetX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offsetY;
        break;
      }
      
      // required float offsetY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_offsetZ;
        break;
      }
      
      // required float offsetZ = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetz_)));
          set_has_offsetz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_angleX;
        break;
      }
      
      // required float angleX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angleX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anglex_)));
          set_has_anglex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_angleY;
        break;
      }
      
      // required float angleY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angleY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angley_)));
          set_has_angley();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_angleZ;
        break;
      }
      
      // required float angleZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angleZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &anglez_)));
          set_has_anglez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_referenceElectronDensity;
        break;
      }
      
      // required float referenceElectronDensity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referenceElectronDensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referenceelectrondensity_)));
          set_has_referenceelectrondensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoSeriesTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tableUid = 1;
  if (has_tableuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tableuid().data(), this->tableuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tableuid(), output);
  }
  
  // required string seriesUid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seriesuid(), output);
  }
  
  // required float averageMassDensity = 3;
  if (has_averagemassdensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->averagemassdensity(), output);
  }
  
  // required float offsetX = 4;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offsetx(), output);
  }
  
  // required float offsetY = 5;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offsety(), output);
  }
  
  // required float offsetZ = 6;
  if (has_offsetz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->offsetz(), output);
  }
  
  // required float angleX = 7;
  if (has_anglex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->anglex(), output);
  }
  
  // required float angleY = 8;
  if (has_angley()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->angley(), output);
  }
  
  // required float angleZ = 9;
  if (has_anglez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->anglez(), output);
  }
  
  // required float referenceElectronDensity = 10;
  if (has_referenceelectrondensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->referenceelectrondensity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoSeriesTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tableUid = 1;
  if (has_tableuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tableuid().data(), this->tableuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tableuid(), target);
  }
  
  // required string seriesUid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesuid(), target);
  }
  
  // required float averageMassDensity = 3;
  if (has_averagemassdensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->averagemassdensity(), target);
  }
  
  // required float offsetX = 4;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offsetx(), target);
  }
  
  // required float offsetY = 5;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offsety(), target);
  }
  
  // required float offsetZ = 6;
  if (has_offsetz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->offsetz(), target);
  }
  
  // required float angleX = 7;
  if (has_anglex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->anglex(), target);
  }
  
  // required float angleY = 8;
  if (has_angley()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->angley(), target);
  }
  
  // required float angleZ = 9;
  if (has_anglez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->anglez(), target);
  }
  
  // required float referenceElectronDensity = 10;
  if (has_referenceelectrondensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->referenceelectrondensity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoSeriesTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tableUid = 1;
    if (has_tableuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tableuid());
    }
    
    // required string seriesUid = 2;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required float averageMassDensity = 3;
    if (has_averagemassdensity()) {
      total_size += 1 + 4;
    }
    
    // required float offsetX = 4;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }
    
    // required float offsetY = 5;
    if (has_offsety()) {
      total_size += 1 + 4;
    }
    
    // required float offsetZ = 6;
    if (has_offsetz()) {
      total_size += 1 + 4;
    }
    
    // required float angleX = 7;
    if (has_anglex()) {
      total_size += 1 + 4;
    }
    
    // required float angleY = 8;
    if (has_angley()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float angleZ = 9;
    if (has_anglez()) {
      total_size += 1 + 4;
    }
    
    // required float referenceElectronDensity = 10;
    if (has_referenceelectrondensity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoSeriesTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoSeriesTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoSeriesTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoSeriesTable::MergeFrom(const RtTpsProtoSeriesTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableuid()) {
      set_tableuid(from.tableuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_averagemassdensity()) {
      set_averagemassdensity(from.averagemassdensity());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_offsetz()) {
      set_offsetz(from.offsetz());
    }
    if (from.has_anglex()) {
      set_anglex(from.anglex());
    }
    if (from.has_angley()) {
      set_angley(from.angley());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_anglez()) {
      set_anglez(from.anglez());
    }
    if (from.has_referenceelectrondensity()) {
      set_referenceelectrondensity(from.referenceelectrondensity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoSeriesTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoSeriesTable::CopyFrom(const RtTpsProtoSeriesTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoSeriesTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x000003ff) != 0x000003ff) return false;
  
  return true;
}

void RtTpsProtoSeriesTable::Swap(RtTpsProtoSeriesTable* other) {
  if (other != this) {
    std::swap(tableuid_, other->tableuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(averagemassdensity_, other->averagemassdensity_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(offsetz_, other->offsetz_);
    std::swap(anglex_, other->anglex_);
    std::swap(angley_, other->angley_);
    std::swap(anglez_, other->anglez_);
    std::swap(referenceelectrondensity_, other->referenceelectrondensity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoSeriesTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoSeriesTable_descriptor_;
  metadata.reflection = RtTpsProtoSeriesTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedSeriesTable::kSeriesTableFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedSeriesTable::RtTpsProtoRepeatedSeriesTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedSeriesTable::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedSeriesTable::RtTpsProtoRepeatedSeriesTable(const RtTpsProtoRepeatedSeriesTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSeriesTable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedSeriesTable::~RtTpsProtoRepeatedSeriesTable() {
  SharedDtor();
}

void RtTpsProtoRepeatedSeriesTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedSeriesTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSeriesTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedSeriesTable_descriptor_;
}

const RtTpsProtoRepeatedSeriesTable& RtTpsProtoRepeatedSeriesTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedSeriesTable* RtTpsProtoRepeatedSeriesTable::default_instance_ = NULL;

RtTpsProtoRepeatedSeriesTable* RtTpsProtoRepeatedSeriesTable::New() const {
  return new RtTpsProtoRepeatedSeriesTable;
}

void RtTpsProtoRepeatedSeriesTable::Clear() {
  seriestable_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedSeriesTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_seriestable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_seriesTable;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedSeriesTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
  for (int i = 0; i < this->seriestable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->seriestable(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedSeriesTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
  for (int i = 0; i < this->seriestable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->seriestable(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedSeriesTable::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
  total_size += 1 * this->seriestable_size();
  for (int i = 0; i < this->seriestable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->seriestable(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedSeriesTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedSeriesTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedSeriesTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedSeriesTable::MergeFrom(const RtTpsProtoRepeatedSeriesTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  seriestable_.MergeFrom(from.seriestable_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedSeriesTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSeriesTable::CopyFrom(const RtTpsProtoRepeatedSeriesTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedSeriesTable::IsInitialized() const {
  
  for (int i = 0; i < seriestable_size(); i++) {
    if (!this->seriestable(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedSeriesTable::Swap(RtTpsProtoRepeatedSeriesTable* other) {
  if (other != this) {
    seriestable_.Swap(&other->seriestable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedSeriesTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedSeriesTable_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedSeriesTable_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
