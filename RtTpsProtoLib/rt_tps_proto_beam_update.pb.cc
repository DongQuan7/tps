// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_beam_update.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoBeamUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoBeamUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_beam_update.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoBeamUpdate_descriptor_ = file->message_type(0);
  static const int RtTpsProtoBeamUpdate_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, beam_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, beam_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, beam_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isautocreateddescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isautotrackingshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isshieldingblockautotrackingshape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, dose_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isjoined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, algorithm_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, isjawfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, beam_mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, beam_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, commission_uid_),
  };
  RtTpsProtoBeamUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoBeamUpdate_descriptor_,
      RtTpsProtoBeamUpdate::default_instance_,
      RtTpsProtoBeamUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoBeamUpdate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoBeamUpdate_descriptor_, &RtTpsProtoBeamUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto() {
  delete RtTpsProtoBeamUpdate::default_instance_;
  delete RtTpsProtoBeamUpdate_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036rt_tps_proto_beam_update.proto\022\ttps.pr"
    "oto\"\342\002\n\024RtTpsProtoBeamUpdate\022\020\n\010beam_uid"
    "\030\001 \002(\t\022\021\n\tisVisible\030\002 \001(\010\022\021\n\tbeam_name\030\003"
    " \001(\t\022\030\n\020beam_description\030\004 \001(\t\022 \n\030isAuto"
    "CreatedDescription\030\005 \001(\010\022\033\n\023isAutoTracki"
    "ngShape\030\006 \001(\010\022)\n!isShieldingBlockAutoTra"
    "ckingShape\030\007 \001(\010\022\021\n\tdose_rate\030\010 \001(\002\022\020\n\010i"
    "sJoined\030\t \001(\010\022\026\n\016algorithm_type\030\n \001(\005\022\023\n"
    "\013isJawFollow\030\013 \001(\010\022\017\n\007beam_mu\030\014 \001(\002\022\023\n\013b"
    "eam_weight\030\r \001(\002\022\026\n\016commission_uid\030\016 \001(\t", 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_beam_update.proto", &protobuf_RegisterTypes);
  RtTpsProtoBeamUpdate::default_instance_ = new RtTpsProtoBeamUpdate();
  RtTpsProtoBeamUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoBeamUpdate::kBeamUidFieldNumber;
const int RtTpsProtoBeamUpdate::kIsVisibleFieldNumber;
const int RtTpsProtoBeamUpdate::kBeamNameFieldNumber;
const int RtTpsProtoBeamUpdate::kBeamDescriptionFieldNumber;
const int RtTpsProtoBeamUpdate::kIsAutoCreatedDescriptionFieldNumber;
const int RtTpsProtoBeamUpdate::kIsAutoTrackingShapeFieldNumber;
const int RtTpsProtoBeamUpdate::kIsShieldingBlockAutoTrackingShapeFieldNumber;
const int RtTpsProtoBeamUpdate::kDoseRateFieldNumber;
const int RtTpsProtoBeamUpdate::kIsJoinedFieldNumber;
const int RtTpsProtoBeamUpdate::kAlgorithmTypeFieldNumber;
const int RtTpsProtoBeamUpdate::kIsJawFollowFieldNumber;
const int RtTpsProtoBeamUpdate::kBeamMuFieldNumber;
const int RtTpsProtoBeamUpdate::kBeamWeightFieldNumber;
const int RtTpsProtoBeamUpdate::kCommissionUidFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoBeamUpdate::RtTpsProtoBeamUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoBeamUpdate::InitAsDefaultInstance() {
}

RtTpsProtoBeamUpdate::RtTpsProtoBeamUpdate(const RtTpsProtoBeamUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoBeamUpdate::SharedCtor() {
  _cached_size_ = 0;
  beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isvisible_ = false;
  beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beam_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isautocreateddescription_ = false;
  isautotrackingshape_ = false;
  isshieldingblockautotrackingshape_ = false;
  dose_rate_ = 0;
  isjoined_ = false;
  algorithm_type_ = 0;
  isjawfollow_ = false;
  beam_mu_ = 0;
  beam_weight_ = 0;
  commission_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoBeamUpdate::~RtTpsProtoBeamUpdate() {
  SharedDtor();
}

void RtTpsProtoBeamUpdate::SharedDtor() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_uid_;
  }
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_name_;
  }
  if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_description_;
  }
  if (commission_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete commission_uid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoBeamUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoBeamUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoBeamUpdate_descriptor_;
}

const RtTpsProtoBeamUpdate& RtTpsProtoBeamUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();  return *default_instance_;
}

RtTpsProtoBeamUpdate* RtTpsProtoBeamUpdate::default_instance_ = NULL;

RtTpsProtoBeamUpdate* RtTpsProtoBeamUpdate::New() const {
  return new RtTpsProtoBeamUpdate;
}

void RtTpsProtoBeamUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beam_uid()) {
      if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
        beam_uid_->clear();
      }
    }
    isvisible_ = false;
    if (has_beam_name()) {
      if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
        beam_name_->clear();
      }
    }
    if (has_beam_description()) {
      if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
        beam_description_->clear();
      }
    }
    isautocreateddescription_ = false;
    isautotrackingshape_ = false;
    isshieldingblockautotrackingshape_ = false;
    dose_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isjoined_ = false;
    algorithm_type_ = 0;
    isjawfollow_ = false;
    beam_mu_ = 0;
    beam_weight_ = 0;
    if (has_commission_uid()) {
      if (commission_uid_ != &::google::protobuf::internal::kEmptyString) {
        commission_uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoBeamUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string beam_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_uid().data(), this->beam_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isVisible;
        break;
      }
      
      // optional bool isVisible = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beam_name;
        break;
      }
      
      // optional string beam_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_name().data(), this->beam_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beam_description;
        break;
      }
      
      // optional string beam_description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_description().data(), this->beam_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAutoCreatedDescription;
        break;
      }
      
      // optional bool isAutoCreatedDescription = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoCreatedDescription:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautocreateddescription_)));
          set_has_isautocreateddescription();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isAutoTrackingShape;
        break;
      }
      
      // optional bool isAutoTrackingShape = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoTrackingShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautotrackingshape_)));
          set_has_isautotrackingshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isShieldingBlockAutoTrackingShape;
        break;
      }
      
      // optional bool isShieldingBlockAutoTrackingShape = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShieldingBlockAutoTrackingShape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshieldingblockautotrackingshape_)));
          set_has_isshieldingblockautotrackingshape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_dose_rate;
        break;
      }
      
      // optional float dose_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_rate_)));
          set_has_dose_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isJoined;
        break;
      }
      
      // optional bool isJoined = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoined_)));
          set_has_isjoined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_algorithm_type;
        break;
      }
      
      // optional int32 algorithm_type = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithm_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algorithm_type_)));
          set_has_algorithm_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isJawFollow;
        break;
      }
      
      // optional bool isJawFollow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJawFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjawfollow_)));
          set_has_isjawfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_beam_mu;
        break;
      }
      
      // optional float beam_mu = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beam_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_mu_)));
          set_has_beam_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_beam_weight;
        break;
      }
      
      // optional float beam_weight = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beam_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_weight_)));
          set_has_beam_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_commission_uid;
        break;
      }
      
      // optional string commission_uid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commission_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commission_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commission_uid().data(), this->commission_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoBeamUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->beam_uid(), output);
  }
  
  // optional bool isVisible = 2;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isvisible(), output);
  }
  
  // optional string beam_name = 3;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->beam_name(), output);
  }
  
  // optional string beam_description = 4;
  if (has_beam_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_description().data(), this->beam_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beam_description(), output);
  }
  
  // optional bool isAutoCreatedDescription = 5;
  if (has_isautocreateddescription()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isautocreateddescription(), output);
  }
  
  // optional bool isAutoTrackingShape = 6;
  if (has_isautotrackingshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isautotrackingshape(), output);
  }
  
  // optional bool isShieldingBlockAutoTrackingShape = 7;
  if (has_isshieldingblockautotrackingshape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isshieldingblockautotrackingshape(), output);
  }
  
  // optional float dose_rate = 8;
  if (has_dose_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dose_rate(), output);
  }
  
  // optional bool isJoined = 9;
  if (has_isjoined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isjoined(), output);
  }
  
  // optional int32 algorithm_type = 10;
  if (has_algorithm_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->algorithm_type(), output);
  }
  
  // optional bool isJawFollow = 11;
  if (has_isjawfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isjawfollow(), output);
  }
  
  // optional float beam_mu = 12;
  if (has_beam_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->beam_mu(), output);
  }
  
  // optional float beam_weight = 13;
  if (has_beam_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->beam_weight(), output);
  }
  
  // optional string commission_uid = 14;
  if (has_commission_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commission_uid().data(), this->commission_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->commission_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoBeamUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beam_uid(), target);
  }
  
  // optional bool isVisible = 2;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isvisible(), target);
  }
  
  // optional string beam_name = 3;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->beam_name(), target);
  }
  
  // optional string beam_description = 4;
  if (has_beam_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_description().data(), this->beam_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beam_description(), target);
  }
  
  // optional bool isAutoCreatedDescription = 5;
  if (has_isautocreateddescription()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isautocreateddescription(), target);
  }
  
  // optional bool isAutoTrackingShape = 6;
  if (has_isautotrackingshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isautotrackingshape(), target);
  }
  
  // optional bool isShieldingBlockAutoTrackingShape = 7;
  if (has_isshieldingblockautotrackingshape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isshieldingblockautotrackingshape(), target);
  }
  
  // optional float dose_rate = 8;
  if (has_dose_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dose_rate(), target);
  }
  
  // optional bool isJoined = 9;
  if (has_isjoined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isjoined(), target);
  }
  
  // optional int32 algorithm_type = 10;
  if (has_algorithm_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->algorithm_type(), target);
  }
  
  // optional bool isJawFollow = 11;
  if (has_isjawfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isjawfollow(), target);
  }
  
  // optional float beam_mu = 12;
  if (has_beam_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->beam_mu(), target);
  }
  
  // optional float beam_weight = 13;
  if (has_beam_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->beam_weight(), target);
  }
  
  // optional string commission_uid = 14;
  if (has_commission_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commission_uid().data(), this->commission_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->commission_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoBeamUpdate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string beam_uid = 1;
    if (has_beam_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_uid());
    }
    
    // optional bool isVisible = 2;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }
    
    // optional string beam_name = 3;
    if (has_beam_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_name());
    }
    
    // optional string beam_description = 4;
    if (has_beam_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_description());
    }
    
    // optional bool isAutoCreatedDescription = 5;
    if (has_isautocreateddescription()) {
      total_size += 1 + 1;
    }
    
    // optional bool isAutoTrackingShape = 6;
    if (has_isautotrackingshape()) {
      total_size += 1 + 1;
    }
    
    // optional bool isShieldingBlockAutoTrackingShape = 7;
    if (has_isshieldingblockautotrackingshape()) {
      total_size += 1 + 1;
    }
    
    // optional float dose_rate = 8;
    if (has_dose_rate()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isJoined = 9;
    if (has_isjoined()) {
      total_size += 1 + 1;
    }
    
    // optional int32 algorithm_type = 10;
    if (has_algorithm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algorithm_type());
    }
    
    // optional bool isJawFollow = 11;
    if (has_isjawfollow()) {
      total_size += 1 + 1;
    }
    
    // optional float beam_mu = 12;
    if (has_beam_mu()) {
      total_size += 1 + 4;
    }
    
    // optional float beam_weight = 13;
    if (has_beam_weight()) {
      total_size += 1 + 4;
    }
    
    // optional string commission_uid = 14;
    if (has_commission_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commission_uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoBeamUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoBeamUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoBeamUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoBeamUpdate::MergeFrom(const RtTpsProtoBeamUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beam_uid()) {
      set_beam_uid(from.beam_uid());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_beam_name()) {
      set_beam_name(from.beam_name());
    }
    if (from.has_beam_description()) {
      set_beam_description(from.beam_description());
    }
    if (from.has_isautocreateddescription()) {
      set_isautocreateddescription(from.isautocreateddescription());
    }
    if (from.has_isautotrackingshape()) {
      set_isautotrackingshape(from.isautotrackingshape());
    }
    if (from.has_isshieldingblockautotrackingshape()) {
      set_isshieldingblockautotrackingshape(from.isshieldingblockautotrackingshape());
    }
    if (from.has_dose_rate()) {
      set_dose_rate(from.dose_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isjoined()) {
      set_isjoined(from.isjoined());
    }
    if (from.has_algorithm_type()) {
      set_algorithm_type(from.algorithm_type());
    }
    if (from.has_isjawfollow()) {
      set_isjawfollow(from.isjawfollow());
    }
    if (from.has_beam_mu()) {
      set_beam_mu(from.beam_mu());
    }
    if (from.has_beam_weight()) {
      set_beam_weight(from.beam_weight());
    }
    if (from.has_commission_uid()) {
      set_commission_uid(from.commission_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoBeamUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoBeamUpdate::CopyFrom(const RtTpsProtoBeamUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoBeamUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoBeamUpdate::Swap(RtTpsProtoBeamUpdate* other) {
  if (other != this) {
    std::swap(beam_uid_, other->beam_uid_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(beam_name_, other->beam_name_);
    std::swap(beam_description_, other->beam_description_);
    std::swap(isautocreateddescription_, other->isautocreateddescription_);
    std::swap(isautotrackingshape_, other->isautotrackingshape_);
    std::swap(isshieldingblockautotrackingshape_, other->isshieldingblockautotrackingshape_);
    std::swap(dose_rate_, other->dose_rate_);
    std::swap(isjoined_, other->isjoined_);
    std::swap(algorithm_type_, other->algorithm_type_);
    std::swap(isjawfollow_, other->isjawfollow_);
    std::swap(beam_mu_, other->beam_mu_);
    std::swap(beam_weight_, other->beam_weight_);
    std::swap(commission_uid_, other->commission_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoBeamUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoBeamUpdate_descriptor_;
  metadata.reflection = RtTpsProtoBeamUpdate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
