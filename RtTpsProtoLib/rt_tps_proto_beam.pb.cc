// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_beam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoBeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoBeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedBeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedBeam_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_beam.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoBeam_descriptor_ = file->message_type(0);
  static const int RtTpsProtoBeam_offsets_[60] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, normal_group_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, commissioned_unit_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, isocenter_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, ssd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_visible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_clockwise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_joined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, edit_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, dose_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, beam_dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_dose_valid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, segment_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, gantry_start_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, gantry_arc_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, collimator_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, couch_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, aperture_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_auto_tracking_shaped_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, target_voi_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, target_margin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, target_margin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, avoid_voi_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, avoid_margin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, avoid_margin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_jaw_follow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, jaw_follow_margin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, jaw_follow_margin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_x_symmetric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_y_symmetric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, aperture_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, use_shielding_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_shielding_block_auto_tracking_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_target_voi_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_target_margin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_target_margin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_avoid_voi_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_avoid_margin_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, shielding_block_avoid_margin_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, use_virtual_wedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, virtual_wedge_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, use_physical_wedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, physical_wedge_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, tray_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, bolus_voi_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, applicator_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, use_e_beam_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, e_beam_block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_auto_created_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, mlcedittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, algorithmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, dosegrid_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, current_segment_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, is_opposite_beam_),
  };
  RtTpsProtoBeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoBeam_descriptor_,
      RtTpsProtoBeam::default_instance_,
      RtTpsProtoBeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoBeam));
  RtTpsProtoRepeatedBeam_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedBeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeam, beamlist_),
  };
  RtTpsProtoRepeatedBeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedBeam_descriptor_,
      RtTpsProtoRepeatedBeam::default_instance_,
      RtTpsProtoRepeatedBeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedBeam));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoBeam_descriptor_, &RtTpsProtoBeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedBeam_descriptor_, &RtTpsProtoRepeatedBeam::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_2eproto() {
  delete RtTpsProtoBeam::default_instance_;
  delete RtTpsProtoBeam_reflection_;
  delete RtTpsProtoRepeatedBeam::default_instance_;
  delete RtTpsProtoRepeatedBeam_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rt_tps_proto_beam.proto\022\ttps.proto\032\032rt"
    "_tps_proto_segment.proto\032\030rt_tps_proto_b"
    "lock.proto\"\214\r\n\016RtTpsProtoBeam\022\020\n\010beam_ui"
    "d\030\001 \002(\t\022\030\n\020normal_group_uid\030\002 \001(\t\022\023\n\013bea"
    "m_number\030\003 \001(\005\022\021\n\tbeam_name\030\004 \001(\t\022\030\n\020bea"
    "m_description\030\005 \001(\t\022\035\n\025commissioned_unit"
    "_uid\030\006 \001(\t\022\025\n\risocenter_uid\030\007 \001(\t\022\013\n\003ssd"
    "\030\010 \001(\002\022\017\n\007beam_mu\030\t \001(\002\022\022\n\nis_visible\030\n "
    "\001(\010\022\024\n\014is_clockwise\030\013 \001(\010\022\021\n\tis_joined\030\014"
    " \001(\010\022\021\n\tedit_type\030\r \001(\005\022\023\n\013beam_weight\030\016"
    " \001(\002\022\021\n\tdose_rate\030\017 \001(\002\022\021\n\tbeam_dose\030\020 \001"
    "(\002\022\025\n\ris_dose_valid\030\021 \001(\010\0222\n\014segment_lis"
    "t\030\022 \003(\0132\034.tps.proto.RtTpsProtoSegment\022\032\n"
    "\022gantry_start_angle\030\023 \001(\002\022\031\n\021gantry_arc_"
    "length\030\024 \001(\002\022\030\n\020collimator_angle\030\025 \001(\002\022\023"
    "\n\013couch_angle\030\026 \001(\002\022\025\n\raperture_type\030\027 \001"
    "(\005\022\037\n\027is_auto_tracking_shaped\030\030 \001(\010\022\026\n\016t"
    "arget_voi_uid\030\031 \001(\t\022\027\n\017target_margin_x\030\032"
    " \001(\001\022\027\n\017target_margin_y\030\033 \001(\001\022\025\n\ravoid_v"
    "oi_uid\030\034 \001(\t\022\026\n\016avoid_margin_x\030\035 \001(\001\022\026\n\016"
    "avoid_margin_y\030\036 \001(\001\022\025\n\ris_jaw_follow\030\037 "
    "\001(\010\022\033\n\023jaw_follow_margin_x\030  \001(\002\022\033\n\023jaw_"
    "follow_margin_y\030! \001(\002\022\026\n\016is_x_symmetric\030"
    "\" \001(\010\022\026\n\016is_y_symmetric\030# \001(\010\0222\n\016apertur"
    "e_block\030$ \001(\0132\032.tps.proto.RtTpsProtoBloc"
    "k\0223\n\017shielding_block\030% \001(\0132\032.tps.proto.R"
    "tTpsProtoBlock\022\033\n\023use_shielding_block\030& "
    "\001(\010\022.\n&is_shielding_block_auto_tracking_"
    "shape\030\' \001(\010\022&\n\036shielding_block_target_vo"
    "i_uid\030( \001(\t\022\'\n\037shielding_block_target_ma"
    "rgin_x\030) \001(\001\022\'\n\037shielding_block_target_m"
    "argin_y\030* \001(\001\022%\n\035shielding_block_avoid_v"
    "oi_uid\030+ \001(\t\022&\n\036shielding_block_avoid_ma"
    "rgin_x\030, \001(\001\022&\n\036shielding_block_avoid_ma"
    "rgin_y\030- \001(\001\022\031\n\021use_virtual_wedge\030. \001(\010\022"
    "\031\n\021virtual_wedge_uid\030/ \001(\t\022\032\n\022use_physic"
    "al_wedge\0300 \001(\010\022\032\n\022physical_wedge_uid\0301 \001"
    "(\t\022\020\n\010tray_uid\0302 \001(\t\022\025\n\rbolus_voi_uid\0303 "
    "\001(\t\022\026\n\016applicator_uid\0304 \001(\t\022\030\n\020use_e_bea"
    "m_block\0305 \001(\010\0220\n\014e_beam_block\0306 \001(\0132\032.tp"
    "s.proto.RtTpsProtoBlock\022\027\n\017is_auto_creat"
    "ed\0307 \001(\010\022\023\n\013mlcedittype\0308 \001(\005\022\025\n\ralgorit"
    "hmType\0309 \001(\005\022\024\n\014dosegrid_uid\030: \001(\t\022\033\n\023cu"
    "rrent_segment_uid\030; \001(\t\022\030\n\020is_opposite_b"
    "eam\030< \001(\010\"E\n\026RtTpsProtoRepeatedBeam\022+\n\010b"
    "eamList\030\001 \003(\0132\031.tps.proto.RtTpsProtoBeam", 1840);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_beam.proto", &protobuf_RegisterTypes);
  RtTpsProtoBeam::default_instance_ = new RtTpsProtoBeam();
  RtTpsProtoRepeatedBeam::default_instance_ = new RtTpsProtoRepeatedBeam();
  RtTpsProtoBeam::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedBeam::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fbeam_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoBeam::kBeamUidFieldNumber;
const int RtTpsProtoBeam::kNormalGroupUidFieldNumber;
const int RtTpsProtoBeam::kBeamNumberFieldNumber;
const int RtTpsProtoBeam::kBeamNameFieldNumber;
const int RtTpsProtoBeam::kBeamDescriptionFieldNumber;
const int RtTpsProtoBeam::kCommissionedUnitUidFieldNumber;
const int RtTpsProtoBeam::kIsocenterUidFieldNumber;
const int RtTpsProtoBeam::kSsdFieldNumber;
const int RtTpsProtoBeam::kBeamMuFieldNumber;
const int RtTpsProtoBeam::kIsVisibleFieldNumber;
const int RtTpsProtoBeam::kIsClockwiseFieldNumber;
const int RtTpsProtoBeam::kIsJoinedFieldNumber;
const int RtTpsProtoBeam::kEditTypeFieldNumber;
const int RtTpsProtoBeam::kBeamWeightFieldNumber;
const int RtTpsProtoBeam::kDoseRateFieldNumber;
const int RtTpsProtoBeam::kBeamDoseFieldNumber;
const int RtTpsProtoBeam::kIsDoseValidFieldNumber;
const int RtTpsProtoBeam::kSegmentListFieldNumber;
const int RtTpsProtoBeam::kGantryStartAngleFieldNumber;
const int RtTpsProtoBeam::kGantryArcLengthFieldNumber;
const int RtTpsProtoBeam::kCollimatorAngleFieldNumber;
const int RtTpsProtoBeam::kCouchAngleFieldNumber;
const int RtTpsProtoBeam::kApertureTypeFieldNumber;
const int RtTpsProtoBeam::kIsAutoTrackingShapedFieldNumber;
const int RtTpsProtoBeam::kTargetVoiUidFieldNumber;
const int RtTpsProtoBeam::kTargetMarginXFieldNumber;
const int RtTpsProtoBeam::kTargetMarginYFieldNumber;
const int RtTpsProtoBeam::kAvoidVoiUidFieldNumber;
const int RtTpsProtoBeam::kAvoidMarginXFieldNumber;
const int RtTpsProtoBeam::kAvoidMarginYFieldNumber;
const int RtTpsProtoBeam::kIsJawFollowFieldNumber;
const int RtTpsProtoBeam::kJawFollowMarginXFieldNumber;
const int RtTpsProtoBeam::kJawFollowMarginYFieldNumber;
const int RtTpsProtoBeam::kIsXSymmetricFieldNumber;
const int RtTpsProtoBeam::kIsYSymmetricFieldNumber;
const int RtTpsProtoBeam::kApertureBlockFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockFieldNumber;
const int RtTpsProtoBeam::kUseShieldingBlockFieldNumber;
const int RtTpsProtoBeam::kIsShieldingBlockAutoTrackingShapeFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockTargetVoiUidFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockTargetMarginXFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockTargetMarginYFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockAvoidVoiUidFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockAvoidMarginXFieldNumber;
const int RtTpsProtoBeam::kShieldingBlockAvoidMarginYFieldNumber;
const int RtTpsProtoBeam::kUseVirtualWedgeFieldNumber;
const int RtTpsProtoBeam::kVirtualWedgeUidFieldNumber;
const int RtTpsProtoBeam::kUsePhysicalWedgeFieldNumber;
const int RtTpsProtoBeam::kPhysicalWedgeUidFieldNumber;
const int RtTpsProtoBeam::kTrayUidFieldNumber;
const int RtTpsProtoBeam::kBolusVoiUidFieldNumber;
const int RtTpsProtoBeam::kApplicatorUidFieldNumber;
const int RtTpsProtoBeam::kUseEBeamBlockFieldNumber;
const int RtTpsProtoBeam::kEBeamBlockFieldNumber;
const int RtTpsProtoBeam::kIsAutoCreatedFieldNumber;
const int RtTpsProtoBeam::kMlcedittypeFieldNumber;
const int RtTpsProtoBeam::kAlgorithmTypeFieldNumber;
const int RtTpsProtoBeam::kDosegridUidFieldNumber;
const int RtTpsProtoBeam::kCurrentSegmentUidFieldNumber;
const int RtTpsProtoBeam::kIsOppositeBeamFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoBeam::RtTpsProtoBeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoBeam::InitAsDefaultInstance() {
  aperture_block_ = const_cast< ::tps::proto::RtTpsProtoBlock*>(&::tps::proto::RtTpsProtoBlock::default_instance());
  shielding_block_ = const_cast< ::tps::proto::RtTpsProtoBlock*>(&::tps::proto::RtTpsProtoBlock::default_instance());
  e_beam_block_ = const_cast< ::tps::proto::RtTpsProtoBlock*>(&::tps::proto::RtTpsProtoBlock::default_instance());
}

RtTpsProtoBeam::RtTpsProtoBeam(const RtTpsProtoBeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoBeam::SharedCtor() {
  _cached_size_ = 0;
  beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normal_group_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beam_number_ = 0;
  beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beam_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commissioned_unit_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isocenter_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ssd_ = 0;
  beam_mu_ = 0;
  is_visible_ = false;
  is_clockwise_ = false;
  is_joined_ = false;
  edit_type_ = 0;
  beam_weight_ = 0;
  dose_rate_ = 0;
  beam_dose_ = 0;
  is_dose_valid_ = false;
  gantry_start_angle_ = 0;
  gantry_arc_length_ = 0;
  collimator_angle_ = 0;
  couch_angle_ = 0;
  aperture_type_ = 0;
  is_auto_tracking_shaped_ = false;
  target_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_margin_x_ = 0;
  target_margin_y_ = 0;
  avoid_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  avoid_margin_x_ = 0;
  avoid_margin_y_ = 0;
  is_jaw_follow_ = false;
  jaw_follow_margin_x_ = 0;
  jaw_follow_margin_y_ = 0;
  is_x_symmetric_ = false;
  is_y_symmetric_ = false;
  aperture_block_ = NULL;
  shielding_block_ = NULL;
  use_shielding_block_ = false;
  is_shielding_block_auto_tracking_shape_ = false;
  shielding_block_target_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shielding_block_target_margin_x_ = 0;
  shielding_block_target_margin_y_ = 0;
  shielding_block_avoid_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  shielding_block_avoid_margin_x_ = 0;
  shielding_block_avoid_margin_y_ = 0;
  use_virtual_wedge_ = false;
  virtual_wedge_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_physical_wedge_ = false;
  physical_wedge_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tray_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bolus_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicator_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  use_e_beam_block_ = false;
  e_beam_block_ = NULL;
  is_auto_created_ = false;
  mlcedittype_ = 0;
  algorithmtype_ = 0;
  dosegrid_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  current_segment_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_opposite_beam_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoBeam::~RtTpsProtoBeam() {
  SharedDtor();
}

void RtTpsProtoBeam::SharedDtor() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_uid_;
  }
  if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_group_uid_;
  }
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_name_;
  }
  if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_description_;
  }
  if (commissioned_unit_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissioned_unit_uid_;
  }
  if (isocenter_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete isocenter_uid_;
  }
  if (target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete target_voi_uid_;
  }
  if (avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete avoid_voi_uid_;
  }
  if (shielding_block_target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete shielding_block_target_voi_uid_;
  }
  if (shielding_block_avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete shielding_block_avoid_voi_uid_;
  }
  if (virtual_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete virtual_wedge_uid_;
  }
  if (physical_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete physical_wedge_uid_;
  }
  if (tray_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete tray_uid_;
  }
  if (bolus_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete bolus_voi_uid_;
  }
  if (applicator_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete applicator_uid_;
  }
  if (dosegrid_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete dosegrid_uid_;
  }
  if (current_segment_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete current_segment_uid_;
  }
  if (this != default_instance_) {
    delete aperture_block_;
    delete shielding_block_;
    delete e_beam_block_;
  }
}

void RtTpsProtoBeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoBeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoBeam_descriptor_;
}

const RtTpsProtoBeam& RtTpsProtoBeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();  return *default_instance_;
}

RtTpsProtoBeam* RtTpsProtoBeam::default_instance_ = NULL;

RtTpsProtoBeam* RtTpsProtoBeam::New() const {
  return new RtTpsProtoBeam;
}

void RtTpsProtoBeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beam_uid()) {
      if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
        beam_uid_->clear();
      }
    }
    if (has_normal_group_uid()) {
      if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
        normal_group_uid_->clear();
      }
    }
    beam_number_ = 0;
    if (has_beam_name()) {
      if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
        beam_name_->clear();
      }
    }
    if (has_beam_description()) {
      if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
        beam_description_->clear();
      }
    }
    if (has_commissioned_unit_uid()) {
      if (commissioned_unit_uid_ != &::google::protobuf::internal::kEmptyString) {
        commissioned_unit_uid_->clear();
      }
    }
    if (has_isocenter_uid()) {
      if (isocenter_uid_ != &::google::protobuf::internal::kEmptyString) {
        isocenter_uid_->clear();
      }
    }
    ssd_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    beam_mu_ = 0;
    is_visible_ = false;
    is_clockwise_ = false;
    is_joined_ = false;
    edit_type_ = 0;
    beam_weight_ = 0;
    dose_rate_ = 0;
    beam_dose_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    is_dose_valid_ = false;
    gantry_start_angle_ = 0;
    gantry_arc_length_ = 0;
    collimator_angle_ = 0;
    couch_angle_ = 0;
    aperture_type_ = 0;
    is_auto_tracking_shaped_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_target_voi_uid()) {
      if (target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
        target_voi_uid_->clear();
      }
    }
    target_margin_x_ = 0;
    target_margin_y_ = 0;
    if (has_avoid_voi_uid()) {
      if (avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
        avoid_voi_uid_->clear();
      }
    }
    avoid_margin_x_ = 0;
    avoid_margin_y_ = 0;
    is_jaw_follow_ = false;
    jaw_follow_margin_x_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    jaw_follow_margin_y_ = 0;
    is_x_symmetric_ = false;
    is_y_symmetric_ = false;
    if (has_aperture_block()) {
      if (aperture_block_ != NULL) aperture_block_->::tps::proto::RtTpsProtoBlock::Clear();
    }
    if (has_shielding_block()) {
      if (shielding_block_ != NULL) shielding_block_->::tps::proto::RtTpsProtoBlock::Clear();
    }
    use_shielding_block_ = false;
    is_shielding_block_auto_tracking_shape_ = false;
    if (has_shielding_block_target_voi_uid()) {
      if (shielding_block_target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
        shielding_block_target_voi_uid_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    shielding_block_target_margin_x_ = 0;
    shielding_block_target_margin_y_ = 0;
    if (has_shielding_block_avoid_voi_uid()) {
      if (shielding_block_avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
        shielding_block_avoid_voi_uid_->clear();
      }
    }
    shielding_block_avoid_margin_x_ = 0;
    shielding_block_avoid_margin_y_ = 0;
    use_virtual_wedge_ = false;
    if (has_virtual_wedge_uid()) {
      if (virtual_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
        virtual_wedge_uid_->clear();
      }
    }
    use_physical_wedge_ = false;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (has_physical_wedge_uid()) {
      if (physical_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
        physical_wedge_uid_->clear();
      }
    }
    if (has_tray_uid()) {
      if (tray_uid_ != &::google::protobuf::internal::kEmptyString) {
        tray_uid_->clear();
      }
    }
    if (has_bolus_voi_uid()) {
      if (bolus_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
        bolus_voi_uid_->clear();
      }
    }
    if (has_applicator_uid()) {
      if (applicator_uid_ != &::google::protobuf::internal::kEmptyString) {
        applicator_uid_->clear();
      }
    }
    use_e_beam_block_ = false;
    if (has_e_beam_block()) {
      if (e_beam_block_ != NULL) e_beam_block_->::tps::proto::RtTpsProtoBlock::Clear();
    }
    is_auto_created_ = false;
    mlcedittype_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    algorithmtype_ = 0;
    if (has_dosegrid_uid()) {
      if (dosegrid_uid_ != &::google::protobuf::internal::kEmptyString) {
        dosegrid_uid_->clear();
      }
    }
    if (has_current_segment_uid()) {
      if (current_segment_uid_ != &::google::protobuf::internal::kEmptyString) {
        current_segment_uid_->clear();
      }
    }
    is_opposite_beam_ = false;
  }
  segment_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoBeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string beam_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_uid().data(), this->beam_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal_group_uid;
        break;
      }
      
      // optional string normal_group_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_group_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_group_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normal_group_uid().data(), this->normal_group_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beam_number;
        break;
      }
      
      // optional int32 beam_number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beam_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beam_number_)));
          set_has_beam_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beam_name;
        break;
      }
      
      // optional string beam_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_name().data(), this->beam_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beam_description;
        break;
      }
      
      // optional string beam_description = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_description().data(), this->beam_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_commissioned_unit_uid;
        break;
      }
      
      // optional string commissioned_unit_uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissioned_unit_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissioned_unit_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissioned_unit_uid().data(), this->commissioned_unit_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_isocenter_uid;
        break;
      }
      
      // optional string isocenter_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isocenter_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocenter_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocenter_uid().data(), this->isocenter_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ssd;
        break;
      }
      
      // optional float ssd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ssd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssd_)));
          set_has_ssd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_beam_mu;
        break;
      }
      
      // optional float beam_mu = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beam_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_mu_)));
          set_has_beam_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_is_visible;
        break;
      }
      
      // optional bool is_visible = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_visible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_visible_)));
          set_has_is_visible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_is_clockwise;
        break;
      }
      
      // optional bool is_clockwise = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_clockwise:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_clockwise_)));
          set_has_is_clockwise();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_is_joined;
        break;
      }
      
      // optional bool is_joined = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_joined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_joined_)));
          set_has_is_joined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_edit_type;
        break;
      }
      
      // optional int32 edit_type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_edit_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edit_type_)));
          set_has_edit_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_beam_weight;
        break;
      }
      
      // optional float beam_weight = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beam_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_weight_)));
          set_has_beam_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_dose_rate;
        break;
      }
      
      // optional float dose_rate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_rate_)));
          set_has_dose_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_beam_dose;
        break;
      }
      
      // optional float beam_dose = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beam_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beam_dose_)));
          set_has_beam_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_is_dose_valid;
        break;
      }
      
      // optional bool is_dose_valid = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_dose_valid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_dose_valid_)));
          set_has_is_dose_valid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_segment_list;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segment_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segment_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_segment_list;
        if (input->ExpectTag(157)) goto parse_gantry_start_angle;
        break;
      }
      
      // optional float gantry_start_angle = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gantry_start_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gantry_start_angle_)));
          set_has_gantry_start_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_gantry_arc_length;
        break;
      }
      
      // optional float gantry_arc_length = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gantry_arc_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gantry_arc_length_)));
          set_has_gantry_arc_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_collimator_angle;
        break;
      }
      
      // optional float collimator_angle = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimator_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimator_angle_)));
          set_has_collimator_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_couch_angle;
        break;
      }
      
      // optional float couch_angle = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_couch_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &couch_angle_)));
          set_has_couch_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_aperture_type;
        break;
      }
      
      // optional int32 aperture_type = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aperture_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &aperture_type_)));
          set_has_aperture_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_is_auto_tracking_shaped;
        break;
      }
      
      // optional bool is_auto_tracking_shaped = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_tracking_shaped:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_tracking_shaped_)));
          set_has_is_auto_tracking_shaped();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_target_voi_uid;
        break;
      }
      
      // optional string target_voi_uid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target_voi_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target_voi_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target_voi_uid().data(), this->target_voi_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_target_margin_x;
        break;
      }
      
      // optional double target_margin_x = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_margin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_margin_x_)));
          set_has_target_margin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_target_margin_y;
        break;
      }
      
      // optional double target_margin_y = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_target_margin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_margin_y_)));
          set_has_target_margin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_avoid_voi_uid;
        break;
      }
      
      // optional string avoid_voi_uid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_avoid_voi_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avoid_voi_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->avoid_voi_uid().data(), this->avoid_voi_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_avoid_margin_x;
        break;
      }
      
      // optional double avoid_margin_x = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avoid_margin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avoid_margin_x_)));
          set_has_avoid_margin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_avoid_margin_y;
        break;
      }
      
      // optional double avoid_margin_y = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avoid_margin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avoid_margin_y_)));
          set_has_avoid_margin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_is_jaw_follow;
        break;
      }
      
      // optional bool is_jaw_follow = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_jaw_follow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_jaw_follow_)));
          set_has_is_jaw_follow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_jaw_follow_margin_x;
        break;
      }
      
      // optional float jaw_follow_margin_x = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jaw_follow_margin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jaw_follow_margin_x_)));
          set_has_jaw_follow_margin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_jaw_follow_margin_y;
        break;
      }
      
      // optional float jaw_follow_margin_y = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jaw_follow_margin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jaw_follow_margin_y_)));
          set_has_jaw_follow_margin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_is_x_symmetric;
        break;
      }
      
      // optional bool is_x_symmetric = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_x_symmetric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_x_symmetric_)));
          set_has_is_x_symmetric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_is_y_symmetric;
        break;
      }
      
      // optional bool is_y_symmetric = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_y_symmetric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_y_symmetric_)));
          set_has_is_y_symmetric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_aperture_block;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_aperture_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aperture_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_shielding_block;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shielding_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shielding_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_use_shielding_block;
        break;
      }
      
      // optional bool use_shielding_block = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_shielding_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_shielding_block_)));
          set_has_use_shielding_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_is_shielding_block_auto_tracking_shape;
        break;
      }
      
      // optional bool is_shielding_block_auto_tracking_shape = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_shielding_block_auto_tracking_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_shielding_block_auto_tracking_shape_)));
          set_has_is_shielding_block_auto_tracking_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_shielding_block_target_voi_uid;
        break;
      }
      
      // optional string shielding_block_target_voi_uid = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shielding_block_target_voi_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shielding_block_target_voi_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shielding_block_target_voi_uid().data(), this->shielding_block_target_voi_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_shielding_block_target_margin_x;
        break;
      }
      
      // optional double shielding_block_target_margin_x = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shielding_block_target_margin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shielding_block_target_margin_x_)));
          set_has_shielding_block_target_margin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_shielding_block_target_margin_y;
        break;
      }
      
      // optional double shielding_block_target_margin_y = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shielding_block_target_margin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shielding_block_target_margin_y_)));
          set_has_shielding_block_target_margin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_shielding_block_avoid_voi_uid;
        break;
      }
      
      // optional string shielding_block_avoid_voi_uid = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shielding_block_avoid_voi_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shielding_block_avoid_voi_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->shielding_block_avoid_voi_uid().data(), this->shielding_block_avoid_voi_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_shielding_block_avoid_margin_x;
        break;
      }
      
      // optional double shielding_block_avoid_margin_x = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shielding_block_avoid_margin_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shielding_block_avoid_margin_x_)));
          set_has_shielding_block_avoid_margin_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_shielding_block_avoid_margin_y;
        break;
      }
      
      // optional double shielding_block_avoid_margin_y = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shielding_block_avoid_margin_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shielding_block_avoid_margin_y_)));
          set_has_shielding_block_avoid_margin_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_use_virtual_wedge;
        break;
      }
      
      // optional bool use_virtual_wedge = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_virtual_wedge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_virtual_wedge_)));
          set_has_use_virtual_wedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_virtual_wedge_uid;
        break;
      }
      
      // optional string virtual_wedge_uid = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtual_wedge_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtual_wedge_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtual_wedge_uid().data(), this->virtual_wedge_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_use_physical_wedge;
        break;
      }
      
      // optional bool use_physical_wedge = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_physical_wedge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_physical_wedge_)));
          set_has_use_physical_wedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(394)) goto parse_physical_wedge_uid;
        break;
      }
      
      // optional string physical_wedge_uid = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physical_wedge_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_physical_wedge_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->physical_wedge_uid().data(), this->physical_wedge_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_tray_uid;
        break;
      }
      
      // optional string tray_uid = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tray_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tray_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tray_uid().data(), this->tray_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_bolus_voi_uid;
        break;
      }
      
      // optional string bolus_voi_uid = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bolus_voi_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bolus_voi_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bolus_voi_uid().data(), this->bolus_voi_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_applicator_uid;
        break;
      }
      
      // optional string applicator_uid = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicator_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicator_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicator_uid().data(), this->applicator_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_use_e_beam_block;
        break;
      }
      
      // optional bool use_e_beam_block = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_use_e_beam_block:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_e_beam_block_)));
          set_has_use_e_beam_block();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_e_beam_block;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_e_beam_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_e_beam_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_is_auto_created;
        break;
      }
      
      // optional bool is_auto_created = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_auto_created:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_auto_created_)));
          set_has_is_auto_created();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_mlcedittype;
        break;
      }
      
      // optional int32 mlcedittype = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mlcedittype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mlcedittype_)));
          set_has_mlcedittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_algorithmType;
        break;
      }
      
      // optional int32 algorithmType = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algorithmType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algorithmtype_)));
          set_has_algorithmtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_dosegrid_uid;
        break;
      }
      
      // optional string dosegrid_uid = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dosegrid_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dosegrid_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dosegrid_uid().data(), this->dosegrid_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(474)) goto parse_current_segment_uid;
        break;
      }
      
      // optional string current_segment_uid = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_current_segment_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_current_segment_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->current_segment_uid().data(), this->current_segment_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_is_opposite_beam;
        break;
      }
      
      // optional bool is_opposite_beam = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_opposite_beam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_opposite_beam_)));
          set_has_is_opposite_beam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoBeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->beam_uid(), output);
  }
  
  // optional string normal_group_uid = 2;
  if (has_normal_group_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_group_uid().data(), this->normal_group_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->normal_group_uid(), output);
  }
  
  // optional int32 beam_number = 3;
  if (has_beam_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->beam_number(), output);
  }
  
  // optional string beam_name = 4;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beam_name(), output);
  }
  
  // optional string beam_description = 5;
  if (has_beam_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_description().data(), this->beam_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beam_description(), output);
  }
  
  // optional string commissioned_unit_uid = 6;
  if (has_commissioned_unit_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissioned_unit_uid().data(), this->commissioned_unit_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->commissioned_unit_uid(), output);
  }
  
  // optional string isocenter_uid = 7;
  if (has_isocenter_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenter_uid().data(), this->isocenter_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->isocenter_uid(), output);
  }
  
  // optional float ssd = 8;
  if (has_ssd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ssd(), output);
  }
  
  // optional float beam_mu = 9;
  if (has_beam_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->beam_mu(), output);
  }
  
  // optional bool is_visible = 10;
  if (has_is_visible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->is_visible(), output);
  }
  
  // optional bool is_clockwise = 11;
  if (has_is_clockwise()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->is_clockwise(), output);
  }
  
  // optional bool is_joined = 12;
  if (has_is_joined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_joined(), output);
  }
  
  // optional int32 edit_type = 13;
  if (has_edit_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->edit_type(), output);
  }
  
  // optional float beam_weight = 14;
  if (has_beam_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->beam_weight(), output);
  }
  
  // optional float dose_rate = 15;
  if (has_dose_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->dose_rate(), output);
  }
  
  // optional float beam_dose = 16;
  if (has_beam_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->beam_dose(), output);
  }
  
  // optional bool is_dose_valid = 17;
  if (has_is_dose_valid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_dose_valid(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
  for (int i = 0; i < this->segment_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->segment_list(i), output);
  }
  
  // optional float gantry_start_angle = 19;
  if (has_gantry_start_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->gantry_start_angle(), output);
  }
  
  // optional float gantry_arc_length = 20;
  if (has_gantry_arc_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->gantry_arc_length(), output);
  }
  
  // optional float collimator_angle = 21;
  if (has_collimator_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->collimator_angle(), output);
  }
  
  // optional float couch_angle = 22;
  if (has_couch_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->couch_angle(), output);
  }
  
  // optional int32 aperture_type = 23;
  if (has_aperture_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->aperture_type(), output);
  }
  
  // optional bool is_auto_tracking_shaped = 24;
  if (has_is_auto_tracking_shaped()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->is_auto_tracking_shaped(), output);
  }
  
  // optional string target_voi_uid = 25;
  if (has_target_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_voi_uid().data(), this->target_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->target_voi_uid(), output);
  }
  
  // optional double target_margin_x = 26;
  if (has_target_margin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->target_margin_x(), output);
  }
  
  // optional double target_margin_y = 27;
  if (has_target_margin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->target_margin_y(), output);
  }
  
  // optional string avoid_voi_uid = 28;
  if (has_avoid_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avoid_voi_uid().data(), this->avoid_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->avoid_voi_uid(), output);
  }
  
  // optional double avoid_margin_x = 29;
  if (has_avoid_margin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->avoid_margin_x(), output);
  }
  
  // optional double avoid_margin_y = 30;
  if (has_avoid_margin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->avoid_margin_y(), output);
  }
  
  // optional bool is_jaw_follow = 31;
  if (has_is_jaw_follow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->is_jaw_follow(), output);
  }
  
  // optional float jaw_follow_margin_x = 32;
  if (has_jaw_follow_margin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->jaw_follow_margin_x(), output);
  }
  
  // optional float jaw_follow_margin_y = 33;
  if (has_jaw_follow_margin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->jaw_follow_margin_y(), output);
  }
  
  // optional bool is_x_symmetric = 34;
  if (has_is_x_symmetric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->is_x_symmetric(), output);
  }
  
  // optional bool is_y_symmetric = 35;
  if (has_is_y_symmetric()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(35, this->is_y_symmetric(), output);
  }
  
  // optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
  if (has_aperture_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->aperture_block(), output);
  }
  
  // optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
  if (has_shielding_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->shielding_block(), output);
  }
  
  // optional bool use_shielding_block = 38;
  if (has_use_shielding_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->use_shielding_block(), output);
  }
  
  // optional bool is_shielding_block_auto_tracking_shape = 39;
  if (has_is_shielding_block_auto_tracking_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(39, this->is_shielding_block_auto_tracking_shape(), output);
  }
  
  // optional string shielding_block_target_voi_uid = 40;
  if (has_shielding_block_target_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shielding_block_target_voi_uid().data(), this->shielding_block_target_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->shielding_block_target_voi_uid(), output);
  }
  
  // optional double shielding_block_target_margin_x = 41;
  if (has_shielding_block_target_margin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->shielding_block_target_margin_x(), output);
  }
  
  // optional double shielding_block_target_margin_y = 42;
  if (has_shielding_block_target_margin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->shielding_block_target_margin_y(), output);
  }
  
  // optional string shielding_block_avoid_voi_uid = 43;
  if (has_shielding_block_avoid_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shielding_block_avoid_voi_uid().data(), this->shielding_block_avoid_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->shielding_block_avoid_voi_uid(), output);
  }
  
  // optional double shielding_block_avoid_margin_x = 44;
  if (has_shielding_block_avoid_margin_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->shielding_block_avoid_margin_x(), output);
  }
  
  // optional double shielding_block_avoid_margin_y = 45;
  if (has_shielding_block_avoid_margin_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->shielding_block_avoid_margin_y(), output);
  }
  
  // optional bool use_virtual_wedge = 46;
  if (has_use_virtual_wedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(46, this->use_virtual_wedge(), output);
  }
  
  // optional string virtual_wedge_uid = 47;
  if (has_virtual_wedge_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtual_wedge_uid().data(), this->virtual_wedge_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->virtual_wedge_uid(), output);
  }
  
  // optional bool use_physical_wedge = 48;
  if (has_use_physical_wedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(48, this->use_physical_wedge(), output);
  }
  
  // optional string physical_wedge_uid = 49;
  if (has_physical_wedge_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->physical_wedge_uid().data(), this->physical_wedge_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      49, this->physical_wedge_uid(), output);
  }
  
  // optional string tray_uid = 50;
  if (has_tray_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tray_uid().data(), this->tray_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      50, this->tray_uid(), output);
  }
  
  // optional string bolus_voi_uid = 51;
  if (has_bolus_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolus_voi_uid().data(), this->bolus_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      51, this->bolus_voi_uid(), output);
  }
  
  // optional string applicator_uid = 52;
  if (has_applicator_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_uid().data(), this->applicator_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      52, this->applicator_uid(), output);
  }
  
  // optional bool use_e_beam_block = 53;
  if (has_use_e_beam_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->use_e_beam_block(), output);
  }
  
  // optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
  if (has_e_beam_block()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->e_beam_block(), output);
  }
  
  // optional bool is_auto_created = 55;
  if (has_is_auto_created()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->is_auto_created(), output);
  }
  
  // optional int32 mlcedittype = 56;
  if (has_mlcedittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->mlcedittype(), output);
  }
  
  // optional int32 algorithmType = 57;
  if (has_algorithmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->algorithmtype(), output);
  }
  
  // optional string dosegrid_uid = 58;
  if (has_dosegrid_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dosegrid_uid().data(), this->dosegrid_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      58, this->dosegrid_uid(), output);
  }
  
  // optional string current_segment_uid = 59;
  if (has_current_segment_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_segment_uid().data(), this->current_segment_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      59, this->current_segment_uid(), output);
  }
  
  // optional bool is_opposite_beam = 60;
  if (has_is_opposite_beam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(60, this->is_opposite_beam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoBeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beam_uid(), target);
  }
  
  // optional string normal_group_uid = 2;
  if (has_normal_group_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_group_uid().data(), this->normal_group_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal_group_uid(), target);
  }
  
  // optional int32 beam_number = 3;
  if (has_beam_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->beam_number(), target);
  }
  
  // optional string beam_name = 4;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beam_name(), target);
  }
  
  // optional string beam_description = 5;
  if (has_beam_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_description().data(), this->beam_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->beam_description(), target);
  }
  
  // optional string commissioned_unit_uid = 6;
  if (has_commissioned_unit_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissioned_unit_uid().data(), this->commissioned_unit_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->commissioned_unit_uid(), target);
  }
  
  // optional string isocenter_uid = 7;
  if (has_isocenter_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenter_uid().data(), this->isocenter_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->isocenter_uid(), target);
  }
  
  // optional float ssd = 8;
  if (has_ssd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ssd(), target);
  }
  
  // optional float beam_mu = 9;
  if (has_beam_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->beam_mu(), target);
  }
  
  // optional bool is_visible = 10;
  if (has_is_visible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->is_visible(), target);
  }
  
  // optional bool is_clockwise = 11;
  if (has_is_clockwise()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->is_clockwise(), target);
  }
  
  // optional bool is_joined = 12;
  if (has_is_joined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_joined(), target);
  }
  
  // optional int32 edit_type = 13;
  if (has_edit_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->edit_type(), target);
  }
  
  // optional float beam_weight = 14;
  if (has_beam_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->beam_weight(), target);
  }
  
  // optional float dose_rate = 15;
  if (has_dose_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->dose_rate(), target);
  }
  
  // optional float beam_dose = 16;
  if (has_beam_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->beam_dose(), target);
  }
  
  // optional bool is_dose_valid = 17;
  if (has_is_dose_valid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_dose_valid(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
  for (int i = 0; i < this->segment_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->segment_list(i), target);
  }
  
  // optional float gantry_start_angle = 19;
  if (has_gantry_start_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->gantry_start_angle(), target);
  }
  
  // optional float gantry_arc_length = 20;
  if (has_gantry_arc_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->gantry_arc_length(), target);
  }
  
  // optional float collimator_angle = 21;
  if (has_collimator_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->collimator_angle(), target);
  }
  
  // optional float couch_angle = 22;
  if (has_couch_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->couch_angle(), target);
  }
  
  // optional int32 aperture_type = 23;
  if (has_aperture_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->aperture_type(), target);
  }
  
  // optional bool is_auto_tracking_shaped = 24;
  if (has_is_auto_tracking_shaped()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->is_auto_tracking_shaped(), target);
  }
  
  // optional string target_voi_uid = 25;
  if (has_target_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target_voi_uid().data(), this->target_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->target_voi_uid(), target);
  }
  
  // optional double target_margin_x = 26;
  if (has_target_margin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->target_margin_x(), target);
  }
  
  // optional double target_margin_y = 27;
  if (has_target_margin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->target_margin_y(), target);
  }
  
  // optional string avoid_voi_uid = 28;
  if (has_avoid_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->avoid_voi_uid().data(), this->avoid_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->avoid_voi_uid(), target);
  }
  
  // optional double avoid_margin_x = 29;
  if (has_avoid_margin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->avoid_margin_x(), target);
  }
  
  // optional double avoid_margin_y = 30;
  if (has_avoid_margin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->avoid_margin_y(), target);
  }
  
  // optional bool is_jaw_follow = 31;
  if (has_is_jaw_follow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->is_jaw_follow(), target);
  }
  
  // optional float jaw_follow_margin_x = 32;
  if (has_jaw_follow_margin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->jaw_follow_margin_x(), target);
  }
  
  // optional float jaw_follow_margin_y = 33;
  if (has_jaw_follow_margin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->jaw_follow_margin_y(), target);
  }
  
  // optional bool is_x_symmetric = 34;
  if (has_is_x_symmetric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->is_x_symmetric(), target);
  }
  
  // optional bool is_y_symmetric = 35;
  if (has_is_y_symmetric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(35, this->is_y_symmetric(), target);
  }
  
  // optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
  if (has_aperture_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->aperture_block(), target);
  }
  
  // optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
  if (has_shielding_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->shielding_block(), target);
  }
  
  // optional bool use_shielding_block = 38;
  if (has_use_shielding_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->use_shielding_block(), target);
  }
  
  // optional bool is_shielding_block_auto_tracking_shape = 39;
  if (has_is_shielding_block_auto_tracking_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(39, this->is_shielding_block_auto_tracking_shape(), target);
  }
  
  // optional string shielding_block_target_voi_uid = 40;
  if (has_shielding_block_target_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shielding_block_target_voi_uid().data(), this->shielding_block_target_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->shielding_block_target_voi_uid(), target);
  }
  
  // optional double shielding_block_target_margin_x = 41;
  if (has_shielding_block_target_margin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->shielding_block_target_margin_x(), target);
  }
  
  // optional double shielding_block_target_margin_y = 42;
  if (has_shielding_block_target_margin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->shielding_block_target_margin_y(), target);
  }
  
  // optional string shielding_block_avoid_voi_uid = 43;
  if (has_shielding_block_avoid_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->shielding_block_avoid_voi_uid().data(), this->shielding_block_avoid_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->shielding_block_avoid_voi_uid(), target);
  }
  
  // optional double shielding_block_avoid_margin_x = 44;
  if (has_shielding_block_avoid_margin_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->shielding_block_avoid_margin_x(), target);
  }
  
  // optional double shielding_block_avoid_margin_y = 45;
  if (has_shielding_block_avoid_margin_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->shielding_block_avoid_margin_y(), target);
  }
  
  // optional bool use_virtual_wedge = 46;
  if (has_use_virtual_wedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(46, this->use_virtual_wedge(), target);
  }
  
  // optional string virtual_wedge_uid = 47;
  if (has_virtual_wedge_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtual_wedge_uid().data(), this->virtual_wedge_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->virtual_wedge_uid(), target);
  }
  
  // optional bool use_physical_wedge = 48;
  if (has_use_physical_wedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(48, this->use_physical_wedge(), target);
  }
  
  // optional string physical_wedge_uid = 49;
  if (has_physical_wedge_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->physical_wedge_uid().data(), this->physical_wedge_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->physical_wedge_uid(), target);
  }
  
  // optional string tray_uid = 50;
  if (has_tray_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tray_uid().data(), this->tray_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->tray_uid(), target);
  }
  
  // optional string bolus_voi_uid = 51;
  if (has_bolus_voi_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bolus_voi_uid().data(), this->bolus_voi_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->bolus_voi_uid(), target);
  }
  
  // optional string applicator_uid = 52;
  if (has_applicator_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_uid().data(), this->applicator_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->applicator_uid(), target);
  }
  
  // optional bool use_e_beam_block = 53;
  if (has_use_e_beam_block()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(53, this->use_e_beam_block(), target);
  }
  
  // optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
  if (has_e_beam_block()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->e_beam_block(), target);
  }
  
  // optional bool is_auto_created = 55;
  if (has_is_auto_created()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->is_auto_created(), target);
  }
  
  // optional int32 mlcedittype = 56;
  if (has_mlcedittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->mlcedittype(), target);
  }
  
  // optional int32 algorithmType = 57;
  if (has_algorithmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->algorithmtype(), target);
  }
  
  // optional string dosegrid_uid = 58;
  if (has_dosegrid_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dosegrid_uid().data(), this->dosegrid_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        58, this->dosegrid_uid(), target);
  }
  
  // optional string current_segment_uid = 59;
  if (has_current_segment_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->current_segment_uid().data(), this->current_segment_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        59, this->current_segment_uid(), target);
  }
  
  // optional bool is_opposite_beam = 60;
  if (has_is_opposite_beam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(60, this->is_opposite_beam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoBeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string beam_uid = 1;
    if (has_beam_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_uid());
    }
    
    // optional string normal_group_uid = 2;
    if (has_normal_group_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal_group_uid());
    }
    
    // optional int32 beam_number = 3;
    if (has_beam_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beam_number());
    }
    
    // optional string beam_name = 4;
    if (has_beam_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_name());
    }
    
    // optional string beam_description = 5;
    if (has_beam_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_description());
    }
    
    // optional string commissioned_unit_uid = 6;
    if (has_commissioned_unit_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissioned_unit_uid());
    }
    
    // optional string isocenter_uid = 7;
    if (has_isocenter_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocenter_uid());
    }
    
    // optional float ssd = 8;
    if (has_ssd()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float beam_mu = 9;
    if (has_beam_mu()) {
      total_size += 1 + 4;
    }
    
    // optional bool is_visible = 10;
    if (has_is_visible()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_clockwise = 11;
    if (has_is_clockwise()) {
      total_size += 1 + 1;
    }
    
    // optional bool is_joined = 12;
    if (has_is_joined()) {
      total_size += 1 + 1;
    }
    
    // optional int32 edit_type = 13;
    if (has_edit_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edit_type());
    }
    
    // optional float beam_weight = 14;
    if (has_beam_weight()) {
      total_size += 1 + 4;
    }
    
    // optional float dose_rate = 15;
    if (has_dose_rate()) {
      total_size += 1 + 4;
    }
    
    // optional float beam_dose = 16;
    if (has_beam_dose()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool is_dose_valid = 17;
    if (has_is_dose_valid()) {
      total_size += 2 + 1;
    }
    
    // optional float gantry_start_angle = 19;
    if (has_gantry_start_angle()) {
      total_size += 2 + 4;
    }
    
    // optional float gantry_arc_length = 20;
    if (has_gantry_arc_length()) {
      total_size += 2 + 4;
    }
    
    // optional float collimator_angle = 21;
    if (has_collimator_angle()) {
      total_size += 2 + 4;
    }
    
    // optional float couch_angle = 22;
    if (has_couch_angle()) {
      total_size += 2 + 4;
    }
    
    // optional int32 aperture_type = 23;
    if (has_aperture_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->aperture_type());
    }
    
    // optional bool is_auto_tracking_shaped = 24;
    if (has_is_auto_tracking_shaped()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string target_voi_uid = 25;
    if (has_target_voi_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target_voi_uid());
    }
    
    // optional double target_margin_x = 26;
    if (has_target_margin_x()) {
      total_size += 2 + 8;
    }
    
    // optional double target_margin_y = 27;
    if (has_target_margin_y()) {
      total_size += 2 + 8;
    }
    
    // optional string avoid_voi_uid = 28;
    if (has_avoid_voi_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avoid_voi_uid());
    }
    
    // optional double avoid_margin_x = 29;
    if (has_avoid_margin_x()) {
      total_size += 2 + 8;
    }
    
    // optional double avoid_margin_y = 30;
    if (has_avoid_margin_y()) {
      total_size += 2 + 8;
    }
    
    // optional bool is_jaw_follow = 31;
    if (has_is_jaw_follow()) {
      total_size += 2 + 1;
    }
    
    // optional float jaw_follow_margin_x = 32;
    if (has_jaw_follow_margin_x()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float jaw_follow_margin_y = 33;
    if (has_jaw_follow_margin_y()) {
      total_size += 2 + 4;
    }
    
    // optional bool is_x_symmetric = 34;
    if (has_is_x_symmetric()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_y_symmetric = 35;
    if (has_is_y_symmetric()) {
      total_size += 2 + 1;
    }
    
    // optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
    if (has_aperture_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aperture_block());
    }
    
    // optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
    if (has_shielding_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shielding_block());
    }
    
    // optional bool use_shielding_block = 38;
    if (has_use_shielding_block()) {
      total_size += 2 + 1;
    }
    
    // optional bool is_shielding_block_auto_tracking_shape = 39;
    if (has_is_shielding_block_auto_tracking_shape()) {
      total_size += 2 + 1;
    }
    
    // optional string shielding_block_target_voi_uid = 40;
    if (has_shielding_block_target_voi_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shielding_block_target_voi_uid());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double shielding_block_target_margin_x = 41;
    if (has_shielding_block_target_margin_x()) {
      total_size += 2 + 8;
    }
    
    // optional double shielding_block_target_margin_y = 42;
    if (has_shielding_block_target_margin_y()) {
      total_size += 2 + 8;
    }
    
    // optional string shielding_block_avoid_voi_uid = 43;
    if (has_shielding_block_avoid_voi_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shielding_block_avoid_voi_uid());
    }
    
    // optional double shielding_block_avoid_margin_x = 44;
    if (has_shielding_block_avoid_margin_x()) {
      total_size += 2 + 8;
    }
    
    // optional double shielding_block_avoid_margin_y = 45;
    if (has_shielding_block_avoid_margin_y()) {
      total_size += 2 + 8;
    }
    
    // optional bool use_virtual_wedge = 46;
    if (has_use_virtual_wedge()) {
      total_size += 2 + 1;
    }
    
    // optional string virtual_wedge_uid = 47;
    if (has_virtual_wedge_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtual_wedge_uid());
    }
    
    // optional bool use_physical_wedge = 48;
    if (has_use_physical_wedge()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string physical_wedge_uid = 49;
    if (has_physical_wedge_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->physical_wedge_uid());
    }
    
    // optional string tray_uid = 50;
    if (has_tray_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tray_uid());
    }
    
    // optional string bolus_voi_uid = 51;
    if (has_bolus_voi_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bolus_voi_uid());
    }
    
    // optional string applicator_uid = 52;
    if (has_applicator_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicator_uid());
    }
    
    // optional bool use_e_beam_block = 53;
    if (has_use_e_beam_block()) {
      total_size += 2 + 1;
    }
    
    // optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
    if (has_e_beam_block()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->e_beam_block());
    }
    
    // optional bool is_auto_created = 55;
    if (has_is_auto_created()) {
      total_size += 2 + 1;
    }
    
    // optional int32 mlcedittype = 56;
    if (has_mlcedittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mlcedittype());
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 algorithmType = 57;
    if (has_algorithmtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algorithmtype());
    }
    
    // optional string dosegrid_uid = 58;
    if (has_dosegrid_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dosegrid_uid());
    }
    
    // optional string current_segment_uid = 59;
    if (has_current_segment_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->current_segment_uid());
    }
    
    // optional bool is_opposite_beam = 60;
    if (has_is_opposite_beam()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
  total_size += 2 * this->segment_list_size();
  for (int i = 0; i < this->segment_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segment_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoBeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoBeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoBeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoBeam::MergeFrom(const RtTpsProtoBeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  segment_list_.MergeFrom(from.segment_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beam_uid()) {
      set_beam_uid(from.beam_uid());
    }
    if (from.has_normal_group_uid()) {
      set_normal_group_uid(from.normal_group_uid());
    }
    if (from.has_beam_number()) {
      set_beam_number(from.beam_number());
    }
    if (from.has_beam_name()) {
      set_beam_name(from.beam_name());
    }
    if (from.has_beam_description()) {
      set_beam_description(from.beam_description());
    }
    if (from.has_commissioned_unit_uid()) {
      set_commissioned_unit_uid(from.commissioned_unit_uid());
    }
    if (from.has_isocenter_uid()) {
      set_isocenter_uid(from.isocenter_uid());
    }
    if (from.has_ssd()) {
      set_ssd(from.ssd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_beam_mu()) {
      set_beam_mu(from.beam_mu());
    }
    if (from.has_is_visible()) {
      set_is_visible(from.is_visible());
    }
    if (from.has_is_clockwise()) {
      set_is_clockwise(from.is_clockwise());
    }
    if (from.has_is_joined()) {
      set_is_joined(from.is_joined());
    }
    if (from.has_edit_type()) {
      set_edit_type(from.edit_type());
    }
    if (from.has_beam_weight()) {
      set_beam_weight(from.beam_weight());
    }
    if (from.has_dose_rate()) {
      set_dose_rate(from.dose_rate());
    }
    if (from.has_beam_dose()) {
      set_beam_dose(from.beam_dose());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_is_dose_valid()) {
      set_is_dose_valid(from.is_dose_valid());
    }
    if (from.has_gantry_start_angle()) {
      set_gantry_start_angle(from.gantry_start_angle());
    }
    if (from.has_gantry_arc_length()) {
      set_gantry_arc_length(from.gantry_arc_length());
    }
    if (from.has_collimator_angle()) {
      set_collimator_angle(from.collimator_angle());
    }
    if (from.has_couch_angle()) {
      set_couch_angle(from.couch_angle());
    }
    if (from.has_aperture_type()) {
      set_aperture_type(from.aperture_type());
    }
    if (from.has_is_auto_tracking_shaped()) {
      set_is_auto_tracking_shaped(from.is_auto_tracking_shaped());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_target_voi_uid()) {
      set_target_voi_uid(from.target_voi_uid());
    }
    if (from.has_target_margin_x()) {
      set_target_margin_x(from.target_margin_x());
    }
    if (from.has_target_margin_y()) {
      set_target_margin_y(from.target_margin_y());
    }
    if (from.has_avoid_voi_uid()) {
      set_avoid_voi_uid(from.avoid_voi_uid());
    }
    if (from.has_avoid_margin_x()) {
      set_avoid_margin_x(from.avoid_margin_x());
    }
    if (from.has_avoid_margin_y()) {
      set_avoid_margin_y(from.avoid_margin_y());
    }
    if (from.has_is_jaw_follow()) {
      set_is_jaw_follow(from.is_jaw_follow());
    }
    if (from.has_jaw_follow_margin_x()) {
      set_jaw_follow_margin_x(from.jaw_follow_margin_x());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_jaw_follow_margin_y()) {
      set_jaw_follow_margin_y(from.jaw_follow_margin_y());
    }
    if (from.has_is_x_symmetric()) {
      set_is_x_symmetric(from.is_x_symmetric());
    }
    if (from.has_is_y_symmetric()) {
      set_is_y_symmetric(from.is_y_symmetric());
    }
    if (from.has_aperture_block()) {
      mutable_aperture_block()->::tps::proto::RtTpsProtoBlock::MergeFrom(from.aperture_block());
    }
    if (from.has_shielding_block()) {
      mutable_shielding_block()->::tps::proto::RtTpsProtoBlock::MergeFrom(from.shielding_block());
    }
    if (from.has_use_shielding_block()) {
      set_use_shielding_block(from.use_shielding_block());
    }
    if (from.has_is_shielding_block_auto_tracking_shape()) {
      set_is_shielding_block_auto_tracking_shape(from.is_shielding_block_auto_tracking_shape());
    }
    if (from.has_shielding_block_target_voi_uid()) {
      set_shielding_block_target_voi_uid(from.shielding_block_target_voi_uid());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_shielding_block_target_margin_x()) {
      set_shielding_block_target_margin_x(from.shielding_block_target_margin_x());
    }
    if (from.has_shielding_block_target_margin_y()) {
      set_shielding_block_target_margin_y(from.shielding_block_target_margin_y());
    }
    if (from.has_shielding_block_avoid_voi_uid()) {
      set_shielding_block_avoid_voi_uid(from.shielding_block_avoid_voi_uid());
    }
    if (from.has_shielding_block_avoid_margin_x()) {
      set_shielding_block_avoid_margin_x(from.shielding_block_avoid_margin_x());
    }
    if (from.has_shielding_block_avoid_margin_y()) {
      set_shielding_block_avoid_margin_y(from.shielding_block_avoid_margin_y());
    }
    if (from.has_use_virtual_wedge()) {
      set_use_virtual_wedge(from.use_virtual_wedge());
    }
    if (from.has_virtual_wedge_uid()) {
      set_virtual_wedge_uid(from.virtual_wedge_uid());
    }
    if (from.has_use_physical_wedge()) {
      set_use_physical_wedge(from.use_physical_wedge());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_physical_wedge_uid()) {
      set_physical_wedge_uid(from.physical_wedge_uid());
    }
    if (from.has_tray_uid()) {
      set_tray_uid(from.tray_uid());
    }
    if (from.has_bolus_voi_uid()) {
      set_bolus_voi_uid(from.bolus_voi_uid());
    }
    if (from.has_applicator_uid()) {
      set_applicator_uid(from.applicator_uid());
    }
    if (from.has_use_e_beam_block()) {
      set_use_e_beam_block(from.use_e_beam_block());
    }
    if (from.has_e_beam_block()) {
      mutable_e_beam_block()->::tps::proto::RtTpsProtoBlock::MergeFrom(from.e_beam_block());
    }
    if (from.has_is_auto_created()) {
      set_is_auto_created(from.is_auto_created());
    }
    if (from.has_mlcedittype()) {
      set_mlcedittype(from.mlcedittype());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_algorithmtype()) {
      set_algorithmtype(from.algorithmtype());
    }
    if (from.has_dosegrid_uid()) {
      set_dosegrid_uid(from.dosegrid_uid());
    }
    if (from.has_current_segment_uid()) {
      set_current_segment_uid(from.current_segment_uid());
    }
    if (from.has_is_opposite_beam()) {
      set_is_opposite_beam(from.is_opposite_beam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoBeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoBeam::CopyFrom(const RtTpsProtoBeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoBeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < segment_list_size(); i++) {
    if (!this->segment_list(i).IsInitialized()) return false;
  }
  if (has_aperture_block()) {
    if (!this->aperture_block().IsInitialized()) return false;
  }
  if (has_shielding_block()) {
    if (!this->shielding_block().IsInitialized()) return false;
  }
  if (has_e_beam_block()) {
    if (!this->e_beam_block().IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoBeam::Swap(RtTpsProtoBeam* other) {
  if (other != this) {
    std::swap(beam_uid_, other->beam_uid_);
    std::swap(normal_group_uid_, other->normal_group_uid_);
    std::swap(beam_number_, other->beam_number_);
    std::swap(beam_name_, other->beam_name_);
    std::swap(beam_description_, other->beam_description_);
    std::swap(commissioned_unit_uid_, other->commissioned_unit_uid_);
    std::swap(isocenter_uid_, other->isocenter_uid_);
    std::swap(ssd_, other->ssd_);
    std::swap(beam_mu_, other->beam_mu_);
    std::swap(is_visible_, other->is_visible_);
    std::swap(is_clockwise_, other->is_clockwise_);
    std::swap(is_joined_, other->is_joined_);
    std::swap(edit_type_, other->edit_type_);
    std::swap(beam_weight_, other->beam_weight_);
    std::swap(dose_rate_, other->dose_rate_);
    std::swap(beam_dose_, other->beam_dose_);
    std::swap(is_dose_valid_, other->is_dose_valid_);
    segment_list_.Swap(&other->segment_list_);
    std::swap(gantry_start_angle_, other->gantry_start_angle_);
    std::swap(gantry_arc_length_, other->gantry_arc_length_);
    std::swap(collimator_angle_, other->collimator_angle_);
    std::swap(couch_angle_, other->couch_angle_);
    std::swap(aperture_type_, other->aperture_type_);
    std::swap(is_auto_tracking_shaped_, other->is_auto_tracking_shaped_);
    std::swap(target_voi_uid_, other->target_voi_uid_);
    std::swap(target_margin_x_, other->target_margin_x_);
    std::swap(target_margin_y_, other->target_margin_y_);
    std::swap(avoid_voi_uid_, other->avoid_voi_uid_);
    std::swap(avoid_margin_x_, other->avoid_margin_x_);
    std::swap(avoid_margin_y_, other->avoid_margin_y_);
    std::swap(is_jaw_follow_, other->is_jaw_follow_);
    std::swap(jaw_follow_margin_x_, other->jaw_follow_margin_x_);
    std::swap(jaw_follow_margin_y_, other->jaw_follow_margin_y_);
    std::swap(is_x_symmetric_, other->is_x_symmetric_);
    std::swap(is_y_symmetric_, other->is_y_symmetric_);
    std::swap(aperture_block_, other->aperture_block_);
    std::swap(shielding_block_, other->shielding_block_);
    std::swap(use_shielding_block_, other->use_shielding_block_);
    std::swap(is_shielding_block_auto_tracking_shape_, other->is_shielding_block_auto_tracking_shape_);
    std::swap(shielding_block_target_voi_uid_, other->shielding_block_target_voi_uid_);
    std::swap(shielding_block_target_margin_x_, other->shielding_block_target_margin_x_);
    std::swap(shielding_block_target_margin_y_, other->shielding_block_target_margin_y_);
    std::swap(shielding_block_avoid_voi_uid_, other->shielding_block_avoid_voi_uid_);
    std::swap(shielding_block_avoid_margin_x_, other->shielding_block_avoid_margin_x_);
    std::swap(shielding_block_avoid_margin_y_, other->shielding_block_avoid_margin_y_);
    std::swap(use_virtual_wedge_, other->use_virtual_wedge_);
    std::swap(virtual_wedge_uid_, other->virtual_wedge_uid_);
    std::swap(use_physical_wedge_, other->use_physical_wedge_);
    std::swap(physical_wedge_uid_, other->physical_wedge_uid_);
    std::swap(tray_uid_, other->tray_uid_);
    std::swap(bolus_voi_uid_, other->bolus_voi_uid_);
    std::swap(applicator_uid_, other->applicator_uid_);
    std::swap(use_e_beam_block_, other->use_e_beam_block_);
    std::swap(e_beam_block_, other->e_beam_block_);
    std::swap(is_auto_created_, other->is_auto_created_);
    std::swap(mlcedittype_, other->mlcedittype_);
    std::swap(algorithmtype_, other->algorithmtype_);
    std::swap(dosegrid_uid_, other->dosegrid_uid_);
    std::swap(current_segment_uid_, other->current_segment_uid_);
    std::swap(is_opposite_beam_, other->is_opposite_beam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoBeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoBeam_descriptor_;
  metadata.reflection = RtTpsProtoBeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedBeam::kBeamListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedBeam::RtTpsProtoRepeatedBeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedBeam::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedBeam::RtTpsProtoRepeatedBeam(const RtTpsProtoRepeatedBeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedBeam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedBeam::~RtTpsProtoRepeatedBeam() {
  SharedDtor();
}

void RtTpsProtoRepeatedBeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedBeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedBeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedBeam_descriptor_;
}

const RtTpsProtoRepeatedBeam& RtTpsProtoRepeatedBeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedBeam* RtTpsProtoRepeatedBeam::default_instance_ = NULL;

RtTpsProtoRepeatedBeam* RtTpsProtoRepeatedBeam::New() const {
  return new RtTpsProtoRepeatedBeam;
}

void RtTpsProtoRepeatedBeam::Clear() {
  beamlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedBeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoBeam beamList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beamList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedBeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoBeam beamList = 1;
  for (int i = 0; i < this->beamlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beamlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedBeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoBeam beamList = 1;
  for (int i = 0; i < this->beamlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beamlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedBeam::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoBeam beamList = 1;
  total_size += 1 * this->beamlist_size();
  for (int i = 0; i < this->beamlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedBeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedBeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedBeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedBeam::MergeFrom(const RtTpsProtoRepeatedBeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  beamlist_.MergeFrom(from.beamlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedBeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedBeam::CopyFrom(const RtTpsProtoRepeatedBeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedBeam::IsInitialized() const {
  
  for (int i = 0; i < beamlist_size(); i++) {
    if (!this->beamlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedBeam::Swap(RtTpsProtoRepeatedBeam* other) {
  if (other != this) {
    beamlist_.Swap(&other->beamlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedBeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedBeam_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedBeam_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
