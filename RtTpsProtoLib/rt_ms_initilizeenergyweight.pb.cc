// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_initilizeenergyweight.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_PhoEnergyWeight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PhoEnergyWeight_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PhoSpectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PhoSpectrum_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5finitilizeenergyweight_2eproto() {
  protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_initilizeenergyweight.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_PhoEnergyWeight_descriptor_ = file->message_type(0);
  static const int RT_MS_PhoEnergyWeight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoEnergyWeight, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoEnergyWeight, weight_),
  };
  RT_MS_PhoEnergyWeight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PhoEnergyWeight_descriptor_,
      RT_MS_PhoEnergyWeight::default_instance_,
      RT_MS_PhoEnergyWeight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoEnergyWeight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoEnergyWeight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PhoEnergyWeight));
  RT_MS_PhoSpectrum_descriptor_ = file->message_type(1);
  static const int RT_MS_PhoSpectrum_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, minenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, maxenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, energyweightinfolist_),
  };
  RT_MS_PhoSpectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PhoSpectrum_descriptor_,
      RT_MS_PhoSpectrum::default_instance_,
      RT_MS_PhoSpectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhoSpectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PhoSpectrum));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5finitilizeenergyweight_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PhoEnergyWeight_descriptor_, &RT_MS_PhoEnergyWeight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PhoSpectrum_descriptor_, &RT_MS_PhoSpectrum::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5finitilizeenergyweight_2eproto() {
  delete RT_MS_PhoEnergyWeight::default_instance_;
  delete RT_MS_PhoEnergyWeight_reflection_;
  delete RT_MS_PhoSpectrum::default_instance_;
  delete RT_MS_PhoSpectrum_reflection_;
}

void protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!rt_ms_initilizeenergyweight.proto\022\010ms."
    "proto\"7\n\025RT_MS_PhoEnergyWeight\022\016\n\006energy"
    "\030\001 \001(\002\022\016\n\006weight\030\002 \001(\002\"\205\001\n\021RT_MS_PhoSpec"
    "trum\022\013\n\003UID\030\001 \001(\t\022\021\n\tminEnergy\030\002 \001(\002\022\021\n\t"
    "maxEnergy\030\003 \001(\002\022=\n\024energyWeightInfoList\030"
    "\004 \003(\0132\037.ms.proto.RT_MS_PhoEnergyWeight", 238);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_initilizeenergyweight.proto", &protobuf_RegisterTypes);
  RT_MS_PhoEnergyWeight::default_instance_ = new RT_MS_PhoEnergyWeight();
  RT_MS_PhoSpectrum::default_instance_ = new RT_MS_PhoSpectrum();
  RT_MS_PhoEnergyWeight::default_instance_->InitAsDefaultInstance();
  RT_MS_PhoSpectrum::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5finitilizeenergyweight_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5finitilizeenergyweight_2eproto {
  StaticDescriptorInitializer_rt_5fms_5finitilizeenergyweight_2eproto() {
    protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5finitilizeenergyweight_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PhoEnergyWeight::kEnergyFieldNumber;
const int RT_MS_PhoEnergyWeight::kWeightFieldNumber;
#endif  // !_MSC_VER

RT_MS_PhoEnergyWeight::RT_MS_PhoEnergyWeight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PhoEnergyWeight::InitAsDefaultInstance() {
}

RT_MS_PhoEnergyWeight::RT_MS_PhoEnergyWeight(const RT_MS_PhoEnergyWeight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PhoEnergyWeight::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PhoEnergyWeight::~RT_MS_PhoEnergyWeight() {
  SharedDtor();
}

void RT_MS_PhoEnergyWeight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PhoEnergyWeight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PhoEnergyWeight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PhoEnergyWeight_descriptor_;
}

const RT_MS_PhoEnergyWeight& RT_MS_PhoEnergyWeight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();  return *default_instance_;
}

RT_MS_PhoEnergyWeight* RT_MS_PhoEnergyWeight::default_instance_ = NULL;

RT_MS_PhoEnergyWeight* RT_MS_PhoEnergyWeight::New() const {
  return new RT_MS_PhoEnergyWeight;
}

void RT_MS_PhoEnergyWeight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PhoEnergyWeight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float energy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }
      
      // optional float weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PhoEnergyWeight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float energy = 1;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->energy(), output);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PhoEnergyWeight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float energy = 1;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->energy(), target);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PhoEnergyWeight::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float energy = 1;
    if (has_energy()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PhoEnergyWeight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PhoEnergyWeight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PhoEnergyWeight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PhoEnergyWeight::MergeFrom(const RT_MS_PhoEnergyWeight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PhoEnergyWeight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PhoEnergyWeight::CopyFrom(const RT_MS_PhoEnergyWeight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PhoEnergyWeight::IsInitialized() const {
  
  return true;
}

void RT_MS_PhoEnergyWeight::Swap(RT_MS_PhoEnergyWeight* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PhoEnergyWeight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PhoEnergyWeight_descriptor_;
  metadata.reflection = RT_MS_PhoEnergyWeight_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PhoSpectrum::kUIDFieldNumber;
const int RT_MS_PhoSpectrum::kMinEnergyFieldNumber;
const int RT_MS_PhoSpectrum::kMaxEnergyFieldNumber;
const int RT_MS_PhoSpectrum::kEnergyWeightInfoListFieldNumber;
#endif  // !_MSC_VER

RT_MS_PhoSpectrum::RT_MS_PhoSpectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PhoSpectrum::InitAsDefaultInstance() {
}

RT_MS_PhoSpectrum::RT_MS_PhoSpectrum(const RT_MS_PhoSpectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PhoSpectrum::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  minenergy_ = 0;
  maxenergy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PhoSpectrum::~RT_MS_PhoSpectrum() {
  SharedDtor();
}

void RT_MS_PhoSpectrum::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PhoSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PhoSpectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PhoSpectrum_descriptor_;
}

const RT_MS_PhoSpectrum& RT_MS_PhoSpectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();  return *default_instance_;
}

RT_MS_PhoSpectrum* RT_MS_PhoSpectrum::default_instance_ = NULL;

RT_MS_PhoSpectrum* RT_MS_PhoSpectrum::New() const {
  return new RT_MS_PhoSpectrum;
}

void RT_MS_PhoSpectrum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    minenergy_ = 0;
    maxenergy_ = 0;
  }
  energyweightinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PhoSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string UID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_minEnergy;
        break;
      }
      
      // optional float minEnergy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minenergy_)));
          set_has_minenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxEnergy;
        break;
      }
      
      // optional float maxEnergy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxenergy_)));
          set_has_maxenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_energyWeightInfoList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyWeightInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_energyweightinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_energyWeightInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PhoSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string UID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float minEnergy = 2;
  if (has_minenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minenergy(), output);
  }
  
  // optional float maxEnergy = 3;
  if (has_maxenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxenergy(), output);
  }
  
  // repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
  for (int i = 0; i < this->energyweightinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->energyweightinfolist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PhoSpectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string UID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float minEnergy = 2;
  if (has_minenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minenergy(), target);
  }
  
  // optional float maxEnergy = 3;
  if (has_maxenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxenergy(), target);
  }
  
  // repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
  for (int i = 0; i < this->energyweightinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->energyweightinfolist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PhoSpectrum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string UID = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float minEnergy = 2;
    if (has_minenergy()) {
      total_size += 1 + 4;
    }
    
    // optional float maxEnergy = 3;
    if (has_maxenergy()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
  total_size += 1 * this->energyweightinfolist_size();
  for (int i = 0; i < this->energyweightinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->energyweightinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PhoSpectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PhoSpectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PhoSpectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PhoSpectrum::MergeFrom(const RT_MS_PhoSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  energyweightinfolist_.MergeFrom(from.energyweightinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_minenergy()) {
      set_minenergy(from.minenergy());
    }
    if (from.has_maxenergy()) {
      set_maxenergy(from.maxenergy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PhoSpectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PhoSpectrum::CopyFrom(const RT_MS_PhoSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PhoSpectrum::IsInitialized() const {
  
  return true;
}

void RT_MS_PhoSpectrum::Swap(RT_MS_PhoSpectrum* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(minenergy_, other->minenergy_);
    std::swap(maxenergy_, other->maxenergy_);
    energyweightinfolist_.Swap(&other->energyweightinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PhoSpectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PhoSpectrum_descriptor_;
  metadata.reflection = RT_MS_PhoSpectrum_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
