// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_electroncontamination.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_ElectronContamination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ElectronContamination_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5felectroncontamination_2eproto() {
  protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_electroncontamination.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_ElectronContamination_descriptor_ = file->message_type(0);
  static const int RT_MS_ElectronContamination_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, electroncontaminationflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, electronmaxdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, surfacedose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, depthcoefficientk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, offaxiscoefficienta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, sf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, cone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, ctwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, cthree_),
  };
  RT_MS_ElectronContamination_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ElectronContamination_descriptor_,
      RT_MS_ElectronContamination::default_instance_,
      RT_MS_ElectronContamination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ElectronContamination, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ElectronContamination));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5felectroncontamination_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ElectronContamination_descriptor_, &RT_MS_ElectronContamination::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5felectroncontamination_2eproto() {
  delete RT_MS_ElectronContamination::default_instance_;
  delete RT_MS_ElectronContamination_reflection_;
}

void protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!rt_ms_electroncontamination.proto\022\010ms."
    "proto\"\353\001\n\033RT_MS_ElectronContamination\022!\n"
    "\031electronContaminationFlag\030\001 \001(\010\022\030\n\020elec"
    "tronMaxDepth\030\002 \001(\002\022\023\n\013surfaceDose\030\003 \001(\002\022"
    "\031\n\021depthCoefficientK\030\004 \001(\002\022\033\n\023offaxisCoe"
    "fficientA\030\005 \001(\002\022\n\n\002df\030\006 \001(\002\022\n\n\002sf\030\007 \001(\002\022"
    "\014\n\004cOne\030\010 \001(\002\022\014\n\004cTwo\030\t \001(\002\022\016\n\006cThree\030\n "
    "\001(\002", 283);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_electroncontamination.proto", &protobuf_RegisterTypes);
  RT_MS_ElectronContamination::default_instance_ = new RT_MS_ElectronContamination();
  RT_MS_ElectronContamination::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5felectroncontamination_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5felectroncontamination_2eproto {
  StaticDescriptorInitializer_rt_5fms_5felectroncontamination_2eproto() {
    protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5felectroncontamination_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ElectronContamination::kElectronContaminationFlagFieldNumber;
const int RT_MS_ElectronContamination::kElectronMaxDepthFieldNumber;
const int RT_MS_ElectronContamination::kSurfaceDoseFieldNumber;
const int RT_MS_ElectronContamination::kDepthCoefficientKFieldNumber;
const int RT_MS_ElectronContamination::kOffaxisCoefficientAFieldNumber;
const int RT_MS_ElectronContamination::kDfFieldNumber;
const int RT_MS_ElectronContamination::kSfFieldNumber;
const int RT_MS_ElectronContamination::kCOneFieldNumber;
const int RT_MS_ElectronContamination::kCTwoFieldNumber;
const int RT_MS_ElectronContamination::kCThreeFieldNumber;
#endif  // !_MSC_VER

RT_MS_ElectronContamination::RT_MS_ElectronContamination()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ElectronContamination::InitAsDefaultInstance() {
}

RT_MS_ElectronContamination::RT_MS_ElectronContamination(const RT_MS_ElectronContamination& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ElectronContamination::SharedCtor() {
  _cached_size_ = 0;
  electroncontaminationflag_ = false;
  electronmaxdepth_ = 0;
  surfacedose_ = 0;
  depthcoefficientk_ = 0;
  offaxiscoefficienta_ = 0;
  df_ = 0;
  sf_ = 0;
  cone_ = 0;
  ctwo_ = 0;
  cthree_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ElectronContamination::~RT_MS_ElectronContamination() {
  SharedDtor();
}

void RT_MS_ElectronContamination::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_ElectronContamination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ElectronContamination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ElectronContamination_descriptor_;
}

const RT_MS_ElectronContamination& RT_MS_ElectronContamination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto();  return *default_instance_;
}

RT_MS_ElectronContamination* RT_MS_ElectronContamination::default_instance_ = NULL;

RT_MS_ElectronContamination* RT_MS_ElectronContamination::New() const {
  return new RT_MS_ElectronContamination;
}

void RT_MS_ElectronContamination::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    electroncontaminationflag_ = false;
    electronmaxdepth_ = 0;
    surfacedose_ = 0;
    depthcoefficientk_ = 0;
    offaxiscoefficienta_ = 0;
    df_ = 0;
    sf_ = 0;
    cone_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ctwo_ = 0;
    cthree_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ElectronContamination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool electronContaminationFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &electroncontaminationflag_)));
          set_has_electroncontaminationflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_electronMaxDepth;
        break;
      }
      
      // optional float electronMaxDepth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_electronMaxDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &electronmaxdepth_)));
          set_has_electronmaxdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_surfaceDose;
        break;
      }
      
      // optional float surfaceDose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_surfaceDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surfacedose_)));
          set_has_surfacedose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_depthCoefficientK;
        break;
      }
      
      // optional float depthCoefficientK = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depthCoefficientK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depthcoefficientk_)));
          set_has_depthcoefficientk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offaxisCoefficientA;
        break;
      }
      
      // optional float offaxisCoefficientA = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offaxisCoefficientA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offaxiscoefficienta_)));
          set_has_offaxiscoefficienta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_df;
        break;
      }
      
      // optional float df = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &df_)));
          set_has_df();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sf;
        break;
      }
      
      // optional float sf = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sf_)));
          set_has_sf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_cOne;
        break;
      }
      
      // optional float cOne = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cone_)));
          set_has_cone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_cTwo;
        break;
      }
      
      // optional float cTwo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctwo_)));
          set_has_ctwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_cThree;
        break;
      }
      
      // optional float cThree = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cThree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cthree_)));
          set_has_cthree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ElectronContamination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool electronContaminationFlag = 1;
  if (has_electroncontaminationflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->electroncontaminationflag(), output);
  }
  
  // optional float electronMaxDepth = 2;
  if (has_electronmaxdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->electronmaxdepth(), output);
  }
  
  // optional float surfaceDose = 3;
  if (has_surfacedose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->surfacedose(), output);
  }
  
  // optional float depthCoefficientK = 4;
  if (has_depthcoefficientk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->depthcoefficientk(), output);
  }
  
  // optional float offaxisCoefficientA = 5;
  if (has_offaxiscoefficienta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offaxiscoefficienta(), output);
  }
  
  // optional float df = 6;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->df(), output);
  }
  
  // optional float sf = 7;
  if (has_sf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sf(), output);
  }
  
  // optional float cOne = 8;
  if (has_cone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->cone(), output);
  }
  
  // optional float cTwo = 9;
  if (has_ctwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ctwo(), output);
  }
  
  // optional float cThree = 10;
  if (has_cthree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->cthree(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ElectronContamination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool electronContaminationFlag = 1;
  if (has_electroncontaminationflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->electroncontaminationflag(), target);
  }
  
  // optional float electronMaxDepth = 2;
  if (has_electronmaxdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->electronmaxdepth(), target);
  }
  
  // optional float surfaceDose = 3;
  if (has_surfacedose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->surfacedose(), target);
  }
  
  // optional float depthCoefficientK = 4;
  if (has_depthcoefficientk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->depthcoefficientk(), target);
  }
  
  // optional float offaxisCoefficientA = 5;
  if (has_offaxiscoefficienta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offaxiscoefficienta(), target);
  }
  
  // optional float df = 6;
  if (has_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->df(), target);
  }
  
  // optional float sf = 7;
  if (has_sf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sf(), target);
  }
  
  // optional float cOne = 8;
  if (has_cone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->cone(), target);
  }
  
  // optional float cTwo = 9;
  if (has_ctwo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ctwo(), target);
  }
  
  // optional float cThree = 10;
  if (has_cthree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->cthree(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ElectronContamination::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool electronContaminationFlag = 1;
    if (has_electroncontaminationflag()) {
      total_size += 1 + 1;
    }
    
    // optional float electronMaxDepth = 2;
    if (has_electronmaxdepth()) {
      total_size += 1 + 4;
    }
    
    // optional float surfaceDose = 3;
    if (has_surfacedose()) {
      total_size += 1 + 4;
    }
    
    // optional float depthCoefficientK = 4;
    if (has_depthcoefficientk()) {
      total_size += 1 + 4;
    }
    
    // optional float offaxisCoefficientA = 5;
    if (has_offaxiscoefficienta()) {
      total_size += 1 + 4;
    }
    
    // optional float df = 6;
    if (has_df()) {
      total_size += 1 + 4;
    }
    
    // optional float sf = 7;
    if (has_sf()) {
      total_size += 1 + 4;
    }
    
    // optional float cOne = 8;
    if (has_cone()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float cTwo = 9;
    if (has_ctwo()) {
      total_size += 1 + 4;
    }
    
    // optional float cThree = 10;
    if (has_cthree()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ElectronContamination::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ElectronContamination* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ElectronContamination*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ElectronContamination::MergeFrom(const RT_MS_ElectronContamination& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_electroncontaminationflag()) {
      set_electroncontaminationflag(from.electroncontaminationflag());
    }
    if (from.has_electronmaxdepth()) {
      set_electronmaxdepth(from.electronmaxdepth());
    }
    if (from.has_surfacedose()) {
      set_surfacedose(from.surfacedose());
    }
    if (from.has_depthcoefficientk()) {
      set_depthcoefficientk(from.depthcoefficientk());
    }
    if (from.has_offaxiscoefficienta()) {
      set_offaxiscoefficienta(from.offaxiscoefficienta());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
    if (from.has_sf()) {
      set_sf(from.sf());
    }
    if (from.has_cone()) {
      set_cone(from.cone());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ctwo()) {
      set_ctwo(from.ctwo());
    }
    if (from.has_cthree()) {
      set_cthree(from.cthree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ElectronContamination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ElectronContamination::CopyFrom(const RT_MS_ElectronContamination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ElectronContamination::IsInitialized() const {
  
  return true;
}

void RT_MS_ElectronContamination::Swap(RT_MS_ElectronContamination* other) {
  if (other != this) {
    std::swap(electroncontaminationflag_, other->electroncontaminationflag_);
    std::swap(electronmaxdepth_, other->electronmaxdepth_);
    std::swap(surfacedose_, other->surfacedose_);
    std::swap(depthcoefficientk_, other->depthcoefficientk_);
    std::swap(offaxiscoefficienta_, other->offaxiscoefficienta_);
    std::swap(df_, other->df_);
    std::swap(sf_, other->sf_);
    std::swap(cone_, other->cone_);
    std::swap(ctwo_, other->ctwo_);
    std::swap(cthree_, other->cthree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ElectronContamination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ElectronContamination_descriptor_;
  metadata.reflection = RT_MS_ElectronContamination_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
