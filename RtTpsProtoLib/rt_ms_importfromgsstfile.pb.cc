// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_importfromgsstfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_ImportGSTTFromFile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ImportGSTTFromFile_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactorField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_VirtualWedgeFactorField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_VirtualWedgeFactor_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_VirtualWedgeFactorList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto() {
  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_importfromgsstfile.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_ImportGSTTFromFile_descriptor_ = file->message_type(0);
  static const int RT_MS_ImportGSTTFromFile_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, saccessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, scommissionedunituid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, sgsttfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, wedgefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, virtualwedgefactorlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, orientationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, goldenuid_),
  };
  RT_MS_ImportGSTTFromFile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ImportGSTTFromFile_descriptor_,
      RT_MS_ImportGSTTFromFile::default_instance_,
      RT_MS_ImportGSTTFromFile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportGSTTFromFile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ImportGSTTFromFile));
  RT_MS_VirtualWedgeFactorField_descriptor_ = file->message_type(1);
  static const int RT_MS_VirtualWedgeFactorField_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, collimatorx1position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, collimatorx2position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, relativemu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, correctionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, convolutionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, montecarlofactor_),
  };
  RT_MS_VirtualWedgeFactorField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_VirtualWedgeFactorField_descriptor_,
      RT_MS_VirtualWedgeFactorField::default_instance_,
      RT_MS_VirtualWedgeFactorField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_VirtualWedgeFactorField));
  RT_MS_VirtualWedgeFactor_descriptor_ = file->message_type(2);
  static const int RT_MS_VirtualWedgeFactor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, accesssoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, wedgefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, commmissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, virtualwedgefactorlist_),
  };
  RT_MS_VirtualWedgeFactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_VirtualWedgeFactor_descriptor_,
      RT_MS_VirtualWedgeFactor::default_instance_,
      RT_MS_VirtualWedgeFactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_VirtualWedgeFactor));
  RT_MS_VirtualWedgeFactorList_descriptor_ = file->message_type(3);
  static const int RT_MS_VirtualWedgeFactorList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorList, virtualfactorlist_),
  };
  RT_MS_VirtualWedgeFactorList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_VirtualWedgeFactorList_descriptor_,
      RT_MS_VirtualWedgeFactorList::default_instance_,
      RT_MS_VirtualWedgeFactorList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeFactorList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_VirtualWedgeFactorList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ImportGSTTFromFile_descriptor_, &RT_MS_ImportGSTTFromFile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_VirtualWedgeFactorField_descriptor_, &RT_MS_VirtualWedgeFactorField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_VirtualWedgeFactor_descriptor_, &RT_MS_VirtualWedgeFactor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_VirtualWedgeFactorList_descriptor_, &RT_MS_VirtualWedgeFactorList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto() {
  delete RT_MS_ImportGSTTFromFile::default_instance_;
  delete RT_MS_ImportGSTTFromFile_reflection_;
  delete RT_MS_VirtualWedgeFactorField::default_instance_;
  delete RT_MS_VirtualWedgeFactorField_reflection_;
  delete RT_MS_VirtualWedgeFactor::default_instance_;
  delete RT_MS_VirtualWedgeFactor_reflection_;
  delete RT_MS_VirtualWedgeFactorList::default_instance_;
  delete RT_MS_VirtualWedgeFactorList_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036rt_ms_importfromgsstfile.proto\022\010ms.pro"
    "to\"\360\001\n\030RT_MS_ImportGSTTFromFile\022\025\n\rsAcce"
    "ssoryUID\030\001 \001(\t\022\034\n\024sCommissionedunitUID\030\002"
    " \001(\t\022\025\n\rsGSTTFileName\030\003 \001(\t\022\023\n\013wedgefact"
    "or\030\004 \001(\002\022G\n\026virtualWedgeFactorList\030\005 \003(\013"
    "2\'.ms.proto.RT_MS_VirtualWedgeFactorFiel"
    "d\022\027\n\017orientationType\030\006 \001(\005\022\021\n\tgoldenUID\030"
    "\007 \001(\t\"\276\001\n\035RT_MS_VirtualWedgeFactorField\022"
    "\034\n\024collimatorX1Position\030\001 \001(\002\022\034\n\024collima"
    "torX2Position\030\002 \001(\002\022\022\n\nrelativeMU\030\003 \001(\002\022"
    "\030\n\020correctionFactor\030\004 \001(\002\022\031\n\021convolution"
    "Factor\030\005 \001(\002\022\030\n\020monteCarloFactor\030\006 \001(\002\"\247"
    "\001\n\030RT_MS_VirtualWedgeFactor\022\025\n\raccesssor"
    "yUID\030\001 \001(\t\022\023\n\013wedgefactor\030\002 \001(\002\022\026\n\016commm"
    "issionUID\030\003 \001(\t\022G\n\026virtualWedgeFactorLis"
    "t\030\004 \003(\0132\'.ms.proto.RT_MS_VirtualWedgeFac"
    "torField\"]\n\034RT_MS_VirtualWedgeFactorList"
    "\022=\n\021virtualFactorList\030\001 \003(\0132\".ms.proto.R"
    "T_MS_ImportGSTTFromFile", 743);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_importfromgsstfile.proto", &protobuf_RegisterTypes);
  RT_MS_ImportGSTTFromFile::default_instance_ = new RT_MS_ImportGSTTFromFile();
  RT_MS_VirtualWedgeFactorField::default_instance_ = new RT_MS_VirtualWedgeFactorField();
  RT_MS_VirtualWedgeFactor::default_instance_ = new RT_MS_VirtualWedgeFactor();
  RT_MS_VirtualWedgeFactorList::default_instance_ = new RT_MS_VirtualWedgeFactorList();
  RT_MS_ImportGSTTFromFile::default_instance_->InitAsDefaultInstance();
  RT_MS_VirtualWedgeFactorField::default_instance_->InitAsDefaultInstance();
  RT_MS_VirtualWedgeFactor::default_instance_->InitAsDefaultInstance();
  RT_MS_VirtualWedgeFactorList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fimportfromgsstfile_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fimportfromgsstfile_2eproto() {
    protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fimportfromgsstfile_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ImportGSTTFromFile::kSAccessoryUIDFieldNumber;
const int RT_MS_ImportGSTTFromFile::kSCommissionedunitUIDFieldNumber;
const int RT_MS_ImportGSTTFromFile::kSGSTTFileNameFieldNumber;
const int RT_MS_ImportGSTTFromFile::kWedgefactorFieldNumber;
const int RT_MS_ImportGSTTFromFile::kVirtualWedgeFactorListFieldNumber;
const int RT_MS_ImportGSTTFromFile::kOrientationTypeFieldNumber;
const int RT_MS_ImportGSTTFromFile::kGoldenUIDFieldNumber;
#endif  // !_MSC_VER

RT_MS_ImportGSTTFromFile::RT_MS_ImportGSTTFromFile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ImportGSTTFromFile::InitAsDefaultInstance() {
}

RT_MS_ImportGSTTFromFile::RT_MS_ImportGSTTFromFile(const RT_MS_ImportGSTTFromFile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ImportGSTTFromFile::SharedCtor() {
  _cached_size_ = 0;
  saccessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scommissionedunituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sgsttfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgefactor_ = 0;
  orientationtype_ = 0;
  goldenuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ImportGSTTFromFile::~RT_MS_ImportGSTTFromFile() {
  SharedDtor();
}

void RT_MS_ImportGSTTFromFile::SharedDtor() {
  if (saccessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete saccessoryuid_;
  }
  if (scommissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
    delete scommissionedunituid_;
  }
  if (sgsttfilename_ != &::google::protobuf::internal::kEmptyString) {
    delete sgsttfilename_;
  }
  if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
    delete goldenuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ImportGSTTFromFile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ImportGSTTFromFile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ImportGSTTFromFile_descriptor_;
}

const RT_MS_ImportGSTTFromFile& RT_MS_ImportGSTTFromFile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();  return *default_instance_;
}

RT_MS_ImportGSTTFromFile* RT_MS_ImportGSTTFromFile::default_instance_ = NULL;

RT_MS_ImportGSTTFromFile* RT_MS_ImportGSTTFromFile::New() const {
  return new RT_MS_ImportGSTTFromFile;
}

void RT_MS_ImportGSTTFromFile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_saccessoryuid()) {
      if (saccessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        saccessoryuid_->clear();
      }
    }
    if (has_scommissionedunituid()) {
      if (scommissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
        scommissionedunituid_->clear();
      }
    }
    if (has_sgsttfilename()) {
      if (sgsttfilename_ != &::google::protobuf::internal::kEmptyString) {
        sgsttfilename_->clear();
      }
    }
    wedgefactor_ = 0;
    orientationtype_ = 0;
    if (has_goldenuid()) {
      if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
        goldenuid_->clear();
      }
    }
  }
  virtualwedgefactorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ImportGSTTFromFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sAccessoryUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_saccessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->saccessoryuid().data(), this->saccessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sCommissionedunitUID;
        break;
      }
      
      // optional string sCommissionedunitUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sCommissionedunitUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scommissionedunituid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scommissionedunituid().data(), this->scommissionedunituid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sGSTTFileName;
        break;
      }
      
      // optional string sGSTTFileName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sGSTTFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sgsttfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sgsttfilename().data(), this->sgsttfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_wedgefactor;
        break;
      }
      
      // optional float wedgefactor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgefactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgefactor_)));
          set_has_wedgefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_virtualWedgeFactorList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeFactorList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgefactorlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_virtualWedgeFactorList;
        if (input->ExpectTag(48)) goto parse_orientationType;
        break;
      }
      
      // optional int32 orientationType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_orientationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &orientationtype_)));
          set_has_orientationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_goldenUID;
        break;
      }
      
      // optional string goldenUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldenUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goldenuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goldenuid().data(), this->goldenuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ImportGSTTFromFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sAccessoryUID = 1;
  if (has_saccessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->saccessoryuid().data(), this->saccessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->saccessoryuid(), output);
  }
  
  // optional string sCommissionedunitUID = 2;
  if (has_scommissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scommissionedunituid().data(), this->scommissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->scommissionedunituid(), output);
  }
  
  // optional string sGSTTFileName = 3;
  if (has_sgsttfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sgsttfilename().data(), this->sgsttfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sgsttfilename(), output);
  }
  
  // optional float wedgefactor = 4;
  if (has_wedgefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->wedgefactor(), output);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->virtualwedgefactorlist(i), output);
  }
  
  // optional int32 orientationType = 6;
  if (has_orientationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->orientationtype(), output);
  }
  
  // optional string goldenUID = 7;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->goldenuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ImportGSTTFromFile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sAccessoryUID = 1;
  if (has_saccessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->saccessoryuid().data(), this->saccessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->saccessoryuid(), target);
  }
  
  // optional string sCommissionedunitUID = 2;
  if (has_scommissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scommissionedunituid().data(), this->scommissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scommissionedunituid(), target);
  }
  
  // optional string sGSTTFileName = 3;
  if (has_sgsttfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sgsttfilename().data(), this->sgsttfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sgsttfilename(), target);
  }
  
  // optional float wedgefactor = 4;
  if (has_wedgefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->wedgefactor(), target);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->virtualwedgefactorlist(i), target);
  }
  
  // optional int32 orientationType = 6;
  if (has_orientationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->orientationtype(), target);
  }
  
  // optional string goldenUID = 7;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->goldenuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ImportGSTTFromFile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sAccessoryUID = 1;
    if (has_saccessoryuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->saccessoryuid());
    }
    
    // optional string sCommissionedunitUID = 2;
    if (has_scommissionedunituid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scommissionedunituid());
    }
    
    // optional string sGSTTFileName = 3;
    if (has_sgsttfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sgsttfilename());
    }
    
    // optional float wedgefactor = 4;
    if (has_wedgefactor()) {
      total_size += 1 + 4;
    }
    
    // optional int32 orientationType = 6;
    if (has_orientationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->orientationtype());
    }
    
    // optional string goldenUID = 7;
    if (has_goldenuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goldenuid());
    }
    
  }
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
  total_size += 1 * this->virtualwedgefactorlist_size();
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgefactorlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ImportGSTTFromFile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ImportGSTTFromFile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ImportGSTTFromFile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ImportGSTTFromFile::MergeFrom(const RT_MS_ImportGSTTFromFile& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgefactorlist_.MergeFrom(from.virtualwedgefactorlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_saccessoryuid()) {
      set_saccessoryuid(from.saccessoryuid());
    }
    if (from.has_scommissionedunituid()) {
      set_scommissionedunituid(from.scommissionedunituid());
    }
    if (from.has_sgsttfilename()) {
      set_sgsttfilename(from.sgsttfilename());
    }
    if (from.has_wedgefactor()) {
      set_wedgefactor(from.wedgefactor());
    }
    if (from.has_orientationtype()) {
      set_orientationtype(from.orientationtype());
    }
    if (from.has_goldenuid()) {
      set_goldenuid(from.goldenuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ImportGSTTFromFile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ImportGSTTFromFile::CopyFrom(const RT_MS_ImportGSTTFromFile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ImportGSTTFromFile::IsInitialized() const {
  
  return true;
}

void RT_MS_ImportGSTTFromFile::Swap(RT_MS_ImportGSTTFromFile* other) {
  if (other != this) {
    std::swap(saccessoryuid_, other->saccessoryuid_);
    std::swap(scommissionedunituid_, other->scommissionedunituid_);
    std::swap(sgsttfilename_, other->sgsttfilename_);
    std::swap(wedgefactor_, other->wedgefactor_);
    virtualwedgefactorlist_.Swap(&other->virtualwedgefactorlist_);
    std::swap(orientationtype_, other->orientationtype_);
    std::swap(goldenuid_, other->goldenuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ImportGSTTFromFile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ImportGSTTFromFile_descriptor_;
  metadata.reflection = RT_MS_ImportGSTTFromFile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_VirtualWedgeFactorField::kCollimatorX1PositionFieldNumber;
const int RT_MS_VirtualWedgeFactorField::kCollimatorX2PositionFieldNumber;
const int RT_MS_VirtualWedgeFactorField::kRelativeMUFieldNumber;
const int RT_MS_VirtualWedgeFactorField::kCorrectionFactorFieldNumber;
const int RT_MS_VirtualWedgeFactorField::kConvolutionFactorFieldNumber;
const int RT_MS_VirtualWedgeFactorField::kMonteCarloFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_VirtualWedgeFactorField::RT_MS_VirtualWedgeFactorField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_VirtualWedgeFactorField::InitAsDefaultInstance() {
}

RT_MS_VirtualWedgeFactorField::RT_MS_VirtualWedgeFactorField(const RT_MS_VirtualWedgeFactorField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactorField::SharedCtor() {
  _cached_size_ = 0;
  collimatorx1position_ = 0;
  collimatorx2position_ = 0;
  relativemu_ = 0;
  correctionfactor_ = 0;
  convolutionfactor_ = 0;
  montecarlofactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_VirtualWedgeFactorField::~RT_MS_VirtualWedgeFactorField() {
  SharedDtor();
}

void RT_MS_VirtualWedgeFactorField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_VirtualWedgeFactorField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactorField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_VirtualWedgeFactorField_descriptor_;
}

const RT_MS_VirtualWedgeFactorField& RT_MS_VirtualWedgeFactorField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();  return *default_instance_;
}

RT_MS_VirtualWedgeFactorField* RT_MS_VirtualWedgeFactorField::default_instance_ = NULL;

RT_MS_VirtualWedgeFactorField* RT_MS_VirtualWedgeFactorField::New() const {
  return new RT_MS_VirtualWedgeFactorField;
}

void RT_MS_VirtualWedgeFactorField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collimatorx1position_ = 0;
    collimatorx2position_ = 0;
    relativemu_ = 0;
    correctionfactor_ = 0;
    convolutionfactor_ = 0;
    montecarlofactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_VirtualWedgeFactorField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float collimatorX1Position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx1position_)));
          set_has_collimatorx1position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_collimatorX2Position;
        break;
      }
      
      // optional float collimatorX2Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX2Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx2position_)));
          set_has_collimatorx2position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_relativeMU;
        break;
      }
      
      // optional float relativeMU = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeMU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativemu_)));
          set_has_relativemu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_correctionFactor;
        break;
      }
      
      // optional float correctionFactor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_correctionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correctionfactor_)));
          set_has_correctionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_convolutionFactor;
        break;
      }
      
      // optional float convolutionFactor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_convolutionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &convolutionfactor_)));
          set_has_convolutionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_monteCarloFactor;
        break;
      }
      
      // optional float monteCarloFactor = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_monteCarloFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &montecarlofactor_)));
          set_has_montecarlofactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_VirtualWedgeFactorField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float collimatorX1Position = 1;
  if (has_collimatorx1position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->collimatorx1position(), output);
  }
  
  // optional float collimatorX2Position = 2;
  if (has_collimatorx2position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->collimatorx2position(), output);
  }
  
  // optional float relativeMU = 3;
  if (has_relativemu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->relativemu(), output);
  }
  
  // optional float correctionFactor = 4;
  if (has_correctionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->correctionfactor(), output);
  }
  
  // optional float convolutionFactor = 5;
  if (has_convolutionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->convolutionfactor(), output);
  }
  
  // optional float monteCarloFactor = 6;
  if (has_montecarlofactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->montecarlofactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_VirtualWedgeFactorField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float collimatorX1Position = 1;
  if (has_collimatorx1position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->collimatorx1position(), target);
  }
  
  // optional float collimatorX2Position = 2;
  if (has_collimatorx2position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->collimatorx2position(), target);
  }
  
  // optional float relativeMU = 3;
  if (has_relativemu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->relativemu(), target);
  }
  
  // optional float correctionFactor = 4;
  if (has_correctionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->correctionfactor(), target);
  }
  
  // optional float convolutionFactor = 5;
  if (has_convolutionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->convolutionfactor(), target);
  }
  
  // optional float monteCarloFactor = 6;
  if (has_montecarlofactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->montecarlofactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_VirtualWedgeFactorField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float collimatorX1Position = 1;
    if (has_collimatorx1position()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorX2Position = 2;
    if (has_collimatorx2position()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeMU = 3;
    if (has_relativemu()) {
      total_size += 1 + 4;
    }
    
    // optional float correctionFactor = 4;
    if (has_correctionfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float convolutionFactor = 5;
    if (has_convolutionfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float monteCarloFactor = 6;
    if (has_montecarlofactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_VirtualWedgeFactorField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_VirtualWedgeFactorField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_VirtualWedgeFactorField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_VirtualWedgeFactorField::MergeFrom(const RT_MS_VirtualWedgeFactorField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collimatorx1position()) {
      set_collimatorx1position(from.collimatorx1position());
    }
    if (from.has_collimatorx2position()) {
      set_collimatorx2position(from.collimatorx2position());
    }
    if (from.has_relativemu()) {
      set_relativemu(from.relativemu());
    }
    if (from.has_correctionfactor()) {
      set_correctionfactor(from.correctionfactor());
    }
    if (from.has_convolutionfactor()) {
      set_convolutionfactor(from.convolutionfactor());
    }
    if (from.has_montecarlofactor()) {
      set_montecarlofactor(from.montecarlofactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_VirtualWedgeFactorField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactorField::CopyFrom(const RT_MS_VirtualWedgeFactorField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_VirtualWedgeFactorField::IsInitialized() const {
  
  return true;
}

void RT_MS_VirtualWedgeFactorField::Swap(RT_MS_VirtualWedgeFactorField* other) {
  if (other != this) {
    std::swap(collimatorx1position_, other->collimatorx1position_);
    std::swap(collimatorx2position_, other->collimatorx2position_);
    std::swap(relativemu_, other->relativemu_);
    std::swap(correctionfactor_, other->correctionfactor_);
    std::swap(convolutionfactor_, other->convolutionfactor_);
    std::swap(montecarlofactor_, other->montecarlofactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_VirtualWedgeFactorField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_VirtualWedgeFactorField_descriptor_;
  metadata.reflection = RT_MS_VirtualWedgeFactorField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_VirtualWedgeFactor::kAccesssoryUIDFieldNumber;
const int RT_MS_VirtualWedgeFactor::kWedgefactorFieldNumber;
const int RT_MS_VirtualWedgeFactor::kCommmissionUIDFieldNumber;
const int RT_MS_VirtualWedgeFactor::kVirtualWedgeFactorListFieldNumber;
#endif  // !_MSC_VER

RT_MS_VirtualWedgeFactor::RT_MS_VirtualWedgeFactor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_VirtualWedgeFactor::InitAsDefaultInstance() {
}

RT_MS_VirtualWedgeFactor::RT_MS_VirtualWedgeFactor(const RT_MS_VirtualWedgeFactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactor::SharedCtor() {
  _cached_size_ = 0;
  accesssoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgefactor_ = 0;
  commmissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_VirtualWedgeFactor::~RT_MS_VirtualWedgeFactor() {
  SharedDtor();
}

void RT_MS_VirtualWedgeFactor::SharedDtor() {
  if (accesssoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accesssoryuid_;
  }
  if (commmissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commmissionuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_VirtualWedgeFactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_VirtualWedgeFactor_descriptor_;
}

const RT_MS_VirtualWedgeFactor& RT_MS_VirtualWedgeFactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();  return *default_instance_;
}

RT_MS_VirtualWedgeFactor* RT_MS_VirtualWedgeFactor::default_instance_ = NULL;

RT_MS_VirtualWedgeFactor* RT_MS_VirtualWedgeFactor::New() const {
  return new RT_MS_VirtualWedgeFactor;
}

void RT_MS_VirtualWedgeFactor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accesssoryuid()) {
      if (accesssoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accesssoryuid_->clear();
      }
    }
    wedgefactor_ = 0;
    if (has_commmissionuid()) {
      if (commmissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commmissionuid_->clear();
      }
    }
  }
  virtualwedgefactorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_VirtualWedgeFactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string accesssoryUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accesssoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accesssoryuid().data(), this->accesssoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_wedgefactor;
        break;
      }
      
      // optional float wedgefactor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgefactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgefactor_)));
          set_has_wedgefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_commmissionUID;
        break;
      }
      
      // optional string commmissionUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commmissionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commmissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commmissionuid().data(), this->commmissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeFactorList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeFactorList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgefactorlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeFactorList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_VirtualWedgeFactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string accesssoryUID = 1;
  if (has_accesssoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesssoryuid().data(), this->accesssoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accesssoryuid(), output);
  }
  
  // optional float wedgefactor = 2;
  if (has_wedgefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->wedgefactor(), output);
  }
  
  // optional string commmissionUID = 3;
  if (has_commmissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commmissionuid().data(), this->commmissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->commmissionuid(), output);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->virtualwedgefactorlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_VirtualWedgeFactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string accesssoryUID = 1;
  if (has_accesssoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accesssoryuid().data(), this->accesssoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accesssoryuid(), target);
  }
  
  // optional float wedgefactor = 2;
  if (has_wedgefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->wedgefactor(), target);
  }
  
  // optional string commmissionUID = 3;
  if (has_commmissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commmissionuid().data(), this->commmissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->commmissionuid(), target);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->virtualwedgefactorlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_VirtualWedgeFactor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string accesssoryUID = 1;
    if (has_accesssoryuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accesssoryuid());
    }
    
    // optional float wedgefactor = 2;
    if (has_wedgefactor()) {
      total_size += 1 + 4;
    }
    
    // optional string commmissionUID = 3;
    if (has_commmissionuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commmissionuid());
    }
    
  }
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
  total_size += 1 * this->virtualwedgefactorlist_size();
  for (int i = 0; i < this->virtualwedgefactorlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgefactorlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_VirtualWedgeFactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_VirtualWedgeFactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_VirtualWedgeFactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_VirtualWedgeFactor::MergeFrom(const RT_MS_VirtualWedgeFactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgefactorlist_.MergeFrom(from.virtualwedgefactorlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accesssoryuid()) {
      set_accesssoryuid(from.accesssoryuid());
    }
    if (from.has_wedgefactor()) {
      set_wedgefactor(from.wedgefactor());
    }
    if (from.has_commmissionuid()) {
      set_commmissionuid(from.commmissionuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_VirtualWedgeFactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactor::CopyFrom(const RT_MS_VirtualWedgeFactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_VirtualWedgeFactor::IsInitialized() const {
  
  return true;
}

void RT_MS_VirtualWedgeFactor::Swap(RT_MS_VirtualWedgeFactor* other) {
  if (other != this) {
    std::swap(accesssoryuid_, other->accesssoryuid_);
    std::swap(wedgefactor_, other->wedgefactor_);
    std::swap(commmissionuid_, other->commmissionuid_);
    virtualwedgefactorlist_.Swap(&other->virtualwedgefactorlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_VirtualWedgeFactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_VirtualWedgeFactor_descriptor_;
  metadata.reflection = RT_MS_VirtualWedgeFactor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_VirtualWedgeFactorList::kVirtualFactorListFieldNumber;
#endif  // !_MSC_VER

RT_MS_VirtualWedgeFactorList::RT_MS_VirtualWedgeFactorList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_VirtualWedgeFactorList::InitAsDefaultInstance() {
}

RT_MS_VirtualWedgeFactorList::RT_MS_VirtualWedgeFactorList(const RT_MS_VirtualWedgeFactorList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactorList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_VirtualWedgeFactorList::~RT_MS_VirtualWedgeFactorList() {
  SharedDtor();
}

void RT_MS_VirtualWedgeFactorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_VirtualWedgeFactorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeFactorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_VirtualWedgeFactorList_descriptor_;
}

const RT_MS_VirtualWedgeFactorList& RT_MS_VirtualWedgeFactorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();  return *default_instance_;
}

RT_MS_VirtualWedgeFactorList* RT_MS_VirtualWedgeFactorList::default_instance_ = NULL;

RT_MS_VirtualWedgeFactorList* RT_MS_VirtualWedgeFactorList::New() const {
  return new RT_MS_VirtualWedgeFactorList;
}

void RT_MS_VirtualWedgeFactorList::Clear() {
  virtualfactorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_VirtualWedgeFactorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualFactorList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualfactorlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_virtualFactorList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_VirtualWedgeFactorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
  for (int i = 0; i < this->virtualfactorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->virtualfactorlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_VirtualWedgeFactorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
  for (int i = 0; i < this->virtualfactorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->virtualfactorlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_VirtualWedgeFactorList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
  total_size += 1 * this->virtualfactorlist_size();
  for (int i = 0; i < this->virtualfactorlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualfactorlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_VirtualWedgeFactorList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_VirtualWedgeFactorList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_VirtualWedgeFactorList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_VirtualWedgeFactorList::MergeFrom(const RT_MS_VirtualWedgeFactorList& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualfactorlist_.MergeFrom(from.virtualfactorlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_VirtualWedgeFactorList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeFactorList::CopyFrom(const RT_MS_VirtualWedgeFactorList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_VirtualWedgeFactorList::IsInitialized() const {
  
  return true;
}

void RT_MS_VirtualWedgeFactorList::Swap(RT_MS_VirtualWedgeFactorList* other) {
  if (other != this) {
    virtualfactorlist_.Swap(&other->virtualfactorlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_VirtualWedgeFactorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_VirtualWedgeFactorList_descriptor_;
  metadata.reflection = RT_MS_VirtualWedgeFactorList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
