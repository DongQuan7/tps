// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_machine.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsMlcSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsMlcSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedMachine_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fmachine_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_machine.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoMachine_descriptor_ = file->message_type(0);
  static const int RtTpsProtoMachine_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, machineuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, machinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, gantrymin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, gantrymax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, tablemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, tablemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, collimatormin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, collimatormax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, gantrycwrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, gantryccwrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_x1_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_x1_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_x2_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_x2_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_y1_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_y1_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_y2_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, jaw_y2_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, supported_apetureblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, supported_shieldblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, supported_xjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, supported_yjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, xjaw_issymmetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, yjaw_issymmetry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, xjaw_tracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, yjaw_tracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, mlcsetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, sourcetoblocktraydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, isforcejawfollow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, iscrcvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, gantrymaxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, blockheight_),
  };
  RtTpsProtoMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoMachine_descriptor_,
      RtTpsProtoMachine::default_instance_,
      RtTpsProtoMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoMachine));
  RtTpsMlcSetting_descriptor_ = file->message_type(1);
  static const int RtTpsMlcSetting_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, numberofpairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, sourcetomlctopdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, minleafjawoverlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, mingap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, maxleafspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, mintipposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, maxtipposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, leafinterdigitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, maxleafoutofcarriagedistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, mlcdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, leafpairupperboundary_),
  };
  RtTpsMlcSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsMlcSetting_descriptor_,
      RtTpsMlcSetting::default_instance_,
      RtTpsMlcSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsMlcSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsMlcSetting));
  RtTpsProtoRepeatedMachine_descriptor_ = file->message_type(2);
  static const int RtTpsProtoRepeatedMachine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedMachine, machinelist_),
  };
  RtTpsProtoRepeatedMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedMachine_descriptor_,
      RtTpsProtoRepeatedMachine::default_instance_,
      RtTpsProtoRepeatedMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedMachine));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fmachine_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoMachine_descriptor_, &RtTpsProtoMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsMlcSetting_descriptor_, &RtTpsMlcSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedMachine_descriptor_, &RtTpsProtoRepeatedMachine::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fmachine_2eproto() {
  delete RtTpsProtoMachine::default_instance_;
  delete RtTpsProtoMachine_reflection_;
  delete RtTpsMlcSetting::default_instance_;
  delete RtTpsMlcSetting_reflection_;
  delete RtTpsProtoRepeatedMachine::default_instance_;
  delete RtTpsProtoRepeatedMachine_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_proto_machine.proto\022\ttps.proto\""
    "\222\006\n\021RtTpsProtoMachine\022\022\n\nmachineUID\030\001 \002("
    "\t\022\023\n\013machineName\030\002 \001(\t\022\021\n\tgantryMin\030\003 \001("
    "\001\022\021\n\tgantryMax\030\004 \001(\001\022\020\n\010tableMin\030\005 \001(\001\022\020"
    "\n\010tableMax\030\006 \001(\001\022\025\n\rcollimatorMin\030\007 \001(\001\022"
    "\025\n\rcollimatorMax\030\010 \001(\001\022\025\n\rgantryCWRange\030"
    "\t \001(\001\022\026\n\016gantryCCWRange\030\n \001(\001\022\022\n\njaw_x1_"
    "min\030\013 \001(\001\022\022\n\njaw_x1_max\030\014 \001(\001\022\022\n\njaw_x2_"
    "min\030\r \001(\001\022\022\n\njaw_x2_max\030\016 \001(\001\022\022\n\njaw_y1_"
    "min\030\017 \001(\001\022\022\n\njaw_y1_max\030\020 \001(\001\022\022\n\njaw_y2_"
    "min\030\021 \001(\001\022\022\n\njaw_y2_max\030\022 \001(\001\022\036\n\026support"
    "ed_apetureblock\030\023 \001(\010\022\035\n\025supported_shiel"
    "dblock\030\024 \001(\010\022\026\n\016supported_xjaw\030\025 \001(\010\022\026\n\016"
    "supported_yjaw\030\026 \001(\010\022\027\n\017xjaw_issymmetry\030"
    "\027 \001(\010\022\027\n\017yjaw_issymmetry\030\030 \001(\010\022\025\n\rxjaw_t"
    "racking\030\031 \001(\010\022\025\n\ryjaw_tracking\030\032 \001(\010\022.\n\n"
    "mlcsetting\030\033 \001(\0132\032.tps.proto.RtTpsMlcSet"
    "ting\022!\n\031sourcetoblocktraydistance\030\034 \001(\002\022"
    "\020\n\010isActive\030\035 \001(\010\022\030\n\020isForceJawFollow\030\036 "
    "\001(\010\022\022\n\nisCrcValid\030\037 \001(\010\022\026\n\016gantryMaxSpee"
    "d\030  \001(\001\022\023\n\013blockHeight\030! \001(\001\"\261\002\n\017RtTpsMl"
    "cSetting\022\025\n\rnumberOfPairs\030\001 \001(\005\022\036\n\026sourc"
    "eToMLCtopDistance\030\002 \001(\001\022\031\n\021minLeafJawOve"
    "rlap\030\003 \001(\001\022\016\n\006minGap\030\004 \001(\001\022\024\n\014maxLeafSpe"
    "ed\030\005 \001(\001\022\026\n\016minTipPosition\030\006 \001(\001\022\026\n\016maxT"
    "ipPosition\030\007 \001(\001\022\033\n\023leafInterdigitation\030"
    "\010 \001(\010\022$\n\034maxLeafoutofCarriageDistance\030\t "
    "\001(\001\022\024\n\014mlcDirection\030\n \001(\005\022\035\n\025leafpairupp"
    "erboundary\030\013 \003(\001\"N\n\031RtTpsProtoRepeatedMa"
    "chine\0221\n\013machineList\030\001 \003(\0132\034.tps.proto.R"
    "tTpsProtoMachine", 1216);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_machine.proto", &protobuf_RegisterTypes);
  RtTpsProtoMachine::default_instance_ = new RtTpsProtoMachine();
  RtTpsMlcSetting::default_instance_ = new RtTpsMlcSetting();
  RtTpsProtoRepeatedMachine::default_instance_ = new RtTpsProtoRepeatedMachine();
  RtTpsProtoMachine::default_instance_->InitAsDefaultInstance();
  RtTpsMlcSetting::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedMachine::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fmachine_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fmachine_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fmachine_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fmachine_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoMachine::kMachineUIDFieldNumber;
const int RtTpsProtoMachine::kMachineNameFieldNumber;
const int RtTpsProtoMachine::kGantryMinFieldNumber;
const int RtTpsProtoMachine::kGantryMaxFieldNumber;
const int RtTpsProtoMachine::kTableMinFieldNumber;
const int RtTpsProtoMachine::kTableMaxFieldNumber;
const int RtTpsProtoMachine::kCollimatorMinFieldNumber;
const int RtTpsProtoMachine::kCollimatorMaxFieldNumber;
const int RtTpsProtoMachine::kGantryCWRangeFieldNumber;
const int RtTpsProtoMachine::kGantryCCWRangeFieldNumber;
const int RtTpsProtoMachine::kJawX1MinFieldNumber;
const int RtTpsProtoMachine::kJawX1MaxFieldNumber;
const int RtTpsProtoMachine::kJawX2MinFieldNumber;
const int RtTpsProtoMachine::kJawX2MaxFieldNumber;
const int RtTpsProtoMachine::kJawY1MinFieldNumber;
const int RtTpsProtoMachine::kJawY1MaxFieldNumber;
const int RtTpsProtoMachine::kJawY2MinFieldNumber;
const int RtTpsProtoMachine::kJawY2MaxFieldNumber;
const int RtTpsProtoMachine::kSupportedApetureblockFieldNumber;
const int RtTpsProtoMachine::kSupportedShieldblockFieldNumber;
const int RtTpsProtoMachine::kSupportedXjawFieldNumber;
const int RtTpsProtoMachine::kSupportedYjawFieldNumber;
const int RtTpsProtoMachine::kXjawIssymmetryFieldNumber;
const int RtTpsProtoMachine::kYjawIssymmetryFieldNumber;
const int RtTpsProtoMachine::kXjawTrackingFieldNumber;
const int RtTpsProtoMachine::kYjawTrackingFieldNumber;
const int RtTpsProtoMachine::kMlcsettingFieldNumber;
const int RtTpsProtoMachine::kSourcetoblocktraydistanceFieldNumber;
const int RtTpsProtoMachine::kIsActiveFieldNumber;
const int RtTpsProtoMachine::kIsForceJawFollowFieldNumber;
const int RtTpsProtoMachine::kIsCrcValidFieldNumber;
const int RtTpsProtoMachine::kGantryMaxSpeedFieldNumber;
const int RtTpsProtoMachine::kBlockHeightFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoMachine::RtTpsProtoMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoMachine::InitAsDefaultInstance() {
  mlcsetting_ = const_cast< ::tps::proto::RtTpsMlcSetting*>(&::tps::proto::RtTpsMlcSetting::default_instance());
}

RtTpsProtoMachine::RtTpsProtoMachine(const RtTpsProtoMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoMachine::SharedCtor() {
  _cached_size_ = 0;
  machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gantrymin_ = 0;
  gantrymax_ = 0;
  tablemin_ = 0;
  tablemax_ = 0;
  collimatormin_ = 0;
  collimatormax_ = 0;
  gantrycwrange_ = 0;
  gantryccwrange_ = 0;
  jaw_x1_min_ = 0;
  jaw_x1_max_ = 0;
  jaw_x2_min_ = 0;
  jaw_x2_max_ = 0;
  jaw_y1_min_ = 0;
  jaw_y1_max_ = 0;
  jaw_y2_min_ = 0;
  jaw_y2_max_ = 0;
  supported_apetureblock_ = false;
  supported_shieldblock_ = false;
  supported_xjaw_ = false;
  supported_yjaw_ = false;
  xjaw_issymmetry_ = false;
  yjaw_issymmetry_ = false;
  xjaw_tracking_ = false;
  yjaw_tracking_ = false;
  mlcsetting_ = NULL;
  sourcetoblocktraydistance_ = 0;
  isactive_ = false;
  isforcejawfollow_ = false;
  iscrcvalid_ = false;
  gantrymaxspeed_ = 0;
  blockheight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoMachine::~RtTpsProtoMachine() {
  SharedDtor();
}

void RtTpsProtoMachine::SharedDtor() {
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineuid_;
  }
  if (machinename_ != &::google::protobuf::internal::kEmptyString) {
    delete machinename_;
  }
  if (this != default_instance_) {
    delete mlcsetting_;
  }
}

void RtTpsProtoMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoMachine_descriptor_;
}

const RtTpsProtoMachine& RtTpsProtoMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto();  return *default_instance_;
}

RtTpsProtoMachine* RtTpsProtoMachine::default_instance_ = NULL;

RtTpsProtoMachine* RtTpsProtoMachine::New() const {
  return new RtTpsProtoMachine;
}

void RtTpsProtoMachine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machineuid()) {
      if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
        machineuid_->clear();
      }
    }
    if (has_machinename()) {
      if (machinename_ != &::google::protobuf::internal::kEmptyString) {
        machinename_->clear();
      }
    }
    gantrymin_ = 0;
    gantrymax_ = 0;
    tablemin_ = 0;
    tablemax_ = 0;
    collimatormin_ = 0;
    collimatormax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gantrycwrange_ = 0;
    gantryccwrange_ = 0;
    jaw_x1_min_ = 0;
    jaw_x1_max_ = 0;
    jaw_x2_min_ = 0;
    jaw_x2_max_ = 0;
    jaw_y1_min_ = 0;
    jaw_y1_max_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jaw_y2_min_ = 0;
    jaw_y2_max_ = 0;
    supported_apetureblock_ = false;
    supported_shieldblock_ = false;
    supported_xjaw_ = false;
    supported_yjaw_ = false;
    xjaw_issymmetry_ = false;
    yjaw_issymmetry_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    xjaw_tracking_ = false;
    yjaw_tracking_ = false;
    if (has_mlcsetting()) {
      if (mlcsetting_ != NULL) mlcsetting_->::tps::proto::RtTpsMlcSetting::Clear();
    }
    sourcetoblocktraydistance_ = 0;
    isactive_ = false;
    isforcejawfollow_ = false;
    iscrcvalid_ = false;
    gantrymaxspeed_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    blockheight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machineUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineuid().data(), this->machineuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machineName;
        break;
      }
      
      // optional string machineName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machinename().data(), this->machinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_gantryMin;
        break;
      }
      
      // optional double gantryMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantryMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantrymin_)));
          set_has_gantrymin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_gantryMax;
        break;
      }
      
      // optional double gantryMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantryMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantrymax_)));
          set_has_gantrymax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_tableMin;
        break;
      }
      
      // optional double tableMin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tableMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tablemin_)));
          set_has_tablemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_tableMax;
        break;
      }
      
      // optional double tableMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_tableMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tablemax_)));
          set_has_tablemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_collimatorMin;
        break;
      }
      
      // optional double collimatorMin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_collimatorMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collimatormin_)));
          set_has_collimatormin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_collimatorMax;
        break;
      }
      
      // optional double collimatorMax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_collimatorMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collimatormax_)));
          set_has_collimatormax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_gantryCWRange;
        break;
      }
      
      // optional double gantryCWRange = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantryCWRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantrycwrange_)));
          set_has_gantrycwrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_gantryCCWRange;
        break;
      }
      
      // optional double gantryCCWRange = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantryCCWRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantryccwrange_)));
          set_has_gantryccwrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_jaw_x1_min;
        break;
      }
      
      // optional double jaw_x1_min = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x1_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x1_min_)));
          set_has_jaw_x1_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_jaw_x1_max;
        break;
      }
      
      // optional double jaw_x1_max = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x1_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x1_max_)));
          set_has_jaw_x1_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_jaw_x2_min;
        break;
      }
      
      // optional double jaw_x2_min = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x2_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x2_min_)));
          set_has_jaw_x2_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_jaw_x2_max;
        break;
      }
      
      // optional double jaw_x2_max = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x2_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x2_max_)));
          set_has_jaw_x2_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_jaw_y1_min;
        break;
      }
      
      // optional double jaw_y1_min = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y1_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y1_min_)));
          set_has_jaw_y1_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_jaw_y1_max;
        break;
      }
      
      // optional double jaw_y1_max = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y1_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y1_max_)));
          set_has_jaw_y1_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_jaw_y2_min;
        break;
      }
      
      // optional double jaw_y2_min = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y2_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y2_min_)));
          set_has_jaw_y2_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_jaw_y2_max;
        break;
      }
      
      // optional double jaw_y2_max = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y2_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y2_max_)));
          set_has_jaw_y2_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_supported_apetureblock;
        break;
      }
      
      // optional bool supported_apetureblock = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_apetureblock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_apetureblock_)));
          set_has_supported_apetureblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_supported_shieldblock;
        break;
      }
      
      // optional bool supported_shieldblock = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_shieldblock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_shieldblock_)));
          set_has_supported_shieldblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_supported_xjaw;
        break;
      }
      
      // optional bool supported_xjaw = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_xjaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_xjaw_)));
          set_has_supported_xjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_supported_yjaw;
        break;
      }
      
      // optional bool supported_yjaw = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_supported_yjaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &supported_yjaw_)));
          set_has_supported_yjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_xjaw_issymmetry;
        break;
      }
      
      // optional bool xjaw_issymmetry = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xjaw_issymmetry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xjaw_issymmetry_)));
          set_has_xjaw_issymmetry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_yjaw_issymmetry;
        break;
      }
      
      // optional bool yjaw_issymmetry = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yjaw_issymmetry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yjaw_issymmetry_)));
          set_has_yjaw_issymmetry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_xjaw_tracking;
        break;
      }
      
      // optional bool xjaw_tracking = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xjaw_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xjaw_tracking_)));
          set_has_xjaw_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_yjaw_tracking;
        break;
      }
      
      // optional bool yjaw_tracking = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yjaw_tracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yjaw_tracking_)));
          set_has_yjaw_tracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_mlcsetting;
        break;
      }
      
      // optional .tps.proto.RtTpsMlcSetting mlcsetting = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mlcsetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mlcsetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_sourcetoblocktraydistance;
        break;
      }
      
      // optional float sourcetoblocktraydistance = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourcetoblocktraydistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcetoblocktraydistance_)));
          set_has_sourcetoblocktraydistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_isActive;
        break;
      }
      
      // optional bool isActive = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_isForceJawFollow;
        break;
      }
      
      // optional bool isForceJawFollow = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForceJawFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforcejawfollow_)));
          set_has_isforcejawfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_isCrcValid;
        break;
      }
      
      // optional bool isCrcValid = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCrcValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrcvalid_)));
          set_has_iscrcvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_gantryMaxSpeed;
        break;
      }
      
      // optional double gantryMaxSpeed = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantryMaxSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantrymaxspeed_)));
          set_has_gantrymaxspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_blockHeight;
        break;
      }
      
      // optional double blockHeight = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_blockHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &blockheight_)));
          set_has_blockheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string machineUID = 1;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machineuid(), output);
  }
  
  // optional string machineName = 2;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machinename(), output);
  }
  
  // optional double gantryMin = 3;
  if (has_gantrymin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->gantrymin(), output);
  }
  
  // optional double gantryMax = 4;
  if (has_gantrymax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gantrymax(), output);
  }
  
  // optional double tableMin = 5;
  if (has_tablemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->tablemin(), output);
  }
  
  // optional double tableMax = 6;
  if (has_tablemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tablemax(), output);
  }
  
  // optional double collimatorMin = 7;
  if (has_collimatormin()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->collimatormin(), output);
  }
  
  // optional double collimatorMax = 8;
  if (has_collimatormax()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->collimatormax(), output);
  }
  
  // optional double gantryCWRange = 9;
  if (has_gantrycwrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->gantrycwrange(), output);
  }
  
  // optional double gantryCCWRange = 10;
  if (has_gantryccwrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->gantryccwrange(), output);
  }
  
  // optional double jaw_x1_min = 11;
  if (has_jaw_x1_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->jaw_x1_min(), output);
  }
  
  // optional double jaw_x1_max = 12;
  if (has_jaw_x1_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->jaw_x1_max(), output);
  }
  
  // optional double jaw_x2_min = 13;
  if (has_jaw_x2_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->jaw_x2_min(), output);
  }
  
  // optional double jaw_x2_max = 14;
  if (has_jaw_x2_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->jaw_x2_max(), output);
  }
  
  // optional double jaw_y1_min = 15;
  if (has_jaw_y1_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->jaw_y1_min(), output);
  }
  
  // optional double jaw_y1_max = 16;
  if (has_jaw_y1_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->jaw_y1_max(), output);
  }
  
  // optional double jaw_y2_min = 17;
  if (has_jaw_y2_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->jaw_y2_min(), output);
  }
  
  // optional double jaw_y2_max = 18;
  if (has_jaw_y2_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->jaw_y2_max(), output);
  }
  
  // optional bool supported_apetureblock = 19;
  if (has_supported_apetureblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->supported_apetureblock(), output);
  }
  
  // optional bool supported_shieldblock = 20;
  if (has_supported_shieldblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->supported_shieldblock(), output);
  }
  
  // optional bool supported_xjaw = 21;
  if (has_supported_xjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->supported_xjaw(), output);
  }
  
  // optional bool supported_yjaw = 22;
  if (has_supported_yjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->supported_yjaw(), output);
  }
  
  // optional bool xjaw_issymmetry = 23;
  if (has_xjaw_issymmetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->xjaw_issymmetry(), output);
  }
  
  // optional bool yjaw_issymmetry = 24;
  if (has_yjaw_issymmetry()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->yjaw_issymmetry(), output);
  }
  
  // optional bool xjaw_tracking = 25;
  if (has_xjaw_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->xjaw_tracking(), output);
  }
  
  // optional bool yjaw_tracking = 26;
  if (has_yjaw_tracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->yjaw_tracking(), output);
  }
  
  // optional .tps.proto.RtTpsMlcSetting mlcsetting = 27;
  if (has_mlcsetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->mlcsetting(), output);
  }
  
  // optional float sourcetoblocktraydistance = 28;
  if (has_sourcetoblocktraydistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->sourcetoblocktraydistance(), output);
  }
  
  // optional bool isActive = 29;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->isactive(), output);
  }
  
  // optional bool isForceJawFollow = 30;
  if (has_isforcejawfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(30, this->isforcejawfollow(), output);
  }
  
  // optional bool isCrcValid = 31;
  if (has_iscrcvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->iscrcvalid(), output);
  }
  
  // optional double gantryMaxSpeed = 32;
  if (has_gantrymaxspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->gantrymaxspeed(), output);
  }
  
  // optional double blockHeight = 33;
  if (has_blockheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->blockheight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machineUID = 1;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machineuid(), target);
  }
  
  // optional string machineName = 2;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machinename(), target);
  }
  
  // optional double gantryMin = 3;
  if (has_gantrymin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->gantrymin(), target);
  }
  
  // optional double gantryMax = 4;
  if (has_gantrymax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->gantrymax(), target);
  }
  
  // optional double tableMin = 5;
  if (has_tablemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->tablemin(), target);
  }
  
  // optional double tableMax = 6;
  if (has_tablemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tablemax(), target);
  }
  
  // optional double collimatorMin = 7;
  if (has_collimatormin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->collimatormin(), target);
  }
  
  // optional double collimatorMax = 8;
  if (has_collimatormax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->collimatormax(), target);
  }
  
  // optional double gantryCWRange = 9;
  if (has_gantrycwrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->gantrycwrange(), target);
  }
  
  // optional double gantryCCWRange = 10;
  if (has_gantryccwrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->gantryccwrange(), target);
  }
  
  // optional double jaw_x1_min = 11;
  if (has_jaw_x1_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->jaw_x1_min(), target);
  }
  
  // optional double jaw_x1_max = 12;
  if (has_jaw_x1_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->jaw_x1_max(), target);
  }
  
  // optional double jaw_x2_min = 13;
  if (has_jaw_x2_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->jaw_x2_min(), target);
  }
  
  // optional double jaw_x2_max = 14;
  if (has_jaw_x2_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->jaw_x2_max(), target);
  }
  
  // optional double jaw_y1_min = 15;
  if (has_jaw_y1_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->jaw_y1_min(), target);
  }
  
  // optional double jaw_y1_max = 16;
  if (has_jaw_y1_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->jaw_y1_max(), target);
  }
  
  // optional double jaw_y2_min = 17;
  if (has_jaw_y2_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->jaw_y2_min(), target);
  }
  
  // optional double jaw_y2_max = 18;
  if (has_jaw_y2_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->jaw_y2_max(), target);
  }
  
  // optional bool supported_apetureblock = 19;
  if (has_supported_apetureblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->supported_apetureblock(), target);
  }
  
  // optional bool supported_shieldblock = 20;
  if (has_supported_shieldblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->supported_shieldblock(), target);
  }
  
  // optional bool supported_xjaw = 21;
  if (has_supported_xjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->supported_xjaw(), target);
  }
  
  // optional bool supported_yjaw = 22;
  if (has_supported_yjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(22, this->supported_yjaw(), target);
  }
  
  // optional bool xjaw_issymmetry = 23;
  if (has_xjaw_issymmetry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->xjaw_issymmetry(), target);
  }
  
  // optional bool yjaw_issymmetry = 24;
  if (has_yjaw_issymmetry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->yjaw_issymmetry(), target);
  }
  
  // optional bool xjaw_tracking = 25;
  if (has_xjaw_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->xjaw_tracking(), target);
  }
  
  // optional bool yjaw_tracking = 26;
  if (has_yjaw_tracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->yjaw_tracking(), target);
  }
  
  // optional .tps.proto.RtTpsMlcSetting mlcsetting = 27;
  if (has_mlcsetting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->mlcsetting(), target);
  }
  
  // optional float sourcetoblocktraydistance = 28;
  if (has_sourcetoblocktraydistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->sourcetoblocktraydistance(), target);
  }
  
  // optional bool isActive = 29;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->isactive(), target);
  }
  
  // optional bool isForceJawFollow = 30;
  if (has_isforcejawfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(30, this->isforcejawfollow(), target);
  }
  
  // optional bool isCrcValid = 31;
  if (has_iscrcvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(31, this->iscrcvalid(), target);
  }
  
  // optional double gantryMaxSpeed = 32;
  if (has_gantrymaxspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->gantrymaxspeed(), target);
  }
  
  // optional double blockHeight = 33;
  if (has_blockheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->blockheight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoMachine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machineUID = 1;
    if (has_machineuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineuid());
    }
    
    // optional string machineName = 2;
    if (has_machinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machinename());
    }
    
    // optional double gantryMin = 3;
    if (has_gantrymin()) {
      total_size += 1 + 8;
    }
    
    // optional double gantryMax = 4;
    if (has_gantrymax()) {
      total_size += 1 + 8;
    }
    
    // optional double tableMin = 5;
    if (has_tablemin()) {
      total_size += 1 + 8;
    }
    
    // optional double tableMax = 6;
    if (has_tablemax()) {
      total_size += 1 + 8;
    }
    
    // optional double collimatorMin = 7;
    if (has_collimatormin()) {
      total_size += 1 + 8;
    }
    
    // optional double collimatorMax = 8;
    if (has_collimatormax()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double gantryCWRange = 9;
    if (has_gantrycwrange()) {
      total_size += 1 + 8;
    }
    
    // optional double gantryCCWRange = 10;
    if (has_gantryccwrange()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_x1_min = 11;
    if (has_jaw_x1_min()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_x1_max = 12;
    if (has_jaw_x1_max()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_x2_min = 13;
    if (has_jaw_x2_min()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_x2_max = 14;
    if (has_jaw_x2_max()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_y1_min = 15;
    if (has_jaw_y1_min()) {
      total_size += 1 + 8;
    }
    
    // optional double jaw_y1_max = 16;
    if (has_jaw_y1_max()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double jaw_y2_min = 17;
    if (has_jaw_y2_min()) {
      total_size += 2 + 8;
    }
    
    // optional double jaw_y2_max = 18;
    if (has_jaw_y2_max()) {
      total_size += 2 + 8;
    }
    
    // optional bool supported_apetureblock = 19;
    if (has_supported_apetureblock()) {
      total_size += 2 + 1;
    }
    
    // optional bool supported_shieldblock = 20;
    if (has_supported_shieldblock()) {
      total_size += 2 + 1;
    }
    
    // optional bool supported_xjaw = 21;
    if (has_supported_xjaw()) {
      total_size += 2 + 1;
    }
    
    // optional bool supported_yjaw = 22;
    if (has_supported_yjaw()) {
      total_size += 2 + 1;
    }
    
    // optional bool xjaw_issymmetry = 23;
    if (has_xjaw_issymmetry()) {
      total_size += 2 + 1;
    }
    
    // optional bool yjaw_issymmetry = 24;
    if (has_yjaw_issymmetry()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool xjaw_tracking = 25;
    if (has_xjaw_tracking()) {
      total_size += 2 + 1;
    }
    
    // optional bool yjaw_tracking = 26;
    if (has_yjaw_tracking()) {
      total_size += 2 + 1;
    }
    
    // optional .tps.proto.RtTpsMlcSetting mlcsetting = 27;
    if (has_mlcsetting()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mlcsetting());
    }
    
    // optional float sourcetoblocktraydistance = 28;
    if (has_sourcetoblocktraydistance()) {
      total_size += 2 + 4;
    }
    
    // optional bool isActive = 29;
    if (has_isactive()) {
      total_size += 2 + 1;
    }
    
    // optional bool isForceJawFollow = 30;
    if (has_isforcejawfollow()) {
      total_size += 2 + 1;
    }
    
    // optional bool isCrcValid = 31;
    if (has_iscrcvalid()) {
      total_size += 2 + 1;
    }
    
    // optional double gantryMaxSpeed = 32;
    if (has_gantrymaxspeed()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double blockHeight = 33;
    if (has_blockheight()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoMachine::MergeFrom(const RtTpsProtoMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machineuid()) {
      set_machineuid(from.machineuid());
    }
    if (from.has_machinename()) {
      set_machinename(from.machinename());
    }
    if (from.has_gantrymin()) {
      set_gantrymin(from.gantrymin());
    }
    if (from.has_gantrymax()) {
      set_gantrymax(from.gantrymax());
    }
    if (from.has_tablemin()) {
      set_tablemin(from.tablemin());
    }
    if (from.has_tablemax()) {
      set_tablemax(from.tablemax());
    }
    if (from.has_collimatormin()) {
      set_collimatormin(from.collimatormin());
    }
    if (from.has_collimatormax()) {
      set_collimatormax(from.collimatormax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gantrycwrange()) {
      set_gantrycwrange(from.gantrycwrange());
    }
    if (from.has_gantryccwrange()) {
      set_gantryccwrange(from.gantryccwrange());
    }
    if (from.has_jaw_x1_min()) {
      set_jaw_x1_min(from.jaw_x1_min());
    }
    if (from.has_jaw_x1_max()) {
      set_jaw_x1_max(from.jaw_x1_max());
    }
    if (from.has_jaw_x2_min()) {
      set_jaw_x2_min(from.jaw_x2_min());
    }
    if (from.has_jaw_x2_max()) {
      set_jaw_x2_max(from.jaw_x2_max());
    }
    if (from.has_jaw_y1_min()) {
      set_jaw_y1_min(from.jaw_y1_min());
    }
    if (from.has_jaw_y1_max()) {
      set_jaw_y1_max(from.jaw_y1_max());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jaw_y2_min()) {
      set_jaw_y2_min(from.jaw_y2_min());
    }
    if (from.has_jaw_y2_max()) {
      set_jaw_y2_max(from.jaw_y2_max());
    }
    if (from.has_supported_apetureblock()) {
      set_supported_apetureblock(from.supported_apetureblock());
    }
    if (from.has_supported_shieldblock()) {
      set_supported_shieldblock(from.supported_shieldblock());
    }
    if (from.has_supported_xjaw()) {
      set_supported_xjaw(from.supported_xjaw());
    }
    if (from.has_supported_yjaw()) {
      set_supported_yjaw(from.supported_yjaw());
    }
    if (from.has_xjaw_issymmetry()) {
      set_xjaw_issymmetry(from.xjaw_issymmetry());
    }
    if (from.has_yjaw_issymmetry()) {
      set_yjaw_issymmetry(from.yjaw_issymmetry());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_xjaw_tracking()) {
      set_xjaw_tracking(from.xjaw_tracking());
    }
    if (from.has_yjaw_tracking()) {
      set_yjaw_tracking(from.yjaw_tracking());
    }
    if (from.has_mlcsetting()) {
      mutable_mlcsetting()->::tps::proto::RtTpsMlcSetting::MergeFrom(from.mlcsetting());
    }
    if (from.has_sourcetoblocktraydistance()) {
      set_sourcetoblocktraydistance(from.sourcetoblocktraydistance());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
    if (from.has_isforcejawfollow()) {
      set_isforcejawfollow(from.isforcejawfollow());
    }
    if (from.has_iscrcvalid()) {
      set_iscrcvalid(from.iscrcvalid());
    }
    if (from.has_gantrymaxspeed()) {
      set_gantrymaxspeed(from.gantrymaxspeed());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_blockheight()) {
      set_blockheight(from.blockheight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoMachine::CopyFrom(const RtTpsProtoMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoMachine::Swap(RtTpsProtoMachine* other) {
  if (other != this) {
    std::swap(machineuid_, other->machineuid_);
    std::swap(machinename_, other->machinename_);
    std::swap(gantrymin_, other->gantrymin_);
    std::swap(gantrymax_, other->gantrymax_);
    std::swap(tablemin_, other->tablemin_);
    std::swap(tablemax_, other->tablemax_);
    std::swap(collimatormin_, other->collimatormin_);
    std::swap(collimatormax_, other->collimatormax_);
    std::swap(gantrycwrange_, other->gantrycwrange_);
    std::swap(gantryccwrange_, other->gantryccwrange_);
    std::swap(jaw_x1_min_, other->jaw_x1_min_);
    std::swap(jaw_x1_max_, other->jaw_x1_max_);
    std::swap(jaw_x2_min_, other->jaw_x2_min_);
    std::swap(jaw_x2_max_, other->jaw_x2_max_);
    std::swap(jaw_y1_min_, other->jaw_y1_min_);
    std::swap(jaw_y1_max_, other->jaw_y1_max_);
    std::swap(jaw_y2_min_, other->jaw_y2_min_);
    std::swap(jaw_y2_max_, other->jaw_y2_max_);
    std::swap(supported_apetureblock_, other->supported_apetureblock_);
    std::swap(supported_shieldblock_, other->supported_shieldblock_);
    std::swap(supported_xjaw_, other->supported_xjaw_);
    std::swap(supported_yjaw_, other->supported_yjaw_);
    std::swap(xjaw_issymmetry_, other->xjaw_issymmetry_);
    std::swap(yjaw_issymmetry_, other->yjaw_issymmetry_);
    std::swap(xjaw_tracking_, other->xjaw_tracking_);
    std::swap(yjaw_tracking_, other->yjaw_tracking_);
    std::swap(mlcsetting_, other->mlcsetting_);
    std::swap(sourcetoblocktraydistance_, other->sourcetoblocktraydistance_);
    std::swap(isactive_, other->isactive_);
    std::swap(isforcejawfollow_, other->isforcejawfollow_);
    std::swap(iscrcvalid_, other->iscrcvalid_);
    std::swap(gantrymaxspeed_, other->gantrymaxspeed_);
    std::swap(blockheight_, other->blockheight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoMachine_descriptor_;
  metadata.reflection = RtTpsProtoMachine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsMlcSetting::kNumberOfPairsFieldNumber;
const int RtTpsMlcSetting::kSourceToMLCtopDistanceFieldNumber;
const int RtTpsMlcSetting::kMinLeafJawOverlapFieldNumber;
const int RtTpsMlcSetting::kMinGapFieldNumber;
const int RtTpsMlcSetting::kMaxLeafSpeedFieldNumber;
const int RtTpsMlcSetting::kMinTipPositionFieldNumber;
const int RtTpsMlcSetting::kMaxTipPositionFieldNumber;
const int RtTpsMlcSetting::kLeafInterdigitationFieldNumber;
const int RtTpsMlcSetting::kMaxLeafoutofCarriageDistanceFieldNumber;
const int RtTpsMlcSetting::kMlcDirectionFieldNumber;
const int RtTpsMlcSetting::kLeafpairupperboundaryFieldNumber;
#endif  // !_MSC_VER

RtTpsMlcSetting::RtTpsMlcSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsMlcSetting::InitAsDefaultInstance() {
}

RtTpsMlcSetting::RtTpsMlcSetting(const RtTpsMlcSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsMlcSetting::SharedCtor() {
  _cached_size_ = 0;
  numberofpairs_ = 0;
  sourcetomlctopdistance_ = 0;
  minleafjawoverlap_ = 0;
  mingap_ = 0;
  maxleafspeed_ = 0;
  mintipposition_ = 0;
  maxtipposition_ = 0;
  leafinterdigitation_ = false;
  maxleafoutofcarriagedistance_ = 0;
  mlcdirection_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsMlcSetting::~RtTpsMlcSetting() {
  SharedDtor();
}

void RtTpsMlcSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsMlcSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsMlcSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsMlcSetting_descriptor_;
}

const RtTpsMlcSetting& RtTpsMlcSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto();  return *default_instance_;
}

RtTpsMlcSetting* RtTpsMlcSetting::default_instance_ = NULL;

RtTpsMlcSetting* RtTpsMlcSetting::New() const {
  return new RtTpsMlcSetting;
}

void RtTpsMlcSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    numberofpairs_ = 0;
    sourcetomlctopdistance_ = 0;
    minleafjawoverlap_ = 0;
    mingap_ = 0;
    maxleafspeed_ = 0;
    mintipposition_ = 0;
    maxtipposition_ = 0;
    leafinterdigitation_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxleafoutofcarriagedistance_ = 0;
    mlcdirection_ = 0;
  }
  leafpairupperboundary_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsMlcSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 numberOfPairs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numberofpairs_)));
          set_has_numberofpairs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sourceToMLCtopDistance;
        break;
      }
      
      // optional double sourceToMLCtopDistance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sourceToMLCtopDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sourcetomlctopdistance_)));
          set_has_sourcetomlctopdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_minLeafJawOverlap;
        break;
      }
      
      // optional double minLeafJawOverlap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minLeafJawOverlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &minleafjawoverlap_)));
          set_has_minleafjawoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_minGap;
        break;
      }
      
      // optional double minGap = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minGap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mingap_)));
          set_has_mingap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_maxLeafSpeed;
        break;
      }
      
      // optional double maxLeafSpeed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxLeafSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxleafspeed_)));
          set_has_maxleafspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_minTipPosition;
        break;
      }
      
      // optional double minTipPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_minTipPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mintipposition_)));
          set_has_mintipposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_maxTipPosition;
        break;
      }
      
      // optional double maxTipPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxTipPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxtipposition_)));
          set_has_maxtipposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leafInterdigitation;
        break;
      }
      
      // optional bool leafInterdigitation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leafInterdigitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leafinterdigitation_)));
          set_has_leafinterdigitation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_maxLeafoutofCarriageDistance;
        break;
      }
      
      // optional double maxLeafoutofCarriageDistance = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_maxLeafoutofCarriageDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &maxleafoutofcarriagedistance_)));
          set_has_maxleafoutofcarriagedistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mlcDirection;
        break;
      }
      
      // optional int32 mlcDirection = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mlcDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mlcdirection_)));
          set_has_mlcdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_leafpairupperboundary;
        break;
      }
      
      // repeated double leafpairupperboundary = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leafpairupperboundary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 89, input, this->mutable_leafpairupperboundary())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_leafpairupperboundary())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_leafpairupperboundary;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsMlcSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 numberOfPairs = 1;
  if (has_numberofpairs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->numberofpairs(), output);
  }
  
  // optional double sourceToMLCtopDistance = 2;
  if (has_sourcetomlctopdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sourcetomlctopdistance(), output);
  }
  
  // optional double minLeafJawOverlap = 3;
  if (has_minleafjawoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->minleafjawoverlap(), output);
  }
  
  // optional double minGap = 4;
  if (has_mingap()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->mingap(), output);
  }
  
  // optional double maxLeafSpeed = 5;
  if (has_maxleafspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->maxleafspeed(), output);
  }
  
  // optional double minTipPosition = 6;
  if (has_mintipposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mintipposition(), output);
  }
  
  // optional double maxTipPosition = 7;
  if (has_maxtipposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->maxtipposition(), output);
  }
  
  // optional bool leafInterdigitation = 8;
  if (has_leafinterdigitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->leafinterdigitation(), output);
  }
  
  // optional double maxLeafoutofCarriageDistance = 9;
  if (has_maxleafoutofcarriagedistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->maxleafoutofcarriagedistance(), output);
  }
  
  // optional int32 mlcDirection = 10;
  if (has_mlcdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mlcdirection(), output);
  }
  
  // repeated double leafpairupperboundary = 11;
  for (int i = 0; i < this->leafpairupperboundary_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      11, this->leafpairupperboundary(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsMlcSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 numberOfPairs = 1;
  if (has_numberofpairs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->numberofpairs(), target);
  }
  
  // optional double sourceToMLCtopDistance = 2;
  if (has_sourcetomlctopdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sourcetomlctopdistance(), target);
  }
  
  // optional double minLeafJawOverlap = 3;
  if (has_minleafjawoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->minleafjawoverlap(), target);
  }
  
  // optional double minGap = 4;
  if (has_mingap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->mingap(), target);
  }
  
  // optional double maxLeafSpeed = 5;
  if (has_maxleafspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->maxleafspeed(), target);
  }
  
  // optional double minTipPosition = 6;
  if (has_mintipposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mintipposition(), target);
  }
  
  // optional double maxTipPosition = 7;
  if (has_maxtipposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->maxtipposition(), target);
  }
  
  // optional bool leafInterdigitation = 8;
  if (has_leafinterdigitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->leafinterdigitation(), target);
  }
  
  // optional double maxLeafoutofCarriageDistance = 9;
  if (has_maxleafoutofcarriagedistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->maxleafoutofcarriagedistance(), target);
  }
  
  // optional int32 mlcDirection = 10;
  if (has_mlcdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mlcdirection(), target);
  }
  
  // repeated double leafpairupperboundary = 11;
  for (int i = 0; i < this->leafpairupperboundary_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(11, this->leafpairupperboundary(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsMlcSetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 numberOfPairs = 1;
    if (has_numberofpairs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numberofpairs());
    }
    
    // optional double sourceToMLCtopDistance = 2;
    if (has_sourcetomlctopdistance()) {
      total_size += 1 + 8;
    }
    
    // optional double minLeafJawOverlap = 3;
    if (has_minleafjawoverlap()) {
      total_size += 1 + 8;
    }
    
    // optional double minGap = 4;
    if (has_mingap()) {
      total_size += 1 + 8;
    }
    
    // optional double maxLeafSpeed = 5;
    if (has_maxleafspeed()) {
      total_size += 1 + 8;
    }
    
    // optional double minTipPosition = 6;
    if (has_mintipposition()) {
      total_size += 1 + 8;
    }
    
    // optional double maxTipPosition = 7;
    if (has_maxtipposition()) {
      total_size += 1 + 8;
    }
    
    // optional bool leafInterdigitation = 8;
    if (has_leafinterdigitation()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double maxLeafoutofCarriageDistance = 9;
    if (has_maxleafoutofcarriagedistance()) {
      total_size += 1 + 8;
    }
    
    // optional int32 mlcDirection = 10;
    if (has_mlcdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mlcdirection());
    }
    
  }
  // repeated double leafpairupperboundary = 11;
  {
    int data_size = 0;
    data_size = 8 * this->leafpairupperboundary_size();
    total_size += 1 * this->leafpairupperboundary_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsMlcSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsMlcSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsMlcSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsMlcSetting::MergeFrom(const RtTpsMlcSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  leafpairupperboundary_.MergeFrom(from.leafpairupperboundary_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_numberofpairs()) {
      set_numberofpairs(from.numberofpairs());
    }
    if (from.has_sourcetomlctopdistance()) {
      set_sourcetomlctopdistance(from.sourcetomlctopdistance());
    }
    if (from.has_minleafjawoverlap()) {
      set_minleafjawoverlap(from.minleafjawoverlap());
    }
    if (from.has_mingap()) {
      set_mingap(from.mingap());
    }
    if (from.has_maxleafspeed()) {
      set_maxleafspeed(from.maxleafspeed());
    }
    if (from.has_mintipposition()) {
      set_mintipposition(from.mintipposition());
    }
    if (from.has_maxtipposition()) {
      set_maxtipposition(from.maxtipposition());
    }
    if (from.has_leafinterdigitation()) {
      set_leafinterdigitation(from.leafinterdigitation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxleafoutofcarriagedistance()) {
      set_maxleafoutofcarriagedistance(from.maxleafoutofcarriagedistance());
    }
    if (from.has_mlcdirection()) {
      set_mlcdirection(from.mlcdirection());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsMlcSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsMlcSetting::CopyFrom(const RtTpsMlcSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsMlcSetting::IsInitialized() const {
  
  return true;
}

void RtTpsMlcSetting::Swap(RtTpsMlcSetting* other) {
  if (other != this) {
    std::swap(numberofpairs_, other->numberofpairs_);
    std::swap(sourcetomlctopdistance_, other->sourcetomlctopdistance_);
    std::swap(minleafjawoverlap_, other->minleafjawoverlap_);
    std::swap(mingap_, other->mingap_);
    std::swap(maxleafspeed_, other->maxleafspeed_);
    std::swap(mintipposition_, other->mintipposition_);
    std::swap(maxtipposition_, other->maxtipposition_);
    std::swap(leafinterdigitation_, other->leafinterdigitation_);
    std::swap(maxleafoutofcarriagedistance_, other->maxleafoutofcarriagedistance_);
    std::swap(mlcdirection_, other->mlcdirection_);
    leafpairupperboundary_.Swap(&other->leafpairupperboundary_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsMlcSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsMlcSetting_descriptor_;
  metadata.reflection = RtTpsMlcSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedMachine::kMachineListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedMachine::RtTpsProtoRepeatedMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedMachine::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedMachine::RtTpsProtoRepeatedMachine(const RtTpsProtoRepeatedMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedMachine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedMachine::~RtTpsProtoRepeatedMachine() {
  SharedDtor();
}

void RtTpsProtoRepeatedMachine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedMachine_descriptor_;
}

const RtTpsProtoRepeatedMachine& RtTpsProtoRepeatedMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fmachine_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedMachine* RtTpsProtoRepeatedMachine::default_instance_ = NULL;

RtTpsProtoRepeatedMachine* RtTpsProtoRepeatedMachine::New() const {
  return new RtTpsProtoRepeatedMachine;
}

void RtTpsProtoRepeatedMachine::Clear() {
  machinelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoMachine machineList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machinelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machineList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoMachine machineList = 1;
  for (int i = 0; i < this->machinelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machinelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoMachine machineList = 1;
  for (int i = 0; i < this->machinelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machinelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedMachine::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoMachine machineList = 1;
  total_size += 1 * this->machinelist_size();
  for (int i = 0; i < this->machinelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machinelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedMachine::MergeFrom(const RtTpsProtoRepeatedMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  machinelist_.MergeFrom(from.machinelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedMachine::CopyFrom(const RtTpsProtoRepeatedMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedMachine::IsInitialized() const {
  
  for (int i = 0; i < machinelist_size(); i++) {
    if (!this->machinelist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedMachine::Swap(RtTpsProtoRepeatedMachine* other) {
  if (other != this) {
    machinelist_.Swap(&other->machinelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedMachine_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedMachine_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
