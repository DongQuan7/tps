// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_create_phantom.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_CREATE_PHANTOM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_CREATE_PHANTOM_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fcreate_5fphantom_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fcreate_5fphantom_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_create_phantom.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_CREATE_PHANTOM_descriptor_ = file->message_type(0);
  static const int RT_TPS_CREATE_PHANTOM_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, phantomname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, phantomwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, phantomheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, phantomlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, slicespacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, xdimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, ydimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, xspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, yspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, ctvalue_),
  };
  RT_TPS_CREATE_PHANTOM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_CREATE_PHANTOM_descriptor_,
      RT_TPS_CREATE_PHANTOM::default_instance_,
      RT_TPS_CREATE_PHANTOM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CREATE_PHANTOM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_CREATE_PHANTOM));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fcreate_5fphantom_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_CREATE_PHANTOM_descriptor_, &RT_TPS_CREATE_PHANTOM::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fcreate_5fphantom_2eproto() {
  delete RT_TPS_CREATE_PHANTOM::default_instance_;
  delete RT_TPS_CREATE_PHANTOM_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fcreate_5fphantom_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033rt_tps_create_phantom.proto\022\ttps.proto"
    "\"\214\002\n\025RT_TPS_CREATE_PHANTOM\022\022\n\npatientUID"
    "\030\001 \001(\t\022\023\n\013phantomName\030\002 \002(\t\022\023\n\013descripti"
    "on\030\003 \001(\t\022\024\n\014phantomWidth\030\004 \002(\002\022\025\n\rphanto"
    "mHeight\030\005 \002(\002\022\025\n\rphantomLength\030\006 \002(\002\022\024\n\014"
    "sliceSpacing\030\007 \002(\002\022\022\n\nxDimension\030\010 \001(\005\022\022"
    "\n\nyDimension\030\t \001(\005\022\020\n\010xSpacing\030\n \001(\002\022\020\n\010"
    "ySpacing\030\013 \001(\002\022\017\n\007ctvalue\030\014 \001(\002", 311);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_create_phantom.proto", &protobuf_RegisterTypes);
  RT_TPS_CREATE_PHANTOM::default_instance_ = new RT_TPS_CREATE_PHANTOM();
  RT_TPS_CREATE_PHANTOM::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fcreate_5fphantom_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fcreate_5fphantom_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fcreate_5fphantom_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fcreate_5fphantom_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fcreate_5fphantom_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_CREATE_PHANTOM::kPatientUIDFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kPhantomNameFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kDescriptionFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kPhantomWidthFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kPhantomHeightFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kPhantomLengthFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kSliceSpacingFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kXDimensionFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kYDimensionFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kXSpacingFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kYSpacingFieldNumber;
const int RT_TPS_CREATE_PHANTOM::kCtvalueFieldNumber;
#endif  // !_MSC_VER

RT_TPS_CREATE_PHANTOM::RT_TPS_CREATE_PHANTOM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_CREATE_PHANTOM::InitAsDefaultInstance() {
}

RT_TPS_CREATE_PHANTOM::RT_TPS_CREATE_PHANTOM(const RT_TPS_CREATE_PHANTOM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_CREATE_PHANTOM::SharedCtor() {
  _cached_size_ = 0;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phantomname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  phantomwidth_ = 0;
  phantomheight_ = 0;
  phantomlength_ = 0;
  slicespacing_ = 0;
  xdimension_ = 0;
  ydimension_ = 0;
  xspacing_ = 0;
  yspacing_ = 0;
  ctvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_CREATE_PHANTOM::~RT_TPS_CREATE_PHANTOM() {
  SharedDtor();
}

void RT_TPS_CREATE_PHANTOM::SharedDtor() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (phantomname_ != &::google::protobuf::internal::kEmptyString) {
    delete phantomname_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_CREATE_PHANTOM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_CREATE_PHANTOM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_CREATE_PHANTOM_descriptor_;
}

const RT_TPS_CREATE_PHANTOM& RT_TPS_CREATE_PHANTOM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fcreate_5fphantom_2eproto();  return *default_instance_;
}

RT_TPS_CREATE_PHANTOM* RT_TPS_CREATE_PHANTOM::default_instance_ = NULL;

RT_TPS_CREATE_PHANTOM* RT_TPS_CREATE_PHANTOM::New() const {
  return new RT_TPS_CREATE_PHANTOM;
}

void RT_TPS_CREATE_PHANTOM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
    if (has_phantomname()) {
      if (phantomname_ != &::google::protobuf::internal::kEmptyString) {
        phantomname_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    phantomwidth_ = 0;
    phantomheight_ = 0;
    phantomlength_ = 0;
    slicespacing_ = 0;
    xdimension_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ydimension_ = 0;
    xspacing_ = 0;
    yspacing_ = 0;
    ctvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_CREATE_PHANTOM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string patientUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_phantomName;
        break;
      }
      
      // required string phantomName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phantomName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phantomname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phantomname().data(), this->phantomname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }
      
      // optional string description = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_phantomWidth;
        break;
      }
      
      // required float phantomWidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phantomWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phantomwidth_)));
          set_has_phantomwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_phantomHeight;
        break;
      }
      
      // required float phantomHeight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phantomHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phantomheight_)));
          set_has_phantomheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_phantomLength;
        break;
      }
      
      // required float phantomLength = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_phantomLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &phantomlength_)));
          set_has_phantomlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sliceSpacing;
        break;
      }
      
      // required float sliceSpacing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sliceSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slicespacing_)));
          set_has_slicespacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_xDimension;
        break;
      }
      
      // optional int32 xDimension = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdimension_)));
          set_has_xdimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_yDimension;
        break;
      }
      
      // optional int32 yDimension = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydimension_)));
          set_has_ydimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_xSpacing;
        break;
      }
      
      // optional float xSpacing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xspacing_)));
          set_has_xspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_ySpacing;
        break;
      }
      
      // optional float ySpacing = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ySpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yspacing_)));
          set_has_yspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_ctvalue;
        break;
      }
      
      // optional float ctvalue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ctvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctvalue_)));
          set_has_ctvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_CREATE_PHANTOM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->patientuid(), output);
  }
  
  // required string phantomName = 2;
  if (has_phantomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phantomname().data(), this->phantomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->phantomname(), output);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->description(), output);
  }
  
  // required float phantomWidth = 4;
  if (has_phantomwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->phantomwidth(), output);
  }
  
  // required float phantomHeight = 5;
  if (has_phantomheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->phantomheight(), output);
  }
  
  // required float phantomLength = 6;
  if (has_phantomlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->phantomlength(), output);
  }
  
  // required float sliceSpacing = 7;
  if (has_slicespacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->slicespacing(), output);
  }
  
  // optional int32 xDimension = 8;
  if (has_xdimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xdimension(), output);
  }
  
  // optional int32 yDimension = 9;
  if (has_ydimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ydimension(), output);
  }
  
  // optional float xSpacing = 10;
  if (has_xspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->xspacing(), output);
  }
  
  // optional float ySpacing = 11;
  if (has_yspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->yspacing(), output);
  }
  
  // optional float ctvalue = 12;
  if (has_ctvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ctvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_CREATE_PHANTOM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patientuid(), target);
  }
  
  // required string phantomName = 2;
  if (has_phantomname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phantomname().data(), this->phantomname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phantomname(), target);
  }
  
  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }
  
  // required float phantomWidth = 4;
  if (has_phantomwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->phantomwidth(), target);
  }
  
  // required float phantomHeight = 5;
  if (has_phantomheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->phantomheight(), target);
  }
  
  // required float phantomLength = 6;
  if (has_phantomlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->phantomlength(), target);
  }
  
  // required float sliceSpacing = 7;
  if (has_slicespacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->slicespacing(), target);
  }
  
  // optional int32 xDimension = 8;
  if (has_xdimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xdimension(), target);
  }
  
  // optional int32 yDimension = 9;
  if (has_ydimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ydimension(), target);
  }
  
  // optional float xSpacing = 10;
  if (has_xspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->xspacing(), target);
  }
  
  // optional float ySpacing = 11;
  if (has_yspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->yspacing(), target);
  }
  
  // optional float ctvalue = 12;
  if (has_ctvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ctvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_CREATE_PHANTOM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string patientUID = 1;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
    // required string phantomName = 2;
    if (has_phantomname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phantomname());
    }
    
    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // required float phantomWidth = 4;
    if (has_phantomwidth()) {
      total_size += 1 + 4;
    }
    
    // required float phantomHeight = 5;
    if (has_phantomheight()) {
      total_size += 1 + 4;
    }
    
    // required float phantomLength = 6;
    if (has_phantomlength()) {
      total_size += 1 + 4;
    }
    
    // required float sliceSpacing = 7;
    if (has_slicespacing()) {
      total_size += 1 + 4;
    }
    
    // optional int32 xDimension = 8;
    if (has_xdimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdimension());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 yDimension = 9;
    if (has_ydimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydimension());
    }
    
    // optional float xSpacing = 10;
    if (has_xspacing()) {
      total_size += 1 + 4;
    }
    
    // optional float ySpacing = 11;
    if (has_yspacing()) {
      total_size += 1 + 4;
    }
    
    // optional float ctvalue = 12;
    if (has_ctvalue()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_CREATE_PHANTOM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_CREATE_PHANTOM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CREATE_PHANTOM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_CREATE_PHANTOM::MergeFrom(const RT_TPS_CREATE_PHANTOM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
    if (from.has_phantomname()) {
      set_phantomname(from.phantomname());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_phantomwidth()) {
      set_phantomwidth(from.phantomwidth());
    }
    if (from.has_phantomheight()) {
      set_phantomheight(from.phantomheight());
    }
    if (from.has_phantomlength()) {
      set_phantomlength(from.phantomlength());
    }
    if (from.has_slicespacing()) {
      set_slicespacing(from.slicespacing());
    }
    if (from.has_xdimension()) {
      set_xdimension(from.xdimension());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ydimension()) {
      set_ydimension(from.ydimension());
    }
    if (from.has_xspacing()) {
      set_xspacing(from.xspacing());
    }
    if (from.has_yspacing()) {
      set_yspacing(from.yspacing());
    }
    if (from.has_ctvalue()) {
      set_ctvalue(from.ctvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_CREATE_PHANTOM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_CREATE_PHANTOM::CopyFrom(const RT_TPS_CREATE_PHANTOM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_CREATE_PHANTOM::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007a) != 0x0000007a) return false;
  
  return true;
}

void RT_TPS_CREATE_PHANTOM::Swap(RT_TPS_CREATE_PHANTOM* other) {
  if (other != this) {
    std::swap(patientuid_, other->patientuid_);
    std::swap(phantomname_, other->phantomname_);
    std::swap(description_, other->description_);
    std::swap(phantomwidth_, other->phantomwidth_);
    std::swap(phantomheight_, other->phantomheight_);
    std::swap(phantomlength_, other->phantomlength_);
    std::swap(slicespacing_, other->slicespacing_);
    std::swap(xdimension_, other->xdimension_);
    std::swap(ydimension_, other->ydimension_);
    std::swap(xspacing_, other->xspacing_);
    std::swap(yspacing_, other->yspacing_);
    std::swap(ctvalue_, other->ctvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_CREATE_PHANTOM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_CREATE_PHANTOM_descriptor_;
  metadata.reflection = RT_TPS_CREATE_PHANTOM_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
