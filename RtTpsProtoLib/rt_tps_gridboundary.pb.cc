// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_gridboundary.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_GridBoundary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_GridBoundary_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fgridboundary_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_gridboundary.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_GridBoundary_descriptor_ = file->message_type(0);
  static const int RT_TPS_GridBoundary_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, windowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, windowuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, plan_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, normalgroup_uid_),
  };
  RT_TPS_GridBoundary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_GridBoundary_descriptor_,
      RT_TPS_GridBoundary::default_instance_,
      RT_TPS_GridBoundary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridBoundary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_GridBoundary));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fgridboundary_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_GridBoundary_descriptor_, &RT_TPS_GridBoundary::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fgridboundary_2eproto() {
  delete RT_TPS_GridBoundary::default_instance_;
  delete RT_TPS_GridBoundary_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rt_tps_gridboundary.proto\022\ttps.proto\"\215"
    "\001\n\023RT_TPS_GridBoundary\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002"
    " \002(\001\022\016\n\006action\030\003 \002(\005\022\022\n\nwindowType\030\005 \002(\005"
    "\022\021\n\twindowUid\030\006 \002(\t\022\020\n\010plan_uid\030\007 \002(\t\022\027\n"
    "\017normalgroup_uid\030\010 \001(\t", 182);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_gridboundary.proto", &protobuf_RegisterTypes);
  RT_TPS_GridBoundary::default_instance_ = new RT_TPS_GridBoundary();
  RT_TPS_GridBoundary::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fgridboundary_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fgridboundary_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fgridboundary_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fgridboundary_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_GridBoundary::kXFieldNumber;
const int RT_TPS_GridBoundary::kYFieldNumber;
const int RT_TPS_GridBoundary::kActionFieldNumber;
const int RT_TPS_GridBoundary::kWindowTypeFieldNumber;
const int RT_TPS_GridBoundary::kWindowUidFieldNumber;
const int RT_TPS_GridBoundary::kPlanUidFieldNumber;
const int RT_TPS_GridBoundary::kNormalgroupUidFieldNumber;
#endif  // !_MSC_VER

RT_TPS_GridBoundary::RT_TPS_GridBoundary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_GridBoundary::InitAsDefaultInstance() {
}

RT_TPS_GridBoundary::RT_TPS_GridBoundary(const RT_TPS_GridBoundary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_GridBoundary::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  action_ = 0;
  windowtype_ = 0;
  windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plan_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalgroup_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_GridBoundary::~RT_TPS_GridBoundary() {
  SharedDtor();
}

void RT_TPS_GridBoundary::SharedDtor() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    delete windowuid_;
  }
  if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete plan_uid_;
  }
  if (normalgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete normalgroup_uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_GridBoundary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_GridBoundary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_GridBoundary_descriptor_;
}

const RT_TPS_GridBoundary& RT_TPS_GridBoundary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto();  return *default_instance_;
}

RT_TPS_GridBoundary* RT_TPS_GridBoundary::default_instance_ = NULL;

RT_TPS_GridBoundary* RT_TPS_GridBoundary::New() const {
  return new RT_TPS_GridBoundary;
}

void RT_TPS_GridBoundary::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    action_ = 0;
    windowtype_ = 0;
    if (has_windowuid()) {
      if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
        windowuid_->clear();
      }
    }
    if (has_plan_uid()) {
      if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
        plan_uid_->clear();
      }
    }
    if (has_normalgroup_uid()) {
      if (normalgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
        normalgroup_uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_GridBoundary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }
      
      // required int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_windowType;
        break;
      }
      
      // required int32 windowType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowtype_)));
          set_has_windowtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_windowUid;
        break;
      }
      
      // required string windowUid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windowuid().data(), this->windowuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_plan_uid;
        break;
      }
      
      // required string plan_uid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plan_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plan_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plan_uid().data(), this->plan_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_normalgroup_uid;
        break;
      }
      
      // optional string normalgroup_uid = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalgroup_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalgroup_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalgroup_uid().data(), this->normalgroup_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_GridBoundary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->windowtype(), output);
  }
  
  // required string windowUid = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->windowuid(), output);
  }
  
  // required string plan_uid = 7;
  if (has_plan_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan_uid().data(), this->plan_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->plan_uid(), output);
  }
  
  // optional string normalgroup_uid = 8;
  if (has_normalgroup_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalgroup_uid().data(), this->normalgroup_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->normalgroup_uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_GridBoundary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required int32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action(), target);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->windowtype(), target);
  }
  
  // required string windowUid = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->windowuid(), target);
  }
  
  // required string plan_uid = 7;
  if (has_plan_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan_uid().data(), this->plan_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->plan_uid(), target);
  }
  
  // optional string normalgroup_uid = 8;
  if (has_normalgroup_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalgroup_uid().data(), this->normalgroup_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->normalgroup_uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_GridBoundary::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // required int32 windowType = 5;
    if (has_windowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowtype());
    }
    
    // required string windowUid = 6;
    if (has_windowuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windowuid());
    }
    
    // required string plan_uid = 7;
    if (has_plan_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plan_uid());
    }
    
    // optional string normalgroup_uid = 8;
    if (has_normalgroup_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalgroup_uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_GridBoundary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_GridBoundary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_GridBoundary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_GridBoundary::MergeFrom(const RT_TPS_GridBoundary& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_windowtype()) {
      set_windowtype(from.windowtype());
    }
    if (from.has_windowuid()) {
      set_windowuid(from.windowuid());
    }
    if (from.has_plan_uid()) {
      set_plan_uid(from.plan_uid());
    }
    if (from.has_normalgroup_uid()) {
      set_normalgroup_uid(from.normalgroup_uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_GridBoundary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_GridBoundary::CopyFrom(const RT_TPS_GridBoundary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_GridBoundary::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void RT_TPS_GridBoundary::Swap(RT_TPS_GridBoundary* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(action_, other->action_);
    std::swap(windowtype_, other->windowtype_);
    std::swap(windowuid_, other->windowuid_);
    std::swap(plan_uid_, other->plan_uid_);
    std::swap(normalgroup_uid_, other->normalgroup_uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_GridBoundary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_GridBoundary_descriptor_;
  metadata.reflection = RT_TPS_GridBoundary_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
