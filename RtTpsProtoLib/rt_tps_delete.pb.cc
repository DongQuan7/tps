// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_delete.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_Delete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Delete_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fdelete_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fdelete_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_delete.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_Delete_descriptor_ = file->message_type(0);
  static const int RT_TPS_Delete_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Delete, objecttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Delete, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Delete, fatheruid_),
  };
  RT_TPS_Delete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Delete_descriptor_,
      RT_TPS_Delete::default_instance_,
      RT_TPS_Delete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Delete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Delete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Delete));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fdelete_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Delete_descriptor_, &RT_TPS_Delete::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fdelete_2eproto() {
  delete RT_TPS_Delete::default_instance_;
  delete RT_TPS_Delete_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fdelete_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023rt_tps_delete.proto\022\ttps.proto\"C\n\rRT_T"
    "PS_Delete\022\022\n\nobjectType\030\001 \002(\t\022\013\n\003UID\030\002 \002"
    "(\t\022\021\n\tfatherUID\030\003 \001(\t", 101);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_delete.proto", &protobuf_RegisterTypes);
  RT_TPS_Delete::default_instance_ = new RT_TPS_Delete();
  RT_TPS_Delete::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fdelete_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fdelete_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fdelete_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fdelete_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fdelete_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Delete::kObjectTypeFieldNumber;
const int RT_TPS_Delete::kUIDFieldNumber;
const int RT_TPS_Delete::kFatherUIDFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Delete::RT_TPS_Delete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Delete::InitAsDefaultInstance() {
}

RT_TPS_Delete::RT_TPS_Delete(const RT_TPS_Delete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Delete::SharedCtor() {
  _cached_size_ = 0;
  objecttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fatheruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Delete::~RT_TPS_Delete() {
  SharedDtor();
}

void RT_TPS_Delete::SharedDtor() {
  if (objecttype_ != &::google::protobuf::internal::kEmptyString) {
    delete objecttype_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (fatheruid_ != &::google::protobuf::internal::kEmptyString) {
    delete fatheruid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Delete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Delete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Delete_descriptor_;
}

const RT_TPS_Delete& RT_TPS_Delete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fdelete_2eproto();  return *default_instance_;
}

RT_TPS_Delete* RT_TPS_Delete::default_instance_ = NULL;

RT_TPS_Delete* RT_TPS_Delete::New() const {
  return new RT_TPS_Delete;
}

void RT_TPS_Delete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_objecttype()) {
      if (objecttype_ != &::google::protobuf::internal::kEmptyString) {
        objecttype_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_fatheruid()) {
      if (fatheruid_ != &::google::protobuf::internal::kEmptyString) {
        fatheruid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Delete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string objectType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objecttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objecttype().data(), this->objecttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_UID;
        break;
      }
      
      // required string UID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fatherUID;
        break;
      }
      
      // optional string fatherUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fatherUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fatheruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fatheruid().data(), this->fatheruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Delete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string objectType = 1;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objecttype().data(), this->objecttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->objecttype(), output);
  }
  
  // required string UID = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid(), output);
  }
  
  // optional string fatherUID = 3;
  if (has_fatheruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatheruid().data(), this->fatheruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fatheruid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Delete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string objectType = 1;
  if (has_objecttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objecttype().data(), this->objecttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->objecttype(), target);
  }
  
  // required string UID = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid(), target);
  }
  
  // optional string fatherUID = 3;
  if (has_fatheruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fatheruid().data(), this->fatheruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fatheruid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Delete::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string objectType = 1;
    if (has_objecttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objecttype());
    }
    
    // required string UID = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string fatherUID = 3;
    if (has_fatheruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fatheruid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Delete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Delete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Delete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Delete::MergeFrom(const RT_TPS_Delete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_objecttype()) {
      set_objecttype(from.objecttype());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fatheruid()) {
      set_fatheruid(from.fatheruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Delete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Delete::CopyFrom(const RT_TPS_Delete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Delete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RT_TPS_Delete::Swap(RT_TPS_Delete* other) {
  if (other != this) {
    std::swap(objecttype_, other->objecttype_);
    std::swap(uid_, other->uid_);
    std::swap(fatheruid_, other->fatheruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Delete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Delete_descriptor_;
  metadata.reflection = RT_TPS_Delete_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
