// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_fluencecorrection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_FluenceCorrection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_FluenceCorrection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5ffluencecorrection_2eproto() {
  protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_fluencecorrection.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_FluenceCorrection_descriptor_ = file->message_type(0);
  static const int RT_MS_FluenceCorrection_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, measureuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, depth_),
  };
  RT_MS_FluenceCorrection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_FluenceCorrection_descriptor_,
      RT_MS_FluenceCorrection::default_instance_,
      RT_MS_FluenceCorrection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FluenceCorrection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_FluenceCorrection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5ffluencecorrection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_FluenceCorrection_descriptor_, &RT_MS_FluenceCorrection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5ffluencecorrection_2eproto() {
  delete RT_MS_FluenceCorrection::default_instance_;
  delete RT_MS_FluenceCorrection_reflection_;
}

void protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035rt_ms_fluencecorrection.proto\022\010ms.prot"
    "o\"c\n\027RT_MS_FluenceCorrection\022\025\n\rcommissi"
    "onUID\030\001 \001(\t\022\022\n\nmeasureUID\030\002 \001(\t\022\016\n\006energ"
    "y\030\003 \003(\002\022\r\n\005depth\030\004 \001(\002", 142);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_fluencecorrection.proto", &protobuf_RegisterTypes);
  RT_MS_FluenceCorrection::default_instance_ = new RT_MS_FluenceCorrection();
  RT_MS_FluenceCorrection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5ffluencecorrection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5ffluencecorrection_2eproto {
  StaticDescriptorInitializer_rt_5fms_5ffluencecorrection_2eproto() {
    protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5ffluencecorrection_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_FluenceCorrection::kCommissionUIDFieldNumber;
const int RT_MS_FluenceCorrection::kMeasureUIDFieldNumber;
const int RT_MS_FluenceCorrection::kEnergyFieldNumber;
const int RT_MS_FluenceCorrection::kDepthFieldNumber;
#endif  // !_MSC_VER

RT_MS_FluenceCorrection::RT_MS_FluenceCorrection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_FluenceCorrection::InitAsDefaultInstance() {
}

RT_MS_FluenceCorrection::RT_MS_FluenceCorrection(const RT_MS_FluenceCorrection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_FluenceCorrection::SharedCtor() {
  _cached_size_ = 0;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  measureuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_FluenceCorrection::~RT_MS_FluenceCorrection() {
  SharedDtor();
}

void RT_MS_FluenceCorrection::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (measureuid_ != &::google::protobuf::internal::kEmptyString) {
    delete measureuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_FluenceCorrection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_FluenceCorrection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_FluenceCorrection_descriptor_;
}

const RT_MS_FluenceCorrection& RT_MS_FluenceCorrection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto();  return *default_instance_;
}

RT_MS_FluenceCorrection* RT_MS_FluenceCorrection::default_instance_ = NULL;

RT_MS_FluenceCorrection* RT_MS_FluenceCorrection::New() const {
  return new RT_MS_FluenceCorrection;
}

void RT_MS_FluenceCorrection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    if (has_measureuid()) {
      if (measureuid_ != &::google::protobuf::internal::kEmptyString) {
        measureuid_->clear();
      }
    }
    depth_ = 0;
  }
  energy_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_FluenceCorrection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string commissionUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_measureUID;
        break;
      }
      
      // optional string measureUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_measureUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_measureuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->measureuid().data(), this->measureuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_energy;
        break;
      }
      
      // repeated float energy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 29, input, this->mutable_energy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_energy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_energy;
        if (input->ExpectTag(37)) goto parse_depth;
        break;
      }
      
      // optional float depth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_FluenceCorrection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string commissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->commissionuid(), output);
  }
  
  // optional string measureUID = 2;
  if (has_measureuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->measureuid().data(), this->measureuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->measureuid(), output);
  }
  
  // repeated float energy = 3;
  for (int i = 0; i < this->energy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      3, this->energy(i), output);
  }
  
  // optional float depth = 4;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->depth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_FluenceCorrection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string commissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commissionuid(), target);
  }
  
  // optional string measureUID = 2;
  if (has_measureuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->measureuid().data(), this->measureuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->measureuid(), target);
  }
  
  // repeated float energy = 3;
  for (int i = 0; i < this->energy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(3, this->energy(i), target);
  }
  
  // optional float depth = 4;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->depth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_FluenceCorrection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string commissionUID = 1;
    if (has_commissionuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional string measureUID = 2;
    if (has_measureuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->measureuid());
    }
    
    // optional float depth = 4;
    if (has_depth()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float energy = 3;
  {
    int data_size = 0;
    data_size = 4 * this->energy_size();
    total_size += 1 * this->energy_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_FluenceCorrection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_FluenceCorrection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_FluenceCorrection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_FluenceCorrection::MergeFrom(const RT_MS_FluenceCorrection& from) {
  GOOGLE_CHECK_NE(&from, this);
  energy_.MergeFrom(from.energy_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_measureuid()) {
      set_measureuid(from.measureuid());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_FluenceCorrection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_FluenceCorrection::CopyFrom(const RT_MS_FluenceCorrection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_FluenceCorrection::IsInitialized() const {
  
  return true;
}

void RT_MS_FluenceCorrection::Swap(RT_MS_FluenceCorrection* other) {
  if (other != this) {
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(measureuid_, other->measureuid_);
    energy_.Swap(&other->energy_);
    std::swap(depth_, other->depth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_FluenceCorrection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_FluenceCorrection_descriptor_;
  metadata.reflection = RT_MS_FluenceCorrection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
