// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_scp.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_SCPInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_SCPInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_SCPInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_SCPInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fscp_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fscp_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_scp.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_SCPInfoList_descriptor_ = file->message_type(0);
  static const int RT_MS_SCPInfoList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfoList, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfoList, scpinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfoList, scpdepth_),
  };
  RT_MS_SCPInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_SCPInfoList_descriptor_,
      RT_MS_SCPInfoList::default_instance_,
      RT_MS_SCPInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_SCPInfoList));
  RT_MS_SCPInfo_descriptor_ = file->message_type(1);
  static const int RT_MS_SCPInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, fieldsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, fieldsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, scp_),
  };
  RT_MS_SCPInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_SCPInfo_descriptor_,
      RT_MS_SCPInfo::default_instance_,
      RT_MS_SCPInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_SCPInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_SCPInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fscp_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_SCPInfoList_descriptor_, &RT_MS_SCPInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_SCPInfo_descriptor_, &RT_MS_SCPInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fscp_2eproto() {
  delete RT_MS_SCPInfoList::default_instance_;
  delete RT_MS_SCPInfoList_reflection_;
  delete RT_MS_SCPInfo::default_instance_;
  delete RT_MS_SCPInfo_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fscp_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020rt_tps_scp.proto\022\010ms.proto\"\\\n\021RT_MS_SC"
    "PInfoList\022\013\n\003uid\030\001 \001(\t\022(\n\007scpInfo\030\002 \003(\0132"
    "\027.ms.proto.RT_MS_SCPInfo\022\020\n\010scpdepth\030\003 \001"
    "(\002\"d\n\rRT_MS_SCPInfo\022\013\n\003uid\030\001 \001(\t\022\021\n\tpare"
    "ntuid\030\002 \001(\t\022\022\n\nfieldSizeX\030\003 \001(\002\022\022\n\nfield"
    "SizeY\030\004 \001(\002\022\013\n\003scp\030\005 \001(\002", 224);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_scp.proto", &protobuf_RegisterTypes);
  RT_MS_SCPInfoList::default_instance_ = new RT_MS_SCPInfoList();
  RT_MS_SCPInfo::default_instance_ = new RT_MS_SCPInfo();
  RT_MS_SCPInfoList::default_instance_->InitAsDefaultInstance();
  RT_MS_SCPInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fscp_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fscp_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fscp_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fscp_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fscp_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_SCPInfoList::kUidFieldNumber;
const int RT_MS_SCPInfoList::kScpInfoFieldNumber;
const int RT_MS_SCPInfoList::kScpdepthFieldNumber;
#endif  // !_MSC_VER

RT_MS_SCPInfoList::RT_MS_SCPInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_SCPInfoList::InitAsDefaultInstance() {
}

RT_MS_SCPInfoList::RT_MS_SCPInfoList(const RT_MS_SCPInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_SCPInfoList::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scpdepth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_SCPInfoList::~RT_MS_SCPInfoList() {
  SharedDtor();
}

void RT_MS_SCPInfoList::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_SCPInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_SCPInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_SCPInfoList_descriptor_;
}

const RT_MS_SCPInfoList& RT_MS_SCPInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fscp_2eproto();  return *default_instance_;
}

RT_MS_SCPInfoList* RT_MS_SCPInfoList::default_instance_ = NULL;

RT_MS_SCPInfoList* RT_MS_SCPInfoList::New() const {
  return new RT_MS_SCPInfoList;
}

void RT_MS_SCPInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    scpdepth_ = 0;
  }
  scpinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_SCPInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scpInfo;
        break;
      }
      
      // repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scpInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_scpinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_scpInfo;
        if (input->ExpectTag(29)) goto parse_scpdepth;
        break;
      }
      
      // optional float scpdepth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scpdepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scpdepth_)));
          set_has_scpdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_SCPInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
  for (int i = 0; i < this->scpinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->scpinfo(i), output);
  }
  
  // optional float scpdepth = 3;
  if (has_scpdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->scpdepth(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_SCPInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
  for (int i = 0; i < this->scpinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->scpinfo(i), target);
  }
  
  // optional float scpdepth = 3;
  if (has_scpdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->scpdepth(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_SCPInfoList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float scpdepth = 3;
    if (has_scpdepth()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
  total_size += 1 * this->scpinfo_size();
  for (int i = 0; i < this->scpinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->scpinfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_SCPInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_SCPInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_SCPInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_SCPInfoList::MergeFrom(const RT_MS_SCPInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  scpinfo_.MergeFrom(from.scpinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_scpdepth()) {
      set_scpdepth(from.scpdepth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_SCPInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_SCPInfoList::CopyFrom(const RT_MS_SCPInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_SCPInfoList::IsInitialized() const {
  
  return true;
}

void RT_MS_SCPInfoList::Swap(RT_MS_SCPInfoList* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    scpinfo_.Swap(&other->scpinfo_);
    std::swap(scpdepth_, other->scpdepth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_SCPInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_SCPInfoList_descriptor_;
  metadata.reflection = RT_MS_SCPInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_SCPInfo::kUidFieldNumber;
const int RT_MS_SCPInfo::kParentuidFieldNumber;
const int RT_MS_SCPInfo::kFieldSizeXFieldNumber;
const int RT_MS_SCPInfo::kFieldSizeYFieldNumber;
const int RT_MS_SCPInfo::kScpFieldNumber;
#endif  // !_MSC_VER

RT_MS_SCPInfo::RT_MS_SCPInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_SCPInfo::InitAsDefaultInstance() {
}

RT_MS_SCPInfo::RT_MS_SCPInfo(const RT_MS_SCPInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_SCPInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fieldsizex_ = 0;
  fieldsizey_ = 0;
  scp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_SCPInfo::~RT_MS_SCPInfo() {
  SharedDtor();
}

void RT_MS_SCPInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_SCPInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_SCPInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_SCPInfo_descriptor_;
}

const RT_MS_SCPInfo& RT_MS_SCPInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fscp_2eproto();  return *default_instance_;
}

RT_MS_SCPInfo* RT_MS_SCPInfo::default_instance_ = NULL;

RT_MS_SCPInfo* RT_MS_SCPInfo::New() const {
  return new RT_MS_SCPInfo;
}

void RT_MS_SCPInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
    fieldsizex_ = 0;
    fieldsizey_ = 0;
    scp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_SCPInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parentuid;
        break;
      }
      
      // optional string parentuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fieldSizeX;
        break;
      }
      
      // optional float fieldSizeX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fieldSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldsizex_)));
          set_has_fieldsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fieldSizeY;
        break;
      }
      
      // optional float fieldSizeY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fieldSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldsizey_)));
          set_has_fieldsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_scp;
        break;
      }
      
      // optional float scp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &scp_)));
          set_has_scp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_SCPInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string parentuid = 2;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parentuid(), output);
  }
  
  // optional float fieldSizeX = 3;
  if (has_fieldsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fieldsizex(), output);
  }
  
  // optional float fieldSizeY = 4;
  if (has_fieldsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fieldsizey(), output);
  }
  
  // optional float scp = 5;
  if (has_scp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->scp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_SCPInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string parentuid = 2;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentuid(), target);
  }
  
  // optional float fieldSizeX = 3;
  if (has_fieldsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fieldsizex(), target);
  }
  
  // optional float fieldSizeY = 4;
  if (has_fieldsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fieldsizey(), target);
  }
  
  // optional float scp = 5;
  if (has_scp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->scp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_SCPInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string parentuid = 2;
    if (has_parentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
    // optional float fieldSizeX = 3;
    if (has_fieldsizex()) {
      total_size += 1 + 4;
    }
    
    // optional float fieldSizeY = 4;
    if (has_fieldsizey()) {
      total_size += 1 + 4;
    }
    
    // optional float scp = 5;
    if (has_scp()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_SCPInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_SCPInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_SCPInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_SCPInfo::MergeFrom(const RT_MS_SCPInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
    if (from.has_fieldsizex()) {
      set_fieldsizex(from.fieldsizex());
    }
    if (from.has_fieldsizey()) {
      set_fieldsizey(from.fieldsizey());
    }
    if (from.has_scp()) {
      set_scp(from.scp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_SCPInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_SCPInfo::CopyFrom(const RT_MS_SCPInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_SCPInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_SCPInfo::Swap(RT_MS_SCPInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(parentuid_, other->parentuid_);
    std::swap(fieldsizex_, other->fieldsizex_);
    std::swap(fieldsizey_, other->fieldsizey_);
    std::swap(scp_, other->scp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_SCPInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_SCPInfo_descriptor_;
  metadata.reflection = RT_MS_SCPInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
