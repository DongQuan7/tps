// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_cornertext_mpr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
	namespace proto {

		namespace {

			const ::google::protobuf::Descriptor* RT_TPS_CornerText_MPR_descriptor_ = NULL;
			const ::google::protobuf::internal::GeneratedMessageReflection*
				RT_TPS_CornerText_MPR_reflection_ = NULL;

		}  // namespace


		void protobuf_AssignDesc_rt_5ftps_5fcornertext_5fmpr_2eproto() {
			protobuf_AddDesc_rt_5ftps_5fcornertext_5fmpr_2eproto();
			const ::google::protobuf::FileDescriptor* file =
				::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
				"rt_tps_cornertext_mpr.proto");
			GOOGLE_CHECK(file != NULL);
			RT_TPS_CornerText_MPR_descriptor_ = file->message_type(0);
			static const int RT_TPS_CornerText_MPR_offsets_[17] = {
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, planname_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, seriesname_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, seriesdatetime_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, patientposition_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, value_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, density_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, dosevalue_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, pixelpositionx_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, pixelpositiony_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, pixelpositionz_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, windowwidth_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, windowcenter_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, slicenumber_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, startslicenumber_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, slicethickness_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, isvaluevalid_),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, modality_),
			};
			RT_TPS_CornerText_MPR_reflection_ =
				new ::google::protobuf::internal::GeneratedMessageReflection(
				RT_TPS_CornerText_MPR_descriptor_,
				RT_TPS_CornerText_MPR::default_instance_,
				RT_TPS_CornerText_MPR_offsets_,
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, _has_bits_[0]),
				GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CornerText_MPR, _unknown_fields_),
				-1,
				::google::protobuf::DescriptorPool::generated_pool(),
				::google::protobuf::MessageFactory::generated_factory(),
				sizeof(RT_TPS_CornerText_MPR));
		}

		namespace {

			GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
			inline void protobuf_AssignDescriptorsOnce() {
				::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
					&protobuf_AssignDesc_rt_5ftps_5fcornertext_5fmpr_2eproto);
			}

			void protobuf_RegisterTypes(const ::std::string&) {
				protobuf_AssignDescriptorsOnce();
				::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
					RT_TPS_CornerText_MPR_descriptor_, &RT_TPS_CornerText_MPR::default_instance());
			}

		}  // namespace

		void protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fmpr_2eproto() {
			delete RT_TPS_CornerText_MPR::default_instance_;
			delete RT_TPS_CornerText_MPR_reflection_;
		}

		void protobuf_AddDesc_rt_5ftps_5fcornertext_5fmpr_2eproto() {
			static bool already_here = false;
			if (already_here) return;
			already_here = true;
			GOOGLE_PROTOBUF_VERIFY_VERSION;

			::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
				"\n\033rt_tps_cornertext_mpr.proto\022\ttps.proto"
				"\"\203\003\n\025RT_TPS_CornerText_MPR\022\020\n\010planname\030\001"
				" \001(\t\022\022\n\nseriesname\030\002 \001(\t\022\026\n\016seriesdateti"
				"me\030\003 \001(\t\022\027\n\017patientposition\030\004 \001(\t\022\r\n\005val"
				"ue\030\005 \001(\001\022\017\n\007density\030\006 \001(\001\022\021\n\tdosevalue\030\007"
				" \001(\001\022\026\n\016pixelpositionx\030\010 \001(\001\022\026\n\016pixelpos"
				"itiony\030\t \001(\001\022\026\n\016pixelpositionz\030\n \001(\001\022\023\n\013"
				"windowwidth\030\013 \001(\001\022\024\n\014windowcenter\030\014 \001(\001\022"
				"\023\n\013slicenumber\030\r \001(\005\022\030\n\020startslicenumber"
				"\030\016 \001(\005\022\026\n\016slicethickness\030\017 \001(\001\022\024\n\014isvalu"
				"evalid\030\020 \001(\010\022\020\n\010modality\030\021 \001(\t", 430);
			::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
				"rt_tps_cornertext_mpr.proto", &protobuf_RegisterTypes);
			RT_TPS_CornerText_MPR::default_instance_ = new RT_TPS_CornerText_MPR();
			RT_TPS_CornerText_MPR::default_instance_->InitAsDefaultInstance();
			::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fmpr_2eproto);
		}

		// Force AddDescriptors() to be called at static initialization time.
		struct StaticDescriptorInitializer_rt_5ftps_5fcornertext_5fmpr_2eproto {
			StaticDescriptorInitializer_rt_5ftps_5fcornertext_5fmpr_2eproto() {
				protobuf_AddDesc_rt_5ftps_5fcornertext_5fmpr_2eproto();
			}
		} static_descriptor_initializer_rt_5ftps_5fcornertext_5fmpr_2eproto_;


		// ===================================================================

#ifndef _MSC_VER
		const int RT_TPS_CornerText_MPR::kPlannameFieldNumber;
		const int RT_TPS_CornerText_MPR::kSeriesnameFieldNumber;
		const int RT_TPS_CornerText_MPR::kSeriesdatetimeFieldNumber;
		const int RT_TPS_CornerText_MPR::kPatientpositionFieldNumber;
		const int RT_TPS_CornerText_MPR::kValueFieldNumber;
		const int RT_TPS_CornerText_MPR::kDensityFieldNumber;
		const int RT_TPS_CornerText_MPR::kDosevalueFieldNumber;
		const int RT_TPS_CornerText_MPR::kPixelpositionxFieldNumber;
		const int RT_TPS_CornerText_MPR::kPixelpositionyFieldNumber;
		const int RT_TPS_CornerText_MPR::kPixelpositionzFieldNumber;
		const int RT_TPS_CornerText_MPR::kWindowwidthFieldNumber;
		const int RT_TPS_CornerText_MPR::kWindowcenterFieldNumber;
		const int RT_TPS_CornerText_MPR::kSlicenumberFieldNumber;
		const int RT_TPS_CornerText_MPR::kStartslicenumberFieldNumber;
		const int RT_TPS_CornerText_MPR::kSlicethicknessFieldNumber;
		const int RT_TPS_CornerText_MPR::kIsvaluevalidFieldNumber;
		const int RT_TPS_CornerText_MPR::kModalityFieldNumber;
#endif  // !_MSC_VER

		RT_TPS_CornerText_MPR::RT_TPS_CornerText_MPR()
			: ::google::protobuf::Message() {
				SharedCtor();
		}

		void RT_TPS_CornerText_MPR::InitAsDefaultInstance() {
		}

		RT_TPS_CornerText_MPR::RT_TPS_CornerText_MPR(const RT_TPS_CornerText_MPR& from)
			: ::google::protobuf::Message() {
				SharedCtor();
				MergeFrom(from);
		}

		void RT_TPS_CornerText_MPR::SharedCtor() {
			_cached_size_ = 0;
			planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
			seriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
			seriesdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
			patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
			value_ = 0;
			density_ = 0;
			dosevalue_ = 0;
			pixelpositionx_ = 0;
			pixelpositiony_ = 0;
			pixelpositionz_ = 0;
			windowwidth_ = 0;
			windowcenter_ = 0;
			slicenumber_ = 0;
			startslicenumber_ = 0;
			slicethickness_ = 0;
			isvaluevalid_ = false;
			modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
			::memset(_has_bits_, 0, sizeof(_has_bits_));
		}

		RT_TPS_CornerText_MPR::~RT_TPS_CornerText_MPR() {
			SharedDtor();
		}

		void RT_TPS_CornerText_MPR::SharedDtor() {
			if (planname_ != &::google::protobuf::internal::kEmptyString) {
				delete planname_;
			}
			if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
				delete seriesname_;
			}
			if (seriesdatetime_ != &::google::protobuf::internal::kEmptyString) {
				delete seriesdatetime_;
			}
			if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
				delete patientposition_;
			}
			if (modality_ != &::google::protobuf::internal::kEmptyString) {
				delete modality_;
			}
			if (this != default_instance_) {
			}
		}

		void RT_TPS_CornerText_MPR::SetCachedSize(int size) const {
			GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
			_cached_size_ = size;
			GOOGLE_SAFE_CONCURRENT_WRITES_END();
		}
		const ::google::protobuf::Descriptor* RT_TPS_CornerText_MPR::descriptor() {
			protobuf_AssignDescriptorsOnce();
			return RT_TPS_CornerText_MPR_descriptor_;
		}

		const RT_TPS_CornerText_MPR& RT_TPS_CornerText_MPR::default_instance() {
			if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fcornertext_5fmpr_2eproto();  return *default_instance_;
		}

		RT_TPS_CornerText_MPR* RT_TPS_CornerText_MPR::default_instance_ = NULL;

		RT_TPS_CornerText_MPR* RT_TPS_CornerText_MPR::New() const {
			return new RT_TPS_CornerText_MPR;
		}

		void RT_TPS_CornerText_MPR::Clear() {
			if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
				if (has_planname()) {
					if (planname_ != &::google::protobuf::internal::kEmptyString) {
						planname_->clear();
					}
				}
				if (has_seriesname()) {
					if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
						seriesname_->clear();
					}
				}
				if (has_seriesdatetime()) {
					if (seriesdatetime_ != &::google::protobuf::internal::kEmptyString) {
						seriesdatetime_->clear();
					}
				}
				if (has_patientposition()) {
					if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
						patientposition_->clear();
					}
				}
				value_ = 0;
				density_ = 0;
				dosevalue_ = 0;
				pixelpositionx_ = 0;
			}
			if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
				pixelpositiony_ = 0;
				pixelpositionz_ = 0;
				windowwidth_ = 0;
				windowcenter_ = 0;
				slicenumber_ = 0;
				startslicenumber_ = 0;
				slicethickness_ = 0;
				isvaluevalid_ = false;
			}
			if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
				if (has_modality()) {
					if (modality_ != &::google::protobuf::internal::kEmptyString) {
						modality_->clear();
					}
				}
			}
			::memset(_has_bits_, 0, sizeof(_has_bits_));
			mutable_unknown_fields()->Clear();
		}

		bool RT_TPS_CornerText_MPR::MergePartialFromCodedStream(
			::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
				::google::protobuf::uint32 tag;
				while ((tag = input->ReadTag()) != 0) {
					switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
						// optional string planname = 1;
					case 1: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
								DO_(::google::protobuf::internal::WireFormatLite::ReadString(
									input, this->mutable_planname()));
								::google::protobuf::internal::WireFormat::VerifyUTF8String(
									this->planname().data(), this->planname().length(),
									::google::protobuf::internal::WireFormat::PARSE);
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(18)) goto parse_seriesname;
						break;
							}

							// optional string seriesname = 2;
					case 2: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_seriesname:
								DO_(::google::protobuf::internal::WireFormatLite::ReadString(
									input, this->mutable_seriesname()));
								::google::protobuf::internal::WireFormat::VerifyUTF8String(
									this->seriesname().data(), this->seriesname().length(),
									::google::protobuf::internal::WireFormat::PARSE);
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(26)) goto parse_seriesdatetime;
						break;
							}

							// optional string seriesdatetime = 3;
					case 3: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_seriesdatetime:
								DO_(::google::protobuf::internal::WireFormatLite::ReadString(
									input, this->mutable_seriesdatetime()));
								::google::protobuf::internal::WireFormat::VerifyUTF8String(
									this->seriesdatetime().data(), this->seriesdatetime().length(),
									::google::protobuf::internal::WireFormat::PARSE);
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(34)) goto parse_patientposition;
						break;
							}

							// optional string patientposition = 4;
					case 4: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_patientposition:
								DO_(::google::protobuf::internal::WireFormatLite::ReadString(
									input, this->mutable_patientposition()));
								::google::protobuf::internal::WireFormat::VerifyUTF8String(
									this->patientposition().data(), this->patientposition().length(),
									::google::protobuf::internal::WireFormat::PARSE);
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(41)) goto parse_value;
						break;
							}

							// optional double value = 5;
					case 5: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_value:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &value_)));
								set_has_value();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(49)) goto parse_density;
						break;
							}

							// optional double density = 6;
					case 6: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_density:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &density_)));
								set_has_density();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(57)) goto parse_dosevalue;
						break;
							}

							// optional double dosevalue = 7;
					case 7: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_dosevalue:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &dosevalue_)));
								set_has_dosevalue();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(65)) goto parse_pixelpositionx;
						break;
							}

							// optional double pixelpositionx = 8;
					case 8: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_pixelpositionx:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &pixelpositionx_)));
								set_has_pixelpositionx();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(73)) goto parse_pixelpositiony;
						break;
							}

							// optional double pixelpositiony = 9;
					case 9: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_pixelpositiony:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &pixelpositiony_)));
								set_has_pixelpositiony();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(81)) goto parse_pixelpositionz;
						break;
							}

							// optional double pixelpositionz = 10;
					case 10: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_pixelpositionz:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &pixelpositionz_)));
								set_has_pixelpositionz();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(89)) goto parse_windowwidth;
						break;
							 }

							 // optional double windowwidth = 11;
					case 11: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_windowwidth:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &windowwidth_)));
								set_has_windowwidth();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(97)) goto parse_windowcenter;
						break;
							 }

							 // optional double windowcenter = 12;
					case 12: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_windowcenter:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &windowcenter_)));
								set_has_windowcenter();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(104)) goto parse_slicenumber;
						break;
							 }

							 // optional int32 slicenumber = 13;
					case 13: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_slicenumber:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
									input, &slicenumber_)));
								set_has_slicenumber();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(112)) goto parse_startslicenumber;
						break;
							 }

							 // optional int32 startslicenumber = 14;
					case 14: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_startslicenumber:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
									input, &startslicenumber_)));
								set_has_startslicenumber();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(121)) goto parse_slicethickness;
						break;
							 }

							 // optional double slicethickness = 15;
					case 15: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
parse_slicethickness:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
									input, &slicethickness_)));
								set_has_slicethickness();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(128)) goto parse_isvaluevalid;
						break;
							 }

							 // optional bool isvaluevalid = 16;
					case 16: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_isvaluevalid:
								DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
									bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
									input, &isvaluevalid_)));
								set_has_isvaluevalid();
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectTag(138)) goto parse_modality;
						break;
							 }

							 // optional string modality = 17;
					case 17: {
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_modality:
								DO_(::google::protobuf::internal::WireFormatLite::ReadString(
									input, this->mutable_modality()));
								::google::protobuf::internal::WireFormat::VerifyUTF8String(
									this->modality().data(), this->modality().length(),
									::google::protobuf::internal::WireFormat::PARSE);
						} else {
							goto handle_uninterpreted;
						}
						if (input->ExpectAtEnd()) return true;
						break;
							 }

					default: {
handle_uninterpreted:
						if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
							::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
								return true;
						}
						DO_(::google::protobuf::internal::WireFormat::SkipField(
							input, tag, mutable_unknown_fields()));
						break;
							 }
					}
				}
				return true;
#undef DO_
		}

		void RT_TPS_CornerText_MPR::SerializeWithCachedSizes(
			::google::protobuf::io::CodedOutputStream* output) const {
				// optional string planname = 1;
				if (has_planname()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->planname().data(), this->planname().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					::google::protobuf::internal::WireFormatLite::WriteString(
						1, this->planname(), output);
				}

				// optional string seriesname = 2;
				if (has_seriesname()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->seriesname().data(), this->seriesname().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					::google::protobuf::internal::WireFormatLite::WriteString(
						2, this->seriesname(), output);
				}

				// optional string seriesdatetime = 3;
				if (has_seriesdatetime()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->seriesdatetime().data(), this->seriesdatetime().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					::google::protobuf::internal::WireFormatLite::WriteString(
						3, this->seriesdatetime(), output);
				}

				// optional string patientposition = 4;
				if (has_patientposition()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->patientposition().data(), this->patientposition().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					::google::protobuf::internal::WireFormatLite::WriteString(
						4, this->patientposition(), output);
				}

				// optional double value = 5;
				if (has_value()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->value(), output);
				}

				// optional double density = 6;
				if (has_density()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->density(), output);
				}

				// optional double dosevalue = 7;
				if (has_dosevalue()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->dosevalue(), output);
				}

				// optional double pixelpositionx = 8;
				if (has_pixelpositionx()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pixelpositionx(), output);
				}

				// optional double pixelpositiony = 9;
				if (has_pixelpositiony()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pixelpositiony(), output);
				}

				// optional double pixelpositionz = 10;
				if (has_pixelpositionz()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pixelpositionz(), output);
				}

				// optional double windowwidth = 11;
				if (has_windowwidth()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->windowwidth(), output);
				}

				// optional double windowcenter = 12;
				if (has_windowcenter()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->windowcenter(), output);
				}

				// optional int32 slicenumber = 13;
				if (has_slicenumber()) {
					::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->slicenumber(), output);
				}

				// optional int32 startslicenumber = 14;
				if (has_startslicenumber()) {
					::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->startslicenumber(), output);
				}

				// optional double slicethickness = 15;
				if (has_slicethickness()) {
					::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->slicethickness(), output);
				}

				// optional bool isvaluevalid = 16;
				if (has_isvaluevalid()) {
					::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isvaluevalid(), output);
				}

				// optional string modality = 17;
				if (has_modality()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->modality().data(), this->modality().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					::google::protobuf::internal::WireFormatLite::WriteString(
						17, this->modality(), output);
				}

				if (!unknown_fields().empty()) {
					::google::protobuf::internal::WireFormat::SerializeUnknownFields(
						unknown_fields(), output);
				}
		}

		::google::protobuf::uint8* RT_TPS_CornerText_MPR::SerializeWithCachedSizesToArray(
			::google::protobuf::uint8* target) const {
				// optional string planname = 1;
				if (has_planname()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->planname().data(), this->planname().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					target =
						::google::protobuf::internal::WireFormatLite::WriteStringToArray(
						1, this->planname(), target);
				}

				// optional string seriesname = 2;
				if (has_seriesname()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->seriesname().data(), this->seriesname().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					target =
						::google::protobuf::internal::WireFormatLite::WriteStringToArray(
						2, this->seriesname(), target);
				}

				// optional string seriesdatetime = 3;
				if (has_seriesdatetime()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->seriesdatetime().data(), this->seriesdatetime().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					target =
						::google::protobuf::internal::WireFormatLite::WriteStringToArray(
						3, this->seriesdatetime(), target);
				}

				// optional string patientposition = 4;
				if (has_patientposition()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->patientposition().data(), this->patientposition().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					target =
						::google::protobuf::internal::WireFormatLite::WriteStringToArray(
						4, this->patientposition(), target);
				}

				// optional double value = 5;
				if (has_value()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->value(), target);
				}

				// optional double density = 6;
				if (has_density()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->density(), target);
				}

				// optional double dosevalue = 7;
				if (has_dosevalue()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->dosevalue(), target);
				}

				// optional double pixelpositionx = 8;
				if (has_pixelpositionx()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pixelpositionx(), target);
				}

				// optional double pixelpositiony = 9;
				if (has_pixelpositiony()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pixelpositiony(), target);
				}

				// optional double pixelpositionz = 10;
				if (has_pixelpositionz()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pixelpositionz(), target);
				}

				// optional double windowwidth = 11;
				if (has_windowwidth()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->windowwidth(), target);
				}

				// optional double windowcenter = 12;
				if (has_windowcenter()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->windowcenter(), target);
				}

				// optional int32 slicenumber = 13;
				if (has_slicenumber()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->slicenumber(), target);
				}

				// optional int32 startslicenumber = 14;
				if (has_startslicenumber()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->startslicenumber(), target);
				}

				// optional double slicethickness = 15;
				if (has_slicethickness()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->slicethickness(), target);
				}

				// optional bool isvaluevalid = 16;
				if (has_isvaluevalid()) {
					target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isvaluevalid(), target);
				}

				// optional string modality = 17;
				if (has_modality()) {
					::google::protobuf::internal::WireFormat::VerifyUTF8String(
						this->modality().data(), this->modality().length(),
						::google::protobuf::internal::WireFormat::SERIALIZE);
					target =
						::google::protobuf::internal::WireFormatLite::WriteStringToArray(
						17, this->modality(), target);
				}

				if (!unknown_fields().empty()) {
					target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
						unknown_fields(), target);
				}
				return target;
		}

		int RT_TPS_CornerText_MPR::ByteSize() const {
			int total_size = 0;

			if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
				// optional string planname = 1;
				if (has_planname()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::StringSize(
						this->planname());
				}

				// optional string seriesname = 2;
				if (has_seriesname()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::StringSize(
						this->seriesname());
				}

				// optional string seriesdatetime = 3;
				if (has_seriesdatetime()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::StringSize(
						this->seriesdatetime());
				}

				// optional string patientposition = 4;
				if (has_patientposition()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::StringSize(
						this->patientposition());
				}

				// optional double value = 5;
				if (has_value()) {
					total_size += 1 + 8;
				}

				// optional double density = 6;
				if (has_density()) {
					total_size += 1 + 8;
				}

				// optional double dosevalue = 7;
				if (has_dosevalue()) {
					total_size += 1 + 8;
				}

				// optional double pixelpositionx = 8;
				if (has_pixelpositionx()) {
					total_size += 1 + 8;
				}

			}
			if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
				// optional double pixelpositiony = 9;
				if (has_pixelpositiony()) {
					total_size += 1 + 8;
				}

				// optional double pixelpositionz = 10;
				if (has_pixelpositionz()) {
					total_size += 1 + 8;
				}

				// optional double windowwidth = 11;
				if (has_windowwidth()) {
					total_size += 1 + 8;
				}

				// optional double windowcenter = 12;
				if (has_windowcenter()) {
					total_size += 1 + 8;
				}

				// optional int32 slicenumber = 13;
				if (has_slicenumber()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::Int32Size(
						this->slicenumber());
				}

				// optional int32 startslicenumber = 14;
				if (has_startslicenumber()) {
					total_size += 1 +
						::google::protobuf::internal::WireFormatLite::Int32Size(
						this->startslicenumber());
				}

				// optional double slicethickness = 15;
				if (has_slicethickness()) {
					total_size += 1 + 8;
				}

				// optional bool isvaluevalid = 16;
				if (has_isvaluevalid()) {
					total_size += 2 + 1;
				}

			}
			if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
				// optional string modality = 17;
				if (has_modality()) {
					total_size += 2 +
						::google::protobuf::internal::WireFormatLite::StringSize(
						this->modality());
				}

			}
			if (!unknown_fields().empty()) {
				total_size +=
					::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
					unknown_fields());
			}
			GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
			_cached_size_ = total_size;
			GOOGLE_SAFE_CONCURRENT_WRITES_END();
			return total_size;
		}

		void RT_TPS_CornerText_MPR::MergeFrom(const ::google::protobuf::Message& from) {
			GOOGLE_CHECK_NE(&from, this);
			const RT_TPS_CornerText_MPR* source =
				::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CornerText_MPR*>(
				&from);
			if (source == NULL) {
				::google::protobuf::internal::ReflectionOps::Merge(from, this);
			} else {
				MergeFrom(*source);
			}
		}

		void RT_TPS_CornerText_MPR::MergeFrom(const RT_TPS_CornerText_MPR& from) {
			GOOGLE_CHECK_NE(&from, this);
			if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
				if (from.has_planname()) {
					set_planname(from.planname());
				}
				if (from.has_seriesname()) {
					set_seriesname(from.seriesname());
				}
				if (from.has_seriesdatetime()) {
					set_seriesdatetime(from.seriesdatetime());
				}
				if (from.has_patientposition()) {
					set_patientposition(from.patientposition());
				}
				if (from.has_value()) {
					set_value(from.value());
				}
				if (from.has_density()) {
					set_density(from.density());
				}
				if (from.has_dosevalue()) {
					set_dosevalue(from.dosevalue());
				}
				if (from.has_pixelpositionx()) {
					set_pixelpositionx(from.pixelpositionx());
				}
			}
			if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
				if (from.has_pixelpositiony()) {
					set_pixelpositiony(from.pixelpositiony());
				}
				if (from.has_pixelpositionz()) {
					set_pixelpositionz(from.pixelpositionz());
				}
				if (from.has_windowwidth()) {
					set_windowwidth(from.windowwidth());
				}
				if (from.has_windowcenter()) {
					set_windowcenter(from.windowcenter());
				}
				if (from.has_slicenumber()) {
					set_slicenumber(from.slicenumber());
				}
				if (from.has_startslicenumber()) {
					set_startslicenumber(from.startslicenumber());
				}
				if (from.has_slicethickness()) {
					set_slicethickness(from.slicethickness());
				}
				if (from.has_isvaluevalid()) {
					set_isvaluevalid(from.isvaluevalid());
				}
			}
			if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
				if (from.has_modality()) {
					set_modality(from.modality());
				}
			}
			mutable_unknown_fields()->MergeFrom(from.unknown_fields());
		}

		void RT_TPS_CornerText_MPR::CopyFrom(const ::google::protobuf::Message& from) {
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		void RT_TPS_CornerText_MPR::CopyFrom(const RT_TPS_CornerText_MPR& from) {
			if (&from == this) return;
			Clear();
			MergeFrom(from);
		}

		bool RT_TPS_CornerText_MPR::IsInitialized() const {

			return true;
		}

		void RT_TPS_CornerText_MPR::Swap(RT_TPS_CornerText_MPR* other) {
			if (other != this) {
				std::swap(planname_, other->planname_);
				std::swap(seriesname_, other->seriesname_);
				std::swap(seriesdatetime_, other->seriesdatetime_);
				std::swap(patientposition_, other->patientposition_);
				std::swap(value_, other->value_);
				std::swap(density_, other->density_);
				std::swap(dosevalue_, other->dosevalue_);
				std::swap(pixelpositionx_, other->pixelpositionx_);
				std::swap(pixelpositiony_, other->pixelpositiony_);
				std::swap(pixelpositionz_, other->pixelpositionz_);
				std::swap(windowwidth_, other->windowwidth_);
				std::swap(windowcenter_, other->windowcenter_);
				std::swap(slicenumber_, other->slicenumber_);
				std::swap(startslicenumber_, other->startslicenumber_);
				std::swap(slicethickness_, other->slicethickness_);
				std::swap(isvaluevalid_, other->isvaluevalid_);
				std::swap(modality_, other->modality_);
				std::swap(_has_bits_[0], other->_has_bits_[0]);
				_unknown_fields_.Swap(&other->_unknown_fields_);
				std::swap(_cached_size_, other->_cached_size_);
			}
		}

		::google::protobuf::Metadata RT_TPS_CornerText_MPR::GetMetadata() const {
			protobuf_AssignDescriptorsOnce();
			::google::protobuf::Metadata metadata;
			metadata.descriptor = RT_TPS_CornerText_MPR_descriptor_;
			metadata.reflection = RT_TPS_CornerText_MPR_reflection_;
			return metadata;
		}


		// @@protoc_insertion_point(namespace_scope)

	}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
