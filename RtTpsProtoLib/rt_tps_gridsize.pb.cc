// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_gridsize.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_GridSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_GridSize_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fgridsize_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_gridsize.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_GridSize_descriptor_ = file->message_type(0);
  static const int RT_TPS_GridSize_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, plan_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, is_show_gridboundary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, normgroup_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, startz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, sizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, sizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, sizez_),
  };
  RT_TPS_GridSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_GridSize_descriptor_,
      RT_TPS_GridSize::default_instance_,
      RT_TPS_GridSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_GridSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_GridSize));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fgridsize_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_GridSize_descriptor_, &RT_TPS_GridSize::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fgridsize_2eproto() {
  delete RT_TPS_GridSize::default_instance_;
  delete RT_TPS_GridSize_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rt_tps_gridsize.proto\022\ttps.proto\"\326\001\n\017R"
    "T_TPS_GridSize\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001"
    "z\030\003 \002(\002\022\020\n\010plan_uid\030\004 \002(\t\022\034\n\024is_show_gri"
    "dboundary\030\005 \001(\010\022\025\n\rnormgroup_uid\030\006 \001(\t\022\016"
    "\n\006startX\030\007 \001(\002\022\016\n\006startY\030\010 \001(\002\022\016\n\006startZ"
    "\030\t \001(\002\022\r\n\005sizeX\030\n \001(\002\022\r\n\005sizeY\030\013 \001(\002\022\r\n\005"
    "sizeZ\030\014 \001(\002", 251);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_gridsize.proto", &protobuf_RegisterTypes);
  RT_TPS_GridSize::default_instance_ = new RT_TPS_GridSize();
  RT_TPS_GridSize::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fgridsize_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fgridsize_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fgridsize_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fgridsize_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_GridSize::kXFieldNumber;
const int RT_TPS_GridSize::kYFieldNumber;
const int RT_TPS_GridSize::kZFieldNumber;
const int RT_TPS_GridSize::kPlanUidFieldNumber;
const int RT_TPS_GridSize::kIsShowGridboundaryFieldNumber;
const int RT_TPS_GridSize::kNormgroupUidFieldNumber;
const int RT_TPS_GridSize::kStartXFieldNumber;
const int RT_TPS_GridSize::kStartYFieldNumber;
const int RT_TPS_GridSize::kStartZFieldNumber;
const int RT_TPS_GridSize::kSizeXFieldNumber;
const int RT_TPS_GridSize::kSizeYFieldNumber;
const int RT_TPS_GridSize::kSizeZFieldNumber;
#endif  // !_MSC_VER

RT_TPS_GridSize::RT_TPS_GridSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_GridSize::InitAsDefaultInstance() {
}

RT_TPS_GridSize::RT_TPS_GridSize(const RT_TPS_GridSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_GridSize::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  plan_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_show_gridboundary_ = false;
  normgroup_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startx_ = 0;
  starty_ = 0;
  startz_ = 0;
  sizex_ = 0;
  sizey_ = 0;
  sizez_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_GridSize::~RT_TPS_GridSize() {
  SharedDtor();
}

void RT_TPS_GridSize::SharedDtor() {
  if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete plan_uid_;
  }
  if (normgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete normgroup_uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_GridSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_GridSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_GridSize_descriptor_;
}

const RT_TPS_GridSize& RT_TPS_GridSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto();  return *default_instance_;
}

RT_TPS_GridSize* RT_TPS_GridSize::default_instance_ = NULL;

RT_TPS_GridSize* RT_TPS_GridSize::New() const {
  return new RT_TPS_GridSize;
}

void RT_TPS_GridSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    if (has_plan_uid()) {
      if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
        plan_uid_->clear();
      }
    }
    is_show_gridboundary_ = false;
    if (has_normgroup_uid()) {
      if (normgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
        normgroup_uid_->clear();
      }
    }
    startx_ = 0;
    starty_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    startz_ = 0;
    sizex_ = 0;
    sizey_ = 0;
    sizez_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_GridSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plan_uid;
        break;
      }
      
      // required string plan_uid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plan_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plan_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plan_uid().data(), this->plan_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_show_gridboundary;
        break;
      }
      
      // optional bool is_show_gridboundary = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_show_gridboundary:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_show_gridboundary_)));
          set_has_is_show_gridboundary();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_normgroup_uid;
        break;
      }
      
      // optional string normgroup_uid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normgroup_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normgroup_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normgroup_uid().data(), this->normgroup_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_startX;
        break;
      }
      
      // optional float startX = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_startY;
        break;
      }
      
      // optional float startY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_startZ;
        break;
      }
      
      // optional float startZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startz_)));
          set_has_startz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_sizeX;
        break;
      }
      
      // optional float sizeX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizex_)));
          set_has_sizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_sizeY;
        break;
      }
      
      // optional float sizeY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizey_)));
          set_has_sizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_sizeZ;
        break;
      }
      
      // optional float sizeZ = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizez_)));
          set_has_sizez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_GridSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  // required string plan_uid = 4;
  if (has_plan_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan_uid().data(), this->plan_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->plan_uid(), output);
  }
  
  // optional bool is_show_gridboundary = 5;
  if (has_is_show_gridboundary()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_show_gridboundary(), output);
  }
  
  // optional string normgroup_uid = 6;
  if (has_normgroup_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normgroup_uid().data(), this->normgroup_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->normgroup_uid(), output);
  }
  
  // optional float startX = 7;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->startx(), output);
  }
  
  // optional float startY = 8;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->starty(), output);
  }
  
  // optional float startZ = 9;
  if (has_startz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->startz(), output);
  }
  
  // optional float sizeX = 10;
  if (has_sizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sizex(), output);
  }
  
  // optional float sizeY = 11;
  if (has_sizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sizey(), output);
  }
  
  // optional float sizeZ = 12;
  if (has_sizez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->sizez(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_GridSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  // required string plan_uid = 4;
  if (has_plan_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plan_uid().data(), this->plan_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->plan_uid(), target);
  }
  
  // optional bool is_show_gridboundary = 5;
  if (has_is_show_gridboundary()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_show_gridboundary(), target);
  }
  
  // optional string normgroup_uid = 6;
  if (has_normgroup_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normgroup_uid().data(), this->normgroup_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->normgroup_uid(), target);
  }
  
  // optional float startX = 7;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->startx(), target);
  }
  
  // optional float startY = 8;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->starty(), target);
  }
  
  // optional float startZ = 9;
  if (has_startz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->startz(), target);
  }
  
  // optional float sizeX = 10;
  if (has_sizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->sizex(), target);
  }
  
  // optional float sizeY = 11;
  if (has_sizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->sizey(), target);
  }
  
  // optional float sizeZ = 12;
  if (has_sizez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->sizez(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_GridSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
    // required string plan_uid = 4;
    if (has_plan_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plan_uid());
    }
    
    // optional bool is_show_gridboundary = 5;
    if (has_is_show_gridboundary()) {
      total_size += 1 + 1;
    }
    
    // optional string normgroup_uid = 6;
    if (has_normgroup_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normgroup_uid());
    }
    
    // optional float startX = 7;
    if (has_startx()) {
      total_size += 1 + 4;
    }
    
    // optional float startY = 8;
    if (has_starty()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float startZ = 9;
    if (has_startz()) {
      total_size += 1 + 4;
    }
    
    // optional float sizeX = 10;
    if (has_sizex()) {
      total_size += 1 + 4;
    }
    
    // optional float sizeY = 11;
    if (has_sizey()) {
      total_size += 1 + 4;
    }
    
    // optional float sizeZ = 12;
    if (has_sizez()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_GridSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_GridSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_GridSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_GridSize::MergeFrom(const RT_TPS_GridSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_plan_uid()) {
      set_plan_uid(from.plan_uid());
    }
    if (from.has_is_show_gridboundary()) {
      set_is_show_gridboundary(from.is_show_gridboundary());
    }
    if (from.has_normgroup_uid()) {
      set_normgroup_uid(from.normgroup_uid());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
    if (from.has_starty()) {
      set_starty(from.starty());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_startz()) {
      set_startz(from.startz());
    }
    if (from.has_sizex()) {
      set_sizex(from.sizex());
    }
    if (from.has_sizey()) {
      set_sizey(from.sizey());
    }
    if (from.has_sizez()) {
      set_sizez(from.sizez());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_GridSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_GridSize::CopyFrom(const RT_TPS_GridSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_GridSize::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void RT_TPS_GridSize::Swap(RT_TPS_GridSize* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(plan_uid_, other->plan_uid_);
    std::swap(is_show_gridboundary_, other->is_show_gridboundary_);
    std::swap(normgroup_uid_, other->normgroup_uid_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(startz_, other->startz_);
    std::swap(sizex_, other->sizex_);
    std::swap(sizey_, other->sizey_);
    std::swap(sizez_, other->sizez_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_GridSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_GridSize_descriptor_;
  metadata.reflection = RT_TPS_GridSize_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
