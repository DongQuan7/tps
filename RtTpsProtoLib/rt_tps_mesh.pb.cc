// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_mesh.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_POINT3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_POINT3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_VECTOR3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_VECTOR3D_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_TRIANGLEINDEX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_TRIANGLEINDEX_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_MESH_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_MESH_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_mesh.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_POINT3D_descriptor_ = file->message_type(0);
  static const int RT_TPS_POINT3D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, preserve_),
  };
  RT_TPS_POINT3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_POINT3D_descriptor_,
      RT_TPS_POINT3D::default_instance_,
      RT_TPS_POINT3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_POINT3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_POINT3D));
  RT_TPS_VECTOR3D_descriptor_ = file->message_type(1);
  static const int RT_TPS_VECTOR3D_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_VECTOR3D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_VECTOR3D, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_VECTOR3D, z_),
  };
  RT_TPS_VECTOR3D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_VECTOR3D_descriptor_,
      RT_TPS_VECTOR3D::default_instance_,
      RT_TPS_VECTOR3D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_VECTOR3D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_VECTOR3D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_VECTOR3D));
  RT_TPS_TRIANGLEINDEX_descriptor_ = file->message_type(2);
  static const int RT_TPS_TRIANGLEINDEX_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_TRIANGLEINDEX, index1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_TRIANGLEINDEX, index2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_TRIANGLEINDEX, index3_),
  };
  RT_TPS_TRIANGLEINDEX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_TRIANGLEINDEX_descriptor_,
      RT_TPS_TRIANGLEINDEX::default_instance_,
      RT_TPS_TRIANGLEINDEX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_TRIANGLEINDEX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_TRIANGLEINDEX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_TRIANGLEINDEX));
  RT_TPS_MESH_descriptor_ = file->message_type(3);
  static const int RT_TPS_MESH_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MESH, points_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MESH, normals_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MESH, triangleindices_),
  };
  RT_TPS_MESH_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_MESH_descriptor_,
      RT_TPS_MESH::default_instance_,
      RT_TPS_MESH_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MESH, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MESH, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_MESH));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_POINT3D_descriptor_, &RT_TPS_POINT3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_VECTOR3D_descriptor_, &RT_TPS_VECTOR3D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_TRIANGLEINDEX_descriptor_, &RT_TPS_TRIANGLEINDEX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_MESH_descriptor_, &RT_TPS_MESH::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto() {
  delete RT_TPS_POINT3D::default_instance_;
  delete RT_TPS_POINT3D_reflection_;
  delete RT_TPS_VECTOR3D::default_instance_;
  delete RT_TPS_VECTOR3D_reflection_;
  delete RT_TPS_TRIANGLEINDEX::default_instance_;
  delete RT_TPS_TRIANGLEINDEX_reflection_;
  delete RT_TPS_MESH::default_instance_;
  delete RT_TPS_MESH_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fmesh_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021rt_tps_mesh.proto\022\ttps.proto\"C\n\016RT_TPS"
    "_POINT3D\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \002("
    "\001\022\020\n\010preserve\030\004 \001(\001\"2\n\017RT_TPS_VECTOR3D\022\t"
    "\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001z\030\003 \001(\001\"F\n\024RT_TP"
    "S_TRIANGLEINDEX\022\016\n\006index1\030\001 \001(\005\022\016\n\006index"
    "2\030\002 \001(\005\022\016\n\006index3\030\003 \001(\005\"\237\001\n\013RT_TPS_MESH\022"
    ")\n\006points\030\001 \003(\0132\031.tps.proto.RT_TPS_POINT"
    "3D\022+\n\007normals\030\002 \003(\0132\032.tps.proto.RT_TPS_V"
    "ECTOR3D\0228\n\017triangleIndices\030\003 \003(\0132\037.tps.p"
    "roto.RT_TPS_TRIANGLEINDEX", 385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_mesh.proto", &protobuf_RegisterTypes);
  RT_TPS_POINT3D::default_instance_ = new RT_TPS_POINT3D();
  RT_TPS_VECTOR3D::default_instance_ = new RT_TPS_VECTOR3D();
  RT_TPS_TRIANGLEINDEX::default_instance_ = new RT_TPS_TRIANGLEINDEX();
  RT_TPS_MESH::default_instance_ = new RT_TPS_MESH();
  RT_TPS_POINT3D::default_instance_->InitAsDefaultInstance();
  RT_TPS_VECTOR3D::default_instance_->InitAsDefaultInstance();
  RT_TPS_TRIANGLEINDEX::default_instance_->InitAsDefaultInstance();
  RT_TPS_MESH::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fmesh_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fmesh_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fmesh_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_POINT3D::kXFieldNumber;
const int RT_TPS_POINT3D::kYFieldNumber;
const int RT_TPS_POINT3D::kZFieldNumber;
const int RT_TPS_POINT3D::kPreserveFieldNumber;
#endif  // !_MSC_VER

RT_TPS_POINT3D::RT_TPS_POINT3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_POINT3D::InitAsDefaultInstance() {
}

RT_TPS_POINT3D::RT_TPS_POINT3D(const RT_TPS_POINT3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_POINT3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  preserve_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_POINT3D::~RT_TPS_POINT3D() {
  SharedDtor();
}

void RT_TPS_POINT3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_POINT3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_POINT3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_POINT3D_descriptor_;
}

const RT_TPS_POINT3D& RT_TPS_POINT3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();  return *default_instance_;
}

RT_TPS_POINT3D* RT_TPS_POINT3D::default_instance_ = NULL;

RT_TPS_POINT3D* RT_TPS_POINT3D::New() const {
  return new RT_TPS_POINT3D;
}

void RT_TPS_POINT3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    preserve_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_POINT3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // required double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_preserve;
        break;
      }
      
      // optional double preserve = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_preserve:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &preserve_)));
          set_has_preserve();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_POINT3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // optional double preserve = 4;
  if (has_preserve()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->preserve(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_POINT3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  // optional double preserve = 4;
  if (has_preserve()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->preserve(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_POINT3D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // optional double preserve = 4;
    if (has_preserve()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_POINT3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_POINT3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_POINT3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_POINT3D::MergeFrom(const RT_TPS_POINT3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_preserve()) {
      set_preserve(from.preserve());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_POINT3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_POINT3D::CopyFrom(const RT_TPS_POINT3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_POINT3D::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RT_TPS_POINT3D::Swap(RT_TPS_POINT3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(preserve_, other->preserve_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_POINT3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_POINT3D_descriptor_;
  metadata.reflection = RT_TPS_POINT3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_VECTOR3D::kXFieldNumber;
const int RT_TPS_VECTOR3D::kYFieldNumber;
const int RT_TPS_VECTOR3D::kZFieldNumber;
#endif  // !_MSC_VER

RT_TPS_VECTOR3D::RT_TPS_VECTOR3D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_VECTOR3D::InitAsDefaultInstance() {
}

RT_TPS_VECTOR3D::RT_TPS_VECTOR3D(const RT_TPS_VECTOR3D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_VECTOR3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_VECTOR3D::~RT_TPS_VECTOR3D() {
  SharedDtor();
}

void RT_TPS_VECTOR3D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_VECTOR3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_VECTOR3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_VECTOR3D_descriptor_;
}

const RT_TPS_VECTOR3D& RT_TPS_VECTOR3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();  return *default_instance_;
}

RT_TPS_VECTOR3D* RT_TPS_VECTOR3D::default_instance_ = NULL;

RT_TPS_VECTOR3D* RT_TPS_VECTOR3D::New() const {
  return new RT_TPS_VECTOR3D;
}

void RT_TPS_VECTOR3D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_VECTOR3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // optional double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_VECTOR3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // optional double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_VECTOR3D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // optional double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_VECTOR3D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_VECTOR3D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_VECTOR3D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_VECTOR3D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_VECTOR3D::MergeFrom(const RT_TPS_VECTOR3D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_VECTOR3D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_VECTOR3D::CopyFrom(const RT_TPS_VECTOR3D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_VECTOR3D::IsInitialized() const {
  
  return true;
}

void RT_TPS_VECTOR3D::Swap(RT_TPS_VECTOR3D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_VECTOR3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_VECTOR3D_descriptor_;
  metadata.reflection = RT_TPS_VECTOR3D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_TRIANGLEINDEX::kIndex1FieldNumber;
const int RT_TPS_TRIANGLEINDEX::kIndex2FieldNumber;
const int RT_TPS_TRIANGLEINDEX::kIndex3FieldNumber;
#endif  // !_MSC_VER

RT_TPS_TRIANGLEINDEX::RT_TPS_TRIANGLEINDEX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_TRIANGLEINDEX::InitAsDefaultInstance() {
}

RT_TPS_TRIANGLEINDEX::RT_TPS_TRIANGLEINDEX(const RT_TPS_TRIANGLEINDEX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_TRIANGLEINDEX::SharedCtor() {
  _cached_size_ = 0;
  index1_ = 0;
  index2_ = 0;
  index3_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_TRIANGLEINDEX::~RT_TPS_TRIANGLEINDEX() {
  SharedDtor();
}

void RT_TPS_TRIANGLEINDEX::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_TRIANGLEINDEX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_TRIANGLEINDEX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_TRIANGLEINDEX_descriptor_;
}

const RT_TPS_TRIANGLEINDEX& RT_TPS_TRIANGLEINDEX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();  return *default_instance_;
}

RT_TPS_TRIANGLEINDEX* RT_TPS_TRIANGLEINDEX::default_instance_ = NULL;

RT_TPS_TRIANGLEINDEX* RT_TPS_TRIANGLEINDEX::New() const {
  return new RT_TPS_TRIANGLEINDEX;
}

void RT_TPS_TRIANGLEINDEX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index1_ = 0;
    index2_ = 0;
    index3_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_TRIANGLEINDEX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index1_)));
          set_has_index1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index2;
        break;
      }
      
      // optional int32 index2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index2_)));
          set_has_index2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index3;
        break;
      }
      
      // optional int32 index3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index3_)));
          set_has_index3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_TRIANGLEINDEX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index1 = 1;
  if (has_index1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index1(), output);
  }
  
  // optional int32 index2 = 2;
  if (has_index2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index2(), output);
  }
  
  // optional int32 index3 = 3;
  if (has_index3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index3(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_TRIANGLEINDEX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index1 = 1;
  if (has_index1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index1(), target);
  }
  
  // optional int32 index2 = 2;
  if (has_index2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index2(), target);
  }
  
  // optional int32 index3 = 3;
  if (has_index3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index3(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_TRIANGLEINDEX::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index1 = 1;
    if (has_index1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index1());
    }
    
    // optional int32 index2 = 2;
    if (has_index2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index2());
    }
    
    // optional int32 index3 = 3;
    if (has_index3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index3());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_TRIANGLEINDEX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_TRIANGLEINDEX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_TRIANGLEINDEX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_TRIANGLEINDEX::MergeFrom(const RT_TPS_TRIANGLEINDEX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index1()) {
      set_index1(from.index1());
    }
    if (from.has_index2()) {
      set_index2(from.index2());
    }
    if (from.has_index3()) {
      set_index3(from.index3());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_TRIANGLEINDEX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_TRIANGLEINDEX::CopyFrom(const RT_TPS_TRIANGLEINDEX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_TRIANGLEINDEX::IsInitialized() const {
  
  return true;
}

void RT_TPS_TRIANGLEINDEX::Swap(RT_TPS_TRIANGLEINDEX* other) {
  if (other != this) {
    std::swap(index1_, other->index1_);
    std::swap(index2_, other->index2_);
    std::swap(index3_, other->index3_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_TRIANGLEINDEX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_TRIANGLEINDEX_descriptor_;
  metadata.reflection = RT_TPS_TRIANGLEINDEX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_MESH::kPointsFieldNumber;
const int RT_TPS_MESH::kNormalsFieldNumber;
const int RT_TPS_MESH::kTriangleIndicesFieldNumber;
#endif  // !_MSC_VER

RT_TPS_MESH::RT_TPS_MESH()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_MESH::InitAsDefaultInstance() {
}

RT_TPS_MESH::RT_TPS_MESH(const RT_TPS_MESH& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_MESH::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_MESH::~RT_TPS_MESH() {
  SharedDtor();
}

void RT_TPS_MESH::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_MESH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_MESH::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MESH_descriptor_;
}

const RT_TPS_MESH& RT_TPS_MESH::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();  return *default_instance_;
}

RT_TPS_MESH* RT_TPS_MESH::default_instance_ = NULL;

RT_TPS_MESH* RT_TPS_MESH::New() const {
  return new RT_TPS_MESH;
}

void RT_TPS_MESH::Clear() {
  points_.Clear();
  normals_.Clear();
  triangleindices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_MESH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_POINT3D points = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_points;
        if (input->ExpectTag(18)) goto parse_normals;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normals;
        if (input->ExpectTag(26)) goto parse_triangleIndices;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_triangleIndices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_triangleindices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_triangleIndices;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_MESH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_POINT3D points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->points(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
  for (int i = 0; i < this->normals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->normals(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
  for (int i = 0; i < this->triangleindices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->triangleindices(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_MESH::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_POINT3D points = 1;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->points(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
  for (int i = 0; i < this->normals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->normals(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
  for (int i = 0; i < this->triangleindices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->triangleindices(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_MESH::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_POINT3D points = 1;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }
  
  // repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
  total_size += 1 * this->normals_size();
  for (int i = 0; i < this->normals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normals(i));
  }
  
  // repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
  total_size += 1 * this->triangleindices_size();
  for (int i = 0; i < this->triangleindices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->triangleindices(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_MESH::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_MESH* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_MESH*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_MESH::MergeFrom(const RT_TPS_MESH& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  normals_.MergeFrom(from.normals_);
  triangleindices_.MergeFrom(from.triangleindices_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_MESH::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_MESH::CopyFrom(const RT_TPS_MESH& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_MESH::IsInitialized() const {
  
  for (int i = 0; i < points_size(); i++) {
    if (!this->points(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_MESH::Swap(RT_TPS_MESH* other) {
  if (other != this) {
    points_.Swap(&other->points_);
    normals_.Swap(&other->normals_);
    triangleindices_.Swap(&other->triangleindices_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_MESH::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_MESH_descriptor_;
  metadata.reflection = RT_TPS_MESH_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
