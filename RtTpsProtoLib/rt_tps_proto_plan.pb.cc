// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPlan_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedPlan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fplan_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fplan_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_plan.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoPlan_descriptor_ = file->message_type(0);
  static const int RtTpsProtoPlan_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, planname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, bodythickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, phantomuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, planner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, plansourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, rtimageuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridspacingy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridspacingz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridstartx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridstarty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridstartz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, courseuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, normalizationgrouplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, poilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, isapproved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridspacingx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, specifieddose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, rendermode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, transparency3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, enableskindoseview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, maxskindose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, displaymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, hundredpercentdefinition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridsizez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, maxdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, isignoreupdatemaxdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, doselinelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, dosegridsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, isdosevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, patientposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, plandescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, setuppoiuid_),
  };
  RtTpsProtoPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPlan_descriptor_,
      RtTpsProtoPlan::default_instance_,
      RtTpsProtoPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPlan));
  RtTpsProtoRepeatedPlan_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedPlan_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPlan, planlist_),
  };
  RtTpsProtoRepeatedPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedPlan_descriptor_,
      RtTpsProtoRepeatedPlan::default_instance_,
      RtTpsProtoRepeatedPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedPlan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fplan_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPlan_descriptor_, &RtTpsProtoPlan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedPlan_descriptor_, &RtTpsProtoRepeatedPlan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fplan_2eproto() {
  delete RtTpsProtoPlan::default_instance_;
  delete RtTpsProtoPlan_reflection_;
  delete RtTpsProtoRepeatedPlan::default_instance_;
  delete RtTpsProtoRepeatedPlan_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fplan_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rt_tps_proto_plan.proto\022\ttps.proto\032%rt"
    "_tps_proto_normalizationgroup.proto\032\026rt_"
    "tps_proto_poi.proto\032\"rt_tps_proto_doseli"
    "nesetting.proto\032\033rt_tps_proto_doseline.p"
    "roto\"\246\007\n\016RtTpsProtoPlan\022\017\n\007planUID\030\001 \002(\t"
    "\022\020\n\010planName\030\002 \001(\t\022\025\n\rbodyThickness\030\003 \001("
    "\002\022\022\n\nphantomUID\030\004 \001(\t\022\017\n\007planner\030\005 \001(\t\022\026"
    "\n\016planSourceType\030\006 \001(\005\022\022\n\nrtImageUID\030\007 \001"
    "(\t\022\030\n\020doseGridSpacingY\030\010 \001(\002\022\030\n\020doseGrid"
    "SpacingZ\030\t \001(\002\022\026\n\016doseGridStartX\030\n \001(\002\022\026"
    "\n\016doseGridStartY\030\013 \001(\002\022\026\n\016doseGridStartZ"
    "\030\014 \001(\002\022\021\n\tcourseUID\030\r \001(\t\022\021\n\tseriesUID\030\016"
    " \001(\t\022G\n\026normalizationGroupList\030\017 \003(\0132\'.t"
    "ps.proto.RtTpsProtoNormalizationGroup\022)\n"
    "\007poiList\030\020 \003(\0132\030.tps.proto.RtTpsProtoPoi"
    "\022\022\n\nisApproved\030\021 \001(\005\022\030\n\020doseGridSpacingX"
    "\030\022 \001(\002\022\025\n\rspecifiedDose\030\023 \001(\002\022\022\n\nrenderM"
    "ode\030\024 \001(\005\022\024\n\014transparency\030\025 \001(\002\022\026\n\016trans"
    "parency3D\030\026 \001(\002\022\032\n\022enableSkinDoseView\030\027 "
    "\001(\010\022\023\n\013maxSkinDose\030\030 \001(\002\022\023\n\013displayMode\030"
    "\031 \001(\005\022 \n\030hundredPercentDefinition\030\032 \001(\005\022"
    "\025\n\rdoseGridSizeZ\030\033 \001(\002\022\017\n\007maxDose\030\034 \001(\002\022"
    "\035\n\025isIgnoreUpdateMaxDose\030\035 \001(\010\0223\n\014doseLi"
    "neList\030\036 \003(\0132\035.tps.proto.RtTpsProtoDoseL"
    "ine\022\025\n\rdoseGridSizeX\030\037 \001(\002\022\025\n\rdoseGridSi"
    "zeY\030  \001(\002\022\023\n\013isDoseValid\030! \001(\010\022\027\n\017patien"
    "tPosition\030\" \001(\t\022\027\n\017planDescription\030# \001(\t"
    "\022\023\n\013setupPoiUid\030$ \001(\t\"E\n\026RtTpsProtoRepea"
    "tedPlan\022+\n\010planList\030\001 \003(\0132\031.tps.proto.Rt"
    "TpsProtoPlan", 1172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_plan.proto", &protobuf_RegisterTypes);
  RtTpsProtoPlan::default_instance_ = new RtTpsProtoPlan();
  RtTpsProtoRepeatedPlan::default_instance_ = new RtTpsProtoRepeatedPlan();
  RtTpsProtoPlan::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedPlan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fplan_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fplan_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fplan_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fplan_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fplan_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPlan::kPlanUIDFieldNumber;
const int RtTpsProtoPlan::kPlanNameFieldNumber;
const int RtTpsProtoPlan::kBodyThicknessFieldNumber;
const int RtTpsProtoPlan::kPhantomUIDFieldNumber;
const int RtTpsProtoPlan::kPlannerFieldNumber;
const int RtTpsProtoPlan::kPlanSourceTypeFieldNumber;
const int RtTpsProtoPlan::kRtImageUIDFieldNumber;
const int RtTpsProtoPlan::kDoseGridSpacingYFieldNumber;
const int RtTpsProtoPlan::kDoseGridSpacingZFieldNumber;
const int RtTpsProtoPlan::kDoseGridStartXFieldNumber;
const int RtTpsProtoPlan::kDoseGridStartYFieldNumber;
const int RtTpsProtoPlan::kDoseGridStartZFieldNumber;
const int RtTpsProtoPlan::kCourseUIDFieldNumber;
const int RtTpsProtoPlan::kSeriesUIDFieldNumber;
const int RtTpsProtoPlan::kNormalizationGroupListFieldNumber;
const int RtTpsProtoPlan::kPoiListFieldNumber;
const int RtTpsProtoPlan::kIsApprovedFieldNumber;
const int RtTpsProtoPlan::kDoseGridSpacingXFieldNumber;
const int RtTpsProtoPlan::kSpecifiedDoseFieldNumber;
const int RtTpsProtoPlan::kRenderModeFieldNumber;
const int RtTpsProtoPlan::kTransparencyFieldNumber;
const int RtTpsProtoPlan::kTransparency3DFieldNumber;
const int RtTpsProtoPlan::kEnableSkinDoseViewFieldNumber;
const int RtTpsProtoPlan::kMaxSkinDoseFieldNumber;
const int RtTpsProtoPlan::kDisplayModeFieldNumber;
const int RtTpsProtoPlan::kHundredPercentDefinitionFieldNumber;
const int RtTpsProtoPlan::kDoseGridSizeZFieldNumber;
const int RtTpsProtoPlan::kMaxDoseFieldNumber;
const int RtTpsProtoPlan::kIsIgnoreUpdateMaxDoseFieldNumber;
const int RtTpsProtoPlan::kDoseLineListFieldNumber;
const int RtTpsProtoPlan::kDoseGridSizeXFieldNumber;
const int RtTpsProtoPlan::kDoseGridSizeYFieldNumber;
const int RtTpsProtoPlan::kIsDoseValidFieldNumber;
const int RtTpsProtoPlan::kPatientPositionFieldNumber;
const int RtTpsProtoPlan::kPlanDescriptionFieldNumber;
const int RtTpsProtoPlan::kSetupPoiUidFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPlan::RtTpsProtoPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPlan::InitAsDefaultInstance() {
}

RtTpsProtoPlan::RtTpsProtoPlan(const RtTpsProtoPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPlan::SharedCtor() {
  _cached_size_ = 0;
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bodythickness_ = 0;
  phantomuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planner_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plansourcetype_ = 0;
  rtimageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dosegridspacingy_ = 0;
  dosegridspacingz_ = 0;
  dosegridstartx_ = 0;
  dosegridstarty_ = 0;
  dosegridstartz_ = 0;
  courseuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isapproved_ = 0;
  dosegridspacingx_ = 0;
  specifieddose_ = 0;
  rendermode_ = 0;
  transparency_ = 0;
  transparency3d_ = 0;
  enableskindoseview_ = false;
  maxskindose_ = 0;
  displaymode_ = 0;
  hundredpercentdefinition_ = 0;
  dosegridsizez_ = 0;
  maxdose_ = 0;
  isignoreupdatemaxdose_ = false;
  dosegridsizex_ = 0;
  dosegridsizey_ = 0;
  isdosevalid_ = false;
  patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  plandescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  setuppoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPlan::~RtTpsProtoPlan() {
  SharedDtor();
}

void RtTpsProtoPlan::SharedDtor() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (planname_ != &::google::protobuf::internal::kEmptyString) {
    delete planname_;
  }
  if (phantomuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phantomuid_;
  }
  if (planner_ != &::google::protobuf::internal::kEmptyString) {
    delete planner_;
  }
  if (rtimageuid_ != &::google::protobuf::internal::kEmptyString) {
    delete rtimageuid_;
  }
  if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    delete patientposition_;
  }
  if (plandescription_ != &::google::protobuf::internal::kEmptyString) {
    delete plandescription_;
  }
  if (setuppoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete setuppoiuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPlan_descriptor_;
}

const RtTpsProtoPlan& RtTpsProtoPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fplan_2eproto();  return *default_instance_;
}

RtTpsProtoPlan* RtTpsProtoPlan::default_instance_ = NULL;

RtTpsProtoPlan* RtTpsProtoPlan::New() const {
  return new RtTpsProtoPlan;
}

void RtTpsProtoPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
    if (has_planname()) {
      if (planname_ != &::google::protobuf::internal::kEmptyString) {
        planname_->clear();
      }
    }
    bodythickness_ = 0;
    if (has_phantomuid()) {
      if (phantomuid_ != &::google::protobuf::internal::kEmptyString) {
        phantomuid_->clear();
      }
    }
    if (has_planner()) {
      if (planner_ != &::google::protobuf::internal::kEmptyString) {
        planner_->clear();
      }
    }
    plansourcetype_ = 0;
    if (has_rtimageuid()) {
      if (rtimageuid_ != &::google::protobuf::internal::kEmptyString) {
        rtimageuid_->clear();
      }
    }
    dosegridspacingy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    dosegridspacingz_ = 0;
    dosegridstartx_ = 0;
    dosegridstarty_ = 0;
    dosegridstartz_ = 0;
    if (has_courseuid()) {
      if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
        courseuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isapproved_ = 0;
    dosegridspacingx_ = 0;
    specifieddose_ = 0;
    rendermode_ = 0;
    transparency_ = 0;
    transparency3d_ = 0;
    enableskindoseview_ = false;
    maxskindose_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    displaymode_ = 0;
    hundredpercentdefinition_ = 0;
    dosegridsizez_ = 0;
    maxdose_ = 0;
    isignoreupdatemaxdose_ = false;
    dosegridsizex_ = 0;
    dosegridsizey_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    isdosevalid_ = false;
    if (has_patientposition()) {
      if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
        patientposition_->clear();
      }
    }
    if (has_plandescription()) {
      if (plandescription_ != &::google::protobuf::internal::kEmptyString) {
        plandescription_->clear();
      }
    }
    if (has_setuppoiuid()) {
      if (setuppoiuid_ != &::google::protobuf::internal::kEmptyString) {
        setuppoiuid_->clear();
      }
    }
  }
  normalizationgrouplist_.Clear();
  poilist_.Clear();
  doselinelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string planUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_planName;
        break;
      }
      
      // optional string planName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planname().data(), this->planname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_bodyThickness;
        break;
      }
      
      // optional float bodyThickness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bodyThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bodythickness_)));
          set_has_bodythickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_phantomUID;
        break;
      }
      
      // optional string phantomUID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phantomUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phantomuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phantomuid().data(), this->phantomuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_planner;
        break;
      }
      
      // optional string planner = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planner:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planner()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planner().data(), this->planner().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_planSourceType;
        break;
      }
      
      // optional int32 planSourceType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planSourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plansourcetype_)));
          set_has_plansourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_rtImageUID;
        break;
      }
      
      // optional string rtImageUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtImageUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rtimageuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rtimageuid().data(), this->rtimageuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_doseGridSpacingY;
        break;
      }
      
      // optional float doseGridSpacingY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSpacingY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridspacingy_)));
          set_has_dosegridspacingy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_doseGridSpacingZ;
        break;
      }
      
      // optional float doseGridSpacingZ = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSpacingZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridspacingz_)));
          set_has_dosegridspacingz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_doseGridStartX;
        break;
      }
      
      // optional float doseGridStartX = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridStartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridstartx_)));
          set_has_dosegridstartx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_doseGridStartY;
        break;
      }
      
      // optional float doseGridStartY = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridStartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridstarty_)));
          set_has_dosegridstarty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_doseGridStartZ;
        break;
      }
      
      // optional float doseGridStartZ = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridStartZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridstartz_)));
          set_has_dosegridstartz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_courseUID;
        break;
      }
      
      // optional string courseUID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courseUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseuid().data(), this->courseuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_seriesUID;
        break;
      }
      
      // optional string seriesUID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_normalizationGroupList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizationGroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalizationgrouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_normalizationGroupList;
        if (input->ExpectTag(130)) goto parse_poiList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoPoi poiList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_poiList;
        if (input->ExpectTag(136)) goto parse_isApproved;
        break;
      }
      
      // optional int32 isApproved = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApproved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isapproved_)));
          set_has_isapproved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_doseGridSpacingX;
        break;
      }
      
      // optional float doseGridSpacingX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSpacingX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridspacingx_)));
          set_has_dosegridspacingx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_specifiedDose;
        break;
      }
      
      // optional float specifiedDose = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_specifiedDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &specifieddose_)));
          set_has_specifieddose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_renderMode;
        break;
      }
      
      // optional int32 renderMode = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renderMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rendermode_)));
          set_has_rendermode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_transparency;
        break;
      }
      
      // optional float transparency = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_transparency3D;
        break;
      }
      
      // optional float transparency3D = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transparency3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency3d_)));
          set_has_transparency3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_enableSkinDoseView;
        break;
      }
      
      // optional bool enableSkinDoseView = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableSkinDoseView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableskindoseview_)));
          set_has_enableskindoseview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_maxSkinDose;
        break;
      }
      
      // optional float maxSkinDose = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxSkinDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxskindose_)));
          set_has_maxskindose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_displayMode;
        break;
      }
      
      // optional int32 displayMode = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displaymode_)));
          set_has_displaymode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_hundredPercentDefinition;
        break;
      }
      
      // optional int32 hundredPercentDefinition = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hundredPercentDefinition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hundredpercentdefinition_)));
          set_has_hundredpercentdefinition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_doseGridSizeZ;
        break;
      }
      
      // optional float doseGridSizeZ = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSizeZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridsizez_)));
          set_has_dosegridsizez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_maxDose;
        break;
      }
      
      // optional float maxDose = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdose_)));
          set_has_maxdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_isIgnoreUpdateMaxDose;
        break;
      }
      
      // optional bool isIgnoreUpdateMaxDose = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isIgnoreUpdateMaxDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isignoreupdatemaxdose_)));
          set_has_isignoreupdatemaxdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_doseLineList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doseLineList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doselinelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_doseLineList;
        if (input->ExpectTag(253)) goto parse_doseGridSizeX;
        break;
      }
      
      // optional float doseGridSizeX = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridsizex_)));
          set_has_dosegridsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_doseGridSizeY;
        break;
      }
      
      // optional float doseGridSizeY = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseGridSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dosegridsizey_)));
          set_has_dosegridsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_isDoseValid;
        break;
      }
      
      // optional bool isDoseValid = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDoseValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdosevalid_)));
          set_has_isdosevalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_patientPosition;
        break;
      }
      
      // optional string patientPosition = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientposition().data(), this->patientposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_planDescription;
        break;
      }
      
      // optional string planDescription = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_plandescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->plandescription().data(), this->plandescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_setupPoiUid;
        break;
      }
      
      // optional string setupPoiUid = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_setupPoiUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_setuppoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->setuppoiuid().data(), this->setuppoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string planUID = 1;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->planuid(), output);
  }
  
  // optional string planName = 2;
  if (has_planname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planname().data(), this->planname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->planname(), output);
  }
  
  // optional float bodyThickness = 3;
  if (has_bodythickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bodythickness(), output);
  }
  
  // optional string phantomUID = 4;
  if (has_phantomuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phantomuid().data(), this->phantomuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->phantomuid(), output);
  }
  
  // optional string planner = 5;
  if (has_planner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planner().data(), this->planner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->planner(), output);
  }
  
  // optional int32 planSourceType = 6;
  if (has_plansourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->plansourcetype(), output);
  }
  
  // optional string rtImageUID = 7;
  if (has_rtimageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rtimageuid().data(), this->rtimageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->rtimageuid(), output);
  }
  
  // optional float doseGridSpacingY = 8;
  if (has_dosegridspacingy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->dosegridspacingy(), output);
  }
  
  // optional float doseGridSpacingZ = 9;
  if (has_dosegridspacingz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->dosegridspacingz(), output);
  }
  
  // optional float doseGridStartX = 10;
  if (has_dosegridstartx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dosegridstartx(), output);
  }
  
  // optional float doseGridStartY = 11;
  if (has_dosegridstarty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->dosegridstarty(), output);
  }
  
  // optional float doseGridStartZ = 12;
  if (has_dosegridstartz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->dosegridstartz(), output);
  }
  
  // optional string courseUID = 13;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->courseuid(), output);
  }
  
  // optional string seriesUID = 14;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->seriesuid(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 15;
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->normalizationgrouplist(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 16;
  for (int i = 0; i < this->poilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->poilist(i), output);
  }
  
  // optional int32 isApproved = 17;
  if (has_isapproved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->isapproved(), output);
  }
  
  // optional float doseGridSpacingX = 18;
  if (has_dosegridspacingx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dosegridspacingx(), output);
  }
  
  // optional float specifiedDose = 19;
  if (has_specifieddose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->specifieddose(), output);
  }
  
  // optional int32 renderMode = 20;
  if (has_rendermode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->rendermode(), output);
  }
  
  // optional float transparency = 21;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->transparency(), output);
  }
  
  // optional float transparency3D = 22;
  if (has_transparency3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->transparency3d(), output);
  }
  
  // optional bool enableSkinDoseView = 23;
  if (has_enableskindoseview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->enableskindoseview(), output);
  }
  
  // optional float maxSkinDose = 24;
  if (has_maxskindose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->maxskindose(), output);
  }
  
  // optional int32 displayMode = 25;
  if (has_displaymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->displaymode(), output);
  }
  
  // optional int32 hundredPercentDefinition = 26;
  if (has_hundredpercentdefinition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->hundredpercentdefinition(), output);
  }
  
  // optional float doseGridSizeZ = 27;
  if (has_dosegridsizez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->dosegridsizez(), output);
  }
  
  // optional float maxDose = 28;
  if (has_maxdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->maxdose(), output);
  }
  
  // optional bool isIgnoreUpdateMaxDose = 29;
  if (has_isignoreupdatemaxdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(29, this->isignoreupdatemaxdose(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 30;
  for (int i = 0; i < this->doselinelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->doselinelist(i), output);
  }
  
  // optional float doseGridSizeX = 31;
  if (has_dosegridsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->dosegridsizex(), output);
  }
  
  // optional float doseGridSizeY = 32;
  if (has_dosegridsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->dosegridsizey(), output);
  }
  
  // optional bool isDoseValid = 33;
  if (has_isdosevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->isdosevalid(), output);
  }
  
  // optional string patientPosition = 34;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->patientposition(), output);
  }
  
  // optional string planDescription = 35;
  if (has_plandescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plandescription().data(), this->plandescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->plandescription(), output);
  }
  
  // optional string setupPoiUid = 36;
  if (has_setuppoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->setuppoiuid().data(), this->setuppoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->setuppoiuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string planUID = 1;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->planuid(), target);
  }
  
  // optional string planName = 2;
  if (has_planname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planname().data(), this->planname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planname(), target);
  }
  
  // optional float bodyThickness = 3;
  if (has_bodythickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bodythickness(), target);
  }
  
  // optional string phantomUID = 4;
  if (has_phantomuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phantomuid().data(), this->phantomuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->phantomuid(), target);
  }
  
  // optional string planner = 5;
  if (has_planner()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planner().data(), this->planner().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->planner(), target);
  }
  
  // optional int32 planSourceType = 6;
  if (has_plansourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->plansourcetype(), target);
  }
  
  // optional string rtImageUID = 7;
  if (has_rtimageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rtimageuid().data(), this->rtimageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->rtimageuid(), target);
  }
  
  // optional float doseGridSpacingY = 8;
  if (has_dosegridspacingy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->dosegridspacingy(), target);
  }
  
  // optional float doseGridSpacingZ = 9;
  if (has_dosegridspacingz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->dosegridspacingz(), target);
  }
  
  // optional float doseGridStartX = 10;
  if (has_dosegridstartx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dosegridstartx(), target);
  }
  
  // optional float doseGridStartY = 11;
  if (has_dosegridstarty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->dosegridstarty(), target);
  }
  
  // optional float doseGridStartZ = 12;
  if (has_dosegridstartz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->dosegridstartz(), target);
  }
  
  // optional string courseUID = 13;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->courseuid(), target);
  }
  
  // optional string seriesUID = 14;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->seriesuid(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 15;
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->normalizationgrouplist(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 16;
  for (int i = 0; i < this->poilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->poilist(i), target);
  }
  
  // optional int32 isApproved = 17;
  if (has_isapproved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->isapproved(), target);
  }
  
  // optional float doseGridSpacingX = 18;
  if (has_dosegridspacingx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->dosegridspacingx(), target);
  }
  
  // optional float specifiedDose = 19;
  if (has_specifieddose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->specifieddose(), target);
  }
  
  // optional int32 renderMode = 20;
  if (has_rendermode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->rendermode(), target);
  }
  
  // optional float transparency = 21;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->transparency(), target);
  }
  
  // optional float transparency3D = 22;
  if (has_transparency3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->transparency3d(), target);
  }
  
  // optional bool enableSkinDoseView = 23;
  if (has_enableskindoseview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->enableskindoseview(), target);
  }
  
  // optional float maxSkinDose = 24;
  if (has_maxskindose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->maxskindose(), target);
  }
  
  // optional int32 displayMode = 25;
  if (has_displaymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->displaymode(), target);
  }
  
  // optional int32 hundredPercentDefinition = 26;
  if (has_hundredpercentdefinition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->hundredpercentdefinition(), target);
  }
  
  // optional float doseGridSizeZ = 27;
  if (has_dosegridsizez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->dosegridsizez(), target);
  }
  
  // optional float maxDose = 28;
  if (has_maxdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->maxdose(), target);
  }
  
  // optional bool isIgnoreUpdateMaxDose = 29;
  if (has_isignoreupdatemaxdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(29, this->isignoreupdatemaxdose(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 30;
  for (int i = 0; i < this->doselinelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->doselinelist(i), target);
  }
  
  // optional float doseGridSizeX = 31;
  if (has_dosegridsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(31, this->dosegridsizex(), target);
  }
  
  // optional float doseGridSizeY = 32;
  if (has_dosegridsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(32, this->dosegridsizey(), target);
  }
  
  // optional bool isDoseValid = 33;
  if (has_isdosevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->isdosevalid(), target);
  }
  
  // optional string patientPosition = 34;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->patientposition(), target);
  }
  
  // optional string planDescription = 35;
  if (has_plandescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->plandescription().data(), this->plandescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->plandescription(), target);
  }
  
  // optional string setupPoiUid = 36;
  if (has_setuppoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->setuppoiuid().data(), this->setuppoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->setuppoiuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string planUID = 1;
    if (has_planuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
    // optional string planName = 2;
    if (has_planname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planname());
    }
    
    // optional float bodyThickness = 3;
    if (has_bodythickness()) {
      total_size += 1 + 4;
    }
    
    // optional string phantomUID = 4;
    if (has_phantomuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phantomuid());
    }
    
    // optional string planner = 5;
    if (has_planner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planner());
    }
    
    // optional int32 planSourceType = 6;
    if (has_plansourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plansourcetype());
    }
    
    // optional string rtImageUID = 7;
    if (has_rtimageuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rtimageuid());
    }
    
    // optional float doseGridSpacingY = 8;
    if (has_dosegridspacingy()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float doseGridSpacingZ = 9;
    if (has_dosegridspacingz()) {
      total_size += 1 + 4;
    }
    
    // optional float doseGridStartX = 10;
    if (has_dosegridstartx()) {
      total_size += 1 + 4;
    }
    
    // optional float doseGridStartY = 11;
    if (has_dosegridstarty()) {
      total_size += 1 + 4;
    }
    
    // optional float doseGridStartZ = 12;
    if (has_dosegridstartz()) {
      total_size += 1 + 4;
    }
    
    // optional string courseUID = 13;
    if (has_courseuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseuid());
    }
    
    // optional string seriesUID = 14;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 isApproved = 17;
    if (has_isapproved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isapproved());
    }
    
    // optional float doseGridSpacingX = 18;
    if (has_dosegridspacingx()) {
      total_size += 2 + 4;
    }
    
    // optional float specifiedDose = 19;
    if (has_specifieddose()) {
      total_size += 2 + 4;
    }
    
    // optional int32 renderMode = 20;
    if (has_rendermode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rendermode());
    }
    
    // optional float transparency = 21;
    if (has_transparency()) {
      total_size += 2 + 4;
    }
    
    // optional float transparency3D = 22;
    if (has_transparency3d()) {
      total_size += 2 + 4;
    }
    
    // optional bool enableSkinDoseView = 23;
    if (has_enableskindoseview()) {
      total_size += 2 + 1;
    }
    
    // optional float maxSkinDose = 24;
    if (has_maxskindose()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 displayMode = 25;
    if (has_displaymode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displaymode());
    }
    
    // optional int32 hundredPercentDefinition = 26;
    if (has_hundredpercentdefinition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hundredpercentdefinition());
    }
    
    // optional float doseGridSizeZ = 27;
    if (has_dosegridsizez()) {
      total_size += 2 + 4;
    }
    
    // optional float maxDose = 28;
    if (has_maxdose()) {
      total_size += 2 + 4;
    }
    
    // optional bool isIgnoreUpdateMaxDose = 29;
    if (has_isignoreupdatemaxdose()) {
      total_size += 2 + 1;
    }
    
    // optional float doseGridSizeX = 31;
    if (has_dosegridsizex()) {
      total_size += 2 + 4;
    }
    
    // optional float doseGridSizeY = 32;
    if (has_dosegridsizey()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool isDoseValid = 33;
    if (has_isdosevalid()) {
      total_size += 2 + 1;
    }
    
    // optional string patientPosition = 34;
    if (has_patientposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientposition());
    }
    
    // optional string planDescription = 35;
    if (has_plandescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->plandescription());
    }
    
    // optional string setupPoiUid = 36;
    if (has_setuppoiuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->setuppoiuid());
    }
    
  }
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 15;
  total_size += 1 * this->normalizationgrouplist_size();
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalizationgrouplist(i));
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 16;
  total_size += 2 * this->poilist_size();
  for (int i = 0; i < this->poilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poilist(i));
  }
  
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 30;
  total_size += 2 * this->doselinelist_size();
  for (int i = 0; i < this->doselinelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doselinelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPlan::MergeFrom(const RtTpsProtoPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  normalizationgrouplist_.MergeFrom(from.normalizationgrouplist_);
  poilist_.MergeFrom(from.poilist_);
  doselinelist_.MergeFrom(from.doselinelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
    if (from.has_planname()) {
      set_planname(from.planname());
    }
    if (from.has_bodythickness()) {
      set_bodythickness(from.bodythickness());
    }
    if (from.has_phantomuid()) {
      set_phantomuid(from.phantomuid());
    }
    if (from.has_planner()) {
      set_planner(from.planner());
    }
    if (from.has_plansourcetype()) {
      set_plansourcetype(from.plansourcetype());
    }
    if (from.has_rtimageuid()) {
      set_rtimageuid(from.rtimageuid());
    }
    if (from.has_dosegridspacingy()) {
      set_dosegridspacingy(from.dosegridspacingy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_dosegridspacingz()) {
      set_dosegridspacingz(from.dosegridspacingz());
    }
    if (from.has_dosegridstartx()) {
      set_dosegridstartx(from.dosegridstartx());
    }
    if (from.has_dosegridstarty()) {
      set_dosegridstarty(from.dosegridstarty());
    }
    if (from.has_dosegridstartz()) {
      set_dosegridstartz(from.dosegridstartz());
    }
    if (from.has_courseuid()) {
      set_courseuid(from.courseuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isapproved()) {
      set_isapproved(from.isapproved());
    }
    if (from.has_dosegridspacingx()) {
      set_dosegridspacingx(from.dosegridspacingx());
    }
    if (from.has_specifieddose()) {
      set_specifieddose(from.specifieddose());
    }
    if (from.has_rendermode()) {
      set_rendermode(from.rendermode());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_transparency3d()) {
      set_transparency3d(from.transparency3d());
    }
    if (from.has_enableskindoseview()) {
      set_enableskindoseview(from.enableskindoseview());
    }
    if (from.has_maxskindose()) {
      set_maxskindose(from.maxskindose());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_displaymode()) {
      set_displaymode(from.displaymode());
    }
    if (from.has_hundredpercentdefinition()) {
      set_hundredpercentdefinition(from.hundredpercentdefinition());
    }
    if (from.has_dosegridsizez()) {
      set_dosegridsizez(from.dosegridsizez());
    }
    if (from.has_maxdose()) {
      set_maxdose(from.maxdose());
    }
    if (from.has_isignoreupdatemaxdose()) {
      set_isignoreupdatemaxdose(from.isignoreupdatemaxdose());
    }
    if (from.has_dosegridsizex()) {
      set_dosegridsizex(from.dosegridsizex());
    }
    if (from.has_dosegridsizey()) {
      set_dosegridsizey(from.dosegridsizey());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_isdosevalid()) {
      set_isdosevalid(from.isdosevalid());
    }
    if (from.has_patientposition()) {
      set_patientposition(from.patientposition());
    }
    if (from.has_plandescription()) {
      set_plandescription(from.plandescription());
    }
    if (from.has_setuppoiuid()) {
      set_setuppoiuid(from.setuppoiuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPlan::CopyFrom(const RtTpsProtoPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPlan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < normalizationgrouplist_size(); i++) {
    if (!this->normalizationgrouplist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poilist_size(); i++) {
    if (!this->poilist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < doselinelist_size(); i++) {
    if (!this->doselinelist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoPlan::Swap(RtTpsProtoPlan* other) {
  if (other != this) {
    std::swap(planuid_, other->planuid_);
    std::swap(planname_, other->planname_);
    std::swap(bodythickness_, other->bodythickness_);
    std::swap(phantomuid_, other->phantomuid_);
    std::swap(planner_, other->planner_);
    std::swap(plansourcetype_, other->plansourcetype_);
    std::swap(rtimageuid_, other->rtimageuid_);
    std::swap(dosegridspacingy_, other->dosegridspacingy_);
    std::swap(dosegridspacingz_, other->dosegridspacingz_);
    std::swap(dosegridstartx_, other->dosegridstartx_);
    std::swap(dosegridstarty_, other->dosegridstarty_);
    std::swap(dosegridstartz_, other->dosegridstartz_);
    std::swap(courseuid_, other->courseuid_);
    std::swap(seriesuid_, other->seriesuid_);
    normalizationgrouplist_.Swap(&other->normalizationgrouplist_);
    poilist_.Swap(&other->poilist_);
    std::swap(isapproved_, other->isapproved_);
    std::swap(dosegridspacingx_, other->dosegridspacingx_);
    std::swap(specifieddose_, other->specifieddose_);
    std::swap(rendermode_, other->rendermode_);
    std::swap(transparency_, other->transparency_);
    std::swap(transparency3d_, other->transparency3d_);
    std::swap(enableskindoseview_, other->enableskindoseview_);
    std::swap(maxskindose_, other->maxskindose_);
    std::swap(displaymode_, other->displaymode_);
    std::swap(hundredpercentdefinition_, other->hundredpercentdefinition_);
    std::swap(dosegridsizez_, other->dosegridsizez_);
    std::swap(maxdose_, other->maxdose_);
    std::swap(isignoreupdatemaxdose_, other->isignoreupdatemaxdose_);
    doselinelist_.Swap(&other->doselinelist_);
    std::swap(dosegridsizex_, other->dosegridsizex_);
    std::swap(dosegridsizey_, other->dosegridsizey_);
    std::swap(isdosevalid_, other->isdosevalid_);
    std::swap(patientposition_, other->patientposition_);
    std::swap(plandescription_, other->plandescription_);
    std::swap(setuppoiuid_, other->setuppoiuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPlan_descriptor_;
  metadata.reflection = RtTpsProtoPlan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedPlan::kPlanListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedPlan::RtTpsProtoRepeatedPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedPlan::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedPlan::RtTpsProtoRepeatedPlan(const RtTpsProtoRepeatedPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPlan::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedPlan::~RtTpsProtoRepeatedPlan() {
  SharedDtor();
}

void RtTpsProtoRepeatedPlan::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedPlan_descriptor_;
}

const RtTpsProtoRepeatedPlan& RtTpsProtoRepeatedPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fplan_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedPlan* RtTpsProtoRepeatedPlan::default_instance_ = NULL;

RtTpsProtoRepeatedPlan* RtTpsProtoRepeatedPlan::New() const {
  return new RtTpsProtoRepeatedPlan;
}

void RtTpsProtoRepeatedPlan::Clear() {
  planlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoPlan planList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_planlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_planList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoPlan planList = 1;
  for (int i = 0; i < this->planlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->planlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoPlan planList = 1;
  for (int i = 0; i < this->planlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->planlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedPlan::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoPlan planList = 1;
  total_size += 1 * this->planlist_size();
  for (int i = 0; i < this->planlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedPlan::MergeFrom(const RtTpsProtoRepeatedPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  planlist_.MergeFrom(from.planlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPlan::CopyFrom(const RtTpsProtoRepeatedPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedPlan::IsInitialized() const {
  
  for (int i = 0; i < planlist_size(); i++) {
    if (!this->planlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedPlan::Swap(RtTpsProtoRepeatedPlan* other) {
  if (other != this) {
    planlist_.Swap(&other->planlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedPlan_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedPlan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
