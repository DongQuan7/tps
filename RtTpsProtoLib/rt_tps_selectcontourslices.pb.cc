// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_selectcontourslices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_SELECT_CONTOUR_SLICES_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_SELECT_CONTOUR_SLICES_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fselectcontourslices_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fselectcontourslices_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_selectcontourslices.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_SELECT_CONTOUR_SLICES_descriptor_ = file->message_type(0);
  static const int RT_TPS_SELECT_CONTOUR_SLICES_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, mouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, lastmouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, windowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, windowuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, voiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, iseditingstarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, firstslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, secondslice_),
  };
  RT_TPS_SELECT_CONTOUR_SLICES_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_SELECT_CONTOUR_SLICES_descriptor_,
      RT_TPS_SELECT_CONTOUR_SLICES::default_instance_,
      RT_TPS_SELECT_CONTOUR_SLICES_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SELECT_CONTOUR_SLICES, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_SELECT_CONTOUR_SLICES));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fselectcontourslices_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_SELECT_CONTOUR_SLICES_descriptor_, &RT_TPS_SELECT_CONTOUR_SLICES::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fselectcontourslices_2eproto() {
  delete RT_TPS_SELECT_CONTOUR_SLICES::default_instance_;
  delete RT_TPS_SELECT_CONTOUR_SLICES_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fselectcontourslices_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n rt_tps_selectcontourslices.proto\022\ttps."
    "proto\"\344\001\n\034RT_TPS_SELECT_CONTOUR_SLICES\022\t"
    "\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\027\n\017mouseActionType\030"
    "\003 \002(\005\022\033\n\023lastMouseActionType\030\004 \002(\005\022\022\n\nwi"
    "ndowType\030\005 \002(\005\022\021\n\twindowUid\030\006 \002(\t\022\016\n\006voi"
    "UID\030\007 \002(\t\022\030\n\020isEditingStarted\030\010 \001(\010\022\022\n\nf"
    "irstSlice\030\t \001(\005\022\023\n\013secondSlice\030\n \001(\005", 276);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_selectcontourslices.proto", &protobuf_RegisterTypes);
  RT_TPS_SELECT_CONTOUR_SLICES::default_instance_ = new RT_TPS_SELECT_CONTOUR_SLICES();
  RT_TPS_SELECT_CONTOUR_SLICES::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fselectcontourslices_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fselectcontourslices_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fselectcontourslices_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fselectcontourslices_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fselectcontourslices_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_SELECT_CONTOUR_SLICES::kXFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kYFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kMouseActionTypeFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kLastMouseActionTypeFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kWindowTypeFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kWindowUidFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kVoiUIDFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kIsEditingStartedFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kFirstSliceFieldNumber;
const int RT_TPS_SELECT_CONTOUR_SLICES::kSecondSliceFieldNumber;
#endif  // !_MSC_VER

RT_TPS_SELECT_CONTOUR_SLICES::RT_TPS_SELECT_CONTOUR_SLICES()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_SELECT_CONTOUR_SLICES::InitAsDefaultInstance() {
}

RT_TPS_SELECT_CONTOUR_SLICES::RT_TPS_SELECT_CONTOUR_SLICES(const RT_TPS_SELECT_CONTOUR_SLICES& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_SELECT_CONTOUR_SLICES::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  mouseactiontype_ = 0;
  lastmouseactiontype_ = 0;
  windowtype_ = 0;
  windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iseditingstarted_ = false;
  firstslice_ = 0;
  secondslice_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_SELECT_CONTOUR_SLICES::~RT_TPS_SELECT_CONTOUR_SLICES() {
  SharedDtor();
}

void RT_TPS_SELECT_CONTOUR_SLICES::SharedDtor() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    delete windowuid_;
  }
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete voiuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_SELECT_CONTOUR_SLICES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_SELECT_CONTOUR_SLICES::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_SELECT_CONTOUR_SLICES_descriptor_;
}

const RT_TPS_SELECT_CONTOUR_SLICES& RT_TPS_SELECT_CONTOUR_SLICES::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fselectcontourslices_2eproto();  return *default_instance_;
}

RT_TPS_SELECT_CONTOUR_SLICES* RT_TPS_SELECT_CONTOUR_SLICES::default_instance_ = NULL;

RT_TPS_SELECT_CONTOUR_SLICES* RT_TPS_SELECT_CONTOUR_SLICES::New() const {
  return new RT_TPS_SELECT_CONTOUR_SLICES;
}

void RT_TPS_SELECT_CONTOUR_SLICES::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    mouseactiontype_ = 0;
    lastmouseactiontype_ = 0;
    windowtype_ = 0;
    if (has_windowuid()) {
      if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
        windowuid_->clear();
      }
    }
    if (has_voiuid()) {
      if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
        voiuid_->clear();
      }
    }
    iseditingstarted_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    firstslice_ = 0;
    secondslice_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_SELECT_CONTOUR_SLICES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mouseActionType;
        break;
      }
      
      // required int32 mouseActionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouseActionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mouseactiontype_)));
          set_has_mouseactiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lastMouseActionType;
        break;
      }
      
      // required int32 lastMouseActionType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastMouseActionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastmouseactiontype_)));
          set_has_lastmouseactiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_windowType;
        break;
      }
      
      // required int32 windowType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowtype_)));
          set_has_windowtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_windowUid;
        break;
      }
      
      // required string windowUid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windowuid().data(), this->windowuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_voiUID;
        break;
      }
      
      // required string voiUID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiuid().data(), this->voiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isEditingStarted;
        break;
      }
      
      // optional bool isEditingStarted = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEditingStarted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iseditingstarted_)));
          set_has_iseditingstarted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_firstSlice;
        break;
      }
      
      // optional int32 firstSlice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstslice_)));
          set_has_firstslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_secondSlice;
        break;
      }
      
      // optional int32 secondSlice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondslice_)));
          set_has_secondslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_SELECT_CONTOUR_SLICES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // required int32 mouseActionType = 3;
  if (has_mouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mouseactiontype(), output);
  }
  
  // required int32 lastMouseActionType = 4;
  if (has_lastmouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lastmouseactiontype(), output);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->windowtype(), output);
  }
  
  // required string windowUid = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->windowuid(), output);
  }
  
  // required string voiUID = 7;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->voiuid(), output);
  }
  
  // optional bool isEditingStarted = 8;
  if (has_iseditingstarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->iseditingstarted(), output);
  }
  
  // optional int32 firstSlice = 9;
  if (has_firstslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->firstslice(), output);
  }
  
  // optional int32 secondSlice = 10;
  if (has_secondslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->secondslice(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_SELECT_CONTOUR_SLICES::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // required int32 mouseActionType = 3;
  if (has_mouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mouseactiontype(), target);
  }
  
  // required int32 lastMouseActionType = 4;
  if (has_lastmouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lastmouseactiontype(), target);
  }
  
  // required int32 windowType = 5;
  if (has_windowtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->windowtype(), target);
  }
  
  // required string windowUid = 6;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->windowuid(), target);
  }
  
  // required string voiUID = 7;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->voiuid(), target);
  }
  
  // optional bool isEditingStarted = 8;
  if (has_iseditingstarted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->iseditingstarted(), target);
  }
  
  // optional int32 firstSlice = 9;
  if (has_firstslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->firstslice(), target);
  }
  
  // optional int32 secondSlice = 10;
  if (has_secondslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->secondslice(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_SELECT_CONTOUR_SLICES::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // required int32 mouseActionType = 3;
    if (has_mouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mouseactiontype());
    }
    
    // required int32 lastMouseActionType = 4;
    if (has_lastmouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastmouseactiontype());
    }
    
    // required int32 windowType = 5;
    if (has_windowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowtype());
    }
    
    // required string windowUid = 6;
    if (has_windowuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windowuid());
    }
    
    // required string voiUID = 7;
    if (has_voiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiuid());
    }
    
    // optional bool isEditingStarted = 8;
    if (has_iseditingstarted()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 firstSlice = 9;
    if (has_firstslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstslice());
    }
    
    // optional int32 secondSlice = 10;
    if (has_secondslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondslice());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_SELECT_CONTOUR_SLICES::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_SELECT_CONTOUR_SLICES* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_SELECT_CONTOUR_SLICES*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_SELECT_CONTOUR_SLICES::MergeFrom(const RT_TPS_SELECT_CONTOUR_SLICES& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_mouseactiontype()) {
      set_mouseactiontype(from.mouseactiontype());
    }
    if (from.has_lastmouseactiontype()) {
      set_lastmouseactiontype(from.lastmouseactiontype());
    }
    if (from.has_windowtype()) {
      set_windowtype(from.windowtype());
    }
    if (from.has_windowuid()) {
      set_windowuid(from.windowuid());
    }
    if (from.has_voiuid()) {
      set_voiuid(from.voiuid());
    }
    if (from.has_iseditingstarted()) {
      set_iseditingstarted(from.iseditingstarted());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_firstslice()) {
      set_firstslice(from.firstslice());
    }
    if (from.has_secondslice()) {
      set_secondslice(from.secondslice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_SELECT_CONTOUR_SLICES::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_SELECT_CONTOUR_SLICES::CopyFrom(const RT_TPS_SELECT_CONTOUR_SLICES& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_SELECT_CONTOUR_SLICES::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void RT_TPS_SELECT_CONTOUR_SLICES::Swap(RT_TPS_SELECT_CONTOUR_SLICES* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(mouseactiontype_, other->mouseactiontype_);
    std::swap(lastmouseactiontype_, other->lastmouseactiontype_);
    std::swap(windowtype_, other->windowtype_);
    std::swap(windowuid_, other->windowuid_);
    std::swap(voiuid_, other->voiuid_);
    std::swap(iseditingstarted_, other->iseditingstarted_);
    std::swap(firstslice_, other->firstslice_);
    std::swap(secondslice_, other->secondslice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_SELECT_CONTOUR_SLICES::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_SELECT_CONTOUR_SLICES_descriptor_;
  metadata.reflection = RT_TPS_SELECT_CONTOUR_SLICES_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
