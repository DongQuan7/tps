// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_patient.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoPatient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPatient_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fpatient_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fpatient_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_patient.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoPatient_descriptor_ = file->message_type(0);
  static const int RtTpsProtoPatient_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientnameprefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientfirstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientmiddlename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientlastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientnamesuffix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, patientdateofbirth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, isinternal_),
  };
  RtTpsProtoPatient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPatient_descriptor_,
      RtTpsProtoPatient::default_instance_,
      RtTpsProtoPatient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPatient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPatient));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fpatient_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPatient_descriptor_, &RtTpsProtoPatient::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpatient_2eproto() {
  delete RtTpsProtoPatient::default_instance_;
  delete RtTpsProtoPatient_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fpatient_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_proto_patient.proto\022\ttps.proto\""
    "\202\002\n\021RtTpsProtoPatient\022\022\n\npatientUID\030\001 \002("
    "\t\022\031\n\021patientNamePrefix\030\002 \001(\t\022\030\n\020patientF"
    "irstName\030\003 \001(\t\022\031\n\021patientMiddleName\030\004 \001("
    "\t\022\027\n\017patientLastName\030\005 \001(\t\022\031\n\021patientNam"
    "eSuffix\030\006 \001(\t\022\021\n\tpatientID\030\007 \001(\t\022\022\n\npati"
    "entsex\030\010 \001(\005\022\032\n\022patientDateOfBirth\030\t \001(\t"
    "\022\022\n\nisinternal\030\n \001(\010", 300);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_patient.proto", &protobuf_RegisterTypes);
  RtTpsProtoPatient::default_instance_ = new RtTpsProtoPatient();
  RtTpsProtoPatient::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fpatient_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fpatient_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fpatient_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fpatient_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fpatient_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPatient::kPatientUIDFieldNumber;
const int RtTpsProtoPatient::kPatientNamePrefixFieldNumber;
const int RtTpsProtoPatient::kPatientFirstNameFieldNumber;
const int RtTpsProtoPatient::kPatientMiddleNameFieldNumber;
const int RtTpsProtoPatient::kPatientLastNameFieldNumber;
const int RtTpsProtoPatient::kPatientNameSuffixFieldNumber;
const int RtTpsProtoPatient::kPatientIDFieldNumber;
const int RtTpsProtoPatient::kPatientsexFieldNumber;
const int RtTpsProtoPatient::kPatientDateOfBirthFieldNumber;
const int RtTpsProtoPatient::kIsinternalFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPatient::RtTpsProtoPatient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPatient::InitAsDefaultInstance() {
}

RtTpsProtoPatient::RtTpsProtoPatient(const RtTpsProtoPatient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPatient::SharedCtor() {
  _cached_size_ = 0;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientnameprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientmiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientnamesuffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientsex_ = 0;
  patientdateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isinternal_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPatient::~RtTpsProtoPatient() {
  SharedDtor();
}

void RtTpsProtoPatient::SharedDtor() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (patientnameprefix_ != &::google::protobuf::internal::kEmptyString) {
    delete patientnameprefix_;
  }
  if (patientfirstname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientfirstname_;
  }
  if (patientmiddlename_ != &::google::protobuf::internal::kEmptyString) {
    delete patientmiddlename_;
  }
  if (patientlastname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientlastname_;
  }
  if (patientnamesuffix_ != &::google::protobuf::internal::kEmptyString) {
    delete patientnamesuffix_;
  }
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientdateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    delete patientdateofbirth_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoPatient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPatient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPatient_descriptor_;
}

const RtTpsProtoPatient& RtTpsProtoPatient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fpatient_2eproto();  return *default_instance_;
}

RtTpsProtoPatient* RtTpsProtoPatient::default_instance_ = NULL;

RtTpsProtoPatient* RtTpsProtoPatient::New() const {
  return new RtTpsProtoPatient;
}

void RtTpsProtoPatient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
    if (has_patientnameprefix()) {
      if (patientnameprefix_ != &::google::protobuf::internal::kEmptyString) {
        patientnameprefix_->clear();
      }
    }
    if (has_patientfirstname()) {
      if (patientfirstname_ != &::google::protobuf::internal::kEmptyString) {
        patientfirstname_->clear();
      }
    }
    if (has_patientmiddlename()) {
      if (patientmiddlename_ != &::google::protobuf::internal::kEmptyString) {
        patientmiddlename_->clear();
      }
    }
    if (has_patientlastname()) {
      if (patientlastname_ != &::google::protobuf::internal::kEmptyString) {
        patientlastname_->clear();
      }
    }
    if (has_patientnamesuffix()) {
      if (patientnamesuffix_ != &::google::protobuf::internal::kEmptyString) {
        patientnamesuffix_->clear();
      }
    }
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    patientsex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_patientdateofbirth()) {
      if (patientdateofbirth_ != &::google::protobuf::internal::kEmptyString) {
        patientdateofbirth_->clear();
      }
    }
    isinternal_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPatient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string patientUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_patientNamePrefix;
        break;
      }
      
      // optional string patientNamePrefix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientNamePrefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientnameprefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientnameprefix().data(), this->patientnameprefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_patientFirstName;
        break;
      }
      
      // optional string patientFirstName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientFirstName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientfirstname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientfirstname().data(), this->patientfirstname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_patientMiddleName;
        break;
      }
      
      // optional string patientMiddleName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientMiddleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientmiddlename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientmiddlename().data(), this->patientmiddlename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_patientLastName;
        break;
      }
      
      // optional string patientLastName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientLastName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientlastname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientlastname().data(), this->patientlastname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patientNameSuffix;
        break;
      }
      
      // optional string patientNameSuffix = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientNameSuffix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientnamesuffix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientnamesuffix().data(), this->patientnamesuffix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_patientID;
        break;
      }
      
      // optional string patientID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_patientsex;
        break;
      }
      
      // optional int32 patientsex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patientsex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patientsex_)));
          set_has_patientsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_patientDateOfBirth;
        break;
      }
      
      // optional string patientDateOfBirth = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientDateOfBirth:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientdateofbirth()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientdateofbirth().data(), this->patientdateofbirth().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isinternal;
        break;
      }
      
      // optional bool isinternal = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isinternal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isinternal_)));
          set_has_isinternal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPatient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->patientuid(), output);
  }
  
  // optional string patientNamePrefix = 2;
  if (has_patientnameprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnameprefix().data(), this->patientnameprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->patientnameprefix(), output);
  }
  
  // optional string patientFirstName = 3;
  if (has_patientfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientfirstname().data(), this->patientfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->patientfirstname(), output);
  }
  
  // optional string patientMiddleName = 4;
  if (has_patientmiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientmiddlename().data(), this->patientmiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->patientmiddlename(), output);
  }
  
  // optional string patientLastName = 5;
  if (has_patientlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientlastname().data(), this->patientlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->patientlastname(), output);
  }
  
  // optional string patientNameSuffix = 6;
  if (has_patientnamesuffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnamesuffix().data(), this->patientnamesuffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->patientnamesuffix(), output);
  }
  
  // optional string patientID = 7;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->patientid(), output);
  }
  
  // optional int32 patientsex = 8;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->patientsex(), output);
  }
  
  // optional string patientDateOfBirth = 9;
  if (has_patientdateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientdateofbirth().data(), this->patientdateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->patientdateofbirth(), output);
  }
  
  // optional bool isinternal = 10;
  if (has_isinternal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isinternal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPatient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string patientUID = 1;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->patientuid(), target);
  }
  
  // optional string patientNamePrefix = 2;
  if (has_patientnameprefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnameprefix().data(), this->patientnameprefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patientnameprefix(), target);
  }
  
  // optional string patientFirstName = 3;
  if (has_patientfirstname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientfirstname().data(), this->patientfirstname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->patientfirstname(), target);
  }
  
  // optional string patientMiddleName = 4;
  if (has_patientmiddlename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientmiddlename().data(), this->patientmiddlename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->patientmiddlename(), target);
  }
  
  // optional string patientLastName = 5;
  if (has_patientlastname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientlastname().data(), this->patientlastname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->patientlastname(), target);
  }
  
  // optional string patientNameSuffix = 6;
  if (has_patientnamesuffix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientnamesuffix().data(), this->patientnamesuffix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->patientnamesuffix(), target);
  }
  
  // optional string patientID = 7;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->patientid(), target);
  }
  
  // optional int32 patientsex = 8;
  if (has_patientsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->patientsex(), target);
  }
  
  // optional string patientDateOfBirth = 9;
  if (has_patientdateofbirth()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientdateofbirth().data(), this->patientdateofbirth().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->patientdateofbirth(), target);
  }
  
  // optional bool isinternal = 10;
  if (has_isinternal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isinternal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPatient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string patientUID = 1;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
    // optional string patientNamePrefix = 2;
    if (has_patientnameprefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientnameprefix());
    }
    
    // optional string patientFirstName = 3;
    if (has_patientfirstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientfirstname());
    }
    
    // optional string patientMiddleName = 4;
    if (has_patientmiddlename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientmiddlename());
    }
    
    // optional string patientLastName = 5;
    if (has_patientlastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientlastname());
    }
    
    // optional string patientNameSuffix = 6;
    if (has_patientnamesuffix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientnamesuffix());
    }
    
    // optional string patientID = 7;
    if (has_patientid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }
    
    // optional int32 patientsex = 8;
    if (has_patientsex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patientsex());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string patientDateOfBirth = 9;
    if (has_patientdateofbirth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientdateofbirth());
    }
    
    // optional bool isinternal = 10;
    if (has_isinternal()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPatient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPatient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPatient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPatient::MergeFrom(const RtTpsProtoPatient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
    if (from.has_patientnameprefix()) {
      set_patientnameprefix(from.patientnameprefix());
    }
    if (from.has_patientfirstname()) {
      set_patientfirstname(from.patientfirstname());
    }
    if (from.has_patientmiddlename()) {
      set_patientmiddlename(from.patientmiddlename());
    }
    if (from.has_patientlastname()) {
      set_patientlastname(from.patientlastname());
    }
    if (from.has_patientnamesuffix()) {
      set_patientnamesuffix(from.patientnamesuffix());
    }
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientsex()) {
      set_patientsex(from.patientsex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_patientdateofbirth()) {
      set_patientdateofbirth(from.patientdateofbirth());
    }
    if (from.has_isinternal()) {
      set_isinternal(from.isinternal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPatient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPatient::CopyFrom(const RtTpsProtoPatient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPatient::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoPatient::Swap(RtTpsProtoPatient* other) {
  if (other != this) {
    std::swap(patientuid_, other->patientuid_);
    std::swap(patientnameprefix_, other->patientnameprefix_);
    std::swap(patientfirstname_, other->patientfirstname_);
    std::swap(patientmiddlename_, other->patientmiddlename_);
    std::swap(patientlastname_, other->patientlastname_);
    std::swap(patientnamesuffix_, other->patientnamesuffix_);
    std::swap(patientid_, other->patientid_);
    std::swap(patientsex_, other->patientsex_);
    std::swap(patientdateofbirth_, other->patientdateofbirth_);
    std::swap(isinternal_, other->isinternal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPatient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPatient_descriptor_;
  metadata.reflection = RtTpsProtoPatient_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
