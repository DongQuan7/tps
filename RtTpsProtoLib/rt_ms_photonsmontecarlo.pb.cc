// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_photonsmontecarlo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_PMCPDD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCPDD_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCEnergyAndSpectrumList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCEnergyAndSpectrumList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCEnergyAndSpectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCEnergyAndSpectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCInField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCInField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCSecondarySourceParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCSecondarySourceParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCOutField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCOutField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCElectronContamination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCElectronContamination_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCAbsoluteDose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCAbsoluteDose_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCVirtualWedge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCVirtualWedge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCVirtualWedgeTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCVirtualWedgeTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PMCPhysicalWedge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PMCPhysicalWedge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_Point2D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_Point2D_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PhotonMonteCarloInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PhotonMonteCarloInformation_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto() {
  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_photonsmontecarlo.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_PMCPDD_descriptor_ = file->message_type(0);
  static const int RT_MS_PMCPDD_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, primaryenergystart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, primaryenergyend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, primaryenergybin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, primaryenergyrestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, secondaryenergystart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, secondaryenergyend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, secondaryenergybin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, secondaryenergyrestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, electronenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, particlenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, primaryspectrumcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, secondaryspectrumcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, electronspectrumcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, completefilesnumber_),
  };
  RT_MS_PMCPDD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCPDD_descriptor_,
      RT_MS_PMCPDD::default_instance_,
      RT_MS_PMCPDD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPDD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCPDD));
  RT_MS_PMCEnergyAndSpectrumList_descriptor_ = file->message_type(1);
  static const int RT_MS_PMCEnergyAndSpectrumList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrumList, energyandspectrumlist_),
  };
  RT_MS_PMCEnergyAndSpectrumList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCEnergyAndSpectrumList_descriptor_,
      RT_MS_PMCEnergyAndSpectrumList::default_instance_,
      RT_MS_PMCEnergyAndSpectrumList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrumList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrumList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCEnergyAndSpectrumList));
  RT_MS_PMCEnergyAndSpectrum_descriptor_ = file->message_type(2);
  static const int RT_MS_PMCEnergyAndSpectrum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrum, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrum, weight_),
  };
  RT_MS_PMCEnergyAndSpectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCEnergyAndSpectrum_descriptor_,
      RT_MS_PMCEnergyAndSpectrum::default_instance_,
      RT_MS_PMCEnergyAndSpectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCEnergyAndSpectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCEnergyAndSpectrum));
  RT_MS_PMCInField_descriptor_ = file->message_type(3);
  static const int RT_MS_PMCInField_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, primarysoften_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, softenparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, selectedsecondarysourcetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, scattersoften_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, secondarysourceparametercollection_),
  };
  RT_MS_PMCInField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCInField_descriptor_,
      RT_MS_PMCInField::default_instance_,
      RT_MS_PMCInField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCInField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCInField));
  RT_MS_PMCSecondarySourceParameter_descriptor_ = file->message_type(4);
  static const int RT_MS_PMCSecondarySourceParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCSecondarySourceParameter, flatfiltera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCSecondarySourceParameter, flatfilterb_),
  };
  RT_MS_PMCSecondarySourceParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCSecondarySourceParameter_descriptor_,
      RT_MS_PMCSecondarySourceParameter::default_instance_,
      RT_MS_PMCSecondarySourceParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCSecondarySourceParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCSecondarySourceParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCSecondarySourceParameter));
  RT_MS_PMCOutField_descriptor_ = file->message_type(5);
  static const int RT_MS_PMCOutField_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, flatdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, jawdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, sigmap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, sigmas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, tailcorrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, rectanglescattercorrection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, mlcleakage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, gaussianblurswitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, gaussiansigmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, gaussiansigmay_),
  };
  RT_MS_PMCOutField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCOutField_descriptor_,
      RT_MS_PMCOutField::default_instance_,
      RT_MS_PMCOutField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCOutField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCOutField));
  RT_MS_PMCElectronContamination_descriptor_ = file->message_type(6);
  static const int RT_MS_PMCElectronContamination_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, standardradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, sigma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, powerfactor_),
  };
  RT_MS_PMCElectronContamination_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCElectronContamination_descriptor_,
      RT_MS_PMCElectronContamination::default_instance_,
      RT_MS_PMCElectronContamination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCElectronContamination, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCElectronContamination));
  RT_MS_PMCAbsoluteDose_descriptor_ = file->message_type(7);
  static const int RT_MS_PMCAbsoluteDose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCAbsoluteDose, norm10dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCAbsoluteDose, absolutedosecollectionstr_),
  };
  RT_MS_PMCAbsoluteDose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCAbsoluteDose_descriptor_,
      RT_MS_PMCAbsoluteDose::default_instance_,
      RT_MS_PMCAbsoluteDose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCAbsoluteDose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCAbsoluteDose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCAbsoluteDose));
  RT_MS_PMCWedgeField_descriptor_ = file->message_type(8);
  static const int RT_MS_PMCWedgeField_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCWedgeField, virtualwedgecollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCWedgeField, physicalwedgecollection_),
  };
  RT_MS_PMCWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCWedgeField_descriptor_,
      RT_MS_PMCWedgeField::default_instance_,
      RT_MS_PMCWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCWedgeField));
  RT_MS_PMCVirtualWedge_descriptor_ = file->message_type(9);
  static const int RT_MS_PMCVirtualWedge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, wedgename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, collimatorfixedposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, virtualwedgetableitemcollection_),
  };
  RT_MS_PMCVirtualWedge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCVirtualWedge_descriptor_,
      RT_MS_PMCVirtualWedge::default_instance_,
      RT_MS_PMCVirtualWedge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCVirtualWedge));
  RT_MS_PMCVirtualWedgeTable_descriptor_ = file->message_type(10);
  static const int RT_MS_PMCVirtualWedgeTable_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedgeTable, collimatormovingposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedgeTable, relativemu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedgeTable, correctionfactor_),
  };
  RT_MS_PMCVirtualWedgeTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCVirtualWedgeTable_descriptor_,
      RT_MS_PMCVirtualWedgeTable::default_instance_,
      RT_MS_PMCVirtualWedgeTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedgeTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCVirtualWedgeTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCVirtualWedgeTable));
  RT_MS_PMCPhysicalWedge_descriptor_ = file->message_type(11);
  static const int RT_MS_PMCPhysicalWedge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, wedgename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, wedgethickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, contourvertexpointcollection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, carrierthickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, carriercontourvertexpointcollection_),
  };
  RT_MS_PMCPhysicalWedge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PMCPhysicalWedge_descriptor_,
      RT_MS_PMCPhysicalWedge::default_instance_,
      RT_MS_PMCPhysicalWedge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PMCPhysicalWedge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PMCPhysicalWedge));
  RT_MS_Point2D_descriptor_ = file->message_type(12);
  static const int RT_MS_Point2D_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Point2D, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Point2D, y_),
  };
  RT_MS_Point2D_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_Point2D_descriptor_,
      RT_MS_Point2D::default_instance_,
      RT_MS_Point2D_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Point2D, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Point2D, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_Point2D));
  RT_MS_PhotonMonteCarloInformation_descriptor_ = file->message_type(13);
  static const int RT_MS_PhotonMonteCarloInformation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, pddparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, infieldparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, outfieldparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, electroncontaminationparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, absolutedoseparameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, wedgefieldparameter_),
  };
  RT_MS_PhotonMonteCarloInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PhotonMonteCarloInformation_descriptor_,
      RT_MS_PhotonMonteCarloInformation::default_instance_,
      RT_MS_PhotonMonteCarloInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhotonMonteCarloInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PhotonMonteCarloInformation));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCPDD_descriptor_, &RT_MS_PMCPDD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCEnergyAndSpectrumList_descriptor_, &RT_MS_PMCEnergyAndSpectrumList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCEnergyAndSpectrum_descriptor_, &RT_MS_PMCEnergyAndSpectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCInField_descriptor_, &RT_MS_PMCInField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCSecondarySourceParameter_descriptor_, &RT_MS_PMCSecondarySourceParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCOutField_descriptor_, &RT_MS_PMCOutField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCElectronContamination_descriptor_, &RT_MS_PMCElectronContamination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCAbsoluteDose_descriptor_, &RT_MS_PMCAbsoluteDose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCWedgeField_descriptor_, &RT_MS_PMCWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCVirtualWedge_descriptor_, &RT_MS_PMCVirtualWedge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCVirtualWedgeTable_descriptor_, &RT_MS_PMCVirtualWedgeTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PMCPhysicalWedge_descriptor_, &RT_MS_PMCPhysicalWedge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_Point2D_descriptor_, &RT_MS_Point2D::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PhotonMonteCarloInformation_descriptor_, &RT_MS_PhotonMonteCarloInformation::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto() {
  delete RT_MS_PMCPDD::default_instance_;
  delete RT_MS_PMCPDD_reflection_;
  delete RT_MS_PMCEnergyAndSpectrumList::default_instance_;
  delete RT_MS_PMCEnergyAndSpectrumList_reflection_;
  delete RT_MS_PMCEnergyAndSpectrum::default_instance_;
  delete RT_MS_PMCEnergyAndSpectrum_reflection_;
  delete RT_MS_PMCInField::default_instance_;
  delete RT_MS_PMCInField_reflection_;
  delete RT_MS_PMCSecondarySourceParameter::default_instance_;
  delete RT_MS_PMCSecondarySourceParameter_reflection_;
  delete RT_MS_PMCOutField::default_instance_;
  delete RT_MS_PMCOutField_reflection_;
  delete RT_MS_PMCElectronContamination::default_instance_;
  delete RT_MS_PMCElectronContamination_reflection_;
  delete RT_MS_PMCAbsoluteDose::default_instance_;
  delete RT_MS_PMCAbsoluteDose_reflection_;
  delete RT_MS_PMCWedgeField::default_instance_;
  delete RT_MS_PMCWedgeField_reflection_;
  delete RT_MS_PMCVirtualWedge::default_instance_;
  delete RT_MS_PMCVirtualWedge_reflection_;
  delete RT_MS_PMCVirtualWedgeTable::default_instance_;
  delete RT_MS_PMCVirtualWedgeTable_reflection_;
  delete RT_MS_PMCPhysicalWedge::default_instance_;
  delete RT_MS_PMCPhysicalWedge_reflection_;
  delete RT_MS_Point2D::default_instance_;
  delete RT_MS_Point2D_reflection_;
  delete RT_MS_PhotonMonteCarloInformation::default_instance_;
  delete RT_MS_PhotonMonteCarloInformation_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035rt_ms_photonsmontecarlo.proto\022\010ms.prot"
    "o\"\235\004\n\014RT_MS_PMCPDD\022\032\n\022primaryEnergyStart"
    "\030\001 \001(\002\022\030\n\020primaryEnergyEnd\030\002 \001(\002\022\030\n\020prim"
    "aryEnergyBin\030\003 \001(\005\022\034\n\024primaryEnergyResta"
    "rt\030\004 \001(\002\022\034\n\024secondaryEnergyStart\030\005 \001(\002\022\032"
    "\n\022secondaryEnergyEnd\030\006 \001(\002\022\032\n\022secondaryE"
    "nergyBin\030\007 \001(\005\022\036\n\026secondaryEnergyRestart"
    "\030\010 \001(\002\022\026\n\016electronEnergy\030\t \001(\002\022\026\n\016partic"
    "leNumber\030\n \001(\005\022G\n\031primarySpectrumCollect"
    "ion\030\013 \003(\0132$.ms.proto.RT_MS_PMCEnergyAndS"
    "pectrum\022I\n\033secondarySpectrumCollection\030\014"
    " \003(\0132$.ms.proto.RT_MS_PMCEnergyAndSpectr"
    "um\022H\n\032electronSpectrumCollection\030\r \003(\0132$"
    ".ms.proto.RT_MS_PMCEnergyAndSpectrum\022\033\n\023"
    "CompleteFilesNumber\030\016 \001(\005\"e\n\036RT_MS_PMCEn"
    "ergyAndSpectrumList\022C\n\025EnergyAndSpectrum"
    "List\030\001 \003(\0132$.ms.proto.RT_MS_PMCEnergyAnd"
    "Spectrum\"<\n\032RT_MS_PMCEnergyAndSpectrum\022\016"
    "\n\006energy\030\001 \001(\002\022\016\n\006weight\030\002 \001(\002\"\327\001\n\020RT_MS"
    "_PMCInField\022\025\n\rprimarySoften\030\001 \001(\010\022\027\n\017so"
    "ftenParameter\030\002 \001(\002\022#\n\033selectedSecondary"
    "SourceType\030\004 \001(\005\022\025\n\rscatterSoften\030\005 \001(\010\022"
    "W\n\"secondarySourceParameterCollection\030\006 "
    "\003(\0132+.ms.proto.RT_MS_PMCSecondarySourceP"
    "arameter\"M\n!RT_MS_PMCSecondarySourcePara"
    "meter\022\023\n\013flatFilterA\030\001 \001(\002\022\023\n\013flatFilter"
    "B\030\002 \001(\002\"\372\001\n\021RT_MS_PMCOutField\022\024\n\014flatDis"
    "tance\030\001 \001(\002\022\023\n\013jawDistance\030\002 \001(\002\022\016\n\006sigm"
    "aP\030\003 \001(\002\022\016\n\006sigmaS\030\004 \001(\002\022\026\n\016tailCorrecti"
    "on\030\005 \001(\002\022\"\n\032rectangleScatterCorrection\030\006"
    " \001(\002\022\022\n\nmlcLeakage\030\007 \001(\002\022\032\n\022gaussianBlur"
    "Switch\030\010 \001(\010\022\026\n\016gaussianSigmaX\030\t \001(\002\022\026\n\016"
    "gaussianSigmaY\030\n \001(\002\"l\n\036RT_MS_PMCElectro"
    "nContamination\022\026\n\016standardRadius\030\001 \001(\002\022\r"
    "\n\005sigma\030\002 \001(\002\022\016\n\006offset\030\003 \001(\002\022\023\n\013powerFa"
    "ctor\030\004 \001(\002\"N\n\025RT_MS_PMCAbsoluteDose\022\022\n\nn"
    "orm10Dose\030\001 \001(\002\022!\n\031absoluteDoseCollectio"
    "nStr\030\002 \001(\t\"\231\001\n\023RT_MS_PMCWedgeField\022\?\n\026vi"
    "rtualWedgeCollection\030\001 \003(\0132\037.ms.proto.RT"
    "_MS_PMCVirtualWedge\022A\n\027PhysicalWedgeColl"
    "ection\030\002 \003(\0132 .ms.proto.RT_MS_PMCPhysica"
    "lWedge\"\254\001\n\025RT_MS_PMCVirtualWedge\022\020\n\010wedg"
    "eUID\030\001 \001(\t\022\021\n\twedgeName\030\002 \001(\t\022\037\n\027collima"
    "torFixedPosition\030\003 \001(\002\022M\n\037virtualWedgeTa"
    "bleItemCollection\030\004 \003(\0132$.ms.proto.RT_MS"
    "_PMCVirtualWedgeTable\"l\n\032RT_MS_PMCVirtua"
    "lWedgeTable\022 \n\030collimatorMovingPosition\030"
    "\001 \001(\002\022\022\n\nrelativeMU\030\002 \001(\002\022\030\n\020correctionF"
    "actor\030\003 \001(\002\"\364\001\n\026RT_MS_PMCPhysicalWedge\022\020"
    "\n\010wedgeUID\030\001 \001(\t\022\021\n\twedgeName\030\002 \001(\t\022\026\n\016w"
    "edgeThickness\030\003 \001(\002\022=\n\034ContourVertexPoin"
    "tCollection\030\004 \003(\0132\027.ms.proto.RT_MS_Point"
    "2D\022\030\n\020carrierThickness\030\005 \001(\002\022D\n#carrierC"
    "ontourVertexPointCollection\030\006 \003(\0132\027.ms.p"
    "roto.RT_MS_Point2D\"%\n\rRT_MS_Point2D\022\t\n\001X"
    "\030\001 \001(\002\022\t\n\001Y\030\002 \001(\002\"\244\003\n!RT_MS_PhotonMonteC"
    "arloInformation\022\025\n\rCommissionUID\030\001 \001(\t\022,"
    "\n\014PDDParameter\030\002 \001(\0132\026.ms.proto.RT_MS_PM"
    "CPDD\0224\n\020InFieldParameter\030\003 \001(\0132\032.ms.prot"
    "o.RT_MS_PMCInField\0226\n\021OutFieldParameter\030"
    "\004 \001(\0132\033.ms.proto.RT_MS_PMCOutField\022P\n\036El"
    "ectronContaminationParameter\030\005 \001(\0132(.ms."
    "proto.RT_MS_PMCElectronContamination\022>\n\025"
    "AbsoluteDoseParameter\030\006 \001(\0132\037.ms.proto.R"
    "T_MS_PMCAbsoluteDose\022:\n\023WedgeFieldParame"
    "ter\030\007 \001(\0132\035.ms.proto.RT_MS_PMCWedgeField", 2640);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_photonsmontecarlo.proto", &protobuf_RegisterTypes);
  RT_MS_PMCPDD::default_instance_ = new RT_MS_PMCPDD();
  RT_MS_PMCEnergyAndSpectrumList::default_instance_ = new RT_MS_PMCEnergyAndSpectrumList();
  RT_MS_PMCEnergyAndSpectrum::default_instance_ = new RT_MS_PMCEnergyAndSpectrum();
  RT_MS_PMCInField::default_instance_ = new RT_MS_PMCInField();
  RT_MS_PMCSecondarySourceParameter::default_instance_ = new RT_MS_PMCSecondarySourceParameter();
  RT_MS_PMCOutField::default_instance_ = new RT_MS_PMCOutField();
  RT_MS_PMCElectronContamination::default_instance_ = new RT_MS_PMCElectronContamination();
  RT_MS_PMCAbsoluteDose::default_instance_ = new RT_MS_PMCAbsoluteDose();
  RT_MS_PMCWedgeField::default_instance_ = new RT_MS_PMCWedgeField();
  RT_MS_PMCVirtualWedge::default_instance_ = new RT_MS_PMCVirtualWedge();
  RT_MS_PMCVirtualWedgeTable::default_instance_ = new RT_MS_PMCVirtualWedgeTable();
  RT_MS_PMCPhysicalWedge::default_instance_ = new RT_MS_PMCPhysicalWedge();
  RT_MS_Point2D::default_instance_ = new RT_MS_Point2D();
  RT_MS_PhotonMonteCarloInformation::default_instance_ = new RT_MS_PhotonMonteCarloInformation();
  RT_MS_PMCPDD::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCEnergyAndSpectrumList::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCEnergyAndSpectrum::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCInField::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCSecondarySourceParameter::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCOutField::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCElectronContamination::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCAbsoluteDose::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCWedgeField::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCVirtualWedge::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCVirtualWedgeTable::default_instance_->InitAsDefaultInstance();
  RT_MS_PMCPhysicalWedge::default_instance_->InitAsDefaultInstance();
  RT_MS_Point2D::default_instance_->InitAsDefaultInstance();
  RT_MS_PhotonMonteCarloInformation::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fphotonsmontecarlo_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fphotonsmontecarlo_2eproto() {
    protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fphotonsmontecarlo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCPDD::kPrimaryEnergyStartFieldNumber;
const int RT_MS_PMCPDD::kPrimaryEnergyEndFieldNumber;
const int RT_MS_PMCPDD::kPrimaryEnergyBinFieldNumber;
const int RT_MS_PMCPDD::kPrimaryEnergyRestartFieldNumber;
const int RT_MS_PMCPDD::kSecondaryEnergyStartFieldNumber;
const int RT_MS_PMCPDD::kSecondaryEnergyEndFieldNumber;
const int RT_MS_PMCPDD::kSecondaryEnergyBinFieldNumber;
const int RT_MS_PMCPDD::kSecondaryEnergyRestartFieldNumber;
const int RT_MS_PMCPDD::kElectronEnergyFieldNumber;
const int RT_MS_PMCPDD::kParticleNumberFieldNumber;
const int RT_MS_PMCPDD::kPrimarySpectrumCollectionFieldNumber;
const int RT_MS_PMCPDD::kSecondarySpectrumCollectionFieldNumber;
const int RT_MS_PMCPDD::kElectronSpectrumCollectionFieldNumber;
const int RT_MS_PMCPDD::kCompleteFilesNumberFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCPDD::RT_MS_PMCPDD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCPDD::InitAsDefaultInstance() {
}

RT_MS_PMCPDD::RT_MS_PMCPDD(const RT_MS_PMCPDD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCPDD::SharedCtor() {
  _cached_size_ = 0;
  primaryenergystart_ = 0;
  primaryenergyend_ = 0;
  primaryenergybin_ = 0;
  primaryenergyrestart_ = 0;
  secondaryenergystart_ = 0;
  secondaryenergyend_ = 0;
  secondaryenergybin_ = 0;
  secondaryenergyrestart_ = 0;
  electronenergy_ = 0;
  particlenumber_ = 0;
  completefilesnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCPDD::~RT_MS_PMCPDD() {
  SharedDtor();
}

void RT_MS_PMCPDD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCPDD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCPDD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCPDD_descriptor_;
}

const RT_MS_PMCPDD& RT_MS_PMCPDD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCPDD* RT_MS_PMCPDD::default_instance_ = NULL;

RT_MS_PMCPDD* RT_MS_PMCPDD::New() const {
  return new RT_MS_PMCPDD;
}

void RT_MS_PMCPDD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    primaryenergystart_ = 0;
    primaryenergyend_ = 0;
    primaryenergybin_ = 0;
    primaryenergyrestart_ = 0;
    secondaryenergystart_ = 0;
    secondaryenergyend_ = 0;
    secondaryenergybin_ = 0;
    secondaryenergyrestart_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    electronenergy_ = 0;
    particlenumber_ = 0;
    completefilesnumber_ = 0;
  }
  primaryspectrumcollection_.Clear();
  secondaryspectrumcollection_.Clear();
  electronspectrumcollection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCPDD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float primaryEnergyStart = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &primaryenergystart_)));
          set_has_primaryenergystart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_primaryEnergyEnd;
        break;
      }
      
      // optional float primaryEnergyEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryEnergyEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &primaryenergyend_)));
          set_has_primaryenergyend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_primaryEnergyBin;
        break;
      }
      
      // optional int32 primaryEnergyBin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_primaryEnergyBin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &primaryenergybin_)));
          set_has_primaryenergybin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_primaryEnergyRestart;
        break;
      }
      
      // optional float primaryEnergyRestart = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_primaryEnergyRestart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &primaryenergyrestart_)));
          set_has_primaryenergyrestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_secondaryEnergyStart;
        break;
      }
      
      // optional float secondaryEnergyStart = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_secondaryEnergyStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &secondaryenergystart_)));
          set_has_secondaryenergystart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_secondaryEnergyEnd;
        break;
      }
      
      // optional float secondaryEnergyEnd = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_secondaryEnergyEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &secondaryenergyend_)));
          set_has_secondaryenergyend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_secondaryEnergyBin;
        break;
      }
      
      // optional int32 secondaryEnergyBin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondaryEnergyBin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondaryenergybin_)));
          set_has_secondaryenergybin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_secondaryEnergyRestart;
        break;
      }
      
      // optional float secondaryEnergyRestart = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_secondaryEnergyRestart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &secondaryenergyrestart_)));
          set_has_secondaryenergyrestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_electronEnergy;
        break;
      }
      
      // optional float electronEnergy = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_electronEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &electronenergy_)));
          set_has_electronenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_particleNumber;
        break;
      }
      
      // optional int32 particleNumber = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_particleNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particlenumber_)));
          set_has_particlenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_primarySpectrumCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_primarySpectrumCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_primaryspectrumcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_primarySpectrumCollection;
        if (input->ExpectTag(98)) goto parse_secondarySpectrumCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondarySpectrumCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondaryspectrumcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_secondarySpectrumCollection;
        if (input->ExpectTag(106)) goto parse_electronSpectrumCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_electronSpectrumCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_electronspectrumcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_electronSpectrumCollection;
        if (input->ExpectTag(112)) goto parse_CompleteFilesNumber;
        break;
      }
      
      // optional int32 CompleteFilesNumber = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CompleteFilesNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completefilesnumber_)));
          set_has_completefilesnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCPDD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float primaryEnergyStart = 1;
  if (has_primaryenergystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->primaryenergystart(), output);
  }
  
  // optional float primaryEnergyEnd = 2;
  if (has_primaryenergyend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->primaryenergyend(), output);
  }
  
  // optional int32 primaryEnergyBin = 3;
  if (has_primaryenergybin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->primaryenergybin(), output);
  }
  
  // optional float primaryEnergyRestart = 4;
  if (has_primaryenergyrestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->primaryenergyrestart(), output);
  }
  
  // optional float secondaryEnergyStart = 5;
  if (has_secondaryenergystart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->secondaryenergystart(), output);
  }
  
  // optional float secondaryEnergyEnd = 6;
  if (has_secondaryenergyend()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->secondaryenergyend(), output);
  }
  
  // optional int32 secondaryEnergyBin = 7;
  if (has_secondaryenergybin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->secondaryenergybin(), output);
  }
  
  // optional float secondaryEnergyRestart = 8;
  if (has_secondaryenergyrestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->secondaryenergyrestart(), output);
  }
  
  // optional float electronEnergy = 9;
  if (has_electronenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->electronenergy(), output);
  }
  
  // optional int32 particleNumber = 10;
  if (has_particlenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->particlenumber(), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
  for (int i = 0; i < this->primaryspectrumcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->primaryspectrumcollection(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
  for (int i = 0; i < this->secondaryspectrumcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->secondaryspectrumcollection(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
  for (int i = 0; i < this->electronspectrumcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->electronspectrumcollection(i), output);
  }
  
  // optional int32 CompleteFilesNumber = 14;
  if (has_completefilesnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->completefilesnumber(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCPDD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float primaryEnergyStart = 1;
  if (has_primaryenergystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->primaryenergystart(), target);
  }
  
  // optional float primaryEnergyEnd = 2;
  if (has_primaryenergyend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->primaryenergyend(), target);
  }
  
  // optional int32 primaryEnergyBin = 3;
  if (has_primaryenergybin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->primaryenergybin(), target);
  }
  
  // optional float primaryEnergyRestart = 4;
  if (has_primaryenergyrestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->primaryenergyrestart(), target);
  }
  
  // optional float secondaryEnergyStart = 5;
  if (has_secondaryenergystart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->secondaryenergystart(), target);
  }
  
  // optional float secondaryEnergyEnd = 6;
  if (has_secondaryenergyend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->secondaryenergyend(), target);
  }
  
  // optional int32 secondaryEnergyBin = 7;
  if (has_secondaryenergybin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->secondaryenergybin(), target);
  }
  
  // optional float secondaryEnergyRestart = 8;
  if (has_secondaryenergyrestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->secondaryenergyrestart(), target);
  }
  
  // optional float electronEnergy = 9;
  if (has_electronenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->electronenergy(), target);
  }
  
  // optional int32 particleNumber = 10;
  if (has_particlenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->particlenumber(), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
  for (int i = 0; i < this->primaryspectrumcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->primaryspectrumcollection(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
  for (int i = 0; i < this->secondaryspectrumcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->secondaryspectrumcollection(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
  for (int i = 0; i < this->electronspectrumcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->electronspectrumcollection(i), target);
  }
  
  // optional int32 CompleteFilesNumber = 14;
  if (has_completefilesnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->completefilesnumber(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCPDD::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float primaryEnergyStart = 1;
    if (has_primaryenergystart()) {
      total_size += 1 + 4;
    }
    
    // optional float primaryEnergyEnd = 2;
    if (has_primaryenergyend()) {
      total_size += 1 + 4;
    }
    
    // optional int32 primaryEnergyBin = 3;
    if (has_primaryenergybin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->primaryenergybin());
    }
    
    // optional float primaryEnergyRestart = 4;
    if (has_primaryenergyrestart()) {
      total_size += 1 + 4;
    }
    
    // optional float secondaryEnergyStart = 5;
    if (has_secondaryenergystart()) {
      total_size += 1 + 4;
    }
    
    // optional float secondaryEnergyEnd = 6;
    if (has_secondaryenergyend()) {
      total_size += 1 + 4;
    }
    
    // optional int32 secondaryEnergyBin = 7;
    if (has_secondaryenergybin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondaryenergybin());
    }
    
    // optional float secondaryEnergyRestart = 8;
    if (has_secondaryenergyrestart()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float electronEnergy = 9;
    if (has_electronenergy()) {
      total_size += 1 + 4;
    }
    
    // optional int32 particleNumber = 10;
    if (has_particlenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->particlenumber());
    }
    
    // optional int32 CompleteFilesNumber = 14;
    if (has_completefilesnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completefilesnumber());
    }
    
  }
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
  total_size += 1 * this->primaryspectrumcollection_size();
  for (int i = 0; i < this->primaryspectrumcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->primaryspectrumcollection(i));
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
  total_size += 1 * this->secondaryspectrumcollection_size();
  for (int i = 0; i < this->secondaryspectrumcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondaryspectrumcollection(i));
  }
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
  total_size += 1 * this->electronspectrumcollection_size();
  for (int i = 0; i < this->electronspectrumcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->electronspectrumcollection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCPDD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCPDD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCPDD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCPDD::MergeFrom(const RT_MS_PMCPDD& from) {
  GOOGLE_CHECK_NE(&from, this);
  primaryspectrumcollection_.MergeFrom(from.primaryspectrumcollection_);
  secondaryspectrumcollection_.MergeFrom(from.secondaryspectrumcollection_);
  electronspectrumcollection_.MergeFrom(from.electronspectrumcollection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primaryenergystart()) {
      set_primaryenergystart(from.primaryenergystart());
    }
    if (from.has_primaryenergyend()) {
      set_primaryenergyend(from.primaryenergyend());
    }
    if (from.has_primaryenergybin()) {
      set_primaryenergybin(from.primaryenergybin());
    }
    if (from.has_primaryenergyrestart()) {
      set_primaryenergyrestart(from.primaryenergyrestart());
    }
    if (from.has_secondaryenergystart()) {
      set_secondaryenergystart(from.secondaryenergystart());
    }
    if (from.has_secondaryenergyend()) {
      set_secondaryenergyend(from.secondaryenergyend());
    }
    if (from.has_secondaryenergybin()) {
      set_secondaryenergybin(from.secondaryenergybin());
    }
    if (from.has_secondaryenergyrestart()) {
      set_secondaryenergyrestart(from.secondaryenergyrestart());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_electronenergy()) {
      set_electronenergy(from.electronenergy());
    }
    if (from.has_particlenumber()) {
      set_particlenumber(from.particlenumber());
    }
    if (from.has_completefilesnumber()) {
      set_completefilesnumber(from.completefilesnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCPDD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCPDD::CopyFrom(const RT_MS_PMCPDD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCPDD::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCPDD::Swap(RT_MS_PMCPDD* other) {
  if (other != this) {
    std::swap(primaryenergystart_, other->primaryenergystart_);
    std::swap(primaryenergyend_, other->primaryenergyend_);
    std::swap(primaryenergybin_, other->primaryenergybin_);
    std::swap(primaryenergyrestart_, other->primaryenergyrestart_);
    std::swap(secondaryenergystart_, other->secondaryenergystart_);
    std::swap(secondaryenergyend_, other->secondaryenergyend_);
    std::swap(secondaryenergybin_, other->secondaryenergybin_);
    std::swap(secondaryenergyrestart_, other->secondaryenergyrestart_);
    std::swap(electronenergy_, other->electronenergy_);
    std::swap(particlenumber_, other->particlenumber_);
    primaryspectrumcollection_.Swap(&other->primaryspectrumcollection_);
    secondaryspectrumcollection_.Swap(&other->secondaryspectrumcollection_);
    electronspectrumcollection_.Swap(&other->electronspectrumcollection_);
    std::swap(completefilesnumber_, other->completefilesnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCPDD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCPDD_descriptor_;
  metadata.reflection = RT_MS_PMCPDD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCEnergyAndSpectrumList::kEnergyAndSpectrumListFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCEnergyAndSpectrumList::RT_MS_PMCEnergyAndSpectrumList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCEnergyAndSpectrumList::InitAsDefaultInstance() {
}

RT_MS_PMCEnergyAndSpectrumList::RT_MS_PMCEnergyAndSpectrumList(const RT_MS_PMCEnergyAndSpectrumList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCEnergyAndSpectrumList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCEnergyAndSpectrumList::~RT_MS_PMCEnergyAndSpectrumList() {
  SharedDtor();
}

void RT_MS_PMCEnergyAndSpectrumList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCEnergyAndSpectrumList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCEnergyAndSpectrumList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCEnergyAndSpectrumList_descriptor_;
}

const RT_MS_PMCEnergyAndSpectrumList& RT_MS_PMCEnergyAndSpectrumList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCEnergyAndSpectrumList* RT_MS_PMCEnergyAndSpectrumList::default_instance_ = NULL;

RT_MS_PMCEnergyAndSpectrumList* RT_MS_PMCEnergyAndSpectrumList::New() const {
  return new RT_MS_PMCEnergyAndSpectrumList;
}

void RT_MS_PMCEnergyAndSpectrumList::Clear() {
  energyandspectrumlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCEnergyAndSpectrumList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EnergyAndSpectrumList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_energyandspectrumlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EnergyAndSpectrumList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCEnergyAndSpectrumList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
  for (int i = 0; i < this->energyandspectrumlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->energyandspectrumlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCEnergyAndSpectrumList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
  for (int i = 0; i < this->energyandspectrumlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->energyandspectrumlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCEnergyAndSpectrumList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
  total_size += 1 * this->energyandspectrumlist_size();
  for (int i = 0; i < this->energyandspectrumlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->energyandspectrumlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCEnergyAndSpectrumList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCEnergyAndSpectrumList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCEnergyAndSpectrumList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCEnergyAndSpectrumList::MergeFrom(const RT_MS_PMCEnergyAndSpectrumList& from) {
  GOOGLE_CHECK_NE(&from, this);
  energyandspectrumlist_.MergeFrom(from.energyandspectrumlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCEnergyAndSpectrumList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCEnergyAndSpectrumList::CopyFrom(const RT_MS_PMCEnergyAndSpectrumList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCEnergyAndSpectrumList::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCEnergyAndSpectrumList::Swap(RT_MS_PMCEnergyAndSpectrumList* other) {
  if (other != this) {
    energyandspectrumlist_.Swap(&other->energyandspectrumlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCEnergyAndSpectrumList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCEnergyAndSpectrumList_descriptor_;
  metadata.reflection = RT_MS_PMCEnergyAndSpectrumList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCEnergyAndSpectrum::kEnergyFieldNumber;
const int RT_MS_PMCEnergyAndSpectrum::kWeightFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCEnergyAndSpectrum::RT_MS_PMCEnergyAndSpectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCEnergyAndSpectrum::InitAsDefaultInstance() {
}

RT_MS_PMCEnergyAndSpectrum::RT_MS_PMCEnergyAndSpectrum(const RT_MS_PMCEnergyAndSpectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCEnergyAndSpectrum::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCEnergyAndSpectrum::~RT_MS_PMCEnergyAndSpectrum() {
  SharedDtor();
}

void RT_MS_PMCEnergyAndSpectrum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCEnergyAndSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCEnergyAndSpectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCEnergyAndSpectrum_descriptor_;
}

const RT_MS_PMCEnergyAndSpectrum& RT_MS_PMCEnergyAndSpectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCEnergyAndSpectrum::default_instance_ = NULL;

RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCEnergyAndSpectrum::New() const {
  return new RT_MS_PMCEnergyAndSpectrum;
}

void RT_MS_PMCEnergyAndSpectrum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCEnergyAndSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float energy = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }
      
      // optional float weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCEnergyAndSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float energy = 1;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->energy(), output);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCEnergyAndSpectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float energy = 1;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->energy(), target);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCEnergyAndSpectrum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float energy = 1;
    if (has_energy()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCEnergyAndSpectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCEnergyAndSpectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCEnergyAndSpectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCEnergyAndSpectrum::MergeFrom(const RT_MS_PMCEnergyAndSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCEnergyAndSpectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCEnergyAndSpectrum::CopyFrom(const RT_MS_PMCEnergyAndSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCEnergyAndSpectrum::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCEnergyAndSpectrum::Swap(RT_MS_PMCEnergyAndSpectrum* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCEnergyAndSpectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCEnergyAndSpectrum_descriptor_;
  metadata.reflection = RT_MS_PMCEnergyAndSpectrum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCInField::kPrimarySoftenFieldNumber;
const int RT_MS_PMCInField::kSoftenParameterFieldNumber;
const int RT_MS_PMCInField::kSelectedSecondarySourceTypeFieldNumber;
const int RT_MS_PMCInField::kScatterSoftenFieldNumber;
const int RT_MS_PMCInField::kSecondarySourceParameterCollectionFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCInField::RT_MS_PMCInField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCInField::InitAsDefaultInstance() {
}

RT_MS_PMCInField::RT_MS_PMCInField(const RT_MS_PMCInField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCInField::SharedCtor() {
  _cached_size_ = 0;
  primarysoften_ = false;
  softenparameter_ = 0;
  selectedsecondarysourcetype_ = 0;
  scattersoften_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCInField::~RT_MS_PMCInField() {
  SharedDtor();
}

void RT_MS_PMCInField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCInField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCInField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCInField_descriptor_;
}

const RT_MS_PMCInField& RT_MS_PMCInField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCInField* RT_MS_PMCInField::default_instance_ = NULL;

RT_MS_PMCInField* RT_MS_PMCInField::New() const {
  return new RT_MS_PMCInField;
}

void RT_MS_PMCInField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    primarysoften_ = false;
    softenparameter_ = 0;
    selectedsecondarysourcetype_ = 0;
    scattersoften_ = false;
  }
  secondarysourceparametercollection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCInField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool primarySoften = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &primarysoften_)));
          set_has_primarysoften();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_softenParameter;
        break;
      }
      
      // optional float softenParameter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_softenParameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &softenparameter_)));
          set_has_softenparameter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_selectedSecondarySourceType;
        break;
      }
      
      // optional int32 selectedSecondarySourceType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selectedSecondarySourceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selectedsecondarysourcetype_)));
          set_has_selectedsecondarysourcetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_scatterSoften;
        break;
      }
      
      // optional bool scatterSoften = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scatterSoften:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &scattersoften_)));
          set_has_scattersoften();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_secondarySourceParameterCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondarySourceParameterCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_secondarysourceparametercollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_secondarySourceParameterCollection;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCInField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool primarySoften = 1;
  if (has_primarysoften()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->primarysoften(), output);
  }
  
  // optional float softenParameter = 2;
  if (has_softenparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->softenparameter(), output);
  }
  
  // optional int32 selectedSecondarySourceType = 4;
  if (has_selectedsecondarysourcetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->selectedsecondarysourcetype(), output);
  }
  
  // optional bool scatterSoften = 5;
  if (has_scattersoften()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->scattersoften(), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
  for (int i = 0; i < this->secondarysourceparametercollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->secondarysourceparametercollection(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCInField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool primarySoften = 1;
  if (has_primarysoften()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->primarysoften(), target);
  }
  
  // optional float softenParameter = 2;
  if (has_softenparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->softenparameter(), target);
  }
  
  // optional int32 selectedSecondarySourceType = 4;
  if (has_selectedsecondarysourcetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->selectedsecondarysourcetype(), target);
  }
  
  // optional bool scatterSoften = 5;
  if (has_scattersoften()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->scattersoften(), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
  for (int i = 0; i < this->secondarysourceparametercollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->secondarysourceparametercollection(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCInField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool primarySoften = 1;
    if (has_primarysoften()) {
      total_size += 1 + 1;
    }
    
    // optional float softenParameter = 2;
    if (has_softenparameter()) {
      total_size += 1 + 4;
    }
    
    // optional int32 selectedSecondarySourceType = 4;
    if (has_selectedsecondarysourcetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selectedsecondarysourcetype());
    }
    
    // optional bool scatterSoften = 5;
    if (has_scattersoften()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
  total_size += 1 * this->secondarysourceparametercollection_size();
  for (int i = 0; i < this->secondarysourceparametercollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->secondarysourceparametercollection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCInField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCInField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCInField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCInField::MergeFrom(const RT_MS_PMCInField& from) {
  GOOGLE_CHECK_NE(&from, this);
  secondarysourceparametercollection_.MergeFrom(from.secondarysourceparametercollection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_primarysoften()) {
      set_primarysoften(from.primarysoften());
    }
    if (from.has_softenparameter()) {
      set_softenparameter(from.softenparameter());
    }
    if (from.has_selectedsecondarysourcetype()) {
      set_selectedsecondarysourcetype(from.selectedsecondarysourcetype());
    }
    if (from.has_scattersoften()) {
      set_scattersoften(from.scattersoften());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCInField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCInField::CopyFrom(const RT_MS_PMCInField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCInField::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCInField::Swap(RT_MS_PMCInField* other) {
  if (other != this) {
    std::swap(primarysoften_, other->primarysoften_);
    std::swap(softenparameter_, other->softenparameter_);
    std::swap(selectedsecondarysourcetype_, other->selectedsecondarysourcetype_);
    std::swap(scattersoften_, other->scattersoften_);
    secondarysourceparametercollection_.Swap(&other->secondarysourceparametercollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCInField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCInField_descriptor_;
  metadata.reflection = RT_MS_PMCInField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCSecondarySourceParameter::kFlatFilterAFieldNumber;
const int RT_MS_PMCSecondarySourceParameter::kFlatFilterBFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCSecondarySourceParameter::RT_MS_PMCSecondarySourceParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCSecondarySourceParameter::InitAsDefaultInstance() {
}

RT_MS_PMCSecondarySourceParameter::RT_MS_PMCSecondarySourceParameter(const RT_MS_PMCSecondarySourceParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCSecondarySourceParameter::SharedCtor() {
  _cached_size_ = 0;
  flatfiltera_ = 0;
  flatfilterb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCSecondarySourceParameter::~RT_MS_PMCSecondarySourceParameter() {
  SharedDtor();
}

void RT_MS_PMCSecondarySourceParameter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCSecondarySourceParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCSecondarySourceParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCSecondarySourceParameter_descriptor_;
}

const RT_MS_PMCSecondarySourceParameter& RT_MS_PMCSecondarySourceParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCSecondarySourceParameter* RT_MS_PMCSecondarySourceParameter::default_instance_ = NULL;

RT_MS_PMCSecondarySourceParameter* RT_MS_PMCSecondarySourceParameter::New() const {
  return new RT_MS_PMCSecondarySourceParameter;
}

void RT_MS_PMCSecondarySourceParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flatfiltera_ = 0;
    flatfilterb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCSecondarySourceParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float flatFilterA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flatfiltera_)));
          set_has_flatfiltera();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_flatFilterB;
        break;
      }
      
      // optional float flatFilterB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_flatFilterB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flatfilterb_)));
          set_has_flatfilterb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCSecondarySourceParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float flatFilterA = 1;
  if (has_flatfiltera()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->flatfiltera(), output);
  }
  
  // optional float flatFilterB = 2;
  if (has_flatfilterb()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->flatfilterb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCSecondarySourceParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float flatFilterA = 1;
  if (has_flatfiltera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->flatfiltera(), target);
  }
  
  // optional float flatFilterB = 2;
  if (has_flatfilterb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->flatfilterb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCSecondarySourceParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float flatFilterA = 1;
    if (has_flatfiltera()) {
      total_size += 1 + 4;
    }
    
    // optional float flatFilterB = 2;
    if (has_flatfilterb()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCSecondarySourceParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCSecondarySourceParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCSecondarySourceParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCSecondarySourceParameter::MergeFrom(const RT_MS_PMCSecondarySourceParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flatfiltera()) {
      set_flatfiltera(from.flatfiltera());
    }
    if (from.has_flatfilterb()) {
      set_flatfilterb(from.flatfilterb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCSecondarySourceParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCSecondarySourceParameter::CopyFrom(const RT_MS_PMCSecondarySourceParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCSecondarySourceParameter::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCSecondarySourceParameter::Swap(RT_MS_PMCSecondarySourceParameter* other) {
  if (other != this) {
    std::swap(flatfiltera_, other->flatfiltera_);
    std::swap(flatfilterb_, other->flatfilterb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCSecondarySourceParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCSecondarySourceParameter_descriptor_;
  metadata.reflection = RT_MS_PMCSecondarySourceParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCOutField::kFlatDistanceFieldNumber;
const int RT_MS_PMCOutField::kJawDistanceFieldNumber;
const int RT_MS_PMCOutField::kSigmaPFieldNumber;
const int RT_MS_PMCOutField::kSigmaSFieldNumber;
const int RT_MS_PMCOutField::kTailCorrectionFieldNumber;
const int RT_MS_PMCOutField::kRectangleScatterCorrectionFieldNumber;
const int RT_MS_PMCOutField::kMlcLeakageFieldNumber;
const int RT_MS_PMCOutField::kGaussianBlurSwitchFieldNumber;
const int RT_MS_PMCOutField::kGaussianSigmaXFieldNumber;
const int RT_MS_PMCOutField::kGaussianSigmaYFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCOutField::RT_MS_PMCOutField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCOutField::InitAsDefaultInstance() {
}

RT_MS_PMCOutField::RT_MS_PMCOutField(const RT_MS_PMCOutField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCOutField::SharedCtor() {
  _cached_size_ = 0;
  flatdistance_ = 0;
  jawdistance_ = 0;
  sigmap_ = 0;
  sigmas_ = 0;
  tailcorrection_ = 0;
  rectanglescattercorrection_ = 0;
  mlcleakage_ = 0;
  gaussianblurswitch_ = false;
  gaussiansigmax_ = 0;
  gaussiansigmay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCOutField::~RT_MS_PMCOutField() {
  SharedDtor();
}

void RT_MS_PMCOutField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCOutField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCOutField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCOutField_descriptor_;
}

const RT_MS_PMCOutField& RT_MS_PMCOutField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCOutField* RT_MS_PMCOutField::default_instance_ = NULL;

RT_MS_PMCOutField* RT_MS_PMCOutField::New() const {
  return new RT_MS_PMCOutField;
}

void RT_MS_PMCOutField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flatdistance_ = 0;
    jawdistance_ = 0;
    sigmap_ = 0;
    sigmas_ = 0;
    tailcorrection_ = 0;
    rectanglescattercorrection_ = 0;
    mlcleakage_ = 0;
    gaussianblurswitch_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gaussiansigmax_ = 0;
    gaussiansigmay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCOutField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float flatDistance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flatdistance_)));
          set_has_flatdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_jawDistance;
        break;
      }
      
      // optional float jawDistance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jawDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jawdistance_)));
          set_has_jawdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sigmaP;
        break;
      }
      
      // optional float sigmaP = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sigmaP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmap_)));
          set_has_sigmap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sigmaS;
        break;
      }
      
      // optional float sigmaS = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sigmaS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmas_)));
          set_has_sigmas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_tailCorrection;
        break;
      }
      
      // optional float tailCorrection = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tailCorrection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tailcorrection_)));
          set_has_tailcorrection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rectangleScatterCorrection;
        break;
      }
      
      // optional float rectangleScatterCorrection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rectangleScatterCorrection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rectanglescattercorrection_)));
          set_has_rectanglescattercorrection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mlcLeakage;
        break;
      }
      
      // optional float mlcLeakage = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mlcLeakage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mlcleakage_)));
          set_has_mlcleakage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_gaussianBlurSwitch;
        break;
      }
      
      // optional bool gaussianBlurSwitch = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gaussianBlurSwitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gaussianblurswitch_)));
          set_has_gaussianblurswitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_gaussianSigmaX;
        break;
      }
      
      // optional float gaussianSigmaX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gaussianSigmaX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussiansigmax_)));
          set_has_gaussiansigmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_gaussianSigmaY;
        break;
      }
      
      // optional float gaussianSigmaY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gaussianSigmaY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gaussiansigmay_)));
          set_has_gaussiansigmay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCOutField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float flatDistance = 1;
  if (has_flatdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->flatdistance(), output);
  }
  
  // optional float jawDistance = 2;
  if (has_jawdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->jawdistance(), output);
  }
  
  // optional float sigmaP = 3;
  if (has_sigmap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sigmap(), output);
  }
  
  // optional float sigmaS = 4;
  if (has_sigmas()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sigmas(), output);
  }
  
  // optional float tailCorrection = 5;
  if (has_tailcorrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->tailcorrection(), output);
  }
  
  // optional float rectangleScatterCorrection = 6;
  if (has_rectanglescattercorrection()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rectanglescattercorrection(), output);
  }
  
  // optional float mlcLeakage = 7;
  if (has_mlcleakage()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mlcleakage(), output);
  }
  
  // optional bool gaussianBlurSwitch = 8;
  if (has_gaussianblurswitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gaussianblurswitch(), output);
  }
  
  // optional float gaussianSigmaX = 9;
  if (has_gaussiansigmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->gaussiansigmax(), output);
  }
  
  // optional float gaussianSigmaY = 10;
  if (has_gaussiansigmay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->gaussiansigmay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCOutField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float flatDistance = 1;
  if (has_flatdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->flatdistance(), target);
  }
  
  // optional float jawDistance = 2;
  if (has_jawdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->jawdistance(), target);
  }
  
  // optional float sigmaP = 3;
  if (has_sigmap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sigmap(), target);
  }
  
  // optional float sigmaS = 4;
  if (has_sigmas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sigmas(), target);
  }
  
  // optional float tailCorrection = 5;
  if (has_tailcorrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->tailcorrection(), target);
  }
  
  // optional float rectangleScatterCorrection = 6;
  if (has_rectanglescattercorrection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rectanglescattercorrection(), target);
  }
  
  // optional float mlcLeakage = 7;
  if (has_mlcleakage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mlcleakage(), target);
  }
  
  // optional bool gaussianBlurSwitch = 8;
  if (has_gaussianblurswitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gaussianblurswitch(), target);
  }
  
  // optional float gaussianSigmaX = 9;
  if (has_gaussiansigmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->gaussiansigmax(), target);
  }
  
  // optional float gaussianSigmaY = 10;
  if (has_gaussiansigmay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->gaussiansigmay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCOutField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float flatDistance = 1;
    if (has_flatdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float jawDistance = 2;
    if (has_jawdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float sigmaP = 3;
    if (has_sigmap()) {
      total_size += 1 + 4;
    }
    
    // optional float sigmaS = 4;
    if (has_sigmas()) {
      total_size += 1 + 4;
    }
    
    // optional float tailCorrection = 5;
    if (has_tailcorrection()) {
      total_size += 1 + 4;
    }
    
    // optional float rectangleScatterCorrection = 6;
    if (has_rectanglescattercorrection()) {
      total_size += 1 + 4;
    }
    
    // optional float mlcLeakage = 7;
    if (has_mlcleakage()) {
      total_size += 1 + 4;
    }
    
    // optional bool gaussianBlurSwitch = 8;
    if (has_gaussianblurswitch()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float gaussianSigmaX = 9;
    if (has_gaussiansigmax()) {
      total_size += 1 + 4;
    }
    
    // optional float gaussianSigmaY = 10;
    if (has_gaussiansigmay()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCOutField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCOutField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCOutField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCOutField::MergeFrom(const RT_MS_PMCOutField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flatdistance()) {
      set_flatdistance(from.flatdistance());
    }
    if (from.has_jawdistance()) {
      set_jawdistance(from.jawdistance());
    }
    if (from.has_sigmap()) {
      set_sigmap(from.sigmap());
    }
    if (from.has_sigmas()) {
      set_sigmas(from.sigmas());
    }
    if (from.has_tailcorrection()) {
      set_tailcorrection(from.tailcorrection());
    }
    if (from.has_rectanglescattercorrection()) {
      set_rectanglescattercorrection(from.rectanglescattercorrection());
    }
    if (from.has_mlcleakage()) {
      set_mlcleakage(from.mlcleakage());
    }
    if (from.has_gaussianblurswitch()) {
      set_gaussianblurswitch(from.gaussianblurswitch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gaussiansigmax()) {
      set_gaussiansigmax(from.gaussiansigmax());
    }
    if (from.has_gaussiansigmay()) {
      set_gaussiansigmay(from.gaussiansigmay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCOutField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCOutField::CopyFrom(const RT_MS_PMCOutField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCOutField::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCOutField::Swap(RT_MS_PMCOutField* other) {
  if (other != this) {
    std::swap(flatdistance_, other->flatdistance_);
    std::swap(jawdistance_, other->jawdistance_);
    std::swap(sigmap_, other->sigmap_);
    std::swap(sigmas_, other->sigmas_);
    std::swap(tailcorrection_, other->tailcorrection_);
    std::swap(rectanglescattercorrection_, other->rectanglescattercorrection_);
    std::swap(mlcleakage_, other->mlcleakage_);
    std::swap(gaussianblurswitch_, other->gaussianblurswitch_);
    std::swap(gaussiansigmax_, other->gaussiansigmax_);
    std::swap(gaussiansigmay_, other->gaussiansigmay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCOutField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCOutField_descriptor_;
  metadata.reflection = RT_MS_PMCOutField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCElectronContamination::kStandardRadiusFieldNumber;
const int RT_MS_PMCElectronContamination::kSigmaFieldNumber;
const int RT_MS_PMCElectronContamination::kOffsetFieldNumber;
const int RT_MS_PMCElectronContamination::kPowerFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCElectronContamination::RT_MS_PMCElectronContamination()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCElectronContamination::InitAsDefaultInstance() {
}

RT_MS_PMCElectronContamination::RT_MS_PMCElectronContamination(const RT_MS_PMCElectronContamination& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCElectronContamination::SharedCtor() {
  _cached_size_ = 0;
  standardradius_ = 0;
  sigma_ = 0;
  offset_ = 0;
  powerfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCElectronContamination::~RT_MS_PMCElectronContamination() {
  SharedDtor();
}

void RT_MS_PMCElectronContamination::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCElectronContamination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCElectronContamination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCElectronContamination_descriptor_;
}

const RT_MS_PMCElectronContamination& RT_MS_PMCElectronContamination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCElectronContamination* RT_MS_PMCElectronContamination::default_instance_ = NULL;

RT_MS_PMCElectronContamination* RT_MS_PMCElectronContamination::New() const {
  return new RT_MS_PMCElectronContamination;
}

void RT_MS_PMCElectronContamination::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    standardradius_ = 0;
    sigma_ = 0;
    offset_ = 0;
    powerfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCElectronContamination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float standardRadius = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &standardradius_)));
          set_has_standardradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sigma;
        break;
      }
      
      // optional float sigma = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sigma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigma_)));
          set_has_sigma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offset;
        break;
      }
      
      // optional float offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_powerFactor;
        break;
      }
      
      // optional float powerFactor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_powerFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &powerfactor_)));
          set_has_powerfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCElectronContamination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float standardRadius = 1;
  if (has_standardradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->standardradius(), output);
  }
  
  // optional float sigma = 2;
  if (has_sigma()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sigma(), output);
  }
  
  // optional float offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset(), output);
  }
  
  // optional float powerFactor = 4;
  if (has_powerfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->powerfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCElectronContamination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float standardRadius = 1;
  if (has_standardradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->standardradius(), target);
  }
  
  // optional float sigma = 2;
  if (has_sigma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sigma(), target);
  }
  
  // optional float offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset(), target);
  }
  
  // optional float powerFactor = 4;
  if (has_powerfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->powerfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCElectronContamination::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float standardRadius = 1;
    if (has_standardradius()) {
      total_size += 1 + 4;
    }
    
    // optional float sigma = 2;
    if (has_sigma()) {
      total_size += 1 + 4;
    }
    
    // optional float offset = 3;
    if (has_offset()) {
      total_size += 1 + 4;
    }
    
    // optional float powerFactor = 4;
    if (has_powerfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCElectronContamination::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCElectronContamination* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCElectronContamination*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCElectronContamination::MergeFrom(const RT_MS_PMCElectronContamination& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_standardradius()) {
      set_standardradius(from.standardradius());
    }
    if (from.has_sigma()) {
      set_sigma(from.sigma());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_powerfactor()) {
      set_powerfactor(from.powerfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCElectronContamination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCElectronContamination::CopyFrom(const RT_MS_PMCElectronContamination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCElectronContamination::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCElectronContamination::Swap(RT_MS_PMCElectronContamination* other) {
  if (other != this) {
    std::swap(standardradius_, other->standardradius_);
    std::swap(sigma_, other->sigma_);
    std::swap(offset_, other->offset_);
    std::swap(powerfactor_, other->powerfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCElectronContamination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCElectronContamination_descriptor_;
  metadata.reflection = RT_MS_PMCElectronContamination_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCAbsoluteDose::kNorm10DoseFieldNumber;
const int RT_MS_PMCAbsoluteDose::kAbsoluteDoseCollectionStrFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCAbsoluteDose::RT_MS_PMCAbsoluteDose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCAbsoluteDose::InitAsDefaultInstance() {
}

RT_MS_PMCAbsoluteDose::RT_MS_PMCAbsoluteDose(const RT_MS_PMCAbsoluteDose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCAbsoluteDose::SharedCtor() {
  _cached_size_ = 0;
  norm10dose_ = 0;
  absolutedosecollectionstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCAbsoluteDose::~RT_MS_PMCAbsoluteDose() {
  SharedDtor();
}

void RT_MS_PMCAbsoluteDose::SharedDtor() {
  if (absolutedosecollectionstr_ != &::google::protobuf::internal::kEmptyString) {
    delete absolutedosecollectionstr_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PMCAbsoluteDose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCAbsoluteDose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCAbsoluteDose_descriptor_;
}

const RT_MS_PMCAbsoluteDose& RT_MS_PMCAbsoluteDose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCAbsoluteDose* RT_MS_PMCAbsoluteDose::default_instance_ = NULL;

RT_MS_PMCAbsoluteDose* RT_MS_PMCAbsoluteDose::New() const {
  return new RT_MS_PMCAbsoluteDose;
}

void RT_MS_PMCAbsoluteDose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    norm10dose_ = 0;
    if (has_absolutedosecollectionstr()) {
      if (absolutedosecollectionstr_ != &::google::protobuf::internal::kEmptyString) {
        absolutedosecollectionstr_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCAbsoluteDose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float norm10Dose = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &norm10dose_)));
          set_has_norm10dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_absoluteDoseCollectionStr;
        break;
      }
      
      // optional string absoluteDoseCollectionStr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absoluteDoseCollectionStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolutedosecollectionstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolutedosecollectionstr().data(), this->absolutedosecollectionstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCAbsoluteDose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float norm10Dose = 1;
  if (has_norm10dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->norm10dose(), output);
  }
  
  // optional string absoluteDoseCollectionStr = 2;
  if (has_absolutedosecollectionstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolutedosecollectionstr().data(), this->absolutedosecollectionstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->absolutedosecollectionstr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCAbsoluteDose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float norm10Dose = 1;
  if (has_norm10dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->norm10dose(), target);
  }
  
  // optional string absoluteDoseCollectionStr = 2;
  if (has_absolutedosecollectionstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolutedosecollectionstr().data(), this->absolutedosecollectionstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->absolutedosecollectionstr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCAbsoluteDose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float norm10Dose = 1;
    if (has_norm10dose()) {
      total_size += 1 + 4;
    }
    
    // optional string absoluteDoseCollectionStr = 2;
    if (has_absolutedosecollectionstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolutedosecollectionstr());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCAbsoluteDose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCAbsoluteDose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCAbsoluteDose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCAbsoluteDose::MergeFrom(const RT_MS_PMCAbsoluteDose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_norm10dose()) {
      set_norm10dose(from.norm10dose());
    }
    if (from.has_absolutedosecollectionstr()) {
      set_absolutedosecollectionstr(from.absolutedosecollectionstr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCAbsoluteDose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCAbsoluteDose::CopyFrom(const RT_MS_PMCAbsoluteDose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCAbsoluteDose::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCAbsoluteDose::Swap(RT_MS_PMCAbsoluteDose* other) {
  if (other != this) {
    std::swap(norm10dose_, other->norm10dose_);
    std::swap(absolutedosecollectionstr_, other->absolutedosecollectionstr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCAbsoluteDose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCAbsoluteDose_descriptor_;
  metadata.reflection = RT_MS_PMCAbsoluteDose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCWedgeField::kVirtualWedgeCollectionFieldNumber;
const int RT_MS_PMCWedgeField::kPhysicalWedgeCollectionFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCWedgeField::RT_MS_PMCWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCWedgeField::InitAsDefaultInstance() {
}

RT_MS_PMCWedgeField::RT_MS_PMCWedgeField(const RT_MS_PMCWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCWedgeField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCWedgeField::~RT_MS_PMCWedgeField() {
  SharedDtor();
}

void RT_MS_PMCWedgeField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCWedgeField_descriptor_;
}

const RT_MS_PMCWedgeField& RT_MS_PMCWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCWedgeField* RT_MS_PMCWedgeField::default_instance_ = NULL;

RT_MS_PMCWedgeField* RT_MS_PMCWedgeField::New() const {
  return new RT_MS_PMCWedgeField;
}

void RT_MS_PMCWedgeField::Clear() {
  virtualwedgecollection_.Clear();
  physicalwedgecollection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgecollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_virtualWedgeCollection;
        if (input->ExpectTag(18)) goto parse_PhysicalWedgeCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PhysicalWedgeCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicalwedgecollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PhysicalWedgeCollection;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
  for (int i = 0; i < this->virtualwedgecollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->virtualwedgecollection(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
  for (int i = 0; i < this->physicalwedgecollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->physicalwedgecollection(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
  for (int i = 0; i < this->virtualwedgecollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->virtualwedgecollection(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
  for (int i = 0; i < this->physicalwedgecollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->physicalwedgecollection(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCWedgeField::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
  total_size += 1 * this->virtualwedgecollection_size();
  for (int i = 0; i < this->virtualwedgecollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgecollection(i));
  }
  
  // repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
  total_size += 1 * this->physicalwedgecollection_size();
  for (int i = 0; i < this->physicalwedgecollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicalwedgecollection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCWedgeField::MergeFrom(const RT_MS_PMCWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgecollection_.MergeFrom(from.virtualwedgecollection_);
  physicalwedgecollection_.MergeFrom(from.physicalwedgecollection_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCWedgeField::CopyFrom(const RT_MS_PMCWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCWedgeField::Swap(RT_MS_PMCWedgeField* other) {
  if (other != this) {
    virtualwedgecollection_.Swap(&other->virtualwedgecollection_);
    physicalwedgecollection_.Swap(&other->physicalwedgecollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCWedgeField_descriptor_;
  metadata.reflection = RT_MS_PMCWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCVirtualWedge::kWedgeUIDFieldNumber;
const int RT_MS_PMCVirtualWedge::kWedgeNameFieldNumber;
const int RT_MS_PMCVirtualWedge::kCollimatorFixedPositionFieldNumber;
const int RT_MS_PMCVirtualWedge::kVirtualWedgeTableItemCollectionFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCVirtualWedge::RT_MS_PMCVirtualWedge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCVirtualWedge::InitAsDefaultInstance() {
}

RT_MS_PMCVirtualWedge::RT_MS_PMCVirtualWedge(const RT_MS_PMCVirtualWedge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCVirtualWedge::SharedCtor() {
  _cached_size_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collimatorfixedposition_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCVirtualWedge::~RT_MS_PMCVirtualWedge() {
  SharedDtor();
}

void RT_MS_PMCVirtualWedge::SharedDtor() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgename_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PMCVirtualWedge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCVirtualWedge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCVirtualWedge_descriptor_;
}

const RT_MS_PMCVirtualWedge& RT_MS_PMCVirtualWedge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCVirtualWedge* RT_MS_PMCVirtualWedge::default_instance_ = NULL;

RT_MS_PMCVirtualWedge* RT_MS_PMCVirtualWedge::New() const {
  return new RT_MS_PMCVirtualWedge;
}

void RT_MS_PMCVirtualWedge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    if (has_wedgename()) {
      if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
        wedgename_->clear();
      }
    }
    collimatorfixedposition_ = 0;
  }
  virtualwedgetableitemcollection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCVirtualWedge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedgeName;
        break;
      }
      
      // optional string wedgeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgename().data(), this->wedgename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_collimatorFixedPosition;
        break;
      }
      
      // optional float collimatorFixedPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorFixedPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorfixedposition_)));
          set_has_collimatorfixedposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeTableItemCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeTableItemCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgetableitemcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeTableItemCollection;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCVirtualWedge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgeuid(), output);
  }
  
  // optional string wedgeName = 2;
  if (has_wedgename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgename().data(), this->wedgename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedgename(), output);
  }
  
  // optional float collimatorFixedPosition = 3;
  if (has_collimatorfixedposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->collimatorfixedposition(), output);
  }
  
  // repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
  for (int i = 0; i < this->virtualwedgetableitemcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->virtualwedgetableitemcollection(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCVirtualWedge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgeuid(), target);
  }
  
  // optional string wedgeName = 2;
  if (has_wedgename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgename().data(), this->wedgename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedgename(), target);
  }
  
  // optional float collimatorFixedPosition = 3;
  if (has_collimatorfixedposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->collimatorfixedposition(), target);
  }
  
  // repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
  for (int i = 0; i < this->virtualwedgetableitemcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->virtualwedgetableitemcollection(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCVirtualWedge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeUID = 1;
    if (has_wedgeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional string wedgeName = 2;
    if (has_wedgename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgename());
    }
    
    // optional float collimatorFixedPosition = 3;
    if (has_collimatorfixedposition()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
  total_size += 1 * this->virtualwedgetableitemcollection_size();
  for (int i = 0; i < this->virtualwedgetableitemcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgetableitemcollection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCVirtualWedge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCVirtualWedge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCVirtualWedge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCVirtualWedge::MergeFrom(const RT_MS_PMCVirtualWedge& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgetableitemcollection_.MergeFrom(from.virtualwedgetableitemcollection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_wedgename()) {
      set_wedgename(from.wedgename());
    }
    if (from.has_collimatorfixedposition()) {
      set_collimatorfixedposition(from.collimatorfixedposition());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCVirtualWedge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCVirtualWedge::CopyFrom(const RT_MS_PMCVirtualWedge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCVirtualWedge::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCVirtualWedge::Swap(RT_MS_PMCVirtualWedge* other) {
  if (other != this) {
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(wedgename_, other->wedgename_);
    std::swap(collimatorfixedposition_, other->collimatorfixedposition_);
    virtualwedgetableitemcollection_.Swap(&other->virtualwedgetableitemcollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCVirtualWedge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCVirtualWedge_descriptor_;
  metadata.reflection = RT_MS_PMCVirtualWedge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCVirtualWedgeTable::kCollimatorMovingPositionFieldNumber;
const int RT_MS_PMCVirtualWedgeTable::kRelativeMUFieldNumber;
const int RT_MS_PMCVirtualWedgeTable::kCorrectionFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCVirtualWedgeTable::RT_MS_PMCVirtualWedgeTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCVirtualWedgeTable::InitAsDefaultInstance() {
}

RT_MS_PMCVirtualWedgeTable::RT_MS_PMCVirtualWedgeTable(const RT_MS_PMCVirtualWedgeTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCVirtualWedgeTable::SharedCtor() {
  _cached_size_ = 0;
  collimatormovingposition_ = 0;
  relativemu_ = 0;
  correctionfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCVirtualWedgeTable::~RT_MS_PMCVirtualWedgeTable() {
  SharedDtor();
}

void RT_MS_PMCVirtualWedgeTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_PMCVirtualWedgeTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCVirtualWedgeTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCVirtualWedgeTable_descriptor_;
}

const RT_MS_PMCVirtualWedgeTable& RT_MS_PMCVirtualWedgeTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCVirtualWedgeTable* RT_MS_PMCVirtualWedgeTable::default_instance_ = NULL;

RT_MS_PMCVirtualWedgeTable* RT_MS_PMCVirtualWedgeTable::New() const {
  return new RT_MS_PMCVirtualWedgeTable;
}

void RT_MS_PMCVirtualWedgeTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    collimatormovingposition_ = 0;
    relativemu_ = 0;
    correctionfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCVirtualWedgeTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float collimatorMovingPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatormovingposition_)));
          set_has_collimatormovingposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_relativeMU;
        break;
      }
      
      // optional float relativeMU = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeMU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativemu_)));
          set_has_relativemu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_correctionFactor;
        break;
      }
      
      // optional float correctionFactor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_correctionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correctionfactor_)));
          set_has_correctionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCVirtualWedgeTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float collimatorMovingPosition = 1;
  if (has_collimatormovingposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->collimatormovingposition(), output);
  }
  
  // optional float relativeMU = 2;
  if (has_relativemu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relativemu(), output);
  }
  
  // optional float correctionFactor = 3;
  if (has_correctionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->correctionfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCVirtualWedgeTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float collimatorMovingPosition = 1;
  if (has_collimatormovingposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->collimatormovingposition(), target);
  }
  
  // optional float relativeMU = 2;
  if (has_relativemu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->relativemu(), target);
  }
  
  // optional float correctionFactor = 3;
  if (has_correctionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->correctionfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCVirtualWedgeTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float collimatorMovingPosition = 1;
    if (has_collimatormovingposition()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeMU = 2;
    if (has_relativemu()) {
      total_size += 1 + 4;
    }
    
    // optional float correctionFactor = 3;
    if (has_correctionfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCVirtualWedgeTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCVirtualWedgeTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCVirtualWedgeTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCVirtualWedgeTable::MergeFrom(const RT_MS_PMCVirtualWedgeTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_collimatormovingposition()) {
      set_collimatormovingposition(from.collimatormovingposition());
    }
    if (from.has_relativemu()) {
      set_relativemu(from.relativemu());
    }
    if (from.has_correctionfactor()) {
      set_correctionfactor(from.correctionfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCVirtualWedgeTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCVirtualWedgeTable::CopyFrom(const RT_MS_PMCVirtualWedgeTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCVirtualWedgeTable::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCVirtualWedgeTable::Swap(RT_MS_PMCVirtualWedgeTable* other) {
  if (other != this) {
    std::swap(collimatormovingposition_, other->collimatormovingposition_);
    std::swap(relativemu_, other->relativemu_);
    std::swap(correctionfactor_, other->correctionfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCVirtualWedgeTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCVirtualWedgeTable_descriptor_;
  metadata.reflection = RT_MS_PMCVirtualWedgeTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PMCPhysicalWedge::kWedgeUIDFieldNumber;
const int RT_MS_PMCPhysicalWedge::kWedgeNameFieldNumber;
const int RT_MS_PMCPhysicalWedge::kWedgeThicknessFieldNumber;
const int RT_MS_PMCPhysicalWedge::kContourVertexPointCollectionFieldNumber;
const int RT_MS_PMCPhysicalWedge::kCarrierThicknessFieldNumber;
const int RT_MS_PMCPhysicalWedge::kCarrierContourVertexPointCollectionFieldNumber;
#endif  // !_MSC_VER

RT_MS_PMCPhysicalWedge::RT_MS_PMCPhysicalWedge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PMCPhysicalWedge::InitAsDefaultInstance() {
}

RT_MS_PMCPhysicalWedge::RT_MS_PMCPhysicalWedge(const RT_MS_PMCPhysicalWedge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PMCPhysicalWedge::SharedCtor() {
  _cached_size_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgethickness_ = 0;
  carrierthickness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PMCPhysicalWedge::~RT_MS_PMCPhysicalWedge() {
  SharedDtor();
}

void RT_MS_PMCPhysicalWedge::SharedDtor() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgename_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PMCPhysicalWedge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PMCPhysicalWedge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PMCPhysicalWedge_descriptor_;
}

const RT_MS_PMCPhysicalWedge& RT_MS_PMCPhysicalWedge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PMCPhysicalWedge* RT_MS_PMCPhysicalWedge::default_instance_ = NULL;

RT_MS_PMCPhysicalWedge* RT_MS_PMCPhysicalWedge::New() const {
  return new RT_MS_PMCPhysicalWedge;
}

void RT_MS_PMCPhysicalWedge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    if (has_wedgename()) {
      if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
        wedgename_->clear();
      }
    }
    wedgethickness_ = 0;
    carrierthickness_ = 0;
  }
  contourvertexpointcollection_.Clear();
  carriercontourvertexpointcollection_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PMCPhysicalWedge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedgeName;
        break;
      }
      
      // optional string wedgeName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgename().data(), this->wedgename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_wedgeThickness;
        break;
      }
      
      // optional float wedgeThickness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgeThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgethickness_)));
          set_has_wedgethickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ContourVertexPointCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ContourVertexPointCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_contourvertexpointcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ContourVertexPointCollection;
        if (input->ExpectTag(45)) goto parse_carrierThickness;
        break;
      }
      
      // optional float carrierThickness = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carrierThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierthickness_)));
          set_has_carrierthickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_carrierContourVertexPointCollection;
        break;
      }
      
      // repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierContourVertexPointCollection:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carriercontourvertexpointcollection()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_carrierContourVertexPointCollection;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PMCPhysicalWedge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgeuid(), output);
  }
  
  // optional string wedgeName = 2;
  if (has_wedgename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgename().data(), this->wedgename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedgename(), output);
  }
  
  // optional float wedgeThickness = 3;
  if (has_wedgethickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wedgethickness(), output);
  }
  
  // repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
  for (int i = 0; i < this->contourvertexpointcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->contourvertexpointcollection(i), output);
  }
  
  // optional float carrierThickness = 5;
  if (has_carrierthickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->carrierthickness(), output);
  }
  
  // repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
  for (int i = 0; i < this->carriercontourvertexpointcollection_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->carriercontourvertexpointcollection(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PMCPhysicalWedge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgeuid(), target);
  }
  
  // optional string wedgeName = 2;
  if (has_wedgename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgename().data(), this->wedgename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedgename(), target);
  }
  
  // optional float wedgeThickness = 3;
  if (has_wedgethickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->wedgethickness(), target);
  }
  
  // repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
  for (int i = 0; i < this->contourvertexpointcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->contourvertexpointcollection(i), target);
  }
  
  // optional float carrierThickness = 5;
  if (has_carrierthickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->carrierthickness(), target);
  }
  
  // repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
  for (int i = 0; i < this->carriercontourvertexpointcollection_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->carriercontourvertexpointcollection(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PMCPhysicalWedge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeUID = 1;
    if (has_wedgeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional string wedgeName = 2;
    if (has_wedgename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgename());
    }
    
    // optional float wedgeThickness = 3;
    if (has_wedgethickness()) {
      total_size += 1 + 4;
    }
    
    // optional float carrierThickness = 5;
    if (has_carrierthickness()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
  total_size += 1 * this->contourvertexpointcollection_size();
  for (int i = 0; i < this->contourvertexpointcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->contourvertexpointcollection(i));
  }
  
  // repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
  total_size += 1 * this->carriercontourvertexpointcollection_size();
  for (int i = 0; i < this->carriercontourvertexpointcollection_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carriercontourvertexpointcollection(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PMCPhysicalWedge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PMCPhysicalWedge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PMCPhysicalWedge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PMCPhysicalWedge::MergeFrom(const RT_MS_PMCPhysicalWedge& from) {
  GOOGLE_CHECK_NE(&from, this);
  contourvertexpointcollection_.MergeFrom(from.contourvertexpointcollection_);
  carriercontourvertexpointcollection_.MergeFrom(from.carriercontourvertexpointcollection_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_wedgename()) {
      set_wedgename(from.wedgename());
    }
    if (from.has_wedgethickness()) {
      set_wedgethickness(from.wedgethickness());
    }
    if (from.has_carrierthickness()) {
      set_carrierthickness(from.carrierthickness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PMCPhysicalWedge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PMCPhysicalWedge::CopyFrom(const RT_MS_PMCPhysicalWedge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PMCPhysicalWedge::IsInitialized() const {
  
  return true;
}

void RT_MS_PMCPhysicalWedge::Swap(RT_MS_PMCPhysicalWedge* other) {
  if (other != this) {
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(wedgename_, other->wedgename_);
    std::swap(wedgethickness_, other->wedgethickness_);
    contourvertexpointcollection_.Swap(&other->contourvertexpointcollection_);
    std::swap(carrierthickness_, other->carrierthickness_);
    carriercontourvertexpointcollection_.Swap(&other->carriercontourvertexpointcollection_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PMCPhysicalWedge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PMCPhysicalWedge_descriptor_;
  metadata.reflection = RT_MS_PMCPhysicalWedge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_Point2D::kXFieldNumber;
const int RT_MS_Point2D::kYFieldNumber;
#endif  // !_MSC_VER

RT_MS_Point2D::RT_MS_Point2D()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_Point2D::InitAsDefaultInstance() {
}

RT_MS_Point2D::RT_MS_Point2D(const RT_MS_Point2D& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_Point2D::~RT_MS_Point2D() {
  SharedDtor();
}

void RT_MS_Point2D::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_Point2D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_Point2D_descriptor_;
}

const RT_MS_Point2D& RT_MS_Point2D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_Point2D* RT_MS_Point2D::default_instance_ = NULL;

RT_MS_Point2D* RT_MS_Point2D::New() const {
  return new RT_MS_Point2D;
}

void RT_MS_Point2D::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }
      
      // optional float Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_Point2D::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_Point2D::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float Y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_Point2D::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_Point2D* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_Point2D*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_Point2D::MergeFrom(const RT_MS_Point2D& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_Point2D::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_Point2D::CopyFrom(const RT_MS_Point2D& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_Point2D::IsInitialized() const {
  
  return true;
}

void RT_MS_Point2D::Swap(RT_MS_Point2D* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_Point2D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_Point2D_descriptor_;
  metadata.reflection = RT_MS_Point2D_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PhotonMonteCarloInformation::kCommissionUIDFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kPDDParameterFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kInFieldParameterFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kOutFieldParameterFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kElectronContaminationParameterFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kAbsoluteDoseParameterFieldNumber;
const int RT_MS_PhotonMonteCarloInformation::kWedgeFieldParameterFieldNumber;
#endif  // !_MSC_VER

RT_MS_PhotonMonteCarloInformation::RT_MS_PhotonMonteCarloInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PhotonMonteCarloInformation::InitAsDefaultInstance() {
  pddparameter_ = const_cast< ::ms::proto::RT_MS_PMCPDD*>(&::ms::proto::RT_MS_PMCPDD::default_instance());
  infieldparameter_ = const_cast< ::ms::proto::RT_MS_PMCInField*>(&::ms::proto::RT_MS_PMCInField::default_instance());
  outfieldparameter_ = const_cast< ::ms::proto::RT_MS_PMCOutField*>(&::ms::proto::RT_MS_PMCOutField::default_instance());
  electroncontaminationparameter_ = const_cast< ::ms::proto::RT_MS_PMCElectronContamination*>(&::ms::proto::RT_MS_PMCElectronContamination::default_instance());
  absolutedoseparameter_ = const_cast< ::ms::proto::RT_MS_PMCAbsoluteDose*>(&::ms::proto::RT_MS_PMCAbsoluteDose::default_instance());
  wedgefieldparameter_ = const_cast< ::ms::proto::RT_MS_PMCWedgeField*>(&::ms::proto::RT_MS_PMCWedgeField::default_instance());
}

RT_MS_PhotonMonteCarloInformation::RT_MS_PhotonMonteCarloInformation(const RT_MS_PhotonMonteCarloInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PhotonMonteCarloInformation::SharedCtor() {
  _cached_size_ = 0;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pddparameter_ = NULL;
  infieldparameter_ = NULL;
  outfieldparameter_ = NULL;
  electroncontaminationparameter_ = NULL;
  absolutedoseparameter_ = NULL;
  wedgefieldparameter_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PhotonMonteCarloInformation::~RT_MS_PhotonMonteCarloInformation() {
  SharedDtor();
}

void RT_MS_PhotonMonteCarloInformation::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (this != default_instance_) {
    delete pddparameter_;
    delete infieldparameter_;
    delete outfieldparameter_;
    delete electroncontaminationparameter_;
    delete absolutedoseparameter_;
    delete wedgefieldparameter_;
  }
}

void RT_MS_PhotonMonteCarloInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PhotonMonteCarloInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PhotonMonteCarloInformation_descriptor_;
}

const RT_MS_PhotonMonteCarloInformation& RT_MS_PhotonMonteCarloInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_PhotonMonteCarloInformation* RT_MS_PhotonMonteCarloInformation::default_instance_ = NULL;

RT_MS_PhotonMonteCarloInformation* RT_MS_PhotonMonteCarloInformation::New() const {
  return new RT_MS_PhotonMonteCarloInformation;
}

void RT_MS_PhotonMonteCarloInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    if (has_pddparameter()) {
      if (pddparameter_ != NULL) pddparameter_->::ms::proto::RT_MS_PMCPDD::Clear();
    }
    if (has_infieldparameter()) {
      if (infieldparameter_ != NULL) infieldparameter_->::ms::proto::RT_MS_PMCInField::Clear();
    }
    if (has_outfieldparameter()) {
      if (outfieldparameter_ != NULL) outfieldparameter_->::ms::proto::RT_MS_PMCOutField::Clear();
    }
    if (has_electroncontaminationparameter()) {
      if (electroncontaminationparameter_ != NULL) electroncontaminationparameter_->::ms::proto::RT_MS_PMCElectronContamination::Clear();
    }
    if (has_absolutedoseparameter()) {
      if (absolutedoseparameter_ != NULL) absolutedoseparameter_->::ms::proto::RT_MS_PMCAbsoluteDose::Clear();
    }
    if (has_wedgefieldparameter()) {
      if (wedgefieldparameter_ != NULL) wedgefieldparameter_->::ms::proto::RT_MS_PMCWedgeField::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PhotonMonteCarloInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string CommissionUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PDDParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PDDParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pddparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_InFieldParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_InFieldParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_infieldparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_OutFieldParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OutFieldParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_outfieldparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ElectronContaminationParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ElectronContaminationParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_electroncontaminationparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_AbsoluteDoseParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AbsoluteDoseParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_absolutedoseparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_WedgeFieldParameter;
        break;
      }
      
      // optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_WedgeFieldParameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wedgefieldparameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PhotonMonteCarloInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string CommissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->commissionuid(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
  if (has_pddparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pddparameter(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
  if (has_infieldparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infieldparameter(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
  if (has_outfieldparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->outfieldparameter(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
  if (has_electroncontaminationparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->electroncontaminationparameter(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
  if (has_absolutedoseparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->absolutedoseparameter(), output);
  }
  
  // optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
  if (has_wedgefieldparameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->wedgefieldparameter(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PhotonMonteCarloInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string CommissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commissionuid(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
  if (has_pddparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pddparameter(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
  if (has_infieldparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infieldparameter(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
  if (has_outfieldparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->outfieldparameter(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
  if (has_electroncontaminationparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->electroncontaminationparameter(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
  if (has_absolutedoseparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->absolutedoseparameter(), target);
  }
  
  // optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
  if (has_wedgefieldparameter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->wedgefieldparameter(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PhotonMonteCarloInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string CommissionUID = 1;
    if (has_commissionuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
    if (has_pddparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pddparameter());
    }
    
    // optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
    if (has_infieldparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->infieldparameter());
    }
    
    // optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
    if (has_outfieldparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->outfieldparameter());
    }
    
    // optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
    if (has_electroncontaminationparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->electroncontaminationparameter());
    }
    
    // optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
    if (has_absolutedoseparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->absolutedoseparameter());
    }
    
    // optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
    if (has_wedgefieldparameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wedgefieldparameter());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PhotonMonteCarloInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PhotonMonteCarloInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PhotonMonteCarloInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PhotonMonteCarloInformation::MergeFrom(const RT_MS_PhotonMonteCarloInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_pddparameter()) {
      mutable_pddparameter()->::ms::proto::RT_MS_PMCPDD::MergeFrom(from.pddparameter());
    }
    if (from.has_infieldparameter()) {
      mutable_infieldparameter()->::ms::proto::RT_MS_PMCInField::MergeFrom(from.infieldparameter());
    }
    if (from.has_outfieldparameter()) {
      mutable_outfieldparameter()->::ms::proto::RT_MS_PMCOutField::MergeFrom(from.outfieldparameter());
    }
    if (from.has_electroncontaminationparameter()) {
      mutable_electroncontaminationparameter()->::ms::proto::RT_MS_PMCElectronContamination::MergeFrom(from.electroncontaminationparameter());
    }
    if (from.has_absolutedoseparameter()) {
      mutable_absolutedoseparameter()->::ms::proto::RT_MS_PMCAbsoluteDose::MergeFrom(from.absolutedoseparameter());
    }
    if (from.has_wedgefieldparameter()) {
      mutable_wedgefieldparameter()->::ms::proto::RT_MS_PMCWedgeField::MergeFrom(from.wedgefieldparameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PhotonMonteCarloInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PhotonMonteCarloInformation::CopyFrom(const RT_MS_PhotonMonteCarloInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PhotonMonteCarloInformation::IsInitialized() const {
  
  return true;
}

void RT_MS_PhotonMonteCarloInformation::Swap(RT_MS_PhotonMonteCarloInformation* other) {
  if (other != this) {
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(pddparameter_, other->pddparameter_);
    std::swap(infieldparameter_, other->infieldparameter_);
    std::swap(outfieldparameter_, other->outfieldparameter_);
    std::swap(electroncontaminationparameter_, other->electroncontaminationparameter_);
    std::swap(absolutedoseparameter_, other->absolutedoseparameter_);
    std::swap(wedgefieldparameter_, other->wedgefieldparameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PhotonMonteCarloInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PhotonMonteCarloInformation_descriptor_;
  metadata.reflection = RT_MS_PhotonMonteCarloInformation_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
