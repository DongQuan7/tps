// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_convolution.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_Convolution_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_Convolution_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PDDSpectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PDDSpectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_InFieldOffaxisVector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_InFieldOffaxisVector_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_ConvolutionContourVerter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ConvolutionContourVerter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PhysicalWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PhysicalWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPhysicalWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedPhysicalWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_VirtualWedgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedVirtualWedgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_VirtualWedgeField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fconvolution_2eproto() {
  protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_convolution.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_Convolution_descriptor_ = file->message_type(0);
  static const int RT_MS_Convolution_offsets_[43] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, diamone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, diamtwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, srcratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, transmission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, psd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, srcdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, srcatten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, sddxjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, sddyjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, normtenmultiten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, xk0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, xk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, xk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, yk0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, yk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, yk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, electroncontaminationflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, electronmaxdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, surfacedose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, depthcoefficientk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, offaxiscoefficienta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, sf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, cone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, ctwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, cthree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, spectrumlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, infieldoffaxisvector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, physicalwedgefieldlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, virtualwedgeinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, accname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, accessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, pddmubase_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, pdddmumx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, mudatax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, ddmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, mudatay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, dmudatay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, outputmuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, dmudr_),
  };
  RT_MS_Convolution_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_Convolution_descriptor_,
      RT_MS_Convolution::default_instance_,
      RT_MS_Convolution_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Convolution, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_Convolution));
  RT_MS_PDDSpectrum_descriptor_ = file->message_type(1);
  static const int RT_MS_PDDSpectrum_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, uid0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, uid40_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, energy0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, energy40_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, kernelweight0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, kernelweight40_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, fieldsize_),
  };
  RT_MS_PDDSpectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PDDSpectrum_descriptor_,
      RT_MS_PDDSpectrum::default_instance_,
      RT_MS_PDDSpectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PDDSpectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PDDSpectrum));
  RT_MS_InFieldOffaxisVector_descriptor_ = file->message_type(2);
  static const int RT_MS_InFieldOffaxisVector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_InFieldOffaxisVector, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_InFieldOffaxisVector, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_InFieldOffaxisVector, offaxisratio_),
  };
  RT_MS_InFieldOffaxisVector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_InFieldOffaxisVector_descriptor_,
      RT_MS_InFieldOffaxisVector::default_instance_,
      RT_MS_InFieldOffaxisVector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_InFieldOffaxisVector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_InFieldOffaxisVector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_InFieldOffaxisVector));
  RT_MS_ConvolutionContourVerter_descriptor_ = file->message_type(3);
  static const int RT_MS_ConvolutionContourVerter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ConvolutionContourVerter, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ConvolutionContourVerter, contourverterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ConvolutionContourVerter, contourvertery_),
  };
  RT_MS_ConvolutionContourVerter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ConvolutionContourVerter_descriptor_,
      RT_MS_ConvolutionContourVerter::default_instance_,
      RT_MS_ConvolutionContourVerter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ConvolutionContourVerter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ConvolutionContourVerter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ConvolutionContourVerter));
  RT_MS_PhysicalWedgeField_descriptor_ = file->message_type(4);
  static const int RT_MS_PhysicalWedgeField_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, wedgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, dmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, dmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, dmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, hvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierudi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carriermu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierdmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierdmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierdmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierhvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, wedgethick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carrierthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, weightcontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, carriercontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, contouruid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, contouruid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, density_),
  };
  RT_MS_PhysicalWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PhysicalWedgeField_descriptor_,
      RT_MS_PhysicalWedgeField::default_instance_,
      RT_MS_PhysicalWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PhysicalWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PhysicalWedgeField));
  RtTpsProtoRepeatedPhysicalWedgeField_descriptor_ = file->message_type(5);
  static const int RtTpsProtoRepeatedPhysicalWedgeField_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPhysicalWedgeField, physicalwedgefieldlist_),
  };
  RtTpsProtoRepeatedPhysicalWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedPhysicalWedgeField_descriptor_,
      RtTpsProtoRepeatedPhysicalWedgeField::default_instance_,
      RtTpsProtoRepeatedPhysicalWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPhysicalWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPhysicalWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedPhysicalWedgeField));
  RT_MS_VirtualWedgeInfo_descriptor_ = file->message_type(6);
  static const int RT_MS_VirtualWedgeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, virtualuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, goldenuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, virtualwedgefieldlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, algtype_),
  };
  RT_MS_VirtualWedgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_VirtualWedgeInfo_descriptor_,
      RT_MS_VirtualWedgeInfo::default_instance_,
      RT_MS_VirtualWedgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_VirtualWedgeInfo));
  RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_ = file->message_type(7);
  static const int RtTpsProtoRepeatedVirtualWedgeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVirtualWedgeInfo, virtualwedgeinfolist_),
  };
  RtTpsProtoRepeatedVirtualWedgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_,
      RtTpsProtoRepeatedVirtualWedgeInfo::default_instance_,
      RtTpsProtoRepeatedVirtualWedgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVirtualWedgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVirtualWedgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedVirtualWedgeInfo));
  RT_MS_VirtualWedgeField_descriptor_ = file->message_type(8);
  static const int RT_MS_VirtualWedgeField_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, collimatorx1position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, collimatorx2position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, relativemu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, correctionfactor_),
  };
  RT_MS_VirtualWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_VirtualWedgeField_descriptor_,
      RT_MS_VirtualWedgeField::default_instance_,
      RT_MS_VirtualWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_VirtualWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_VirtualWedgeField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fconvolution_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_Convolution_descriptor_, &RT_MS_Convolution::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PDDSpectrum_descriptor_, &RT_MS_PDDSpectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_InFieldOffaxisVector_descriptor_, &RT_MS_InFieldOffaxisVector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ConvolutionContourVerter_descriptor_, &RT_MS_ConvolutionContourVerter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PhysicalWedgeField_descriptor_, &RT_MS_PhysicalWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedPhysicalWedgeField_descriptor_, &RtTpsProtoRepeatedPhysicalWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_VirtualWedgeInfo_descriptor_, &RT_MS_VirtualWedgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_, &RtTpsProtoRepeatedVirtualWedgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_VirtualWedgeField_descriptor_, &RT_MS_VirtualWedgeField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fconvolution_2eproto() {
  delete RT_MS_Convolution::default_instance_;
  delete RT_MS_Convolution_reflection_;
  delete RT_MS_PDDSpectrum::default_instance_;
  delete RT_MS_PDDSpectrum_reflection_;
  delete RT_MS_InFieldOffaxisVector::default_instance_;
  delete RT_MS_InFieldOffaxisVector_reflection_;
  delete RT_MS_ConvolutionContourVerter::default_instance_;
  delete RT_MS_ConvolutionContourVerter_reflection_;
  delete RT_MS_PhysicalWedgeField::default_instance_;
  delete RT_MS_PhysicalWedgeField_reflection_;
  delete RtTpsProtoRepeatedPhysicalWedgeField::default_instance_;
  delete RtTpsProtoRepeatedPhysicalWedgeField_reflection_;
  delete RT_MS_VirtualWedgeInfo::default_instance_;
  delete RT_MS_VirtualWedgeInfo_reflection_;
  delete RtTpsProtoRepeatedVirtualWedgeInfo::default_instance_;
  delete RtTpsProtoRepeatedVirtualWedgeInfo_reflection_;
  delete RT_MS_VirtualWedgeField::default_instance_;
  delete RT_MS_VirtualWedgeField_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fconvolution_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rt_ms_convolution.proto\022\010ms.proto\"\313\007\n\021"
    "RT_MS_Convolution\022\017\n\007diamOne\030\001 \001(\002\022\017\n\007di"
    "amTwo\030\002 \001(\002\022\020\n\010srcRatio\030\003 \001(\002\022\024\n\014transmi"
    "ssion\030\004 \001(\002\022\013\n\003psd\030\005 \001(\002\022\020\n\010srcDepth\030\006 \001"
    "(\002\022\020\n\010srcAtten\030\007 \001(\002\022\017\n\007sddXJaw\030\010 \001(\002\022\017\n"
    "\007sddYJaw\030\t \001(\002\022\027\n\017normTenMultiTen\030\n \001(\002\022"
    "\013\n\003xk0\030\013 \001(\002\022\013\n\003xk1\030\014 \001(\002\022\013\n\003xk2\030\r \001(\002\022\013"
    "\n\003yk0\030\016 \001(\002\022\013\n\003yk1\030\017 \001(\002\022\013\n\003yk2\030\020 \001(\002\022!\n"
    "\031electronContaminationFlag\030\021 \001(\010\022\030\n\020elec"
    "tronMaxDepth\030\022 \001(\002\022\023\n\013surfaceDose\030\023 \001(\002\022"
    "\031\n\021depthCoefficientK\030\024 \001(\002\022\033\n\023offaxisCoe"
    "fficientA\030\025 \001(\002\022\n\n\002df\030\026 \001(\002\022\n\n\002sf\030\027 \001(\002\022"
    "\014\n\004cOne\030\030 \001(\002\022\014\n\004cTwo\030\031 \001(\002\022\016\n\006cThree\030\032 "
    "\001(\002\0221\n\014spectrumList\030\033 \003(\0132\033.ms.proto.RT_"
    "MS_PDDSpectrum\022B\n\024inFieldOffaxisVector\030\034"
    " \003(\0132$.ms.proto.RT_MS_InFieldOffaxisVect"
    "or\022B\n\026physicalWedgeFieldList\030\035 \003(\0132\".ms."
    "proto.RT_MS_PhysicalWedgeField\022>\n\024virtua"
    "lWedgeInfoList\030\036 \003(\0132 .ms.proto.RT_MS_Vi"
    "rtualWedgeInfo\022\025\n\rcommissionUID\030\037 \001(\t\022\017\n"
    "\007accName\030  \001(\t\022\024\n\014accessoryUID\030! \001(\t\022\017\n\007"
    "wedgeId\030\" \001(\t\022\017\n\007algType\030# \001(\005\022\021\n\tpddMuB"
    "ase\030$ \001(\002\022\020\n\010pddDmumx\030% \001(\002\022\017\n\007mudatax\030&"
    " \001(\t\022\016\n\006ddmudr\030\' \001(\t\022\017\n\007mudatay\030( \001(\t\022\020\n"
    "\010dmudatay\030) \001(\t\022\021\n\toutputmuy\030* \001(\t\022\r\n\005dm"
    "udr\030+ \001(\002\"\225\001\n\021RT_MS_PDDSpectrum\022\014\n\004uid0\030"
    "\001 \001(\t\022\r\n\005uid40\030\002 \001(\t\022\017\n\007energy0\030\003 \001(\005\022\020\n"
    "\010energy40\030\004 \001(\005\022\025\n\rkernelWeight0\030\005 \001(\002\022\026"
    "\n\016kernelWeight40\030\006 \001(\002\022\021\n\tfieldSize\030\007 \001("
    "\005\"O\n\032RT_MS_InFieldOffaxisVector\022\013\n\003uid\030\001"
    " \001(\t\022\016\n\006radius\030\002 \001(\002\022\024\n\014offaxisRatio\030\003 \001"
    "(\002\"]\n\036RT_MS_ConvolutionContourVerter\022\013\n\003"
    "uid\030\001 \001(\t\022\026\n\016ContourVerterx\030\002 \001(\002\022\026\n\016Con"
    "tourVertery\030\003 \001(\002\"\275\004\n\030RT_MS_PhysicalWedg"
    "eField\022\020\n\010wedgeUID\030\001 \001(\t\022\017\n\007wedgeId\030\002 \001("
    "\t\022\021\n\twedgeType\030\003 \001(\t\022\n\n\002mu\030\004 \001(\002\022\r\n\005dmud"
    "x\030\005 \001(\002\022\r\n\005dmudr\030\006 \001(\002\022\r\n\005dmuda\030\007 \001(\002\022\020\n"
    "\010hvlSlope\030\010 \001(\002\022\022\n\nCarrierUDI\030\t \001(\t\022\021\n\tC"
    "arriermu\030\n \001(\002\022\024\n\014Carrierdmudx\030\013 \001(\002\022\024\n\014"
    "Carrierdmudr\030\014 \001(\002\022\024\n\014Carrierdmuda\030\r \001(\002"
    "\022\027\n\017CarrierhvlSlope\030\016 \001(\002\022\022\n\nwedgeThick\030"
    "\017 \001(\002\022\024\n\014carrierThick\030\020 \001(\002\022I\n\027weightCon"
    "tourVerterList\030\021 \003(\0132(.ms.proto.RT_MS_Co"
    "nvolutionContourVerter\022J\n\030carrierContour"
    "VerterList\030\022 \003(\0132(.ms.proto.RT_MS_Convol"
    "utionContourVerter\022\023\n\013contourUID1\030\023 \001(\t\022"
    "\023\n\013contourUID2\030\024 \001(\t\022\021\n\tparentUID\030\025 \001(\t\022"
    "\017\n\007algType\030\026 \001(\005\022\017\n\007density\030\027 \001(\002\"j\n$RtT"
    "psProtoRepeatedPhysicalWedgeField\022B\n\026phy"
    "sicalwedgefieldlist\030\001 \003(\0132\".ms.proto.RT_"
    "MS_PhysicalWedgeField\"\245\001\n\026RT_MS_VirtualW"
    "edgeInfo\022\021\n\tparentUID\030\001 \001(\t\022\022\n\nvirtualUi"
    "d\030\002 \001(\t\022\021\n\tgoldenUID\030\003 \001(\t\022@\n\025virtualWed"
    "geFieldList\030\004 \003(\0132!.ms.proto.RT_MS_Virtu"
    "alWedgeField\022\017\n\007algType\030\005 \001(\005\"d\n\"RtTpsPr"
    "otoRepeatedVirtualWedgeInfo\022>\n\024virtualwe"
    "dgeinfolist\030\001 \003(\0132 .ms.proto.RT_MS_Virtu"
    "alWedgeInfo\"\220\001\n\027RT_MS_VirtualWedgeField\022"
    "\013\n\003uid\030\001 \001(\t\022\034\n\024collimatorX1Position\030\002 \001"
    "(\002\022\034\n\024collimatorX2Position\030\003 \001(\002\022\022\n\nrela"
    "tiveMU\030\004 \001(\002\022\030\n\020correctionFactor\030\005 \001(\002", 2438);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_convolution.proto", &protobuf_RegisterTypes);
  RT_MS_Convolution::default_instance_ = new RT_MS_Convolution();
  RT_MS_PDDSpectrum::default_instance_ = new RT_MS_PDDSpectrum();
  RT_MS_InFieldOffaxisVector::default_instance_ = new RT_MS_InFieldOffaxisVector();
  RT_MS_ConvolutionContourVerter::default_instance_ = new RT_MS_ConvolutionContourVerter();
  RT_MS_PhysicalWedgeField::default_instance_ = new RT_MS_PhysicalWedgeField();
  RtTpsProtoRepeatedPhysicalWedgeField::default_instance_ = new RtTpsProtoRepeatedPhysicalWedgeField();
  RT_MS_VirtualWedgeInfo::default_instance_ = new RT_MS_VirtualWedgeInfo();
  RtTpsProtoRepeatedVirtualWedgeInfo::default_instance_ = new RtTpsProtoRepeatedVirtualWedgeInfo();
  RT_MS_VirtualWedgeField::default_instance_ = new RT_MS_VirtualWedgeField();
  RT_MS_Convolution::default_instance_->InitAsDefaultInstance();
  RT_MS_PDDSpectrum::default_instance_->InitAsDefaultInstance();
  RT_MS_InFieldOffaxisVector::default_instance_->InitAsDefaultInstance();
  RT_MS_ConvolutionContourVerter::default_instance_->InitAsDefaultInstance();
  RT_MS_PhysicalWedgeField::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedPhysicalWedgeField::default_instance_->InitAsDefaultInstance();
  RT_MS_VirtualWedgeInfo::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedVirtualWedgeInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_VirtualWedgeField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fconvolution_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fconvolution_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fconvolution_2eproto() {
    protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fconvolution_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_Convolution::kDiamOneFieldNumber;
const int RT_MS_Convolution::kDiamTwoFieldNumber;
const int RT_MS_Convolution::kSrcRatioFieldNumber;
const int RT_MS_Convolution::kTransmissionFieldNumber;
const int RT_MS_Convolution::kPsdFieldNumber;
const int RT_MS_Convolution::kSrcDepthFieldNumber;
const int RT_MS_Convolution::kSrcAttenFieldNumber;
const int RT_MS_Convolution::kSddXJawFieldNumber;
const int RT_MS_Convolution::kSddYJawFieldNumber;
const int RT_MS_Convolution::kNormTenMultiTenFieldNumber;
const int RT_MS_Convolution::kXk0FieldNumber;
const int RT_MS_Convolution::kXk1FieldNumber;
const int RT_MS_Convolution::kXk2FieldNumber;
const int RT_MS_Convolution::kYk0FieldNumber;
const int RT_MS_Convolution::kYk1FieldNumber;
const int RT_MS_Convolution::kYk2FieldNumber;
const int RT_MS_Convolution::kElectronContaminationFlagFieldNumber;
const int RT_MS_Convolution::kElectronMaxDepthFieldNumber;
const int RT_MS_Convolution::kSurfaceDoseFieldNumber;
const int RT_MS_Convolution::kDepthCoefficientKFieldNumber;
const int RT_MS_Convolution::kOffaxisCoefficientAFieldNumber;
const int RT_MS_Convolution::kDfFieldNumber;
const int RT_MS_Convolution::kSfFieldNumber;
const int RT_MS_Convolution::kCOneFieldNumber;
const int RT_MS_Convolution::kCTwoFieldNumber;
const int RT_MS_Convolution::kCThreeFieldNumber;
const int RT_MS_Convolution::kSpectrumListFieldNumber;
const int RT_MS_Convolution::kInFieldOffaxisVectorFieldNumber;
const int RT_MS_Convolution::kPhysicalWedgeFieldListFieldNumber;
const int RT_MS_Convolution::kVirtualWedgeInfoListFieldNumber;
const int RT_MS_Convolution::kCommissionUIDFieldNumber;
const int RT_MS_Convolution::kAccNameFieldNumber;
const int RT_MS_Convolution::kAccessoryUIDFieldNumber;
const int RT_MS_Convolution::kWedgeIdFieldNumber;
const int RT_MS_Convolution::kAlgTypeFieldNumber;
const int RT_MS_Convolution::kPddMuBaseFieldNumber;
const int RT_MS_Convolution::kPddDmumxFieldNumber;
const int RT_MS_Convolution::kMudataxFieldNumber;
const int RT_MS_Convolution::kDdmudrFieldNumber;
const int RT_MS_Convolution::kMudatayFieldNumber;
const int RT_MS_Convolution::kDmudatayFieldNumber;
const int RT_MS_Convolution::kOutputmuyFieldNumber;
const int RT_MS_Convolution::kDmudrFieldNumber;
#endif  // !_MSC_VER

RT_MS_Convolution::RT_MS_Convolution()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_Convolution::InitAsDefaultInstance() {
}

RT_MS_Convolution::RT_MS_Convolution(const RT_MS_Convolution& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_Convolution::SharedCtor() {
  _cached_size_ = 0;
  diamone_ = 0;
  diamtwo_ = 0;
  srcratio_ = 0;
  transmission_ = 0;
  psd_ = 0;
  srcdepth_ = 0;
  srcatten_ = 0;
  sddxjaw_ = 0;
  sddyjaw_ = 0;
  normtenmultiten_ = 0;
  xk0_ = 0;
  xk1_ = 0;
  xk2_ = 0;
  yk0_ = 0;
  yk1_ = 0;
  yk2_ = 0;
  electroncontaminationflag_ = false;
  electronmaxdepth_ = 0;
  surfacedose_ = 0;
  depthcoefficientk_ = 0;
  offaxiscoefficienta_ = 0;
  df_ = 0;
  sf_ = 0;
  cone_ = 0;
  ctwo_ = 0;
  cthree_ = 0;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algtype_ = 0;
  pddmubase_ = 0;
  pdddmumx_ = 0;
  mudatax_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ddmudr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mudatay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dmudatay_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  outputmuy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dmudr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_Convolution::~RT_MS_Convolution() {
  SharedDtor();
}

void RT_MS_Convolution::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (accname_ != &::google::protobuf::internal::kEmptyString) {
    delete accname_;
  }
  if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryuid_;
  }
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (mudatax_ != &::google::protobuf::internal::kEmptyString) {
    delete mudatax_;
  }
  if (ddmudr_ != &::google::protobuf::internal::kEmptyString) {
    delete ddmudr_;
  }
  if (mudatay_ != &::google::protobuf::internal::kEmptyString) {
    delete mudatay_;
  }
  if (dmudatay_ != &::google::protobuf::internal::kEmptyString) {
    delete dmudatay_;
  }
  if (outputmuy_ != &::google::protobuf::internal::kEmptyString) {
    delete outputmuy_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_Convolution::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_Convolution::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_Convolution_descriptor_;
}

const RT_MS_Convolution& RT_MS_Convolution::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_Convolution* RT_MS_Convolution::default_instance_ = NULL;

RT_MS_Convolution* RT_MS_Convolution::New() const {
  return new RT_MS_Convolution;
}

void RT_MS_Convolution::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamone_ = 0;
    diamtwo_ = 0;
    srcratio_ = 0;
    transmission_ = 0;
    psd_ = 0;
    srcdepth_ = 0;
    srcatten_ = 0;
    sddxjaw_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sddyjaw_ = 0;
    normtenmultiten_ = 0;
    xk0_ = 0;
    xk1_ = 0;
    xk2_ = 0;
    yk0_ = 0;
    yk1_ = 0;
    yk2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    electroncontaminationflag_ = false;
    electronmaxdepth_ = 0;
    surfacedose_ = 0;
    depthcoefficientk_ = 0;
    offaxiscoefficienta_ = 0;
    df_ = 0;
    sf_ = 0;
    cone_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ctwo_ = 0;
    cthree_ = 0;
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    if (has_accname()) {
      if (accname_ != &::google::protobuf::internal::kEmptyString) {
        accname_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_accessoryuid()) {
      if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accessoryuid_->clear();
      }
    }
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    algtype_ = 0;
    pddmubase_ = 0;
    pdddmumx_ = 0;
    if (has_mudatax()) {
      if (mudatax_ != &::google::protobuf::internal::kEmptyString) {
        mudatax_->clear();
      }
    }
    if (has_ddmudr()) {
      if (ddmudr_ != &::google::protobuf::internal::kEmptyString) {
        ddmudr_->clear();
      }
    }
    if (has_mudatay()) {
      if (mudatay_ != &::google::protobuf::internal::kEmptyString) {
        mudatay_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_dmudatay()) {
      if (dmudatay_ != &::google::protobuf::internal::kEmptyString) {
        dmudatay_->clear();
      }
    }
    if (has_outputmuy()) {
      if (outputmuy_ != &::google::protobuf::internal::kEmptyString) {
        outputmuy_->clear();
      }
    }
    dmudr_ = 0;
  }
  spectrumlist_.Clear();
  infieldoffaxisvector_.Clear();
  physicalwedgefieldlist_.Clear();
  virtualwedgeinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_Convolution::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float diamOne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamone_)));
          set_has_diamone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_diamTwo;
        break;
      }
      
      // optional float diamTwo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diamTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamtwo_)));
          set_has_diamtwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_srcRatio;
        break;
      }
      
      // optional float srcRatio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcratio_)));
          set_has_srcratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_transmission;
        break;
      }
      
      // optional float transmission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transmission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transmission_)));
          set_has_transmission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_psd;
        break;
      }
      
      // optional float psd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_psd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &psd_)));
          set_has_psd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_srcDepth;
        break;
      }
      
      // optional float srcDepth = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcdepth_)));
          set_has_srcdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_srcAtten;
        break;
      }
      
      // optional float srcAtten = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcAtten:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcatten_)));
          set_has_srcatten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_sddXJaw;
        break;
      }
      
      // optional float sddXJaw = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sddXJaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sddxjaw_)));
          set_has_sddxjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_sddYJaw;
        break;
      }
      
      // optional float sddYJaw = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sddYJaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sddyjaw_)));
          set_has_sddyjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_normTenMultiTen;
        break;
      }
      
      // optional float normTenMultiTen = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normTenMultiTen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normtenmultiten_)));
          set_has_normtenmultiten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_xk0;
        break;
      }
      
      // optional float xk0 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk0_)));
          set_has_xk0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_xk1;
        break;
      }
      
      // optional float xk1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk1_)));
          set_has_xk1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_xk2;
        break;
      }
      
      // optional float xk2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk2_)));
          set_has_xk2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_yk0;
        break;
      }
      
      // optional float yk0 = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk0_)));
          set_has_yk0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_yk1;
        break;
      }
      
      // optional float yk1 = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk1_)));
          set_has_yk1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_yk2;
        break;
      }
      
      // optional float yk2 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk2_)));
          set_has_yk2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_electronContaminationFlag;
        break;
      }
      
      // optional bool electronContaminationFlag = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electronContaminationFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &electroncontaminationflag_)));
          set_has_electroncontaminationflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_electronMaxDepth;
        break;
      }
      
      // optional float electronMaxDepth = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_electronMaxDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &electronmaxdepth_)));
          set_has_electronmaxdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_surfaceDose;
        break;
      }
      
      // optional float surfaceDose = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_surfaceDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surfacedose_)));
          set_has_surfacedose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_depthCoefficientK;
        break;
      }
      
      // optional float depthCoefficientK = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depthCoefficientK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depthcoefficientk_)));
          set_has_depthcoefficientk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_offaxisCoefficientA;
        break;
      }
      
      // optional float offaxisCoefficientA = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offaxisCoefficientA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offaxiscoefficienta_)));
          set_has_offaxiscoefficienta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_df;
        break;
      }
      
      // optional float df = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &df_)));
          set_has_df();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_sf;
        break;
      }
      
      // optional float sf = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sf_)));
          set_has_sf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_cOne;
        break;
      }
      
      // optional float cOne = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cone_)));
          set_has_cone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_cTwo;
        break;
      }
      
      // optional float cTwo = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctwo_)));
          set_has_ctwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_cThree;
        break;
      }
      
      // optional float cThree = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cThree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cthree_)));
          set_has_cthree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_spectrumList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PDDSpectrum spectrumList = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrumList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spectrumlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_spectrumList;
        if (input->ExpectTag(226)) goto parse_inFieldOffaxisVector;
        break;
      }
      
      // repeated .ms.proto.RT_MS_InFieldOffaxisVector inFieldOffaxisVector = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_inFieldOffaxisVector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infieldoffaxisvector()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_inFieldOffaxisVector;
        if (input->ExpectTag(234)) goto parse_physicalWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalWedgeFieldList = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physicalWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicalwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_physicalWedgeFieldList;
        if (input->ExpectTag(242)) goto parse_virtualWedgeInfoList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualWedgeInfoList = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgeinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_virtualWedgeInfoList;
        if (input->ExpectTag(250)) goto parse_commissionUID;
        break;
      }
      
      // optional string commissionUID = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_accName;
        break;
      }
      
      // optional string accName = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accname().data(), this->accname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_accessoryUID;
        break;
      }
      
      // optional string accessoryUID = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessoryUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryuid().data(), this->accessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_wedgeId;
        break;
      }
      
      // optional string wedgeId = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(293)) goto parse_pddMuBase;
        break;
      }
      
      // optional float pddMuBase = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pddMuBase:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pddmubase_)));
          set_has_pddmubase();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_pddDmumx;
        break;
      }
      
      // optional float pddDmumx = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pddDmumx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pdddmumx_)));
          set_has_pdddmumx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_mudatax;
        break;
      }
      
      // optional string mudatax = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mudatax:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mudatax()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mudatax().data(), this->mudatax().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_ddmudr;
        break;
      }
      
      // optional string ddmudr = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ddmudr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ddmudr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ddmudr().data(), this->ddmudr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_mudatay;
        break;
      }
      
      // optional string mudatay = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mudatay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mudatay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->mudatay().data(), this->mudatay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_dmudatay;
        break;
      }
      
      // optional string dmudatay = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dmudatay:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dmudatay()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dmudatay().data(), this->dmudatay().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_outputmuy;
        break;
      }
      
      // optional string outputmuy = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_outputmuy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputmuy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outputmuy().data(), this->outputmuy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(349)) goto parse_dmudr;
        break;
      }
      
      // optional float dmudr = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudr_)));
          set_has_dmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_Convolution::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float diamOne = 1;
  if (has_diamone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->diamone(), output);
  }
  
  // optional float diamTwo = 2;
  if (has_diamtwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->diamtwo(), output);
  }
  
  // optional float srcRatio = 3;
  if (has_srcratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->srcratio(), output);
  }
  
  // optional float transmission = 4;
  if (has_transmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->transmission(), output);
  }
  
  // optional float psd = 5;
  if (has_psd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->psd(), output);
  }
  
  // optional float srcDepth = 6;
  if (has_srcdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->srcdepth(), output);
  }
  
  // optional float srcAtten = 7;
  if (has_srcatten()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->srcatten(), output);
  }
  
  // optional float sddXJaw = 8;
  if (has_sddxjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sddxjaw(), output);
  }
  
  // optional float sddYJaw = 9;
  if (has_sddyjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sddyjaw(), output);
  }
  
  // optional float normTenMultiTen = 10;
  if (has_normtenmultiten()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->normtenmultiten(), output);
  }
  
  // optional float xk0 = 11;
  if (has_xk0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->xk0(), output);
  }
  
  // optional float xk1 = 12;
  if (has_xk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->xk1(), output);
  }
  
  // optional float xk2 = 13;
  if (has_xk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->xk2(), output);
  }
  
  // optional float yk0 = 14;
  if (has_yk0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->yk0(), output);
  }
  
  // optional float yk1 = 15;
  if (has_yk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->yk1(), output);
  }
  
  // optional float yk2 = 16;
  if (has_yk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->yk2(), output);
  }
  
  // optional bool electronContaminationFlag = 17;
  if (has_electroncontaminationflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->electroncontaminationflag(), output);
  }
  
  // optional float electronMaxDepth = 18;
  if (has_electronmaxdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->electronmaxdepth(), output);
  }
  
  // optional float surfaceDose = 19;
  if (has_surfacedose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->surfacedose(), output);
  }
  
  // optional float depthCoefficientK = 20;
  if (has_depthcoefficientk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->depthcoefficientk(), output);
  }
  
  // optional float offaxisCoefficientA = 21;
  if (has_offaxiscoefficienta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->offaxiscoefficienta(), output);
  }
  
  // optional float df = 22;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->df(), output);
  }
  
  // optional float sf = 23;
  if (has_sf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->sf(), output);
  }
  
  // optional float cOne = 24;
  if (has_cone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->cone(), output);
  }
  
  // optional float cTwo = 25;
  if (has_ctwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ctwo(), output);
  }
  
  // optional float cThree = 26;
  if (has_cthree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->cthree(), output);
  }
  
  // repeated .ms.proto.RT_MS_PDDSpectrum spectrumList = 27;
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->spectrumlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_InFieldOffaxisVector inFieldOffaxisVector = 28;
  for (int i = 0; i < this->infieldoffaxisvector_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->infieldoffaxisvector(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalWedgeFieldList = 29;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->physicalwedgefieldlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualWedgeInfoList = 30;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->virtualwedgeinfolist(i), output);
  }
  
  // optional string commissionUID = 31;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->commissionuid(), output);
  }
  
  // optional string accName = 32;
  if (has_accname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accname().data(), this->accname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->accname(), output);
  }
  
  // optional string accessoryUID = 33;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->accessoryuid(), output);
  }
  
  // optional string wedgeId = 34;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->wedgeid(), output);
  }
  
  // optional int32 algType = 35;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->algtype(), output);
  }
  
  // optional float pddMuBase = 36;
  if (has_pddmubase()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->pddmubase(), output);
  }
  
  // optional float pddDmumx = 37;
  if (has_pdddmumx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->pdddmumx(), output);
  }
  
  // optional string mudatax = 38;
  if (has_mudatax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mudatax().data(), this->mudatax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->mudatax(), output);
  }
  
  // optional string ddmudr = 39;
  if (has_ddmudr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddmudr().data(), this->ddmudr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->ddmudr(), output);
  }
  
  // optional string mudatay = 40;
  if (has_mudatay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mudatay().data(), this->mudatay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->mudatay(), output);
  }
  
  // optional string dmudatay = 41;
  if (has_dmudatay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dmudatay().data(), this->dmudatay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->dmudatay(), output);
  }
  
  // optional string outputmuy = 42;
  if (has_outputmuy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputmuy().data(), this->outputmuy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->outputmuy(), output);
  }
  
  // optional float dmudr = 43;
  if (has_dmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->dmudr(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_Convolution::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float diamOne = 1;
  if (has_diamone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->diamone(), target);
  }
  
  // optional float diamTwo = 2;
  if (has_diamtwo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->diamtwo(), target);
  }
  
  // optional float srcRatio = 3;
  if (has_srcratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->srcratio(), target);
  }
  
  // optional float transmission = 4;
  if (has_transmission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->transmission(), target);
  }
  
  // optional float psd = 5;
  if (has_psd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->psd(), target);
  }
  
  // optional float srcDepth = 6;
  if (has_srcdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->srcdepth(), target);
  }
  
  // optional float srcAtten = 7;
  if (has_srcatten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->srcatten(), target);
  }
  
  // optional float sddXJaw = 8;
  if (has_sddxjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->sddxjaw(), target);
  }
  
  // optional float sddYJaw = 9;
  if (has_sddyjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->sddyjaw(), target);
  }
  
  // optional float normTenMultiTen = 10;
  if (has_normtenmultiten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->normtenmultiten(), target);
  }
  
  // optional float xk0 = 11;
  if (has_xk0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->xk0(), target);
  }
  
  // optional float xk1 = 12;
  if (has_xk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->xk1(), target);
  }
  
  // optional float xk2 = 13;
  if (has_xk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->xk2(), target);
  }
  
  // optional float yk0 = 14;
  if (has_yk0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->yk0(), target);
  }
  
  // optional float yk1 = 15;
  if (has_yk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->yk1(), target);
  }
  
  // optional float yk2 = 16;
  if (has_yk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->yk2(), target);
  }
  
  // optional bool electronContaminationFlag = 17;
  if (has_electroncontaminationflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->electroncontaminationflag(), target);
  }
  
  // optional float electronMaxDepth = 18;
  if (has_electronmaxdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->electronmaxdepth(), target);
  }
  
  // optional float surfaceDose = 19;
  if (has_surfacedose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->surfacedose(), target);
  }
  
  // optional float depthCoefficientK = 20;
  if (has_depthcoefficientk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->depthcoefficientk(), target);
  }
  
  // optional float offaxisCoefficientA = 21;
  if (has_offaxiscoefficienta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->offaxiscoefficienta(), target);
  }
  
  // optional float df = 22;
  if (has_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->df(), target);
  }
  
  // optional float sf = 23;
  if (has_sf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->sf(), target);
  }
  
  // optional float cOne = 24;
  if (has_cone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->cone(), target);
  }
  
  // optional float cTwo = 25;
  if (has_ctwo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ctwo(), target);
  }
  
  // optional float cThree = 26;
  if (has_cthree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->cthree(), target);
  }
  
  // repeated .ms.proto.RT_MS_PDDSpectrum spectrumList = 27;
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->spectrumlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_InFieldOffaxisVector inFieldOffaxisVector = 28;
  for (int i = 0; i < this->infieldoffaxisvector_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->infieldoffaxisvector(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalWedgeFieldList = 29;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->physicalwedgefieldlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualWedgeInfoList = 30;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->virtualwedgeinfolist(i), target);
  }
  
  // optional string commissionUID = 31;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->commissionuid(), target);
  }
  
  // optional string accName = 32;
  if (has_accname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accname().data(), this->accname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->accname(), target);
  }
  
  // optional string accessoryUID = 33;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->accessoryuid(), target);
  }
  
  // optional string wedgeId = 34;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->wedgeid(), target);
  }
  
  // optional int32 algType = 35;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->algtype(), target);
  }
  
  // optional float pddMuBase = 36;
  if (has_pddmubase()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(36, this->pddmubase(), target);
  }
  
  // optional float pddDmumx = 37;
  if (has_pdddmumx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->pdddmumx(), target);
  }
  
  // optional string mudatax = 38;
  if (has_mudatax()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mudatax().data(), this->mudatax().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->mudatax(), target);
  }
  
  // optional string ddmudr = 39;
  if (has_ddmudr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ddmudr().data(), this->ddmudr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->ddmudr(), target);
  }
  
  // optional string mudatay = 40;
  if (has_mudatay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->mudatay().data(), this->mudatay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->mudatay(), target);
  }
  
  // optional string dmudatay = 41;
  if (has_dmudatay()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dmudatay().data(), this->dmudatay().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->dmudatay(), target);
  }
  
  // optional string outputmuy = 42;
  if (has_outputmuy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputmuy().data(), this->outputmuy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->outputmuy(), target);
  }
  
  // optional float dmudr = 43;
  if (has_dmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(43, this->dmudr(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_Convolution::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float diamOne = 1;
    if (has_diamone()) {
      total_size += 1 + 4;
    }
    
    // optional float diamTwo = 2;
    if (has_diamtwo()) {
      total_size += 1 + 4;
    }
    
    // optional float srcRatio = 3;
    if (has_srcratio()) {
      total_size += 1 + 4;
    }
    
    // optional float transmission = 4;
    if (has_transmission()) {
      total_size += 1 + 4;
    }
    
    // optional float psd = 5;
    if (has_psd()) {
      total_size += 1 + 4;
    }
    
    // optional float srcDepth = 6;
    if (has_srcdepth()) {
      total_size += 1 + 4;
    }
    
    // optional float srcAtten = 7;
    if (has_srcatten()) {
      total_size += 1 + 4;
    }
    
    // optional float sddXJaw = 8;
    if (has_sddxjaw()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float sddYJaw = 9;
    if (has_sddyjaw()) {
      total_size += 1 + 4;
    }
    
    // optional float normTenMultiTen = 10;
    if (has_normtenmultiten()) {
      total_size += 1 + 4;
    }
    
    // optional float xk0 = 11;
    if (has_xk0()) {
      total_size += 1 + 4;
    }
    
    // optional float xk1 = 12;
    if (has_xk1()) {
      total_size += 1 + 4;
    }
    
    // optional float xk2 = 13;
    if (has_xk2()) {
      total_size += 1 + 4;
    }
    
    // optional float yk0 = 14;
    if (has_yk0()) {
      total_size += 1 + 4;
    }
    
    // optional float yk1 = 15;
    if (has_yk1()) {
      total_size += 1 + 4;
    }
    
    // optional float yk2 = 16;
    if (has_yk2()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool electronContaminationFlag = 17;
    if (has_electroncontaminationflag()) {
      total_size += 2 + 1;
    }
    
    // optional float electronMaxDepth = 18;
    if (has_electronmaxdepth()) {
      total_size += 2 + 4;
    }
    
    // optional float surfaceDose = 19;
    if (has_surfacedose()) {
      total_size += 2 + 4;
    }
    
    // optional float depthCoefficientK = 20;
    if (has_depthcoefficientk()) {
      total_size += 2 + 4;
    }
    
    // optional float offaxisCoefficientA = 21;
    if (has_offaxiscoefficienta()) {
      total_size += 2 + 4;
    }
    
    // optional float df = 22;
    if (has_df()) {
      total_size += 2 + 4;
    }
    
    // optional float sf = 23;
    if (has_sf()) {
      total_size += 2 + 4;
    }
    
    // optional float cOne = 24;
    if (has_cone()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float cTwo = 25;
    if (has_ctwo()) {
      total_size += 2 + 4;
    }
    
    // optional float cThree = 26;
    if (has_cthree()) {
      total_size += 2 + 4;
    }
    
    // optional string commissionUID = 31;
    if (has_commissionuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional string accName = 32;
    if (has_accname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accname());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string accessoryUID = 33;
    if (has_accessoryuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryuid());
    }
    
    // optional string wedgeId = 34;
    if (has_wedgeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional int32 algType = 35;
    if (has_algtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
    // optional float pddMuBase = 36;
    if (has_pddmubase()) {
      total_size += 2 + 4;
    }
    
    // optional float pddDmumx = 37;
    if (has_pdddmumx()) {
      total_size += 2 + 4;
    }
    
    // optional string mudatax = 38;
    if (has_mudatax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mudatax());
    }
    
    // optional string ddmudr = 39;
    if (has_ddmudr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ddmudr());
    }
    
    // optional string mudatay = 40;
    if (has_mudatay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->mudatay());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string dmudatay = 41;
    if (has_dmudatay()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dmudatay());
    }
    
    // optional string outputmuy = 42;
    if (has_outputmuy()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputmuy());
    }
    
    // optional float dmudr = 43;
    if (has_dmudr()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_PDDSpectrum spectrumList = 27;
  total_size += 2 * this->spectrumlist_size();
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spectrumlist(i));
  }
  
  // repeated .ms.proto.RT_MS_InFieldOffaxisVector inFieldOffaxisVector = 28;
  total_size += 2 * this->infieldoffaxisvector_size();
  for (int i = 0; i < this->infieldoffaxisvector_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infieldoffaxisvector(i));
  }
  
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalWedgeFieldList = 29;
  total_size += 2 * this->physicalwedgefieldlist_size();
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicalwedgefieldlist(i));
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualWedgeInfoList = 30;
  total_size += 2 * this->virtualwedgeinfolist_size();
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgeinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_Convolution::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_Convolution* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_Convolution*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_Convolution::MergeFrom(const RT_MS_Convolution& from) {
  GOOGLE_CHECK_NE(&from, this);
  spectrumlist_.MergeFrom(from.spectrumlist_);
  infieldoffaxisvector_.MergeFrom(from.infieldoffaxisvector_);
  physicalwedgefieldlist_.MergeFrom(from.physicalwedgefieldlist_);
  virtualwedgeinfolist_.MergeFrom(from.virtualwedgeinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamone()) {
      set_diamone(from.diamone());
    }
    if (from.has_diamtwo()) {
      set_diamtwo(from.diamtwo());
    }
    if (from.has_srcratio()) {
      set_srcratio(from.srcratio());
    }
    if (from.has_transmission()) {
      set_transmission(from.transmission());
    }
    if (from.has_psd()) {
      set_psd(from.psd());
    }
    if (from.has_srcdepth()) {
      set_srcdepth(from.srcdepth());
    }
    if (from.has_srcatten()) {
      set_srcatten(from.srcatten());
    }
    if (from.has_sddxjaw()) {
      set_sddxjaw(from.sddxjaw());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sddyjaw()) {
      set_sddyjaw(from.sddyjaw());
    }
    if (from.has_normtenmultiten()) {
      set_normtenmultiten(from.normtenmultiten());
    }
    if (from.has_xk0()) {
      set_xk0(from.xk0());
    }
    if (from.has_xk1()) {
      set_xk1(from.xk1());
    }
    if (from.has_xk2()) {
      set_xk2(from.xk2());
    }
    if (from.has_yk0()) {
      set_yk0(from.yk0());
    }
    if (from.has_yk1()) {
      set_yk1(from.yk1());
    }
    if (from.has_yk2()) {
      set_yk2(from.yk2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_electroncontaminationflag()) {
      set_electroncontaminationflag(from.electroncontaminationflag());
    }
    if (from.has_electronmaxdepth()) {
      set_electronmaxdepth(from.electronmaxdepth());
    }
    if (from.has_surfacedose()) {
      set_surfacedose(from.surfacedose());
    }
    if (from.has_depthcoefficientk()) {
      set_depthcoefficientk(from.depthcoefficientk());
    }
    if (from.has_offaxiscoefficienta()) {
      set_offaxiscoefficienta(from.offaxiscoefficienta());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
    if (from.has_sf()) {
      set_sf(from.sf());
    }
    if (from.has_cone()) {
      set_cone(from.cone());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ctwo()) {
      set_ctwo(from.ctwo());
    }
    if (from.has_cthree()) {
      set_cthree(from.cthree());
    }
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_accname()) {
      set_accname(from.accname());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_accessoryuid()) {
      set_accessoryuid(from.accessoryuid());
    }
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
    if (from.has_pddmubase()) {
      set_pddmubase(from.pddmubase());
    }
    if (from.has_pdddmumx()) {
      set_pdddmumx(from.pdddmumx());
    }
    if (from.has_mudatax()) {
      set_mudatax(from.mudatax());
    }
    if (from.has_ddmudr()) {
      set_ddmudr(from.ddmudr());
    }
    if (from.has_mudatay()) {
      set_mudatay(from.mudatay());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_dmudatay()) {
      set_dmudatay(from.dmudatay());
    }
    if (from.has_outputmuy()) {
      set_outputmuy(from.outputmuy());
    }
    if (from.has_dmudr()) {
      set_dmudr(from.dmudr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_Convolution::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_Convolution::CopyFrom(const RT_MS_Convolution& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_Convolution::IsInitialized() const {
  
  return true;
}

void RT_MS_Convolution::Swap(RT_MS_Convolution* other) {
  if (other != this) {
    std::swap(diamone_, other->diamone_);
    std::swap(diamtwo_, other->diamtwo_);
    std::swap(srcratio_, other->srcratio_);
    std::swap(transmission_, other->transmission_);
    std::swap(psd_, other->psd_);
    std::swap(srcdepth_, other->srcdepth_);
    std::swap(srcatten_, other->srcatten_);
    std::swap(sddxjaw_, other->sddxjaw_);
    std::swap(sddyjaw_, other->sddyjaw_);
    std::swap(normtenmultiten_, other->normtenmultiten_);
    std::swap(xk0_, other->xk0_);
    std::swap(xk1_, other->xk1_);
    std::swap(xk2_, other->xk2_);
    std::swap(yk0_, other->yk0_);
    std::swap(yk1_, other->yk1_);
    std::swap(yk2_, other->yk2_);
    std::swap(electroncontaminationflag_, other->electroncontaminationflag_);
    std::swap(electronmaxdepth_, other->electronmaxdepth_);
    std::swap(surfacedose_, other->surfacedose_);
    std::swap(depthcoefficientk_, other->depthcoefficientk_);
    std::swap(offaxiscoefficienta_, other->offaxiscoefficienta_);
    std::swap(df_, other->df_);
    std::swap(sf_, other->sf_);
    std::swap(cone_, other->cone_);
    std::swap(ctwo_, other->ctwo_);
    std::swap(cthree_, other->cthree_);
    spectrumlist_.Swap(&other->spectrumlist_);
    infieldoffaxisvector_.Swap(&other->infieldoffaxisvector_);
    physicalwedgefieldlist_.Swap(&other->physicalwedgefieldlist_);
    virtualwedgeinfolist_.Swap(&other->virtualwedgeinfolist_);
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(accname_, other->accname_);
    std::swap(accessoryuid_, other->accessoryuid_);
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(algtype_, other->algtype_);
    std::swap(pddmubase_, other->pddmubase_);
    std::swap(pdddmumx_, other->pdddmumx_);
    std::swap(mudatax_, other->mudatax_);
    std::swap(ddmudr_, other->ddmudr_);
    std::swap(mudatay_, other->mudatay_);
    std::swap(dmudatay_, other->dmudatay_);
    std::swap(outputmuy_, other->outputmuy_);
    std::swap(dmudr_, other->dmudr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_Convolution::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_Convolution_descriptor_;
  metadata.reflection = RT_MS_Convolution_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PDDSpectrum::kUid0FieldNumber;
const int RT_MS_PDDSpectrum::kUid40FieldNumber;
const int RT_MS_PDDSpectrum::kEnergy0FieldNumber;
const int RT_MS_PDDSpectrum::kEnergy40FieldNumber;
const int RT_MS_PDDSpectrum::kKernelWeight0FieldNumber;
const int RT_MS_PDDSpectrum::kKernelWeight40FieldNumber;
const int RT_MS_PDDSpectrum::kFieldSizeFieldNumber;
#endif  // !_MSC_VER

RT_MS_PDDSpectrum::RT_MS_PDDSpectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PDDSpectrum::InitAsDefaultInstance() {
}

RT_MS_PDDSpectrum::RT_MS_PDDSpectrum(const RT_MS_PDDSpectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PDDSpectrum::SharedCtor() {
  _cached_size_ = 0;
  uid0_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid40_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  energy0_ = 0;
  energy40_ = 0;
  kernelweight0_ = 0;
  kernelweight40_ = 0;
  fieldsize_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PDDSpectrum::~RT_MS_PDDSpectrum() {
  SharedDtor();
}

void RT_MS_PDDSpectrum::SharedDtor() {
  if (uid0_ != &::google::protobuf::internal::kEmptyString) {
    delete uid0_;
  }
  if (uid40_ != &::google::protobuf::internal::kEmptyString) {
    delete uid40_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PDDSpectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PDDSpectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PDDSpectrum_descriptor_;
}

const RT_MS_PDDSpectrum& RT_MS_PDDSpectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_PDDSpectrum* RT_MS_PDDSpectrum::default_instance_ = NULL;

RT_MS_PDDSpectrum* RT_MS_PDDSpectrum::New() const {
  return new RT_MS_PDDSpectrum;
}

void RT_MS_PDDSpectrum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid0()) {
      if (uid0_ != &::google::protobuf::internal::kEmptyString) {
        uid0_->clear();
      }
    }
    if (has_uid40()) {
      if (uid40_ != &::google::protobuf::internal::kEmptyString) {
        uid40_->clear();
      }
    }
    energy0_ = 0;
    energy40_ = 0;
    kernelweight0_ = 0;
    kernelweight40_ = 0;
    fieldsize_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PDDSpectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid0 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid0()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid0().data(), this->uid0().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_uid40;
        break;
      }
      
      // optional string uid40 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid40:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid40()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid40().data(), this->uid40().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_energy0;
        break;
      }
      
      // optional int32 energy0 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy0_)));
          set_has_energy0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_energy40;
        break;
      }
      
      // optional int32 energy40 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_energy40:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &energy40_)));
          set_has_energy40();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_kernelWeight0;
        break;
      }
      
      // optional float kernelWeight0 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_kernelWeight0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kernelweight0_)));
          set_has_kernelweight0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_kernelWeight40;
        break;
      }
      
      // optional float kernelWeight40 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_kernelWeight40:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kernelweight40_)));
          set_has_kernelweight40();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fieldSize;
        break;
      }
      
      // optional int32 fieldSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fieldsize_)));
          set_has_fieldsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PDDSpectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid0 = 1;
  if (has_uid0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid0().data(), this->uid0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid0(), output);
  }
  
  // optional string uid40 = 2;
  if (has_uid40()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid40().data(), this->uid40().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->uid40(), output);
  }
  
  // optional int32 energy0 = 3;
  if (has_energy0()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->energy0(), output);
  }
  
  // optional int32 energy40 = 4;
  if (has_energy40()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->energy40(), output);
  }
  
  // optional float kernelWeight0 = 5;
  if (has_kernelweight0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->kernelweight0(), output);
  }
  
  // optional float kernelWeight40 = 6;
  if (has_kernelweight40()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->kernelweight40(), output);
  }
  
  // optional int32 fieldSize = 7;
  if (has_fieldsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fieldsize(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PDDSpectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid0 = 1;
  if (has_uid0()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid0().data(), this->uid0().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid0(), target);
  }
  
  // optional string uid40 = 2;
  if (has_uid40()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid40().data(), this->uid40().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->uid40(), target);
  }
  
  // optional int32 energy0 = 3;
  if (has_energy0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->energy0(), target);
  }
  
  // optional int32 energy40 = 4;
  if (has_energy40()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->energy40(), target);
  }
  
  // optional float kernelWeight0 = 5;
  if (has_kernelweight0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->kernelweight0(), target);
  }
  
  // optional float kernelWeight40 = 6;
  if (has_kernelweight40()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->kernelweight40(), target);
  }
  
  // optional int32 fieldSize = 7;
  if (has_fieldsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fieldsize(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PDDSpectrum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid0 = 1;
    if (has_uid0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid0());
    }
    
    // optional string uid40 = 2;
    if (has_uid40()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid40());
    }
    
    // optional int32 energy0 = 3;
    if (has_energy0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy0());
    }
    
    // optional int32 energy40 = 4;
    if (has_energy40()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->energy40());
    }
    
    // optional float kernelWeight0 = 5;
    if (has_kernelweight0()) {
      total_size += 1 + 4;
    }
    
    // optional float kernelWeight40 = 6;
    if (has_kernelweight40()) {
      total_size += 1 + 4;
    }
    
    // optional int32 fieldSize = 7;
    if (has_fieldsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fieldsize());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PDDSpectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PDDSpectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PDDSpectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PDDSpectrum::MergeFrom(const RT_MS_PDDSpectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid0()) {
      set_uid0(from.uid0());
    }
    if (from.has_uid40()) {
      set_uid40(from.uid40());
    }
    if (from.has_energy0()) {
      set_energy0(from.energy0());
    }
    if (from.has_energy40()) {
      set_energy40(from.energy40());
    }
    if (from.has_kernelweight0()) {
      set_kernelweight0(from.kernelweight0());
    }
    if (from.has_kernelweight40()) {
      set_kernelweight40(from.kernelweight40());
    }
    if (from.has_fieldsize()) {
      set_fieldsize(from.fieldsize());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PDDSpectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PDDSpectrum::CopyFrom(const RT_MS_PDDSpectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PDDSpectrum::IsInitialized() const {
  
  return true;
}

void RT_MS_PDDSpectrum::Swap(RT_MS_PDDSpectrum* other) {
  if (other != this) {
    std::swap(uid0_, other->uid0_);
    std::swap(uid40_, other->uid40_);
    std::swap(energy0_, other->energy0_);
    std::swap(energy40_, other->energy40_);
    std::swap(kernelweight0_, other->kernelweight0_);
    std::swap(kernelweight40_, other->kernelweight40_);
    std::swap(fieldsize_, other->fieldsize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PDDSpectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PDDSpectrum_descriptor_;
  metadata.reflection = RT_MS_PDDSpectrum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_InFieldOffaxisVector::kUidFieldNumber;
const int RT_MS_InFieldOffaxisVector::kRadiusFieldNumber;
const int RT_MS_InFieldOffaxisVector::kOffaxisRatioFieldNumber;
#endif  // !_MSC_VER

RT_MS_InFieldOffaxisVector::RT_MS_InFieldOffaxisVector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_InFieldOffaxisVector::InitAsDefaultInstance() {
}

RT_MS_InFieldOffaxisVector::RT_MS_InFieldOffaxisVector(const RT_MS_InFieldOffaxisVector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_InFieldOffaxisVector::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radius_ = 0;
  offaxisratio_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_InFieldOffaxisVector::~RT_MS_InFieldOffaxisVector() {
  SharedDtor();
}

void RT_MS_InFieldOffaxisVector::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_InFieldOffaxisVector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_InFieldOffaxisVector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_InFieldOffaxisVector_descriptor_;
}

const RT_MS_InFieldOffaxisVector& RT_MS_InFieldOffaxisVector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_InFieldOffaxisVector* RT_MS_InFieldOffaxisVector::default_instance_ = NULL;

RT_MS_InFieldOffaxisVector* RT_MS_InFieldOffaxisVector::New() const {
  return new RT_MS_InFieldOffaxisVector;
}

void RT_MS_InFieldOffaxisVector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    radius_ = 0;
    offaxisratio_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_InFieldOffaxisVector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_radius;
        break;
      }
      
      // optional float radius = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_offaxisRatio;
        break;
      }
      
      // optional float offaxisRatio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offaxisRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offaxisratio_)));
          set_has_offaxisratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_InFieldOffaxisVector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float radius = 2;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }
  
  // optional float offaxisRatio = 3;
  if (has_offaxisratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offaxisratio(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_InFieldOffaxisVector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float radius = 2;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }
  
  // optional float offaxisRatio = 3;
  if (has_offaxisratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offaxisratio(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_InFieldOffaxisVector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float radius = 2;
    if (has_radius()) {
      total_size += 1 + 4;
    }
    
    // optional float offaxisRatio = 3;
    if (has_offaxisratio()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_InFieldOffaxisVector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_InFieldOffaxisVector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_InFieldOffaxisVector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_InFieldOffaxisVector::MergeFrom(const RT_MS_InFieldOffaxisVector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_offaxisratio()) {
      set_offaxisratio(from.offaxisratio());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_InFieldOffaxisVector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_InFieldOffaxisVector::CopyFrom(const RT_MS_InFieldOffaxisVector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_InFieldOffaxisVector::IsInitialized() const {
  
  return true;
}

void RT_MS_InFieldOffaxisVector::Swap(RT_MS_InFieldOffaxisVector* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(radius_, other->radius_);
    std::swap(offaxisratio_, other->offaxisratio_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_InFieldOffaxisVector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_InFieldOffaxisVector_descriptor_;
  metadata.reflection = RT_MS_InFieldOffaxisVector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ConvolutionContourVerter::kUidFieldNumber;
const int RT_MS_ConvolutionContourVerter::kContourVerterxFieldNumber;
const int RT_MS_ConvolutionContourVerter::kContourVerteryFieldNumber;
#endif  // !_MSC_VER

RT_MS_ConvolutionContourVerter::RT_MS_ConvolutionContourVerter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ConvolutionContourVerter::InitAsDefaultInstance() {
}

RT_MS_ConvolutionContourVerter::RT_MS_ConvolutionContourVerter(const RT_MS_ConvolutionContourVerter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ConvolutionContourVerter::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contourverterx_ = 0;
  contourvertery_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ConvolutionContourVerter::~RT_MS_ConvolutionContourVerter() {
  SharedDtor();
}

void RT_MS_ConvolutionContourVerter::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ConvolutionContourVerter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ConvolutionContourVerter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ConvolutionContourVerter_descriptor_;
}

const RT_MS_ConvolutionContourVerter& RT_MS_ConvolutionContourVerter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_ConvolutionContourVerter* RT_MS_ConvolutionContourVerter::default_instance_ = NULL;

RT_MS_ConvolutionContourVerter* RT_MS_ConvolutionContourVerter::New() const {
  return new RT_MS_ConvolutionContourVerter;
}

void RT_MS_ConvolutionContourVerter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    contourverterx_ = 0;
    contourvertery_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ConvolutionContourVerter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ContourVerterx;
        break;
      }
      
      // optional float ContourVerterx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVerterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourverterx_)));
          set_has_contourverterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ContourVertery;
        break;
      }
      
      // optional float ContourVertery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVertery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourvertery_)));
          set_has_contourvertery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ConvolutionContourVerter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->contourverterx(), output);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contourvertery(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ConvolutionContourVerter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->contourverterx(), target);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contourvertery(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ConvolutionContourVerter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float ContourVerterx = 2;
    if (has_contourverterx()) {
      total_size += 1 + 4;
    }
    
    // optional float ContourVertery = 3;
    if (has_contourvertery()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ConvolutionContourVerter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ConvolutionContourVerter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ConvolutionContourVerter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ConvolutionContourVerter::MergeFrom(const RT_MS_ConvolutionContourVerter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_contourverterx()) {
      set_contourverterx(from.contourverterx());
    }
    if (from.has_contourvertery()) {
      set_contourvertery(from.contourvertery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ConvolutionContourVerter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ConvolutionContourVerter::CopyFrom(const RT_MS_ConvolutionContourVerter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ConvolutionContourVerter::IsInitialized() const {
  
  return true;
}

void RT_MS_ConvolutionContourVerter::Swap(RT_MS_ConvolutionContourVerter* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(contourverterx_, other->contourverterx_);
    std::swap(contourvertery_, other->contourvertery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ConvolutionContourVerter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ConvolutionContourVerter_descriptor_;
  metadata.reflection = RT_MS_ConvolutionContourVerter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PhysicalWedgeField::kWedgeUIDFieldNumber;
const int RT_MS_PhysicalWedgeField::kWedgeIdFieldNumber;
const int RT_MS_PhysicalWedgeField::kWedgeTypeFieldNumber;
const int RT_MS_PhysicalWedgeField::kMuFieldNumber;
const int RT_MS_PhysicalWedgeField::kDmudxFieldNumber;
const int RT_MS_PhysicalWedgeField::kDmudrFieldNumber;
const int RT_MS_PhysicalWedgeField::kDmudaFieldNumber;
const int RT_MS_PhysicalWedgeField::kHvlSlopeFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierUDIFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarriermuFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierdmudxFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierdmudrFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierdmudaFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierhvlSlopeFieldNumber;
const int RT_MS_PhysicalWedgeField::kWedgeThickFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierThickFieldNumber;
const int RT_MS_PhysicalWedgeField::kWeightContourVerterListFieldNumber;
const int RT_MS_PhysicalWedgeField::kCarrierContourVerterListFieldNumber;
const int RT_MS_PhysicalWedgeField::kContourUID1FieldNumber;
const int RT_MS_PhysicalWedgeField::kContourUID2FieldNumber;
const int RT_MS_PhysicalWedgeField::kParentUIDFieldNumber;
const int RT_MS_PhysicalWedgeField::kAlgTypeFieldNumber;
const int RT_MS_PhysicalWedgeField::kDensityFieldNumber;
#endif  // !_MSC_VER

RT_MS_PhysicalWedgeField::RT_MS_PhysicalWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PhysicalWedgeField::InitAsDefaultInstance() {
}

RT_MS_PhysicalWedgeField::RT_MS_PhysicalWedgeField(const RT_MS_PhysicalWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PhysicalWedgeField::SharedCtor() {
  _cached_size_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mu_ = 0;
  dmudx_ = 0;
  dmudr_ = 0;
  dmuda_ = 0;
  hvlslope_ = 0;
  carrierudi_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carriermu_ = 0;
  carrierdmudx_ = 0;
  carrierdmudr_ = 0;
  carrierdmuda_ = 0;
  carrierhvlslope_ = 0;
  wedgethick_ = 0;
  carrierthick_ = 0;
  contouruid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contouruid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algtype_ = 0;
  density_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PhysicalWedgeField::~RT_MS_PhysicalWedgeField() {
  SharedDtor();
}

void RT_MS_PhysicalWedgeField::SharedDtor() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgetype_;
  }
  if (carrierudi_ != &::google::protobuf::internal::kEmptyString) {
    delete carrierudi_;
  }
  if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid1_;
  }
  if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid2_;
  }
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PhysicalWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PhysicalWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PhysicalWedgeField_descriptor_;
}

const RT_MS_PhysicalWedgeField& RT_MS_PhysicalWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_PhysicalWedgeField* RT_MS_PhysicalWedgeField::default_instance_ = NULL;

RT_MS_PhysicalWedgeField* RT_MS_PhysicalWedgeField::New() const {
  return new RT_MS_PhysicalWedgeField;
}

void RT_MS_PhysicalWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    if (has_wedgetype()) {
      if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
        wedgetype_->clear();
      }
    }
    mu_ = 0;
    dmudx_ = 0;
    dmudr_ = 0;
    dmuda_ = 0;
    hvlslope_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_carrierudi()) {
      if (carrierudi_ != &::google::protobuf::internal::kEmptyString) {
        carrierudi_->clear();
      }
    }
    carriermu_ = 0;
    carrierdmudx_ = 0;
    carrierdmudr_ = 0;
    carrierdmuda_ = 0;
    carrierhvlslope_ = 0;
    wedgethick_ = 0;
    carrierthick_ = 0;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (has_contouruid1()) {
      if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
        contouruid1_->clear();
      }
    }
    if (has_contouruid2()) {
      if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
        contouruid2_->clear();
      }
    }
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
    algtype_ = 0;
    density_ = 0;
  }
  weightcontourverterlist_.Clear();
  carriercontourverterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PhysicalWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedgeId;
        break;
      }
      
      // optional string wedgeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_wedgeType;
        break;
      }
      
      // optional string wedgeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgetype().data(), this->wedgetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_mu;
        break;
      }
      
      // optional float mu = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dmudx;
        break;
      }
      
      // optional float dmudx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudx_)));
          set_has_dmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dmudr;
        break;
      }
      
      // optional float dmudr = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudr_)));
          set_has_dmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_dmuda;
        break;
      }
      
      // optional float dmuda = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmuda_)));
          set_has_dmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_hvlSlope;
        break;
      }
      
      // optional float hvlSlope = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvlslope_)));
          set_has_hvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_CarrierUDI;
        break;
      }
      
      // optional string CarrierUDI = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CarrierUDI:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrierudi()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrierudi().data(), this->carrierudi().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Carriermu;
        break;
      }
      
      // optional float Carriermu = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carriermu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carriermu_)));
          set_has_carriermu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Carrierdmudx;
        break;
      }
      
      // optional float Carrierdmudx = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudx_)));
          set_has_carrierdmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_Carrierdmudr;
        break;
      }
      
      // optional float Carrierdmudr = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudr_)));
          set_has_carrierdmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_Carrierdmuda;
        break;
      }
      
      // optional float Carrierdmuda = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmuda_)));
          set_has_carrierdmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_CarrierhvlSlope;
        break;
      }
      
      // optional float CarrierhvlSlope = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CarrierhvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierhvlslope_)));
          set_has_carrierhvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_wedgeThick;
        break;
      }
      
      // optional float wedgeThick = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgeThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgethick_)));
          set_has_wedgethick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_carrierThick;
        break;
      }
      
      // optional float carrierThick = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carrierThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierthick_)));
          set_has_carrierthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_weightContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ConvolutionContourVerter weightContourVerterList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weightContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weightcontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_weightContourVerterList;
        if (input->ExpectTag(146)) goto parse_carrierContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ConvolutionContourVerter carrierContourVerterList = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carriercontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_carrierContourVerterList;
        if (input->ExpectTag(154)) goto parse_contourUID1;
        break;
      }
      
      // optional string contourUID1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid1().data(), this->contouruid1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_contourUID2;
        break;
      }
      
      // optional string contourUID2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid2().data(), this->contouruid2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_parentUID;
        break;
      }
      
      // optional string parentUID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_density;
        break;
      }
      
      // optional float density = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PhysicalWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgeuid(), output);
  }
  
  // optional string wedgeId = 2;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedgeid(), output);
  }
  
  // optional string wedgeType = 3;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->wedgetype(), output);
  }
  
  // optional float mu = 4;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mu(), output);
  }
  
  // optional float dmudx = 5;
  if (has_dmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dmudx(), output);
  }
  
  // optional float dmudr = 6;
  if (has_dmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dmudr(), output);
  }
  
  // optional float dmuda = 7;
  if (has_dmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dmuda(), output);
  }
  
  // optional float hvlSlope = 8;
  if (has_hvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->hvlslope(), output);
  }
  
  // optional string CarrierUDI = 9;
  if (has_carrierudi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrierudi().data(), this->carrierudi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->carrierudi(), output);
  }
  
  // optional float Carriermu = 10;
  if (has_carriermu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->carriermu(), output);
  }
  
  // optional float Carrierdmudx = 11;
  if (has_carrierdmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->carrierdmudx(), output);
  }
  
  // optional float Carrierdmudr = 12;
  if (has_carrierdmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->carrierdmudr(), output);
  }
  
  // optional float Carrierdmuda = 13;
  if (has_carrierdmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->carrierdmuda(), output);
  }
  
  // optional float CarrierhvlSlope = 14;
  if (has_carrierhvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->carrierhvlslope(), output);
  }
  
  // optional float wedgeThick = 15;
  if (has_wedgethick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->wedgethick(), output);
  }
  
  // optional float carrierThick = 16;
  if (has_carrierthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->carrierthick(), output);
  }
  
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter weightContourVerterList = 17;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->weightcontourverterlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter carrierContourVerterList = 18;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->carriercontourverterlist(i), output);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->contouruid1(), output);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->contouruid2(), output);
  }
  
  // optional string parentUID = 21;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->parentuid(), output);
  }
  
  // optional int32 algType = 22;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->algtype(), output);
  }
  
  // optional float density = 23;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->density(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PhysicalWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeUID = 1;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgeuid(), target);
  }
  
  // optional string wedgeId = 2;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedgeid(), target);
  }
  
  // optional string wedgeType = 3;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->wedgetype(), target);
  }
  
  // optional float mu = 4;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mu(), target);
  }
  
  // optional float dmudx = 5;
  if (has_dmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dmudx(), target);
  }
  
  // optional float dmudr = 6;
  if (has_dmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dmudr(), target);
  }
  
  // optional float dmuda = 7;
  if (has_dmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dmuda(), target);
  }
  
  // optional float hvlSlope = 8;
  if (has_hvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->hvlslope(), target);
  }
  
  // optional string CarrierUDI = 9;
  if (has_carrierudi()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrierudi().data(), this->carrierudi().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->carrierudi(), target);
  }
  
  // optional float Carriermu = 10;
  if (has_carriermu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->carriermu(), target);
  }
  
  // optional float Carrierdmudx = 11;
  if (has_carrierdmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->carrierdmudx(), target);
  }
  
  // optional float Carrierdmudr = 12;
  if (has_carrierdmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->carrierdmudr(), target);
  }
  
  // optional float Carrierdmuda = 13;
  if (has_carrierdmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->carrierdmuda(), target);
  }
  
  // optional float CarrierhvlSlope = 14;
  if (has_carrierhvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->carrierhvlslope(), target);
  }
  
  // optional float wedgeThick = 15;
  if (has_wedgethick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->wedgethick(), target);
  }
  
  // optional float carrierThick = 16;
  if (has_carrierthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->carrierthick(), target);
  }
  
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter weightContourVerterList = 17;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->weightcontourverterlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter carrierContourVerterList = 18;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->carriercontourverterlist(i), target);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->contouruid1(), target);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->contouruid2(), target);
  }
  
  // optional string parentUID = 21;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->parentuid(), target);
  }
  
  // optional int32 algType = 22;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->algtype(), target);
  }
  
  // optional float density = 23;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->density(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PhysicalWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeUID = 1;
    if (has_wedgeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional string wedgeId = 2;
    if (has_wedgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional string wedgeType = 3;
    if (has_wedgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgetype());
    }
    
    // optional float mu = 4;
    if (has_mu()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudx = 5;
    if (has_dmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudr = 6;
    if (has_dmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float dmuda = 7;
    if (has_dmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float hvlSlope = 8;
    if (has_hvlslope()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string CarrierUDI = 9;
    if (has_carrierudi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrierudi());
    }
    
    // optional float Carriermu = 10;
    if (has_carriermu()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmudx = 11;
    if (has_carrierdmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmudr = 12;
    if (has_carrierdmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmuda = 13;
    if (has_carrierdmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float CarrierhvlSlope = 14;
    if (has_carrierhvlslope()) {
      total_size += 1 + 4;
    }
    
    // optional float wedgeThick = 15;
    if (has_wedgethick()) {
      total_size += 1 + 4;
    }
    
    // optional float carrierThick = 16;
    if (has_carrierthick()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // optional string contourUID1 = 19;
    if (has_contouruid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid1());
    }
    
    // optional string contourUID2 = 20;
    if (has_contouruid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid2());
    }
    
    // optional string parentUID = 21;
    if (has_parentuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
    // optional int32 algType = 22;
    if (has_algtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
    // optional float density = 23;
    if (has_density()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter weightContourVerterList = 17;
  total_size += 2 * this->weightcontourverterlist_size();
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weightcontourverterlist(i));
  }
  
  // repeated .ms.proto.RT_MS_ConvolutionContourVerter carrierContourVerterList = 18;
  total_size += 2 * this->carriercontourverterlist_size();
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carriercontourverterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PhysicalWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PhysicalWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PhysicalWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PhysicalWedgeField::MergeFrom(const RT_MS_PhysicalWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  weightcontourverterlist_.MergeFrom(from.weightcontourverterlist_);
  carriercontourverterlist_.MergeFrom(from.carriercontourverterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_wedgetype()) {
      set_wedgetype(from.wedgetype());
    }
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_dmudx()) {
      set_dmudx(from.dmudx());
    }
    if (from.has_dmudr()) {
      set_dmudr(from.dmudr());
    }
    if (from.has_dmuda()) {
      set_dmuda(from.dmuda());
    }
    if (from.has_hvlslope()) {
      set_hvlslope(from.hvlslope());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carrierudi()) {
      set_carrierudi(from.carrierudi());
    }
    if (from.has_carriermu()) {
      set_carriermu(from.carriermu());
    }
    if (from.has_carrierdmudx()) {
      set_carrierdmudx(from.carrierdmudx());
    }
    if (from.has_carrierdmudr()) {
      set_carrierdmudr(from.carrierdmudr());
    }
    if (from.has_carrierdmuda()) {
      set_carrierdmuda(from.carrierdmuda());
    }
    if (from.has_carrierhvlslope()) {
      set_carrierhvlslope(from.carrierhvlslope());
    }
    if (from.has_wedgethick()) {
      set_wedgethick(from.wedgethick());
    }
    if (from.has_carrierthick()) {
      set_carrierthick(from.carrierthick());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_contouruid1()) {
      set_contouruid1(from.contouruid1());
    }
    if (from.has_contouruid2()) {
      set_contouruid2(from.contouruid2());
    }
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PhysicalWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PhysicalWedgeField::CopyFrom(const RT_MS_PhysicalWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PhysicalWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_PhysicalWedgeField::Swap(RT_MS_PhysicalWedgeField* other) {
  if (other != this) {
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(wedgetype_, other->wedgetype_);
    std::swap(mu_, other->mu_);
    std::swap(dmudx_, other->dmudx_);
    std::swap(dmudr_, other->dmudr_);
    std::swap(dmuda_, other->dmuda_);
    std::swap(hvlslope_, other->hvlslope_);
    std::swap(carrierudi_, other->carrierudi_);
    std::swap(carriermu_, other->carriermu_);
    std::swap(carrierdmudx_, other->carrierdmudx_);
    std::swap(carrierdmudr_, other->carrierdmudr_);
    std::swap(carrierdmuda_, other->carrierdmuda_);
    std::swap(carrierhvlslope_, other->carrierhvlslope_);
    std::swap(wedgethick_, other->wedgethick_);
    std::swap(carrierthick_, other->carrierthick_);
    weightcontourverterlist_.Swap(&other->weightcontourverterlist_);
    carriercontourverterlist_.Swap(&other->carriercontourverterlist_);
    std::swap(contouruid1_, other->contouruid1_);
    std::swap(contouruid2_, other->contouruid2_);
    std::swap(parentuid_, other->parentuid_);
    std::swap(algtype_, other->algtype_);
    std::swap(density_, other->density_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PhysicalWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PhysicalWedgeField_descriptor_;
  metadata.reflection = RT_MS_PhysicalWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedPhysicalWedgeField::kPhysicalwedgefieldlistFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedPhysicalWedgeField::RtTpsProtoRepeatedPhysicalWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedPhysicalWedgeField::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedPhysicalWedgeField::RtTpsProtoRepeatedPhysicalWedgeField(const RtTpsProtoRepeatedPhysicalWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPhysicalWedgeField::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedPhysicalWedgeField::~RtTpsProtoRepeatedPhysicalWedgeField() {
  SharedDtor();
}

void RtTpsProtoRepeatedPhysicalWedgeField::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedPhysicalWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPhysicalWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedPhysicalWedgeField_descriptor_;
}

const RtTpsProtoRepeatedPhysicalWedgeField& RtTpsProtoRepeatedPhysicalWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedPhysicalWedgeField* RtTpsProtoRepeatedPhysicalWedgeField::default_instance_ = NULL;

RtTpsProtoRepeatedPhysicalWedgeField* RtTpsProtoRepeatedPhysicalWedgeField::New() const {
  return new RtTpsProtoRepeatedPhysicalWedgeField;
}

void RtTpsProtoRepeatedPhysicalWedgeField::Clear() {
  physicalwedgefieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedPhysicalWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalwedgefieldlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physicalwedgefieldlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicalwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_physicalwedgefieldlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedPhysicalWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalwedgefieldlist = 1;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->physicalwedgefieldlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedPhysicalWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalwedgefieldlist = 1;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->physicalwedgefieldlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedPhysicalWedgeField::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_PhysicalWedgeField physicalwedgefieldlist = 1;
  total_size += 1 * this->physicalwedgefieldlist_size();
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicalwedgefieldlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedPhysicalWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedPhysicalWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedPhysicalWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedPhysicalWedgeField::MergeFrom(const RtTpsProtoRepeatedPhysicalWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  physicalwedgefieldlist_.MergeFrom(from.physicalwedgefieldlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedPhysicalWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPhysicalWedgeField::CopyFrom(const RtTpsProtoRepeatedPhysicalWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedPhysicalWedgeField::IsInitialized() const {
  
  return true;
}

void RtTpsProtoRepeatedPhysicalWedgeField::Swap(RtTpsProtoRepeatedPhysicalWedgeField* other) {
  if (other != this) {
    physicalwedgefieldlist_.Swap(&other->physicalwedgefieldlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedPhysicalWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedPhysicalWedgeField_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedPhysicalWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_VirtualWedgeInfo::kParentUIDFieldNumber;
const int RT_MS_VirtualWedgeInfo::kVirtualUidFieldNumber;
const int RT_MS_VirtualWedgeInfo::kGoldenUIDFieldNumber;
const int RT_MS_VirtualWedgeInfo::kVirtualWedgeFieldListFieldNumber;
const int RT_MS_VirtualWedgeInfo::kAlgTypeFieldNumber;
#endif  // !_MSC_VER

RT_MS_VirtualWedgeInfo::RT_MS_VirtualWedgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_VirtualWedgeInfo::InitAsDefaultInstance() {
}

RT_MS_VirtualWedgeInfo::RT_MS_VirtualWedgeInfo(const RT_MS_VirtualWedgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeInfo::SharedCtor() {
  _cached_size_ = 0;
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  virtualuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goldenuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_VirtualWedgeInfo::~RT_MS_VirtualWedgeInfo() {
  SharedDtor();
}

void RT_MS_VirtualWedgeInfo::SharedDtor() {
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
    delete virtualuid_;
  }
  if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
    delete goldenuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_VirtualWedgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_VirtualWedgeInfo_descriptor_;
}

const RT_MS_VirtualWedgeInfo& RT_MS_VirtualWedgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_VirtualWedgeInfo* RT_MS_VirtualWedgeInfo::default_instance_ = NULL;

RT_MS_VirtualWedgeInfo* RT_MS_VirtualWedgeInfo::New() const {
  return new RT_MS_VirtualWedgeInfo;
}

void RT_MS_VirtualWedgeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
    if (has_virtualuid()) {
      if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
        virtualuid_->clear();
      }
    }
    if (has_goldenuid()) {
      if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
        goldenuid_->clear();
      }
    }
    algtype_ = 0;
  }
  virtualwedgefieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_VirtualWedgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string parentUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_virtualUid;
        break;
      }
      
      // optional string virtualUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtualuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtualuid().data(), this->virtualuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goldenUID;
        break;
      }
      
      // optional string goldenUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldenUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goldenuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goldenuid().data(), this->goldenuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_VirtualWedgeField virtualWedgeFieldList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_virtualWedgeFieldList;
        if (input->ExpectTag(40)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_VirtualWedgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string parentUID = 1;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parentuid(), output);
  }
  
  // optional string virtualUid = 2;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->virtualuid(), output);
  }
  
  // optional string goldenUID = 3;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->goldenuid(), output);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeField virtualWedgeFieldList = 4;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->virtualwedgefieldlist(i), output);
  }
  
  // optional int32 algType = 5;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->algtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_VirtualWedgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string parentUID = 1;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parentuid(), target);
  }
  
  // optional string virtualUid = 2;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->virtualuid(), target);
  }
  
  // optional string goldenUID = 3;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->goldenuid(), target);
  }
  
  // repeated .ms.proto.RT_MS_VirtualWedgeField virtualWedgeFieldList = 4;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->virtualwedgefieldlist(i), target);
  }
  
  // optional int32 algType = 5;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->algtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_VirtualWedgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string parentUID = 1;
    if (has_parentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
    // optional string virtualUid = 2;
    if (has_virtualuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtualuid());
    }
    
    // optional string goldenUID = 3;
    if (has_goldenuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goldenuid());
    }
    
    // optional int32 algType = 5;
    if (has_algtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
  }
  // repeated .ms.proto.RT_MS_VirtualWedgeField virtualWedgeFieldList = 4;
  total_size += 1 * this->virtualwedgefieldlist_size();
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgefieldlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_VirtualWedgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_VirtualWedgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_VirtualWedgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_VirtualWedgeInfo::MergeFrom(const RT_MS_VirtualWedgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgefieldlist_.MergeFrom(from.virtualwedgefieldlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
    if (from.has_virtualuid()) {
      set_virtualuid(from.virtualuid());
    }
    if (from.has_goldenuid()) {
      set_goldenuid(from.goldenuid());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_VirtualWedgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeInfo::CopyFrom(const RT_MS_VirtualWedgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_VirtualWedgeInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_VirtualWedgeInfo::Swap(RT_MS_VirtualWedgeInfo* other) {
  if (other != this) {
    std::swap(parentuid_, other->parentuid_);
    std::swap(virtualuid_, other->virtualuid_);
    std::swap(goldenuid_, other->goldenuid_);
    virtualwedgefieldlist_.Swap(&other->virtualwedgefieldlist_);
    std::swap(algtype_, other->algtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_VirtualWedgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_VirtualWedgeInfo_descriptor_;
  metadata.reflection = RT_MS_VirtualWedgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedVirtualWedgeInfo::kVirtualwedgeinfolistFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedVirtualWedgeInfo::RtTpsProtoRepeatedVirtualWedgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedVirtualWedgeInfo::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedVirtualWedgeInfo::RtTpsProtoRepeatedVirtualWedgeInfo(const RtTpsProtoRepeatedVirtualWedgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedVirtualWedgeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedVirtualWedgeInfo::~RtTpsProtoRepeatedVirtualWedgeInfo() {
  SharedDtor();
}

void RtTpsProtoRepeatedVirtualWedgeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedVirtualWedgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedVirtualWedgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_;
}

const RtTpsProtoRepeatedVirtualWedgeInfo& RtTpsProtoRepeatedVirtualWedgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedVirtualWedgeInfo* RtTpsProtoRepeatedVirtualWedgeInfo::default_instance_ = NULL;

RtTpsProtoRepeatedVirtualWedgeInfo* RtTpsProtoRepeatedVirtualWedgeInfo::New() const {
  return new RtTpsProtoRepeatedVirtualWedgeInfo;
}

void RtTpsProtoRepeatedVirtualWedgeInfo::Clear() {
  virtualwedgeinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedVirtualWedgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualwedgeinfolist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualwedgeinfolist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgeinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_virtualwedgeinfolist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedVirtualWedgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualwedgeinfolist = 1;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->virtualwedgeinfolist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedVirtualWedgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualwedgeinfolist = 1;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->virtualwedgeinfolist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedVirtualWedgeInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_VirtualWedgeInfo virtualwedgeinfolist = 1;
  total_size += 1 * this->virtualwedgeinfolist_size();
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgeinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedVirtualWedgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedVirtualWedgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedVirtualWedgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedVirtualWedgeInfo::MergeFrom(const RtTpsProtoRepeatedVirtualWedgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgeinfolist_.MergeFrom(from.virtualwedgeinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedVirtualWedgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedVirtualWedgeInfo::CopyFrom(const RtTpsProtoRepeatedVirtualWedgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedVirtualWedgeInfo::IsInitialized() const {
  
  return true;
}

void RtTpsProtoRepeatedVirtualWedgeInfo::Swap(RtTpsProtoRepeatedVirtualWedgeInfo* other) {
  if (other != this) {
    virtualwedgeinfolist_.Swap(&other->virtualwedgeinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedVirtualWedgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedVirtualWedgeInfo_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedVirtualWedgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_VirtualWedgeField::kUidFieldNumber;
const int RT_MS_VirtualWedgeField::kCollimatorX1PositionFieldNumber;
const int RT_MS_VirtualWedgeField::kCollimatorX2PositionFieldNumber;
const int RT_MS_VirtualWedgeField::kRelativeMUFieldNumber;
const int RT_MS_VirtualWedgeField::kCorrectionFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_VirtualWedgeField::RT_MS_VirtualWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_VirtualWedgeField::InitAsDefaultInstance() {
}

RT_MS_VirtualWedgeField::RT_MS_VirtualWedgeField(const RT_MS_VirtualWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeField::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collimatorx1position_ = 0;
  collimatorx2position_ = 0;
  relativemu_ = 0;
  correctionfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_VirtualWedgeField::~RT_MS_VirtualWedgeField() {
  SharedDtor();
}

void RT_MS_VirtualWedgeField::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_VirtualWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_VirtualWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_VirtualWedgeField_descriptor_;
}

const RT_MS_VirtualWedgeField& RT_MS_VirtualWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fconvolution_2eproto();  return *default_instance_;
}

RT_MS_VirtualWedgeField* RT_MS_VirtualWedgeField::default_instance_ = NULL;

RT_MS_VirtualWedgeField* RT_MS_VirtualWedgeField::New() const {
  return new RT_MS_VirtualWedgeField;
}

void RT_MS_VirtualWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    collimatorx1position_ = 0;
    collimatorx2position_ = 0;
    relativemu_ = 0;
    correctionfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_VirtualWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_collimatorX1Position;
        break;
      }
      
      // optional float collimatorX1Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX1Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx1position_)));
          set_has_collimatorx1position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_collimatorX2Position;
        break;
      }
      
      // optional float collimatorX2Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX2Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx2position_)));
          set_has_collimatorx2position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeMU;
        break;
      }
      
      // optional float relativeMU = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeMU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativemu_)));
          set_has_relativemu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_correctionFactor;
        break;
      }
      
      // optional float correctionFactor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_correctionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correctionfactor_)));
          set_has_correctionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_VirtualWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->collimatorx1position(), output);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->collimatorx2position(), output);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativemu(), output);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->correctionfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_VirtualWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->collimatorx1position(), target);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->collimatorx2position(), target);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativemu(), target);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->correctionfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_VirtualWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float collimatorX1Position = 2;
    if (has_collimatorx1position()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorX2Position = 3;
    if (has_collimatorx2position()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeMU = 4;
    if (has_relativemu()) {
      total_size += 1 + 4;
    }
    
    // optional float correctionFactor = 5;
    if (has_correctionfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_VirtualWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_VirtualWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_VirtualWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_VirtualWedgeField::MergeFrom(const RT_MS_VirtualWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_collimatorx1position()) {
      set_collimatorx1position(from.collimatorx1position());
    }
    if (from.has_collimatorx2position()) {
      set_collimatorx2position(from.collimatorx2position());
    }
    if (from.has_relativemu()) {
      set_relativemu(from.relativemu());
    }
    if (from.has_correctionfactor()) {
      set_correctionfactor(from.correctionfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_VirtualWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_VirtualWedgeField::CopyFrom(const RT_MS_VirtualWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_VirtualWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_VirtualWedgeField::Swap(RT_MS_VirtualWedgeField* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(collimatorx1position_, other->collimatorx1position_);
    std::swap(collimatorx2position_, other->collimatorx2position_);
    std::swap(relativemu_, other->relativemu_);
    std::swap(correctionfactor_, other->correctionfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_VirtualWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_VirtualWedgeField_descriptor_;
  metadata.reflection = RT_MS_VirtualWedgeField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
