// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_commissionedunit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoCommissionedunit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoCommissionedunit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedCommissionedunit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedCommissionedunit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoTrayfactor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoTrayfactor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_commissionedunit.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoCommissionedunit_descriptor_ = file->message_type(0);
  static const int RtTpsProtoCommissionedunit_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, commissionedunituid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, radiationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, techniquetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, unitenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, flatteningfiltermode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, doserates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, trayfactors_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, machineuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, transmission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, ispencilebeamsupport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, isconvolutionsupport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, ismontecarlosupport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, defaultdoserateindex_),
  };
  RtTpsProtoCommissionedunit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoCommissionedunit_descriptor_,
      RtTpsProtoCommissionedunit::default_instance_,
      RtTpsProtoCommissionedunit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionedunit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoCommissionedunit));
  RtTpsProtoRepeatedCommissionedunit_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedCommissionedunit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionedunit, commissionedunitlist_),
  };
  RtTpsProtoRepeatedCommissionedunit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedCommissionedunit_descriptor_,
      RtTpsProtoRepeatedCommissionedunit::default_instance_,
      RtTpsProtoRepeatedCommissionedunit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionedunit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionedunit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedCommissionedunit));
  RtTpsProtoTrayfactor_descriptor_ = file->message_type(2);
  static const int RtTpsProtoTrayfactor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, trayuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, trayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, code_),
  };
  RtTpsProtoTrayfactor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoTrayfactor_descriptor_,
      RtTpsProtoTrayfactor::default_instance_,
      RtTpsProtoTrayfactor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTrayfactor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoTrayfactor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoCommissionedunit_descriptor_, &RtTpsProtoCommissionedunit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedCommissionedunit_descriptor_, &RtTpsProtoRepeatedCommissionedunit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoTrayfactor_descriptor_, &RtTpsProtoTrayfactor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto() {
  delete RtTpsProtoCommissionedunit::default_instance_;
  delete RtTpsProtoCommissionedunit_reflection_;
  delete RtTpsProtoRepeatedCommissionedunit::default_instance_;
  delete RtTpsProtoRepeatedCommissionedunit_reflection_;
  delete RtTpsProtoTrayfactor::default_instance_;
  delete RtTpsProtoTrayfactor_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#rt_tps_proto_commissionedunit.proto\022\tt"
    "ps.proto\"\203\003\n\032RtTpsProtoCommissionedunit\022"
    "\033\n\023commissionedunitUID\030\001 \002(\t\022\025\n\rradiatio"
    "nType\030\002 \001(\005\022\025\n\rtechniqueType\030\003 \003(\005\022\022\n\nun"
    "itEnergy\030\004 \001(\t\022\034\n\024flatteningfiltermode\030\005"
    " \001(\005\022\021\n\tdoseRates\030\006 \003(\002\0224\n\013trayfactors\030\007"
    " \003(\0132\037.tps.proto.RtTpsProtoTrayfactor\022\022\n"
    "\nmachineUID\030\010 \001(\t\022\024\n\014transmission\030\t \001(\002\022"
    "\034\n\024ispencilebeamsupport\030\n \001(\010\022\034\n\024isconvo"
    "lutionsupport\030\013 \001(\010\022\033\n\023ismontecarlosuppo"
    "rt\030\014 \001(\010\022\034\n\024defaultdoserateindex\030\r \001(\005\"i"
    "\n\"RtTpsProtoRepeatedCommissionedunit\022C\n\024"
    "commissionedunitList\030\001 \003(\0132%.tps.proto.R"
    "tTpsProtoCommissionedunit\"U\n\024RtTpsProtoT"
    "rayfactor\022\017\n\007trayUID\030\001 \002(\t\022\016\n\006factor\030\002 \002"
    "(\002\022\016\n\006trayID\030\003 \002(\t\022\014\n\004code\030\004 \001(\t", 632);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_commissionedunit.proto", &protobuf_RegisterTypes);
  RtTpsProtoCommissionedunit::default_instance_ = new RtTpsProtoCommissionedunit();
  RtTpsProtoRepeatedCommissionedunit::default_instance_ = new RtTpsProtoRepeatedCommissionedunit();
  RtTpsProtoTrayfactor::default_instance_ = new RtTpsProtoTrayfactor();
  RtTpsProtoCommissionedunit::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedCommissionedunit::default_instance_->InitAsDefaultInstance();
  RtTpsProtoTrayfactor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fcommissionedunit_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fcommissionedunit_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fcommissionedunit_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoCommissionedunit::kCommissionedunitUIDFieldNumber;
const int RtTpsProtoCommissionedunit::kRadiationTypeFieldNumber;
const int RtTpsProtoCommissionedunit::kTechniqueTypeFieldNumber;
const int RtTpsProtoCommissionedunit::kUnitEnergyFieldNumber;
const int RtTpsProtoCommissionedunit::kFlatteningfiltermodeFieldNumber;
const int RtTpsProtoCommissionedunit::kDoseRatesFieldNumber;
const int RtTpsProtoCommissionedunit::kTrayfactorsFieldNumber;
const int RtTpsProtoCommissionedunit::kMachineUIDFieldNumber;
const int RtTpsProtoCommissionedunit::kTransmissionFieldNumber;
const int RtTpsProtoCommissionedunit::kIspencilebeamsupportFieldNumber;
const int RtTpsProtoCommissionedunit::kIsconvolutionsupportFieldNumber;
const int RtTpsProtoCommissionedunit::kIsmontecarlosupportFieldNumber;
const int RtTpsProtoCommissionedunit::kDefaultdoserateindexFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoCommissionedunit::RtTpsProtoCommissionedunit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoCommissionedunit::InitAsDefaultInstance() {
}

RtTpsProtoCommissionedunit::RtTpsProtoCommissionedunit(const RtTpsProtoCommissionedunit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoCommissionedunit::SharedCtor() {
  _cached_size_ = 0;
  commissionedunituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radiationtype_ = 0;
  unitenergy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flatteningfiltermode_ = 0;
  machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transmission_ = 0;
  ispencilebeamsupport_ = false;
  isconvolutionsupport_ = false;
  ismontecarlosupport_ = false;
  defaultdoserateindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoCommissionedunit::~RtTpsProtoCommissionedunit() {
  SharedDtor();
}

void RtTpsProtoCommissionedunit::SharedDtor() {
  if (commissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionedunituid_;
  }
  if (unitenergy_ != &::google::protobuf::internal::kEmptyString) {
    delete unitenergy_;
  }
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoCommissionedunit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoCommissionedunit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoCommissionedunit_descriptor_;
}

const RtTpsProtoCommissionedunit& RtTpsProtoCommissionedunit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();  return *default_instance_;
}

RtTpsProtoCommissionedunit* RtTpsProtoCommissionedunit::default_instance_ = NULL;

RtTpsProtoCommissionedunit* RtTpsProtoCommissionedunit::New() const {
  return new RtTpsProtoCommissionedunit;
}

void RtTpsProtoCommissionedunit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commissionedunituid()) {
      if (commissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
        commissionedunituid_->clear();
      }
    }
    radiationtype_ = 0;
    if (has_unitenergy()) {
      if (unitenergy_ != &::google::protobuf::internal::kEmptyString) {
        unitenergy_->clear();
      }
    }
    flatteningfiltermode_ = 0;
    if (has_machineuid()) {
      if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
        machineuid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    transmission_ = 0;
    ispencilebeamsupport_ = false;
    isconvolutionsupport_ = false;
    ismontecarlosupport_ = false;
    defaultdoserateindex_ = 0;
  }
  techniquetype_.Clear();
  doserates_.Clear();
  trayfactors_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoCommissionedunit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string commissionedunitUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionedunituid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionedunituid().data(), this->commissionedunituid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_radiationType;
        break;
      }
      
      // optional int32 radiationType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radiationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiationtype_)));
          set_has_radiationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_techniqueType;
        break;
      }
      
      // repeated int32 techniqueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_techniqueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_techniquetype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_techniquetype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_techniqueType;
        if (input->ExpectTag(34)) goto parse_unitEnergy;
        break;
      }
      
      // optional string unitEnergy = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitEnergy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitenergy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitenergy().data(), this->unitenergy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flatteningfiltermode;
        break;
      }
      
      // optional int32 flatteningfiltermode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flatteningfiltermode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flatteningfiltermode_)));
          set_has_flatteningfiltermode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_doseRates;
        break;
      }
      
      // repeated float doseRates = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseRates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_doserates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_doserates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_doseRates;
        if (input->ExpectTag(58)) goto parse_trayfactors;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayfactors:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trayfactors()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_trayfactors;
        if (input->ExpectTag(66)) goto parse_machineUID;
        break;
      }
      
      // optional string machineUID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineuid().data(), this->machineuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_transmission;
        break;
      }
      
      // optional float transmission = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transmission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transmission_)));
          set_has_transmission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_ispencilebeamsupport;
        break;
      }
      
      // optional bool ispencilebeamsupport = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispencilebeamsupport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispencilebeamsupport_)));
          set_has_ispencilebeamsupport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isconvolutionsupport;
        break;
      }
      
      // optional bool isconvolutionsupport = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isconvolutionsupport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconvolutionsupport_)));
          set_has_isconvolutionsupport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ismontecarlosupport;
        break;
      }
      
      // optional bool ismontecarlosupport = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismontecarlosupport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismontecarlosupport_)));
          set_has_ismontecarlosupport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_defaultdoserateindex;
        break;
      }
      
      // optional int32 defaultdoserateindex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defaultdoserateindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defaultdoserateindex_)));
          set_has_defaultdoserateindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoCommissionedunit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string commissionedunitUID = 1;
  if (has_commissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionedunituid().data(), this->commissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->commissionedunituid(), output);
  }
  
  // optional int32 radiationType = 2;
  if (has_radiationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->radiationtype(), output);
  }
  
  // repeated int32 techniqueType = 3;
  for (int i = 0; i < this->techniquetype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->techniquetype(i), output);
  }
  
  // optional string unitEnergy = 4;
  if (has_unitenergy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitenergy().data(), this->unitenergy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->unitenergy(), output);
  }
  
  // optional int32 flatteningfiltermode = 5;
  if (has_flatteningfiltermode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->flatteningfiltermode(), output);
  }
  
  // repeated float doseRates = 6;
  for (int i = 0; i < this->doserates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->doserates(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
  for (int i = 0; i < this->trayfactors_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->trayfactors(i), output);
  }
  
  // optional string machineUID = 8;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->machineuid(), output);
  }
  
  // optional float transmission = 9;
  if (has_transmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->transmission(), output);
  }
  
  // optional bool ispencilebeamsupport = 10;
  if (has_ispencilebeamsupport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->ispencilebeamsupport(), output);
  }
  
  // optional bool isconvolutionsupport = 11;
  if (has_isconvolutionsupport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isconvolutionsupport(), output);
  }
  
  // optional bool ismontecarlosupport = 12;
  if (has_ismontecarlosupport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->ismontecarlosupport(), output);
  }
  
  // optional int32 defaultdoserateindex = 13;
  if (has_defaultdoserateindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->defaultdoserateindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoCommissionedunit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string commissionedunitUID = 1;
  if (has_commissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionedunituid().data(), this->commissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commissionedunituid(), target);
  }
  
  // optional int32 radiationType = 2;
  if (has_radiationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->radiationtype(), target);
  }
  
  // repeated int32 techniqueType = 3;
  for (int i = 0; i < this->techniquetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->techniquetype(i), target);
  }
  
  // optional string unitEnergy = 4;
  if (has_unitenergy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitenergy().data(), this->unitenergy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unitenergy(), target);
  }
  
  // optional int32 flatteningfiltermode = 5;
  if (has_flatteningfiltermode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->flatteningfiltermode(), target);
  }
  
  // repeated float doseRates = 6;
  for (int i = 0; i < this->doserates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->doserates(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
  for (int i = 0; i < this->trayfactors_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->trayfactors(i), target);
  }
  
  // optional string machineUID = 8;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->machineuid(), target);
  }
  
  // optional float transmission = 9;
  if (has_transmission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->transmission(), target);
  }
  
  // optional bool ispencilebeamsupport = 10;
  if (has_ispencilebeamsupport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->ispencilebeamsupport(), target);
  }
  
  // optional bool isconvolutionsupport = 11;
  if (has_isconvolutionsupport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isconvolutionsupport(), target);
  }
  
  // optional bool ismontecarlosupport = 12;
  if (has_ismontecarlosupport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->ismontecarlosupport(), target);
  }
  
  // optional int32 defaultdoserateindex = 13;
  if (has_defaultdoserateindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->defaultdoserateindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoCommissionedunit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string commissionedunitUID = 1;
    if (has_commissionedunituid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionedunituid());
    }
    
    // optional int32 radiationType = 2;
    if (has_radiationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiationtype());
    }
    
    // optional string unitEnergy = 4;
    if (has_unitenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitenergy());
    }
    
    // optional int32 flatteningfiltermode = 5;
    if (has_flatteningfiltermode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flatteningfiltermode());
    }
    
    // optional string machineUID = 8;
    if (has_machineuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineuid());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float transmission = 9;
    if (has_transmission()) {
      total_size += 1 + 4;
    }
    
    // optional bool ispencilebeamsupport = 10;
    if (has_ispencilebeamsupport()) {
      total_size += 1 + 1;
    }
    
    // optional bool isconvolutionsupport = 11;
    if (has_isconvolutionsupport()) {
      total_size += 1 + 1;
    }
    
    // optional bool ismontecarlosupport = 12;
    if (has_ismontecarlosupport()) {
      total_size += 1 + 1;
    }
    
    // optional int32 defaultdoserateindex = 13;
    if (has_defaultdoserateindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defaultdoserateindex());
    }
    
  }
  // repeated int32 techniqueType = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->techniquetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->techniquetype(i));
    }
    total_size += 1 * this->techniquetype_size() + data_size;
  }
  
  // repeated float doseRates = 6;
  {
    int data_size = 0;
    data_size = 4 * this->doserates_size();
    total_size += 1 * this->doserates_size() + data_size;
  }
  
  // repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
  total_size += 1 * this->trayfactors_size();
  for (int i = 0; i < this->trayfactors_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trayfactors(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoCommissionedunit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoCommissionedunit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoCommissionedunit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoCommissionedunit::MergeFrom(const RtTpsProtoCommissionedunit& from) {
  GOOGLE_CHECK_NE(&from, this);
  techniquetype_.MergeFrom(from.techniquetype_);
  doserates_.MergeFrom(from.doserates_);
  trayfactors_.MergeFrom(from.trayfactors_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commissionedunituid()) {
      set_commissionedunituid(from.commissionedunituid());
    }
    if (from.has_radiationtype()) {
      set_radiationtype(from.radiationtype());
    }
    if (from.has_unitenergy()) {
      set_unitenergy(from.unitenergy());
    }
    if (from.has_flatteningfiltermode()) {
      set_flatteningfiltermode(from.flatteningfiltermode());
    }
    if (from.has_machineuid()) {
      set_machineuid(from.machineuid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_transmission()) {
      set_transmission(from.transmission());
    }
    if (from.has_ispencilebeamsupport()) {
      set_ispencilebeamsupport(from.ispencilebeamsupport());
    }
    if (from.has_isconvolutionsupport()) {
      set_isconvolutionsupport(from.isconvolutionsupport());
    }
    if (from.has_ismontecarlosupport()) {
      set_ismontecarlosupport(from.ismontecarlosupport());
    }
    if (from.has_defaultdoserateindex()) {
      set_defaultdoserateindex(from.defaultdoserateindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoCommissionedunit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoCommissionedunit::CopyFrom(const RtTpsProtoCommissionedunit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoCommissionedunit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < trayfactors_size(); i++) {
    if (!this->trayfactors(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoCommissionedunit::Swap(RtTpsProtoCommissionedunit* other) {
  if (other != this) {
    std::swap(commissionedunituid_, other->commissionedunituid_);
    std::swap(radiationtype_, other->radiationtype_);
    techniquetype_.Swap(&other->techniquetype_);
    std::swap(unitenergy_, other->unitenergy_);
    std::swap(flatteningfiltermode_, other->flatteningfiltermode_);
    doserates_.Swap(&other->doserates_);
    trayfactors_.Swap(&other->trayfactors_);
    std::swap(machineuid_, other->machineuid_);
    std::swap(transmission_, other->transmission_);
    std::swap(ispencilebeamsupport_, other->ispencilebeamsupport_);
    std::swap(isconvolutionsupport_, other->isconvolutionsupport_);
    std::swap(ismontecarlosupport_, other->ismontecarlosupport_);
    std::swap(defaultdoserateindex_, other->defaultdoserateindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoCommissionedunit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoCommissionedunit_descriptor_;
  metadata.reflection = RtTpsProtoCommissionedunit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedCommissionedunit::kCommissionedunitListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedCommissionedunit::RtTpsProtoRepeatedCommissionedunit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedCommissionedunit::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedCommissionedunit::RtTpsProtoRepeatedCommissionedunit(const RtTpsProtoRepeatedCommissionedunit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedCommissionedunit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedCommissionedunit::~RtTpsProtoRepeatedCommissionedunit() {
  SharedDtor();
}

void RtTpsProtoRepeatedCommissionedunit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedCommissionedunit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedCommissionedunit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedCommissionedunit_descriptor_;
}

const RtTpsProtoRepeatedCommissionedunit& RtTpsProtoRepeatedCommissionedunit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedCommissionedunit* RtTpsProtoRepeatedCommissionedunit::default_instance_ = NULL;

RtTpsProtoRepeatedCommissionedunit* RtTpsProtoRepeatedCommissionedunit::New() const {
  return new RtTpsProtoRepeatedCommissionedunit;
}

void RtTpsProtoRepeatedCommissionedunit::Clear() {
  commissionedunitlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedCommissionedunit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionedunitList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commissionedunitlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commissionedunitList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedCommissionedunit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
  for (int i = 0; i < this->commissionedunitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commissionedunitlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedCommissionedunit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
  for (int i = 0; i < this->commissionedunitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commissionedunitlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedCommissionedunit::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
  total_size += 1 * this->commissionedunitlist_size();
  for (int i = 0; i < this->commissionedunitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commissionedunitlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedCommissionedunit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedCommissionedunit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedCommissionedunit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedCommissionedunit::MergeFrom(const RtTpsProtoRepeatedCommissionedunit& from) {
  GOOGLE_CHECK_NE(&from, this);
  commissionedunitlist_.MergeFrom(from.commissionedunitlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedCommissionedunit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedCommissionedunit::CopyFrom(const RtTpsProtoRepeatedCommissionedunit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedCommissionedunit::IsInitialized() const {
  
  for (int i = 0; i < commissionedunitlist_size(); i++) {
    if (!this->commissionedunitlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedCommissionedunit::Swap(RtTpsProtoRepeatedCommissionedunit* other) {
  if (other != this) {
    commissionedunitlist_.Swap(&other->commissionedunitlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedCommissionedunit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedCommissionedunit_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedCommissionedunit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoTrayfactor::kTrayUIDFieldNumber;
const int RtTpsProtoTrayfactor::kFactorFieldNumber;
const int RtTpsProtoTrayfactor::kTrayIDFieldNumber;
const int RtTpsProtoTrayfactor::kCodeFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoTrayfactor::RtTpsProtoTrayfactor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoTrayfactor::InitAsDefaultInstance() {
}

RtTpsProtoTrayfactor::RtTpsProtoTrayfactor(const RtTpsProtoTrayfactor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoTrayfactor::SharedCtor() {
  _cached_size_ = 0;
  trayuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  factor_ = 0;
  trayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoTrayfactor::~RtTpsProtoTrayfactor() {
  SharedDtor();
}

void RtTpsProtoTrayfactor::SharedDtor() {
  if (trayuid_ != &::google::protobuf::internal::kEmptyString) {
    delete trayuid_;
  }
  if (trayid_ != &::google::protobuf::internal::kEmptyString) {
    delete trayid_;
  }
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoTrayfactor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoTrayfactor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoTrayfactor_descriptor_;
}

const RtTpsProtoTrayfactor& RtTpsProtoTrayfactor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();  return *default_instance_;
}

RtTpsProtoTrayfactor* RtTpsProtoTrayfactor::default_instance_ = NULL;

RtTpsProtoTrayfactor* RtTpsProtoTrayfactor::New() const {
  return new RtTpsProtoTrayfactor;
}

void RtTpsProtoTrayfactor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trayuid()) {
      if (trayuid_ != &::google::protobuf::internal::kEmptyString) {
        trayuid_->clear();
      }
    }
    factor_ = 0;
    if (has_trayid()) {
      if (trayid_ != &::google::protobuf::internal::kEmptyString) {
        trayid_->clear();
      }
    }
    if (has_code()) {
      if (code_ != &::google::protobuf::internal::kEmptyString) {
        code_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoTrayfactor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string trayUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trayuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayuid().data(), this->trayuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_factor;
        break;
      }
      
      // required float factor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_factor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &factor_)));
          set_has_factor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trayID;
        break;
      }
      
      // required string trayID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayid().data(), this->trayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_code;
        break;
      }
      
      // optional string code = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_code:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->code().data(), this->code().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoTrayfactor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string trayUID = 1;
  if (has_trayuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuid().data(), this->trayuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trayuid(), output);
  }
  
  // required float factor = 2;
  if (has_factor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->factor(), output);
  }
  
  // required string trayID = 3;
  if (has_trayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayid().data(), this->trayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->trayid(), output);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->code(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoTrayfactor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string trayUID = 1;
  if (has_trayuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuid().data(), this->trayuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trayuid(), target);
  }
  
  // required float factor = 2;
  if (has_factor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->factor(), target);
  }
  
  // required string trayID = 3;
  if (has_trayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayid().data(), this->trayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->trayid(), target);
  }
  
  // optional string code = 4;
  if (has_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->code().data(), this->code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoTrayfactor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string trayUID = 1;
    if (has_trayuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trayuid());
    }
    
    // required float factor = 2;
    if (has_factor()) {
      total_size += 1 + 4;
    }
    
    // required string trayID = 3;
    if (has_trayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trayid());
    }
    
    // optional string code = 4;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoTrayfactor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoTrayfactor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoTrayfactor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoTrayfactor::MergeFrom(const RtTpsProtoTrayfactor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trayuid()) {
      set_trayuid(from.trayuid());
    }
    if (from.has_factor()) {
      set_factor(from.factor());
    }
    if (from.has_trayid()) {
      set_trayid(from.trayid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoTrayfactor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoTrayfactor::CopyFrom(const RtTpsProtoTrayfactor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoTrayfactor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RtTpsProtoTrayfactor::Swap(RtTpsProtoTrayfactor* other) {
  if (other != this) {
    std::swap(trayuid_, other->trayuid_);
    std::swap(factor_, other->factor_);
    std::swap(trayid_, other->trayid_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoTrayfactor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoTrayfactor_descriptor_;
  metadata.reflection = RtTpsProtoTrayfactor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
