// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_segment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSegment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedSegment_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoJaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoJaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoMlcLeaf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoMlcLeaf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fsegment_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_segment.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoSegment_descriptor_ = file->message_type(0);
  static const int RtTpsProtoSegment_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, segmentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, segmentweight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, segmentmu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, beamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, sequencenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, startjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, endjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, startmlcleaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, endmlcleaves_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, startgantryangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, endgantryangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, starttablerotationangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, endtablerotationangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, arclength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, startssd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, endssd_),
  };
  RtTpsProtoSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoSegment_descriptor_,
      RtTpsProtoSegment::default_instance_,
      RtTpsProtoSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoSegment));
  RtTpsProtoRepeatedSegment_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedSegment_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSegment, segmentlist_),
  };
  RtTpsProtoRepeatedSegment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedSegment_descriptor_,
      RtTpsProtoRepeatedSegment::default_instance_,
      RtTpsProtoRepeatedSegment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSegment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSegment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedSegment));
  RtTpsProtoJaw_descriptor_ = file->message_type(2);
  static const int RtTpsProtoJaw_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, x2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, y1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, y2_),
  };
  RtTpsProtoJaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoJaw_descriptor_,
      RtTpsProtoJaw::default_instance_,
      RtTpsProtoJaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoJaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoJaw));
  RtTpsProtoMlcLeaf_descriptor_ = file->message_type(3);
  static const int RtTpsProtoMlcLeaf_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMlcLeaf, sequencenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMlcLeaf, x1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMlcLeaf, x2_),
  };
  RtTpsProtoMlcLeaf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoMlcLeaf_descriptor_,
      RtTpsProtoMlcLeaf::default_instance_,
      RtTpsProtoMlcLeaf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMlcLeaf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMlcLeaf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoMlcLeaf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fsegment_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoSegment_descriptor_, &RtTpsProtoSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedSegment_descriptor_, &RtTpsProtoRepeatedSegment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoJaw_descriptor_, &RtTpsProtoJaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoMlcLeaf_descriptor_, &RtTpsProtoMlcLeaf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fsegment_2eproto() {
  delete RtTpsProtoSegment::default_instance_;
  delete RtTpsProtoSegment_reflection_;
  delete RtTpsProtoRepeatedSegment::default_instance_;
  delete RtTpsProtoRepeatedSegment_reflection_;
  delete RtTpsProtoJaw::default_instance_;
  delete RtTpsProtoJaw_reflection_;
  delete RtTpsProtoMlcLeaf::default_instance_;
  delete RtTpsProtoMlcLeaf_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_proto_segment.proto\022\ttps.proto\""
    "\341\003\n\021RtTpsProtoSegment\022\022\n\nsegmentUID\030\001 \002("
    "\t\022\025\n\rsegmentWeight\030\002 \001(\002\022\021\n\tsegmentMu\030\003 "
    "\001(\002\022\017\n\007beamUID\030\004 \001(\t\022\026\n\016SequenceNumber\030\005"
    " \001(\005\022*\n\010startJaw\030\006 \001(\0132\030.tps.proto.RtTps"
    "ProtoJaw\022(\n\006endJaw\030\007 \001(\0132\030.tps.proto.RtT"
    "psProtoJaw\0224\n\016startMlcLeaves\030\010 \003(\0132\034.tps"
    ".proto.RtTpsProtoMlcLeaf\0222\n\014endMlcLeaves"
    "\030\t \003(\0132\034.tps.proto.RtTpsProtoMlcLeaf\022\030\n\020"
    "startgantryangle\030\n \001(\001\022\026\n\016endgantryangle"
    "\030\013 \001(\001\022\037\n\027starttablerotationangle\030\014 \001(\001\022"
    "\035\n\025endtablerotationangle\030\r \001(\001\022\021\n\tarclen"
    "gth\030\016 \001(\001\022\020\n\010startssd\030\017 \001(\002\022\016\n\006endssd\030\020 "
    "\001(\002\"N\n\031RtTpsProtoRepeatedSegment\0221\n\013segm"
    "entList\030\001 \003(\0132\034.tps.proto.RtTpsProtoSegm"
    "ent\"\?\n\rRtTpsProtoJaw\022\n\n\002X1\030\001 \001(\002\022\n\n\002X2\030\002"
    " \001(\002\022\n\n\002Y1\030\003 \001(\002\022\n\n\002Y2\030\004 \001(\002\"C\n\021RtTpsPro"
    "toMlcLeaf\022\026\n\016SequenceNumber\030\001 \001(\005\022\n\n\002X1\030"
    "\002 \001(\002\022\n\n\002X2\030\003 \001(\002", 737);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_segment.proto", &protobuf_RegisterTypes);
  RtTpsProtoSegment::default_instance_ = new RtTpsProtoSegment();
  RtTpsProtoRepeatedSegment::default_instance_ = new RtTpsProtoRepeatedSegment();
  RtTpsProtoJaw::default_instance_ = new RtTpsProtoJaw();
  RtTpsProtoMlcLeaf::default_instance_ = new RtTpsProtoMlcLeaf();
  RtTpsProtoSegment::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedSegment::default_instance_->InitAsDefaultInstance();
  RtTpsProtoJaw::default_instance_->InitAsDefaultInstance();
  RtTpsProtoMlcLeaf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fsegment_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fsegment_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fsegment_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fsegment_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoSegment::kSegmentUIDFieldNumber;
const int RtTpsProtoSegment::kSegmentWeightFieldNumber;
const int RtTpsProtoSegment::kSegmentMuFieldNumber;
const int RtTpsProtoSegment::kBeamUIDFieldNumber;
const int RtTpsProtoSegment::kSequenceNumberFieldNumber;
const int RtTpsProtoSegment::kStartJawFieldNumber;
const int RtTpsProtoSegment::kEndJawFieldNumber;
const int RtTpsProtoSegment::kStartMlcLeavesFieldNumber;
const int RtTpsProtoSegment::kEndMlcLeavesFieldNumber;
const int RtTpsProtoSegment::kStartgantryangleFieldNumber;
const int RtTpsProtoSegment::kEndgantryangleFieldNumber;
const int RtTpsProtoSegment::kStarttablerotationangleFieldNumber;
const int RtTpsProtoSegment::kEndtablerotationangleFieldNumber;
const int RtTpsProtoSegment::kArclengthFieldNumber;
const int RtTpsProtoSegment::kStartssdFieldNumber;
const int RtTpsProtoSegment::kEndssdFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoSegment::RtTpsProtoSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoSegment::InitAsDefaultInstance() {
  startjaw_ = const_cast< ::tps::proto::RtTpsProtoJaw*>(&::tps::proto::RtTpsProtoJaw::default_instance());
  endjaw_ = const_cast< ::tps::proto::RtTpsProtoJaw*>(&::tps::proto::RtTpsProtoJaw::default_instance());
}

RtTpsProtoSegment::RtTpsProtoSegment(const RtTpsProtoSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoSegment::SharedCtor() {
  _cached_size_ = 0;
  segmentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  segmentweight_ = 0;
  segmentmu_ = 0;
  beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sequencenumber_ = 0;
  startjaw_ = NULL;
  endjaw_ = NULL;
  startgantryangle_ = 0;
  endgantryangle_ = 0;
  starttablerotationangle_ = 0;
  endtablerotationangle_ = 0;
  arclength_ = 0;
  startssd_ = 0;
  endssd_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoSegment::~RtTpsProtoSegment() {
  SharedDtor();
}

void RtTpsProtoSegment::SharedDtor() {
  if (segmentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete segmentuid_;
  }
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beamuid_;
  }
  if (this != default_instance_) {
    delete startjaw_;
    delete endjaw_;
  }
}

void RtTpsProtoSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoSegment_descriptor_;
}

const RtTpsProtoSegment& RtTpsProtoSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();  return *default_instance_;
}

RtTpsProtoSegment* RtTpsProtoSegment::default_instance_ = NULL;

RtTpsProtoSegment* RtTpsProtoSegment::New() const {
  return new RtTpsProtoSegment;
}

void RtTpsProtoSegment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_segmentuid()) {
      if (segmentuid_ != &::google::protobuf::internal::kEmptyString) {
        segmentuid_->clear();
      }
    }
    segmentweight_ = 0;
    segmentmu_ = 0;
    if (has_beamuid()) {
      if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
        beamuid_->clear();
      }
    }
    sequencenumber_ = 0;
    if (has_startjaw()) {
      if (startjaw_ != NULL) startjaw_->::tps::proto::RtTpsProtoJaw::Clear();
    }
    if (has_endjaw()) {
      if (endjaw_ != NULL) endjaw_->::tps::proto::RtTpsProtoJaw::Clear();
    }
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    startgantryangle_ = 0;
    endgantryangle_ = 0;
    starttablerotationangle_ = 0;
    endtablerotationangle_ = 0;
    arclength_ = 0;
    startssd_ = 0;
    endssd_ = 0;
  }
  startmlcleaves_.Clear();
  endmlcleaves_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string segmentUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_segmentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->segmentuid().data(), this->segmentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_segmentWeight;
        break;
      }
      
      // optional float segmentWeight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentWeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &segmentweight_)));
          set_has_segmentweight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_segmentMu;
        break;
      }
      
      // optional float segmentMu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_segmentMu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &segmentmu_)));
          set_has_segmentmu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_beamUID;
        break;
      }
      
      // optional string beamUID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamuid().data(), this->beamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_SequenceNumber;
        break;
      }
      
      // optional int32 SequenceNumber = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SequenceNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencenumber_)));
          set_has_sequencenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_startJaw;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoJaw startJaw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startJaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startjaw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_endJaw;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoJaw endJaw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endJaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endjaw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_startMlcLeaves;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoMlcLeaf startMlcLeaves = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_startMlcLeaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_startmlcleaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_startMlcLeaves;
        if (input->ExpectTag(74)) goto parse_endMlcLeaves;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoMlcLeaf endMlcLeaves = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endMlcLeaves:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endmlcleaves()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_endMlcLeaves;
        if (input->ExpectTag(81)) goto parse_startgantryangle;
        break;
      }
      
      // optional double startgantryangle = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_startgantryangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startgantryangle_)));
          set_has_startgantryangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_endgantryangle;
        break;
      }
      
      // optional double endgantryangle = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endgantryangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endgantryangle_)));
          set_has_endgantryangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_starttablerotationangle;
        break;
      }
      
      // optional double starttablerotationangle = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_starttablerotationangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &starttablerotationangle_)));
          set_has_starttablerotationangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_endtablerotationangle;
        break;
      }
      
      // optional double endtablerotationangle = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_endtablerotationangle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endtablerotationangle_)));
          set_has_endtablerotationangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_arclength;
        break;
      }
      
      // optional double arclength = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_arclength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &arclength_)));
          set_has_arclength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_startssd;
        break;
      }
      
      // optional float startssd = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startssd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startssd_)));
          set_has_startssd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_endssd;
        break;
      }
      
      // optional float endssd = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_endssd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &endssd_)));
          set_has_endssd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string segmentUID = 1;
  if (has_segmentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentuid().data(), this->segmentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->segmentuid(), output);
  }
  
  // optional float segmentWeight = 2;
  if (has_segmentweight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->segmentweight(), output);
  }
  
  // optional float segmentMu = 3;
  if (has_segmentmu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->segmentmu(), output);
  }
  
  // optional string beamUID = 4;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->beamuid(), output);
  }
  
  // optional int32 SequenceNumber = 5;
  if (has_sequencenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sequencenumber(), output);
  }
  
  // optional .tps.proto.RtTpsProtoJaw startJaw = 6;
  if (has_startjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->startjaw(), output);
  }
  
  // optional .tps.proto.RtTpsProtoJaw endJaw = 7;
  if (has_endjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->endjaw(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoMlcLeaf startMlcLeaves = 8;
  for (int i = 0; i < this->startmlcleaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->startmlcleaves(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoMlcLeaf endMlcLeaves = 9;
  for (int i = 0; i < this->endmlcleaves_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->endmlcleaves(i), output);
  }
  
  // optional double startgantryangle = 10;
  if (has_startgantryangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->startgantryangle(), output);
  }
  
  // optional double endgantryangle = 11;
  if (has_endgantryangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->endgantryangle(), output);
  }
  
  // optional double starttablerotationangle = 12;
  if (has_starttablerotationangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->starttablerotationangle(), output);
  }
  
  // optional double endtablerotationangle = 13;
  if (has_endtablerotationangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->endtablerotationangle(), output);
  }
  
  // optional double arclength = 14;
  if (has_arclength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->arclength(), output);
  }
  
  // optional float startssd = 15;
  if (has_startssd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->startssd(), output);
  }
  
  // optional float endssd = 16;
  if (has_endssd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->endssd(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string segmentUID = 1;
  if (has_segmentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->segmentuid().data(), this->segmentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->segmentuid(), target);
  }
  
  // optional float segmentWeight = 2;
  if (has_segmentweight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->segmentweight(), target);
  }
  
  // optional float segmentMu = 3;
  if (has_segmentmu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->segmentmu(), target);
  }
  
  // optional string beamUID = 4;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->beamuid(), target);
  }
  
  // optional int32 SequenceNumber = 5;
  if (has_sequencenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sequencenumber(), target);
  }
  
  // optional .tps.proto.RtTpsProtoJaw startJaw = 6;
  if (has_startjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->startjaw(), target);
  }
  
  // optional .tps.proto.RtTpsProtoJaw endJaw = 7;
  if (has_endjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->endjaw(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoMlcLeaf startMlcLeaves = 8;
  for (int i = 0; i < this->startmlcleaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->startmlcleaves(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoMlcLeaf endMlcLeaves = 9;
  for (int i = 0; i < this->endmlcleaves_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->endmlcleaves(i), target);
  }
  
  // optional double startgantryangle = 10;
  if (has_startgantryangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->startgantryangle(), target);
  }
  
  // optional double endgantryangle = 11;
  if (has_endgantryangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->endgantryangle(), target);
  }
  
  // optional double starttablerotationangle = 12;
  if (has_starttablerotationangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->starttablerotationangle(), target);
  }
  
  // optional double endtablerotationangle = 13;
  if (has_endtablerotationangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->endtablerotationangle(), target);
  }
  
  // optional double arclength = 14;
  if (has_arclength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->arclength(), target);
  }
  
  // optional float startssd = 15;
  if (has_startssd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->startssd(), target);
  }
  
  // optional float endssd = 16;
  if (has_endssd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->endssd(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoSegment::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string segmentUID = 1;
    if (has_segmentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->segmentuid());
    }
    
    // optional float segmentWeight = 2;
    if (has_segmentweight()) {
      total_size += 1 + 4;
    }
    
    // optional float segmentMu = 3;
    if (has_segmentmu()) {
      total_size += 1 + 4;
    }
    
    // optional string beamUID = 4;
    if (has_beamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamuid());
    }
    
    // optional int32 SequenceNumber = 5;
    if (has_sequencenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequencenumber());
    }
    
    // optional .tps.proto.RtTpsProtoJaw startJaw = 6;
    if (has_startjaw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startjaw());
    }
    
    // optional .tps.proto.RtTpsProtoJaw endJaw = 7;
    if (has_endjaw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endjaw());
    }
    
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional double startgantryangle = 10;
    if (has_startgantryangle()) {
      total_size += 1 + 8;
    }
    
    // optional double endgantryangle = 11;
    if (has_endgantryangle()) {
      total_size += 1 + 8;
    }
    
    // optional double starttablerotationangle = 12;
    if (has_starttablerotationangle()) {
      total_size += 1 + 8;
    }
    
    // optional double endtablerotationangle = 13;
    if (has_endtablerotationangle()) {
      total_size += 1 + 8;
    }
    
    // optional double arclength = 14;
    if (has_arclength()) {
      total_size += 1 + 8;
    }
    
    // optional float startssd = 15;
    if (has_startssd()) {
      total_size += 1 + 4;
    }
    
    // optional float endssd = 16;
    if (has_endssd()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .tps.proto.RtTpsProtoMlcLeaf startMlcLeaves = 8;
  total_size += 1 * this->startmlcleaves_size();
  for (int i = 0; i < this->startmlcleaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->startmlcleaves(i));
  }
  
  // repeated .tps.proto.RtTpsProtoMlcLeaf endMlcLeaves = 9;
  total_size += 1 * this->endmlcleaves_size();
  for (int i = 0; i < this->endmlcleaves_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endmlcleaves(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoSegment::MergeFrom(const RtTpsProtoSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  startmlcleaves_.MergeFrom(from.startmlcleaves_);
  endmlcleaves_.MergeFrom(from.endmlcleaves_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_segmentuid()) {
      set_segmentuid(from.segmentuid());
    }
    if (from.has_segmentweight()) {
      set_segmentweight(from.segmentweight());
    }
    if (from.has_segmentmu()) {
      set_segmentmu(from.segmentmu());
    }
    if (from.has_beamuid()) {
      set_beamuid(from.beamuid());
    }
    if (from.has_sequencenumber()) {
      set_sequencenumber(from.sequencenumber());
    }
    if (from.has_startjaw()) {
      mutable_startjaw()->::tps::proto::RtTpsProtoJaw::MergeFrom(from.startjaw());
    }
    if (from.has_endjaw()) {
      mutable_endjaw()->::tps::proto::RtTpsProtoJaw::MergeFrom(from.endjaw());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_startgantryangle()) {
      set_startgantryangle(from.startgantryangle());
    }
    if (from.has_endgantryangle()) {
      set_endgantryangle(from.endgantryangle());
    }
    if (from.has_starttablerotationangle()) {
      set_starttablerotationangle(from.starttablerotationangle());
    }
    if (from.has_endtablerotationangle()) {
      set_endtablerotationangle(from.endtablerotationangle());
    }
    if (from.has_arclength()) {
      set_arclength(from.arclength());
    }
    if (from.has_startssd()) {
      set_startssd(from.startssd());
    }
    if (from.has_endssd()) {
      set_endssd(from.endssd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoSegment::CopyFrom(const RtTpsProtoSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoSegment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoSegment::Swap(RtTpsProtoSegment* other) {
  if (other != this) {
    std::swap(segmentuid_, other->segmentuid_);
    std::swap(segmentweight_, other->segmentweight_);
    std::swap(segmentmu_, other->segmentmu_);
    std::swap(beamuid_, other->beamuid_);
    std::swap(sequencenumber_, other->sequencenumber_);
    std::swap(startjaw_, other->startjaw_);
    std::swap(endjaw_, other->endjaw_);
    startmlcleaves_.Swap(&other->startmlcleaves_);
    endmlcleaves_.Swap(&other->endmlcleaves_);
    std::swap(startgantryangle_, other->startgantryangle_);
    std::swap(endgantryangle_, other->endgantryangle_);
    std::swap(starttablerotationangle_, other->starttablerotationangle_);
    std::swap(endtablerotationangle_, other->endtablerotationangle_);
    std::swap(arclength_, other->arclength_);
    std::swap(startssd_, other->startssd_);
    std::swap(endssd_, other->endssd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoSegment_descriptor_;
  metadata.reflection = RtTpsProtoSegment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedSegment::kSegmentListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedSegment::RtTpsProtoRepeatedSegment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedSegment::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedSegment::RtTpsProtoRepeatedSegment(const RtTpsProtoRepeatedSegment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSegment::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedSegment::~RtTpsProtoRepeatedSegment() {
  SharedDtor();
}

void RtTpsProtoRepeatedSegment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedSegment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSegment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedSegment_descriptor_;
}

const RtTpsProtoRepeatedSegment& RtTpsProtoRepeatedSegment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedSegment* RtTpsProtoRepeatedSegment::default_instance_ = NULL;

RtTpsProtoRepeatedSegment* RtTpsProtoRepeatedSegment::New() const {
  return new RtTpsProtoRepeatedSegment;
}

void RtTpsProtoRepeatedSegment::Clear() {
  segmentlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedSegment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoSegment segmentList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segmentList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_segmentlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_segmentList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedSegment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoSegment segmentList = 1;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->segmentlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedSegment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoSegment segmentList = 1;
  for (int i = 0; i < this->segmentlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->segmentlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedSegment::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoSegment segmentList = 1;
  total_size += 1 * this->segmentlist_size();
  for (int i = 0; i < this->segmentlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->segmentlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedSegment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedSegment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedSegment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedSegment::MergeFrom(const RtTpsProtoRepeatedSegment& from) {
  GOOGLE_CHECK_NE(&from, this);
  segmentlist_.MergeFrom(from.segmentlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedSegment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSegment::CopyFrom(const RtTpsProtoRepeatedSegment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedSegment::IsInitialized() const {
  
  for (int i = 0; i < segmentlist_size(); i++) {
    if (!this->segmentlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedSegment::Swap(RtTpsProtoRepeatedSegment* other) {
  if (other != this) {
    segmentlist_.Swap(&other->segmentlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedSegment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedSegment_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedSegment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoJaw::kX1FieldNumber;
const int RtTpsProtoJaw::kX2FieldNumber;
const int RtTpsProtoJaw::kY1FieldNumber;
const int RtTpsProtoJaw::kY2FieldNumber;
#endif  // !_MSC_VER

RtTpsProtoJaw::RtTpsProtoJaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoJaw::InitAsDefaultInstance() {
}

RtTpsProtoJaw::RtTpsProtoJaw(const RtTpsProtoJaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoJaw::SharedCtor() {
  _cached_size_ = 0;
  x1_ = 0;
  x2_ = 0;
  y1_ = 0;
  y2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoJaw::~RtTpsProtoJaw() {
  SharedDtor();
}

void RtTpsProtoJaw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoJaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoJaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoJaw_descriptor_;
}

const RtTpsProtoJaw& RtTpsProtoJaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();  return *default_instance_;
}

RtTpsProtoJaw* RtTpsProtoJaw::default_instance_ = NULL;

RtTpsProtoJaw* RtTpsProtoJaw::New() const {
  return new RtTpsProtoJaw;
}

void RtTpsProtoJaw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x1_ = 0;
    x2_ = 0;
    y1_ = 0;
    y2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoJaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float X1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_X2;
        break;
      }
      
      // optional float X2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_Y1;
        break;
      }
      
      // optional float Y1 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y1_)));
          set_has_y1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_Y2;
        break;
      }
      
      // optional float Y2 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Y2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y2_)));
          set_has_y2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoJaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float X1 = 1;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x1(), output);
  }
  
  // optional float X2 = 2;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x2(), output);
  }
  
  // optional float Y1 = 3;
  if (has_y1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y1(), output);
  }
  
  // optional float Y2 = 4;
  if (has_y2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoJaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float X1 = 1;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x1(), target);
  }
  
  // optional float X2 = 2;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x2(), target);
  }
  
  // optional float Y1 = 3;
  if (has_y1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y1(), target);
  }
  
  // optional float Y2 = 4;
  if (has_y2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoJaw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float X1 = 1;
    if (has_x1()) {
      total_size += 1 + 4;
    }
    
    // optional float X2 = 2;
    if (has_x2()) {
      total_size += 1 + 4;
    }
    
    // optional float Y1 = 3;
    if (has_y1()) {
      total_size += 1 + 4;
    }
    
    // optional float Y2 = 4;
    if (has_y2()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoJaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoJaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoJaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoJaw::MergeFrom(const RtTpsProtoJaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
    if (from.has_y1()) {
      set_y1(from.y1());
    }
    if (from.has_y2()) {
      set_y2(from.y2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoJaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoJaw::CopyFrom(const RtTpsProtoJaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoJaw::IsInitialized() const {
  
  return true;
}

void RtTpsProtoJaw::Swap(RtTpsProtoJaw* other) {
  if (other != this) {
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(y1_, other->y1_);
    std::swap(y2_, other->y2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoJaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoJaw_descriptor_;
  metadata.reflection = RtTpsProtoJaw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoMlcLeaf::kSequenceNumberFieldNumber;
const int RtTpsProtoMlcLeaf::kX1FieldNumber;
const int RtTpsProtoMlcLeaf::kX2FieldNumber;
#endif  // !_MSC_VER

RtTpsProtoMlcLeaf::RtTpsProtoMlcLeaf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoMlcLeaf::InitAsDefaultInstance() {
}

RtTpsProtoMlcLeaf::RtTpsProtoMlcLeaf(const RtTpsProtoMlcLeaf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoMlcLeaf::SharedCtor() {
  _cached_size_ = 0;
  sequencenumber_ = 0;
  x1_ = 0;
  x2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoMlcLeaf::~RtTpsProtoMlcLeaf() {
  SharedDtor();
}

void RtTpsProtoMlcLeaf::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoMlcLeaf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoMlcLeaf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoMlcLeaf_descriptor_;
}

const RtTpsProtoMlcLeaf& RtTpsProtoMlcLeaf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fsegment_2eproto();  return *default_instance_;
}

RtTpsProtoMlcLeaf* RtTpsProtoMlcLeaf::default_instance_ = NULL;

RtTpsProtoMlcLeaf* RtTpsProtoMlcLeaf::New() const {
  return new RtTpsProtoMlcLeaf;
}

void RtTpsProtoMlcLeaf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequencenumber_ = 0;
    x1_ = 0;
    x2_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoMlcLeaf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SequenceNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequencenumber_)));
          set_has_sequencenumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_X1;
        break;
      }
      
      // optional float X1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
          set_has_x1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_X2;
        break;
      }
      
      // optional float X2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_X2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x2_)));
          set_has_x2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoMlcLeaf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SequenceNumber = 1;
  if (has_sequencenumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequencenumber(), output);
  }
  
  // optional float X1 = 2;
  if (has_x1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x1(), output);
  }
  
  // optional float X2 = 3;
  if (has_x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->x2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoMlcLeaf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SequenceNumber = 1;
  if (has_sequencenumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequencenumber(), target);
  }
  
  // optional float X1 = 2;
  if (has_x1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x1(), target);
  }
  
  // optional float X2 = 3;
  if (has_x2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->x2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoMlcLeaf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SequenceNumber = 1;
    if (has_sequencenumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequencenumber());
    }
    
    // optional float X1 = 2;
    if (has_x1()) {
      total_size += 1 + 4;
    }
    
    // optional float X2 = 3;
    if (has_x2()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoMlcLeaf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoMlcLeaf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoMlcLeaf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoMlcLeaf::MergeFrom(const RtTpsProtoMlcLeaf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequencenumber()) {
      set_sequencenumber(from.sequencenumber());
    }
    if (from.has_x1()) {
      set_x1(from.x1());
    }
    if (from.has_x2()) {
      set_x2(from.x2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoMlcLeaf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoMlcLeaf::CopyFrom(const RtTpsProtoMlcLeaf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoMlcLeaf::IsInitialized() const {
  
  return true;
}

void RtTpsProtoMlcLeaf::Swap(RtTpsProtoMlcLeaf* other) {
  if (other != this) {
    std::swap(sequencenumber_, other->sequencenumber_);
    std::swap(x1_, other->x1_);
    std::swap(x2_, other->x2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoMlcLeaf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoMlcLeaf_descriptor_;
  metadata.reflection = RtTpsProtoMlcLeaf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
