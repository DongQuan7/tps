// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_measureangle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_MEASURE_ANGLE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_MEASURE_ANGLE_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AnglePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnglePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnglePointsList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnglePointsList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fmeasureangle_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_measureangle.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_MEASURE_ANGLE_descriptor_ = file->message_type(0);
  static const int RT_TPS_MEASURE_ANGLE_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, viewercontrolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, m_anglepoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, m_fcursorx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, m_fcursory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, curimageuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, mouseactiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, actionstarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, firstsidedone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, secondsidedone_),
  };
  RT_TPS_MEASURE_ANGLE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_MEASURE_ANGLE_descriptor_,
      RT_TPS_MEASURE_ANGLE::default_instance_,
      RT_TPS_MEASURE_ANGLE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_MEASURE_ANGLE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_MEASURE_ANGLE));
  RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_descriptor_ = RT_TPS_MEASURE_ANGLE_descriptor_->enum_type(0);
  AnglePoint_descriptor_ = file->message_type(1);
  static const int AnglePoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePoint, m_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePoint, m_y_),
  };
  AnglePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnglePoint_descriptor_,
      AnglePoint::default_instance_,
      AnglePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnglePoint));
  AnglePointsList_descriptor_ = file->message_type(2);
  static const int AnglePointsList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePointsList, manglepoints_),
  };
  AnglePointsList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnglePointsList_descriptor_,
      AnglePointsList::default_instance_,
      AnglePointsList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePointsList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnglePointsList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnglePointsList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fmeasureangle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_MEASURE_ANGLE_descriptor_, &RT_TPS_MEASURE_ANGLE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnglePoint_descriptor_, &AnglePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnglePointsList_descriptor_, &AnglePointsList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fmeasureangle_2eproto() {
  delete RT_TPS_MEASURE_ANGLE::default_instance_;
  delete RT_TPS_MEASURE_ANGLE_reflection_;
  delete AnglePoint::default_instance_;
  delete AnglePoint_reflection_;
  delete AnglePointsList::default_instance_;
  delete AnglePointsList_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rt_tps_measureangle.proto\022\ttps.proto\"\253"
    "\004\n\024RT_TPS_MEASURE_ANGLE\022\027\n\017viewerControl"
    "ID\030\001 \002(\005\022\016\n\006cellID\030\002 \001(\005\0221\n\rm_AnglePoint"
    "s\030\003 \001(\0132\032.tps.proto.AnglePointsList\022\022\n\nm"
    "_fCursorX\030\004 \002(\002\022\022\n\nm_fCursorY\030\005 \002(\002\022\023\n\013c"
    "urImageUid\030\013 \001(\t\022J\n\017mouseactiontype\030\r \001("
    "\01621.tps.proto.RT_TPS_MEASURE_ANGLE.MOUSE"
    "_ACTION_TYPE\022\025\n\ractionStarted\030\016 \002(\010\022\025\n\rf"
    "irstSideDone\030\017 \002(\010\022\026\n\016secondSideDone\030\020 \002"
    "(\010\"\347\001\n\021MOUSE_ACTION_TYPE\022#\n\026NONE_MOUSE_A"
    "CTION_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\023\n\017MOUSE_ACTION_UP"
    "\020\001\022\025\n\021MOUSE_ACTION_MOVE\020\002\022\025\n\021MOUSE_ACTIO"
    "N_DOWN\020\003\022\025\n\021MOUSE_ACTION_DRAG\020\004\022\035\n\031MOUSE"
    "_ACTION_DOUBLE_CLICK\020\005\022\034\n\030MOUSE_ACTION_R"
    "IGHT_CLICK\020\006\022\026\n\022MOUSE_ACTION_EMPTY\020\007\"&\n\n"
    "AnglePoint\022\013\n\003m_X\030\001 \001(\002\022\013\n\003m_Y\030\002 \001(\002\">\n\017"
    "AnglePointsList\022+\n\014mAnglePoints\030\001 \003(\0132\025."
    "tps.proto.AnglePoint", 700);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_measureangle.proto", &protobuf_RegisterTypes);
  RT_TPS_MEASURE_ANGLE::default_instance_ = new RT_TPS_MEASURE_ANGLE();
  AnglePoint::default_instance_ = new AnglePoint();
  AnglePointsList::default_instance_ = new AnglePointsList();
  RT_TPS_MEASURE_ANGLE::default_instance_->InitAsDefaultInstance();
  AnglePoint::default_instance_->InitAsDefaultInstance();
  AnglePointsList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fmeasureangle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fmeasureangle_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fmeasureangle_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fmeasureangle_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_descriptor_;
}
bool RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::NONE_MOUSE_ACTION_TYPE;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_UP;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_MOVE;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_DOWN;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_DRAG;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_DOUBLE_CLICK;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_RIGHT_CLICK;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_EMPTY;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_TYPE_MIN;
const RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_TYPE_MAX;
const int RT_TPS_MEASURE_ANGLE::MOUSE_ACTION_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int RT_TPS_MEASURE_ANGLE::kViewerControlIDFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kCellIDFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kMAnglePointsFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kMFCursorXFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kMFCursorYFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kCurImageUidFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kMouseactiontypeFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kActionStartedFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kFirstSideDoneFieldNumber;
const int RT_TPS_MEASURE_ANGLE::kSecondSideDoneFieldNumber;
#endif  // !_MSC_VER

RT_TPS_MEASURE_ANGLE::RT_TPS_MEASURE_ANGLE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_MEASURE_ANGLE::InitAsDefaultInstance() {
  m_anglepoints_ = const_cast< ::tps::proto::AnglePointsList*>(&::tps::proto::AnglePointsList::default_instance());
}

RT_TPS_MEASURE_ANGLE::RT_TPS_MEASURE_ANGLE(const RT_TPS_MEASURE_ANGLE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_MEASURE_ANGLE::SharedCtor() {
  _cached_size_ = 0;
  viewercontrolid_ = 0;
  cellid_ = 0;
  m_anglepoints_ = NULL;
  m_fcursorx_ = 0;
  m_fcursory_ = 0;
  curimageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mouseactiontype_ = -1;
  actionstarted_ = false;
  firstsidedone_ = false;
  secondsidedone_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_MEASURE_ANGLE::~RT_TPS_MEASURE_ANGLE() {
  SharedDtor();
}

void RT_TPS_MEASURE_ANGLE::SharedDtor() {
  if (curimageuid_ != &::google::protobuf::internal::kEmptyString) {
    delete curimageuid_;
  }
  if (this != default_instance_) {
    delete m_anglepoints_;
  }
}

void RT_TPS_MEASURE_ANGLE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_MEASURE_ANGLE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_MEASURE_ANGLE_descriptor_;
}

const RT_TPS_MEASURE_ANGLE& RT_TPS_MEASURE_ANGLE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto();  return *default_instance_;
}

RT_TPS_MEASURE_ANGLE* RT_TPS_MEASURE_ANGLE::default_instance_ = NULL;

RT_TPS_MEASURE_ANGLE* RT_TPS_MEASURE_ANGLE::New() const {
  return new RT_TPS_MEASURE_ANGLE;
}

void RT_TPS_MEASURE_ANGLE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viewercontrolid_ = 0;
    cellid_ = 0;
    if (has_m_anglepoints()) {
      if (m_anglepoints_ != NULL) m_anglepoints_->::tps::proto::AnglePointsList::Clear();
    }
    m_fcursorx_ = 0;
    m_fcursory_ = 0;
    if (has_curimageuid()) {
      if (curimageuid_ != &::google::protobuf::internal::kEmptyString) {
        curimageuid_->clear();
      }
    }
    mouseactiontype_ = -1;
    actionstarted_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    firstsidedone_ = false;
    secondsidedone_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_MEASURE_ANGLE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 viewerControlID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewercontrolid_)));
          set_has_viewercontrolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellID;
        break;
      }
      
      // optional int32 cellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_m_AnglePoints;
        break;
      }
      
      // optional .tps.proto.AnglePointsList m_AnglePoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_m_AnglePoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_m_anglepoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_m_fCursorX;
        break;
      }
      
      // required float m_fCursorX = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_fCursorX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_fcursorx_)));
          set_has_m_fcursorx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_m_fCursorY;
        break;
      }
      
      // required float m_fCursorY = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_fCursorY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_fcursory_)));
          set_has_m_fcursory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_curImageUid;
        break;
      }
      
      // optional string curImageUid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_curImageUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_curimageuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->curimageuid().data(), this->curimageuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_mouseactiontype;
        break;
      }
      
      // optional .tps.proto.RT_TPS_MEASURE_ANGLE.MOUSE_ACTION_TYPE mouseactiontype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouseactiontype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tps::proto::RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE_IsValid(value)) {
            set_mouseactiontype(static_cast< ::tps::proto::RT_TPS_MEASURE_ANGLE_MOUSE_ACTION_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_actionStarted;
        break;
      }
      
      // required bool actionStarted = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_actionStarted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &actionstarted_)));
          set_has_actionstarted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_firstSideDone;
        break;
      }
      
      // required bool firstSideDone = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstSideDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstsidedone_)));
          set_has_firstsidedone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_secondSideDone;
        break;
      }
      
      // required bool secondSideDone = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondSideDone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &secondsidedone_)));
          set_has_secondsidedone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_MEASURE_ANGLE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 viewerControlID = 1;
  if (has_viewercontrolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viewercontrolid(), output);
  }
  
  // optional int32 cellID = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid(), output);
  }
  
  // optional .tps.proto.AnglePointsList m_AnglePoints = 3;
  if (has_m_anglepoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->m_anglepoints(), output);
  }
  
  // required float m_fCursorX = 4;
  if (has_m_fcursorx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->m_fcursorx(), output);
  }
  
  // required float m_fCursorY = 5;
  if (has_m_fcursory()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->m_fcursory(), output);
  }
  
  // optional string curImageUid = 11;
  if (has_curimageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->curimageuid().data(), this->curimageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->curimageuid(), output);
  }
  
  // optional .tps.proto.RT_TPS_MEASURE_ANGLE.MOUSE_ACTION_TYPE mouseactiontype = 13;
  if (has_mouseactiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->mouseactiontype(), output);
  }
  
  // required bool actionStarted = 14;
  if (has_actionstarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->actionstarted(), output);
  }
  
  // required bool firstSideDone = 15;
  if (has_firstsidedone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->firstsidedone(), output);
  }
  
  // required bool secondSideDone = 16;
  if (has_secondsidedone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->secondsidedone(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_MEASURE_ANGLE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 viewerControlID = 1;
  if (has_viewercontrolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viewercontrolid(), target);
  }
  
  // optional int32 cellID = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid(), target);
  }
  
  // optional .tps.proto.AnglePointsList m_AnglePoints = 3;
  if (has_m_anglepoints()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->m_anglepoints(), target);
  }
  
  // required float m_fCursorX = 4;
  if (has_m_fcursorx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->m_fcursorx(), target);
  }
  
  // required float m_fCursorY = 5;
  if (has_m_fcursory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->m_fcursory(), target);
  }
  
  // optional string curImageUid = 11;
  if (has_curimageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->curimageuid().data(), this->curimageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->curimageuid(), target);
  }
  
  // optional .tps.proto.RT_TPS_MEASURE_ANGLE.MOUSE_ACTION_TYPE mouseactiontype = 13;
  if (has_mouseactiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->mouseactiontype(), target);
  }
  
  // required bool actionStarted = 14;
  if (has_actionstarted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->actionstarted(), target);
  }
  
  // required bool firstSideDone = 15;
  if (has_firstsidedone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->firstsidedone(), target);
  }
  
  // required bool secondSideDone = 16;
  if (has_secondsidedone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->secondsidedone(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_MEASURE_ANGLE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 viewerControlID = 1;
    if (has_viewercontrolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewercontrolid());
    }
    
    // optional int32 cellID = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
    // optional .tps.proto.AnglePointsList m_AnglePoints = 3;
    if (has_m_anglepoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->m_anglepoints());
    }
    
    // required float m_fCursorX = 4;
    if (has_m_fcursorx()) {
      total_size += 1 + 4;
    }
    
    // required float m_fCursorY = 5;
    if (has_m_fcursory()) {
      total_size += 1 + 4;
    }
    
    // optional string curImageUid = 11;
    if (has_curimageuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->curimageuid());
    }
    
    // optional .tps.proto.RT_TPS_MEASURE_ANGLE.MOUSE_ACTION_TYPE mouseactiontype = 13;
    if (has_mouseactiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->mouseactiontype());
    }
    
    // required bool actionStarted = 14;
    if (has_actionstarted()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool firstSideDone = 15;
    if (has_firstsidedone()) {
      total_size += 1 + 1;
    }
    
    // required bool secondSideDone = 16;
    if (has_secondsidedone()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_MEASURE_ANGLE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_MEASURE_ANGLE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_MEASURE_ANGLE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_MEASURE_ANGLE::MergeFrom(const RT_TPS_MEASURE_ANGLE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewercontrolid()) {
      set_viewercontrolid(from.viewercontrolid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_m_anglepoints()) {
      mutable_m_anglepoints()->::tps::proto::AnglePointsList::MergeFrom(from.m_anglepoints());
    }
    if (from.has_m_fcursorx()) {
      set_m_fcursorx(from.m_fcursorx());
    }
    if (from.has_m_fcursory()) {
      set_m_fcursory(from.m_fcursory());
    }
    if (from.has_curimageuid()) {
      set_curimageuid(from.curimageuid());
    }
    if (from.has_mouseactiontype()) {
      set_mouseactiontype(from.mouseactiontype());
    }
    if (from.has_actionstarted()) {
      set_actionstarted(from.actionstarted());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_firstsidedone()) {
      set_firstsidedone(from.firstsidedone());
    }
    if (from.has_secondsidedone()) {
      set_secondsidedone(from.secondsidedone());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_MEASURE_ANGLE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_MEASURE_ANGLE::CopyFrom(const RT_TPS_MEASURE_ANGLE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_MEASURE_ANGLE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000399) != 0x00000399) return false;
  
  return true;
}

void RT_TPS_MEASURE_ANGLE::Swap(RT_TPS_MEASURE_ANGLE* other) {
  if (other != this) {
    std::swap(viewercontrolid_, other->viewercontrolid_);
    std::swap(cellid_, other->cellid_);
    std::swap(m_anglepoints_, other->m_anglepoints_);
    std::swap(m_fcursorx_, other->m_fcursorx_);
    std::swap(m_fcursory_, other->m_fcursory_);
    std::swap(curimageuid_, other->curimageuid_);
    std::swap(mouseactiontype_, other->mouseactiontype_);
    std::swap(actionstarted_, other->actionstarted_);
    std::swap(firstsidedone_, other->firstsidedone_);
    std::swap(secondsidedone_, other->secondsidedone_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_MEASURE_ANGLE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_MEASURE_ANGLE_descriptor_;
  metadata.reflection = RT_TPS_MEASURE_ANGLE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnglePoint::kMXFieldNumber;
const int AnglePoint::kMYFieldNumber;
#endif  // !_MSC_VER

AnglePoint::AnglePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnglePoint::InitAsDefaultInstance() {
}

AnglePoint::AnglePoint(const AnglePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnglePoint::SharedCtor() {
  _cached_size_ = 0;
  m_x_ = 0;
  m_y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnglePoint::~AnglePoint() {
  SharedDtor();
}

void AnglePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnglePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnglePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnglePoint_descriptor_;
}

const AnglePoint& AnglePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto();  return *default_instance_;
}

AnglePoint* AnglePoint::default_instance_ = NULL;

AnglePoint* AnglePoint::New() const {
  return new AnglePoint;
}

void AnglePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    m_x_ = 0;
    m_y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnglePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float m_X = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_x_)));
          set_has_m_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_m_Y;
        break;
      }
      
      // optional float m_Y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_m_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &m_y_)));
          set_has_m_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnglePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float m_X = 1;
  if (has_m_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->m_x(), output);
  }
  
  // optional float m_Y = 2;
  if (has_m_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->m_y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnglePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float m_X = 1;
  if (has_m_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->m_x(), target);
  }
  
  // optional float m_Y = 2;
  if (has_m_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->m_y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnglePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float m_X = 1;
    if (has_m_x()) {
      total_size += 1 + 4;
    }
    
    // optional float m_Y = 2;
    if (has_m_y()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnglePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnglePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnglePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnglePoint::MergeFrom(const AnglePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_m_x()) {
      set_m_x(from.m_x());
    }
    if (from.has_m_y()) {
      set_m_y(from.m_y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnglePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnglePoint::CopyFrom(const AnglePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnglePoint::IsInitialized() const {
  
  return true;
}

void AnglePoint::Swap(AnglePoint* other) {
  if (other != this) {
    std::swap(m_x_, other->m_x_);
    std::swap(m_y_, other->m_y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnglePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnglePoint_descriptor_;
  metadata.reflection = AnglePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnglePointsList::kMAnglePointsFieldNumber;
#endif  // !_MSC_VER

AnglePointsList::AnglePointsList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnglePointsList::InitAsDefaultInstance() {
}

AnglePointsList::AnglePointsList(const AnglePointsList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnglePointsList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnglePointsList::~AnglePointsList() {
  SharedDtor();
}

void AnglePointsList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnglePointsList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnglePointsList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnglePointsList_descriptor_;
}

const AnglePointsList& AnglePointsList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fmeasureangle_2eproto();  return *default_instance_;
}

AnglePointsList* AnglePointsList::default_instance_ = NULL;

AnglePointsList* AnglePointsList::New() const {
  return new AnglePointsList;
}

void AnglePointsList::Clear() {
  manglepoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnglePointsList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.AnglePoint mAnglePoints = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mAnglePoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manglepoints()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mAnglePoints;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnglePointsList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.AnglePoint mAnglePoints = 1;
  for (int i = 0; i < this->manglepoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manglepoints(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnglePointsList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.AnglePoint mAnglePoints = 1;
  for (int i = 0; i < this->manglepoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manglepoints(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnglePointsList::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.AnglePoint mAnglePoints = 1;
  total_size += 1 * this->manglepoints_size();
  for (int i = 0; i < this->manglepoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manglepoints(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnglePointsList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnglePointsList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnglePointsList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnglePointsList::MergeFrom(const AnglePointsList& from) {
  GOOGLE_CHECK_NE(&from, this);
  manglepoints_.MergeFrom(from.manglepoints_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnglePointsList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnglePointsList::CopyFrom(const AnglePointsList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnglePointsList::IsInitialized() const {
  
  return true;
}

void AnglePointsList::Swap(AnglePointsList* other) {
  if (other != this) {
    manglepoints_.Swap(&other->manglepoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnglePointsList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnglePointsList_descriptor_;
  metadata.reflection = AnglePointsList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
