// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_approverecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsApproveRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsApproveRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsRepeatedApproveRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsRepeatedApproveRecord_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fapproverecord_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_approverecord.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsApproveRecord_descriptor_ = file->message_type(0);
  static const int RtTpsApproveRecord_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, object_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, objetc_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, approver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, approve_datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, isapprove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, changeset_),
  };
  RtTpsApproveRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsApproveRecord_descriptor_,
      RtTpsApproveRecord::default_instance_,
      RtTpsApproveRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsApproveRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsApproveRecord));
  RtTpsRepeatedApproveRecord_descriptor_ = file->message_type(1);
  static const int RtTpsRepeatedApproveRecord_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsRepeatedApproveRecord, approverecordlist_),
  };
  RtTpsRepeatedApproveRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsRepeatedApproveRecord_descriptor_,
      RtTpsRepeatedApproveRecord::default_instance_,
      RtTpsRepeatedApproveRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsRepeatedApproveRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsRepeatedApproveRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsRepeatedApproveRecord));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fapproverecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsApproveRecord_descriptor_, &RtTpsApproveRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsRepeatedApproveRecord_descriptor_, &RtTpsRepeatedApproveRecord::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fapproverecord_2eproto() {
  delete RtTpsApproveRecord::default_instance_;
  delete RtTpsApproveRecord_reflection_;
  delete RtTpsRepeatedApproveRecord::default_instance_;
  delete RtTpsRepeatedApproveRecord_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_approverecord.proto\022\ttps.proto\""
    "\234\001\n\022RtTpsApproveRecord\022\013\n\003uid\030\001 \002(\t\022\022\n\no"
    "bject_uid\030\002 \002(\t\022\023\n\013objetc_type\030\003 \002(\005\022\020\n\010"
    "approver\030\004 \002(\t\022\030\n\020approve_datetime\030\005 \002(\t"
    "\022\021\n\tisApprove\030\006 \001(\010\022\021\n\tchangeset\030\007 \001(\t\"V"
    "\n\032RtTpsRepeatedApproveRecord\0228\n\021approver"
    "ecordlist\030\001 \003(\0132\035.tps.proto.RtTpsApprove"
    "Record", 286);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_approverecord.proto", &protobuf_RegisterTypes);
  RtTpsApproveRecord::default_instance_ = new RtTpsApproveRecord();
  RtTpsRepeatedApproveRecord::default_instance_ = new RtTpsRepeatedApproveRecord();
  RtTpsApproveRecord::default_instance_->InitAsDefaultInstance();
  RtTpsRepeatedApproveRecord::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fapproverecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fapproverecord_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fapproverecord_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fapproverecord_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsApproveRecord::kUidFieldNumber;
const int RtTpsApproveRecord::kObjectUidFieldNumber;
const int RtTpsApproveRecord::kObjetcTypeFieldNumber;
const int RtTpsApproveRecord::kApproverFieldNumber;
const int RtTpsApproveRecord::kApproveDatetimeFieldNumber;
const int RtTpsApproveRecord::kIsApproveFieldNumber;
const int RtTpsApproveRecord::kChangesetFieldNumber;
#endif  // !_MSC_VER

RtTpsApproveRecord::RtTpsApproveRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsApproveRecord::InitAsDefaultInstance() {
}

RtTpsApproveRecord::RtTpsApproveRecord(const RtTpsApproveRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsApproveRecord::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  object_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  objetc_type_ = 0;
  approver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  approve_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isapprove_ = false;
  changeset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsApproveRecord::~RtTpsApproveRecord() {
  SharedDtor();
}

void RtTpsApproveRecord::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (object_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete object_uid_;
  }
  if (approver_ != &::google::protobuf::internal::kEmptyString) {
    delete approver_;
  }
  if (approve_datetime_ != &::google::protobuf::internal::kEmptyString) {
    delete approve_datetime_;
  }
  if (changeset_ != &::google::protobuf::internal::kEmptyString) {
    delete changeset_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsApproveRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsApproveRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsApproveRecord_descriptor_;
}

const RtTpsApproveRecord& RtTpsApproveRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();  return *default_instance_;
}

RtTpsApproveRecord* RtTpsApproveRecord::default_instance_ = NULL;

RtTpsApproveRecord* RtTpsApproveRecord::New() const {
  return new RtTpsApproveRecord;
}

void RtTpsApproveRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_object_uid()) {
      if (object_uid_ != &::google::protobuf::internal::kEmptyString) {
        object_uid_->clear();
      }
    }
    objetc_type_ = 0;
    if (has_approver()) {
      if (approver_ != &::google::protobuf::internal::kEmptyString) {
        approver_->clear();
      }
    }
    if (has_approve_datetime()) {
      if (approve_datetime_ != &::google::protobuf::internal::kEmptyString) {
        approve_datetime_->clear();
      }
    }
    isapprove_ = false;
    if (has_changeset()) {
      if (changeset_ != &::google::protobuf::internal::kEmptyString) {
        changeset_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsApproveRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_object_uid;
        break;
      }
      
      // required string object_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_object_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_object_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->object_uid().data(), this->object_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_objetc_type;
        break;
      }
      
      // required int32 objetc_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objetc_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objetc_type_)));
          set_has_objetc_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_approver;
        break;
      }
      
      // required string approver = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_approver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_approver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->approver().data(), this->approver().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_approve_datetime;
        break;
      }
      
      // required string approve_datetime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_approve_datetime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_approve_datetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->approve_datetime().data(), this->approve_datetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isApprove;
        break;
      }
      
      // optional bool isApprove = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApprove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapprove_)));
          set_has_isapprove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_changeset;
        break;
      }
      
      // optional string changeset = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_changeset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_changeset()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->changeset().data(), this->changeset().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsApproveRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // required string object_uid = 2;
  if (has_object_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_uid().data(), this->object_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->object_uid(), output);
  }
  
  // required int32 objetc_type = 3;
  if (has_objetc_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->objetc_type(), output);
  }
  
  // required string approver = 4;
  if (has_approver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approver().data(), this->approver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->approver(), output);
  }
  
  // required string approve_datetime = 5;
  if (has_approve_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approve_datetime().data(), this->approve_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->approve_datetime(), output);
  }
  
  // optional bool isApprove = 6;
  if (has_isapprove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isapprove(), output);
  }
  
  // optional string changeset = 7;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->changeset().data(), this->changeset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->changeset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsApproveRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // required string object_uid = 2;
  if (has_object_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->object_uid().data(), this->object_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->object_uid(), target);
  }
  
  // required int32 objetc_type = 3;
  if (has_objetc_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->objetc_type(), target);
  }
  
  // required string approver = 4;
  if (has_approver()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approver().data(), this->approver().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->approver(), target);
  }
  
  // required string approve_datetime = 5;
  if (has_approve_datetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->approve_datetime().data(), this->approve_datetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->approve_datetime(), target);
  }
  
  // optional bool isApprove = 6;
  if (has_isapprove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isapprove(), target);
  }
  
  // optional string changeset = 7;
  if (has_changeset()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->changeset().data(), this->changeset().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->changeset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsApproveRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // required string object_uid = 2;
    if (has_object_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->object_uid());
    }
    
    // required int32 objetc_type = 3;
    if (has_objetc_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objetc_type());
    }
    
    // required string approver = 4;
    if (has_approver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->approver());
    }
    
    // required string approve_datetime = 5;
    if (has_approve_datetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->approve_datetime());
    }
    
    // optional bool isApprove = 6;
    if (has_isapprove()) {
      total_size += 1 + 1;
    }
    
    // optional string changeset = 7;
    if (has_changeset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->changeset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsApproveRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsApproveRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsApproveRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsApproveRecord::MergeFrom(const RtTpsApproveRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_object_uid()) {
      set_object_uid(from.object_uid());
    }
    if (from.has_objetc_type()) {
      set_objetc_type(from.objetc_type());
    }
    if (from.has_approver()) {
      set_approver(from.approver());
    }
    if (from.has_approve_datetime()) {
      set_approve_datetime(from.approve_datetime());
    }
    if (from.has_isapprove()) {
      set_isapprove(from.isapprove());
    }
    if (from.has_changeset()) {
      set_changeset(from.changeset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsApproveRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsApproveRecord::CopyFrom(const RtTpsApproveRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsApproveRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void RtTpsApproveRecord::Swap(RtTpsApproveRecord* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(object_uid_, other->object_uid_);
    std::swap(objetc_type_, other->objetc_type_);
    std::swap(approver_, other->approver_);
    std::swap(approve_datetime_, other->approve_datetime_);
    std::swap(isapprove_, other->isapprove_);
    std::swap(changeset_, other->changeset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsApproveRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsApproveRecord_descriptor_;
  metadata.reflection = RtTpsApproveRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsRepeatedApproveRecord::kApproverecordlistFieldNumber;
#endif  // !_MSC_VER

RtTpsRepeatedApproveRecord::RtTpsRepeatedApproveRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsRepeatedApproveRecord::InitAsDefaultInstance() {
}

RtTpsRepeatedApproveRecord::RtTpsRepeatedApproveRecord(const RtTpsRepeatedApproveRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsRepeatedApproveRecord::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsRepeatedApproveRecord::~RtTpsRepeatedApproveRecord() {
  SharedDtor();
}

void RtTpsRepeatedApproveRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsRepeatedApproveRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsRepeatedApproveRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsRepeatedApproveRecord_descriptor_;
}

const RtTpsRepeatedApproveRecord& RtTpsRepeatedApproveRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();  return *default_instance_;
}

RtTpsRepeatedApproveRecord* RtTpsRepeatedApproveRecord::default_instance_ = NULL;

RtTpsRepeatedApproveRecord* RtTpsRepeatedApproveRecord::New() const {
  return new RtTpsRepeatedApproveRecord;
}

void RtTpsRepeatedApproveRecord::Clear() {
  approverecordlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsRepeatedApproveRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_approverecordlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_approverecordlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_approverecordlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsRepeatedApproveRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
  for (int i = 0; i < this->approverecordlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->approverecordlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsRepeatedApproveRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
  for (int i = 0; i < this->approverecordlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->approverecordlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsRepeatedApproveRecord::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
  total_size += 1 * this->approverecordlist_size();
  for (int i = 0; i < this->approverecordlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->approverecordlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsRepeatedApproveRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsRepeatedApproveRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsRepeatedApproveRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsRepeatedApproveRecord::MergeFrom(const RtTpsRepeatedApproveRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  approverecordlist_.MergeFrom(from.approverecordlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsRepeatedApproveRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsRepeatedApproveRecord::CopyFrom(const RtTpsRepeatedApproveRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsRepeatedApproveRecord::IsInitialized() const {
  
  for (int i = 0; i < approverecordlist_size(); i++) {
    if (!this->approverecordlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsRepeatedApproveRecord::Swap(RtTpsRepeatedApproveRecord* other) {
  if (other != this) {
    approverecordlist_.Swap(&other->approverecordlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsRepeatedApproveRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsRepeatedApproveRecord_descriptor_;
  metadata.reflection = RtTpsRepeatedApproveRecord_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
