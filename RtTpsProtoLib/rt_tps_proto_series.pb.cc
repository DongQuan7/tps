// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_series.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoImagetransformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoImagetransformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoSeries_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSeries_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedSeries_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_series.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoImagetransformation_descriptor_ = file->message_type(0);
  static const int RtTpsProtoImagetransformation_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, originalseriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, transfomationseriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, registrationmethod_),
  };
  RtTpsProtoImagetransformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoImagetransformation_descriptor_,
      RtTpsProtoImagetransformation::default_instance_,
      RtTpsProtoImagetransformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoImagetransformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoImagetransformation));
  RtTpsProtoSeries_descriptor_ = file->message_type(1);
  static const int RtTpsProtoSeries_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, windowingcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, windowingwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, currentslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, slicecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, xdimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, ydimension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, xpixelspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, ypixelspacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, slicespacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, modality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, bitallocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriestime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriesdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriesdescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, imageslicebuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, isqa_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriesnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, frameofreference_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, manufacturermodelname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, acquisitiondatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, courseuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, startx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, starty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, startz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, sizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, sizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, sizez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, imagetransformationlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, orientationx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, orientationy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, orientationz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, groupuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, slicethickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, studyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, studydescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientbirthdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, institutionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, manufacturer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, ct2densityuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriestable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, patientuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, seriesname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, isphantom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, poilist_),
  };
  RtTpsProtoSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoSeries_descriptor_,
      RtTpsProtoSeries::default_instance_,
      RtTpsProtoSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoSeries));
  RtTpsProtoRepeatedSeries_descriptor_ = file->message_type(2);
  static const int RtTpsProtoRepeatedSeries_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeries, serieslist_),
  };
  RtTpsProtoRepeatedSeries_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedSeries_descriptor_,
      RtTpsProtoRepeatedSeries::default_instance_,
      RtTpsProtoRepeatedSeries_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeries, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedSeries, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedSeries));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoImagetransformation_descriptor_, &RtTpsProtoImagetransformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoSeries_descriptor_, &RtTpsProtoSeries::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedSeries_descriptor_, &RtTpsProtoRepeatedSeries::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_2eproto() {
  delete RtTpsProtoImagetransformation::default_instance_;
  delete RtTpsProtoImagetransformation_reflection_;
  delete RtTpsProtoSeries::default_instance_;
  delete RtTpsProtoSeries_reflection_;
  delete RtTpsProtoRepeatedSeries::default_instance_;
  delete RtTpsProtoRepeatedSeries_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031rt_tps_proto_series.proto\022\ttps.proto\032\037"
    "rt_tps_proto_series_table.proto\032\026rt_tps_"
    "proto_poi.proto\"\230\001\n\035RtTpsProtoImagetrans"
    "formation\022\013\n\003uid\030\001 \001(\t\022\031\n\021originalseries"
    "uid\030\002 \001(\t\022\036\n\026transfomationseriesuid\030\003 \001("
    "\t\022\023\n\013description\030\004 \001(\t\022\032\n\022RegistrationMe"
    "thod\030\005 \001(\005\"\243\t\n\020RtTpsProtoSeries\022\021\n\tserie"
    "sUID\030\001 \002(\t\022\027\n\017windowingCenter\030\002 \001(\002\022\026\n\016w"
    "indowingWidth\030\003 \001(\002\022\024\n\014currentSlice\030\004 \001("
    "\005\022\022\n\nsliceCount\030\005 \001(\005\022\022\n\nxDimension\030\006 \001("
    "\005\022\022\n\nyDimension\030\007 \001(\005\022\025\n\rxPixelSpacing\030\010"
    " \001(\002\022\025\n\ryPixelSpacing\030\t \001(\002\022\024\n\014sliceSpac"
    "ing\030\n \001(\002\022\020\n\010modality\030\013 \001(\t\022\024\n\014bitAlloca"
    "ted\030\014 \001(\005\022\022\n\nseriestime\030\r \001(\t\022\022\n\nseriesd"
    "ate\030\016 \001(\t\022\031\n\021seriesdescription\030\017 \001(\t\022\027\n\017"
    "patientPosition\030\020 \001(\t\022\030\n\020imageSliceBuffe"
    "r\030\021 \001(\014\022\014\n\004isqa\030\022 \001(\010\022\024\n\014seriesNumber\030\023 "
    "\001(\005\022\030\n\020frameOfReference\030\024 \001(\t\022\035\n\025manufac"
    "turerModelName\030\025 \001(\t\022\033\n\023acquisitionDateT"
    "ime\030\026 \001(\t\022\021\n\tcourseUID\030\027 \001(\t\022\016\n\006startX\030\030"
    " \001(\002\022\016\n\006startY\030\031 \001(\002\022\016\n\006startZ\030\032 \001(\002\022\r\n\005"
    "sizeX\030\033 \001(\002\022\r\n\005sizeY\030\034 \001(\002\022\r\n\005sizeZ\030\035 \001("
    "\002\022I\n\027imagetransformationList\030\036 \003(\0132(.tps"
    ".proto.RtTpsProtoImagetransformation\022\024\n\014"
    "orientationX\030\037 \003(\002\022\024\n\014orientationY\030  \003(\002"
    "\022\024\n\014orientationZ\030! \003(\002\022\020\n\010groupUid\030\" \001(\t"
    "\022\026\n\016slicethickness\030# \001(\t\022\017\n\007studyid\030$ \001("
    "\t\022\030\n\020studydescription\030% \001(\t\022\023\n\013patientna"
    "me\030& \001(\t\022\021\n\tpatientid\030\' \001(\t\022\030\n\020patientbi"
    "rthdate\030( \001(\t\022\022\n\npatientage\030) \001(\t\022\022\n\npat"
    "ientsex\030* \001(\t\022\027\n\017institutionname\030+ \001(\t\022\024"
    "\n\014manufacturer\030, \001(\t\022\025\n\rct2densityUID\030- "
    "\001(\t\0225\n\013seriesTable\030. \001(\0132 .tps.proto.RtT"
    "psProtoSeriesTable\022\022\n\npatientuid\030/ \001(\t\022\022"
    "\n\nseriesname\0300 \001(\t\022\021\n\tisphantom\0301 \001(\010\022)\n"
    "\007poiList\0302 \003(\0132\030.tps.proto.RtTpsProtoPoi"
    "\"K\n\030RtTpsProtoRepeatedSeries\022/\n\nseriesLi"
    "st\030\001 \003(\0132\033.tps.proto.RtTpsProtoSeries", 1517);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_series.proto", &protobuf_RegisterTypes);
  RtTpsProtoImagetransformation::default_instance_ = new RtTpsProtoImagetransformation();
  RtTpsProtoSeries::default_instance_ = new RtTpsProtoSeries();
  RtTpsProtoRepeatedSeries::default_instance_ = new RtTpsProtoRepeatedSeries();
  RtTpsProtoImagetransformation::default_instance_->InitAsDefaultInstance();
  RtTpsProtoSeries::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedSeries::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fseries_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fseries_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fseries_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoImagetransformation::kUidFieldNumber;
const int RtTpsProtoImagetransformation::kOriginalseriesuidFieldNumber;
const int RtTpsProtoImagetransformation::kTransfomationseriesuidFieldNumber;
const int RtTpsProtoImagetransformation::kDescriptionFieldNumber;
const int RtTpsProtoImagetransformation::kRegistrationMethodFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoImagetransformation::RtTpsProtoImagetransformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoImagetransformation::InitAsDefaultInstance() {
}

RtTpsProtoImagetransformation::RtTpsProtoImagetransformation(const RtTpsProtoImagetransformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoImagetransformation::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  originalseriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  transfomationseriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  registrationmethod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoImagetransformation::~RtTpsProtoImagetransformation() {
  SharedDtor();
}

void RtTpsProtoImagetransformation::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (originalseriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete originalseriesuid_;
  }
  if (transfomationseriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete transfomationseriesuid_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoImagetransformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoImagetransformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoImagetransformation_descriptor_;
}

const RtTpsProtoImagetransformation& RtTpsProtoImagetransformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();  return *default_instance_;
}

RtTpsProtoImagetransformation* RtTpsProtoImagetransformation::default_instance_ = NULL;

RtTpsProtoImagetransformation* RtTpsProtoImagetransformation::New() const {
  return new RtTpsProtoImagetransformation;
}

void RtTpsProtoImagetransformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_originalseriesuid()) {
      if (originalseriesuid_ != &::google::protobuf::internal::kEmptyString) {
        originalseriesuid_->clear();
      }
    }
    if (has_transfomationseriesuid()) {
      if (transfomationseriesuid_ != &::google::protobuf::internal::kEmptyString) {
        transfomationseriesuid_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    registrationmethod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoImagetransformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_originalseriesuid;
        break;
      }
      
      // optional string originalseriesuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_originalseriesuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalseriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->originalseriesuid().data(), this->originalseriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_transfomationseriesuid;
        break;
      }
      
      // optional string transfomationseriesuid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_transfomationseriesuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_transfomationseriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->transfomationseriesuid().data(), this->transfomationseriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }
      
      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_RegistrationMethod;
        break;
      }
      
      // optional int32 RegistrationMethod = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RegistrationMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &registrationmethod_)));
          set_has_registrationmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoImagetransformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string originalseriesuid = 2;
  if (has_originalseriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalseriesuid().data(), this->originalseriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->originalseriesuid(), output);
  }
  
  // optional string transfomationseriesuid = 3;
  if (has_transfomationseriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfomationseriesuid().data(), this->transfomationseriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->transfomationseriesuid(), output);
  }
  
  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }
  
  // optional int32 RegistrationMethod = 5;
  if (has_registrationmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->registrationmethod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoImagetransformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string originalseriesuid = 2;
  if (has_originalseriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->originalseriesuid().data(), this->originalseriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->originalseriesuid(), target);
  }
  
  // optional string transfomationseriesuid = 3;
  if (has_transfomationseriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->transfomationseriesuid().data(), this->transfomationseriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->transfomationseriesuid(), target);
  }
  
  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }
  
  // optional int32 RegistrationMethod = 5;
  if (has_registrationmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->registrationmethod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoImagetransformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string originalseriesuid = 2;
    if (has_originalseriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originalseriesuid());
    }
    
    // optional string transfomationseriesuid = 3;
    if (has_transfomationseriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->transfomationseriesuid());
    }
    
    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional int32 RegistrationMethod = 5;
    if (has_registrationmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->registrationmethod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoImagetransformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoImagetransformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoImagetransformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoImagetransformation::MergeFrom(const RtTpsProtoImagetransformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_originalseriesuid()) {
      set_originalseriesuid(from.originalseriesuid());
    }
    if (from.has_transfomationseriesuid()) {
      set_transfomationseriesuid(from.transfomationseriesuid());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_registrationmethod()) {
      set_registrationmethod(from.registrationmethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoImagetransformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoImagetransformation::CopyFrom(const RtTpsProtoImagetransformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoImagetransformation::IsInitialized() const {
  
  return true;
}

void RtTpsProtoImagetransformation::Swap(RtTpsProtoImagetransformation* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(originalseriesuid_, other->originalseriesuid_);
    std::swap(transfomationseriesuid_, other->transfomationseriesuid_);
    std::swap(description_, other->description_);
    std::swap(registrationmethod_, other->registrationmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoImagetransformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoImagetransformation_descriptor_;
  metadata.reflection = RtTpsProtoImagetransformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoSeries::kSeriesUIDFieldNumber;
const int RtTpsProtoSeries::kWindowingCenterFieldNumber;
const int RtTpsProtoSeries::kWindowingWidthFieldNumber;
const int RtTpsProtoSeries::kCurrentSliceFieldNumber;
const int RtTpsProtoSeries::kSliceCountFieldNumber;
const int RtTpsProtoSeries::kXDimensionFieldNumber;
const int RtTpsProtoSeries::kYDimensionFieldNumber;
const int RtTpsProtoSeries::kXPixelSpacingFieldNumber;
const int RtTpsProtoSeries::kYPixelSpacingFieldNumber;
const int RtTpsProtoSeries::kSliceSpacingFieldNumber;
const int RtTpsProtoSeries::kModalityFieldNumber;
const int RtTpsProtoSeries::kBitAllocatedFieldNumber;
const int RtTpsProtoSeries::kSeriestimeFieldNumber;
const int RtTpsProtoSeries::kSeriesdateFieldNumber;
const int RtTpsProtoSeries::kSeriesdescriptionFieldNumber;
const int RtTpsProtoSeries::kPatientPositionFieldNumber;
const int RtTpsProtoSeries::kImageSliceBufferFieldNumber;
const int RtTpsProtoSeries::kIsqaFieldNumber;
const int RtTpsProtoSeries::kSeriesNumberFieldNumber;
const int RtTpsProtoSeries::kFrameOfReferenceFieldNumber;
const int RtTpsProtoSeries::kManufacturerModelNameFieldNumber;
const int RtTpsProtoSeries::kAcquisitionDateTimeFieldNumber;
const int RtTpsProtoSeries::kCourseUIDFieldNumber;
const int RtTpsProtoSeries::kStartXFieldNumber;
const int RtTpsProtoSeries::kStartYFieldNumber;
const int RtTpsProtoSeries::kStartZFieldNumber;
const int RtTpsProtoSeries::kSizeXFieldNumber;
const int RtTpsProtoSeries::kSizeYFieldNumber;
const int RtTpsProtoSeries::kSizeZFieldNumber;
const int RtTpsProtoSeries::kImagetransformationListFieldNumber;
const int RtTpsProtoSeries::kOrientationXFieldNumber;
const int RtTpsProtoSeries::kOrientationYFieldNumber;
const int RtTpsProtoSeries::kOrientationZFieldNumber;
const int RtTpsProtoSeries::kGroupUidFieldNumber;
const int RtTpsProtoSeries::kSlicethicknessFieldNumber;
const int RtTpsProtoSeries::kStudyidFieldNumber;
const int RtTpsProtoSeries::kStudydescriptionFieldNumber;
const int RtTpsProtoSeries::kPatientnameFieldNumber;
const int RtTpsProtoSeries::kPatientidFieldNumber;
const int RtTpsProtoSeries::kPatientbirthdateFieldNumber;
const int RtTpsProtoSeries::kPatientageFieldNumber;
const int RtTpsProtoSeries::kPatientsexFieldNumber;
const int RtTpsProtoSeries::kInstitutionnameFieldNumber;
const int RtTpsProtoSeries::kManufacturerFieldNumber;
const int RtTpsProtoSeries::kCt2DensityUIDFieldNumber;
const int RtTpsProtoSeries::kSeriesTableFieldNumber;
const int RtTpsProtoSeries::kPatientuidFieldNumber;
const int RtTpsProtoSeries::kSeriesnameFieldNumber;
const int RtTpsProtoSeries::kIsphantomFieldNumber;
const int RtTpsProtoSeries::kPoiListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoSeries::RtTpsProtoSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoSeries::InitAsDefaultInstance() {
  seriestable_ = const_cast< ::tps::proto::RtTpsProtoSeriesTable*>(&::tps::proto::RtTpsProtoSeriesTable::default_instance());
}

RtTpsProtoSeries::RtTpsProtoSeries(const RtTpsProtoSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoSeries::SharedCtor() {
  _cached_size_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  windowingcenter_ = 0;
  windowingwidth_ = 0;
  currentslice_ = 0;
  slicecount_ = 0;
  xdimension_ = 0;
  ydimension_ = 0;
  xpixelspacing_ = 0;
  ypixelspacing_ = 0;
  slicespacing_ = 0;
  modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bitallocated_ = 0;
  seriestime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageslicebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isqa_ = false;
  seriesnumber_ = 0;
  frameofreference_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturermodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  acquisitiondatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  courseuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  startx_ = 0;
  starty_ = 0;
  startz_ = 0;
  sizex_ = 0;
  sizey_ = 0;
  sizez_ = 0;
  groupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slicethickness_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  studyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  studydescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientbirthdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientsex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  institutionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ct2densityuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriestable_ = NULL;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isphantom_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoSeries::~RtTpsProtoSeries() {
  SharedDtor();
}

void RtTpsProtoSeries::SharedDtor() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (modality_ != &::google::protobuf::internal::kEmptyString) {
    delete modality_;
  }
  if (seriestime_ != &::google::protobuf::internal::kEmptyString) {
    delete seriestime_;
  }
  if (seriesdate_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesdate_;
  }
  if (seriesdescription_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesdescription_;
  }
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    delete patientposition_;
  }
  if (imageslicebuffer_ != &::google::protobuf::internal::kEmptyString) {
    delete imageslicebuffer_;
  }
  if (frameofreference_ != &::google::protobuf::internal::kEmptyString) {
    delete frameofreference_;
  }
  if (manufacturermodelname_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturermodelname_;
  }
  if (acquisitiondatetime_ != &::google::protobuf::internal::kEmptyString) {
    delete acquisitiondatetime_;
  }
  if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
    delete courseuid_;
  }
  if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupuid_;
  }
  if (slicethickness_ != &::google::protobuf::internal::kEmptyString) {
    delete slicethickness_;
  }
  if (studyid_ != &::google::protobuf::internal::kEmptyString) {
    delete studyid_;
  }
  if (studydescription_ != &::google::protobuf::internal::kEmptyString) {
    delete studydescription_;
  }
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientname_;
  }
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientbirthdate_ != &::google::protobuf::internal::kEmptyString) {
    delete patientbirthdate_;
  }
  if (patientage_ != &::google::protobuf::internal::kEmptyString) {
    delete patientage_;
  }
  if (patientsex_ != &::google::protobuf::internal::kEmptyString) {
    delete patientsex_;
  }
  if (institutionname_ != &::google::protobuf::internal::kEmptyString) {
    delete institutionname_;
  }
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    delete manufacturer_;
  }
  if (ct2densityuid_ != &::google::protobuf::internal::kEmptyString) {
    delete ct2densityuid_;
  }
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesname_;
  }
  if (this != default_instance_) {
    delete seriestable_;
  }
}

void RtTpsProtoSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoSeries_descriptor_;
}

const RtTpsProtoSeries& RtTpsProtoSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();  return *default_instance_;
}

RtTpsProtoSeries* RtTpsProtoSeries::default_instance_ = NULL;

RtTpsProtoSeries* RtTpsProtoSeries::New() const {
  return new RtTpsProtoSeries;
}

void RtTpsProtoSeries::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    windowingcenter_ = 0;
    windowingwidth_ = 0;
    currentslice_ = 0;
    slicecount_ = 0;
    xdimension_ = 0;
    ydimension_ = 0;
    xpixelspacing_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ypixelspacing_ = 0;
    slicespacing_ = 0;
    if (has_modality()) {
      if (modality_ != &::google::protobuf::internal::kEmptyString) {
        modality_->clear();
      }
    }
    bitallocated_ = 0;
    if (has_seriestime()) {
      if (seriestime_ != &::google::protobuf::internal::kEmptyString) {
        seriestime_->clear();
      }
    }
    if (has_seriesdate()) {
      if (seriesdate_ != &::google::protobuf::internal::kEmptyString) {
        seriesdate_->clear();
      }
    }
    if (has_seriesdescription()) {
      if (seriesdescription_ != &::google::protobuf::internal::kEmptyString) {
        seriesdescription_->clear();
      }
    }
    if (has_patientposition()) {
      if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
        patientposition_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_imageslicebuffer()) {
      if (imageslicebuffer_ != &::google::protobuf::internal::kEmptyString) {
        imageslicebuffer_->clear();
      }
    }
    isqa_ = false;
    seriesnumber_ = 0;
    if (has_frameofreference()) {
      if (frameofreference_ != &::google::protobuf::internal::kEmptyString) {
        frameofreference_->clear();
      }
    }
    if (has_manufacturermodelname()) {
      if (manufacturermodelname_ != &::google::protobuf::internal::kEmptyString) {
        manufacturermodelname_->clear();
      }
    }
    if (has_acquisitiondatetime()) {
      if (acquisitiondatetime_ != &::google::protobuf::internal::kEmptyString) {
        acquisitiondatetime_->clear();
      }
    }
    if (has_courseuid()) {
      if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
        courseuid_->clear();
      }
    }
    startx_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    starty_ = 0;
    startz_ = 0;
    sizex_ = 0;
    sizey_ = 0;
    sizez_ = 0;
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (has_groupuid()) {
      if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
        groupuid_->clear();
      }
    }
    if (has_slicethickness()) {
      if (slicethickness_ != &::google::protobuf::internal::kEmptyString) {
        slicethickness_->clear();
      }
    }
    if (has_studyid()) {
      if (studyid_ != &::google::protobuf::internal::kEmptyString) {
        studyid_->clear();
      }
    }
    if (has_studydescription()) {
      if (studydescription_ != &::google::protobuf::internal::kEmptyString) {
        studydescription_->clear();
      }
    }
    if (has_patientname()) {
      if (patientname_ != &::google::protobuf::internal::kEmptyString) {
        patientname_->clear();
      }
    }
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    if (has_patientbirthdate()) {
      if (patientbirthdate_ != &::google::protobuf::internal::kEmptyString) {
        patientbirthdate_->clear();
      }
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_patientage()) {
      if (patientage_ != &::google::protobuf::internal::kEmptyString) {
        patientage_->clear();
      }
    }
    if (has_patientsex()) {
      if (patientsex_ != &::google::protobuf::internal::kEmptyString) {
        patientsex_->clear();
      }
    }
    if (has_institutionname()) {
      if (institutionname_ != &::google::protobuf::internal::kEmptyString) {
        institutionname_->clear();
      }
    }
    if (has_manufacturer()) {
      if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
        manufacturer_->clear();
      }
    }
    if (has_ct2densityuid()) {
      if (ct2densityuid_ != &::google::protobuf::internal::kEmptyString) {
        ct2densityuid_->clear();
      }
    }
    if (has_seriestable()) {
      if (seriestable_ != NULL) seriestable_->::tps::proto::RtTpsProtoSeriesTable::Clear();
    }
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
    if (has_seriesname()) {
      if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
        seriesname_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    isphantom_ = false;
  }
  imagetransformationlist_.Clear();
  orientationx_.Clear();
  orientationy_.Clear();
  orientationz_.Clear();
  poilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string seriesUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_windowingCenter;
        break;
      }
      
      // optional float windowingCenter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_windowingCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windowingcenter_)));
          set_has_windowingcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_windowingWidth;
        break;
      }
      
      // optional float windowingWidth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_windowingWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &windowingwidth_)));
          set_has_windowingwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currentSlice;
        break;
      }
      
      // optional int32 currentSlice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentslice_)));
          set_has_currentslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sliceCount;
        break;
      }
      
      // optional int32 sliceCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sliceCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slicecount_)));
          set_has_slicecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_xDimension;
        break;
      }
      
      // optional int32 xDimension = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xdimension_)));
          set_has_xdimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_yDimension;
        break;
      }
      
      // optional int32 yDimension = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yDimension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ydimension_)));
          set_has_ydimension();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_xPixelSpacing;
        break;
      }
      
      // optional float xPixelSpacing = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xPixelSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xpixelspacing_)));
          set_has_xpixelspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_yPixelSpacing;
        break;
      }
      
      // optional float yPixelSpacing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yPixelSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ypixelspacing_)));
          set_has_ypixelspacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_sliceSpacing;
        break;
      }
      
      // optional float sliceSpacing = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sliceSpacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &slicespacing_)));
          set_has_slicespacing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_modality;
        break;
      }
      
      // optional string modality = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modality()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modality().data(), this->modality().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_bitAllocated;
        break;
      }
      
      // optional int32 bitAllocated = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitAllocated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitallocated_)));
          set_has_bitallocated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_seriestime;
        break;
      }
      
      // optional string seriestime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriestime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriestime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriestime().data(), this->seriestime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_seriesdate;
        break;
      }
      
      // optional string seriesdate = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesdate().data(), this->seriesdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_seriesdescription;
        break;
      }
      
      // optional string seriesdescription = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesdescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesdescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesdescription().data(), this->seriesdescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_patientPosition;
        break;
      }
      
      // optional string patientPosition = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientPosition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientposition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientposition().data(), this->patientposition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_imageSliceBuffer;
        break;
      }
      
      // optional bytes imageSliceBuffer = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageSliceBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imageslicebuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isqa;
        break;
      }
      
      // optional bool isqa = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isqa:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isqa_)));
          set_has_isqa();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_seriesNumber;
        break;
      }
      
      // optional int32 seriesNumber = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seriesNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seriesnumber_)));
          set_has_seriesnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_frameOfReference;
        break;
      }
      
      // optional string frameOfReference = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_frameOfReference:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_frameofreference()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->frameofreference().data(), this->frameofreference().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_manufacturerModelName;
        break;
      }
      
      // optional string manufacturerModelName = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturerModelName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturermodelname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturermodelname().data(), this->manufacturermodelname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_acquisitionDateTime;
        break;
      }
      
      // optional string acquisitionDateTime = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acquisitionDateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acquisitiondatetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acquisitiondatetime().data(), this->acquisitiondatetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_courseUID;
        break;
      }
      
      // optional string courseUID = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_courseUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_courseuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->courseuid().data(), this->courseuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_startX;
        break;
      }
      
      // optional float startX = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startx_)));
          set_has_startx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_startY;
        break;
      }
      
      // optional float startY = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &starty_)));
          set_has_starty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_startZ;
        break;
      }
      
      // optional float startZ = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_startZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &startz_)));
          set_has_startz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_sizeX;
        break;
      }
      
      // optional float sizeX = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizex_)));
          set_has_sizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_sizeY;
        break;
      }
      
      // optional float sizeY = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizey_)));
          set_has_sizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_sizeZ;
        break;
      }
      
      // optional float sizeZ = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizez_)));
          set_has_sizez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_imagetransformationList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoImagetransformation imagetransformationList = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imagetransformationList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imagetransformationlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_imagetransformationList;
        if (input->ExpectTag(253)) goto parse_orientationX;
        break;
      }
      
      // repeated float orientationX = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orientationX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 253, input, this->mutable_orientationx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_orientationx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(253)) goto parse_orientationX;
        if (input->ExpectTag(261)) goto parse_orientationY;
        break;
      }
      
      // repeated float orientationY = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orientationY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 261, input, this->mutable_orientationy())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_orientationy())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(261)) goto parse_orientationY;
        if (input->ExpectTag(269)) goto parse_orientationZ;
        break;
      }
      
      // repeated float orientationZ = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_orientationZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 269, input, this->mutable_orientationz())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_orientationz())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_orientationZ;
        if (input->ExpectTag(274)) goto parse_groupUid;
        break;
      }
      
      // optional string groupUid = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupuid().data(), this->groupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_slicethickness;
        break;
      }
      
      // optional string slicethickness = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slicethickness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slicethickness()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slicethickness().data(), this->slicethickness().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_studyid;
        break;
      }
      
      // optional string studyid = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_studyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studyid().data(), this->studyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_studydescription;
        break;
      }
      
      // optional string studydescription = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_studydescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_studydescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->studydescription().data(), this->studydescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_patientname;
        break;
      }
      
      // optional string patientname = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientname().data(), this->patientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_patientid;
        break;
      }
      
      // optional string patientid = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_patientbirthdate;
        break;
      }
      
      // optional string patientbirthdate = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientbirthdate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientbirthdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientbirthdate().data(), this->patientbirthdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_patientage;
        break;
      }
      
      // optional string patientage = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientage().data(), this->patientage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_patientsex;
        break;
      }
      
      // optional string patientsex = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientsex:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientsex()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientsex().data(), this->patientsex().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_institutionname;
        break;
      }
      
      // optional string institutionname = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_institutionname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_institutionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->institutionname().data(), this->institutionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_manufacturer;
        break;
      }
      
      // optional string manufacturer = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufacturer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_ct2densityUID;
        break;
      }
      
      // optional string ct2densityUID = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ct2densityUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ct2densityuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ct2densityuid().data(), this->ct2densityuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_seriesTable;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoSeriesTable seriesTable = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesTable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seriestable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(378)) goto parse_patientuid;
        break;
      }
      
      // optional string patientuid = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_seriesname;
        break;
      }
      
      // optional string seriesname = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesname().data(), this->seriesname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_isphantom;
        break;
      }
      
      // optional bool isphantom = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isphantom:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isphantom_)));
          set_has_isphantom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_poiList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoPoi poiList = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(402)) goto parse_poiList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->seriesuid(), output);
  }
  
  // optional float windowingCenter = 2;
  if (has_windowingcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->windowingcenter(), output);
  }
  
  // optional float windowingWidth = 3;
  if (has_windowingwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->windowingwidth(), output);
  }
  
  // optional int32 currentSlice = 4;
  if (has_currentslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentslice(), output);
  }
  
  // optional int32 sliceCount = 5;
  if (has_slicecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slicecount(), output);
  }
  
  // optional int32 xDimension = 6;
  if (has_xdimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->xdimension(), output);
  }
  
  // optional int32 yDimension = 7;
  if (has_ydimension()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ydimension(), output);
  }
  
  // optional float xPixelSpacing = 8;
  if (has_xpixelspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xpixelspacing(), output);
  }
  
  // optional float yPixelSpacing = 9;
  if (has_ypixelspacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ypixelspacing(), output);
  }
  
  // optional float sliceSpacing = 10;
  if (has_slicespacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->slicespacing(), output);
  }
  
  // optional string modality = 11;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->modality(), output);
  }
  
  // optional int32 bitAllocated = 12;
  if (has_bitallocated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->bitallocated(), output);
  }
  
  // optional string seriestime = 13;
  if (has_seriestime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriestime().data(), this->seriestime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->seriestime(), output);
  }
  
  // optional string seriesdate = 14;
  if (has_seriesdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdate().data(), this->seriesdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->seriesdate(), output);
  }
  
  // optional string seriesdescription = 15;
  if (has_seriesdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdescription().data(), this->seriesdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->seriesdescription(), output);
  }
  
  // optional string patientPosition = 16;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->patientposition(), output);
  }
  
  // optional bytes imageSliceBuffer = 17;
  if (has_imageslicebuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      17, this->imageslicebuffer(), output);
  }
  
  // optional bool isqa = 18;
  if (has_isqa()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->isqa(), output);
  }
  
  // optional int32 seriesNumber = 19;
  if (has_seriesnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->seriesnumber(), output);
  }
  
  // optional string frameOfReference = 20;
  if (has_frameofreference()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameofreference().data(), this->frameofreference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->frameofreference(), output);
  }
  
  // optional string manufacturerModelName = 21;
  if (has_manufacturermodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturermodelname().data(), this->manufacturermodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->manufacturermodelname(), output);
  }
  
  // optional string acquisitionDateTime = 22;
  if (has_acquisitiondatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acquisitiondatetime().data(), this->acquisitiondatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->acquisitiondatetime(), output);
  }
  
  // optional string courseUID = 23;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      23, this->courseuid(), output);
  }
  
  // optional float startX = 24;
  if (has_startx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->startx(), output);
  }
  
  // optional float startY = 25;
  if (has_starty()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->starty(), output);
  }
  
  // optional float startZ = 26;
  if (has_startz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->startz(), output);
  }
  
  // optional float sizeX = 27;
  if (has_sizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->sizex(), output);
  }
  
  // optional float sizeY = 28;
  if (has_sizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->sizey(), output);
  }
  
  // optional float sizeZ = 29;
  if (has_sizez()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->sizez(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoImagetransformation imagetransformationList = 30;
  for (int i = 0; i < this->imagetransformationlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->imagetransformationlist(i), output);
  }
  
  // repeated float orientationX = 31;
  for (int i = 0; i < this->orientationx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      31, this->orientationx(i), output);
  }
  
  // repeated float orientationY = 32;
  for (int i = 0; i < this->orientationy_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      32, this->orientationy(i), output);
  }
  
  // repeated float orientationZ = 33;
  for (int i = 0; i < this->orientationz_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      33, this->orientationz(i), output);
  }
  
  // optional string groupUid = 34;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->groupuid(), output);
  }
  
  // optional string slicethickness = 35;
  if (has_slicethickness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slicethickness().data(), this->slicethickness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->slicethickness(), output);
  }
  
  // optional string studyid = 36;
  if (has_studyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyid().data(), this->studyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->studyid(), output);
  }
  
  // optional string studydescription = 37;
  if (has_studydescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studydescription().data(), this->studydescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->studydescription(), output);
  }
  
  // optional string patientname = 38;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      38, this->patientname(), output);
  }
  
  // optional string patientid = 39;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->patientid(), output);
  }
  
  // optional string patientbirthdate = 40;
  if (has_patientbirthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthdate().data(), this->patientbirthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->patientbirthdate(), output);
  }
  
  // optional string patientage = 41;
  if (has_patientage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientage().data(), this->patientage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      41, this->patientage(), output);
  }
  
  // optional string patientsex = 42;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientsex().data(), this->patientsex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->patientsex(), output);
  }
  
  // optional string institutionname = 43;
  if (has_institutionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->institutionname().data(), this->institutionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      43, this->institutionname(), output);
  }
  
  // optional string manufacturer = 44;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      44, this->manufacturer(), output);
  }
  
  // optional string ct2densityUID = 45;
  if (has_ct2densityuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ct2densityuid().data(), this->ct2densityuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      45, this->ct2densityuid(), output);
  }
  
  // optional .tps.proto.RtTpsProtoSeriesTable seriesTable = 46;
  if (has_seriestable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->seriestable(), output);
  }
  
  // optional string patientuid = 47;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      47, this->patientuid(), output);
  }
  
  // optional string seriesname = 48;
  if (has_seriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname().data(), this->seriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->seriesname(), output);
  }
  
  // optional bool isphantom = 49;
  if (has_isphantom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(49, this->isphantom(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 50;
  for (int i = 0; i < this->poilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      50, this->poilist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string seriesUID = 1;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->seriesuid(), target);
  }
  
  // optional float windowingCenter = 2;
  if (has_windowingcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->windowingcenter(), target);
  }
  
  // optional float windowingWidth = 3;
  if (has_windowingwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->windowingwidth(), target);
  }
  
  // optional int32 currentSlice = 4;
  if (has_currentslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentslice(), target);
  }
  
  // optional int32 sliceCount = 5;
  if (has_slicecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slicecount(), target);
  }
  
  // optional int32 xDimension = 6;
  if (has_xdimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->xdimension(), target);
  }
  
  // optional int32 yDimension = 7;
  if (has_ydimension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ydimension(), target);
  }
  
  // optional float xPixelSpacing = 8;
  if (has_xpixelspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xpixelspacing(), target);
  }
  
  // optional float yPixelSpacing = 9;
  if (has_ypixelspacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->ypixelspacing(), target);
  }
  
  // optional float sliceSpacing = 10;
  if (has_slicespacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->slicespacing(), target);
  }
  
  // optional string modality = 11;
  if (has_modality()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modality().data(), this->modality().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->modality(), target);
  }
  
  // optional int32 bitAllocated = 12;
  if (has_bitallocated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->bitallocated(), target);
  }
  
  // optional string seriestime = 13;
  if (has_seriestime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriestime().data(), this->seriestime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->seriestime(), target);
  }
  
  // optional string seriesdate = 14;
  if (has_seriesdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdate().data(), this->seriesdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->seriesdate(), target);
  }
  
  // optional string seriesdescription = 15;
  if (has_seriesdescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesdescription().data(), this->seriesdescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->seriesdescription(), target);
  }
  
  // optional string patientPosition = 16;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientposition().data(), this->patientposition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->patientposition(), target);
  }
  
  // optional bytes imageSliceBuffer = 17;
  if (has_imageslicebuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        17, this->imageslicebuffer(), target);
  }
  
  // optional bool isqa = 18;
  if (has_isqa()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->isqa(), target);
  }
  
  // optional int32 seriesNumber = 19;
  if (has_seriesnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->seriesnumber(), target);
  }
  
  // optional string frameOfReference = 20;
  if (has_frameofreference()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->frameofreference().data(), this->frameofreference().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->frameofreference(), target);
  }
  
  // optional string manufacturerModelName = 21;
  if (has_manufacturermodelname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturermodelname().data(), this->manufacturermodelname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->manufacturermodelname(), target);
  }
  
  // optional string acquisitionDateTime = 22;
  if (has_acquisitiondatetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acquisitiondatetime().data(), this->acquisitiondatetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->acquisitiondatetime(), target);
  }
  
  // optional string courseUID = 23;
  if (has_courseuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->courseuid().data(), this->courseuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        23, this->courseuid(), target);
  }
  
  // optional float startX = 24;
  if (has_startx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->startx(), target);
  }
  
  // optional float startY = 25;
  if (has_starty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->starty(), target);
  }
  
  // optional float startZ = 26;
  if (has_startz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->startz(), target);
  }
  
  // optional float sizeX = 27;
  if (has_sizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->sizex(), target);
  }
  
  // optional float sizeY = 28;
  if (has_sizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->sizey(), target);
  }
  
  // optional float sizeZ = 29;
  if (has_sizez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->sizez(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoImagetransformation imagetransformationList = 30;
  for (int i = 0; i < this->imagetransformationlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->imagetransformationlist(i), target);
  }
  
  // repeated float orientationX = 31;
  for (int i = 0; i < this->orientationx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(31, this->orientationx(i), target);
  }
  
  // repeated float orientationY = 32;
  for (int i = 0; i < this->orientationy_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(32, this->orientationy(i), target);
  }
  
  // repeated float orientationZ = 33;
  for (int i = 0; i < this->orientationz_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(33, this->orientationz(i), target);
  }
  
  // optional string groupUid = 34;
  if (has_groupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupuid().data(), this->groupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->groupuid(), target);
  }
  
  // optional string slicethickness = 35;
  if (has_slicethickness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slicethickness().data(), this->slicethickness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->slicethickness(), target);
  }
  
  // optional string studyid = 36;
  if (has_studyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studyid().data(), this->studyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->studyid(), target);
  }
  
  // optional string studydescription = 37;
  if (has_studydescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->studydescription().data(), this->studydescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->studydescription(), target);
  }
  
  // optional string patientname = 38;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->patientname(), target);
  }
  
  // optional string patientid = 39;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->patientid(), target);
  }
  
  // optional string patientbirthdate = 40;
  if (has_patientbirthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthdate().data(), this->patientbirthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->patientbirthdate(), target);
  }
  
  // optional string patientage = 41;
  if (has_patientage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientage().data(), this->patientage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        41, this->patientage(), target);
  }
  
  // optional string patientsex = 42;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientsex().data(), this->patientsex().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->patientsex(), target);
  }
  
  // optional string institutionname = 43;
  if (has_institutionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->institutionname().data(), this->institutionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        43, this->institutionname(), target);
  }
  
  // optional string manufacturer = 44;
  if (has_manufacturer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->manufacturer(), target);
  }
  
  // optional string ct2densityUID = 45;
  if (has_ct2densityuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ct2densityuid().data(), this->ct2densityuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->ct2densityuid(), target);
  }
  
  // optional .tps.proto.RtTpsProtoSeriesTable seriesTable = 46;
  if (has_seriestable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->seriestable(), target);
  }
  
  // optional string patientuid = 47;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->patientuid(), target);
  }
  
  // optional string seriesname = 48;
  if (has_seriesname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesname().data(), this->seriesname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->seriesname(), target);
  }
  
  // optional bool isphantom = 49;
  if (has_isphantom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(49, this->isphantom(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 50;
  for (int i = 0; i < this->poilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        50, this->poilist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoSeries::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string seriesUID = 1;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // optional float windowingCenter = 2;
    if (has_windowingcenter()) {
      total_size += 1 + 4;
    }
    
    // optional float windowingWidth = 3;
    if (has_windowingwidth()) {
      total_size += 1 + 4;
    }
    
    // optional int32 currentSlice = 4;
    if (has_currentslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentslice());
    }
    
    // optional int32 sliceCount = 5;
    if (has_slicecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slicecount());
    }
    
    // optional int32 xDimension = 6;
    if (has_xdimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xdimension());
    }
    
    // optional int32 yDimension = 7;
    if (has_ydimension()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ydimension());
    }
    
    // optional float xPixelSpacing = 8;
    if (has_xpixelspacing()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float yPixelSpacing = 9;
    if (has_ypixelspacing()) {
      total_size += 1 + 4;
    }
    
    // optional float sliceSpacing = 10;
    if (has_slicespacing()) {
      total_size += 1 + 4;
    }
    
    // optional string modality = 11;
    if (has_modality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modality());
    }
    
    // optional int32 bitAllocated = 12;
    if (has_bitallocated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitallocated());
    }
    
    // optional string seriestime = 13;
    if (has_seriestime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriestime());
    }
    
    // optional string seriesdate = 14;
    if (has_seriesdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesdate());
    }
    
    // optional string seriesdescription = 15;
    if (has_seriesdescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesdescription());
    }
    
    // optional string patientPosition = 16;
    if (has_patientposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientposition());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bytes imageSliceBuffer = 17;
    if (has_imageslicebuffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imageslicebuffer());
    }
    
    // optional bool isqa = 18;
    if (has_isqa()) {
      total_size += 2 + 1;
    }
    
    // optional int32 seriesNumber = 19;
    if (has_seriesnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seriesnumber());
    }
    
    // optional string frameOfReference = 20;
    if (has_frameofreference()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->frameofreference());
    }
    
    // optional string manufacturerModelName = 21;
    if (has_manufacturermodelname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturermodelname());
    }
    
    // optional string acquisitionDateTime = 22;
    if (has_acquisitiondatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acquisitiondatetime());
    }
    
    // optional string courseUID = 23;
    if (has_courseuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->courseuid());
    }
    
    // optional float startX = 24;
    if (has_startx()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float startY = 25;
    if (has_starty()) {
      total_size += 2 + 4;
    }
    
    // optional float startZ = 26;
    if (has_startz()) {
      total_size += 2 + 4;
    }
    
    // optional float sizeX = 27;
    if (has_sizex()) {
      total_size += 2 + 4;
    }
    
    // optional float sizeY = 28;
    if (has_sizey()) {
      total_size += 2 + 4;
    }
    
    // optional float sizeZ = 29;
    if (has_sizez()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    // optional string groupUid = 34;
    if (has_groupuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupuid());
    }
    
    // optional string slicethickness = 35;
    if (has_slicethickness()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slicethickness());
    }
    
    // optional string studyid = 36;
    if (has_studyid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studyid());
    }
    
    // optional string studydescription = 37;
    if (has_studydescription()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->studydescription());
    }
    
    // optional string patientname = 38;
    if (has_patientname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientname());
    }
    
    // optional string patientid = 39;
    if (has_patientid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }
    
    // optional string patientbirthdate = 40;
    if (has_patientbirthdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientbirthdate());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional string patientage = 41;
    if (has_patientage()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientage());
    }
    
    // optional string patientsex = 42;
    if (has_patientsex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientsex());
    }
    
    // optional string institutionname = 43;
    if (has_institutionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->institutionname());
    }
    
    // optional string manufacturer = 44;
    if (has_manufacturer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufacturer());
    }
    
    // optional string ct2densityUID = 45;
    if (has_ct2densityuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ct2densityuid());
    }
    
    // optional .tps.proto.RtTpsProtoSeriesTable seriesTable = 46;
    if (has_seriestable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seriestable());
    }
    
    // optional string patientuid = 47;
    if (has_patientuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
    // optional string seriesname = 48;
    if (has_seriesname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesname());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional bool isphantom = 49;
    if (has_isphantom()) {
      total_size += 2 + 1;
    }
    
  }
  // repeated .tps.proto.RtTpsProtoImagetransformation imagetransformationList = 30;
  total_size += 2 * this->imagetransformationlist_size();
  for (int i = 0; i < this->imagetransformationlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imagetransformationlist(i));
  }
  
  // repeated float orientationX = 31;
  {
    int data_size = 0;
    data_size = 4 * this->orientationx_size();
    total_size += 2 * this->orientationx_size() + data_size;
  }
  
  // repeated float orientationY = 32;
  {
    int data_size = 0;
    data_size = 4 * this->orientationy_size();
    total_size += 2 * this->orientationy_size() + data_size;
  }
  
  // repeated float orientationZ = 33;
  {
    int data_size = 0;
    data_size = 4 * this->orientationz_size();
    total_size += 2 * this->orientationz_size() + data_size;
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 50;
  total_size += 2 * this->poilist_size();
  for (int i = 0; i < this->poilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poilist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoSeries::MergeFrom(const RtTpsProtoSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  imagetransformationlist_.MergeFrom(from.imagetransformationlist_);
  orientationx_.MergeFrom(from.orientationx_);
  orientationy_.MergeFrom(from.orientationy_);
  orientationz_.MergeFrom(from.orientationz_);
  poilist_.MergeFrom(from.poilist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_windowingcenter()) {
      set_windowingcenter(from.windowingcenter());
    }
    if (from.has_windowingwidth()) {
      set_windowingwidth(from.windowingwidth());
    }
    if (from.has_currentslice()) {
      set_currentslice(from.currentslice());
    }
    if (from.has_slicecount()) {
      set_slicecount(from.slicecount());
    }
    if (from.has_xdimension()) {
      set_xdimension(from.xdimension());
    }
    if (from.has_ydimension()) {
      set_ydimension(from.ydimension());
    }
    if (from.has_xpixelspacing()) {
      set_xpixelspacing(from.xpixelspacing());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ypixelspacing()) {
      set_ypixelspacing(from.ypixelspacing());
    }
    if (from.has_slicespacing()) {
      set_slicespacing(from.slicespacing());
    }
    if (from.has_modality()) {
      set_modality(from.modality());
    }
    if (from.has_bitallocated()) {
      set_bitallocated(from.bitallocated());
    }
    if (from.has_seriestime()) {
      set_seriestime(from.seriestime());
    }
    if (from.has_seriesdate()) {
      set_seriesdate(from.seriesdate());
    }
    if (from.has_seriesdescription()) {
      set_seriesdescription(from.seriesdescription());
    }
    if (from.has_patientposition()) {
      set_patientposition(from.patientposition());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_imageslicebuffer()) {
      set_imageslicebuffer(from.imageslicebuffer());
    }
    if (from.has_isqa()) {
      set_isqa(from.isqa());
    }
    if (from.has_seriesnumber()) {
      set_seriesnumber(from.seriesnumber());
    }
    if (from.has_frameofreference()) {
      set_frameofreference(from.frameofreference());
    }
    if (from.has_manufacturermodelname()) {
      set_manufacturermodelname(from.manufacturermodelname());
    }
    if (from.has_acquisitiondatetime()) {
      set_acquisitiondatetime(from.acquisitiondatetime());
    }
    if (from.has_courseuid()) {
      set_courseuid(from.courseuid());
    }
    if (from.has_startx()) {
      set_startx(from.startx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_starty()) {
      set_starty(from.starty());
    }
    if (from.has_startz()) {
      set_startz(from.startz());
    }
    if (from.has_sizex()) {
      set_sizex(from.sizex());
    }
    if (from.has_sizey()) {
      set_sizey(from.sizey());
    }
    if (from.has_sizez()) {
      set_sizez(from.sizez());
    }
  }
  if (from._has_bits_[33 / 32] & (0xffu << (33 % 32))) {
    if (from.has_groupuid()) {
      set_groupuid(from.groupuid());
    }
    if (from.has_slicethickness()) {
      set_slicethickness(from.slicethickness());
    }
    if (from.has_studyid()) {
      set_studyid(from.studyid());
    }
    if (from.has_studydescription()) {
      set_studydescription(from.studydescription());
    }
    if (from.has_patientname()) {
      set_patientname(from.patientname());
    }
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientbirthdate()) {
      set_patientbirthdate(from.patientbirthdate());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_patientage()) {
      set_patientage(from.patientage());
    }
    if (from.has_patientsex()) {
      set_patientsex(from.patientsex());
    }
    if (from.has_institutionname()) {
      set_institutionname(from.institutionname());
    }
    if (from.has_manufacturer()) {
      set_manufacturer(from.manufacturer());
    }
    if (from.has_ct2densityuid()) {
      set_ct2densityuid(from.ct2densityuid());
    }
    if (from.has_seriestable()) {
      mutable_seriestable()->::tps::proto::RtTpsProtoSeriesTable::MergeFrom(from.seriestable());
    }
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
    if (from.has_seriesname()) {
      set_seriesname(from.seriesname());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_isphantom()) {
      set_isphantom(from.isphantom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoSeries::CopyFrom(const RtTpsProtoSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoSeries::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_seriestable()) {
    if (!this->seriestable().IsInitialized()) return false;
  }
  for (int i = 0; i < poilist_size(); i++) {
    if (!this->poilist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoSeries::Swap(RtTpsProtoSeries* other) {
  if (other != this) {
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(windowingcenter_, other->windowingcenter_);
    std::swap(windowingwidth_, other->windowingwidth_);
    std::swap(currentslice_, other->currentslice_);
    std::swap(slicecount_, other->slicecount_);
    std::swap(xdimension_, other->xdimension_);
    std::swap(ydimension_, other->ydimension_);
    std::swap(xpixelspacing_, other->xpixelspacing_);
    std::swap(ypixelspacing_, other->ypixelspacing_);
    std::swap(slicespacing_, other->slicespacing_);
    std::swap(modality_, other->modality_);
    std::swap(bitallocated_, other->bitallocated_);
    std::swap(seriestime_, other->seriestime_);
    std::swap(seriesdate_, other->seriesdate_);
    std::swap(seriesdescription_, other->seriesdescription_);
    std::swap(patientposition_, other->patientposition_);
    std::swap(imageslicebuffer_, other->imageslicebuffer_);
    std::swap(isqa_, other->isqa_);
    std::swap(seriesnumber_, other->seriesnumber_);
    std::swap(frameofreference_, other->frameofreference_);
    std::swap(manufacturermodelname_, other->manufacturermodelname_);
    std::swap(acquisitiondatetime_, other->acquisitiondatetime_);
    std::swap(courseuid_, other->courseuid_);
    std::swap(startx_, other->startx_);
    std::swap(starty_, other->starty_);
    std::swap(startz_, other->startz_);
    std::swap(sizex_, other->sizex_);
    std::swap(sizey_, other->sizey_);
    std::swap(sizez_, other->sizez_);
    imagetransformationlist_.Swap(&other->imagetransformationlist_);
    orientationx_.Swap(&other->orientationx_);
    orientationy_.Swap(&other->orientationy_);
    orientationz_.Swap(&other->orientationz_);
    std::swap(groupuid_, other->groupuid_);
    std::swap(slicethickness_, other->slicethickness_);
    std::swap(studyid_, other->studyid_);
    std::swap(studydescription_, other->studydescription_);
    std::swap(patientname_, other->patientname_);
    std::swap(patientid_, other->patientid_);
    std::swap(patientbirthdate_, other->patientbirthdate_);
    std::swap(patientage_, other->patientage_);
    std::swap(patientsex_, other->patientsex_);
    std::swap(institutionname_, other->institutionname_);
    std::swap(manufacturer_, other->manufacturer_);
    std::swap(ct2densityuid_, other->ct2densityuid_);
    std::swap(seriestable_, other->seriestable_);
    std::swap(patientuid_, other->patientuid_);
    std::swap(seriesname_, other->seriesname_);
    std::swap(isphantom_, other->isphantom_);
    poilist_.Swap(&other->poilist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoSeries_descriptor_;
  metadata.reflection = RtTpsProtoSeries_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedSeries::kSeriesListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedSeries::RtTpsProtoRepeatedSeries()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedSeries::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedSeries::RtTpsProtoRepeatedSeries(const RtTpsProtoRepeatedSeries& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSeries::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedSeries::~RtTpsProtoRepeatedSeries() {
  SharedDtor();
}

void RtTpsProtoRepeatedSeries::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedSeries::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedSeries::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedSeries_descriptor_;
}

const RtTpsProtoRepeatedSeries& RtTpsProtoRepeatedSeries::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedSeries* RtTpsProtoRepeatedSeries::default_instance_ = NULL;

RtTpsProtoRepeatedSeries* RtTpsProtoRepeatedSeries::New() const {
  return new RtTpsProtoRepeatedSeries;
}

void RtTpsProtoRepeatedSeries::Clear() {
  serieslist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedSeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoSeries seriesList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serieslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_seriesList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedSeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 1;
  for (int i = 0; i < this->serieslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serieslist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedSeries::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 1;
  for (int i = 0; i < this->serieslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serieslist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedSeries::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 1;
  total_size += 1 * this->serieslist_size();
  for (int i = 0; i < this->serieslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serieslist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedSeries::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedSeries* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedSeries*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedSeries::MergeFrom(const RtTpsProtoRepeatedSeries& from) {
  GOOGLE_CHECK_NE(&from, this);
  serieslist_.MergeFrom(from.serieslist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedSeries::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedSeries::CopyFrom(const RtTpsProtoRepeatedSeries& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedSeries::IsInitialized() const {
  
  for (int i = 0; i < serieslist_size(); i++) {
    if (!this->serieslist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedSeries::Swap(RtTpsProtoRepeatedSeries* other) {
  if (other != this) {
    serieslist_.Swap(&other->serieslist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedSeries::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedSeries_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedSeries_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
