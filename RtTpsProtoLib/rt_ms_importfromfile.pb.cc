// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_importfromfile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_ImportFromFileList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ImportFromFileList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_ImportFromFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ImportFromFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_CoodrinatePoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_CoodrinatePoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_ErrorResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ErrorResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_importfromfile.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_ImportFromFileList_descriptor_ = file->message_type(0);
  static const int RT_MS_ImportFromFileList_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, isnormaldepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, minaxisx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, maxaxisx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, minaxisy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, maxaxisy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, objectoperationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, importfromfilelist_),
  };
  RT_MS_ImportFromFileList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ImportFromFileList_descriptor_,
      RT_MS_ImportFromFileList::default_instance_,
      RT_MS_ImportFromFileList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ImportFromFileList));
  RT_MS_ImportFromFileInfo_descriptor_ = file->message_type(1);
  static const int RT_MS_ImportFromFileInfo_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, isdisplay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, fieldsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, offsety_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, modulation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, wedgeaccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, iswedgeaccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, pointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, calpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, normpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, normcalpointlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, fieldsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, fieldsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, errorresultlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, wedgeuid_),
  };
  RT_MS_ImportFromFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ImportFromFileInfo_descriptor_,
      RT_MS_ImportFromFileInfo::default_instance_,
      RT_MS_ImportFromFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ImportFromFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ImportFromFileInfo));
  RT_MS_CoodrinatePoint_descriptor_ = file->message_type(2);
  static const int RT_MS_CoodrinatePoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, dose_),
  };
  RT_MS_CoodrinatePoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_CoodrinatePoint_descriptor_,
      RT_MS_CoodrinatePoint::default_instance_,
      RT_MS_CoodrinatePoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CoodrinatePoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_CoodrinatePoint));
  RT_MS_ErrorResult_descriptor_ = file->message_type(3);
  static const int RT_MS_ErrorResult_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, errorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, averageerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, maxerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, errorlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, failurepoits_),
  };
  RT_MS_ErrorResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ErrorResult_descriptor_,
      RT_MS_ErrorResult::default_instance_,
      RT_MS_ErrorResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ErrorResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ErrorResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ImportFromFileList_descriptor_, &RT_MS_ImportFromFileList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ImportFromFileInfo_descriptor_, &RT_MS_ImportFromFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_CoodrinatePoint_descriptor_, &RT_MS_CoodrinatePoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ErrorResult_descriptor_, &RT_MS_ErrorResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto() {
  delete RT_MS_ImportFromFileList::default_instance_;
  delete RT_MS_ImportFromFileList_reflection_;
  delete RT_MS_ImportFromFileInfo::default_instance_;
  delete RT_MS_ImportFromFileInfo_reflection_;
  delete RT_MS_CoodrinatePoint::default_instance_;
  delete RT_MS_CoodrinatePoint_reflection_;
  delete RT_MS_ErrorResult::default_instance_;
  delete RT_MS_ErrorResult_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033rt_tps_importfromfile.proto\022\010ms.proto\""
    "\215\002\n\030RT_MS_ImportFromFileList\022\025\n\rcommissi"
    "onUID\030\001 \001(\t\022\r\n\005depth\030\002 \001(\002\022\025\n\risNormalDe"
    "pth\030\003 \001(\010\022\017\n\007algType\030\004 \001(\005\022\020\n\010minAxisX\030\005"
    " \001(\002\022\020\n\010maxAxisX\030\006 \001(\002\022\020\n\010minAxisY\030\007 \001(\002"
    "\022\020\n\010maxAxisY\030\010 \001(\002\022\033\n\023objectoperationtyp"
    "e\030\t \001(\t\022>\n\022ImportFromFileList\030\n \003(\0132\".ms"
    ".proto.RT_MS_ImportFromFileInfo\"\334\004\n\030RT_M"
    "S_ImportFromFileInfo\022\013\n\003uID\030\001 \001(\t\022\021\n\tisD"
    "isplay\030\002 \001(\010\022\021\n\tfieldSize\030\003 \001(\t\022\014\n\004type\030"
    "\004 \001(\005\022\017\n\007offsetX\030\005 \001(\002\022\017\n\007offsetY\030\006 \001(\002\022"
    "\r\n\005depth\030\007 \001(\002\022\022\n\nmodulation\030\010 \001(\005\022\022\n\nwe"
    "dgeACCID\030\t \001(\t\022\024\n\014isWedgeACCID\030\n \001(\010\022\016\n\006"
    "status\030\013 \001(\005\022\017\n\007algType\030\014 \001(\005\022\021\n\tparentu"
    "id\030\r \001(\t\0222\n\tpointList\030\016 \003(\0132\037.ms.proto.R"
    "T_MS_CoodrinatePoint\0225\n\014calpointList\030\017 \003"
    "(\0132\037.ms.proto.RT_MS_CoodrinatePoint\0226\n\rn"
    "ormpointList\030\020 \003(\0132\037.ms.proto.RT_MS_Cood"
    "rinatePoint\0229\n\020normcalpointList\030\021 \003(\0132\037."
    "ms.proto.RT_MS_CoodrinatePoint\022\022\n\nfields"
    "izex\030\022 \001(\002\022\022\n\nfieldsizey\030\023 \001(\002\0224\n\017errorR"
    "esultList\030\024 \003(\0132\033.ms.proto.RT_MS_ErrorRe"
    "sult\022\016\n\006degree\030\025 \001(\002\022\020\n\010wedgeUid\030\026 \001(\t\"F"
    "\n\025RT_MS_CoodrinatePoint\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030"
    "\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004dose\030\004 \001(\002\"x\n\021RT_MS_"
    "ErrorResult\022\021\n\terrorName\030\001 \001(\t\022\024\n\014averag"
    "eerror\030\002 \001(\002\022\020\n\010maxerror\030\003 \001(\002\022\022\n\nerrorl"
    "imit\030\004 \001(\002\022\024\n\014failurepoits\030\005 \001(\002", 1112);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_importfromfile.proto", &protobuf_RegisterTypes);
  RT_MS_ImportFromFileList::default_instance_ = new RT_MS_ImportFromFileList();
  RT_MS_ImportFromFileInfo::default_instance_ = new RT_MS_ImportFromFileInfo();
  RT_MS_CoodrinatePoint::default_instance_ = new RT_MS_CoodrinatePoint();
  RT_MS_ErrorResult::default_instance_ = new RT_MS_ErrorResult();
  RT_MS_ImportFromFileList::default_instance_->InitAsDefaultInstance();
  RT_MS_ImportFromFileInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_CoodrinatePoint::default_instance_->InitAsDefaultInstance();
  RT_MS_ErrorResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fimportfromfile_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fimportfromfile_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fimportfromfile_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ImportFromFileList::kCommissionUIDFieldNumber;
const int RT_MS_ImportFromFileList::kDepthFieldNumber;
const int RT_MS_ImportFromFileList::kIsNormalDepthFieldNumber;
const int RT_MS_ImportFromFileList::kAlgTypeFieldNumber;
const int RT_MS_ImportFromFileList::kMinAxisXFieldNumber;
const int RT_MS_ImportFromFileList::kMaxAxisXFieldNumber;
const int RT_MS_ImportFromFileList::kMinAxisYFieldNumber;
const int RT_MS_ImportFromFileList::kMaxAxisYFieldNumber;
const int RT_MS_ImportFromFileList::kObjectoperationtypeFieldNumber;
const int RT_MS_ImportFromFileList::kImportFromFileListFieldNumber;
#endif  // !_MSC_VER

RT_MS_ImportFromFileList::RT_MS_ImportFromFileList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ImportFromFileList::InitAsDefaultInstance() {
}

RT_MS_ImportFromFileList::RT_MS_ImportFromFileList(const RT_MS_ImportFromFileList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ImportFromFileList::SharedCtor() {
  _cached_size_ = 0;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depth_ = 0;
  isnormaldepth_ = false;
  algtype_ = 0;
  minaxisx_ = 0;
  maxaxisx_ = 0;
  minaxisy_ = 0;
  maxaxisy_ = 0;
  objectoperationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ImportFromFileList::~RT_MS_ImportFromFileList() {
  SharedDtor();
}

void RT_MS_ImportFromFileList::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (objectoperationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete objectoperationtype_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ImportFromFileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ImportFromFileList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ImportFromFileList_descriptor_;
}

const RT_MS_ImportFromFileList& RT_MS_ImportFromFileList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();  return *default_instance_;
}

RT_MS_ImportFromFileList* RT_MS_ImportFromFileList::default_instance_ = NULL;

RT_MS_ImportFromFileList* RT_MS_ImportFromFileList::New() const {
  return new RT_MS_ImportFromFileList;
}

void RT_MS_ImportFromFileList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    depth_ = 0;
    isnormaldepth_ = false;
    algtype_ = 0;
    minaxisx_ = 0;
    maxaxisx_ = 0;
    minaxisy_ = 0;
    maxaxisy_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_objectoperationtype()) {
      if (objectoperationtype_ != &::google::protobuf::internal::kEmptyString) {
        objectoperationtype_->clear();
      }
    }
  }
  importfromfilelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ImportFromFileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string commissionUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_depth;
        break;
      }
      
      // optional float depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isNormalDepth;
        break;
      }
      
      // optional bool isNormalDepth = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isNormalDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isnormaldepth_)));
          set_has_isnormaldepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_minAxisX;
        break;
      }
      
      // optional float minAxisX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minAxisX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minaxisx_)));
          set_has_minaxisx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxAxisX;
        break;
      }
      
      // optional float maxAxisX = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxAxisX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxaxisx_)));
          set_has_maxaxisx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_minAxisY;
        break;
      }
      
      // optional float minAxisY = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minAxisY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minaxisy_)));
          set_has_minaxisy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxAxisY;
        break;
      }
      
      // optional float maxAxisY = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxAxisY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxaxisy_)));
          set_has_maxaxisy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_objectoperationtype;
        break;
      }
      
      // optional string objectoperationtype = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_objectoperationtype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objectoperationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->objectoperationtype().data(), this->objectoperationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ImportFromFileList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ImportFromFileList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_importfromfilelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_ImportFromFileList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ImportFromFileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string commissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->commissionuid(), output);
  }
  
  // optional float depth = 2;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->depth(), output);
  }
  
  // optional bool isNormalDepth = 3;
  if (has_isnormaldepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isnormaldepth(), output);
  }
  
  // optional int32 algType = 4;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->algtype(), output);
  }
  
  // optional float minAxisX = 5;
  if (has_minaxisx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->minaxisx(), output);
  }
  
  // optional float maxAxisX = 6;
  if (has_maxaxisx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxaxisx(), output);
  }
  
  // optional float minAxisY = 7;
  if (has_minaxisy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->minaxisy(), output);
  }
  
  // optional float maxAxisY = 8;
  if (has_maxaxisy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxaxisy(), output);
  }
  
  // optional string objectoperationtype = 9;
  if (has_objectoperationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectoperationtype().data(), this->objectoperationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->objectoperationtype(), output);
  }
  
  // repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
  for (int i = 0; i < this->importfromfilelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->importfromfilelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ImportFromFileList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string commissionUID = 1;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->commissionuid(), target);
  }
  
  // optional float depth = 2;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->depth(), target);
  }
  
  // optional bool isNormalDepth = 3;
  if (has_isnormaldepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isnormaldepth(), target);
  }
  
  // optional int32 algType = 4;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->algtype(), target);
  }
  
  // optional float minAxisX = 5;
  if (has_minaxisx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->minaxisx(), target);
  }
  
  // optional float maxAxisX = 6;
  if (has_maxaxisx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxaxisx(), target);
  }
  
  // optional float minAxisY = 7;
  if (has_minaxisy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->minaxisy(), target);
  }
  
  // optional float maxAxisY = 8;
  if (has_maxaxisy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxaxisy(), target);
  }
  
  // optional string objectoperationtype = 9;
  if (has_objectoperationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->objectoperationtype().data(), this->objectoperationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->objectoperationtype(), target);
  }
  
  // repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
  for (int i = 0; i < this->importfromfilelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->importfromfilelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ImportFromFileList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string commissionUID = 1;
    if (has_commissionuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional float depth = 2;
    if (has_depth()) {
      total_size += 1 + 4;
    }
    
    // optional bool isNormalDepth = 3;
    if (has_isnormaldepth()) {
      total_size += 1 + 1;
    }
    
    // optional int32 algType = 4;
    if (has_algtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
    // optional float minAxisX = 5;
    if (has_minaxisx()) {
      total_size += 1 + 4;
    }
    
    // optional float maxAxisX = 6;
    if (has_maxaxisx()) {
      total_size += 1 + 4;
    }
    
    // optional float minAxisY = 7;
    if (has_minaxisy()) {
      total_size += 1 + 4;
    }
    
    // optional float maxAxisY = 8;
    if (has_maxaxisy()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string objectoperationtype = 9;
    if (has_objectoperationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objectoperationtype());
    }
    
  }
  // repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
  total_size += 1 * this->importfromfilelist_size();
  for (int i = 0; i < this->importfromfilelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->importfromfilelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ImportFromFileList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ImportFromFileList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ImportFromFileList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ImportFromFileList::MergeFrom(const RT_MS_ImportFromFileList& from) {
  GOOGLE_CHECK_NE(&from, this);
  importfromfilelist_.MergeFrom(from.importfromfilelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_isnormaldepth()) {
      set_isnormaldepth(from.isnormaldepth());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
    if (from.has_minaxisx()) {
      set_minaxisx(from.minaxisx());
    }
    if (from.has_maxaxisx()) {
      set_maxaxisx(from.maxaxisx());
    }
    if (from.has_minaxisy()) {
      set_minaxisy(from.minaxisy());
    }
    if (from.has_maxaxisy()) {
      set_maxaxisy(from.maxaxisy());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_objectoperationtype()) {
      set_objectoperationtype(from.objectoperationtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ImportFromFileList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ImportFromFileList::CopyFrom(const RT_MS_ImportFromFileList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ImportFromFileList::IsInitialized() const {
  
  return true;
}

void RT_MS_ImportFromFileList::Swap(RT_MS_ImportFromFileList* other) {
  if (other != this) {
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(depth_, other->depth_);
    std::swap(isnormaldepth_, other->isnormaldepth_);
    std::swap(algtype_, other->algtype_);
    std::swap(minaxisx_, other->minaxisx_);
    std::swap(maxaxisx_, other->maxaxisx_);
    std::swap(minaxisy_, other->minaxisy_);
    std::swap(maxaxisy_, other->maxaxisy_);
    std::swap(objectoperationtype_, other->objectoperationtype_);
    importfromfilelist_.Swap(&other->importfromfilelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ImportFromFileList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ImportFromFileList_descriptor_;
  metadata.reflection = RT_MS_ImportFromFileList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ImportFromFileInfo::kUIDFieldNumber;
const int RT_MS_ImportFromFileInfo::kIsDisplayFieldNumber;
const int RT_MS_ImportFromFileInfo::kFieldSizeFieldNumber;
const int RT_MS_ImportFromFileInfo::kTypeFieldNumber;
const int RT_MS_ImportFromFileInfo::kOffsetXFieldNumber;
const int RT_MS_ImportFromFileInfo::kOffsetYFieldNumber;
const int RT_MS_ImportFromFileInfo::kDepthFieldNumber;
const int RT_MS_ImportFromFileInfo::kModulationFieldNumber;
const int RT_MS_ImportFromFileInfo::kWedgeACCIDFieldNumber;
const int RT_MS_ImportFromFileInfo::kIsWedgeACCIDFieldNumber;
const int RT_MS_ImportFromFileInfo::kStatusFieldNumber;
const int RT_MS_ImportFromFileInfo::kAlgTypeFieldNumber;
const int RT_MS_ImportFromFileInfo::kParentuidFieldNumber;
const int RT_MS_ImportFromFileInfo::kPointListFieldNumber;
const int RT_MS_ImportFromFileInfo::kCalpointListFieldNumber;
const int RT_MS_ImportFromFileInfo::kNormpointListFieldNumber;
const int RT_MS_ImportFromFileInfo::kNormcalpointListFieldNumber;
const int RT_MS_ImportFromFileInfo::kFieldsizexFieldNumber;
const int RT_MS_ImportFromFileInfo::kFieldsizeyFieldNumber;
const int RT_MS_ImportFromFileInfo::kErrorResultListFieldNumber;
const int RT_MS_ImportFromFileInfo::kDegreeFieldNumber;
const int RT_MS_ImportFromFileInfo::kWedgeUidFieldNumber;
#endif  // !_MSC_VER

RT_MS_ImportFromFileInfo::RT_MS_ImportFromFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ImportFromFileInfo::InitAsDefaultInstance() {
}

RT_MS_ImportFromFileInfo::RT_MS_ImportFromFileInfo(const RT_MS_ImportFromFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ImportFromFileInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdisplay_ = false;
  fieldsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  offsetx_ = 0;
  offsety_ = 0;
  depth_ = 0;
  modulation_ = 0;
  wedgeaccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iswedgeaccid_ = false;
  status_ = 0;
  algtype_ = 0;
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fieldsizex_ = 0;
  fieldsizey_ = 0;
  degree_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ImportFromFileInfo::~RT_MS_ImportFromFileInfo() {
  SharedDtor();
}

void RT_MS_ImportFromFileInfo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (fieldsize_ != &::google::protobuf::internal::kEmptyString) {
    delete fieldsize_;
  }
  if (wedgeaccid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeaccid_;
  }
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ImportFromFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ImportFromFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ImportFromFileInfo_descriptor_;
}

const RT_MS_ImportFromFileInfo& RT_MS_ImportFromFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();  return *default_instance_;
}

RT_MS_ImportFromFileInfo* RT_MS_ImportFromFileInfo::default_instance_ = NULL;

RT_MS_ImportFromFileInfo* RT_MS_ImportFromFileInfo::New() const {
  return new RT_MS_ImportFromFileInfo;
}

void RT_MS_ImportFromFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    isdisplay_ = false;
    if (has_fieldsize()) {
      if (fieldsize_ != &::google::protobuf::internal::kEmptyString) {
        fieldsize_->clear();
      }
    }
    type_ = 0;
    offsetx_ = 0;
    offsety_ = 0;
    depth_ = 0;
    modulation_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_wedgeaccid()) {
      if (wedgeaccid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeaccid_->clear();
      }
    }
    iswedgeaccid_ = false;
    status_ = 0;
    algtype_ = 0;
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    fieldsizex_ = 0;
    fieldsizey_ = 0;
    degree_ = 0;
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
  }
  pointlist_.Clear();
  calpointlist_.Clear();
  normpointlist_.Clear();
  normcalpointlist_.Clear();
  errorresultlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ImportFromFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isDisplay;
        break;
      }
      
      // optional bool isDisplay = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDisplay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdisplay_)));
          set_has_isdisplay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fieldSize;
        break;
      }
      
      // optional string fieldSize = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldSize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fieldsize()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fieldsize().data(), this->fieldsize().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }
      
      // optional int32 type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_offsetX;
        break;
      }
      
      // optional float offsetX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_offsetY;
        break;
      }
      
      // optional float offsetY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offsetY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offsety_)));
          set_has_offsety();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_depth;
        break;
      }
      
      // optional float depth = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_modulation;
        break;
      }
      
      // optional int32 modulation = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modulation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &modulation_)));
          set_has_modulation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_wedgeACCID;
        break;
      }
      
      // optional string wedgeACCID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeACCID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeaccid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeaccid().data(), this->wedgeaccid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isWedgeACCID;
        break;
      }
      
      // optional bool isWedgeACCID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isWedgeACCID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswedgeaccid_)));
          set_has_iswedgeaccid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_status;
        break;
      }
      
      // optional int32 status = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_parentuid;
        break;
      }
      
      // optional string parentuid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pointList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pointList;
        if (input->ExpectTag(122)) goto parse_calpointList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_calpointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_calpointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_calpointList;
        if (input->ExpectTag(130)) goto parse_normpointList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normpointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normpointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_normpointList;
        if (input->ExpectTag(138)) goto parse_normcalpointList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normcalpointList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normcalpointlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_normcalpointList;
        if (input->ExpectTag(149)) goto parse_fieldsizex;
        break;
      }
      
      // optional float fieldsizex = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fieldsizex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldsizex_)));
          set_has_fieldsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_fieldsizey;
        break;
      }
      
      // optional float fieldsizey = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fieldsizey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldsizey_)));
          set_has_fieldsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_errorResultList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_errorResultList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_errorresultlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_errorResultList;
        if (input->ExpectTag(173)) goto parse_degree;
        break;
      }
      
      // optional float degree = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_wedgeUid;
        break;
      }
      
      // optional string wedgeUid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ImportFromFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional bool isDisplay = 2;
  if (has_isdisplay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isdisplay(), output);
  }
  
  // optional string fieldSize = 3;
  if (has_fieldsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fieldsize().data(), this->fieldsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fieldsize(), output);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }
  
  // optional float offsetX = 5;
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offsetx(), output);
  }
  
  // optional float offsetY = 6;
  if (has_offsety()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->offsety(), output);
  }
  
  // optional float depth = 7;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->depth(), output);
  }
  
  // optional int32 modulation = 8;
  if (has_modulation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->modulation(), output);
  }
  
  // optional string wedgeACCID = 9;
  if (has_wedgeaccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeaccid().data(), this->wedgeaccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->wedgeaccid(), output);
  }
  
  // optional bool isWedgeACCID = 10;
  if (has_iswedgeaccid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->iswedgeaccid(), output);
  }
  
  // optional int32 status = 11;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->status(), output);
  }
  
  // optional int32 algType = 12;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->algtype(), output);
  }
  
  // optional string parentuid = 13;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->parentuid(), output);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
  for (int i = 0; i < this->pointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pointlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
  for (int i = 0; i < this->calpointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->calpointlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
  for (int i = 0; i < this->normpointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->normpointlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
  for (int i = 0; i < this->normcalpointlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->normcalpointlist(i), output);
  }
  
  // optional float fieldsizex = 18;
  if (has_fieldsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fieldsizex(), output);
  }
  
  // optional float fieldsizey = 19;
  if (has_fieldsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->fieldsizey(), output);
  }
  
  // repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
  for (int i = 0; i < this->errorresultlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->errorresultlist(i), output);
  }
  
  // optional float degree = 21;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->degree(), output);
  }
  
  // optional string wedgeUid = 22;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->wedgeuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ImportFromFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uID = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional bool isDisplay = 2;
  if (has_isdisplay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isdisplay(), target);
  }
  
  // optional string fieldSize = 3;
  if (has_fieldsize()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fieldsize().data(), this->fieldsize().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fieldsize(), target);
  }
  
  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }
  
  // optional float offsetX = 5;
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offsetx(), target);
  }
  
  // optional float offsetY = 6;
  if (has_offsety()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->offsety(), target);
  }
  
  // optional float depth = 7;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->depth(), target);
  }
  
  // optional int32 modulation = 8;
  if (has_modulation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->modulation(), target);
  }
  
  // optional string wedgeACCID = 9;
  if (has_wedgeaccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeaccid().data(), this->wedgeaccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->wedgeaccid(), target);
  }
  
  // optional bool isWedgeACCID = 10;
  if (has_iswedgeaccid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->iswedgeaccid(), target);
  }
  
  // optional int32 status = 11;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->status(), target);
  }
  
  // optional int32 algType = 12;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->algtype(), target);
  }
  
  // optional string parentuid = 13;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->parentuid(), target);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
  for (int i = 0; i < this->pointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pointlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
  for (int i = 0; i < this->calpointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->calpointlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
  for (int i = 0; i < this->normpointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->normpointlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
  for (int i = 0; i < this->normcalpointlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->normcalpointlist(i), target);
  }
  
  // optional float fieldsizex = 18;
  if (has_fieldsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->fieldsizex(), target);
  }
  
  // optional float fieldsizey = 19;
  if (has_fieldsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->fieldsizey(), target);
  }
  
  // repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
  for (int i = 0; i < this->errorresultlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->errorresultlist(i), target);
  }
  
  // optional float degree = 21;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->degree(), target);
  }
  
  // optional string wedgeUid = 22;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->wedgeuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ImportFromFileInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uID = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional bool isDisplay = 2;
    if (has_isdisplay()) {
      total_size += 1 + 1;
    }
    
    // optional string fieldSize = 3;
    if (has_fieldsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fieldsize());
    }
    
    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // optional float offsetX = 5;
    if (has_offsetx()) {
      total_size += 1 + 4;
    }
    
    // optional float offsetY = 6;
    if (has_offsety()) {
      total_size += 1 + 4;
    }
    
    // optional float depth = 7;
    if (has_depth()) {
      total_size += 1 + 4;
    }
    
    // optional int32 modulation = 8;
    if (has_modulation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->modulation());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string wedgeACCID = 9;
    if (has_wedgeaccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeaccid());
    }
    
    // optional bool isWedgeACCID = 10;
    if (has_iswedgeaccid()) {
      total_size += 1 + 1;
    }
    
    // optional int32 status = 11;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 algType = 12;
    if (has_algtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
    // optional string parentuid = 13;
    if (has_parentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional float fieldsizex = 18;
    if (has_fieldsizex()) {
      total_size += 2 + 4;
    }
    
    // optional float fieldsizey = 19;
    if (has_fieldsizey()) {
      total_size += 2 + 4;
    }
    
    // optional float degree = 21;
    if (has_degree()) {
      total_size += 2 + 4;
    }
    
    // optional string wedgeUid = 22;
    if (has_wedgeuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
  }
  // repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
  total_size += 1 * this->pointlist_size();
  for (int i = 0; i < this->pointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointlist(i));
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
  total_size += 1 * this->calpointlist_size();
  for (int i = 0; i < this->calpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->calpointlist(i));
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
  total_size += 2 * this->normpointlist_size();
  for (int i = 0; i < this->normpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normpointlist(i));
  }
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
  total_size += 2 * this->normcalpointlist_size();
  for (int i = 0; i < this->normcalpointlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normcalpointlist(i));
  }
  
  // repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
  total_size += 2 * this->errorresultlist_size();
  for (int i = 0; i < this->errorresultlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->errorresultlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ImportFromFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ImportFromFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ImportFromFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ImportFromFileInfo::MergeFrom(const RT_MS_ImportFromFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointlist_.MergeFrom(from.pointlist_);
  calpointlist_.MergeFrom(from.calpointlist_);
  normpointlist_.MergeFrom(from.normpointlist_);
  normcalpointlist_.MergeFrom(from.normcalpointlist_);
  errorresultlist_.MergeFrom(from.errorresultlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_isdisplay()) {
      set_isdisplay(from.isdisplay());
    }
    if (from.has_fieldsize()) {
      set_fieldsize(from.fieldsize());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_offsety()) {
      set_offsety(from.offsety());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_modulation()) {
      set_modulation(from.modulation());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_wedgeaccid()) {
      set_wedgeaccid(from.wedgeaccid());
    }
    if (from.has_iswedgeaccid()) {
      set_iswedgeaccid(from.iswedgeaccid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_fieldsizex()) {
      set_fieldsizex(from.fieldsizex());
    }
    if (from.has_fieldsizey()) {
      set_fieldsizey(from.fieldsizey());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ImportFromFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ImportFromFileInfo::CopyFrom(const RT_MS_ImportFromFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ImportFromFileInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_ImportFromFileInfo::Swap(RT_MS_ImportFromFileInfo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(isdisplay_, other->isdisplay_);
    std::swap(fieldsize_, other->fieldsize_);
    std::swap(type_, other->type_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(offsety_, other->offsety_);
    std::swap(depth_, other->depth_);
    std::swap(modulation_, other->modulation_);
    std::swap(wedgeaccid_, other->wedgeaccid_);
    std::swap(iswedgeaccid_, other->iswedgeaccid_);
    std::swap(status_, other->status_);
    std::swap(algtype_, other->algtype_);
    std::swap(parentuid_, other->parentuid_);
    pointlist_.Swap(&other->pointlist_);
    calpointlist_.Swap(&other->calpointlist_);
    normpointlist_.Swap(&other->normpointlist_);
    normcalpointlist_.Swap(&other->normcalpointlist_);
    std::swap(fieldsizex_, other->fieldsizex_);
    std::swap(fieldsizey_, other->fieldsizey_);
    errorresultlist_.Swap(&other->errorresultlist_);
    std::swap(degree_, other->degree_);
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ImportFromFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ImportFromFileInfo_descriptor_;
  metadata.reflection = RT_MS_ImportFromFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_CoodrinatePoint::kXFieldNumber;
const int RT_MS_CoodrinatePoint::kYFieldNumber;
const int RT_MS_CoodrinatePoint::kZFieldNumber;
const int RT_MS_CoodrinatePoint::kDoseFieldNumber;
#endif  // !_MSC_VER

RT_MS_CoodrinatePoint::RT_MS_CoodrinatePoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_CoodrinatePoint::InitAsDefaultInstance() {
}

RT_MS_CoodrinatePoint::RT_MS_CoodrinatePoint(const RT_MS_CoodrinatePoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_CoodrinatePoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  dose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_CoodrinatePoint::~RT_MS_CoodrinatePoint() {
  SharedDtor();
}

void RT_MS_CoodrinatePoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_CoodrinatePoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_CoodrinatePoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_CoodrinatePoint_descriptor_;
}

const RT_MS_CoodrinatePoint& RT_MS_CoodrinatePoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();  return *default_instance_;
}

RT_MS_CoodrinatePoint* RT_MS_CoodrinatePoint::default_instance_ = NULL;

RT_MS_CoodrinatePoint* RT_MS_CoodrinatePoint::New() const {
  return new RT_MS_CoodrinatePoint;
}

void RT_MS_CoodrinatePoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    dose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_CoodrinatePoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // optional float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // optional float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dose;
        break;
      }
      
      // optional float dose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_CoodrinatePoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  // optional float dose = 4;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_CoodrinatePoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  // optional float dose = 4;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_CoodrinatePoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
    // optional float dose = 4;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_CoodrinatePoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_CoodrinatePoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_CoodrinatePoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_CoodrinatePoint::MergeFrom(const RT_MS_CoodrinatePoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_CoodrinatePoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_CoodrinatePoint::CopyFrom(const RT_MS_CoodrinatePoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_CoodrinatePoint::IsInitialized() const {
  
  return true;
}

void RT_MS_CoodrinatePoint::Swap(RT_MS_CoodrinatePoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(dose_, other->dose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_CoodrinatePoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_CoodrinatePoint_descriptor_;
  metadata.reflection = RT_MS_CoodrinatePoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ErrorResult::kErrorNameFieldNumber;
const int RT_MS_ErrorResult::kAverageerrorFieldNumber;
const int RT_MS_ErrorResult::kMaxerrorFieldNumber;
const int RT_MS_ErrorResult::kErrorlimitFieldNumber;
const int RT_MS_ErrorResult::kFailurepoitsFieldNumber;
#endif  // !_MSC_VER

RT_MS_ErrorResult::RT_MS_ErrorResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ErrorResult::InitAsDefaultInstance() {
}

RT_MS_ErrorResult::RT_MS_ErrorResult(const RT_MS_ErrorResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ErrorResult::SharedCtor() {
  _cached_size_ = 0;
  errorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  averageerror_ = 0;
  maxerror_ = 0;
  errorlimit_ = 0;
  failurepoits_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ErrorResult::~RT_MS_ErrorResult() {
  SharedDtor();
}

void RT_MS_ErrorResult::SharedDtor() {
  if (errorname_ != &::google::protobuf::internal::kEmptyString) {
    delete errorname_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ErrorResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ErrorResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ErrorResult_descriptor_;
}

const RT_MS_ErrorResult& RT_MS_ErrorResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();  return *default_instance_;
}

RT_MS_ErrorResult* RT_MS_ErrorResult::default_instance_ = NULL;

RT_MS_ErrorResult* RT_MS_ErrorResult::New() const {
  return new RT_MS_ErrorResult;
}

void RT_MS_ErrorResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_errorname()) {
      if (errorname_ != &::google::protobuf::internal::kEmptyString) {
        errorname_->clear();
      }
    }
    averageerror_ = 0;
    maxerror_ = 0;
    errorlimit_ = 0;
    failurepoits_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ErrorResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string errorName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errorname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->errorname().data(), this->errorname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_averageerror;
        break;
      }
      
      // optional float averageerror = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averageerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averageerror_)));
          set_has_averageerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxerror;
        break;
      }
      
      // optional float maxerror = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxerror:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxerror_)));
          set_has_maxerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_errorlimit;
        break;
      }
      
      // optional float errorlimit = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_errorlimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &errorlimit_)));
          set_has_errorlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_failurepoits;
        break;
      }
      
      // optional float failurepoits = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_failurepoits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &failurepoits_)));
          set_has_failurepoits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ErrorResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string errorName = 1;
  if (has_errorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorname().data(), this->errorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->errorname(), output);
  }
  
  // optional float averageerror = 2;
  if (has_averageerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->averageerror(), output);
  }
  
  // optional float maxerror = 3;
  if (has_maxerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxerror(), output);
  }
  
  // optional float errorlimit = 4;
  if (has_errorlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->errorlimit(), output);
  }
  
  // optional float failurepoits = 5;
  if (has_failurepoits()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->failurepoits(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ErrorResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string errorName = 1;
  if (has_errorname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->errorname().data(), this->errorname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->errorname(), target);
  }
  
  // optional float averageerror = 2;
  if (has_averageerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->averageerror(), target);
  }
  
  // optional float maxerror = 3;
  if (has_maxerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxerror(), target);
  }
  
  // optional float errorlimit = 4;
  if (has_errorlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->errorlimit(), target);
  }
  
  // optional float failurepoits = 5;
  if (has_failurepoits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->failurepoits(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ErrorResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string errorName = 1;
    if (has_errorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->errorname());
    }
    
    // optional float averageerror = 2;
    if (has_averageerror()) {
      total_size += 1 + 4;
    }
    
    // optional float maxerror = 3;
    if (has_maxerror()) {
      total_size += 1 + 4;
    }
    
    // optional float errorlimit = 4;
    if (has_errorlimit()) {
      total_size += 1 + 4;
    }
    
    // optional float failurepoits = 5;
    if (has_failurepoits()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ErrorResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ErrorResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ErrorResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ErrorResult::MergeFrom(const RT_MS_ErrorResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_errorname()) {
      set_errorname(from.errorname());
    }
    if (from.has_averageerror()) {
      set_averageerror(from.averageerror());
    }
    if (from.has_maxerror()) {
      set_maxerror(from.maxerror());
    }
    if (from.has_errorlimit()) {
      set_errorlimit(from.errorlimit());
    }
    if (from.has_failurepoits()) {
      set_failurepoits(from.failurepoits());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ErrorResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ErrorResult::CopyFrom(const RT_MS_ErrorResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ErrorResult::IsInitialized() const {
  
  return true;
}

void RT_MS_ErrorResult::Swap(RT_MS_ErrorResult* other) {
  if (other != this) {
    std::swap(errorname_, other->errorname_);
    std::swap(averageerror_, other->averageerror_);
    std::swap(maxerror_, other->maxerror_);
    std::swap(errorlimit_, other->errorlimit_);
    std::swap(failurepoits_, other->failurepoits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ErrorResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ErrorResult_descriptor_;
  metadata.reflection = RT_MS_ErrorResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
