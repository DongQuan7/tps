// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_admin_tree_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoAdminTreeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoAdminTreeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_admin_tree_data.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoAdminTreeData_descriptor_ = file->message_type(0);
  static const int RtTpsProtoAdminTreeData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, patientlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, serieslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, voilist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, poilist_),
  };
  RtTpsProtoAdminTreeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoAdminTreeData_descriptor_,
      RtTpsProtoAdminTreeData::default_instance_,
      RtTpsProtoAdminTreeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAdminTreeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoAdminTreeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoAdminTreeData_descriptor_, &RtTpsProtoAdminTreeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto() {
  delete RtTpsProtoAdminTreeData::default_instance_;
  delete RtTpsProtoAdminTreeData_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fseries_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fpatient_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"rt_tps_proto_admin_tree_data.proto\022\ttp"
    "s.proto\032\031rt_tps_proto_series.proto\032\026rt_t"
    "ps_proto_voi.proto\032\026rt_tps_proto_poi.pro"
    "to\032\032rt_tps_proto_patient.proto\"\323\001\n\027RtTps"
    "ProtoAdminTreeData\0221\n\013patientList\030\001 \003(\0132"
    "\034.tps.proto.RtTpsProtoPatient\022/\n\nseriesL"
    "ist\030\002 \003(\0132\033.tps.proto.RtTpsProtoSeries\022)"
    "\n\007voiList\030\003 \003(\0132\030.tps.proto.RtTpsProtoVo"
    "i\022)\n\007poiList\030\004 \003(\0132\030.tps.proto.RtTpsProt"
    "oPoi", 364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_admin_tree_data.proto", &protobuf_RegisterTypes);
  RtTpsProtoAdminTreeData::default_instance_ = new RtTpsProtoAdminTreeData();
  RtTpsProtoAdminTreeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoAdminTreeData::kPatientListFieldNumber;
const int RtTpsProtoAdminTreeData::kSeriesListFieldNumber;
const int RtTpsProtoAdminTreeData::kVoiListFieldNumber;
const int RtTpsProtoAdminTreeData::kPoiListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoAdminTreeData::RtTpsProtoAdminTreeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoAdminTreeData::InitAsDefaultInstance() {
}

RtTpsProtoAdminTreeData::RtTpsProtoAdminTreeData(const RtTpsProtoAdminTreeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoAdminTreeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoAdminTreeData::~RtTpsProtoAdminTreeData() {
  SharedDtor();
}

void RtTpsProtoAdminTreeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoAdminTreeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoAdminTreeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoAdminTreeData_descriptor_;
}

const RtTpsProtoAdminTreeData& RtTpsProtoAdminTreeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fadmin_5ftree_5fdata_2eproto();  return *default_instance_;
}

RtTpsProtoAdminTreeData* RtTpsProtoAdminTreeData::default_instance_ = NULL;

RtTpsProtoAdminTreeData* RtTpsProtoAdminTreeData::New() const {
  return new RtTpsProtoAdminTreeData;
}

void RtTpsProtoAdminTreeData::Clear() {
  patientlist_.Clear();
  serieslist_.Clear();
  voilist_.Clear();
  poilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoAdminTreeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoPatient patientList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patientlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_patientList;
        if (input->ExpectTag(18)) goto parse_seriesList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoSeries seriesList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serieslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesList;
        if (input->ExpectTag(26)) goto parse_voiList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoVoi voiList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_voilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voiList;
        if (input->ExpectTag(34)) goto parse_poiList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoPoi poiList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_poiList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoAdminTreeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoPatient patientList = 1;
  for (int i = 0; i < this->patientlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->patientlist(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 2;
  for (int i = 0; i < this->serieslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->serieslist(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoVoi voiList = 3;
  for (int i = 0; i < this->voilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->voilist(i), output);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 4;
  for (int i = 0; i < this->poilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->poilist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoAdminTreeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoPatient patientList = 1;
  for (int i = 0; i < this->patientlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->patientlist(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 2;
  for (int i = 0; i < this->serieslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->serieslist(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoVoi voiList = 3;
  for (int i = 0; i < this->voilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->voilist(i), target);
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 4;
  for (int i = 0; i < this->poilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->poilist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoAdminTreeData::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoPatient patientList = 1;
  total_size += 1 * this->patientlist_size();
  for (int i = 0; i < this->patientlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patientlist(i));
  }
  
  // repeated .tps.proto.RtTpsProtoSeries seriesList = 2;
  total_size += 1 * this->serieslist_size();
  for (int i = 0; i < this->serieslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serieslist(i));
  }
  
  // repeated .tps.proto.RtTpsProtoVoi voiList = 3;
  total_size += 1 * this->voilist_size();
  for (int i = 0; i < this->voilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->voilist(i));
  }
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 4;
  total_size += 1 * this->poilist_size();
  for (int i = 0; i < this->poilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poilist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoAdminTreeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoAdminTreeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoAdminTreeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoAdminTreeData::MergeFrom(const RtTpsProtoAdminTreeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  patientlist_.MergeFrom(from.patientlist_);
  serieslist_.MergeFrom(from.serieslist_);
  voilist_.MergeFrom(from.voilist_);
  poilist_.MergeFrom(from.poilist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoAdminTreeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoAdminTreeData::CopyFrom(const RtTpsProtoAdminTreeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoAdminTreeData::IsInitialized() const {
  
  for (int i = 0; i < patientlist_size(); i++) {
    if (!this->patientlist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < serieslist_size(); i++) {
    if (!this->serieslist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < voilist_size(); i++) {
    if (!this->voilist(i).IsInitialized()) return false;
  }
  for (int i = 0; i < poilist_size(); i++) {
    if (!this->poilist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoAdminTreeData::Swap(RtTpsProtoAdminTreeData* other) {
  if (other != this) {
    patientlist_.Swap(&other->patientlist_);
    serieslist_.Swap(&other->serieslist_);
    voilist_.Swap(&other->voilist_);
    poilist_.Swap(&other->poilist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoAdminTreeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoAdminTreeData_descriptor_;
  metadata.reflection = RtTpsProtoAdminTreeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
