// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_beam_operate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoBeamOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoBeamOperate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedBeamOperate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedBeamOperate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_beam_operate.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoBeamOperate_descriptor_ = file->message_type(0);
  static const int RtTpsProtoBeamOperate_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, beam_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, normal_group_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, beam_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, beam_operate_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, beam_delete_reason_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, beam_modify_typelist_),
  };
  RtTpsProtoBeamOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoBeamOperate_descriptor_,
      RtTpsProtoBeamOperate::default_instance_,
      RtTpsProtoBeamOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBeamOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoBeamOperate));
  RtTpsProtoRepeatedBeamOperate_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedBeamOperate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeamOperate, beamoperatelist_),
  };
  RtTpsProtoRepeatedBeamOperate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedBeamOperate_descriptor_,
      RtTpsProtoRepeatedBeamOperate::default_instance_,
      RtTpsProtoRepeatedBeamOperate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeamOperate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedBeamOperate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedBeamOperate));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoBeamOperate_descriptor_, &RtTpsProtoBeamOperate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedBeamOperate_descriptor_, &RtTpsProtoRepeatedBeamOperate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5foperate_2eproto() {
  delete RtTpsProtoBeamOperate::default_instance_;
  delete RtTpsProtoBeamOperate_reflection_;
  delete RtTpsProtoRepeatedBeamOperate::default_instance_;
  delete RtTpsProtoRepeatedBeamOperate_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rt_tps_proto_beam_operate.proto\022\ttps.p"
    "roto\"\260\001\n\025RtTpsProtoBeamOperate\022\020\n\010beam_u"
    "id\030\001 \002(\t\022\030\n\020normal_group_uid\030\002 \001(\t\022\021\n\tbe"
    "am_name\030\003 \001(\t\022\031\n\021beam_operate_type\030\004 \001(\005"
    "\022\037\n\027beam_delete_reason_type\030\005 \001(\005\022\034\n\024bea"
    "m_modify_typelist\030\006 \003(\005\"Z\n\035RtTpsProtoRep"
    "eatedBeamOperate\0229\n\017beamOperateList\030\001 \003("
    "\0132 .tps.proto.RtTpsProtoBeamOperate", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_beam_operate.proto", &protobuf_RegisterTypes);
  RtTpsProtoBeamOperate::default_instance_ = new RtTpsProtoBeamOperate();
  RtTpsProtoRepeatedBeamOperate::default_instance_ = new RtTpsProtoRepeatedBeamOperate();
  RtTpsProtoBeamOperate::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedBeamOperate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5foperate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_5foperate_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fbeam_5foperate_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fbeam_5foperate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoBeamOperate::kBeamUidFieldNumber;
const int RtTpsProtoBeamOperate::kNormalGroupUidFieldNumber;
const int RtTpsProtoBeamOperate::kBeamNameFieldNumber;
const int RtTpsProtoBeamOperate::kBeamOperateTypeFieldNumber;
const int RtTpsProtoBeamOperate::kBeamDeleteReasonTypeFieldNumber;
const int RtTpsProtoBeamOperate::kBeamModifyTypelistFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoBeamOperate::RtTpsProtoBeamOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoBeamOperate::InitAsDefaultInstance() {
}

RtTpsProtoBeamOperate::RtTpsProtoBeamOperate(const RtTpsProtoBeamOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoBeamOperate::SharedCtor() {
  _cached_size_ = 0;
  beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normal_group_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beam_operate_type_ = 0;
  beam_delete_reason_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoBeamOperate::~RtTpsProtoBeamOperate() {
  SharedDtor();
}

void RtTpsProtoBeamOperate::SharedDtor() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_uid_;
  }
  if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete normal_group_uid_;
  }
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    delete beam_name_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoBeamOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoBeamOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoBeamOperate_descriptor_;
}

const RtTpsProtoBeamOperate& RtTpsProtoBeamOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();  return *default_instance_;
}

RtTpsProtoBeamOperate* RtTpsProtoBeamOperate::default_instance_ = NULL;

RtTpsProtoBeamOperate* RtTpsProtoBeamOperate::New() const {
  return new RtTpsProtoBeamOperate;
}

void RtTpsProtoBeamOperate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beam_uid()) {
      if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
        beam_uid_->clear();
      }
    }
    if (has_normal_group_uid()) {
      if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
        normal_group_uid_->clear();
      }
    }
    if (has_beam_name()) {
      if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
        beam_name_->clear();
      }
    }
    beam_operate_type_ = 0;
    beam_delete_reason_type_ = 0;
  }
  beam_modify_typelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoBeamOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string beam_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_uid().data(), this->beam_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normal_group_uid;
        break;
      }
      
      // optional string normal_group_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normal_group_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normal_group_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normal_group_uid().data(), this->normal_group_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_beam_name;
        break;
      }
      
      // optional string beam_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beam_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beam_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beam_name().data(), this->beam_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_beam_operate_type;
        break;
      }
      
      // optional int32 beam_operate_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beam_operate_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beam_operate_type_)));
          set_has_beam_operate_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_beam_delete_reason_type;
        break;
      }
      
      // optional int32 beam_delete_reason_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beam_delete_reason_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beam_delete_reason_type_)));
          set_has_beam_delete_reason_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beam_modify_typelist;
        break;
      }
      
      // repeated int32 beam_modify_typelist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beam_modify_typelist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_beam_modify_typelist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_beam_modify_typelist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_beam_modify_typelist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoBeamOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->beam_uid(), output);
  }
  
  // optional string normal_group_uid = 2;
  if (has_normal_group_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_group_uid().data(), this->normal_group_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->normal_group_uid(), output);
  }
  
  // optional string beam_name = 3;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->beam_name(), output);
  }
  
  // optional int32 beam_operate_type = 4;
  if (has_beam_operate_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->beam_operate_type(), output);
  }
  
  // optional int32 beam_delete_reason_type = 5;
  if (has_beam_delete_reason_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beam_delete_reason_type(), output);
  }
  
  // repeated int32 beam_modify_typelist = 6;
  for (int i = 0; i < this->beam_modify_typelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->beam_modify_typelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoBeamOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string beam_uid = 1;
  if (has_beam_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_uid().data(), this->beam_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beam_uid(), target);
  }
  
  // optional string normal_group_uid = 2;
  if (has_normal_group_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normal_group_uid().data(), this->normal_group_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normal_group_uid(), target);
  }
  
  // optional string beam_name = 3;
  if (has_beam_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beam_name().data(), this->beam_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->beam_name(), target);
  }
  
  // optional int32 beam_operate_type = 4;
  if (has_beam_operate_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->beam_operate_type(), target);
  }
  
  // optional int32 beam_delete_reason_type = 5;
  if (has_beam_delete_reason_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beam_delete_reason_type(), target);
  }
  
  // repeated int32 beam_modify_typelist = 6;
  for (int i = 0; i < this->beam_modify_typelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->beam_modify_typelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoBeamOperate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string beam_uid = 1;
    if (has_beam_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_uid());
    }
    
    // optional string normal_group_uid = 2;
    if (has_normal_group_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normal_group_uid());
    }
    
    // optional string beam_name = 3;
    if (has_beam_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beam_name());
    }
    
    // optional int32 beam_operate_type = 4;
    if (has_beam_operate_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beam_operate_type());
    }
    
    // optional int32 beam_delete_reason_type = 5;
    if (has_beam_delete_reason_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beam_delete_reason_type());
    }
    
  }
  // repeated int32 beam_modify_typelist = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->beam_modify_typelist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->beam_modify_typelist(i));
    }
    total_size += 1 * this->beam_modify_typelist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoBeamOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoBeamOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoBeamOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoBeamOperate::MergeFrom(const RtTpsProtoBeamOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  beam_modify_typelist_.MergeFrom(from.beam_modify_typelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beam_uid()) {
      set_beam_uid(from.beam_uid());
    }
    if (from.has_normal_group_uid()) {
      set_normal_group_uid(from.normal_group_uid());
    }
    if (from.has_beam_name()) {
      set_beam_name(from.beam_name());
    }
    if (from.has_beam_operate_type()) {
      set_beam_operate_type(from.beam_operate_type());
    }
    if (from.has_beam_delete_reason_type()) {
      set_beam_delete_reason_type(from.beam_delete_reason_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoBeamOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoBeamOperate::CopyFrom(const RtTpsProtoBeamOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoBeamOperate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoBeamOperate::Swap(RtTpsProtoBeamOperate* other) {
  if (other != this) {
    std::swap(beam_uid_, other->beam_uid_);
    std::swap(normal_group_uid_, other->normal_group_uid_);
    std::swap(beam_name_, other->beam_name_);
    std::swap(beam_operate_type_, other->beam_operate_type_);
    std::swap(beam_delete_reason_type_, other->beam_delete_reason_type_);
    beam_modify_typelist_.Swap(&other->beam_modify_typelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoBeamOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoBeamOperate_descriptor_;
  metadata.reflection = RtTpsProtoBeamOperate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedBeamOperate::kBeamOperateListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedBeamOperate::RtTpsProtoRepeatedBeamOperate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedBeamOperate::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedBeamOperate::RtTpsProtoRepeatedBeamOperate(const RtTpsProtoRepeatedBeamOperate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedBeamOperate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedBeamOperate::~RtTpsProtoRepeatedBeamOperate() {
  SharedDtor();
}

void RtTpsProtoRepeatedBeamOperate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedBeamOperate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedBeamOperate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedBeamOperate_descriptor_;
}

const RtTpsProtoRepeatedBeamOperate& RtTpsProtoRepeatedBeamOperate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedBeamOperate* RtTpsProtoRepeatedBeamOperate::default_instance_ = NULL;

RtTpsProtoRepeatedBeamOperate* RtTpsProtoRepeatedBeamOperate::New() const {
  return new RtTpsProtoRepeatedBeamOperate;
}

void RtTpsProtoRepeatedBeamOperate::Clear() {
  beamoperatelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedBeamOperate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamOperateList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamoperatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beamOperateList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedBeamOperate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
  for (int i = 0; i < this->beamoperatelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beamoperatelist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedBeamOperate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
  for (int i = 0; i < this->beamoperatelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beamoperatelist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedBeamOperate::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
  total_size += 1 * this->beamoperatelist_size();
  for (int i = 0; i < this->beamoperatelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamoperatelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedBeamOperate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedBeamOperate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedBeamOperate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedBeamOperate::MergeFrom(const RtTpsProtoRepeatedBeamOperate& from) {
  GOOGLE_CHECK_NE(&from, this);
  beamoperatelist_.MergeFrom(from.beamoperatelist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedBeamOperate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedBeamOperate::CopyFrom(const RtTpsProtoRepeatedBeamOperate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedBeamOperate::IsInitialized() const {
  
  for (int i = 0; i < beamoperatelist_size(); i++) {
    if (!this->beamoperatelist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedBeamOperate::Swap(RtTpsProtoRepeatedBeamOperate* other) {
  if (other != this) {
    beamoperatelist_.Swap(&other->beamoperatelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedBeamOperate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedBeamOperate_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedBeamOperate_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
