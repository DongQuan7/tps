// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_contourslices.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        namespace {

            const ::google::protobuf::Descriptor* RT_TPS_CONTOUR_SLICES_descriptor_ = NULL;
            const ::google::protobuf::internal::GeneratedMessageReflection*
                RT_TPS_CONTOUR_SLICES_reflection_ = NULL;

        }  // namespace


        void protobuf_AssignDesc_rt_5ftps_5fcontourslices_2eproto() {
            protobuf_AddDesc_rt_5ftps_5fcontourslices_2eproto();
            const ::google::protobuf::FileDescriptor* file =
                ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "rt_tps_contourslices.proto");
            GOOGLE_CHECK(file != NULL);
            RT_TPS_CONTOUR_SLICES_descriptor_ = file->message_type(0);
            static const int RT_TPS_CONTOUR_SLICES_offsets_[8] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, first_slice_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, second_slice_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, voi_uid_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, edit_mode_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, isreplace_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, windowtype_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, windowuid_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, sub_edit_mode_),
            };
            RT_TPS_CONTOUR_SLICES_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                RT_TPS_CONTOUR_SLICES_descriptor_,
                RT_TPS_CONTOUR_SLICES::default_instance_,
                RT_TPS_CONTOUR_SLICES_offsets_,
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, _has_bits_[0]),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CONTOUR_SLICES, _unknown_fields_),
                -1,
                ::google::protobuf::DescriptorPool::generated_pool(),
                ::google::protobuf::MessageFactory::generated_factory(),
                sizeof(RT_TPS_CONTOUR_SLICES));
        }

        namespace {

            GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
            inline void protobuf_AssignDescriptorsOnce() {
                ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                    &protobuf_AssignDesc_rt_5ftps_5fcontourslices_2eproto);
            }

            void protobuf_RegisterTypes(const ::std::string&) {
                protobuf_AssignDescriptorsOnce();
                ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    RT_TPS_CONTOUR_SLICES_descriptor_, &RT_TPS_CONTOUR_SLICES::default_instance());
            }

        }  // namespace

        void protobuf_ShutdownFile_rt_5ftps_5fcontourslices_2eproto() {
            delete RT_TPS_CONTOUR_SLICES::default_instance_;
            delete RT_TPS_CONTOUR_SLICES_reflection_;
        }

        void protobuf_AddDesc_rt_5ftps_5fcontourslices_2eproto() {
            static bool already_here = false;
            if (already_here) return;
            already_here = true;
            GOOGLE_PROTOBUF_VERIFY_VERSION;

            ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                "\n\032rt_tps_contourslices.proto\022\ttps.proto\""
                "\267\001\n\025RT_TPS_CONTOUR_SLICES\022\023\n\013first_slice"
                "\030\001 \001(\005\022\024\n\014second_slice\030\002 \001(\005\022\017\n\007voi_uid\030"
                "\003 \002(\t\022\021\n\tedit_mode\030\004 \001(\005\022\021\n\tisReplace\030\005 "
                "\001(\010\022\022\n\nwindowType\030\006 \001(\005\022\021\n\twindowUid\030\007 \001"
                "(\t\022\025\n\rsub_edit_mode\030\010 \001(\005", 225);
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                "rt_tps_contourslices.proto", &protobuf_RegisterTypes);
            RT_TPS_CONTOUR_SLICES::default_instance_ = new RT_TPS_CONTOUR_SLICES();
            RT_TPS_CONTOUR_SLICES::default_instance_->InitAsDefaultInstance();
            ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fcontourslices_2eproto);
        }

        // Force AddDescriptors() to be called at static initialization time.
        struct StaticDescriptorInitializer_rt_5ftps_5fcontourslices_2eproto {
            StaticDescriptorInitializer_rt_5ftps_5fcontourslices_2eproto() {
                protobuf_AddDesc_rt_5ftps_5fcontourslices_2eproto();
            }
        } static_descriptor_initializer_rt_5ftps_5fcontourslices_2eproto_;


        // ===================================================================

#ifndef _MSC_VER
        const int RT_TPS_CONTOUR_SLICES::kFirstSliceFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kSecondSliceFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kVoiUidFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kEditModeFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kIsReplaceFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kWindowTypeFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kWindowUidFieldNumber;
        const int RT_TPS_CONTOUR_SLICES::kSubEditModeFieldNumber;
#endif  // !_MSC_VER

        RT_TPS_CONTOUR_SLICES::RT_TPS_CONTOUR_SLICES()
            : ::google::protobuf::Message() {
                SharedCtor();
        }

        void RT_TPS_CONTOUR_SLICES::InitAsDefaultInstance() {
        }

        RT_TPS_CONTOUR_SLICES::RT_TPS_CONTOUR_SLICES(const RT_TPS_CONTOUR_SLICES& from)
            : ::google::protobuf::Message() {
                SharedCtor();
                MergeFrom(from);
        }

        void RT_TPS_CONTOUR_SLICES::SharedCtor() {
            _cached_size_ = 0;
            first_slice_ = 0;
            second_slice_ = 0;
            voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            edit_mode_ = 0;
            isreplace_ = false;
            windowtype_ = 0;
            windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            sub_edit_mode_ = 0;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        RT_TPS_CONTOUR_SLICES::~RT_TPS_CONTOUR_SLICES() {
            SharedDtor();
        }

        void RT_TPS_CONTOUR_SLICES::SharedDtor() {
            if (voi_uid_ != &::google::protobuf::internal::kEmptyString) {
                delete voi_uid_;
            }
            if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
                delete windowuid_;
            }
            if (this != default_instance_) {
            }
        }

        void RT_TPS_CONTOUR_SLICES::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RT_TPS_CONTOUR_SLICES::descriptor() {
            protobuf_AssignDescriptorsOnce();
            return RT_TPS_CONTOUR_SLICES_descriptor_;
        }

        const RT_TPS_CONTOUR_SLICES& RT_TPS_CONTOUR_SLICES::default_instance() {
            if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fcontourslices_2eproto();  return *default_instance_;
        }

        RT_TPS_CONTOUR_SLICES* RT_TPS_CONTOUR_SLICES::default_instance_ = NULL;

        RT_TPS_CONTOUR_SLICES* RT_TPS_CONTOUR_SLICES::New() const {
            return new RT_TPS_CONTOUR_SLICES;
        }

        void RT_TPS_CONTOUR_SLICES::Clear() {
            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                first_slice_ = 0;
                second_slice_ = 0;
                if (has_voi_uid()) {
                    if (voi_uid_ != &::google::protobuf::internal::kEmptyString) {
                        voi_uid_->clear();
                    }
                }
                edit_mode_ = 0;
                isreplace_ = false;
                windowtype_ = 0;
                if (has_windowuid()) {
                    if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
                        windowuid_->clear();
                    }
                }
                sub_edit_mode_ = 0;
            }
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            mutable_unknown_fields()->Clear();
        }

        bool RT_TPS_CONTOUR_SLICES::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
                ::google::protobuf::uint32 tag;
                while ((tag = input->ReadTag()) != 0) {
                    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                        // optional int32 first_slice = 1;
                    case 1: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                    input, &first_slice_)));
                                set_has_first_slice();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(16)) goto parse_second_slice;
                        break;
                            }

                            // optional int32 second_slice = 2;
                    case 2: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_second_slice:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                    input, &second_slice_)));
                                set_has_second_slice();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(26)) goto parse_voi_uid;
                        break;
                            }

                            // required string voi_uid = 3;
                    case 3: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_voi_uid:
                                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                    input, this->mutable_voi_uid()));
                                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                    this->voi_uid().data(), this->voi_uid().length(),
                                    ::google::protobuf::internal::WireFormat::PARSE);
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(32)) goto parse_edit_mode;
                        break;
                            }

                            // optional int32 edit_mode = 4;
                    case 4: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_edit_mode:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                    input, &edit_mode_)));
                                set_has_edit_mode();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(40)) goto parse_isReplace;
                        break;
                            }

                            // optional bool isReplace = 5;
                    case 5: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_isReplace:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                                    input, &isreplace_)));
                                set_has_isreplace();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(48)) goto parse_windowType;
                        break;
                            }

                            // optional int32 windowType = 6;
                    case 6: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_windowType:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                    input, &windowtype_)));
                                set_has_windowtype();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(58)) goto parse_windowUid;
                        break;
                            }

                            // optional string windowUid = 7;
                    case 7: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_windowUid:
                                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                    input, this->mutable_windowuid()));
                                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                    this->windowuid().data(), this->windowuid().length(),
                                    ::google::protobuf::internal::WireFormat::PARSE);
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(64)) goto parse_sub_edit_mode;
                        break;
                            }

                            // optional int32 sub_edit_mode = 8;
                    case 8: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_sub_edit_mode:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                                    input, &sub_edit_mode_)));
                                set_has_sub_edit_mode();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectAtEnd()) return true;
                        break;
                            }

                    default: {
handle_uninterpreted:
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                return true;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                        break;
                             }
                    }
                }
                return true;
#undef DO_
        }

        void RT_TPS_CONTOUR_SLICES::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
                // optional int32 first_slice = 1;
                if (has_first_slice()) {
                    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->first_slice(), output);
                }

                // optional int32 second_slice = 2;
                if (has_second_slice()) {
                    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->second_slice(), output);
                }

                // required string voi_uid = 3;
                if (has_voi_uid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->voi_uid().data(), this->voi_uid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    ::google::protobuf::internal::WireFormatLite::WriteString(
                        3, this->voi_uid(), output);
                }

                // optional int32 edit_mode = 4;
                if (has_edit_mode()) {
                    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->edit_mode(), output);
                }

                // optional bool isReplace = 5;
                if (has_isreplace()) {
                    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isreplace(), output);
                }

                // optional int32 windowType = 6;
                if (has_windowtype()) {
                    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->windowtype(), output);
                }

                // optional string windowUid = 7;
                if (has_windowuid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->windowuid().data(), this->windowuid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    ::google::protobuf::internal::WireFormatLite::WriteString(
                        7, this->windowuid(), output);
                }

                // optional int32 sub_edit_mode = 8;
                if (has_sub_edit_mode()) {
                    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sub_edit_mode(), output);
                }

                if (!unknown_fields().empty()) {
                    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                        unknown_fields(), output);
                }
        }

        ::google::protobuf::uint8* RT_TPS_CONTOUR_SLICES::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8* target) const {
                // optional int32 first_slice = 1;
                if (has_first_slice()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->first_slice(), target);
                }

                // optional int32 second_slice = 2;
                if (has_second_slice()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->second_slice(), target);
                }

                // required string voi_uid = 3;
                if (has_voi_uid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->voi_uid().data(), this->voi_uid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    target =
                        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        3, this->voi_uid(), target);
                }

                // optional int32 edit_mode = 4;
                if (has_edit_mode()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->edit_mode(), target);
                }

                // optional bool isReplace = 5;
                if (has_isreplace()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isreplace(), target);
                }

                // optional int32 windowType = 6;
                if (has_windowtype()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->windowtype(), target);
                }

                // optional string windowUid = 7;
                if (has_windowuid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->windowuid().data(), this->windowuid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    target =
                        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        7, this->windowuid(), target);
                }

                // optional int32 sub_edit_mode = 8;
                if (has_sub_edit_mode()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sub_edit_mode(), target);
                }

                if (!unknown_fields().empty()) {
                    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                        unknown_fields(), target);
                }
                return target;
        }

        int RT_TPS_CONTOUR_SLICES::ByteSize() const {
            int total_size = 0;

            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                // optional int32 first_slice = 1;
                if (has_first_slice()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->first_slice());
                }

                // optional int32 second_slice = 2;
                if (has_second_slice()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->second_slice());
                }

                // required string voi_uid = 3;
                if (has_voi_uid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->voi_uid());
                }

                // optional int32 edit_mode = 4;
                if (has_edit_mode()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->edit_mode());
                }

                // optional bool isReplace = 5;
                if (has_isreplace()) {
                    total_size += 1 + 1;
                }

                // optional int32 windowType = 6;
                if (has_windowtype()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->windowtype());
                }

                // optional string windowUid = 7;
                if (has_windowuid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->windowuid());
                }

                // optional int32 sub_edit_mode = 8;
                if (has_sub_edit_mode()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::Int32Size(
                        this->sub_edit_mode());
                }

            }
            if (!unknown_fields().empty()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RT_TPS_CONTOUR_SLICES::MergeFrom(const ::google::protobuf::Message& from) {
            GOOGLE_CHECK_NE(&from, this);
            const RT_TPS_CONTOUR_SLICES* source =
                ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CONTOUR_SLICES*>(
                &from);
            if (source == NULL) {
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                MergeFrom(*source);
            }
        }

        void RT_TPS_CONTOUR_SLICES::MergeFrom(const RT_TPS_CONTOUR_SLICES& from) {
            GOOGLE_CHECK_NE(&from, this);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_first_slice()) {
                    set_first_slice(from.first_slice());
                }
                if (from.has_second_slice()) {
                    set_second_slice(from.second_slice());
                }
                if (from.has_voi_uid()) {
                    set_voi_uid(from.voi_uid());
                }
                if (from.has_edit_mode()) {
                    set_edit_mode(from.edit_mode());
                }
                if (from.has_isreplace()) {
                    set_isreplace(from.isreplace());
                }
                if (from.has_windowtype()) {
                    set_windowtype(from.windowtype());
                }
                if (from.has_windowuid()) {
                    set_windowuid(from.windowuid());
                }
                if (from.has_sub_edit_mode()) {
                    set_sub_edit_mode(from.sub_edit_mode());
                }
            }
            mutable_unknown_fields()->MergeFrom(from.unknown_fields());
        }

        void RT_TPS_CONTOUR_SLICES::CopyFrom(const ::google::protobuf::Message& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RT_TPS_CONTOUR_SLICES::CopyFrom(const RT_TPS_CONTOUR_SLICES& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RT_TPS_CONTOUR_SLICES::IsInitialized() const {
            if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

            return true;
        }

        void RT_TPS_CONTOUR_SLICES::Swap(RT_TPS_CONTOUR_SLICES* other) {
            if (other != this) {
                std::swap(first_slice_, other->first_slice_);
                std::swap(second_slice_, other->second_slice_);
                std::swap(voi_uid_, other->voi_uid_);
                std::swap(edit_mode_, other->edit_mode_);
                std::swap(isreplace_, other->isreplace_);
                std::swap(windowtype_, other->windowtype_);
                std::swap(windowuid_, other->windowuid_);
                std::swap(sub_edit_mode_, other->sub_edit_mode_);
                std::swap(_has_bits_[0], other->_has_bits_[0]);
                _unknown_fields_.Swap(&other->_unknown_fields_);
                std::swap(_cached_size_, other->_cached_size_);
            }
        }

        ::google::protobuf::Metadata RT_TPS_CONTOUR_SLICES::GetMetadata() const {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::Metadata metadata;
            metadata.descriptor = RT_TPS_CONTOUR_SLICES_descriptor_;
            metadata.reflection = RT_TPS_CONTOUR_SLICES_reflection_;
            return metadata;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
