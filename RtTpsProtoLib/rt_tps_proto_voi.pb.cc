// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_voi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoVoi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoVoi_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedVoi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedVoi_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_voi.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoVoi_descriptor_ = file->message_type(0);
  static const int RtTpsProtoVoi_offsets_[31] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, voiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, voiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, planningrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, voicolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, islocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, averagedensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, maxdensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, mindensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, surfacearea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, centroidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, centroidy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, centroidz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, slices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, mindose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, maxdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, meandose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, standard_deviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, isshaded_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, subrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, isapproved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, locktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, ingrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, tcpntcp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, isoverride_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, overridemassdensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, overridereferenceelectrondensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, organtype_),
  };
  RtTpsProtoVoi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoVoi_descriptor_,
      RtTpsProtoVoi::default_instance_,
      RtTpsProtoVoi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoVoi));
  RtTpsProtoRepeatedVoi_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedVoi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVoi, voilist_),
  };
  RtTpsProtoRepeatedVoi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedVoi_descriptor_,
      RtTpsProtoRepeatedVoi::default_instance_,
      RtTpsProtoRepeatedVoi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVoi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedVoi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedVoi));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoVoi_descriptor_, &RtTpsProtoVoi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedVoi_descriptor_, &RtTpsProtoRepeatedVoi::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_2eproto() {
  delete RtTpsProtoVoi::default_instance_;
  delete RtTpsProtoVoi_reflection_;
  delete RtTpsProtoRepeatedVoi::default_instance_;
  delete RtTpsProtoRepeatedVoi_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rt_tps_proto_voi.proto\022\ttps.proto\"\373\004\n\r"
    "RtTpsProtoVoi\022\016\n\006voiuid\030\001 \002(\t\022\021\n\tseriesu"
    "id\030\002 \002(\t\022\017\n\007voiname\030\003 \002(\t\022\024\n\014planningrol"
    "e\030\004 \001(\005\022\020\n\010voicolor\030\005 \003(\002\022\021\n\tisvisible\030\006"
    " \001(\010\022\020\n\010islocked\030\007 \001(\010\022\026\n\016averagedensity"
    "\030\010 \001(\002\022\022\n\nmaxdensity\030\t \001(\002\022\022\n\nmindensity"
    "\030\n \001(\002\022\016\n\006volume\030\013 \001(\002\022\023\n\013surfacearea\030\014 "
    "\001(\002\022\021\n\tcentroidx\030\r \001(\002\022\021\n\tcentroidy\030\016 \001("
    "\002\022\021\n\tcentroidz\030\017 \001(\002\022\016\n\006slices\030\020 \003(\005\022\017\n\007"
    "minDose\030\021 \001(\002\022\017\n\007maxDose\030\022 \001(\002\022\020\n\010meanDo"
    "se\030\023 \001(\002\022\032\n\022standard_deviation\030\024 \001(\002\022\020\n\010"
    "isshaded\030\025 \001(\010\022\017\n\007subrole\030\026 \001(\005\022\022\n\nisapp"
    "roved\030\027 \001(\005\022\020\n\010locktype\030\030 \001(\005\022\016\n\006ingrid\030"
    "\031 \001(\002\022\017\n\007tcpntcp\030\032 \001(\002\022\023\n\013description\030\033 "
    "\001(\t\022\022\n\nisoverride\030\034 \001(\010\022\033\n\023overridemassd"
    "ensity\030\035 \001(\002\022(\n overridereferenceelectro"
    "ndensity\030\036 \001(\002\022\021\n\torganType\030\037 \001(\005\"B\n\025RtT"
    "psProtoRepeatedVoi\022)\n\007voilist\030\001 \003(\0132\030.tp"
    "s.proto.RtTpsProtoVoi", 741);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_voi.proto", &protobuf_RegisterTypes);
  RtTpsProtoVoi::default_instance_ = new RtTpsProtoVoi();
  RtTpsProtoRepeatedVoi::default_instance_ = new RtTpsProtoRepeatedVoi();
  RtTpsProtoVoi::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedVoi::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fvoi_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fvoi_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fvoi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoVoi::kVoiuidFieldNumber;
const int RtTpsProtoVoi::kSeriesuidFieldNumber;
const int RtTpsProtoVoi::kVoinameFieldNumber;
const int RtTpsProtoVoi::kPlanningroleFieldNumber;
const int RtTpsProtoVoi::kVoicolorFieldNumber;
const int RtTpsProtoVoi::kIsvisibleFieldNumber;
const int RtTpsProtoVoi::kIslockedFieldNumber;
const int RtTpsProtoVoi::kAveragedensityFieldNumber;
const int RtTpsProtoVoi::kMaxdensityFieldNumber;
const int RtTpsProtoVoi::kMindensityFieldNumber;
const int RtTpsProtoVoi::kVolumeFieldNumber;
const int RtTpsProtoVoi::kSurfaceareaFieldNumber;
const int RtTpsProtoVoi::kCentroidxFieldNumber;
const int RtTpsProtoVoi::kCentroidyFieldNumber;
const int RtTpsProtoVoi::kCentroidzFieldNumber;
const int RtTpsProtoVoi::kSlicesFieldNumber;
const int RtTpsProtoVoi::kMinDoseFieldNumber;
const int RtTpsProtoVoi::kMaxDoseFieldNumber;
const int RtTpsProtoVoi::kMeanDoseFieldNumber;
const int RtTpsProtoVoi::kStandardDeviationFieldNumber;
const int RtTpsProtoVoi::kIsshadedFieldNumber;
const int RtTpsProtoVoi::kSubroleFieldNumber;
const int RtTpsProtoVoi::kIsapprovedFieldNumber;
const int RtTpsProtoVoi::kLocktypeFieldNumber;
const int RtTpsProtoVoi::kIngridFieldNumber;
const int RtTpsProtoVoi::kTcpntcpFieldNumber;
const int RtTpsProtoVoi::kDescriptionFieldNumber;
const int RtTpsProtoVoi::kIsoverrideFieldNumber;
const int RtTpsProtoVoi::kOverridemassdensityFieldNumber;
const int RtTpsProtoVoi::kOverridereferenceelectrondensityFieldNumber;
const int RtTpsProtoVoi::kOrganTypeFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoVoi::RtTpsProtoVoi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoVoi::InitAsDefaultInstance() {
}

RtTpsProtoVoi::RtTpsProtoVoi(const RtTpsProtoVoi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoVoi::SharedCtor() {
  _cached_size_ = 0;
  voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planningrole_ = 0;
  isvisible_ = false;
  islocked_ = false;
  averagedensity_ = 0;
  maxdensity_ = 0;
  mindensity_ = 0;
  volume_ = 0;
  surfacearea_ = 0;
  centroidx_ = 0;
  centroidy_ = 0;
  centroidz_ = 0;
  mindose_ = 0;
  maxdose_ = 0;
  meandose_ = 0;
  standard_deviation_ = 0;
  isshaded_ = false;
  subrole_ = 0;
  isapproved_ = 0;
  locktype_ = 0;
  ingrid_ = 0;
  tcpntcp_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isoverride_ = false;
  overridemassdensity_ = 0;
  overridereferenceelectrondensity_ = 0;
  organtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoVoi::~RtTpsProtoVoi() {
  SharedDtor();
}

void RtTpsProtoVoi::SharedDtor() {
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete voiuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (voiname_ != &::google::protobuf::internal::kEmptyString) {
    delete voiname_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoVoi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoVoi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoVoi_descriptor_;
}

const RtTpsProtoVoi& RtTpsProtoVoi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();  return *default_instance_;
}

RtTpsProtoVoi* RtTpsProtoVoi::default_instance_ = NULL;

RtTpsProtoVoi* RtTpsProtoVoi::New() const {
  return new RtTpsProtoVoi;
}

void RtTpsProtoVoi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_voiuid()) {
      if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
        voiuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    if (has_voiname()) {
      if (voiname_ != &::google::protobuf::internal::kEmptyString) {
        voiname_->clear();
      }
    }
    planningrole_ = 0;
    isvisible_ = false;
    islocked_ = false;
    averagedensity_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxdensity_ = 0;
    mindensity_ = 0;
    volume_ = 0;
    surfacearea_ = 0;
    centroidx_ = 0;
    centroidy_ = 0;
    centroidz_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mindose_ = 0;
    maxdose_ = 0;
    meandose_ = 0;
    standard_deviation_ = 0;
    isshaded_ = false;
    subrole_ = 0;
    isapproved_ = 0;
    locktype_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ingrid_ = 0;
    tcpntcp_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    isoverride_ = false;
    overridemassdensity_ = 0;
    overridereferenceelectrondensity_ = 0;
    organtype_ = 0;
  }
  voicolor_.Clear();
  slices_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoVoi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string voiuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiuid().data(), this->voiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_seriesuid;
        break;
      }
      
      // required string seriesuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voiname;
        break;
      }
      
      // required string voiname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiname().data(), this->voiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_planningrole;
        break;
      }
      
      // optional int32 planningrole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planningrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planningrole_)));
          set_has_planningrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_voicolor;
        break;
      }
      
      // repeated float voicolor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_voicolor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_voicolor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_voicolor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_voicolor;
        if (input->ExpectTag(48)) goto parse_isvisible;
        break;
      }
      
      // optional bool isvisible = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_islocked;
        break;
      }
      
      // optional bool islocked = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_islocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &islocked_)));
          set_has_islocked();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_averagedensity;
        break;
      }
      
      // optional float averagedensity = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_averagedensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &averagedensity_)));
          set_has_averagedensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_maxdensity;
        break;
      }
      
      // optional float maxdensity = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxdensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdensity_)));
          set_has_maxdensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_mindensity;
        break;
      }
      
      // optional float mindensity = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mindensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindensity_)));
          set_has_mindensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_volume;
        break;
      }
      
      // optional float volume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_surfacearea;
        break;
      }
      
      // optional float surfacearea = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_surfacearea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surfacearea_)));
          set_has_surfacearea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_centroidx;
        break;
      }
      
      // optional float centroidx = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centroidx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centroidx_)));
          set_has_centroidx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_centroidy;
        break;
      }
      
      // optional float centroidy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centroidy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centroidy_)));
          set_has_centroidy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_centroidz;
        break;
      }
      
      // optional float centroidz = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_centroidz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &centroidz_)));
          set_has_centroidz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_slices;
        break;
      }
      
      // repeated int32 slices = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slices:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 128, input, this->mutable_slices())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_slices())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_slices;
        if (input->ExpectTag(141)) goto parse_minDose;
        break;
      }
      
      // optional float minDose = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindose_)));
          set_has_mindose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_maxDose;
        break;
      }
      
      // optional float maxDose = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdose_)));
          set_has_maxdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_meanDose;
        break;
      }
      
      // optional float meanDose = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_meanDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meandose_)));
          set_has_meandose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_standard_deviation;
        break;
      }
      
      // optional float standard_deviation = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_standard_deviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &standard_deviation_)));
          set_has_standard_deviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isshaded;
        break;
      }
      
      // optional bool isshaded = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isshaded:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshaded_)));
          set_has_isshaded();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_subrole;
        break;
      }
      
      // optional int32 subrole = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrole_)));
          set_has_subrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_isapproved;
        break;
      }
      
      // optional int32 isapproved = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isapproved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isapproved_)));
          set_has_isapproved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_locktype;
        break;
      }
      
      // optional int32 locktype = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_locktype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locktype_)));
          set_has_locktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_ingrid;
        break;
      }
      
      // optional float ingrid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ingrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ingrid_)));
          set_has_ingrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_tcpntcp;
        break;
      }
      
      // optional float tcpntcp = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tcpntcp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tcpntcp_)));
          set_has_tcpntcp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_description;
        break;
      }
      
      // optional string description = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_isoverride;
        break;
      }
      
      // optional bool isoverride = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isoverride:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoverride_)));
          set_has_isoverride();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_overridemassdensity;
        break;
      }
      
      // optional float overridemassdensity = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_overridemassdensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overridemassdensity_)));
          set_has_overridemassdensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_overridereferenceelectrondensity;
        break;
      }
      
      // optional float overridereferenceelectrondensity = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_overridereferenceelectrondensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &overridereferenceelectrondensity_)));
          set_has_overridereferenceelectrondensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_organType;
        break;
      }
      
      // optional int32 organType = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_organType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &organtype_)));
          set_has_organtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoVoi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string voiuid = 1;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->voiuid(), output);
  }
  
  // required string seriesuid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->seriesuid(), output);
  }
  
  // required string voiname = 3;
  if (has_voiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiname().data(), this->voiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->voiname(), output);
  }
  
  // optional int32 planningrole = 4;
  if (has_planningrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->planningrole(), output);
  }
  
  // repeated float voicolor = 5;
  for (int i = 0; i < this->voicolor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->voicolor(i), output);
  }
  
  // optional bool isvisible = 6;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isvisible(), output);
  }
  
  // optional bool islocked = 7;
  if (has_islocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->islocked(), output);
  }
  
  // optional float averagedensity = 8;
  if (has_averagedensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->averagedensity(), output);
  }
  
  // optional float maxdensity = 9;
  if (has_maxdensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maxdensity(), output);
  }
  
  // optional float mindensity = 10;
  if (has_mindensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->mindensity(), output);
  }
  
  // optional float volume = 11;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->volume(), output);
  }
  
  // optional float surfacearea = 12;
  if (has_surfacearea()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->surfacearea(), output);
  }
  
  // optional float centroidx = 13;
  if (has_centroidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->centroidx(), output);
  }
  
  // optional float centroidy = 14;
  if (has_centroidy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->centroidy(), output);
  }
  
  // optional float centroidz = 15;
  if (has_centroidz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->centroidz(), output);
  }
  
  // repeated int32 slices = 16;
  for (int i = 0; i < this->slices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      16, this->slices(i), output);
  }
  
  // optional float minDose = 17;
  if (has_mindose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->mindose(), output);
  }
  
  // optional float maxDose = 18;
  if (has_maxdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->maxdose(), output);
  }
  
  // optional float meanDose = 19;
  if (has_meandose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->meandose(), output);
  }
  
  // optional float standard_deviation = 20;
  if (has_standard_deviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->standard_deviation(), output);
  }
  
  // optional bool isshaded = 21;
  if (has_isshaded()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isshaded(), output);
  }
  
  // optional int32 subrole = 22;
  if (has_subrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->subrole(), output);
  }
  
  // optional int32 isapproved = 23;
  if (has_isapproved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->isapproved(), output);
  }
  
  // optional int32 locktype = 24;
  if (has_locktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->locktype(), output);
  }
  
  // optional float ingrid = 25;
  if (has_ingrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ingrid(), output);
  }
  
  // optional float tcpntcp = 26;
  if (has_tcpntcp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->tcpntcp(), output);
  }
  
  // optional string description = 27;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->description(), output);
  }
  
  // optional bool isoverride = 28;
  if (has_isoverride()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->isoverride(), output);
  }
  
  // optional float overridemassdensity = 29;
  if (has_overridemassdensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->overridemassdensity(), output);
  }
  
  // optional float overridereferenceelectrondensity = 30;
  if (has_overridereferenceelectrondensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->overridereferenceelectrondensity(), output);
  }
  
  // optional int32 organType = 31;
  if (has_organtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->organtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoVoi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string voiuid = 1;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->voiuid(), target);
  }
  
  // required string seriesuid = 2;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->seriesuid(), target);
  }
  
  // required string voiname = 3;
  if (has_voiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiname().data(), this->voiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voiname(), target);
  }
  
  // optional int32 planningrole = 4;
  if (has_planningrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->planningrole(), target);
  }
  
  // repeated float voicolor = 5;
  for (int i = 0; i < this->voicolor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->voicolor(i), target);
  }
  
  // optional bool isvisible = 6;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isvisible(), target);
  }
  
  // optional bool islocked = 7;
  if (has_islocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->islocked(), target);
  }
  
  // optional float averagedensity = 8;
  if (has_averagedensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->averagedensity(), target);
  }
  
  // optional float maxdensity = 9;
  if (has_maxdensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maxdensity(), target);
  }
  
  // optional float mindensity = 10;
  if (has_mindensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->mindensity(), target);
  }
  
  // optional float volume = 11;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->volume(), target);
  }
  
  // optional float surfacearea = 12;
  if (has_surfacearea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->surfacearea(), target);
  }
  
  // optional float centroidx = 13;
  if (has_centroidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->centroidx(), target);
  }
  
  // optional float centroidy = 14;
  if (has_centroidy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->centroidy(), target);
  }
  
  // optional float centroidz = 15;
  if (has_centroidz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->centroidz(), target);
  }
  
  // repeated int32 slices = 16;
  for (int i = 0; i < this->slices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(16, this->slices(i), target);
  }
  
  // optional float minDose = 17;
  if (has_mindose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->mindose(), target);
  }
  
  // optional float maxDose = 18;
  if (has_maxdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->maxdose(), target);
  }
  
  // optional float meanDose = 19;
  if (has_meandose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->meandose(), target);
  }
  
  // optional float standard_deviation = 20;
  if (has_standard_deviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->standard_deviation(), target);
  }
  
  // optional bool isshaded = 21;
  if (has_isshaded()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isshaded(), target);
  }
  
  // optional int32 subrole = 22;
  if (has_subrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->subrole(), target);
  }
  
  // optional int32 isapproved = 23;
  if (has_isapproved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->isapproved(), target);
  }
  
  // optional int32 locktype = 24;
  if (has_locktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->locktype(), target);
  }
  
  // optional float ingrid = 25;
  if (has_ingrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ingrid(), target);
  }
  
  // optional float tcpntcp = 26;
  if (has_tcpntcp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->tcpntcp(), target);
  }
  
  // optional string description = 27;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->description(), target);
  }
  
  // optional bool isoverride = 28;
  if (has_isoverride()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->isoverride(), target);
  }
  
  // optional float overridemassdensity = 29;
  if (has_overridemassdensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->overridemassdensity(), target);
  }
  
  // optional float overridereferenceelectrondensity = 30;
  if (has_overridereferenceelectrondensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->overridereferenceelectrondensity(), target);
  }
  
  // optional int32 organType = 31;
  if (has_organtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->organtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoVoi::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string voiuid = 1;
    if (has_voiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiuid());
    }
    
    // required string seriesuid = 2;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // required string voiname = 3;
    if (has_voiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiname());
    }
    
    // optional int32 planningrole = 4;
    if (has_planningrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planningrole());
    }
    
    // optional bool isvisible = 6;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }
    
    // optional bool islocked = 7;
    if (has_islocked()) {
      total_size += 1 + 1;
    }
    
    // optional float averagedensity = 8;
    if (has_averagedensity()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float maxdensity = 9;
    if (has_maxdensity()) {
      total_size += 1 + 4;
    }
    
    // optional float mindensity = 10;
    if (has_mindensity()) {
      total_size += 1 + 4;
    }
    
    // optional float volume = 11;
    if (has_volume()) {
      total_size += 1 + 4;
    }
    
    // optional float surfacearea = 12;
    if (has_surfacearea()) {
      total_size += 1 + 4;
    }
    
    // optional float centroidx = 13;
    if (has_centroidx()) {
      total_size += 1 + 4;
    }
    
    // optional float centroidy = 14;
    if (has_centroidy()) {
      total_size += 1 + 4;
    }
    
    // optional float centroidz = 15;
    if (has_centroidz()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float minDose = 17;
    if (has_mindose()) {
      total_size += 2 + 4;
    }
    
    // optional float maxDose = 18;
    if (has_maxdose()) {
      total_size += 2 + 4;
    }
    
    // optional float meanDose = 19;
    if (has_meandose()) {
      total_size += 2 + 4;
    }
    
    // optional float standard_deviation = 20;
    if (has_standard_deviation()) {
      total_size += 2 + 4;
    }
    
    // optional bool isshaded = 21;
    if (has_isshaded()) {
      total_size += 2 + 1;
    }
    
    // optional int32 subrole = 22;
    if (has_subrole()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrole());
    }
    
    // optional int32 isapproved = 23;
    if (has_isapproved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isapproved());
    }
    
    // optional int32 locktype = 24;
    if (has_locktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locktype());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float ingrid = 25;
    if (has_ingrid()) {
      total_size += 2 + 4;
    }
    
    // optional float tcpntcp = 26;
    if (has_tcpntcp()) {
      total_size += 2 + 4;
    }
    
    // optional string description = 27;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
    // optional bool isoverride = 28;
    if (has_isoverride()) {
      total_size += 2 + 1;
    }
    
    // optional float overridemassdensity = 29;
    if (has_overridemassdensity()) {
      total_size += 2 + 4;
    }
    
    // optional float overridereferenceelectrondensity = 30;
    if (has_overridereferenceelectrondensity()) {
      total_size += 2 + 4;
    }
    
    // optional int32 organType = 31;
    if (has_organtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->organtype());
    }
    
  }
  // repeated float voicolor = 5;
  {
    int data_size = 0;
    data_size = 4 * this->voicolor_size();
    total_size += 1 * this->voicolor_size() + data_size;
  }
  
  // repeated int32 slices = 16;
  {
    int data_size = 0;
    for (int i = 0; i < this->slices_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->slices(i));
    }
    total_size += 2 * this->slices_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoVoi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoVoi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoVoi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoVoi::MergeFrom(const RtTpsProtoVoi& from) {
  GOOGLE_CHECK_NE(&from, this);
  voicolor_.MergeFrom(from.voicolor_);
  slices_.MergeFrom(from.slices_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_voiuid()) {
      set_voiuid(from.voiuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_voiname()) {
      set_voiname(from.voiname());
    }
    if (from.has_planningrole()) {
      set_planningrole(from.planningrole());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_islocked()) {
      set_islocked(from.islocked());
    }
    if (from.has_averagedensity()) {
      set_averagedensity(from.averagedensity());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxdensity()) {
      set_maxdensity(from.maxdensity());
    }
    if (from.has_mindensity()) {
      set_mindensity(from.mindensity());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_surfacearea()) {
      set_surfacearea(from.surfacearea());
    }
    if (from.has_centroidx()) {
      set_centroidx(from.centroidx());
    }
    if (from.has_centroidy()) {
      set_centroidy(from.centroidy());
    }
    if (from.has_centroidz()) {
      set_centroidz(from.centroidz());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mindose()) {
      set_mindose(from.mindose());
    }
    if (from.has_maxdose()) {
      set_maxdose(from.maxdose());
    }
    if (from.has_meandose()) {
      set_meandose(from.meandose());
    }
    if (from.has_standard_deviation()) {
      set_standard_deviation(from.standard_deviation());
    }
    if (from.has_isshaded()) {
      set_isshaded(from.isshaded());
    }
    if (from.has_subrole()) {
      set_subrole(from.subrole());
    }
    if (from.has_isapproved()) {
      set_isapproved(from.isapproved());
    }
    if (from.has_locktype()) {
      set_locktype(from.locktype());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ingrid()) {
      set_ingrid(from.ingrid());
    }
    if (from.has_tcpntcp()) {
      set_tcpntcp(from.tcpntcp());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_isoverride()) {
      set_isoverride(from.isoverride());
    }
    if (from.has_overridemassdensity()) {
      set_overridemassdensity(from.overridemassdensity());
    }
    if (from.has_overridereferenceelectrondensity()) {
      set_overridereferenceelectrondensity(from.overridereferenceelectrondensity());
    }
    if (from.has_organtype()) {
      set_organtype(from.organtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoVoi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoVoi::CopyFrom(const RtTpsProtoVoi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoVoi::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RtTpsProtoVoi::Swap(RtTpsProtoVoi* other) {
  if (other != this) {
    std::swap(voiuid_, other->voiuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(voiname_, other->voiname_);
    std::swap(planningrole_, other->planningrole_);
    voicolor_.Swap(&other->voicolor_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(islocked_, other->islocked_);
    std::swap(averagedensity_, other->averagedensity_);
    std::swap(maxdensity_, other->maxdensity_);
    std::swap(mindensity_, other->mindensity_);
    std::swap(volume_, other->volume_);
    std::swap(surfacearea_, other->surfacearea_);
    std::swap(centroidx_, other->centroidx_);
    std::swap(centroidy_, other->centroidy_);
    std::swap(centroidz_, other->centroidz_);
    slices_.Swap(&other->slices_);
    std::swap(mindose_, other->mindose_);
    std::swap(maxdose_, other->maxdose_);
    std::swap(meandose_, other->meandose_);
    std::swap(standard_deviation_, other->standard_deviation_);
    std::swap(isshaded_, other->isshaded_);
    std::swap(subrole_, other->subrole_);
    std::swap(isapproved_, other->isapproved_);
    std::swap(locktype_, other->locktype_);
    std::swap(ingrid_, other->ingrid_);
    std::swap(tcpntcp_, other->tcpntcp_);
    std::swap(description_, other->description_);
    std::swap(isoverride_, other->isoverride_);
    std::swap(overridemassdensity_, other->overridemassdensity_);
    std::swap(overridereferenceelectrondensity_, other->overridereferenceelectrondensity_);
    std::swap(organtype_, other->organtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoVoi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoVoi_descriptor_;
  metadata.reflection = RtTpsProtoVoi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedVoi::kVoilistFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedVoi::RtTpsProtoRepeatedVoi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedVoi::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedVoi::RtTpsProtoRepeatedVoi(const RtTpsProtoRepeatedVoi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedVoi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedVoi::~RtTpsProtoRepeatedVoi() {
  SharedDtor();
}

void RtTpsProtoRepeatedVoi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedVoi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedVoi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedVoi_descriptor_;
}

const RtTpsProtoRepeatedVoi& RtTpsProtoRepeatedVoi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedVoi* RtTpsProtoRepeatedVoi::default_instance_ = NULL;

RtTpsProtoRepeatedVoi* RtTpsProtoRepeatedVoi::New() const {
  return new RtTpsProtoRepeatedVoi;
}

void RtTpsProtoRepeatedVoi::Clear() {
  voilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedVoi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoVoi voilist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voilist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_voilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_voilist;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedVoi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoVoi voilist = 1;
  for (int i = 0; i < this->voilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->voilist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedVoi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoVoi voilist = 1;
  for (int i = 0; i < this->voilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->voilist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedVoi::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoVoi voilist = 1;
  total_size += 1 * this->voilist_size();
  for (int i = 0; i < this->voilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->voilist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedVoi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedVoi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedVoi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedVoi::MergeFrom(const RtTpsProtoRepeatedVoi& from) {
  GOOGLE_CHECK_NE(&from, this);
  voilist_.MergeFrom(from.voilist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedVoi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedVoi::CopyFrom(const RtTpsProtoRepeatedVoi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedVoi::IsInitialized() const {
  
  for (int i = 0; i < voilist_size(); i++) {
    if (!this->voilist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedVoi::Swap(RtTpsProtoRepeatedVoi* other) {
  if (other != this) {
    voilist_.Swap(&other->voilist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedVoi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedVoi_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedVoi_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
