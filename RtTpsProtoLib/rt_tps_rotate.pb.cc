// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_rotate.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_ROTATE_SHADEDSURFACE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_ROTATE_SHADEDSURFACE_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5frotate_2eproto() {
  protobuf_AddDesc_rt_5ftps_5frotate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_rotate.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_ROTATE_SHADEDSURFACE_descriptor_ = file->message_type(0);
  static const int RT_TPS_ROTATE_SHADEDSURFACE_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, viewercontrolid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, cellid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, precoordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, precoordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, currentcoordx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, currentcoordy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, mousetype_),
  };
  RT_TPS_ROTATE_SHADEDSURFACE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_ROTATE_SHADEDSURFACE_descriptor_,
      RT_TPS_ROTATE_SHADEDSURFACE::default_instance_,
      RT_TPS_ROTATE_SHADEDSURFACE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ROTATE_SHADEDSURFACE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_ROTATE_SHADEDSURFACE));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5frotate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_ROTATE_SHADEDSURFACE_descriptor_, &RT_TPS_ROTATE_SHADEDSURFACE::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5frotate_2eproto() {
  delete RT_TPS_ROTATE_SHADEDSURFACE::default_instance_;
  delete RT_TPS_ROTATE_SHADEDSURFACE_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5frotate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023rt_tps_rotate.proto\022\ttps.proto\"\255\001\n\033RT_"
    "TPS_ROTATE_SHADEDSURFACE\022\027\n\017viewerContro"
    "lID\030\001 \001(\005\022\016\n\006cellID\030\002 \001(\005\022\021\n\tpreCoordX\030\003"
    " \001(\002\022\021\n\tpreCoordY\030\004 \001(\002\022\025\n\rcurrentCoordX"
    "\030\005 \002(\002\022\025\n\rcurrentCoordY\030\006 \002(\002\022\021\n\tmouseTy"
    "pe\030\007 \001(\005", 208);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_rotate.proto", &protobuf_RegisterTypes);
  RT_TPS_ROTATE_SHADEDSURFACE::default_instance_ = new RT_TPS_ROTATE_SHADEDSURFACE();
  RT_TPS_ROTATE_SHADEDSURFACE::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5frotate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5frotate_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5frotate_2eproto() {
    protobuf_AddDesc_rt_5ftps_5frotate_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5frotate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_ROTATE_SHADEDSURFACE::kViewerControlIDFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kCellIDFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kPreCoordXFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kPreCoordYFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kCurrentCoordXFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kCurrentCoordYFieldNumber;
const int RT_TPS_ROTATE_SHADEDSURFACE::kMouseTypeFieldNumber;
#endif  // !_MSC_VER

RT_TPS_ROTATE_SHADEDSURFACE::RT_TPS_ROTATE_SHADEDSURFACE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_ROTATE_SHADEDSURFACE::InitAsDefaultInstance() {
}

RT_TPS_ROTATE_SHADEDSURFACE::RT_TPS_ROTATE_SHADEDSURFACE(const RT_TPS_ROTATE_SHADEDSURFACE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_ROTATE_SHADEDSURFACE::SharedCtor() {
  _cached_size_ = 0;
  viewercontrolid_ = 0;
  cellid_ = 0;
  precoordx_ = 0;
  precoordy_ = 0;
  currentcoordx_ = 0;
  currentcoordy_ = 0;
  mousetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_ROTATE_SHADEDSURFACE::~RT_TPS_ROTATE_SHADEDSURFACE() {
  SharedDtor();
}

void RT_TPS_ROTATE_SHADEDSURFACE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_ROTATE_SHADEDSURFACE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_ROTATE_SHADEDSURFACE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_ROTATE_SHADEDSURFACE_descriptor_;
}

const RT_TPS_ROTATE_SHADEDSURFACE& RT_TPS_ROTATE_SHADEDSURFACE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5frotate_2eproto();  return *default_instance_;
}

RT_TPS_ROTATE_SHADEDSURFACE* RT_TPS_ROTATE_SHADEDSURFACE::default_instance_ = NULL;

RT_TPS_ROTATE_SHADEDSURFACE* RT_TPS_ROTATE_SHADEDSURFACE::New() const {
  return new RT_TPS_ROTATE_SHADEDSURFACE;
}

void RT_TPS_ROTATE_SHADEDSURFACE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viewercontrolid_ = 0;
    cellid_ = 0;
    precoordx_ = 0;
    precoordy_ = 0;
    currentcoordx_ = 0;
    currentcoordy_ = 0;
    mousetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_ROTATE_SHADEDSURFACE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 viewerControlID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viewercontrolid_)));
          set_has_viewercontrolid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cellID;
        break;
      }
      
      // optional int32 cellID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cellID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cellid_)));
          set_has_cellid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_preCoordX;
        break;
      }
      
      // optional float preCoordX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_preCoordX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precoordx_)));
          set_has_precoordx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_preCoordY;
        break;
      }
      
      // optional float preCoordY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_preCoordY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &precoordy_)));
          set_has_precoordy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_currentCoordX;
        break;
      }
      
      // required float currentCoordX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_currentCoordX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentcoordx_)));
          set_has_currentcoordx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_currentCoordY;
        break;
      }
      
      // required float currentCoordY = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_currentCoordY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &currentcoordy_)));
          set_has_currentcoordy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mouseType;
        break;
      }
      
      // optional int32 mouseType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mouseType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mousetype_)));
          set_has_mousetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_ROTATE_SHADEDSURFACE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 viewerControlID = 1;
  if (has_viewercontrolid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viewercontrolid(), output);
  }
  
  // optional int32 cellID = 2;
  if (has_cellid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cellid(), output);
  }
  
  // optional float preCoordX = 3;
  if (has_precoordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->precoordx(), output);
  }
  
  // optional float preCoordY = 4;
  if (has_precoordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->precoordy(), output);
  }
  
  // required float currentCoordX = 5;
  if (has_currentcoordx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->currentcoordx(), output);
  }
  
  // required float currentCoordY = 6;
  if (has_currentcoordy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->currentcoordy(), output);
  }
  
  // optional int32 mouseType = 7;
  if (has_mousetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mousetype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_ROTATE_SHADEDSURFACE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 viewerControlID = 1;
  if (has_viewercontrolid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viewercontrolid(), target);
  }
  
  // optional int32 cellID = 2;
  if (has_cellid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cellid(), target);
  }
  
  // optional float preCoordX = 3;
  if (has_precoordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->precoordx(), target);
  }
  
  // optional float preCoordY = 4;
  if (has_precoordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->precoordy(), target);
  }
  
  // required float currentCoordX = 5;
  if (has_currentcoordx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->currentcoordx(), target);
  }
  
  // required float currentCoordY = 6;
  if (has_currentcoordy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->currentcoordy(), target);
  }
  
  // optional int32 mouseType = 7;
  if (has_mousetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mousetype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_ROTATE_SHADEDSURFACE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 viewerControlID = 1;
    if (has_viewercontrolid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viewercontrolid());
    }
    
    // optional int32 cellID = 2;
    if (has_cellid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cellid());
    }
    
    // optional float preCoordX = 3;
    if (has_precoordx()) {
      total_size += 1 + 4;
    }
    
    // optional float preCoordY = 4;
    if (has_precoordy()) {
      total_size += 1 + 4;
    }
    
    // required float currentCoordX = 5;
    if (has_currentcoordx()) {
      total_size += 1 + 4;
    }
    
    // required float currentCoordY = 6;
    if (has_currentcoordy()) {
      total_size += 1 + 4;
    }
    
    // optional int32 mouseType = 7;
    if (has_mousetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mousetype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_ROTATE_SHADEDSURFACE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_ROTATE_SHADEDSURFACE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_ROTATE_SHADEDSURFACE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_ROTATE_SHADEDSURFACE::MergeFrom(const RT_TPS_ROTATE_SHADEDSURFACE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewercontrolid()) {
      set_viewercontrolid(from.viewercontrolid());
    }
    if (from.has_cellid()) {
      set_cellid(from.cellid());
    }
    if (from.has_precoordx()) {
      set_precoordx(from.precoordx());
    }
    if (from.has_precoordy()) {
      set_precoordy(from.precoordy());
    }
    if (from.has_currentcoordx()) {
      set_currentcoordx(from.currentcoordx());
    }
    if (from.has_currentcoordy()) {
      set_currentcoordy(from.currentcoordy());
    }
    if (from.has_mousetype()) {
      set_mousetype(from.mousetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_ROTATE_SHADEDSURFACE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_ROTATE_SHADEDSURFACE::CopyFrom(const RT_TPS_ROTATE_SHADEDSURFACE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_ROTATE_SHADEDSURFACE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000030) != 0x00000030) return false;
  
  return true;
}

void RT_TPS_ROTATE_SHADEDSURFACE::Swap(RT_TPS_ROTATE_SHADEDSURFACE* other) {
  if (other != this) {
    std::swap(viewercontrolid_, other->viewercontrolid_);
    std::swap(cellid_, other->cellid_);
    std::swap(precoordx_, other->precoordx_);
    std::swap(precoordy_, other->precoordy_);
    std::swap(currentcoordx_, other->currentcoordx_);
    std::swap(currentcoordy_, other->currentcoordy_);
    std::swap(mousetype_, other->mousetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_ROTATE_SHADEDSURFACE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_ROTATE_SHADEDSURFACE_descriptor_;
  metadata.reflection = RT_TPS_ROTATE_SHADEDSURFACE_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
