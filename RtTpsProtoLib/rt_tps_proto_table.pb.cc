// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_table.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        namespace {

            const ::google::protobuf::Descriptor* RtTpsProtoTable_descriptor_ = NULL;
            const ::google::protobuf::internal::GeneratedMessageReflection*
                RtTpsProtoTable_reflection_ = NULL;
            const ::google::protobuf::Descriptor* RtTpsProtoRepeatedTable_descriptor_ = NULL;
            const ::google::protobuf::internal::GeneratedMessageReflection*
                RtTpsProtoRepeatedTable_reflection_ = NULL;

        }  // namespace


        void protobuf_AssignDesc_rt_5ftps_5fproto_5ftable_2eproto() {
            protobuf_AddDesc_rt_5ftps_5fproto_5ftable_2eproto();
            const ::google::protobuf::FileDescriptor* file =
                ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "rt_tps_proto_table.proto");
            GOOGLE_CHECK(file != NULL);
            RtTpsProtoTable_descriptor_ = file->message_type(0);
            static const int RtTpsProtoTable_offsets_[2] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTable, uid_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTable, name_),
            };
            RtTpsProtoTable_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                RtTpsProtoTable_descriptor_,
                RtTpsProtoTable::default_instance_,
                RtTpsProtoTable_offsets_,
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTable, _has_bits_[0]),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoTable, _unknown_fields_),
                -1,
                ::google::protobuf::DescriptorPool::generated_pool(),
                ::google::protobuf::MessageFactory::generated_factory(),
                sizeof(RtTpsProtoTable));
            RtTpsProtoRepeatedTable_descriptor_ = file->message_type(1);
            static const int RtTpsProtoRepeatedTable_offsets_[1] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedTable, table_),
            };
            RtTpsProtoRepeatedTable_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                RtTpsProtoRepeatedTable_descriptor_,
                RtTpsProtoRepeatedTable::default_instance_,
                RtTpsProtoRepeatedTable_offsets_,
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedTable, _has_bits_[0]),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedTable, _unknown_fields_),
                -1,
                ::google::protobuf::DescriptorPool::generated_pool(),
                ::google::protobuf::MessageFactory::generated_factory(),
                sizeof(RtTpsProtoRepeatedTable));
        }

        namespace {

            GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
            inline void protobuf_AssignDescriptorsOnce() {
                ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                    &protobuf_AssignDesc_rt_5ftps_5fproto_5ftable_2eproto);
            }

            void protobuf_RegisterTypes(const ::std::string&) {
                protobuf_AssignDescriptorsOnce();
                ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    RtTpsProtoTable_descriptor_, &RtTpsProtoTable::default_instance());
                ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    RtTpsProtoRepeatedTable_descriptor_, &RtTpsProtoRepeatedTable::default_instance());
            }

        }  // namespace

        void protobuf_ShutdownFile_rt_5ftps_5fproto_5ftable_2eproto() {
            delete RtTpsProtoTable::default_instance_;
            delete RtTpsProtoTable_reflection_;
            delete RtTpsProtoRepeatedTable::default_instance_;
            delete RtTpsProtoRepeatedTable_reflection_;
        }

        void protobuf_AddDesc_rt_5ftps_5fproto_5ftable_2eproto() {
            static bool already_here = false;
            if (already_here) return;
            already_here = true;
            GOOGLE_PROTOBUF_VERIFY_VERSION;

            ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                "\n\030rt_tps_proto_table.proto\022\ttps.proto\",\n"
                "\017RtTpsProtoTable\022\013\n\003uid\030\001 \002(\t\022\014\n\004name\030\002 "
                "\002(\t\"D\n\027RtTpsProtoRepeatedTable\022)\n\005table\030"
                "\001 \003(\0132\032.tps.proto.RtTpsProtoTable", 153);
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                "rt_tps_proto_table.proto", &protobuf_RegisterTypes);
            RtTpsProtoTable::default_instance_ = new RtTpsProtoTable();
            RtTpsProtoRepeatedTable::default_instance_ = new RtTpsProtoRepeatedTable();
            RtTpsProtoTable::default_instance_->InitAsDefaultInstance();
            RtTpsProtoRepeatedTable::default_instance_->InitAsDefaultInstance();
            ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5ftable_2eproto);
        }

        // Force AddDescriptors() to be called at static initialization time.
        struct StaticDescriptorInitializer_rt_5ftps_5fproto_5ftable_2eproto {
            StaticDescriptorInitializer_rt_5ftps_5fproto_5ftable_2eproto() {
                protobuf_AddDesc_rt_5ftps_5fproto_5ftable_2eproto();
            }
        } static_descriptor_initializer_rt_5ftps_5fproto_5ftable_2eproto_;


        // ===================================================================

#ifndef _MSC_VER
        const int RtTpsProtoTable::kUidFieldNumber;
        const int RtTpsProtoTable::kNameFieldNumber;
#endif  // !_MSC_VER

        RtTpsProtoTable::RtTpsProtoTable()
            : ::google::protobuf::Message() {
                SharedCtor();
        }

        void RtTpsProtoTable::InitAsDefaultInstance() {
        }

        RtTpsProtoTable::RtTpsProtoTable(const RtTpsProtoTable& from)
            : ::google::protobuf::Message() {
                SharedCtor();
                MergeFrom(from);
        }

        void RtTpsProtoTable::SharedCtor() {
            _cached_size_ = 0;
            uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        RtTpsProtoTable::~RtTpsProtoTable() {
            SharedDtor();
        }

        void RtTpsProtoTable::SharedDtor() {
            if (uid_ != &::google::protobuf::internal::kEmptyString) {
                delete uid_;
            }
            if (name_ != &::google::protobuf::internal::kEmptyString) {
                delete name_;
            }
            if (this != default_instance_) {
            }
        }

        void RtTpsProtoTable::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RtTpsProtoTable::descriptor() {
            protobuf_AssignDescriptorsOnce();
            return RtTpsProtoTable_descriptor_;
        }

        const RtTpsProtoTable& RtTpsProtoTable::default_instance() {
            if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5ftable_2eproto();  return *default_instance_;
        }

        RtTpsProtoTable* RtTpsProtoTable::default_instance_ = NULL;

        RtTpsProtoTable* RtTpsProtoTable::New() const {
            return new RtTpsProtoTable;
        }

        void RtTpsProtoTable::Clear() {
            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (has_uid()) {
                    if (uid_ != &::google::protobuf::internal::kEmptyString) {
                        uid_->clear();
                    }
                }
                if (has_name()) {
                    if (name_ != &::google::protobuf::internal::kEmptyString) {
                        name_->clear();
                    }
                }
            }
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            mutable_unknown_fields()->Clear();
        }

        bool RtTpsProtoTable::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
                ::google::protobuf::uint32 tag;
                while ((tag = input->ReadTag()) != 0) {
                    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                        // required string uid = 1;
                    case 1: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
                                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                    input, this->mutable_uid()));
                                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                    this->uid().data(), this->uid().length(),
                                    ::google::protobuf::internal::WireFormat::PARSE);
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(18)) goto parse_name;
                        break;
                            }

                            // required string name = 2;
                    case 2: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_name:
                                DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                                    input, this->mutable_name()));
                                ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                                    this->name().data(), this->name().length(),
                                    ::google::protobuf::internal::WireFormat::PARSE);
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectAtEnd()) return true;
                        break;
                            }

                    default: {
handle_uninterpreted:
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                return true;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                        break;
                             }
                    }
                }
                return true;
#undef DO_
        }

        void RtTpsProtoTable::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
                // required string uid = 1;
                if (has_uid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->uid().data(), this->uid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    ::google::protobuf::internal::WireFormatLite::WriteString(
                        1, this->uid(), output);
                }

                // required string name = 2;
                if (has_name()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->name().data(), this->name().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    ::google::protobuf::internal::WireFormatLite::WriteString(
                        2, this->name(), output);
                }

                if (!unknown_fields().empty()) {
                    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                        unknown_fields(), output);
                }
        }

        ::google::protobuf::uint8* RtTpsProtoTable::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8* target) const {
                // required string uid = 1;
                if (has_uid()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->uid().data(), this->uid().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    target =
                        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        1, this->uid(), target);
                }

                // required string name = 2;
                if (has_name()) {
                    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
                        this->name().data(), this->name().length(),
                        ::google::protobuf::internal::WireFormat::SERIALIZE);
                    target =
                        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
                        2, this->name(), target);
                }

                if (!unknown_fields().empty()) {
                    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                        unknown_fields(), target);
                }
                return target;
        }

        int RtTpsProtoTable::ByteSize() const {
            int total_size = 0;

            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                // required string uid = 1;
                if (has_uid()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->uid());
                }

                // required string name = 2;
                if (has_name()) {
                    total_size += 1 +
                        ::google::protobuf::internal::WireFormatLite::StringSize(
                        this->name());
                }

            }
            if (!unknown_fields().empty()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RtTpsProtoTable::MergeFrom(const ::google::protobuf::Message& from) {
            GOOGLE_CHECK_NE(&from, this);
            const RtTpsProtoTable* source =
                ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoTable*>(
                &from);
            if (source == NULL) {
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                MergeFrom(*source);
            }
        }

        void RtTpsProtoTable::MergeFrom(const RtTpsProtoTable& from) {
            GOOGLE_CHECK_NE(&from, this);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_uid()) {
                    set_uid(from.uid());
                }
                if (from.has_name()) {
                    set_name(from.name());
                }
            }
            mutable_unknown_fields()->MergeFrom(from.unknown_fields());
        }

        void RtTpsProtoTable::CopyFrom(const ::google::protobuf::Message& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RtTpsProtoTable::CopyFrom(const RtTpsProtoTable& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RtTpsProtoTable::IsInitialized() const {
            if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

            return true;
        }

        void RtTpsProtoTable::Swap(RtTpsProtoTable* other) {
            if (other != this) {
                std::swap(uid_, other->uid_);
                std::swap(name_, other->name_);
                std::swap(_has_bits_[0], other->_has_bits_[0]);
                _unknown_fields_.Swap(&other->_unknown_fields_);
                std::swap(_cached_size_, other->_cached_size_);
            }
        }

        ::google::protobuf::Metadata RtTpsProtoTable::GetMetadata() const {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::Metadata metadata;
            metadata.descriptor = RtTpsProtoTable_descriptor_;
            metadata.reflection = RtTpsProtoTable_reflection_;
            return metadata;
        }


        // ===================================================================

#ifndef _MSC_VER
        const int RtTpsProtoRepeatedTable::kTableFieldNumber;
#endif  // !_MSC_VER

        RtTpsProtoRepeatedTable::RtTpsProtoRepeatedTable()
            : ::google::protobuf::Message() {
                SharedCtor();
        }

        void RtTpsProtoRepeatedTable::InitAsDefaultInstance() {
        }

        RtTpsProtoRepeatedTable::RtTpsProtoRepeatedTable(const RtTpsProtoRepeatedTable& from)
            : ::google::protobuf::Message() {
                SharedCtor();
                MergeFrom(from);
        }

        void RtTpsProtoRepeatedTable::SharedCtor() {
            _cached_size_ = 0;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        RtTpsProtoRepeatedTable::~RtTpsProtoRepeatedTable() {
            SharedDtor();
        }

        void RtTpsProtoRepeatedTable::SharedDtor() {
            if (this != default_instance_) {
            }
        }

        void RtTpsProtoRepeatedTable::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RtTpsProtoRepeatedTable::descriptor() {
            protobuf_AssignDescriptorsOnce();
            return RtTpsProtoRepeatedTable_descriptor_;
        }

        const RtTpsProtoRepeatedTable& RtTpsProtoRepeatedTable::default_instance() {
            if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5ftable_2eproto();  return *default_instance_;
        }

        RtTpsProtoRepeatedTable* RtTpsProtoRepeatedTable::default_instance_ = NULL;

        RtTpsProtoRepeatedTable* RtTpsProtoRepeatedTable::New() const {
            return new RtTpsProtoRepeatedTable;
        }

        void RtTpsProtoRepeatedTable::Clear() {
            table_.Clear();
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            mutable_unknown_fields()->Clear();
        }

        bool RtTpsProtoRepeatedTable::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
                ::google::protobuf::uint32 tag;
                while ((tag = input->ReadTag()) != 0) {
                    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                        // repeated .tps.proto.RtTpsProtoTable table = 1;
                    case 1: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_table:
                                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                                    input, add_table()));
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(10)) goto parse_table;
                        if (input->ExpectAtEnd()) return true;
                        break;
                            }

                    default: {
handle_uninterpreted:
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                return true;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                        break;
                             }
                    }
                }
                return true;
#undef DO_
        }

        void RtTpsProtoRepeatedTable::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
                // repeated .tps.proto.RtTpsProtoTable table = 1;
                for (int i = 0; i < this->table_size(); i++) {
                    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                        1, this->table(i), output);
                }

                if (!unknown_fields().empty()) {
                    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                        unknown_fields(), output);
                }
        }

        ::google::protobuf::uint8* RtTpsProtoRepeatedTable::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8* target) const {
                // repeated .tps.proto.RtTpsProtoTable table = 1;
                for (int i = 0; i < this->table_size(); i++) {
                    target = ::google::protobuf::internal::WireFormatLite::
                        WriteMessageNoVirtualToArray(
                        1, this->table(i), target);
                }

                if (!unknown_fields().empty()) {
                    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                        unknown_fields(), target);
                }
                return target;
        }

        int RtTpsProtoRepeatedTable::ByteSize() const {
            int total_size = 0;

            // repeated .tps.proto.RtTpsProtoTable table = 1;
            total_size += 1 * this->table_size();
            for (int i = 0; i < this->table_size(); i++) {
                total_size +=
                    ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                    this->table(i));
            }

            if (!unknown_fields().empty()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RtTpsProtoRepeatedTable::MergeFrom(const ::google::protobuf::Message& from) {
            GOOGLE_CHECK_NE(&from, this);
            const RtTpsProtoRepeatedTable* source =
                ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedTable*>(
                &from);
            if (source == NULL) {
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                MergeFrom(*source);
            }
        }

        void RtTpsProtoRepeatedTable::MergeFrom(const RtTpsProtoRepeatedTable& from) {
            GOOGLE_CHECK_NE(&from, this);
            table_.MergeFrom(from.table_);
            mutable_unknown_fields()->MergeFrom(from.unknown_fields());
        }

        void RtTpsProtoRepeatedTable::CopyFrom(const ::google::protobuf::Message& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RtTpsProtoRepeatedTable::CopyFrom(const RtTpsProtoRepeatedTable& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RtTpsProtoRepeatedTable::IsInitialized() const {

            for (int i = 0; i < table_size(); i++) {
                if (!this->table(i).IsInitialized()) return false;
            }
            return true;
        }

        void RtTpsProtoRepeatedTable::Swap(RtTpsProtoRepeatedTable* other) {
            if (other != this) {
                table_.Swap(&other->table_);
                std::swap(_has_bits_[0], other->_has_bits_[0]);
                _unknown_fields_.Swap(&other->_unknown_fields_);
                std::swap(_cached_size_, other->_cached_size_);
            }
        }

        ::google::protobuf::Metadata RtTpsProtoRepeatedTable::GetMetadata() const {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::Metadata metadata;
            metadata.descriptor = RtTpsProtoRepeatedTable_descriptor_;
            metadata.reflection = RtTpsProtoRepeatedTable_reflection_;
            return metadata;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
