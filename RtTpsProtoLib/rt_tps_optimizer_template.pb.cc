// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_optimizer_template.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_SimpleOptgoal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_SimpleOptgoal_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_OptimizerTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_OptimizerTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_OptimizerTemplate_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_OptimizerTemplate_List_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto() {
  protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_optimizer_template.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_SimpleOptgoal_descriptor_ = file->message_type(0);
  static const int RT_TPS_SimpleOptgoal_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, fuctiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, minmaxflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, eud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, ishard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, target_),
  };
  RT_TPS_SimpleOptgoal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_SimpleOptgoal_descriptor_,
      RT_TPS_SimpleOptgoal::default_instance_,
      RT_TPS_SimpleOptgoal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleOptgoal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_SimpleOptgoal));
  RT_TPS_OptimizerTemplate_descriptor_ = file->message_type(1);
  static const int RT_TPS_OptimizerTemplate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, templateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, templatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, templatedescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, optgoals_),
  };
  RT_TPS_OptimizerTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_OptimizerTemplate_descriptor_,
      RT_TPS_OptimizerTemplate::default_instance_,
      RT_TPS_OptimizerTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_OptimizerTemplate));
  RT_TPS_OptimizerTemplate_List_descriptor_ = file->message_type(2);
  static const int RT_TPS_OptimizerTemplate_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate_List, optimizertemplates_),
  };
  RT_TPS_OptimizerTemplate_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_OptimizerTemplate_List_descriptor_,
      RT_TPS_OptimizerTemplate_List::default_instance_,
      RT_TPS_OptimizerTemplate_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptimizerTemplate_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_OptimizerTemplate_List));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_SimpleOptgoal_descriptor_, &RT_TPS_SimpleOptgoal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_OptimizerTemplate_descriptor_, &RT_TPS_OptimizerTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_OptimizerTemplate_List_descriptor_, &RT_TPS_OptimizerTemplate_List::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5foptimizer_5ftemplate_2eproto() {
  delete RT_TPS_SimpleOptgoal::default_instance_;
  delete RT_TPS_SimpleOptgoal_reflection_;
  delete RT_TPS_OptimizerTemplate::default_instance_;
  delete RT_TPS_OptimizerTemplate_reflection_;
  delete RT_TPS_OptimizerTemplate_List::default_instance_;
  delete RT_TPS_OptimizerTemplate_List_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rt_tps_optimizer_template.proto\022\ttps.p"
    "roto\"\232\001\n\024RT_TPS_SimpleOptgoal\022\023\n\013fuction"
    "Type\030\001 \001(\005\022\022\n\nminMaxFlag\030\002 \001(\005\022\014\n\004dose\030\003"
    " \001(\002\022\016\n\006volume\030\004 \001(\002\022\013\n\003eud\030\005 \001(\002\022\016\n\006wei"
    "ght\030\006 \001(\002\022\016\n\006isHard\030\007 \001(\010\022\016\n\006target\030\010 \001("
    "\t\"\225\001\n\030RT_TPS_OptimizerTemplate\022\023\n\013templa"
    "teUID\030\001 \001(\t\022\024\n\014templateName\030\002 \001(\t\022\033\n\023tem"
    "plateDescription\030\003 \001(\t\0221\n\010optGoals\030\004 \003(\013"
    "2\037.tps.proto.RT_TPS_SimpleOptgoal\"`\n\035RT_"
    "TPS_OptimizerTemplate_List\022\?\n\022optimizerT"
    "emplates\030\001 \003(\0132#.tps.proto.RT_TPS_Optimi"
    "zerTemplate", 451);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_optimizer_template.proto", &protobuf_RegisterTypes);
  RT_TPS_SimpleOptgoal::default_instance_ = new RT_TPS_SimpleOptgoal();
  RT_TPS_OptimizerTemplate::default_instance_ = new RT_TPS_OptimizerTemplate();
  RT_TPS_OptimizerTemplate_List::default_instance_ = new RT_TPS_OptimizerTemplate_List();
  RT_TPS_SimpleOptgoal::default_instance_->InitAsDefaultInstance();
  RT_TPS_OptimizerTemplate::default_instance_->InitAsDefaultInstance();
  RT_TPS_OptimizerTemplate_List::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5foptimizer_5ftemplate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5foptimizer_5ftemplate_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5foptimizer_5ftemplate_2eproto() {
    protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5foptimizer_5ftemplate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_SimpleOptgoal::kFuctionTypeFieldNumber;
const int RT_TPS_SimpleOptgoal::kMinMaxFlagFieldNumber;
const int RT_TPS_SimpleOptgoal::kDoseFieldNumber;
const int RT_TPS_SimpleOptgoal::kVolumeFieldNumber;
const int RT_TPS_SimpleOptgoal::kEudFieldNumber;
const int RT_TPS_SimpleOptgoal::kWeightFieldNumber;
const int RT_TPS_SimpleOptgoal::kIsHardFieldNumber;
const int RT_TPS_SimpleOptgoal::kTargetFieldNumber;
#endif  // !_MSC_VER

RT_TPS_SimpleOptgoal::RT_TPS_SimpleOptgoal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_SimpleOptgoal::InitAsDefaultInstance() {
}

RT_TPS_SimpleOptgoal::RT_TPS_SimpleOptgoal(const RT_TPS_SimpleOptgoal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_SimpleOptgoal::SharedCtor() {
  _cached_size_ = 0;
  fuctiontype_ = 0;
  minmaxflag_ = 0;
  dose_ = 0;
  volume_ = 0;
  eud_ = 0;
  weight_ = 0;
  ishard_ = false;
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_SimpleOptgoal::~RT_TPS_SimpleOptgoal() {
  SharedDtor();
}

void RT_TPS_SimpleOptgoal::SharedDtor() {
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_SimpleOptgoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_SimpleOptgoal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_SimpleOptgoal_descriptor_;
}

const RT_TPS_SimpleOptgoal& RT_TPS_SimpleOptgoal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto();  return *default_instance_;
}

RT_TPS_SimpleOptgoal* RT_TPS_SimpleOptgoal::default_instance_ = NULL;

RT_TPS_SimpleOptgoal* RT_TPS_SimpleOptgoal::New() const {
  return new RT_TPS_SimpleOptgoal;
}

void RT_TPS_SimpleOptgoal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fuctiontype_ = 0;
    minmaxflag_ = 0;
    dose_ = 0;
    volume_ = 0;
    eud_ = 0;
    weight_ = 0;
    ishard_ = false;
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_SimpleOptgoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fuctionType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuctiontype_)));
          set_has_fuctiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_minMaxFlag;
        break;
      }
      
      // optional int32 minMaxFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minMaxFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmaxflag_)));
          set_has_minmaxflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dose;
        break;
      }
      
      // optional float dose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_volume;
        break;
      }
      
      // optional float volume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_eud;
        break;
      }
      
      // optional float eud = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eud_)));
          set_has_eud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_weight;
        break;
      }
      
      // optional float weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isHard;
        break;
      }
      
      // optional bool isHard = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishard_)));
          set_has_ishard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_target;
        break;
      }
      
      // optional string target = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_SimpleOptgoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 fuctionType = 1;
  if (has_fuctiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fuctiontype(), output);
  }
  
  // optional int32 minMaxFlag = 2;
  if (has_minmaxflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minmaxflag(), output);
  }
  
  // optional float dose = 3;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dose(), output);
  }
  
  // optional float volume = 4;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->volume(), output);
  }
  
  // optional float eud = 5;
  if (has_eud()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->eud(), output);
  }
  
  // optional float weight = 6;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->weight(), output);
  }
  
  // optional bool isHard = 7;
  if (has_ishard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ishard(), output);
  }
  
  // optional string target = 8;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_SimpleOptgoal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 fuctionType = 1;
  if (has_fuctiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fuctiontype(), target);
  }
  
  // optional int32 minMaxFlag = 2;
  if (has_minmaxflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->minmaxflag(), target);
  }
  
  // optional float dose = 3;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dose(), target);
  }
  
  // optional float volume = 4;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->volume(), target);
  }
  
  // optional float eud = 5;
  if (has_eud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->eud(), target);
  }
  
  // optional float weight = 6;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->weight(), target);
  }
  
  // optional bool isHard = 7;
  if (has_ishard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ishard(), target);
  }
  
  // optional string target = 8;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_SimpleOptgoal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 fuctionType = 1;
    if (has_fuctiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuctiontype());
    }
    
    // optional int32 minMaxFlag = 2;
    if (has_minmaxflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmaxflag());
    }
    
    // optional float dose = 3;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
    // optional float volume = 4;
    if (has_volume()) {
      total_size += 1 + 4;
    }
    
    // optional float eud = 5;
    if (has_eud()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 6;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
    // optional bool isHard = 7;
    if (has_ishard()) {
      total_size += 1 + 1;
    }
    
    // optional string target = 8;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_SimpleOptgoal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_SimpleOptgoal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_SimpleOptgoal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_SimpleOptgoal::MergeFrom(const RT_TPS_SimpleOptgoal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fuctiontype()) {
      set_fuctiontype(from.fuctiontype());
    }
    if (from.has_minmaxflag()) {
      set_minmaxflag(from.minmaxflag());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_eud()) {
      set_eud(from.eud());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_ishard()) {
      set_ishard(from.ishard());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_SimpleOptgoal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_SimpleOptgoal::CopyFrom(const RT_TPS_SimpleOptgoal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_SimpleOptgoal::IsInitialized() const {
  
  return true;
}

void RT_TPS_SimpleOptgoal::Swap(RT_TPS_SimpleOptgoal* other) {
  if (other != this) {
    std::swap(fuctiontype_, other->fuctiontype_);
    std::swap(minmaxflag_, other->minmaxflag_);
    std::swap(dose_, other->dose_);
    std::swap(volume_, other->volume_);
    std::swap(eud_, other->eud_);
    std::swap(weight_, other->weight_);
    std::swap(ishard_, other->ishard_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_SimpleOptgoal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_SimpleOptgoal_descriptor_;
  metadata.reflection = RT_TPS_SimpleOptgoal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_OptimizerTemplate::kTemplateUIDFieldNumber;
const int RT_TPS_OptimizerTemplate::kTemplateNameFieldNumber;
const int RT_TPS_OptimizerTemplate::kTemplateDescriptionFieldNumber;
const int RT_TPS_OptimizerTemplate::kOptGoalsFieldNumber;
#endif  // !_MSC_VER

RT_TPS_OptimizerTemplate::RT_TPS_OptimizerTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_OptimizerTemplate::InitAsDefaultInstance() {
}

RT_TPS_OptimizerTemplate::RT_TPS_OptimizerTemplate(const RT_TPS_OptimizerTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_OptimizerTemplate::SharedCtor() {
  _cached_size_ = 0;
  templateuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatedescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_OptimizerTemplate::~RT_TPS_OptimizerTemplate() {
  SharedDtor();
}

void RT_TPS_OptimizerTemplate::SharedDtor() {
  if (templateuid_ != &::google::protobuf::internal::kEmptyString) {
    delete templateuid_;
  }
  if (templatename_ != &::google::protobuf::internal::kEmptyString) {
    delete templatename_;
  }
  if (templatedescription_ != &::google::protobuf::internal::kEmptyString) {
    delete templatedescription_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_OptimizerTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_OptimizerTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_OptimizerTemplate_descriptor_;
}

const RT_TPS_OptimizerTemplate& RT_TPS_OptimizerTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto();  return *default_instance_;
}

RT_TPS_OptimizerTemplate* RT_TPS_OptimizerTemplate::default_instance_ = NULL;

RT_TPS_OptimizerTemplate* RT_TPS_OptimizerTemplate::New() const {
  return new RT_TPS_OptimizerTemplate;
}

void RT_TPS_OptimizerTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_templateuid()) {
      if (templateuid_ != &::google::protobuf::internal::kEmptyString) {
        templateuid_->clear();
      }
    }
    if (has_templatename()) {
      if (templatename_ != &::google::protobuf::internal::kEmptyString) {
        templatename_->clear();
      }
    }
    if (has_templatedescription()) {
      if (templatedescription_ != &::google::protobuf::internal::kEmptyString) {
        templatedescription_->clear();
      }
    }
  }
  optgoals_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_OptimizerTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string templateUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templateuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templateuid().data(), this->templateuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_templateName;
        break;
      }
      
      // optional string templateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatename().data(), this->templatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_templateDescription;
        break;
      }
      
      // optional string templateDescription = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templateDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatedescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatedescription().data(), this->templatedescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_optGoals;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_SimpleOptgoal optGoals = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optGoals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optgoals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_optGoals;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_OptimizerTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string templateUID = 1;
  if (has_templateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templateuid().data(), this->templateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->templateuid(), output);
  }
  
  // optional string templateName = 2;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->templatename(), output);
  }
  
  // optional string templateDescription = 3;
  if (has_templatedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatedescription().data(), this->templatedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->templatedescription(), output);
  }
  
  // repeated .tps.proto.RT_TPS_SimpleOptgoal optGoals = 4;
  for (int i = 0; i < this->optgoals_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->optgoals(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_OptimizerTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string templateUID = 1;
  if (has_templateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templateuid().data(), this->templateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->templateuid(), target);
  }
  
  // optional string templateName = 2;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->templatename(), target);
  }
  
  // optional string templateDescription = 3;
  if (has_templatedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatedescription().data(), this->templatedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatedescription(), target);
  }
  
  // repeated .tps.proto.RT_TPS_SimpleOptgoal optGoals = 4;
  for (int i = 0; i < this->optgoals_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->optgoals(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_OptimizerTemplate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string templateUID = 1;
    if (has_templateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templateuid());
    }
    
    // optional string templateName = 2;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }
    
    // optional string templateDescription = 3;
    if (has_templatedescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatedescription());
    }
    
  }
  // repeated .tps.proto.RT_TPS_SimpleOptgoal optGoals = 4;
  total_size += 1 * this->optgoals_size();
  for (int i = 0; i < this->optgoals_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optgoals(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_OptimizerTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_OptimizerTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_OptimizerTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_OptimizerTemplate::MergeFrom(const RT_TPS_OptimizerTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  optgoals_.MergeFrom(from.optgoals_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateuid()) {
      set_templateuid(from.templateuid());
    }
    if (from.has_templatename()) {
      set_templatename(from.templatename());
    }
    if (from.has_templatedescription()) {
      set_templatedescription(from.templatedescription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_OptimizerTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_OptimizerTemplate::CopyFrom(const RT_TPS_OptimizerTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_OptimizerTemplate::IsInitialized() const {
  
  return true;
}

void RT_TPS_OptimizerTemplate::Swap(RT_TPS_OptimizerTemplate* other) {
  if (other != this) {
    std::swap(templateuid_, other->templateuid_);
    std::swap(templatename_, other->templatename_);
    std::swap(templatedescription_, other->templatedescription_);
    optgoals_.Swap(&other->optgoals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_OptimizerTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_OptimizerTemplate_descriptor_;
  metadata.reflection = RT_TPS_OptimizerTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_OptimizerTemplate_List::kOptimizerTemplatesFieldNumber;
#endif  // !_MSC_VER

RT_TPS_OptimizerTemplate_List::RT_TPS_OptimizerTemplate_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_OptimizerTemplate_List::InitAsDefaultInstance() {
}

RT_TPS_OptimizerTemplate_List::RT_TPS_OptimizerTemplate_List(const RT_TPS_OptimizerTemplate_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_OptimizerTemplate_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_OptimizerTemplate_List::~RT_TPS_OptimizerTemplate_List() {
  SharedDtor();
}

void RT_TPS_OptimizerTemplate_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_OptimizerTemplate_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_OptimizerTemplate_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_OptimizerTemplate_List_descriptor_;
}

const RT_TPS_OptimizerTemplate_List& RT_TPS_OptimizerTemplate_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5foptimizer_5ftemplate_2eproto();  return *default_instance_;
}

RT_TPS_OptimizerTemplate_List* RT_TPS_OptimizerTemplate_List::default_instance_ = NULL;

RT_TPS_OptimizerTemplate_List* RT_TPS_OptimizerTemplate_List::New() const {
  return new RT_TPS_OptimizerTemplate_List;
}

void RT_TPS_OptimizerTemplate_List::Clear() {
  optimizertemplates_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_OptimizerTemplate_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_OptimizerTemplate optimizerTemplates = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimizerTemplates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_optimizertemplates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_optimizerTemplates;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_OptimizerTemplate_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_OptimizerTemplate optimizerTemplates = 1;
  for (int i = 0; i < this->optimizertemplates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->optimizertemplates(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_OptimizerTemplate_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_OptimizerTemplate optimizerTemplates = 1;
  for (int i = 0; i < this->optimizertemplates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->optimizertemplates(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_OptimizerTemplate_List::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_OptimizerTemplate optimizerTemplates = 1;
  total_size += 1 * this->optimizertemplates_size();
  for (int i = 0; i < this->optimizertemplates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->optimizertemplates(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_OptimizerTemplate_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_OptimizerTemplate_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_OptimizerTemplate_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_OptimizerTemplate_List::MergeFrom(const RT_TPS_OptimizerTemplate_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  optimizertemplates_.MergeFrom(from.optimizertemplates_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_OptimizerTemplate_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_OptimizerTemplate_List::CopyFrom(const RT_TPS_OptimizerTemplate_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_OptimizerTemplate_List::IsInitialized() const {
  
  return true;
}

void RT_TPS_OptimizerTemplate_List::Swap(RT_TPS_OptimizerTemplate_List* other) {
  if (other != this) {
    optimizertemplates_.Swap(&other->optimizertemplates_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_OptimizerTemplate_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_OptimizerTemplate_List_descriptor_;
  metadata.reflection = RT_TPS_OptimizerTemplate_List_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
