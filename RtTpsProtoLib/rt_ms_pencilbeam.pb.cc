// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_pencilbeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_PencilBeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilBeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PencilPDDTMR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilPDDTMR_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PencilBeamPhysicalWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilBeamPhysicalWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PencilContourVerter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilContourVerter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PencilBeamVirtualWedgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilBeamVirtualWedgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PencilVirtualWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PencilVirtualWedgeField_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fpencilbeam_2eproto() {
  protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_pencilbeam.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_PencilBeam_descriptor_ = file->message_type(0);
  static const int RT_MS_PencilBeam_offsets_[36] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, diamone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, diamtwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, srcratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, transmission_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, psd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, sddxjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, sddyjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, xk0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, xk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, xk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, yk0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, yk1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, yk2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, tmrlistlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, physicalwedgefieldlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, virtualwedgeinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, accname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, accessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, algtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, scxcountproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, scycountproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, scxpositionsproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, scypositionsproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, scblocbproto_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, referencefluence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, diamthree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, srcratio3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, eeqdiam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, depthvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, radiusvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, sar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, flatnessradiusvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, flatnessdepthvec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, flatness_),
  };
  RT_MS_PencilBeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilBeam_descriptor_,
      RT_MS_PencilBeam::default_instance_,
      RT_MS_PencilBeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilBeam));
  RT_MS_PencilPDDTMR_descriptor_ = file->message_type(1);
  static const int RT_MS_PencilPDDTMR_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilPDDTMR, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilPDDTMR, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilPDDTMR, value_),
  };
  RT_MS_PencilPDDTMR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilPDDTMR_descriptor_,
      RT_MS_PencilPDDTMR::default_instance_,
      RT_MS_PencilPDDTMR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilPDDTMR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilPDDTMR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilPDDTMR));
  RT_MS_PencilBeamPhysicalWedgeField_descriptor_ = file->message_type(2);
  static const int RT_MS_PencilBeamPhysicalWedgeField_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, wedgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, dmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, dmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, dmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, hvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carriermu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrierdmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrierdmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrierdmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrierhvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, wedgethick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrierthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, weightcontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carriercontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, carrieruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, contouruid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, contouruid2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, density_),
  };
  RT_MS_PencilBeamPhysicalWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilBeamPhysicalWedgeField_descriptor_,
      RT_MS_PencilBeamPhysicalWedgeField::default_instance_,
      RT_MS_PencilBeamPhysicalWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamPhysicalWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilBeamPhysicalWedgeField));
  RT_MS_PencilContourVerter_descriptor_ = file->message_type(3);
  static const int RT_MS_PencilContourVerter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilContourVerter, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilContourVerter, contourverterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilContourVerter, contourvertery_),
  };
  RT_MS_PencilContourVerter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilContourVerter_descriptor_,
      RT_MS_PencilContourVerter::default_instance_,
      RT_MS_PencilContourVerter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilContourVerter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilContourVerter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilContourVerter));
  RT_MS_PencilBeamVirtualWedgeInfo_descriptor_ = file->message_type(4);
  static const int RT_MS_PencilBeamVirtualWedgeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamVirtualWedgeInfo, virtualuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamVirtualWedgeInfo, goldenuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamVirtualWedgeInfo, virtualwedgefieldlist_),
  };
  RT_MS_PencilBeamVirtualWedgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilBeamVirtualWedgeInfo_descriptor_,
      RT_MS_PencilBeamVirtualWedgeInfo::default_instance_,
      RT_MS_PencilBeamVirtualWedgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamVirtualWedgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilBeamVirtualWedgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilBeamVirtualWedgeInfo));
  RT_MS_PencilVirtualWedgeField_descriptor_ = file->message_type(5);
  static const int RT_MS_PencilVirtualWedgeField_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, collimatorx1position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, collimatorx2position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, relativemu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, correctionfactor_),
  };
  RT_MS_PencilVirtualWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PencilVirtualWedgeField_descriptor_,
      RT_MS_PencilVirtualWedgeField::default_instance_,
      RT_MS_PencilVirtualWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PencilVirtualWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PencilVirtualWedgeField));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fpencilbeam_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilBeam_descriptor_, &RT_MS_PencilBeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilPDDTMR_descriptor_, &RT_MS_PencilPDDTMR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilBeamPhysicalWedgeField_descriptor_, &RT_MS_PencilBeamPhysicalWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilContourVerter_descriptor_, &RT_MS_PencilContourVerter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilBeamVirtualWedgeInfo_descriptor_, &RT_MS_PencilBeamVirtualWedgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PencilVirtualWedgeField_descriptor_, &RT_MS_PencilVirtualWedgeField::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fpencilbeam_2eproto() {
  delete RT_MS_PencilBeam::default_instance_;
  delete RT_MS_PencilBeam_reflection_;
  delete RT_MS_PencilPDDTMR::default_instance_;
  delete RT_MS_PencilPDDTMR_reflection_;
  delete RT_MS_PencilBeamPhysicalWedgeField::default_instance_;
  delete RT_MS_PencilBeamPhysicalWedgeField_reflection_;
  delete RT_MS_PencilContourVerter::default_instance_;
  delete RT_MS_PencilContourVerter_reflection_;
  delete RT_MS_PencilBeamVirtualWedgeInfo::default_instance_;
  delete RT_MS_PencilBeamVirtualWedgeInfo_reflection_;
  delete RT_MS_PencilVirtualWedgeField::default_instance_;
  delete RT_MS_PencilVirtualWedgeField_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rt_ms_pencilbeam.proto\022\010ms.proto\"\310\006\n\020R"
    "T_MS_PencilBeam\022\017\n\007diamOne\030\001 \001(\002\022\017\n\007diam"
    "Two\030\002 \001(\002\022\020\n\010srcRatio\030\003 \001(\002\022\024\n\014transmiss"
    "ion\030\004 \001(\002\022\013\n\003psd\030\005 \001(\002\022\017\n\007sddXJaw\030\006 \001(\002\022"
    "\017\n\007sddYJaw\030\007 \001(\002\022\013\n\003xk0\030\010 \001(\002\022\013\n\003xk1\030\t \001"
    "(\002\022\013\n\003xk2\030\n \001(\002\022\013\n\003yk0\030\013 \001(\002\022\013\n\003yk1\030\014 \001("
    "\002\022\013\n\003yk2\030\r \001(\002\0221\n\013tMRListList\030\016 \003(\0132\034.ms"
    ".proto.RT_MS_PencilPDDTMR\022L\n\026physicalWed"
    "geFieldList\030\017 \003(\0132,.ms.proto.RT_MS_Penci"
    "lBeamPhysicalWedgeField\022H\n\024virtualWedgeI"
    "nfoList\030\020 \003(\0132*.ms.proto.RT_MS_PencilBea"
    "mVirtualWedgeInfo\022\025\n\rcommissionUID\030\021 \001(\t"
    "\022\017\n\007accName\030\022 \001(\t\022\024\n\014accessoryUID\030\023 \001(\t\022"
    "\017\n\007wedgeId\030\024 \001(\t\022\017\n\007algType\030\025 \001(\005\022\025\n\rscX"
    "countProto\030\026 \001(\005\022\025\n\rscYcountProto\030\027 \001(\005\022"
    "\031\n\021scXPositionsProto\030\030 \001(\t\022\031\n\021scYpositio"
    "nsProto\030\031 \001(\t\022\024\n\014scBlocbProto\030\032 \001(\t\022\030\n\020r"
    "eferencefluence\030\033 \001(\002\022\021\n\tdiamThree\030\034 \001(\002"
    "\022\021\n\tsrcRatio3\030\035 \001(\002\022\017\n\007eeqdiam\030\036 \001(\002\022\020\n\010"
    "depthvec\030\037 \001(\t\022\021\n\tradiusvec\030  \001(\t\022\013\n\003sar"
    "\030! \001(\t\022\031\n\021flatnessradiusvec\030\" \001(\t\022\030\n\020fla"
    "tnessdepthvec\030# \001(\t\022\020\n\010flatness\030$ \001(\t\"\?\n"
    "\022RT_MS_PencilPDDTMR\022\013\n\003uid\030\001 \001(\t\022\r\n\005dept"
    "h\030\002 \001(\002\022\r\n\005value\030\003 \001(\002\"\231\004\n\"RT_MS_PencilB"
    "eamPhysicalWedgeField\022\021\n\twedgeType\030\001 \001(\t"
    "\022\017\n\007wedgeId\030\002 \001(\t\022\n\n\002mu\030\003 \001(\002\022\r\n\005dmudx\030\004"
    " \001(\002\022\r\n\005dmudr\030\005 \001(\002\022\r\n\005dmuda\030\006 \001(\002\022\020\n\010hv"
    "lSlope\030\007 \001(\002\022\021\n\tCarriermu\030\010 \001(\002\022\024\n\014Carri"
    "erdmudx\030\t \001(\002\022\024\n\014Carrierdmudr\030\n \001(\002\022\024\n\014C"
    "arrierdmuda\030\013 \001(\002\022\027\n\017CarrierhvlSlope\030\014 \001"
    "(\002\022\022\n\nwedgeThick\030\r \001(\002\022\024\n\014carrierThick\030\016"
    " \001(\002\022D\n\027weightContourVerterList\030\017 \003(\0132#."
    "ms.proto.RT_MS_PencilContourVerter\022E\n\030ca"
    "rrierContourVerterList\030\020 \003(\0132#.ms.proto."
    "RT_MS_PencilContourVerter\022\020\n\010wedgeUID\030\021 "
    "\001(\t\022\022\n\ncarrierUID\030\022 \001(\t\022\023\n\013contourUID1\030\023"
    " \001(\t\022\023\n\013contourUID2\030\024 \001(\t\022\017\n\007density\030\025 \001"
    "(\002\"X\n\031RT_MS_PencilContourVerter\022\013\n\003uid\030\001"
    " \001(\t\022\026\n\016ContourVerterx\030\002 \001(\002\022\026\n\016ContourV"
    "ertery\030\003 \001(\002\"\221\001\n RT_MS_PencilBeamVirtual"
    "WedgeInfo\022\022\n\nvirtualUid\030\001 \001(\t\022\021\n\tgoldenU"
    "ID\030\002 \001(\t\022F\n\025virtualWedgeFieldList\030\003 \003(\0132"
    "\'.ms.proto.RT_MS_PencilVirtualWedgeField"
    "\"\226\001\n\035RT_MS_PencilVirtualWedgeField\022\013\n\003ui"
    "d\030\001 \001(\t\022\034\n\024collimatorX1Position\030\002 \001(\002\022\034\n"
    "\024collimatorX2Position\030\003 \001(\002\022\022\n\nrelativeM"
    "U\030\004 \001(\002\022\030\n\020correctionFactor\030\005 \001(\002", 1873);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_pencilbeam.proto", &protobuf_RegisterTypes);
  RT_MS_PencilBeam::default_instance_ = new RT_MS_PencilBeam();
  RT_MS_PencilPDDTMR::default_instance_ = new RT_MS_PencilPDDTMR();
  RT_MS_PencilBeamPhysicalWedgeField::default_instance_ = new RT_MS_PencilBeamPhysicalWedgeField();
  RT_MS_PencilContourVerter::default_instance_ = new RT_MS_PencilContourVerter();
  RT_MS_PencilBeamVirtualWedgeInfo::default_instance_ = new RT_MS_PencilBeamVirtualWedgeInfo();
  RT_MS_PencilVirtualWedgeField::default_instance_ = new RT_MS_PencilVirtualWedgeField();
  RT_MS_PencilBeam::default_instance_->InitAsDefaultInstance();
  RT_MS_PencilPDDTMR::default_instance_->InitAsDefaultInstance();
  RT_MS_PencilBeamPhysicalWedgeField::default_instance_->InitAsDefaultInstance();
  RT_MS_PencilContourVerter::default_instance_->InitAsDefaultInstance();
  RT_MS_PencilBeamVirtualWedgeInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_PencilVirtualWedgeField::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fpencilbeam_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fpencilbeam_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fpencilbeam_2eproto() {
    protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fpencilbeam_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilBeam::kDiamOneFieldNumber;
const int RT_MS_PencilBeam::kDiamTwoFieldNumber;
const int RT_MS_PencilBeam::kSrcRatioFieldNumber;
const int RT_MS_PencilBeam::kTransmissionFieldNumber;
const int RT_MS_PencilBeam::kPsdFieldNumber;
const int RT_MS_PencilBeam::kSddXJawFieldNumber;
const int RT_MS_PencilBeam::kSddYJawFieldNumber;
const int RT_MS_PencilBeam::kXk0FieldNumber;
const int RT_MS_PencilBeam::kXk1FieldNumber;
const int RT_MS_PencilBeam::kXk2FieldNumber;
const int RT_MS_PencilBeam::kYk0FieldNumber;
const int RT_MS_PencilBeam::kYk1FieldNumber;
const int RT_MS_PencilBeam::kYk2FieldNumber;
const int RT_MS_PencilBeam::kTMRListListFieldNumber;
const int RT_MS_PencilBeam::kPhysicalWedgeFieldListFieldNumber;
const int RT_MS_PencilBeam::kVirtualWedgeInfoListFieldNumber;
const int RT_MS_PencilBeam::kCommissionUIDFieldNumber;
const int RT_MS_PencilBeam::kAccNameFieldNumber;
const int RT_MS_PencilBeam::kAccessoryUIDFieldNumber;
const int RT_MS_PencilBeam::kWedgeIdFieldNumber;
const int RT_MS_PencilBeam::kAlgTypeFieldNumber;
const int RT_MS_PencilBeam::kScXcountProtoFieldNumber;
const int RT_MS_PencilBeam::kScYcountProtoFieldNumber;
const int RT_MS_PencilBeam::kScXPositionsProtoFieldNumber;
const int RT_MS_PencilBeam::kScYpositionsProtoFieldNumber;
const int RT_MS_PencilBeam::kScBlocbProtoFieldNumber;
const int RT_MS_PencilBeam::kReferencefluenceFieldNumber;
const int RT_MS_PencilBeam::kDiamThreeFieldNumber;
const int RT_MS_PencilBeam::kSrcRatio3FieldNumber;
const int RT_MS_PencilBeam::kEeqdiamFieldNumber;
const int RT_MS_PencilBeam::kDepthvecFieldNumber;
const int RT_MS_PencilBeam::kRadiusvecFieldNumber;
const int RT_MS_PencilBeam::kSarFieldNumber;
const int RT_MS_PencilBeam::kFlatnessradiusvecFieldNumber;
const int RT_MS_PencilBeam::kFlatnessdepthvecFieldNumber;
const int RT_MS_PencilBeam::kFlatnessFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilBeam::RT_MS_PencilBeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilBeam::InitAsDefaultInstance() {
}

RT_MS_PencilBeam::RT_MS_PencilBeam(const RT_MS_PencilBeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilBeam::SharedCtor() {
  _cached_size_ = 0;
  diamone_ = 0;
  diamtwo_ = 0;
  srcratio_ = 0;
  transmission_ = 0;
  psd_ = 0;
  sddxjaw_ = 0;
  sddyjaw_ = 0;
  xk0_ = 0;
  xk1_ = 0;
  xk2_ = 0;
  yk0_ = 0;
  yk1_ = 0;
  yk2_ = 0;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algtype_ = 0;
  scxcountproto_ = 0;
  scycountproto_ = 0;
  scxpositionsproto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scypositionsproto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  scblocbproto_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  referencefluence_ = 0;
  diamthree_ = 0;
  srcratio3_ = 0;
  eeqdiam_ = 0;
  depthvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radiusvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sar_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flatnessradiusvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flatnessdepthvec_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flatness_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilBeam::~RT_MS_PencilBeam() {
  SharedDtor();
}

void RT_MS_PencilBeam::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (accname_ != &::google::protobuf::internal::kEmptyString) {
    delete accname_;
  }
  if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryuid_;
  }
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (scxpositionsproto_ != &::google::protobuf::internal::kEmptyString) {
    delete scxpositionsproto_;
  }
  if (scypositionsproto_ != &::google::protobuf::internal::kEmptyString) {
    delete scypositionsproto_;
  }
  if (scblocbproto_ != &::google::protobuf::internal::kEmptyString) {
    delete scblocbproto_;
  }
  if (depthvec_ != &::google::protobuf::internal::kEmptyString) {
    delete depthvec_;
  }
  if (radiusvec_ != &::google::protobuf::internal::kEmptyString) {
    delete radiusvec_;
  }
  if (sar_ != &::google::protobuf::internal::kEmptyString) {
    delete sar_;
  }
  if (flatnessradiusvec_ != &::google::protobuf::internal::kEmptyString) {
    delete flatnessradiusvec_;
  }
  if (flatnessdepthvec_ != &::google::protobuf::internal::kEmptyString) {
    delete flatnessdepthvec_;
  }
  if (flatness_ != &::google::protobuf::internal::kEmptyString) {
    delete flatness_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilBeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilBeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilBeam_descriptor_;
}

const RT_MS_PencilBeam& RT_MS_PencilBeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilBeam* RT_MS_PencilBeam::default_instance_ = NULL;

RT_MS_PencilBeam* RT_MS_PencilBeam::New() const {
  return new RT_MS_PencilBeam;
}

void RT_MS_PencilBeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    diamone_ = 0;
    diamtwo_ = 0;
    srcratio_ = 0;
    transmission_ = 0;
    psd_ = 0;
    sddxjaw_ = 0;
    sddyjaw_ = 0;
    xk0_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    xk1_ = 0;
    xk2_ = 0;
    yk0_ = 0;
    yk1_ = 0;
    yk2_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    if (has_accname()) {
      if (accname_ != &::google::protobuf::internal::kEmptyString) {
        accname_->clear();
      }
    }
    if (has_accessoryuid()) {
      if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accessoryuid_->clear();
      }
    }
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    algtype_ = 0;
    scxcountproto_ = 0;
    scycountproto_ = 0;
    if (has_scxpositionsproto()) {
      if (scxpositionsproto_ != &::google::protobuf::internal::kEmptyString) {
        scxpositionsproto_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_scypositionsproto()) {
      if (scypositionsproto_ != &::google::protobuf::internal::kEmptyString) {
        scypositionsproto_->clear();
      }
    }
    if (has_scblocbproto()) {
      if (scblocbproto_ != &::google::protobuf::internal::kEmptyString) {
        scblocbproto_->clear();
      }
    }
    referencefluence_ = 0;
    diamthree_ = 0;
    srcratio3_ = 0;
    eeqdiam_ = 0;
    if (has_depthvec()) {
      if (depthvec_ != &::google::protobuf::internal::kEmptyString) {
        depthvec_->clear();
      }
    }
    if (has_radiusvec()) {
      if (radiusvec_ != &::google::protobuf::internal::kEmptyString) {
        radiusvec_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_sar()) {
      if (sar_ != &::google::protobuf::internal::kEmptyString) {
        sar_->clear();
      }
    }
    if (has_flatnessradiusvec()) {
      if (flatnessradiusvec_ != &::google::protobuf::internal::kEmptyString) {
        flatnessradiusvec_->clear();
      }
    }
    if (has_flatnessdepthvec()) {
      if (flatnessdepthvec_ != &::google::protobuf::internal::kEmptyString) {
        flatnessdepthvec_->clear();
      }
    }
    if (has_flatness()) {
      if (flatness_ != &::google::protobuf::internal::kEmptyString) {
        flatness_->clear();
      }
    }
  }
  tmrlistlist_.Clear();
  physicalwedgefieldlist_.Clear();
  virtualwedgeinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilBeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float diamOne = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamone_)));
          set_has_diamone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_diamTwo;
        break;
      }
      
      // optional float diamTwo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diamTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamtwo_)));
          set_has_diamtwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_srcRatio;
        break;
      }
      
      // optional float srcRatio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcRatio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcratio_)));
          set_has_srcratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_transmission;
        break;
      }
      
      // optional float transmission = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transmission:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transmission_)));
          set_has_transmission();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_psd;
        break;
      }
      
      // optional float psd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_psd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &psd_)));
          set_has_psd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sddXJaw;
        break;
      }
      
      // optional float sddXJaw = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sddXJaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sddxjaw_)));
          set_has_sddxjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_sddYJaw;
        break;
      }
      
      // optional float sddYJaw = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sddYJaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sddyjaw_)));
          set_has_sddyjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_xk0;
        break;
      }
      
      // optional float xk0 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk0_)));
          set_has_xk0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_xk1;
        break;
      }
      
      // optional float xk1 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk1_)));
          set_has_xk1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_xk2;
        break;
      }
      
      // optional float xk2 = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xk2_)));
          set_has_xk2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_yk0;
        break;
      }
      
      // optional float yk0 = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk0_)));
          set_has_yk0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_yk1;
        break;
      }
      
      // optional float yk1 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk1_)));
          set_has_yk1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_yk2;
        break;
      }
      
      // optional float yk2 = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yk2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yk2_)));
          set_has_yk2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tMRListList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilPDDTMR tMRListList = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tMRListList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tmrlistlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_tMRListList;
        if (input->ExpectTag(122)) goto parse_physicalWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilBeamPhysicalWedgeField physicalWedgeFieldList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physicalWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicalwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_physicalWedgeFieldList;
        if (input->ExpectTag(130)) goto parse_virtualWedgeInfoList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilBeamVirtualWedgeInfo virtualWedgeInfoList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgeinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_virtualWedgeInfoList;
        if (input->ExpectTag(138)) goto parse_commissionUID;
        break;
      }
      
      // optional string commissionUID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_accName;
        break;
      }
      
      // optional string accName = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accname().data(), this->accname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_accessoryUID;
        break;
      }
      
      // optional string accessoryUID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessoryUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryuid().data(), this->accessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_wedgeId;
        break;
      }
      
      // optional string wedgeId = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_scXcountProto;
        break;
      }
      
      // optional int32 scXcountProto = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scXcountProto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scxcountproto_)));
          set_has_scxcountproto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_scYcountProto;
        break;
      }
      
      // optional int32 scYcountProto = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_scYcountProto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scycountproto_)));
          set_has_scycountproto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_scXPositionsProto;
        break;
      }
      
      // optional string scXPositionsProto = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scXPositionsProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scxpositionsproto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scxpositionsproto().data(), this->scxpositionsproto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_scYpositionsProto;
        break;
      }
      
      // optional string scYpositionsProto = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scYpositionsProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scypositionsproto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scypositionsproto().data(), this->scypositionsproto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_scBlocbProto;
        break;
      }
      
      // optional string scBlocbProto = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_scBlocbProto:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scblocbproto()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->scblocbproto().data(), this->scblocbproto().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_referencefluence;
        break;
      }
      
      // optional float referencefluence = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referencefluence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referencefluence_)));
          set_has_referencefluence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_diamThree;
        break;
      }
      
      // optional float diamThree = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_diamThree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &diamthree_)));
          set_has_diamthree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(237)) goto parse_srcRatio3;
        break;
      }
      
      // optional float srcRatio3 = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_srcRatio3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &srcratio3_)));
          set_has_srcratio3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(245)) goto parse_eeqdiam;
        break;
      }
      
      // optional float eeqdiam = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eeqdiam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eeqdiam_)));
          set_has_eeqdiam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_depthvec;
        break;
      }
      
      // optional string depthvec = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_depthvec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_depthvec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->depthvec().data(), this->depthvec().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_radiusvec;
        break;
      }
      
      // optional string radiusvec = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_radiusvec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiusvec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->radiusvec().data(), this->radiusvec().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_sar;
        break;
      }
      
      // optional string sar = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sar()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sar().data(), this->sar().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_flatnessradiusvec;
        break;
      }
      
      // optional string flatnessradiusvec = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flatnessradiusvec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flatnessradiusvec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flatnessradiusvec().data(), this->flatnessradiusvec().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_flatnessdepthvec;
        break;
      }
      
      // optional string flatnessdepthvec = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flatnessdepthvec:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flatnessdepthvec()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flatnessdepthvec().data(), this->flatnessdepthvec().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_flatness;
        break;
      }
      
      // optional string flatness = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_flatness:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flatness()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flatness().data(), this->flatness().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilBeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float diamOne = 1;
  if (has_diamone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->diamone(), output);
  }
  
  // optional float diamTwo = 2;
  if (has_diamtwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->diamtwo(), output);
  }
  
  // optional float srcRatio = 3;
  if (has_srcratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->srcratio(), output);
  }
  
  // optional float transmission = 4;
  if (has_transmission()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->transmission(), output);
  }
  
  // optional float psd = 5;
  if (has_psd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->psd(), output);
  }
  
  // optional float sddXJaw = 6;
  if (has_sddxjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sddxjaw(), output);
  }
  
  // optional float sddYJaw = 7;
  if (has_sddyjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sddyjaw(), output);
  }
  
  // optional float xk0 = 8;
  if (has_xk0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->xk0(), output);
  }
  
  // optional float xk1 = 9;
  if (has_xk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->xk1(), output);
  }
  
  // optional float xk2 = 10;
  if (has_xk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->xk2(), output);
  }
  
  // optional float yk0 = 11;
  if (has_yk0()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->yk0(), output);
  }
  
  // optional float yk1 = 12;
  if (has_yk1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->yk1(), output);
  }
  
  // optional float yk2 = 13;
  if (has_yk2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->yk2(), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilPDDTMR tMRListList = 14;
  for (int i = 0; i < this->tmrlistlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->tmrlistlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamPhysicalWedgeField physicalWedgeFieldList = 15;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->physicalwedgefieldlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamVirtualWedgeInfo virtualWedgeInfoList = 16;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->virtualwedgeinfolist(i), output);
  }
  
  // optional string commissionUID = 17;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->commissionuid(), output);
  }
  
  // optional string accName = 18;
  if (has_accname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accname().data(), this->accname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->accname(), output);
  }
  
  // optional string accessoryUID = 19;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->accessoryuid(), output);
  }
  
  // optional string wedgeId = 20;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->wedgeid(), output);
  }
  
  // optional int32 algType = 21;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->algtype(), output);
  }
  
  // optional int32 scXcountProto = 22;
  if (has_scxcountproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->scxcountproto(), output);
  }
  
  // optional int32 scYcountProto = 23;
  if (has_scycountproto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->scycountproto(), output);
  }
  
  // optional string scXPositionsProto = 24;
  if (has_scxpositionsproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scxpositionsproto().data(), this->scxpositionsproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->scxpositionsproto(), output);
  }
  
  // optional string scYpositionsProto = 25;
  if (has_scypositionsproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scypositionsproto().data(), this->scypositionsproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->scypositionsproto(), output);
  }
  
  // optional string scBlocbProto = 26;
  if (has_scblocbproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scblocbproto().data(), this->scblocbproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->scblocbproto(), output);
  }
  
  // optional float referencefluence = 27;
  if (has_referencefluence()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->referencefluence(), output);
  }
  
  // optional float diamThree = 28;
  if (has_diamthree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->diamthree(), output);
  }
  
  // optional float srcRatio3 = 29;
  if (has_srcratio3()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(29, this->srcratio3(), output);
  }
  
  // optional float eeqdiam = 30;
  if (has_eeqdiam()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->eeqdiam(), output);
  }
  
  // optional string depthvec = 31;
  if (has_depthvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->depthvec().data(), this->depthvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->depthvec(), output);
  }
  
  // optional string radiusvec = 32;
  if (has_radiusvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radiusvec().data(), this->radiusvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->radiusvec(), output);
  }
  
  // optional string sar = 33;
  if (has_sar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sar().data(), this->sar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->sar(), output);
  }
  
  // optional string flatnessradiusvec = 34;
  if (has_flatnessradiusvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatnessradiusvec().data(), this->flatnessradiusvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->flatnessradiusvec(), output);
  }
  
  // optional string flatnessdepthvec = 35;
  if (has_flatnessdepthvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatnessdepthvec().data(), this->flatnessdepthvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->flatnessdepthvec(), output);
  }
  
  // optional string flatness = 36;
  if (has_flatness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatness().data(), this->flatness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->flatness(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilBeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float diamOne = 1;
  if (has_diamone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->diamone(), target);
  }
  
  // optional float diamTwo = 2;
  if (has_diamtwo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->diamtwo(), target);
  }
  
  // optional float srcRatio = 3;
  if (has_srcratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->srcratio(), target);
  }
  
  // optional float transmission = 4;
  if (has_transmission()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->transmission(), target);
  }
  
  // optional float psd = 5;
  if (has_psd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->psd(), target);
  }
  
  // optional float sddXJaw = 6;
  if (has_sddxjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sddxjaw(), target);
  }
  
  // optional float sddYJaw = 7;
  if (has_sddyjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->sddyjaw(), target);
  }
  
  // optional float xk0 = 8;
  if (has_xk0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->xk0(), target);
  }
  
  // optional float xk1 = 9;
  if (has_xk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->xk1(), target);
  }
  
  // optional float xk2 = 10;
  if (has_xk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->xk2(), target);
  }
  
  // optional float yk0 = 11;
  if (has_yk0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->yk0(), target);
  }
  
  // optional float yk1 = 12;
  if (has_yk1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->yk1(), target);
  }
  
  // optional float yk2 = 13;
  if (has_yk2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->yk2(), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilPDDTMR tMRListList = 14;
  for (int i = 0; i < this->tmrlistlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->tmrlistlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamPhysicalWedgeField physicalWedgeFieldList = 15;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->physicalwedgefieldlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamVirtualWedgeInfo virtualWedgeInfoList = 16;
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->virtualwedgeinfolist(i), target);
  }
  
  // optional string commissionUID = 17;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->commissionuid(), target);
  }
  
  // optional string accName = 18;
  if (has_accname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accname().data(), this->accname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->accname(), target);
  }
  
  // optional string accessoryUID = 19;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->accessoryuid(), target);
  }
  
  // optional string wedgeId = 20;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->wedgeid(), target);
  }
  
  // optional int32 algType = 21;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->algtype(), target);
  }
  
  // optional int32 scXcountProto = 22;
  if (has_scxcountproto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->scxcountproto(), target);
  }
  
  // optional int32 scYcountProto = 23;
  if (has_scycountproto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->scycountproto(), target);
  }
  
  // optional string scXPositionsProto = 24;
  if (has_scxpositionsproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scxpositionsproto().data(), this->scxpositionsproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->scxpositionsproto(), target);
  }
  
  // optional string scYpositionsProto = 25;
  if (has_scypositionsproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scypositionsproto().data(), this->scypositionsproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->scypositionsproto(), target);
  }
  
  // optional string scBlocbProto = 26;
  if (has_scblocbproto()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->scblocbproto().data(), this->scblocbproto().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->scblocbproto(), target);
  }
  
  // optional float referencefluence = 27;
  if (has_referencefluence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->referencefluence(), target);
  }
  
  // optional float diamThree = 28;
  if (has_diamthree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->diamthree(), target);
  }
  
  // optional float srcRatio3 = 29;
  if (has_srcratio3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(29, this->srcratio3(), target);
  }
  
  // optional float eeqdiam = 30;
  if (has_eeqdiam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(30, this->eeqdiam(), target);
  }
  
  // optional string depthvec = 31;
  if (has_depthvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->depthvec().data(), this->depthvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->depthvec(), target);
  }
  
  // optional string radiusvec = 32;
  if (has_radiusvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->radiusvec().data(), this->radiusvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->radiusvec(), target);
  }
  
  // optional string sar = 33;
  if (has_sar()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sar().data(), this->sar().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->sar(), target);
  }
  
  // optional string flatnessradiusvec = 34;
  if (has_flatnessradiusvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatnessradiusvec().data(), this->flatnessradiusvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->flatnessradiusvec(), target);
  }
  
  // optional string flatnessdepthvec = 35;
  if (has_flatnessdepthvec()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatnessdepthvec().data(), this->flatnessdepthvec().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->flatnessdepthvec(), target);
  }
  
  // optional string flatness = 36;
  if (has_flatness()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flatness().data(), this->flatness().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->flatness(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilBeam::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float diamOne = 1;
    if (has_diamone()) {
      total_size += 1 + 4;
    }
    
    // optional float diamTwo = 2;
    if (has_diamtwo()) {
      total_size += 1 + 4;
    }
    
    // optional float srcRatio = 3;
    if (has_srcratio()) {
      total_size += 1 + 4;
    }
    
    // optional float transmission = 4;
    if (has_transmission()) {
      total_size += 1 + 4;
    }
    
    // optional float psd = 5;
    if (has_psd()) {
      total_size += 1 + 4;
    }
    
    // optional float sddXJaw = 6;
    if (has_sddxjaw()) {
      total_size += 1 + 4;
    }
    
    // optional float sddYJaw = 7;
    if (has_sddyjaw()) {
      total_size += 1 + 4;
    }
    
    // optional float xk0 = 8;
    if (has_xk0()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float xk1 = 9;
    if (has_xk1()) {
      total_size += 1 + 4;
    }
    
    // optional float xk2 = 10;
    if (has_xk2()) {
      total_size += 1 + 4;
    }
    
    // optional float yk0 = 11;
    if (has_yk0()) {
      total_size += 1 + 4;
    }
    
    // optional float yk1 = 12;
    if (has_yk1()) {
      total_size += 1 + 4;
    }
    
    // optional float yk2 = 13;
    if (has_yk2()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string commissionUID = 17;
    if (has_commissionuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional string accName = 18;
    if (has_accname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accname());
    }
    
    // optional string accessoryUID = 19;
    if (has_accessoryuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryuid());
    }
    
    // optional string wedgeId = 20;
    if (has_wedgeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional int32 algType = 21;
    if (has_algtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
    // optional int32 scXcountProto = 22;
    if (has_scxcountproto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scxcountproto());
    }
    
    // optional int32 scYcountProto = 23;
    if (has_scycountproto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scycountproto());
    }
    
    // optional string scXPositionsProto = 24;
    if (has_scxpositionsproto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scxpositionsproto());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string scYpositionsProto = 25;
    if (has_scypositionsproto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scypositionsproto());
    }
    
    // optional string scBlocbProto = 26;
    if (has_scblocbproto()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scblocbproto());
    }
    
    // optional float referencefluence = 27;
    if (has_referencefluence()) {
      total_size += 2 + 4;
    }
    
    // optional float diamThree = 28;
    if (has_diamthree()) {
      total_size += 2 + 4;
    }
    
    // optional float srcRatio3 = 29;
    if (has_srcratio3()) {
      total_size += 2 + 4;
    }
    
    // optional float eeqdiam = 30;
    if (has_eeqdiam()) {
      total_size += 2 + 4;
    }
    
    // optional string depthvec = 31;
    if (has_depthvec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->depthvec());
    }
    
    // optional string radiusvec = 32;
    if (has_radiusvec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiusvec());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string sar = 33;
    if (has_sar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sar());
    }
    
    // optional string flatnessradiusvec = 34;
    if (has_flatnessradiusvec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flatnessradiusvec());
    }
    
    // optional string flatnessdepthvec = 35;
    if (has_flatnessdepthvec()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flatnessdepthvec());
    }
    
    // optional string flatness = 36;
    if (has_flatness()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flatness());
    }
    
  }
  // repeated .ms.proto.RT_MS_PencilPDDTMR tMRListList = 14;
  total_size += 1 * this->tmrlistlist_size();
  for (int i = 0; i < this->tmrlistlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tmrlistlist(i));
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamPhysicalWedgeField physicalWedgeFieldList = 15;
  total_size += 1 * this->physicalwedgefieldlist_size();
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicalwedgefieldlist(i));
  }
  
  // repeated .ms.proto.RT_MS_PencilBeamVirtualWedgeInfo virtualWedgeInfoList = 16;
  total_size += 2 * this->virtualwedgeinfolist_size();
  for (int i = 0; i < this->virtualwedgeinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgeinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilBeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilBeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilBeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilBeam::MergeFrom(const RT_MS_PencilBeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  tmrlistlist_.MergeFrom(from.tmrlistlist_);
  physicalwedgefieldlist_.MergeFrom(from.physicalwedgefieldlist_);
  virtualwedgeinfolist_.MergeFrom(from.virtualwedgeinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_diamone()) {
      set_diamone(from.diamone());
    }
    if (from.has_diamtwo()) {
      set_diamtwo(from.diamtwo());
    }
    if (from.has_srcratio()) {
      set_srcratio(from.srcratio());
    }
    if (from.has_transmission()) {
      set_transmission(from.transmission());
    }
    if (from.has_psd()) {
      set_psd(from.psd());
    }
    if (from.has_sddxjaw()) {
      set_sddxjaw(from.sddxjaw());
    }
    if (from.has_sddyjaw()) {
      set_sddyjaw(from.sddyjaw());
    }
    if (from.has_xk0()) {
      set_xk0(from.xk0());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xk1()) {
      set_xk1(from.xk1());
    }
    if (from.has_xk2()) {
      set_xk2(from.xk2());
    }
    if (from.has_yk0()) {
      set_yk0(from.yk0());
    }
    if (from.has_yk1()) {
      set_yk1(from.yk1());
    }
    if (from.has_yk2()) {
      set_yk2(from.yk2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_accname()) {
      set_accname(from.accname());
    }
    if (from.has_accessoryuid()) {
      set_accessoryuid(from.accessoryuid());
    }
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
    if (from.has_scxcountproto()) {
      set_scxcountproto(from.scxcountproto());
    }
    if (from.has_scycountproto()) {
      set_scycountproto(from.scycountproto());
    }
    if (from.has_scxpositionsproto()) {
      set_scxpositionsproto(from.scxpositionsproto());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_scypositionsproto()) {
      set_scypositionsproto(from.scypositionsproto());
    }
    if (from.has_scblocbproto()) {
      set_scblocbproto(from.scblocbproto());
    }
    if (from.has_referencefluence()) {
      set_referencefluence(from.referencefluence());
    }
    if (from.has_diamthree()) {
      set_diamthree(from.diamthree());
    }
    if (from.has_srcratio3()) {
      set_srcratio3(from.srcratio3());
    }
    if (from.has_eeqdiam()) {
      set_eeqdiam(from.eeqdiam());
    }
    if (from.has_depthvec()) {
      set_depthvec(from.depthvec());
    }
    if (from.has_radiusvec()) {
      set_radiusvec(from.radiusvec());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_sar()) {
      set_sar(from.sar());
    }
    if (from.has_flatnessradiusvec()) {
      set_flatnessradiusvec(from.flatnessradiusvec());
    }
    if (from.has_flatnessdepthvec()) {
      set_flatnessdepthvec(from.flatnessdepthvec());
    }
    if (from.has_flatness()) {
      set_flatness(from.flatness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilBeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilBeam::CopyFrom(const RT_MS_PencilBeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilBeam::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilBeam::Swap(RT_MS_PencilBeam* other) {
  if (other != this) {
    std::swap(diamone_, other->diamone_);
    std::swap(diamtwo_, other->diamtwo_);
    std::swap(srcratio_, other->srcratio_);
    std::swap(transmission_, other->transmission_);
    std::swap(psd_, other->psd_);
    std::swap(sddxjaw_, other->sddxjaw_);
    std::swap(sddyjaw_, other->sddyjaw_);
    std::swap(xk0_, other->xk0_);
    std::swap(xk1_, other->xk1_);
    std::swap(xk2_, other->xk2_);
    std::swap(yk0_, other->yk0_);
    std::swap(yk1_, other->yk1_);
    std::swap(yk2_, other->yk2_);
    tmrlistlist_.Swap(&other->tmrlistlist_);
    physicalwedgefieldlist_.Swap(&other->physicalwedgefieldlist_);
    virtualwedgeinfolist_.Swap(&other->virtualwedgeinfolist_);
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(accname_, other->accname_);
    std::swap(accessoryuid_, other->accessoryuid_);
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(algtype_, other->algtype_);
    std::swap(scxcountproto_, other->scxcountproto_);
    std::swap(scycountproto_, other->scycountproto_);
    std::swap(scxpositionsproto_, other->scxpositionsproto_);
    std::swap(scypositionsproto_, other->scypositionsproto_);
    std::swap(scblocbproto_, other->scblocbproto_);
    std::swap(referencefluence_, other->referencefluence_);
    std::swap(diamthree_, other->diamthree_);
    std::swap(srcratio3_, other->srcratio3_);
    std::swap(eeqdiam_, other->eeqdiam_);
    std::swap(depthvec_, other->depthvec_);
    std::swap(radiusvec_, other->radiusvec_);
    std::swap(sar_, other->sar_);
    std::swap(flatnessradiusvec_, other->flatnessradiusvec_);
    std::swap(flatnessdepthvec_, other->flatnessdepthvec_);
    std::swap(flatness_, other->flatness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilBeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilBeam_descriptor_;
  metadata.reflection = RT_MS_PencilBeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilPDDTMR::kUidFieldNumber;
const int RT_MS_PencilPDDTMR::kDepthFieldNumber;
const int RT_MS_PencilPDDTMR::kValueFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilPDDTMR::RT_MS_PencilPDDTMR()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilPDDTMR::InitAsDefaultInstance() {
}

RT_MS_PencilPDDTMR::RT_MS_PencilPDDTMR(const RT_MS_PencilPDDTMR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilPDDTMR::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  depth_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilPDDTMR::~RT_MS_PencilPDDTMR() {
  SharedDtor();
}

void RT_MS_PencilPDDTMR::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilPDDTMR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilPDDTMR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilPDDTMR_descriptor_;
}

const RT_MS_PencilPDDTMR& RT_MS_PencilPDDTMR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilPDDTMR* RT_MS_PencilPDDTMR::default_instance_ = NULL;

RT_MS_PencilPDDTMR* RT_MS_PencilPDDTMR::New() const {
  return new RT_MS_PencilPDDTMR;
}

void RT_MS_PencilPDDTMR::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    depth_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilPDDTMR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_depth;
        break;
      }
      
      // optional float depth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }
      
      // optional float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilPDDTMR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float depth = 2;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->depth(), output);
  }
  
  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilPDDTMR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float depth = 2;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->depth(), target);
  }
  
  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilPDDTMR::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float depth = 2;
    if (has_depth()) {
      total_size += 1 + 4;
    }
    
    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilPDDTMR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilPDDTMR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilPDDTMR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilPDDTMR::MergeFrom(const RT_MS_PencilPDDTMR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilPDDTMR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilPDDTMR::CopyFrom(const RT_MS_PencilPDDTMR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilPDDTMR::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilPDDTMR::Swap(RT_MS_PencilPDDTMR* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(depth_, other->depth_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilPDDTMR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilPDDTMR_descriptor_;
  metadata.reflection = RT_MS_PencilPDDTMR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilBeamPhysicalWedgeField::kWedgeTypeFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kWedgeIdFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kMuFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kDmudxFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kDmudrFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kDmudaFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kHvlSlopeFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarriermuFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierdmudxFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierdmudrFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierdmudaFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierhvlSlopeFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kWedgeThickFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierThickFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kWeightContourVerterListFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierContourVerterListFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kWedgeUIDFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kCarrierUIDFieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kContourUID1FieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kContourUID2FieldNumber;
const int RT_MS_PencilBeamPhysicalWedgeField::kDensityFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilBeamPhysicalWedgeField::RT_MS_PencilBeamPhysicalWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilBeamPhysicalWedgeField::InitAsDefaultInstance() {
}

RT_MS_PencilBeamPhysicalWedgeField::RT_MS_PencilBeamPhysicalWedgeField(const RT_MS_PencilBeamPhysicalWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilBeamPhysicalWedgeField::SharedCtor() {
  _cached_size_ = 0;
  wedgetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mu_ = 0;
  dmudx_ = 0;
  dmudr_ = 0;
  dmuda_ = 0;
  hvlslope_ = 0;
  carriermu_ = 0;
  carrierdmudx_ = 0;
  carrierdmudr_ = 0;
  carrierdmuda_ = 0;
  carrierhvlslope_ = 0;
  wedgethick_ = 0;
  carrierthick_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carrieruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contouruid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contouruid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  density_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilBeamPhysicalWedgeField::~RT_MS_PencilBeamPhysicalWedgeField() {
  SharedDtor();
}

void RT_MS_PencilBeamPhysicalWedgeField::SharedDtor() {
  if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgetype_;
  }
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (carrieruid_ != &::google::protobuf::internal::kEmptyString) {
    delete carrieruid_;
  }
  if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid1_;
  }
  if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid2_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilBeamPhysicalWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilBeamPhysicalWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilBeamPhysicalWedgeField_descriptor_;
}

const RT_MS_PencilBeamPhysicalWedgeField& RT_MS_PencilBeamPhysicalWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilBeamPhysicalWedgeField* RT_MS_PencilBeamPhysicalWedgeField::default_instance_ = NULL;

RT_MS_PencilBeamPhysicalWedgeField* RT_MS_PencilBeamPhysicalWedgeField::New() const {
  return new RT_MS_PencilBeamPhysicalWedgeField;
}

void RT_MS_PencilBeamPhysicalWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgetype()) {
      if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
        wedgetype_->clear();
      }
    }
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    mu_ = 0;
    dmudx_ = 0;
    dmudr_ = 0;
    dmuda_ = 0;
    hvlslope_ = 0;
    carriermu_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carrierdmudx_ = 0;
    carrierdmudr_ = 0;
    carrierdmuda_ = 0;
    carrierhvlslope_ = 0;
    wedgethick_ = 0;
    carrierthick_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    if (has_carrieruid()) {
      if (carrieruid_ != &::google::protobuf::internal::kEmptyString) {
        carrieruid_->clear();
      }
    }
    if (has_contouruid1()) {
      if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
        contouruid1_->clear();
      }
    }
    if (has_contouruid2()) {
      if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
        contouruid2_->clear();
      }
    }
    density_ = 0;
  }
  weightcontourverterlist_.Clear();
  carriercontourverterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilBeamPhysicalWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgetype().data(), this->wedgetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedgeId;
        break;
      }
      
      // optional string wedgeId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mu;
        break;
      }
      
      // optional float mu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dmudx;
        break;
      }
      
      // optional float dmudx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudx_)));
          set_has_dmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dmudr;
        break;
      }
      
      // optional float dmudr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudr_)));
          set_has_dmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dmuda;
        break;
      }
      
      // optional float dmuda = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmuda_)));
          set_has_dmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_hvlSlope;
        break;
      }
      
      // optional float hvlSlope = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvlslope_)));
          set_has_hvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Carriermu;
        break;
      }
      
      // optional float Carriermu = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carriermu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carriermu_)));
          set_has_carriermu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Carrierdmudx;
        break;
      }
      
      // optional float Carrierdmudx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudx_)));
          set_has_carrierdmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Carrierdmudr;
        break;
      }
      
      // optional float Carrierdmudr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudr_)));
          set_has_carrierdmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Carrierdmuda;
        break;
      }
      
      // optional float Carrierdmuda = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmuda_)));
          set_has_carrierdmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_CarrierhvlSlope;
        break;
      }
      
      // optional float CarrierhvlSlope = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CarrierhvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierhvlslope_)));
          set_has_carrierhvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_wedgeThick;
        break;
      }
      
      // optional float wedgeThick = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgeThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgethick_)));
          set_has_wedgethick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_carrierThick;
        break;
      }
      
      // optional float carrierThick = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carrierThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierthick_)));
          set_has_carrierthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_weightContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilContourVerter weightContourVerterList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weightContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weightcontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_weightContourVerterList;
        if (input->ExpectTag(130)) goto parse_carrierContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilContourVerter carrierContourVerterList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carriercontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_carrierContourVerterList;
        if (input->ExpectTag(138)) goto parse_wedgeUID;
        break;
      }
      
      // optional string wedgeUID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_carrierUID;
        break;
      }
      
      // optional string carrierUID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrieruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrieruid().data(), this->carrieruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_contourUID1;
        break;
      }
      
      // optional string contourUID1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid1().data(), this->contouruid1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_contourUID2;
        break;
      }
      
      // optional string contourUID2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid2().data(), this->contouruid2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_density;
        break;
      }
      
      // optional float density = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_density:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &density_)));
          set_has_density();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilBeamPhysicalWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeType = 1;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgetype(), output);
  }
  
  // optional string wedgeId = 2;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedgeid(), output);
  }
  
  // optional float mu = 3;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mu(), output);
  }
  
  // optional float dmudx = 4;
  if (has_dmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dmudx(), output);
  }
  
  // optional float dmudr = 5;
  if (has_dmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dmudr(), output);
  }
  
  // optional float dmuda = 6;
  if (has_dmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dmuda(), output);
  }
  
  // optional float hvlSlope = 7;
  if (has_hvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hvlslope(), output);
  }
  
  // optional float Carriermu = 8;
  if (has_carriermu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->carriermu(), output);
  }
  
  // optional float Carrierdmudx = 9;
  if (has_carrierdmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->carrierdmudx(), output);
  }
  
  // optional float Carrierdmudr = 10;
  if (has_carrierdmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->carrierdmudr(), output);
  }
  
  // optional float Carrierdmuda = 11;
  if (has_carrierdmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->carrierdmuda(), output);
  }
  
  // optional float CarrierhvlSlope = 12;
  if (has_carrierhvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->carrierhvlslope(), output);
  }
  
  // optional float wedgeThick = 13;
  if (has_wedgethick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->wedgethick(), output);
  }
  
  // optional float carrierThick = 14;
  if (has_carrierthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->carrierthick(), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilContourVerter weightContourVerterList = 15;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->weightcontourverterlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilContourVerter carrierContourVerterList = 16;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->carriercontourverterlist(i), output);
  }
  
  // optional string wedgeUID = 17;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->wedgeuid(), output);
  }
  
  // optional string carrierUID = 18;
  if (has_carrieruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrieruid().data(), this->carrieruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->carrieruid(), output);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->contouruid1(), output);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->contouruid2(), output);
  }
  
  // optional float density = 21;
  if (has_density()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->density(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilBeamPhysicalWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeType = 1;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgetype(), target);
  }
  
  // optional string wedgeId = 2;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedgeid(), target);
  }
  
  // optional float mu = 3;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mu(), target);
  }
  
  // optional float dmudx = 4;
  if (has_dmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dmudx(), target);
  }
  
  // optional float dmudr = 5;
  if (has_dmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dmudr(), target);
  }
  
  // optional float dmuda = 6;
  if (has_dmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dmuda(), target);
  }
  
  // optional float hvlSlope = 7;
  if (has_hvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hvlslope(), target);
  }
  
  // optional float Carriermu = 8;
  if (has_carriermu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->carriermu(), target);
  }
  
  // optional float Carrierdmudx = 9;
  if (has_carrierdmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->carrierdmudx(), target);
  }
  
  // optional float Carrierdmudr = 10;
  if (has_carrierdmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->carrierdmudr(), target);
  }
  
  // optional float Carrierdmuda = 11;
  if (has_carrierdmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->carrierdmuda(), target);
  }
  
  // optional float CarrierhvlSlope = 12;
  if (has_carrierhvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->carrierhvlslope(), target);
  }
  
  // optional float wedgeThick = 13;
  if (has_wedgethick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->wedgethick(), target);
  }
  
  // optional float carrierThick = 14;
  if (has_carrierthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->carrierthick(), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilContourVerter weightContourVerterList = 15;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->weightcontourverterlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilContourVerter carrierContourVerterList = 16;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->carriercontourverterlist(i), target);
  }
  
  // optional string wedgeUID = 17;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->wedgeuid(), target);
  }
  
  // optional string carrierUID = 18;
  if (has_carrieruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrieruid().data(), this->carrieruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->carrieruid(), target);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->contouruid1(), target);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->contouruid2(), target);
  }
  
  // optional float density = 21;
  if (has_density()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->density(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilBeamPhysicalWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeType = 1;
    if (has_wedgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgetype());
    }
    
    // optional string wedgeId = 2;
    if (has_wedgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional float mu = 3;
    if (has_mu()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudx = 4;
    if (has_dmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudr = 5;
    if (has_dmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float dmuda = 6;
    if (has_dmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float hvlSlope = 7;
    if (has_hvlslope()) {
      total_size += 1 + 4;
    }
    
    // optional float Carriermu = 8;
    if (has_carriermu()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float Carrierdmudx = 9;
    if (has_carrierdmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmudr = 10;
    if (has_carrierdmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmuda = 11;
    if (has_carrierdmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float CarrierhvlSlope = 12;
    if (has_carrierhvlslope()) {
      total_size += 1 + 4;
    }
    
    // optional float wedgeThick = 13;
    if (has_wedgethick()) {
      total_size += 1 + 4;
    }
    
    // optional float carrierThick = 14;
    if (has_carrierthick()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string wedgeUID = 17;
    if (has_wedgeuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional string carrierUID = 18;
    if (has_carrieruid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrieruid());
    }
    
    // optional string contourUID1 = 19;
    if (has_contouruid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid1());
    }
    
    // optional string contourUID2 = 20;
    if (has_contouruid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid2());
    }
    
    // optional float density = 21;
    if (has_density()) {
      total_size += 2 + 4;
    }
    
  }
  // repeated .ms.proto.RT_MS_PencilContourVerter weightContourVerterList = 15;
  total_size += 1 * this->weightcontourverterlist_size();
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weightcontourverterlist(i));
  }
  
  // repeated .ms.proto.RT_MS_PencilContourVerter carrierContourVerterList = 16;
  total_size += 2 * this->carriercontourverterlist_size();
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carriercontourverterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilBeamPhysicalWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilBeamPhysicalWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilBeamPhysicalWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilBeamPhysicalWedgeField::MergeFrom(const RT_MS_PencilBeamPhysicalWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  weightcontourverterlist_.MergeFrom(from.weightcontourverterlist_);
  carriercontourverterlist_.MergeFrom(from.carriercontourverterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgetype()) {
      set_wedgetype(from.wedgetype());
    }
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_dmudx()) {
      set_dmudx(from.dmudx());
    }
    if (from.has_dmudr()) {
      set_dmudr(from.dmudr());
    }
    if (from.has_dmuda()) {
      set_dmuda(from.dmuda());
    }
    if (from.has_hvlslope()) {
      set_hvlslope(from.hvlslope());
    }
    if (from.has_carriermu()) {
      set_carriermu(from.carriermu());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carrierdmudx()) {
      set_carrierdmudx(from.carrierdmudx());
    }
    if (from.has_carrierdmudr()) {
      set_carrierdmudr(from.carrierdmudr());
    }
    if (from.has_carrierdmuda()) {
      set_carrierdmuda(from.carrierdmuda());
    }
    if (from.has_carrierhvlslope()) {
      set_carrierhvlslope(from.carrierhvlslope());
    }
    if (from.has_wedgethick()) {
      set_wedgethick(from.wedgethick());
    }
    if (from.has_carrierthick()) {
      set_carrierthick(from.carrierthick());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_carrieruid()) {
      set_carrieruid(from.carrieruid());
    }
    if (from.has_contouruid1()) {
      set_contouruid1(from.contouruid1());
    }
    if (from.has_contouruid2()) {
      set_contouruid2(from.contouruid2());
    }
    if (from.has_density()) {
      set_density(from.density());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilBeamPhysicalWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilBeamPhysicalWedgeField::CopyFrom(const RT_MS_PencilBeamPhysicalWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilBeamPhysicalWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilBeamPhysicalWedgeField::Swap(RT_MS_PencilBeamPhysicalWedgeField* other) {
  if (other != this) {
    std::swap(wedgetype_, other->wedgetype_);
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(mu_, other->mu_);
    std::swap(dmudx_, other->dmudx_);
    std::swap(dmudr_, other->dmudr_);
    std::swap(dmuda_, other->dmuda_);
    std::swap(hvlslope_, other->hvlslope_);
    std::swap(carriermu_, other->carriermu_);
    std::swap(carrierdmudx_, other->carrierdmudx_);
    std::swap(carrierdmudr_, other->carrierdmudr_);
    std::swap(carrierdmuda_, other->carrierdmuda_);
    std::swap(carrierhvlslope_, other->carrierhvlslope_);
    std::swap(wedgethick_, other->wedgethick_);
    std::swap(carrierthick_, other->carrierthick_);
    weightcontourverterlist_.Swap(&other->weightcontourverterlist_);
    carriercontourverterlist_.Swap(&other->carriercontourverterlist_);
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(carrieruid_, other->carrieruid_);
    std::swap(contouruid1_, other->contouruid1_);
    std::swap(contouruid2_, other->contouruid2_);
    std::swap(density_, other->density_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilBeamPhysicalWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilBeamPhysicalWedgeField_descriptor_;
  metadata.reflection = RT_MS_PencilBeamPhysicalWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilContourVerter::kUidFieldNumber;
const int RT_MS_PencilContourVerter::kContourVerterxFieldNumber;
const int RT_MS_PencilContourVerter::kContourVerteryFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilContourVerter::RT_MS_PencilContourVerter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilContourVerter::InitAsDefaultInstance() {
}

RT_MS_PencilContourVerter::RT_MS_PencilContourVerter(const RT_MS_PencilContourVerter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilContourVerter::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contourverterx_ = 0;
  contourvertery_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilContourVerter::~RT_MS_PencilContourVerter() {
  SharedDtor();
}

void RT_MS_PencilContourVerter::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilContourVerter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilContourVerter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilContourVerter_descriptor_;
}

const RT_MS_PencilContourVerter& RT_MS_PencilContourVerter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilContourVerter* RT_MS_PencilContourVerter::default_instance_ = NULL;

RT_MS_PencilContourVerter* RT_MS_PencilContourVerter::New() const {
  return new RT_MS_PencilContourVerter;
}

void RT_MS_PencilContourVerter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    contourverterx_ = 0;
    contourvertery_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilContourVerter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ContourVerterx;
        break;
      }
      
      // optional float ContourVerterx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVerterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourverterx_)));
          set_has_contourverterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ContourVertery;
        break;
      }
      
      // optional float ContourVertery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVertery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourvertery_)));
          set_has_contourvertery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilContourVerter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->contourverterx(), output);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contourvertery(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilContourVerter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->contourverterx(), target);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contourvertery(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilContourVerter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float ContourVerterx = 2;
    if (has_contourverterx()) {
      total_size += 1 + 4;
    }
    
    // optional float ContourVertery = 3;
    if (has_contourvertery()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilContourVerter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilContourVerter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilContourVerter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilContourVerter::MergeFrom(const RT_MS_PencilContourVerter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_contourverterx()) {
      set_contourverterx(from.contourverterx());
    }
    if (from.has_contourvertery()) {
      set_contourvertery(from.contourvertery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilContourVerter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilContourVerter::CopyFrom(const RT_MS_PencilContourVerter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilContourVerter::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilContourVerter::Swap(RT_MS_PencilContourVerter* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(contourverterx_, other->contourverterx_);
    std::swap(contourvertery_, other->contourvertery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilContourVerter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilContourVerter_descriptor_;
  metadata.reflection = RT_MS_PencilContourVerter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilBeamVirtualWedgeInfo::kVirtualUidFieldNumber;
const int RT_MS_PencilBeamVirtualWedgeInfo::kGoldenUIDFieldNumber;
const int RT_MS_PencilBeamVirtualWedgeInfo::kVirtualWedgeFieldListFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilBeamVirtualWedgeInfo::RT_MS_PencilBeamVirtualWedgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilBeamVirtualWedgeInfo::InitAsDefaultInstance() {
}

RT_MS_PencilBeamVirtualWedgeInfo::RT_MS_PencilBeamVirtualWedgeInfo(const RT_MS_PencilBeamVirtualWedgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilBeamVirtualWedgeInfo::SharedCtor() {
  _cached_size_ = 0;
  virtualuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goldenuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilBeamVirtualWedgeInfo::~RT_MS_PencilBeamVirtualWedgeInfo() {
  SharedDtor();
}

void RT_MS_PencilBeamVirtualWedgeInfo::SharedDtor() {
  if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
    delete virtualuid_;
  }
  if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
    delete goldenuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilBeamVirtualWedgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilBeamVirtualWedgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilBeamVirtualWedgeInfo_descriptor_;
}

const RT_MS_PencilBeamVirtualWedgeInfo& RT_MS_PencilBeamVirtualWedgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilBeamVirtualWedgeInfo* RT_MS_PencilBeamVirtualWedgeInfo::default_instance_ = NULL;

RT_MS_PencilBeamVirtualWedgeInfo* RT_MS_PencilBeamVirtualWedgeInfo::New() const {
  return new RT_MS_PencilBeamVirtualWedgeInfo;
}

void RT_MS_PencilBeamVirtualWedgeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_virtualuid()) {
      if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
        virtualuid_->clear();
      }
    }
    if (has_goldenuid()) {
      if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
        goldenuid_->clear();
      }
    }
  }
  virtualwedgefieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilBeamVirtualWedgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtualUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtualuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtualuid().data(), this->virtualuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldenUID;
        break;
      }
      
      // optional string goldenUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldenUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goldenuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goldenuid().data(), this->goldenuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_virtualWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PencilVirtualWedgeField virtualWedgeFieldList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_virtualWedgeFieldList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilBeamVirtualWedgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string virtualUid = 1;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->virtualuid(), output);
  }
  
  // optional string goldenUID = 2;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->goldenuid(), output);
  }
  
  // repeated .ms.proto.RT_MS_PencilVirtualWedgeField virtualWedgeFieldList = 3;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->virtualwedgefieldlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilBeamVirtualWedgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string virtualUid = 1;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtualuid(), target);
  }
  
  // optional string goldenUID = 2;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->goldenuid(), target);
  }
  
  // repeated .ms.proto.RT_MS_PencilVirtualWedgeField virtualWedgeFieldList = 3;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->virtualwedgefieldlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilBeamVirtualWedgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string virtualUid = 1;
    if (has_virtualuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtualuid());
    }
    
    // optional string goldenUID = 2;
    if (has_goldenuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goldenuid());
    }
    
  }
  // repeated .ms.proto.RT_MS_PencilVirtualWedgeField virtualWedgeFieldList = 3;
  total_size += 1 * this->virtualwedgefieldlist_size();
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgefieldlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilBeamVirtualWedgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilBeamVirtualWedgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilBeamVirtualWedgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilBeamVirtualWedgeInfo::MergeFrom(const RT_MS_PencilBeamVirtualWedgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgefieldlist_.MergeFrom(from.virtualwedgefieldlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virtualuid()) {
      set_virtualuid(from.virtualuid());
    }
    if (from.has_goldenuid()) {
      set_goldenuid(from.goldenuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilBeamVirtualWedgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilBeamVirtualWedgeInfo::CopyFrom(const RT_MS_PencilBeamVirtualWedgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilBeamVirtualWedgeInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilBeamVirtualWedgeInfo::Swap(RT_MS_PencilBeamVirtualWedgeInfo* other) {
  if (other != this) {
    std::swap(virtualuid_, other->virtualuid_);
    std::swap(goldenuid_, other->goldenuid_);
    virtualwedgefieldlist_.Swap(&other->virtualwedgefieldlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilBeamVirtualWedgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilBeamVirtualWedgeInfo_descriptor_;
  metadata.reflection = RT_MS_PencilBeamVirtualWedgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PencilVirtualWedgeField::kUidFieldNumber;
const int RT_MS_PencilVirtualWedgeField::kCollimatorX1PositionFieldNumber;
const int RT_MS_PencilVirtualWedgeField::kCollimatorX2PositionFieldNumber;
const int RT_MS_PencilVirtualWedgeField::kRelativeMUFieldNumber;
const int RT_MS_PencilVirtualWedgeField::kCorrectionFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_PencilVirtualWedgeField::RT_MS_PencilVirtualWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PencilVirtualWedgeField::InitAsDefaultInstance() {
}

RT_MS_PencilVirtualWedgeField::RT_MS_PencilVirtualWedgeField(const RT_MS_PencilVirtualWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PencilVirtualWedgeField::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collimatorx1position_ = 0;
  collimatorx2position_ = 0;
  relativemu_ = 0;
  correctionfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PencilVirtualWedgeField::~RT_MS_PencilVirtualWedgeField() {
  SharedDtor();
}

void RT_MS_PencilVirtualWedgeField::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PencilVirtualWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PencilVirtualWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PencilVirtualWedgeField_descriptor_;
}

const RT_MS_PencilVirtualWedgeField& RT_MS_PencilVirtualWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fpencilbeam_2eproto();  return *default_instance_;
}

RT_MS_PencilVirtualWedgeField* RT_MS_PencilVirtualWedgeField::default_instance_ = NULL;

RT_MS_PencilVirtualWedgeField* RT_MS_PencilVirtualWedgeField::New() const {
  return new RT_MS_PencilVirtualWedgeField;
}

void RT_MS_PencilVirtualWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    collimatorx1position_ = 0;
    collimatorx2position_ = 0;
    relativemu_ = 0;
    correctionfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PencilVirtualWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_collimatorX1Position;
        break;
      }
      
      // optional float collimatorX1Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX1Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx1position_)));
          set_has_collimatorx1position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_collimatorX2Position;
        break;
      }
      
      // optional float collimatorX2Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX2Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx2position_)));
          set_has_collimatorx2position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeMU;
        break;
      }
      
      // optional float relativeMU = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeMU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativemu_)));
          set_has_relativemu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_correctionFactor;
        break;
      }
      
      // optional float correctionFactor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_correctionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correctionfactor_)));
          set_has_correctionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PencilVirtualWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->collimatorx1position(), output);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->collimatorx2position(), output);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativemu(), output);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->correctionfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PencilVirtualWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->collimatorx1position(), target);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->collimatorx2position(), target);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativemu(), target);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->correctionfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PencilVirtualWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float collimatorX1Position = 2;
    if (has_collimatorx1position()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorX2Position = 3;
    if (has_collimatorx2position()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeMU = 4;
    if (has_relativemu()) {
      total_size += 1 + 4;
    }
    
    // optional float correctionFactor = 5;
    if (has_correctionfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PencilVirtualWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PencilVirtualWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PencilVirtualWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PencilVirtualWedgeField::MergeFrom(const RT_MS_PencilVirtualWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_collimatorx1position()) {
      set_collimatorx1position(from.collimatorx1position());
    }
    if (from.has_collimatorx2position()) {
      set_collimatorx2position(from.collimatorx2position());
    }
    if (from.has_relativemu()) {
      set_relativemu(from.relativemu());
    }
    if (from.has_correctionfactor()) {
      set_correctionfactor(from.correctionfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PencilVirtualWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PencilVirtualWedgeField::CopyFrom(const RT_MS_PencilVirtualWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PencilVirtualWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_PencilVirtualWedgeField::Swap(RT_MS_PencilVirtualWedgeField* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(collimatorx1position_, other->collimatorx1position_);
    std::swap(collimatorx2position_, other->collimatorx2position_);
    std::swap(relativemu_, other->relativemu_);
    std::swap(correctionfactor_, other->correctionfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PencilVirtualWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PencilVirtualWedgeField_descriptor_;
  metadata.reflection = RT_MS_PencilVirtualWedgeField_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
