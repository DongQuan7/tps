// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_doselinesetting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoDoseLineSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoDoseLineSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedDoseLineSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedDoseLineSetting_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_doselinesetting.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoDoseLineSetting_descriptor_ = file->message_type(0);
  static const int RtTpsProtoDoseLineSetting_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, displaymode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, hundredpercentdefinition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, specifieddose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, rendermode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, transparency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, transparency3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, enableskindoseview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, maxskindose_),
  };
  RtTpsProtoDoseLineSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoDoseLineSetting_descriptor_,
      RtTpsProtoDoseLineSetting::default_instance_,
      RtTpsProtoDoseLineSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoDoseLineSetting));
  RtTpsProtoRepeatedDoseLineSetting_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedDoseLineSetting_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedDoseLineSetting, doselinesettinglist_),
  };
  RtTpsProtoRepeatedDoseLineSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedDoseLineSetting_descriptor_,
      RtTpsProtoRepeatedDoseLineSetting::default_instance_,
      RtTpsProtoRepeatedDoseLineSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedDoseLineSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedDoseLineSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedDoseLineSetting));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoDoseLineSetting_descriptor_, &RtTpsProtoDoseLineSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedDoseLineSetting_descriptor_, &RtTpsProtoRepeatedDoseLineSetting::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoselinesetting_2eproto() {
  delete RtTpsProtoDoseLineSetting::default_instance_;
  delete RtTpsProtoDoseLineSetting_reflection_;
  delete RtTpsProtoRepeatedDoseLineSetting::default_instance_;
  delete RtTpsProtoRepeatedDoseLineSetting_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"rt_tps_proto_doselinesetting.proto\022\ttp"
    "s.proto\"\334\001\n\031RtTpsProtoDoseLineSetting\022\023\n"
    "\013displayMode\030\001 \001(\005\022 \n\030hundredPercentDefi"
    "nition\030\002 \001(\005\022\025\n\rspecifiedDose\030\003 \001(\002\022\022\n\nr"
    "enderMode\030\004 \001(\005\022\024\n\014transparency\030\005 \001(\002\022\026\n"
    "\016transparency3D\030\006 \001(\002\022\032\n\022enableSkinDoseV"
    "iew\030\007 \001(\010\022\023\n\013maxSkinDose\030\010 \001(\002\"f\n!RtTpsP"
    "rotoRepeatedDoseLineSetting\022A\n\023doseLineS"
    "ettingList\030\001 \003(\0132$.tps.proto.RtTpsProtoD"
    "oseLineSetting", 374);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_doselinesetting.proto", &protobuf_RegisterTypes);
  RtTpsProtoDoseLineSetting::default_instance_ = new RtTpsProtoDoseLineSetting();
  RtTpsProtoRepeatedDoseLineSetting::default_instance_ = new RtTpsProtoRepeatedDoseLineSetting();
  RtTpsProtoDoseLineSetting::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedDoseLineSetting::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoselinesetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fdoselinesetting_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fdoselinesetting_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fdoselinesetting_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoDoseLineSetting::kDisplayModeFieldNumber;
const int RtTpsProtoDoseLineSetting::kHundredPercentDefinitionFieldNumber;
const int RtTpsProtoDoseLineSetting::kSpecifiedDoseFieldNumber;
const int RtTpsProtoDoseLineSetting::kRenderModeFieldNumber;
const int RtTpsProtoDoseLineSetting::kTransparencyFieldNumber;
const int RtTpsProtoDoseLineSetting::kTransparency3DFieldNumber;
const int RtTpsProtoDoseLineSetting::kEnableSkinDoseViewFieldNumber;
const int RtTpsProtoDoseLineSetting::kMaxSkinDoseFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoDoseLineSetting::RtTpsProtoDoseLineSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoDoseLineSetting::InitAsDefaultInstance() {
}

RtTpsProtoDoseLineSetting::RtTpsProtoDoseLineSetting(const RtTpsProtoDoseLineSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoDoseLineSetting::SharedCtor() {
  _cached_size_ = 0;
  displaymode_ = 0;
  hundredpercentdefinition_ = 0;
  specifieddose_ = 0;
  rendermode_ = 0;
  transparency_ = 0;
  transparency3d_ = 0;
  enableskindoseview_ = false;
  maxskindose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoDoseLineSetting::~RtTpsProtoDoseLineSetting() {
  SharedDtor();
}

void RtTpsProtoDoseLineSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoDoseLineSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoDoseLineSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoDoseLineSetting_descriptor_;
}

const RtTpsProtoDoseLineSetting& RtTpsProtoDoseLineSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();  return *default_instance_;
}

RtTpsProtoDoseLineSetting* RtTpsProtoDoseLineSetting::default_instance_ = NULL;

RtTpsProtoDoseLineSetting* RtTpsProtoDoseLineSetting::New() const {
  return new RtTpsProtoDoseLineSetting;
}

void RtTpsProtoDoseLineSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    displaymode_ = 0;
    hundredpercentdefinition_ = 0;
    specifieddose_ = 0;
    rendermode_ = 0;
    transparency_ = 0;
    transparency3d_ = 0;
    enableskindoseview_ = false;
    maxskindose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoDoseLineSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 displayMode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displaymode_)));
          set_has_displaymode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hundredPercentDefinition;
        break;
      }
      
      // optional int32 hundredPercentDefinition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hundredPercentDefinition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hundredpercentdefinition_)));
          set_has_hundredpercentdefinition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_specifiedDose;
        break;
      }
      
      // optional float specifiedDose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_specifiedDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &specifieddose_)));
          set_has_specifieddose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_renderMode;
        break;
      }
      
      // optional int32 renderMode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_renderMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rendermode_)));
          set_has_rendermode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_transparency;
        break;
      }
      
      // optional float transparency = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transparency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency_)));
          set_has_transparency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_transparency3D;
        break;
      }
      
      // optional float transparency3D = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_transparency3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &transparency3d_)));
          set_has_transparency3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_enableSkinDoseView;
        break;
      }
      
      // optional bool enableSkinDoseView = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enableSkinDoseView:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enableskindoseview_)));
          set_has_enableskindoseview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxSkinDose;
        break;
      }
      
      // optional float maxSkinDose = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxSkinDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxskindose_)));
          set_has_maxskindose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoDoseLineSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 displayMode = 1;
  if (has_displaymode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->displaymode(), output);
  }
  
  // optional int32 hundredPercentDefinition = 2;
  if (has_hundredpercentdefinition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hundredpercentdefinition(), output);
  }
  
  // optional float specifiedDose = 3;
  if (has_specifieddose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->specifieddose(), output);
  }
  
  // optional int32 renderMode = 4;
  if (has_rendermode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rendermode(), output);
  }
  
  // optional float transparency = 5;
  if (has_transparency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->transparency(), output);
  }
  
  // optional float transparency3D = 6;
  if (has_transparency3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->transparency3d(), output);
  }
  
  // optional bool enableSkinDoseView = 7;
  if (has_enableskindoseview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->enableskindoseview(), output);
  }
  
  // optional float maxSkinDose = 8;
  if (has_maxskindose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxskindose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoDoseLineSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 displayMode = 1;
  if (has_displaymode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->displaymode(), target);
  }
  
  // optional int32 hundredPercentDefinition = 2;
  if (has_hundredpercentdefinition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hundredpercentdefinition(), target);
  }
  
  // optional float specifiedDose = 3;
  if (has_specifieddose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->specifieddose(), target);
  }
  
  // optional int32 renderMode = 4;
  if (has_rendermode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rendermode(), target);
  }
  
  // optional float transparency = 5;
  if (has_transparency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->transparency(), target);
  }
  
  // optional float transparency3D = 6;
  if (has_transparency3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->transparency3d(), target);
  }
  
  // optional bool enableSkinDoseView = 7;
  if (has_enableskindoseview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->enableskindoseview(), target);
  }
  
  // optional float maxSkinDose = 8;
  if (has_maxskindose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxskindose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoDoseLineSetting::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 displayMode = 1;
    if (has_displaymode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displaymode());
    }
    
    // optional int32 hundredPercentDefinition = 2;
    if (has_hundredpercentdefinition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hundredpercentdefinition());
    }
    
    // optional float specifiedDose = 3;
    if (has_specifieddose()) {
      total_size += 1 + 4;
    }
    
    // optional int32 renderMode = 4;
    if (has_rendermode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rendermode());
    }
    
    // optional float transparency = 5;
    if (has_transparency()) {
      total_size += 1 + 4;
    }
    
    // optional float transparency3D = 6;
    if (has_transparency3d()) {
      total_size += 1 + 4;
    }
    
    // optional bool enableSkinDoseView = 7;
    if (has_enableskindoseview()) {
      total_size += 1 + 1;
    }
    
    // optional float maxSkinDose = 8;
    if (has_maxskindose()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoDoseLineSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoDoseLineSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoDoseLineSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoDoseLineSetting::MergeFrom(const RtTpsProtoDoseLineSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_displaymode()) {
      set_displaymode(from.displaymode());
    }
    if (from.has_hundredpercentdefinition()) {
      set_hundredpercentdefinition(from.hundredpercentdefinition());
    }
    if (from.has_specifieddose()) {
      set_specifieddose(from.specifieddose());
    }
    if (from.has_rendermode()) {
      set_rendermode(from.rendermode());
    }
    if (from.has_transparency()) {
      set_transparency(from.transparency());
    }
    if (from.has_transparency3d()) {
      set_transparency3d(from.transparency3d());
    }
    if (from.has_enableskindoseview()) {
      set_enableskindoseview(from.enableskindoseview());
    }
    if (from.has_maxskindose()) {
      set_maxskindose(from.maxskindose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoDoseLineSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoDoseLineSetting::CopyFrom(const RtTpsProtoDoseLineSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoDoseLineSetting::IsInitialized() const {
  
  return true;
}

void RtTpsProtoDoseLineSetting::Swap(RtTpsProtoDoseLineSetting* other) {
  if (other != this) {
    std::swap(displaymode_, other->displaymode_);
    std::swap(hundredpercentdefinition_, other->hundredpercentdefinition_);
    std::swap(specifieddose_, other->specifieddose_);
    std::swap(rendermode_, other->rendermode_);
    std::swap(transparency_, other->transparency_);
    std::swap(transparency3d_, other->transparency3d_);
    std::swap(enableskindoseview_, other->enableskindoseview_);
    std::swap(maxskindose_, other->maxskindose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoDoseLineSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoDoseLineSetting_descriptor_;
  metadata.reflection = RtTpsProtoDoseLineSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedDoseLineSetting::kDoseLineSettingListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedDoseLineSetting::RtTpsProtoRepeatedDoseLineSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedDoseLineSetting::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedDoseLineSetting::RtTpsProtoRepeatedDoseLineSetting(const RtTpsProtoRepeatedDoseLineSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedDoseLineSetting::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedDoseLineSetting::~RtTpsProtoRepeatedDoseLineSetting() {
  SharedDtor();
}

void RtTpsProtoRepeatedDoseLineSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedDoseLineSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedDoseLineSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedDoseLineSetting_descriptor_;
}

const RtTpsProtoRepeatedDoseLineSetting& RtTpsProtoRepeatedDoseLineSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedDoseLineSetting* RtTpsProtoRepeatedDoseLineSetting::default_instance_ = NULL;

RtTpsProtoRepeatedDoseLineSetting* RtTpsProtoRepeatedDoseLineSetting::New() const {
  return new RtTpsProtoRepeatedDoseLineSetting;
}

void RtTpsProtoRepeatedDoseLineSetting::Clear() {
  doselinesettinglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedDoseLineSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoDoseLineSetting doseLineSettingList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doseLineSettingList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doselinesettinglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_doseLineSettingList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedDoseLineSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoDoseLineSetting doseLineSettingList = 1;
  for (int i = 0; i < this->doselinesettinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doselinesettinglist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedDoseLineSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoDoseLineSetting doseLineSettingList = 1;
  for (int i = 0; i < this->doselinesettinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doselinesettinglist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedDoseLineSetting::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoDoseLineSetting doseLineSettingList = 1;
  total_size += 1 * this->doselinesettinglist_size();
  for (int i = 0; i < this->doselinesettinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doselinesettinglist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedDoseLineSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedDoseLineSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedDoseLineSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedDoseLineSetting::MergeFrom(const RtTpsProtoRepeatedDoseLineSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  doselinesettinglist_.MergeFrom(from.doselinesettinglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedDoseLineSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedDoseLineSetting::CopyFrom(const RtTpsProtoRepeatedDoseLineSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedDoseLineSetting::IsInitialized() const {
  
  return true;
}

void RtTpsProtoRepeatedDoseLineSetting::Swap(RtTpsProtoRepeatedDoseLineSetting* other) {
  if (other != this) {
    doselinesettinglist_.Swap(&other->doselinesettinglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedDoseLineSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedDoseLineSetting_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedDoseLineSetting_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
