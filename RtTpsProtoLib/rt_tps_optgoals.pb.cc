// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_optgoals.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_Optgoal_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Optgoal_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_OptgoalList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_OptgoalList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5foptgoals_2eproto() {
  protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_optgoals.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_Optgoal_descriptor_ = file->message_type(0);
  static const int RT_TPS_Optgoal_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, normgroupuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, voiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, voiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, planningrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, fuctiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, minmaxflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, eud_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, ishard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, optgoaluid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, isjoinopt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, eudresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, id_),
  };
  RT_TPS_Optgoal_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Optgoal_descriptor_,
      RT_TPS_Optgoal::default_instance_,
      RT_TPS_Optgoal_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Optgoal, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Optgoal));
  RT_TPS_OptgoalList_descriptor_ = file->message_type(1);
  static const int RT_TPS_OptgoalList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptgoalList, opts_),
  };
  RT_TPS_OptgoalList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_OptgoalList_descriptor_,
      RT_TPS_OptgoalList::default_instance_,
      RT_TPS_OptgoalList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptgoalList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_OptgoalList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_OptgoalList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5foptgoals_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Optgoal_descriptor_, &RT_TPS_Optgoal::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_OptgoalList_descriptor_, &RT_TPS_OptgoalList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5foptgoals_2eproto() {
  delete RT_TPS_Optgoal::default_instance_;
  delete RT_TPS_Optgoal_reflection_;
  delete RT_TPS_OptgoalList::default_instance_;
  delete RT_TPS_OptgoalList_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rt_tps_optgoals.proto\022\ttps.proto\"\227\002\n\016R"
    "T_TPS_Optgoal\022\024\n\014normGroupUid\030\001 \001(\t\022\016\n\006v"
    "oiUid\030\002 \001(\t\022\017\n\007voiName\030\003 \001(\t\022\024\n\014planning"
    "Role\030\004 \001(\005\022\023\n\013fuctionType\030\005 \001(\005\022\022\n\nminMa"
    "xFlag\030\006 \001(\005\022\014\n\004dose\030\007 \001(\002\022\016\n\006volume\030\010 \001("
    "\002\022\013\n\003eud\030\t \001(\002\022\016\n\006weight\030\n \001(\002\022\016\n\006isHard"
    "\030\013 \001(\010\022\022\n\noptGoalUid\030\014 \001(\t\022\021\n\tisJoinOpt\030"
    "\r \001(\010\022\021\n\teudResult\030\016 \001(\002\022\n\n\002id\030\017 \001(\005\"=\n\022"
    "RT_TPS_OptgoalList\022\'\n\004opts\030\001 \003(\0132\031.tps.p"
    "roto.RT_TPS_Optgoal", 379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_optgoals.proto", &protobuf_RegisterTypes);
  RT_TPS_Optgoal::default_instance_ = new RT_TPS_Optgoal();
  RT_TPS_OptgoalList::default_instance_ = new RT_TPS_OptgoalList();
  RT_TPS_Optgoal::default_instance_->InitAsDefaultInstance();
  RT_TPS_OptgoalList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5foptgoals_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5foptgoals_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5foptgoals_2eproto() {
    protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5foptgoals_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Optgoal::kNormGroupUidFieldNumber;
const int RT_TPS_Optgoal::kVoiUidFieldNumber;
const int RT_TPS_Optgoal::kVoiNameFieldNumber;
const int RT_TPS_Optgoal::kPlanningRoleFieldNumber;
const int RT_TPS_Optgoal::kFuctionTypeFieldNumber;
const int RT_TPS_Optgoal::kMinMaxFlagFieldNumber;
const int RT_TPS_Optgoal::kDoseFieldNumber;
const int RT_TPS_Optgoal::kVolumeFieldNumber;
const int RT_TPS_Optgoal::kEudFieldNumber;
const int RT_TPS_Optgoal::kWeightFieldNumber;
const int RT_TPS_Optgoal::kIsHardFieldNumber;
const int RT_TPS_Optgoal::kOptGoalUidFieldNumber;
const int RT_TPS_Optgoal::kIsJoinOptFieldNumber;
const int RT_TPS_Optgoal::kEudResultFieldNumber;
const int RT_TPS_Optgoal::kIdFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Optgoal::RT_TPS_Optgoal()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Optgoal::InitAsDefaultInstance() {
}

RT_TPS_Optgoal::RT_TPS_Optgoal(const RT_TPS_Optgoal& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Optgoal::SharedCtor() {
  _cached_size_ = 0;
  normgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planningrole_ = 0;
  fuctiontype_ = 0;
  minmaxflag_ = 0;
  dose_ = 0;
  volume_ = 0;
  eud_ = 0;
  weight_ = 0;
  ishard_ = false;
  optgoaluid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isjoinopt_ = false;
  eudresult_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Optgoal::~RT_TPS_Optgoal() {
  SharedDtor();
}

void RT_TPS_Optgoal::SharedDtor() {
  if (normgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete normgroupuid_;
  }
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete voiuid_;
  }
  if (voiname_ != &::google::protobuf::internal::kEmptyString) {
    delete voiname_;
  }
  if (optgoaluid_ != &::google::protobuf::internal::kEmptyString) {
    delete optgoaluid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Optgoal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Optgoal::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Optgoal_descriptor_;
}

const RT_TPS_Optgoal& RT_TPS_Optgoal::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();  return *default_instance_;
}

RT_TPS_Optgoal* RT_TPS_Optgoal::default_instance_ = NULL;

RT_TPS_Optgoal* RT_TPS_Optgoal::New() const {
  return new RT_TPS_Optgoal;
}

void RT_TPS_Optgoal::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_normgroupuid()) {
      if (normgroupuid_ != &::google::protobuf::internal::kEmptyString) {
        normgroupuid_->clear();
      }
    }
    if (has_voiuid()) {
      if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
        voiuid_->clear();
      }
    }
    if (has_voiname()) {
      if (voiname_ != &::google::protobuf::internal::kEmptyString) {
        voiname_->clear();
      }
    }
    planningrole_ = 0;
    fuctiontype_ = 0;
    minmaxflag_ = 0;
    dose_ = 0;
    volume_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    eud_ = 0;
    weight_ = 0;
    ishard_ = false;
    if (has_optgoaluid()) {
      if (optgoaluid_ != &::google::protobuf::internal::kEmptyString) {
        optgoaluid_->clear();
      }
    }
    isjoinopt_ = false;
    eudresult_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Optgoal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string normGroupUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normgroupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normgroupuid().data(), this->normgroupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_voiUid;
        break;
      }
      
      // optional string voiUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiuid().data(), this->voiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_voiName;
        break;
      }
      
      // optional string voiName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiname().data(), this->voiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_planningRole;
        break;
      }
      
      // optional int32 planningRole = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planningRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planningrole_)));
          set_has_planningrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fuctionType;
        break;
      }
      
      // optional int32 fuctionType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fuctionType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuctiontype_)));
          set_has_fuctiontype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minMaxFlag;
        break;
      }
      
      // optional int32 minMaxFlag = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minMaxFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minmaxflag_)));
          set_has_minmaxflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_dose;
        break;
      }
      
      // optional float dose = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_volume;
        break;
      }
      
      // optional float volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_eud;
        break;
      }
      
      // optional float eud = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eud:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eud_)));
          set_has_eud();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_weight;
        break;
      }
      
      // optional float weight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isHard;
        break;
      }
      
      // optional bool isHard = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isHard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ishard_)));
          set_has_ishard();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_optGoalUid;
        break;
      }
      
      // optional string optGoalUid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optGoalUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_optgoaluid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->optgoaluid().data(), this->optgoaluid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isJoinOpt;
        break;
      }
      
      // optional bool isJoinOpt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoinOpt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoinopt_)));
          set_has_isjoinopt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_eudResult;
        break;
      }
      
      // optional float eudResult = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_eudResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eudresult_)));
          set_has_eudresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_id;
        break;
      }
      
      // optional int32 id = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Optgoal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string normGroupUid = 1;
  if (has_normgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normgroupuid().data(), this->normgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->normgroupuid(), output);
  }
  
  // optional string voiUid = 2;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->voiuid(), output);
  }
  
  // optional string voiName = 3;
  if (has_voiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiname().data(), this->voiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->voiname(), output);
  }
  
  // optional int32 planningRole = 4;
  if (has_planningrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->planningrole(), output);
  }
  
  // optional int32 fuctionType = 5;
  if (has_fuctiontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fuctiontype(), output);
  }
  
  // optional int32 minMaxFlag = 6;
  if (has_minmaxflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minmaxflag(), output);
  }
  
  // optional float dose = 7;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->dose(), output);
  }
  
  // optional float volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->volume(), output);
  }
  
  // optional float eud = 9;
  if (has_eud()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->eud(), output);
  }
  
  // optional float weight = 10;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->weight(), output);
  }
  
  // optional bool isHard = 11;
  if (has_ishard()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->ishard(), output);
  }
  
  // optional string optGoalUid = 12;
  if (has_optgoaluid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optgoaluid().data(), this->optgoaluid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->optgoaluid(), output);
  }
  
  // optional bool isJoinOpt = 13;
  if (has_isjoinopt()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isjoinopt(), output);
  }
  
  // optional float eudResult = 14;
  if (has_eudresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->eudresult(), output);
  }
  
  // optional int32 id = 15;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Optgoal::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string normGroupUid = 1;
  if (has_normgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normgroupuid().data(), this->normgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->normgroupuid(), target);
  }
  
  // optional string voiUid = 2;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->voiuid(), target);
  }
  
  // optional string voiName = 3;
  if (has_voiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiname().data(), this->voiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->voiname(), target);
  }
  
  // optional int32 planningRole = 4;
  if (has_planningrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->planningrole(), target);
  }
  
  // optional int32 fuctionType = 5;
  if (has_fuctiontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fuctiontype(), target);
  }
  
  // optional int32 minMaxFlag = 6;
  if (has_minmaxflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minmaxflag(), target);
  }
  
  // optional float dose = 7;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->dose(), target);
  }
  
  // optional float volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->volume(), target);
  }
  
  // optional float eud = 9;
  if (has_eud()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->eud(), target);
  }
  
  // optional float weight = 10;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->weight(), target);
  }
  
  // optional bool isHard = 11;
  if (has_ishard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->ishard(), target);
  }
  
  // optional string optGoalUid = 12;
  if (has_optgoaluid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->optgoaluid().data(), this->optgoaluid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->optgoaluid(), target);
  }
  
  // optional bool isJoinOpt = 13;
  if (has_isjoinopt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isjoinopt(), target);
  }
  
  // optional float eudResult = 14;
  if (has_eudresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->eudresult(), target);
  }
  
  // optional int32 id = 15;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Optgoal::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string normGroupUid = 1;
    if (has_normgroupuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normgroupuid());
    }
    
    // optional string voiUid = 2;
    if (has_voiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiuid());
    }
    
    // optional string voiName = 3;
    if (has_voiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiname());
    }
    
    // optional int32 planningRole = 4;
    if (has_planningrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planningrole());
    }
    
    // optional int32 fuctionType = 5;
    if (has_fuctiontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuctiontype());
    }
    
    // optional int32 minMaxFlag = 6;
    if (has_minmaxflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minmaxflag());
    }
    
    // optional float dose = 7;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
    // optional float volume = 8;
    if (has_volume()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float eud = 9;
    if (has_eud()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 10;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
    // optional bool isHard = 11;
    if (has_ishard()) {
      total_size += 1 + 1;
    }
    
    // optional string optGoalUid = 12;
    if (has_optgoaluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->optgoaluid());
    }
    
    // optional bool isJoinOpt = 13;
    if (has_isjoinopt()) {
      total_size += 1 + 1;
    }
    
    // optional float eudResult = 14;
    if (has_eudresult()) {
      total_size += 1 + 4;
    }
    
    // optional int32 id = 15;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Optgoal::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Optgoal* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Optgoal*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Optgoal::MergeFrom(const RT_TPS_Optgoal& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normgroupuid()) {
      set_normgroupuid(from.normgroupuid());
    }
    if (from.has_voiuid()) {
      set_voiuid(from.voiuid());
    }
    if (from.has_voiname()) {
      set_voiname(from.voiname());
    }
    if (from.has_planningrole()) {
      set_planningrole(from.planningrole());
    }
    if (from.has_fuctiontype()) {
      set_fuctiontype(from.fuctiontype());
    }
    if (from.has_minmaxflag()) {
      set_minmaxflag(from.minmaxflag());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_eud()) {
      set_eud(from.eud());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
    if (from.has_ishard()) {
      set_ishard(from.ishard());
    }
    if (from.has_optgoaluid()) {
      set_optgoaluid(from.optgoaluid());
    }
    if (from.has_isjoinopt()) {
      set_isjoinopt(from.isjoinopt());
    }
    if (from.has_eudresult()) {
      set_eudresult(from.eudresult());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Optgoal::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Optgoal::CopyFrom(const RT_TPS_Optgoal& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Optgoal::IsInitialized() const {
  
  return true;
}

void RT_TPS_Optgoal::Swap(RT_TPS_Optgoal* other) {
  if (other != this) {
    std::swap(normgroupuid_, other->normgroupuid_);
    std::swap(voiuid_, other->voiuid_);
    std::swap(voiname_, other->voiname_);
    std::swap(planningrole_, other->planningrole_);
    std::swap(fuctiontype_, other->fuctiontype_);
    std::swap(minmaxflag_, other->minmaxflag_);
    std::swap(dose_, other->dose_);
    std::swap(volume_, other->volume_);
    std::swap(eud_, other->eud_);
    std::swap(weight_, other->weight_);
    std::swap(ishard_, other->ishard_);
    std::swap(optgoaluid_, other->optgoaluid_);
    std::swap(isjoinopt_, other->isjoinopt_);
    std::swap(eudresult_, other->eudresult_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Optgoal::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Optgoal_descriptor_;
  metadata.reflection = RT_TPS_Optgoal_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_OptgoalList::kOptsFieldNumber;
#endif  // !_MSC_VER

RT_TPS_OptgoalList::RT_TPS_OptgoalList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_OptgoalList::InitAsDefaultInstance() {
}

RT_TPS_OptgoalList::RT_TPS_OptgoalList(const RT_TPS_OptgoalList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_OptgoalList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_OptgoalList::~RT_TPS_OptgoalList() {
  SharedDtor();
}

void RT_TPS_OptgoalList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_OptgoalList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_OptgoalList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_OptgoalList_descriptor_;
}

const RT_TPS_OptgoalList& RT_TPS_OptgoalList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();  return *default_instance_;
}

RT_TPS_OptgoalList* RT_TPS_OptgoalList::default_instance_ = NULL;

RT_TPS_OptgoalList* RT_TPS_OptgoalList::New() const {
  return new RT_TPS_OptgoalList;
}

void RT_TPS_OptgoalList::Clear() {
  opts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_OptgoalList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_Optgoal opts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_opts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_opts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_OptgoalList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_Optgoal opts = 1;
  for (int i = 0; i < this->opts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->opts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_OptgoalList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_Optgoal opts = 1;
  for (int i = 0; i < this->opts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->opts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_OptgoalList::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_Optgoal opts = 1;
  total_size += 1 * this->opts_size();
  for (int i = 0; i < this->opts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->opts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_OptgoalList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_OptgoalList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_OptgoalList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_OptgoalList::MergeFrom(const RT_TPS_OptgoalList& from) {
  GOOGLE_CHECK_NE(&from, this);
  opts_.MergeFrom(from.opts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_OptgoalList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_OptgoalList::CopyFrom(const RT_TPS_OptgoalList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_OptgoalList::IsInitialized() const {
  
  return true;
}

void RT_TPS_OptgoalList::Swap(RT_TPS_OptgoalList* other) {
  if (other != this) {
    opts_.Swap(&other->opts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_OptgoalList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_OptgoalList_descriptor_;
  metadata.reflection = RT_TPS_OptgoalList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
