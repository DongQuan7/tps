// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_referenceimage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ReferenceImageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceImageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReferenceImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceImage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReferenceImage_IMAGE_TYPE_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ReferenceImageList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReferenceImageList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto() {
  protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_referenceimage.proto");
  GOOGLE_CHECK(file != NULL);
  ReferenceImageInfo_descriptor_ = file->message_type(0);
  static const int ReferenceImageInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, isocenteruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, imagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, beamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, imageuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, displaymedviewerid_),
  };
  ReferenceImageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceImageInfo_descriptor_,
      ReferenceImageInfo::default_instance_,
      ReferenceImageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceImageInfo));
  ReferenceImage_descriptor_ = file->message_type(1);
  static const int ReferenceImage_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imageuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, beamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagedate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagegantryangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imageheight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, pixelspacingx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, pixelspacingy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, centerx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, centery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, bitsallocated_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, bufferlength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagebuffer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, cpnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptortranslationx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptortranslationy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptortranslationz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptorangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptorposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, receptorposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, bitsstored_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, hightbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, pixelrepresentation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, samplesperpixel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, windowcenter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, windowwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, patientname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, patientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, patientbirthdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, patientsex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, sad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, ssd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, dicomimagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, patientposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imageacquisitiondate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, imageacquisitiontime_),
  };
  ReferenceImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceImage_descriptor_,
      ReferenceImage::default_instance_,
      ReferenceImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceImage));
  ReferenceImage_IMAGE_TYPE_descriptor_ = ReferenceImage_descriptor_->enum_type(0);
  ReferenceImageList_descriptor_ = file->message_type(2);
  static const int ReferenceImageList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageList, imagelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageList, patientuid_),
  };
  ReferenceImageList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReferenceImageList_descriptor_,
      ReferenceImageList::default_instance_,
      ReferenceImageList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReferenceImageList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReferenceImageList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceImageInfo_descriptor_, &ReferenceImageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceImage_descriptor_, &ReferenceImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReferenceImageList_descriptor_, &ReferenceImageList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto() {
  delete ReferenceImageInfo::default_instance_;
  delete ReferenceImageInfo_reflection_;
  delete ReferenceImage::default_instance_;
  delete ReferenceImage_reflection_;
  delete ReferenceImageList::default_instance_;
  delete ReferenceImageList_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033rt_tps_referenceimage.proto\022\ttps.proto"
    "\"\302\001\n\022ReferenceImageInfo\022\017\n\007groupID\030\001 \001(\t"
    "\022\024\n\014isocenterUID\030\002 \001(\t\022\r\n\005angle\030\003 \001(\002\0227\n"
    "\timageType\030\004 \001(\0162$.tps.proto.ReferenceIm"
    "age.IMAGE_TYPE\022\017\n\007beamUID\030\005 \001(\t\022\020\n\010image"
    "UID\030\006 \001(\t\022\032\n\022displayMedviewerID\030\007 \001(\005\"\365\007"
    "\n\016ReferenceImage\022\020\n\010imageUID\030\001 \001(\t\022\017\n\007be"
    "amUID\030\002 \001(\t\022\021\n\timageDate\030\003 \001(\t\022\021\n\timageT"
    "ime\030\004 \001(\t\022\030\n\020imageGantryAngle\030\005 \001(\002\0227\n\ti"
    "mageType\030\006 \001(\0162$.tps.proto.ReferenceImag"
    "e.IMAGE_TYPE\022\023\n\013imageHeight\030\007 \001(\005\022\022\n\nima"
    "geWidth\030\010 \001(\005\022\025\n\rpixelSpacingX\030\t \001(\002\022\025\n\r"
    "pixelSpacingY\030\n \001(\002\022\017\n\007centerX\030\013 \001(\005\022\017\n\007"
    "centerY\030\014 \001(\005\022\025\n\rbitsAllocated\030\r \001(\005\022\024\n\014"
    "bufferLength\030\016 \001(\r\022\023\n\013imageBuffer\030\020 \001(\014\022"
    "\020\n\010cpNumber\030\021 \001(\005\022\034\n\024receptorTranslation"
    "X\030\022 \001(\002\022\034\n\024receptorTranslationY\030\023 \001(\002\022\034\n"
    "\024receptorTranslationZ\030\024 \001(\002\022\025\n\rreceptorA"
    "ngle\030\025 \001(\002\022\024\n\014receptorPosX\030\026 \001(\002\022\024\n\014rece"
    "ptorPosY\030\027 \001(\002\022\022\n\nbitsStored\030\030 \001(\005\022\020\n\010hi"
    "ghtBit\030\031 \001(\005\022\021\n\timageName\030\032 \001(\t\022\033\n\023pixel"
    "Representation\030\033 \001(\t\022\027\n\017samplesPerPixel\030"
    "\034 \001(\005\022\024\n\014windowCenter\030\035 \001(\005\022\023\n\013windowWid"
    "th\030\036 \001(\005\022\023\n\013patientName\030\037 \001(\t\022\021\n\tpatient"
    "ID\030  \001(\t\022\030\n\020patientBirthDate\030! \001(\t\022\022\n\npa"
    "tientSex\030\" \001(\005\022\013\n\003sad\030# \001(\005\022\013\n\003ssd\030$ \001(\005"
    "\022\026\n\016dicomImageType\030% \001(\t\022\027\n\017patientPosit"
    "ion\030& \001(\005\022\034\n\024imageAcquisitionDate\030\' \001(\t\022"
    "\034\n\024imageAcquisitionTime\030( \001(\t\"f\n\nIMAGE_T"
    "YPE\022\030\n\013UNKNOW_TYPE\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tDRR_IMA"
    "GE\020\001\022\017\n\013SLICE_IMAGE\020\002\022\016\n\nEPID_IMAGE\020\003\022\016\n"
    "\nPORT_IMAGE\020\004\"V\n\022ReferenceImageList\022,\n\ti"
    "mageList\030\001 \003(\0132\031.tps.proto.ReferenceImag"
    "e\022\022\n\npatientUID\030\002 \001(\t", 1341);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_referenceimage.proto", &protobuf_RegisterTypes);
  ReferenceImageInfo::default_instance_ = new ReferenceImageInfo();
  ReferenceImage::default_instance_ = new ReferenceImage();
  ReferenceImageList::default_instance_ = new ReferenceImageList();
  ReferenceImageInfo::default_instance_->InitAsDefaultInstance();
  ReferenceImage::default_instance_->InitAsDefaultInstance();
  ReferenceImageList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5freferenceimage_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5freferenceimage_2eproto() {
    protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5freferenceimage_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int ReferenceImageInfo::kGroupIDFieldNumber;
const int ReferenceImageInfo::kIsocenterUIDFieldNumber;
const int ReferenceImageInfo::kAngleFieldNumber;
const int ReferenceImageInfo::kImageTypeFieldNumber;
const int ReferenceImageInfo::kBeamUIDFieldNumber;
const int ReferenceImageInfo::kImageUIDFieldNumber;
const int ReferenceImageInfo::kDisplayMedviewerIDFieldNumber;
#endif  // !_MSC_VER

ReferenceImageInfo::ReferenceImageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceImageInfo::InitAsDefaultInstance() {
}

ReferenceImageInfo::ReferenceImageInfo(const ReferenceImageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceImageInfo::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isocenteruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  angle_ = 0;
  imagetype_ = -1;
  beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  displaymedviewerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceImageInfo::~ReferenceImageInfo() {
  SharedDtor();
}

void ReferenceImageInfo::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (isocenteruid_ != &::google::protobuf::internal::kEmptyString) {
    delete isocenteruid_;
  }
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beamuid_;
  }
  if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
    delete imageuid_;
  }
  if (this != default_instance_) {
  }
}

void ReferenceImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceImageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceImageInfo_descriptor_;
}

const ReferenceImageInfo& ReferenceImageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();  return *default_instance_;
}

ReferenceImageInfo* ReferenceImageInfo::default_instance_ = NULL;

ReferenceImageInfo* ReferenceImageInfo::New() const {
  return new ReferenceImageInfo;
}

void ReferenceImageInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
    if (has_isocenteruid()) {
      if (isocenteruid_ != &::google::protobuf::internal::kEmptyString) {
        isocenteruid_->clear();
      }
    }
    angle_ = 0;
    imagetype_ = -1;
    if (has_beamuid()) {
      if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
        beamuid_->clear();
      }
    }
    if (has_imageuid()) {
      if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
        imageuid_->clear();
      }
    }
    displaymedviewerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string groupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_isocenterUID;
        break;
      }
      
      // optional string isocenterUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_isocenterUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_isocenteruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->isocenteruid().data(), this->isocenteruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_angle;
        break;
      }
      
      // optional float angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_imageType;
        break;
      }
      
      // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tps::proto::ReferenceImage_IMAGE_TYPE_IsValid(value)) {
            set_imagetype(static_cast< ::tps::proto::ReferenceImage_IMAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_beamUID;
        break;
      }
      
      // optional string beamUID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamuid().data(), this->beamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_imageUID;
        break;
      }
      
      // optional string imageUID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageuid().data(), this->imageuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_displayMedviewerID;
        break;
      }
      
      // optional int32 displayMedviewerID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_displayMedviewerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &displaymedviewerid_)));
          set_has_displaymedviewerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->groupid(), output);
  }
  
  // optional string isocenterUID = 2;
  if (has_isocenteruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenteruid().data(), this->isocenteruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->isocenteruid(), output);
  }
  
  // optional float angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle(), output);
  }
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
  if (has_imagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->imagetype(), output);
  }
  
  // optional string beamUID = 5;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->beamuid(), output);
  }
  
  // optional string imageUID = 6;
  if (has_imageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageuid().data(), this->imageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->imageuid(), output);
  }
  
  // optional int32 displayMedviewerID = 7;
  if (has_displaymedviewerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->displaymedviewerid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceImageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }
  
  // optional string isocenterUID = 2;
  if (has_isocenteruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->isocenteruid().data(), this->isocenteruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->isocenteruid(), target);
  }
  
  // optional float angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle(), target);
  }
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
  if (has_imagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->imagetype(), target);
  }
  
  // optional string beamUID = 5;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->beamuid(), target);
  }
  
  // optional string imageUID = 6;
  if (has_imageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageuid().data(), this->imageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->imageuid(), target);
  }
  
  // optional int32 displayMedviewerID = 7;
  if (has_displaymedviewerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->displaymedviewerid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceImageInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string groupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }
    
    // optional string isocenterUID = 2;
    if (has_isocenteruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->isocenteruid());
    }
    
    // optional float angle = 3;
    if (has_angle()) {
      total_size += 1 + 4;
    }
    
    // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
    if (has_imagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagetype());
    }
    
    // optional string beamUID = 5;
    if (has_beamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamuid());
    }
    
    // optional string imageUID = 6;
    if (has_imageuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageuid());
    }
    
    // optional int32 displayMedviewerID = 7;
    if (has_displaymedviewerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->displaymedviewerid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceImageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceImageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceImageInfo::MergeFrom(const ReferenceImageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_isocenteruid()) {
      set_isocenteruid(from.isocenteruid());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_imagetype()) {
      set_imagetype(from.imagetype());
    }
    if (from.has_beamuid()) {
      set_beamuid(from.beamuid());
    }
    if (from.has_imageuid()) {
      set_imageuid(from.imageuid());
    }
    if (from.has_displaymedviewerid()) {
      set_displaymedviewerid(from.displaymedviewerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceImageInfo::CopyFrom(const ReferenceImageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceImageInfo::IsInitialized() const {
  
  return true;
}

void ReferenceImageInfo::Swap(ReferenceImageInfo* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(isocenteruid_, other->isocenteruid_);
    std::swap(angle_, other->angle_);
    std::swap(imagetype_, other->imagetype_);
    std::swap(beamuid_, other->beamuid_);
    std::swap(imageuid_, other->imageuid_);
    std::swap(displaymedviewerid_, other->displaymedviewerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceImageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceImageInfo_descriptor_;
  metadata.reflection = ReferenceImageInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ReferenceImage_IMAGE_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceImage_IMAGE_TYPE_descriptor_;
}
bool ReferenceImage_IMAGE_TYPE_IsValid(int value) {
  switch(value) {
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ReferenceImage_IMAGE_TYPE ReferenceImage::UNKNOW_TYPE;
const ReferenceImage_IMAGE_TYPE ReferenceImage::DRR_IMAGE;
const ReferenceImage_IMAGE_TYPE ReferenceImage::SLICE_IMAGE;
const ReferenceImage_IMAGE_TYPE ReferenceImage::EPID_IMAGE;
const ReferenceImage_IMAGE_TYPE ReferenceImage::PORT_IMAGE;
const ReferenceImage_IMAGE_TYPE ReferenceImage::IMAGE_TYPE_MIN;
const ReferenceImage_IMAGE_TYPE ReferenceImage::IMAGE_TYPE_MAX;
const int ReferenceImage::IMAGE_TYPE_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ReferenceImage::kImageUIDFieldNumber;
const int ReferenceImage::kBeamUIDFieldNumber;
const int ReferenceImage::kImageDateFieldNumber;
const int ReferenceImage::kImageTimeFieldNumber;
const int ReferenceImage::kImageGantryAngleFieldNumber;
const int ReferenceImage::kImageTypeFieldNumber;
const int ReferenceImage::kImageHeightFieldNumber;
const int ReferenceImage::kImageWidthFieldNumber;
const int ReferenceImage::kPixelSpacingXFieldNumber;
const int ReferenceImage::kPixelSpacingYFieldNumber;
const int ReferenceImage::kCenterXFieldNumber;
const int ReferenceImage::kCenterYFieldNumber;
const int ReferenceImage::kBitsAllocatedFieldNumber;
const int ReferenceImage::kBufferLengthFieldNumber;
const int ReferenceImage::kImageBufferFieldNumber;
const int ReferenceImage::kCpNumberFieldNumber;
const int ReferenceImage::kReceptorTranslationXFieldNumber;
const int ReferenceImage::kReceptorTranslationYFieldNumber;
const int ReferenceImage::kReceptorTranslationZFieldNumber;
const int ReferenceImage::kReceptorAngleFieldNumber;
const int ReferenceImage::kReceptorPosXFieldNumber;
const int ReferenceImage::kReceptorPosYFieldNumber;
const int ReferenceImage::kBitsStoredFieldNumber;
const int ReferenceImage::kHightBitFieldNumber;
const int ReferenceImage::kImageNameFieldNumber;
const int ReferenceImage::kPixelRepresentationFieldNumber;
const int ReferenceImage::kSamplesPerPixelFieldNumber;
const int ReferenceImage::kWindowCenterFieldNumber;
const int ReferenceImage::kWindowWidthFieldNumber;
const int ReferenceImage::kPatientNameFieldNumber;
const int ReferenceImage::kPatientIDFieldNumber;
const int ReferenceImage::kPatientBirthDateFieldNumber;
const int ReferenceImage::kPatientSexFieldNumber;
const int ReferenceImage::kSadFieldNumber;
const int ReferenceImage::kSsdFieldNumber;
const int ReferenceImage::kDicomImageTypeFieldNumber;
const int ReferenceImage::kPatientPositionFieldNumber;
const int ReferenceImage::kImageAcquisitionDateFieldNumber;
const int ReferenceImage::kImageAcquisitionTimeFieldNumber;
#endif  // !_MSC_VER

ReferenceImage::ReferenceImage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceImage::InitAsDefaultInstance() {
}

ReferenceImage::ReferenceImage(const ReferenceImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceImage::SharedCtor() {
  _cached_size_ = 0;
  imageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imagegantryangle_ = 0;
  imagetype_ = -1;
  imageheight_ = 0;
  imagewidth_ = 0;
  pixelspacingx_ = 0;
  pixelspacingy_ = 0;
  centerx_ = 0;
  centery_ = 0;
  bitsallocated_ = 0;
  bufferlength_ = 0u;
  imagebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cpnumber_ = 0;
  receptortranslationx_ = 0;
  receptortranslationy_ = 0;
  receptortranslationz_ = 0;
  receptorangle_ = 0;
  receptorposx_ = 0;
  receptorposy_ = 0;
  bitsstored_ = 0;
  hightbit_ = 0;
  imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pixelrepresentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  samplesperpixel_ = 0;
  windowcenter_ = 0;
  windowwidth_ = 0;
  patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientbirthdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientsex_ = 0;
  sad_ = 0;
  ssd_ = 0;
  dicomimagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  patientposition_ = 0;
  imageacquisitiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  imageacquisitiontime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceImage::~ReferenceImage() {
  SharedDtor();
}

void ReferenceImage::SharedDtor() {
  if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
    delete imageuid_;
  }
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beamuid_;
  }
  if (imagedate_ != &::google::protobuf::internal::kEmptyString) {
    delete imagedate_;
  }
  if (imagetime_ != &::google::protobuf::internal::kEmptyString) {
    delete imagetime_;
  }
  if (imagebuffer_ != &::google::protobuf::internal::kEmptyString) {
    delete imagebuffer_;
  }
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    delete imagename_;
  }
  if (pixelrepresentation_ != &::google::protobuf::internal::kEmptyString) {
    delete pixelrepresentation_;
  }
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    delete patientname_;
  }
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientid_;
  }
  if (patientbirthdate_ != &::google::protobuf::internal::kEmptyString) {
    delete patientbirthdate_;
  }
  if (dicomimagetype_ != &::google::protobuf::internal::kEmptyString) {
    delete dicomimagetype_;
  }
  if (imageacquisitiondate_ != &::google::protobuf::internal::kEmptyString) {
    delete imageacquisitiondate_;
  }
  if (imageacquisitiontime_ != &::google::protobuf::internal::kEmptyString) {
    delete imageacquisitiontime_;
  }
  if (this != default_instance_) {
  }
}

void ReferenceImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceImage_descriptor_;
}

const ReferenceImage& ReferenceImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();  return *default_instance_;
}

ReferenceImage* ReferenceImage::default_instance_ = NULL;

ReferenceImage* ReferenceImage::New() const {
  return new ReferenceImage;
}

void ReferenceImage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_imageuid()) {
      if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
        imageuid_->clear();
      }
    }
    if (has_beamuid()) {
      if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
        beamuid_->clear();
      }
    }
    if (has_imagedate()) {
      if (imagedate_ != &::google::protobuf::internal::kEmptyString) {
        imagedate_->clear();
      }
    }
    if (has_imagetime()) {
      if (imagetime_ != &::google::protobuf::internal::kEmptyString) {
        imagetime_->clear();
      }
    }
    imagegantryangle_ = 0;
    imagetype_ = -1;
    imageheight_ = 0;
    imagewidth_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pixelspacingx_ = 0;
    pixelspacingy_ = 0;
    centerx_ = 0;
    centery_ = 0;
    bitsallocated_ = 0;
    bufferlength_ = 0u;
    if (has_imagebuffer()) {
      if (imagebuffer_ != &::google::protobuf::internal::kEmptyString) {
        imagebuffer_->clear();
      }
    }
    cpnumber_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    receptortranslationx_ = 0;
    receptortranslationy_ = 0;
    receptortranslationz_ = 0;
    receptorangle_ = 0;
    receptorposx_ = 0;
    receptorposy_ = 0;
    bitsstored_ = 0;
    hightbit_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_imagename()) {
      if (imagename_ != &::google::protobuf::internal::kEmptyString) {
        imagename_->clear();
      }
    }
    if (has_pixelrepresentation()) {
      if (pixelrepresentation_ != &::google::protobuf::internal::kEmptyString) {
        pixelrepresentation_->clear();
      }
    }
    samplesperpixel_ = 0;
    windowcenter_ = 0;
    windowwidth_ = 0;
    if (has_patientname()) {
      if (patientname_ != &::google::protobuf::internal::kEmptyString) {
        patientname_->clear();
      }
    }
    if (has_patientid()) {
      if (patientid_ != &::google::protobuf::internal::kEmptyString) {
        patientid_->clear();
      }
    }
    if (has_patientbirthdate()) {
      if (patientbirthdate_ != &::google::protobuf::internal::kEmptyString) {
        patientbirthdate_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    patientsex_ = 0;
    sad_ = 0;
    ssd_ = 0;
    if (has_dicomimagetype()) {
      if (dicomimagetype_ != &::google::protobuf::internal::kEmptyString) {
        dicomimagetype_->clear();
      }
    }
    patientposition_ = 0;
    if (has_imageacquisitiondate()) {
      if (imageacquisitiondate_ != &::google::protobuf::internal::kEmptyString) {
        imageacquisitiondate_->clear();
      }
    }
    if (has_imageacquisitiontime()) {
      if (imageacquisitiontime_ != &::google::protobuf::internal::kEmptyString) {
        imageacquisitiontime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string imageUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageuid().data(), this->imageuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_beamUID;
        break;
      }
      
      // optional string beamUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamuid().data(), this->beamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_imageDate;
        break;
      }
      
      // optional string imageDate = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagedate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagedate().data(), this->imagedate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_imageTime;
        break;
      }
      
      // optional string imageTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagetime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagetime().data(), this->imagetime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_imageGantryAngle;
        break;
      }
      
      // optional float imageGantryAngle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_imageGantryAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &imagegantryangle_)));
          set_has_imagegantryangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_imageType;
        break;
      }
      
      // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tps::proto::ReferenceImage_IMAGE_TYPE_IsValid(value)) {
            set_imagetype(static_cast< ::tps::proto::ReferenceImage_IMAGE_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_imageHeight;
        break;
      }
      
      // optional int32 imageHeight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageHeight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imageheight_)));
          set_has_imageheight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_imageWidth;
        break;
      }
      
      // optional int32 imageWidth = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_imageWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imagewidth_)));
          set_has_imagewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_pixelSpacingX;
        break;
      }
      
      // optional float pixelSpacingX = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pixelSpacingX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixelspacingx_)));
          set_has_pixelspacingx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_pixelSpacingY;
        break;
      }
      
      // optional float pixelSpacingY = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pixelSpacingY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pixelspacingy_)));
          set_has_pixelspacingy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_centerX;
        break;
      }
      
      // optional int32 centerX = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centerX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centerx_)));
          set_has_centerx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_centerY;
        break;
      }
      
      // optional int32 centerY = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_centerY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centery_)));
          set_has_centery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_bitsAllocated;
        break;
      }
      
      // optional int32 bitsAllocated = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitsAllocated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitsallocated_)));
          set_has_bitsallocated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_bufferLength;
        break;
      }
      
      // optional uint32 bufferLength = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bufferLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bufferlength_)));
          set_has_bufferlength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_imageBuffer;
        break;
      }
      
      // optional bytes imageBuffer = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageBuffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagebuffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_cpNumber;
        break;
      }
      
      // optional int32 cpNumber = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cpNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cpnumber_)));
          set_has_cpnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_receptorTranslationX;
        break;
      }
      
      // optional float receptorTranslationX = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorTranslationX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptortranslationx_)));
          set_has_receptortranslationx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_receptorTranslationY;
        break;
      }
      
      // optional float receptorTranslationY = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorTranslationY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptortranslationy_)));
          set_has_receptortranslationy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_receptorTranslationZ;
        break;
      }
      
      // optional float receptorTranslationZ = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorTranslationZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptortranslationz_)));
          set_has_receptortranslationz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_receptorAngle;
        break;
      }
      
      // optional float receptorAngle = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptorangle_)));
          set_has_receptorangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_receptorPosX;
        break;
      }
      
      // optional float receptorPosX = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptorposx_)));
          set_has_receptorposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_receptorPosY;
        break;
      }
      
      // optional float receptorPosY = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_receptorPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &receptorposy_)));
          set_has_receptorposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_bitsStored;
        break;
      }
      
      // optional int32 bitsStored = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bitsStored:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bitsstored_)));
          set_has_bitsstored();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_hightBit;
        break;
      }
      
      // optional int32 hightBit = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hightBit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hightbit_)));
          set_has_hightbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_imageName;
        break;
      }
      
      // optional string imageName = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imagename().data(), this->imagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_pixelRepresentation;
        break;
      }
      
      // optional string pixelRepresentation = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pixelRepresentation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pixelrepresentation()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pixelrepresentation().data(), this->pixelrepresentation().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_samplesPerPixel;
        break;
      }
      
      // optional int32 samplesPerPixel = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_samplesPerPixel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &samplesperpixel_)));
          set_has_samplesperpixel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_windowCenter;
        break;
      }
      
      // optional int32 windowCenter = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowCenter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowcenter_)));
          set_has_windowcenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_windowWidth;
        break;
      }
      
      // optional int32 windowWidth = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_windowWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowwidth_)));
          set_has_windowwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_patientName;
        break;
      }
      
      // optional string patientName = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientname().data(), this->patientname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_patientID;
        break;
      }
      
      // optional string patientID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientid().data(), this->patientid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_patientBirthDate;
        break;
      }
      
      // optional string patientBirthDate = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientBirthDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientbirthdate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientbirthdate().data(), this->patientbirthdate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_patientSex;
        break;
      }
      
      // optional int32 patientSex = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patientSex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patientsex_)));
          set_has_patientsex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_sad;
        break;
      }
      
      // optional int32 sad = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sad_)));
          set_has_sad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_ssd;
        break;
      }
      
      // optional int32 ssd = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ssd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ssd_)));
          set_has_ssd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_dicomImageType;
        break;
      }
      
      // optional string dicomImageType = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dicomImageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dicomimagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dicomimagetype().data(), this->dicomimagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_patientPosition;
        break;
      }
      
      // optional int32 patientPosition = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patientPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patientposition_)));
          set_has_patientposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_imageAcquisitionDate;
        break;
      }
      
      // optional string imageAcquisitionDate = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageAcquisitionDate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageacquisitiondate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageacquisitiondate().data(), this->imageacquisitiondate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_imageAcquisitionTime;
        break;
      }
      
      // optional string imageAcquisitionTime = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageAcquisitionTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imageacquisitiontime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->imageacquisitiontime().data(), this->imageacquisitiontime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string imageUID = 1;
  if (has_imageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageuid().data(), this->imageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->imageuid(), output);
  }
  
  // optional string beamUID = 2;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->beamuid(), output);
  }
  
  // optional string imageDate = 3;
  if (has_imagedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagedate().data(), this->imagedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->imagedate(), output);
  }
  
  // optional string imageTime = 4;
  if (has_imagetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagetime().data(), this->imagetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->imagetime(), output);
  }
  
  // optional float imageGantryAngle = 5;
  if (has_imagegantryangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->imagegantryangle(), output);
  }
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
  if (has_imagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->imagetype(), output);
  }
  
  // optional int32 imageHeight = 7;
  if (has_imageheight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->imageheight(), output);
  }
  
  // optional int32 imageWidth = 8;
  if (has_imagewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->imagewidth(), output);
  }
  
  // optional float pixelSpacingX = 9;
  if (has_pixelspacingx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pixelspacingx(), output);
  }
  
  // optional float pixelSpacingY = 10;
  if (has_pixelspacingy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pixelspacingy(), output);
  }
  
  // optional int32 centerX = 11;
  if (has_centerx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->centerx(), output);
  }
  
  // optional int32 centerY = 12;
  if (has_centery()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->centery(), output);
  }
  
  // optional int32 bitsAllocated = 13;
  if (has_bitsallocated()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->bitsallocated(), output);
  }
  
  // optional uint32 bufferLength = 14;
  if (has_bufferlength()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->bufferlength(), output);
  }
  
  // optional bytes imageBuffer = 16;
  if (has_imagebuffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      16, this->imagebuffer(), output);
  }
  
  // optional int32 cpNumber = 17;
  if (has_cpnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cpnumber(), output);
  }
  
  // optional float receptorTranslationX = 18;
  if (has_receptortranslationx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->receptortranslationx(), output);
  }
  
  // optional float receptorTranslationY = 19;
  if (has_receptortranslationy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->receptortranslationy(), output);
  }
  
  // optional float receptorTranslationZ = 20;
  if (has_receptortranslationz()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->receptortranslationz(), output);
  }
  
  // optional float receptorAngle = 21;
  if (has_receptorangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->receptorangle(), output);
  }
  
  // optional float receptorPosX = 22;
  if (has_receptorposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->receptorposx(), output);
  }
  
  // optional float receptorPosY = 23;
  if (has_receptorposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->receptorposy(), output);
  }
  
  // optional int32 bitsStored = 24;
  if (has_bitsstored()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->bitsstored(), output);
  }
  
  // optional int32 hightBit = 25;
  if (has_hightbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->hightbit(), output);
  }
  
  // optional string imageName = 26;
  if (has_imagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->imagename(), output);
  }
  
  // optional string pixelRepresentation = 27;
  if (has_pixelrepresentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pixelrepresentation().data(), this->pixelrepresentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->pixelrepresentation(), output);
  }
  
  // optional int32 samplesPerPixel = 28;
  if (has_samplesperpixel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->samplesperpixel(), output);
  }
  
  // optional int32 windowCenter = 29;
  if (has_windowcenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->windowcenter(), output);
  }
  
  // optional int32 windowWidth = 30;
  if (has_windowwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->windowwidth(), output);
  }
  
  // optional string patientName = 31;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->patientname(), output);
  }
  
  // optional string patientID = 32;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->patientid(), output);
  }
  
  // optional string patientBirthDate = 33;
  if (has_patientbirthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthdate().data(), this->patientbirthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->patientbirthdate(), output);
  }
  
  // optional int32 patientSex = 34;
  if (has_patientsex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->patientsex(), output);
  }
  
  // optional int32 sad = 35;
  if (has_sad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->sad(), output);
  }
  
  // optional int32 ssd = 36;
  if (has_ssd()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ssd(), output);
  }
  
  // optional string dicomImageType = 37;
  if (has_dicomimagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dicomimagetype().data(), this->dicomimagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      37, this->dicomimagetype(), output);
  }
  
  // optional int32 patientPosition = 38;
  if (has_patientposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->patientposition(), output);
  }
  
  // optional string imageAcquisitionDate = 39;
  if (has_imageacquisitiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageacquisitiondate().data(), this->imageacquisitiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      39, this->imageacquisitiondate(), output);
  }
  
  // optional string imageAcquisitionTime = 40;
  if (has_imageacquisitiontime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageacquisitiontime().data(), this->imageacquisitiontime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->imageacquisitiontime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string imageUID = 1;
  if (has_imageuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageuid().data(), this->imageuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->imageuid(), target);
  }
  
  // optional string beamUID = 2;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->beamuid(), target);
  }
  
  // optional string imageDate = 3;
  if (has_imagedate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagedate().data(), this->imagedate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imagedate(), target);
  }
  
  // optional string imageTime = 4;
  if (has_imagetime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagetime().data(), this->imagetime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->imagetime(), target);
  }
  
  // optional float imageGantryAngle = 5;
  if (has_imagegantryangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->imagegantryangle(), target);
  }
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
  if (has_imagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->imagetype(), target);
  }
  
  // optional int32 imageHeight = 7;
  if (has_imageheight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->imageheight(), target);
  }
  
  // optional int32 imageWidth = 8;
  if (has_imagewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->imagewidth(), target);
  }
  
  // optional float pixelSpacingX = 9;
  if (has_pixelspacingx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pixelspacingx(), target);
  }
  
  // optional float pixelSpacingY = 10;
  if (has_pixelspacingy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pixelspacingy(), target);
  }
  
  // optional int32 centerX = 11;
  if (has_centerx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->centerx(), target);
  }
  
  // optional int32 centerY = 12;
  if (has_centery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->centery(), target);
  }
  
  // optional int32 bitsAllocated = 13;
  if (has_bitsallocated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->bitsallocated(), target);
  }
  
  // optional uint32 bufferLength = 14;
  if (has_bufferlength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->bufferlength(), target);
  }
  
  // optional bytes imageBuffer = 16;
  if (has_imagebuffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        16, this->imagebuffer(), target);
  }
  
  // optional int32 cpNumber = 17;
  if (has_cpnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->cpnumber(), target);
  }
  
  // optional float receptorTranslationX = 18;
  if (has_receptortranslationx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->receptortranslationx(), target);
  }
  
  // optional float receptorTranslationY = 19;
  if (has_receptortranslationy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->receptortranslationy(), target);
  }
  
  // optional float receptorTranslationZ = 20;
  if (has_receptortranslationz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->receptortranslationz(), target);
  }
  
  // optional float receptorAngle = 21;
  if (has_receptorangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->receptorangle(), target);
  }
  
  // optional float receptorPosX = 22;
  if (has_receptorposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->receptorposx(), target);
  }
  
  // optional float receptorPosY = 23;
  if (has_receptorposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->receptorposy(), target);
  }
  
  // optional int32 bitsStored = 24;
  if (has_bitsstored()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->bitsstored(), target);
  }
  
  // optional int32 hightBit = 25;
  if (has_hightbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->hightbit(), target);
  }
  
  // optional string imageName = 26;
  if (has_imagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imagename().data(), this->imagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->imagename(), target);
  }
  
  // optional string pixelRepresentation = 27;
  if (has_pixelrepresentation()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pixelrepresentation().data(), this->pixelrepresentation().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->pixelrepresentation(), target);
  }
  
  // optional int32 samplesPerPixel = 28;
  if (has_samplesperpixel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->samplesperpixel(), target);
  }
  
  // optional int32 windowCenter = 29;
  if (has_windowcenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->windowcenter(), target);
  }
  
  // optional int32 windowWidth = 30;
  if (has_windowwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->windowwidth(), target);
  }
  
  // optional string patientName = 31;
  if (has_patientname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientname().data(), this->patientname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->patientname(), target);
  }
  
  // optional string patientID = 32;
  if (has_patientid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientid().data(), this->patientid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->patientid(), target);
  }
  
  // optional string patientBirthDate = 33;
  if (has_patientbirthdate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientbirthdate().data(), this->patientbirthdate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->patientbirthdate(), target);
  }
  
  // optional int32 patientSex = 34;
  if (has_patientsex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->patientsex(), target);
  }
  
  // optional int32 sad = 35;
  if (has_sad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->sad(), target);
  }
  
  // optional int32 ssd = 36;
  if (has_ssd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ssd(), target);
  }
  
  // optional string dicomImageType = 37;
  if (has_dicomimagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dicomimagetype().data(), this->dicomimagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->dicomimagetype(), target);
  }
  
  // optional int32 patientPosition = 38;
  if (has_patientposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->patientposition(), target);
  }
  
  // optional string imageAcquisitionDate = 39;
  if (has_imageacquisitiondate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageacquisitiondate().data(), this->imageacquisitiondate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->imageacquisitiondate(), target);
  }
  
  // optional string imageAcquisitionTime = 40;
  if (has_imageacquisitiontime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->imageacquisitiontime().data(), this->imageacquisitiontime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->imageacquisitiontime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceImage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string imageUID = 1;
    if (has_imageuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageuid());
    }
    
    // optional string beamUID = 2;
    if (has_beamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamuid());
    }
    
    // optional string imageDate = 3;
    if (has_imagedate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagedate());
    }
    
    // optional string imageTime = 4;
    if (has_imagetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagetime());
    }
    
    // optional float imageGantryAngle = 5;
    if (has_imagegantryangle()) {
      total_size += 1 + 4;
    }
    
    // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
    if (has_imagetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->imagetype());
    }
    
    // optional int32 imageHeight = 7;
    if (has_imageheight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imageheight());
    }
    
    // optional int32 imageWidth = 8;
    if (has_imagewidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imagewidth());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pixelSpacingX = 9;
    if (has_pixelspacingx()) {
      total_size += 1 + 4;
    }
    
    // optional float pixelSpacingY = 10;
    if (has_pixelspacingy()) {
      total_size += 1 + 4;
    }
    
    // optional int32 centerX = 11;
    if (has_centerx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centerx());
    }
    
    // optional int32 centerY = 12;
    if (has_centery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centery());
    }
    
    // optional int32 bitsAllocated = 13;
    if (has_bitsallocated()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitsallocated());
    }
    
    // optional uint32 bufferLength = 14;
    if (has_bufferlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bufferlength());
    }
    
    // optional bytes imageBuffer = 16;
    if (has_imagebuffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagebuffer());
    }
    
    // optional int32 cpNumber = 17;
    if (has_cpnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cpnumber());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float receptorTranslationX = 18;
    if (has_receptortranslationx()) {
      total_size += 2 + 4;
    }
    
    // optional float receptorTranslationY = 19;
    if (has_receptortranslationy()) {
      total_size += 2 + 4;
    }
    
    // optional float receptorTranslationZ = 20;
    if (has_receptortranslationz()) {
      total_size += 2 + 4;
    }
    
    // optional float receptorAngle = 21;
    if (has_receptorangle()) {
      total_size += 2 + 4;
    }
    
    // optional float receptorPosX = 22;
    if (has_receptorposx()) {
      total_size += 2 + 4;
    }
    
    // optional float receptorPosY = 23;
    if (has_receptorposy()) {
      total_size += 2 + 4;
    }
    
    // optional int32 bitsStored = 24;
    if (has_bitsstored()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bitsstored());
    }
    
    // optional int32 hightBit = 25;
    if (has_hightbit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hightbit());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string imageName = 26;
    if (has_imagename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imagename());
    }
    
    // optional string pixelRepresentation = 27;
    if (has_pixelrepresentation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pixelrepresentation());
    }
    
    // optional int32 samplesPerPixel = 28;
    if (has_samplesperpixel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->samplesperpixel());
    }
    
    // optional int32 windowCenter = 29;
    if (has_windowcenter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowcenter());
    }
    
    // optional int32 windowWidth = 30;
    if (has_windowwidth()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowwidth());
    }
    
    // optional string patientName = 31;
    if (has_patientname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientname());
    }
    
    // optional string patientID = 32;
    if (has_patientid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientid());
    }
    
    // optional string patientBirthDate = 33;
    if (has_patientbirthdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientbirthdate());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 patientSex = 34;
    if (has_patientsex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patientsex());
    }
    
    // optional int32 sad = 35;
    if (has_sad()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sad());
    }
    
    // optional int32 ssd = 36;
    if (has_ssd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ssd());
    }
    
    // optional string dicomImageType = 37;
    if (has_dicomimagetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dicomimagetype());
    }
    
    // optional int32 patientPosition = 38;
    if (has_patientposition()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patientposition());
    }
    
    // optional string imageAcquisitionDate = 39;
    if (has_imageacquisitiondate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageacquisitiondate());
    }
    
    // optional string imageAcquisitionTime = 40;
    if (has_imageacquisitiontime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imageacquisitiontime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceImage::MergeFrom(const ReferenceImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imageuid()) {
      set_imageuid(from.imageuid());
    }
    if (from.has_beamuid()) {
      set_beamuid(from.beamuid());
    }
    if (from.has_imagedate()) {
      set_imagedate(from.imagedate());
    }
    if (from.has_imagetime()) {
      set_imagetime(from.imagetime());
    }
    if (from.has_imagegantryangle()) {
      set_imagegantryangle(from.imagegantryangle());
    }
    if (from.has_imagetype()) {
      set_imagetype(from.imagetype());
    }
    if (from.has_imageheight()) {
      set_imageheight(from.imageheight());
    }
    if (from.has_imagewidth()) {
      set_imagewidth(from.imagewidth());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pixelspacingx()) {
      set_pixelspacingx(from.pixelspacingx());
    }
    if (from.has_pixelspacingy()) {
      set_pixelspacingy(from.pixelspacingy());
    }
    if (from.has_centerx()) {
      set_centerx(from.centerx());
    }
    if (from.has_centery()) {
      set_centery(from.centery());
    }
    if (from.has_bitsallocated()) {
      set_bitsallocated(from.bitsallocated());
    }
    if (from.has_bufferlength()) {
      set_bufferlength(from.bufferlength());
    }
    if (from.has_imagebuffer()) {
      set_imagebuffer(from.imagebuffer());
    }
    if (from.has_cpnumber()) {
      set_cpnumber(from.cpnumber());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_receptortranslationx()) {
      set_receptortranslationx(from.receptortranslationx());
    }
    if (from.has_receptortranslationy()) {
      set_receptortranslationy(from.receptortranslationy());
    }
    if (from.has_receptortranslationz()) {
      set_receptortranslationz(from.receptortranslationz());
    }
    if (from.has_receptorangle()) {
      set_receptorangle(from.receptorangle());
    }
    if (from.has_receptorposx()) {
      set_receptorposx(from.receptorposx());
    }
    if (from.has_receptorposy()) {
      set_receptorposy(from.receptorposy());
    }
    if (from.has_bitsstored()) {
      set_bitsstored(from.bitsstored());
    }
    if (from.has_hightbit()) {
      set_hightbit(from.hightbit());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_imagename()) {
      set_imagename(from.imagename());
    }
    if (from.has_pixelrepresentation()) {
      set_pixelrepresentation(from.pixelrepresentation());
    }
    if (from.has_samplesperpixel()) {
      set_samplesperpixel(from.samplesperpixel());
    }
    if (from.has_windowcenter()) {
      set_windowcenter(from.windowcenter());
    }
    if (from.has_windowwidth()) {
      set_windowwidth(from.windowwidth());
    }
    if (from.has_patientname()) {
      set_patientname(from.patientname());
    }
    if (from.has_patientid()) {
      set_patientid(from.patientid());
    }
    if (from.has_patientbirthdate()) {
      set_patientbirthdate(from.patientbirthdate());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_patientsex()) {
      set_patientsex(from.patientsex());
    }
    if (from.has_sad()) {
      set_sad(from.sad());
    }
    if (from.has_ssd()) {
      set_ssd(from.ssd());
    }
    if (from.has_dicomimagetype()) {
      set_dicomimagetype(from.dicomimagetype());
    }
    if (from.has_patientposition()) {
      set_patientposition(from.patientposition());
    }
    if (from.has_imageacquisitiondate()) {
      set_imageacquisitiondate(from.imageacquisitiondate());
    }
    if (from.has_imageacquisitiontime()) {
      set_imageacquisitiontime(from.imageacquisitiontime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceImage::CopyFrom(const ReferenceImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceImage::IsInitialized() const {
  
  return true;
}

void ReferenceImage::Swap(ReferenceImage* other) {
  if (other != this) {
    std::swap(imageuid_, other->imageuid_);
    std::swap(beamuid_, other->beamuid_);
    std::swap(imagedate_, other->imagedate_);
    std::swap(imagetime_, other->imagetime_);
    std::swap(imagegantryangle_, other->imagegantryangle_);
    std::swap(imagetype_, other->imagetype_);
    std::swap(imageheight_, other->imageheight_);
    std::swap(imagewidth_, other->imagewidth_);
    std::swap(pixelspacingx_, other->pixelspacingx_);
    std::swap(pixelspacingy_, other->pixelspacingy_);
    std::swap(centerx_, other->centerx_);
    std::swap(centery_, other->centery_);
    std::swap(bitsallocated_, other->bitsallocated_);
    std::swap(bufferlength_, other->bufferlength_);
    std::swap(imagebuffer_, other->imagebuffer_);
    std::swap(cpnumber_, other->cpnumber_);
    std::swap(receptortranslationx_, other->receptortranslationx_);
    std::swap(receptortranslationy_, other->receptortranslationy_);
    std::swap(receptortranslationz_, other->receptortranslationz_);
    std::swap(receptorangle_, other->receptorangle_);
    std::swap(receptorposx_, other->receptorposx_);
    std::swap(receptorposy_, other->receptorposy_);
    std::swap(bitsstored_, other->bitsstored_);
    std::swap(hightbit_, other->hightbit_);
    std::swap(imagename_, other->imagename_);
    std::swap(pixelrepresentation_, other->pixelrepresentation_);
    std::swap(samplesperpixel_, other->samplesperpixel_);
    std::swap(windowcenter_, other->windowcenter_);
    std::swap(windowwidth_, other->windowwidth_);
    std::swap(patientname_, other->patientname_);
    std::swap(patientid_, other->patientid_);
    std::swap(patientbirthdate_, other->patientbirthdate_);
    std::swap(patientsex_, other->patientsex_);
    std::swap(sad_, other->sad_);
    std::swap(ssd_, other->ssd_);
    std::swap(dicomimagetype_, other->dicomimagetype_);
    std::swap(patientposition_, other->patientposition_);
    std::swap(imageacquisitiondate_, other->imageacquisitiondate_);
    std::swap(imageacquisitiontime_, other->imageacquisitiontime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceImage_descriptor_;
  metadata.reflection = ReferenceImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReferenceImageList::kImageListFieldNumber;
const int ReferenceImageList::kPatientUIDFieldNumber;
#endif  // !_MSC_VER

ReferenceImageList::ReferenceImageList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReferenceImageList::InitAsDefaultInstance() {
}

ReferenceImageList::ReferenceImageList(const ReferenceImageList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReferenceImageList::SharedCtor() {
  _cached_size_ = 0;
  patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReferenceImageList::~ReferenceImageList() {
  SharedDtor();
}

void ReferenceImageList::SharedDtor() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    delete patientuid_;
  }
  if (this != default_instance_) {
  }
}

void ReferenceImageList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReferenceImageList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReferenceImageList_descriptor_;
}

const ReferenceImageList& ReferenceImageList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();  return *default_instance_;
}

ReferenceImageList* ReferenceImageList::default_instance_ = NULL;

ReferenceImageList* ReferenceImageList::New() const {
  return new ReferenceImageList;
}

void ReferenceImageList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_patientuid()) {
      if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
        patientuid_->clear();
      }
    }
  }
  imagelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReferenceImageList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.ReferenceImage imageList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_imageList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_imagelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_imageList;
        if (input->ExpectTag(18)) goto parse_patientUID;
        break;
      }
      
      // optional string patientUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patientUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_patientuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->patientuid().data(), this->patientuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReferenceImageList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.ReferenceImage imageList = 1;
  for (int i = 0; i < this->imagelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->imagelist(i), output);
  }
  
  // optional string patientUID = 2;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->patientuid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReferenceImageList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.ReferenceImage imageList = 1;
  for (int i = 0; i < this->imagelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->imagelist(i), target);
  }
  
  // optional string patientUID = 2;
  if (has_patientuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->patientuid().data(), this->patientuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->patientuid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReferenceImageList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string patientUID = 2;
    if (has_patientuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->patientuid());
    }
    
  }
  // repeated .tps.proto.ReferenceImage imageList = 1;
  total_size += 1 * this->imagelist_size();
  for (int i = 0; i < this->imagelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->imagelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReferenceImageList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReferenceImageList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReferenceImageList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReferenceImageList::MergeFrom(const ReferenceImageList& from) {
  GOOGLE_CHECK_NE(&from, this);
  imagelist_.MergeFrom(from.imagelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_patientuid()) {
      set_patientuid(from.patientuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReferenceImageList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReferenceImageList::CopyFrom(const ReferenceImageList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReferenceImageList::IsInitialized() const {
  
  return true;
}

void ReferenceImageList::Swap(ReferenceImageList* other) {
  if (other != this) {
    imagelist_.Swap(&other->imagelist_);
    std::swap(patientuid_, other->patientuid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReferenceImageList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReferenceImageList_descriptor_;
  metadata.reflection = ReferenceImageList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
