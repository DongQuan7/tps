// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_block.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* BlockPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoBlock_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fblock_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_block.proto");
  GOOGLE_CHECK(file != NULL);
  BlockPoint_descriptor_ = file->message_type(0);
  static const int BlockPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPoint, y_),
  };
  BlockPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockPoint_descriptor_,
      BlockPoint::default_instance_,
      BlockPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockPoint));
  RtTpsProtoBlock_descriptor_ = file->message_type(1);
  static const int RtTpsProtoBlock_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, block_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, block_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, block_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, thickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, block_data_),
  };
  RtTpsProtoBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoBlock_descriptor_,
      RtTpsProtoBlock::default_instance_,
      RtTpsProtoBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoBlock));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fblock_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockPoint_descriptor_, &BlockPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoBlock_descriptor_, &RtTpsProtoBlock::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fblock_2eproto() {
  delete BlockPoint::default_instance_;
  delete BlockPoint_reflection_;
  delete RtTpsProtoBlock::default_instance_;
  delete RtTpsProtoBlock_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030rt_tps_proto_block.proto\022\ttps.proto\"\"\n"
    "\nBlockPoint\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\"\234\001\n\017Rt"
    "TpsProtoBlock\022\021\n\tblock_uid\030\001 \001(\t\022\022\n\nbloc"
    "k_name\030\002 \001(\t\022\022\n\nblock_type\030\003 \001(\005\022\020\n\010mate"
    "rial\030\004 \001(\005\022\021\n\tthickness\030\005 \001(\001\022)\n\nblock_d"
    "ata\030\006 \003(\0132\025.tps.proto.BlockPoint", 232);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_block.proto", &protobuf_RegisterTypes);
  BlockPoint::default_instance_ = new BlockPoint();
  RtTpsProtoBlock::default_instance_ = new RtTpsProtoBlock();
  BlockPoint::default_instance_->InitAsDefaultInstance();
  RtTpsProtoBlock::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fblock_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fblock_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fblock_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fblock_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BlockPoint::kXFieldNumber;
const int BlockPoint::kYFieldNumber;
#endif  // !_MSC_VER

BlockPoint::BlockPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockPoint::InitAsDefaultInstance() {
}

BlockPoint::BlockPoint(const BlockPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockPoint::~BlockPoint() {
  SharedDtor();
}

void BlockPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockPoint_descriptor_;
}

const BlockPoint& BlockPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();  return *default_instance_;
}

BlockPoint* BlockPoint::default_instance_ = NULL;

BlockPoint* BlockPoint::New() const {
  return new BlockPoint;
}

void BlockPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockPoint::MergeFrom(const BlockPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockPoint::CopyFrom(const BlockPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void BlockPoint::Swap(BlockPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockPoint_descriptor_;
  metadata.reflection = BlockPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoBlock::kBlockUidFieldNumber;
const int RtTpsProtoBlock::kBlockNameFieldNumber;
const int RtTpsProtoBlock::kBlockTypeFieldNumber;
const int RtTpsProtoBlock::kMaterialFieldNumber;
const int RtTpsProtoBlock::kThicknessFieldNumber;
const int RtTpsProtoBlock::kBlockDataFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoBlock::RtTpsProtoBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoBlock::InitAsDefaultInstance() {
}

RtTpsProtoBlock::RtTpsProtoBlock(const RtTpsProtoBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoBlock::SharedCtor() {
  _cached_size_ = 0;
  block_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  block_type_ = 0;
  material_ = 0;
  thickness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoBlock::~RtTpsProtoBlock() {
  SharedDtor();
}

void RtTpsProtoBlock::SharedDtor() {
  if (block_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete block_uid_;
  }
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    delete block_name_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoBlock_descriptor_;
}

const RtTpsProtoBlock& RtTpsProtoBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();  return *default_instance_;
}

RtTpsProtoBlock* RtTpsProtoBlock::default_instance_ = NULL;

RtTpsProtoBlock* RtTpsProtoBlock::New() const {
  return new RtTpsProtoBlock;
}

void RtTpsProtoBlock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_block_uid()) {
      if (block_uid_ != &::google::protobuf::internal::kEmptyString) {
        block_uid_->clear();
      }
    }
    if (has_block_name()) {
      if (block_name_ != &::google::protobuf::internal::kEmptyString) {
        block_name_->clear();
      }
    }
    block_type_ = 0;
    material_ = 0;
    thickness_ = 0;
  }
  block_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string block_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_uid().data(), this->block_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_name;
        break;
      }
      
      // optional string block_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_block_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->block_name().data(), this->block_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_block_type;
        break;
      }
      
      // optional int32 block_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_block_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_type_)));
          set_has_block_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_material;
        break;
      }
      
      // optional int32 material = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_material:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &material_)));
          set_has_material();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_thickness;
        break;
      }
      
      // optional double thickness = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_thickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thickness_)));
          set_has_thickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_block_data;
        break;
      }
      
      // repeated .tps.proto.BlockPoint block_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_block_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_block_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string block_uid = 1;
  if (has_block_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_uid().data(), this->block_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->block_uid(), output);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->block_name(), output);
  }
  
  // optional int32 block_type = 3;
  if (has_block_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->block_type(), output);
  }
  
  // optional int32 material = 4;
  if (has_material()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->material(), output);
  }
  
  // optional double thickness = 5;
  if (has_thickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->thickness(), output);
  }
  
  // repeated .tps.proto.BlockPoint block_data = 6;
  for (int i = 0; i < this->block_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->block_data(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string block_uid = 1;
  if (has_block_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_uid().data(), this->block_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->block_uid(), target);
  }
  
  // optional string block_name = 2;
  if (has_block_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->block_name().data(), this->block_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->block_name(), target);
  }
  
  // optional int32 block_type = 3;
  if (has_block_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->block_type(), target);
  }
  
  // optional int32 material = 4;
  if (has_material()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->material(), target);
  }
  
  // optional double thickness = 5;
  if (has_thickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->thickness(), target);
  }
  
  // repeated .tps.proto.BlockPoint block_data = 6;
  for (int i = 0; i < this->block_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->block_data(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoBlock::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string block_uid = 1;
    if (has_block_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_uid());
    }
    
    // optional string block_name = 2;
    if (has_block_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->block_name());
    }
    
    // optional int32 block_type = 3;
    if (has_block_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_type());
    }
    
    // optional int32 material = 4;
    if (has_material()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->material());
    }
    
    // optional double thickness = 5;
    if (has_thickness()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated .tps.proto.BlockPoint block_data = 6;
  total_size += 1 * this->block_data_size();
  for (int i = 0; i < this->block_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->block_data(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoBlock::MergeFrom(const RtTpsProtoBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  block_data_.MergeFrom(from.block_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_block_uid()) {
      set_block_uid(from.block_uid());
    }
    if (from.has_block_name()) {
      set_block_name(from.block_name());
    }
    if (from.has_block_type()) {
      set_block_type(from.block_type());
    }
    if (from.has_material()) {
      set_material(from.material());
    }
    if (from.has_thickness()) {
      set_thickness(from.thickness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoBlock::CopyFrom(const RtTpsProtoBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoBlock::IsInitialized() const {
  
  for (int i = 0; i < block_data_size(); i++) {
    if (!this->block_data(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoBlock::Swap(RtTpsProtoBlock* other) {
  if (other != this) {
    std::swap(block_uid_, other->block_uid_);
    std::swap(block_name_, other->block_name_);
    std::swap(block_type_, other->block_type_);
    std::swap(material_, other->material_);
    std::swap(thickness_, other->thickness_);
    block_data_.Swap(&other->block_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoBlock_descriptor_;
  metadata.reflection = RtTpsProtoBlock_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
