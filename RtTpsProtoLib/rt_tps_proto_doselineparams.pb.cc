// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_doselineparams.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoDoseLineParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoDoseLineParams_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_doselineparams.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoDoseLineParams_descriptor_ = file->message_type(0);
  static const int RtTpsProtoDoseLineParams_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, doselinelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, doselinesetting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, istemporaryupdated_),
  };
  RtTpsProtoDoseLineParams_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoDoseLineParams_descriptor_,
      RtTpsProtoDoseLineParams::default_instance_,
      RtTpsProtoDoseLineParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoDoseLineParams, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoDoseLineParams));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoDoseLineParams_descriptor_, &RtTpsProtoDoseLineParams::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoselineparams_2eproto() {
  delete RtTpsProtoDoseLineParams::default_instance_;
  delete RtTpsProtoDoseLineParams_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fdoselinesetting_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!rt_tps_proto_doselineparams.proto\022\ttps"
    ".proto\032\033rt_tps_proto_doseline.proto\032\"rt_"
    "tps_proto_doselinesetting.proto\"\273\001\n\030RtTp"
    "sProtoDoseLineParams\0223\n\014doseLineList\030\001 \003"
    "(\0132\035.tps.proto.RtTpsProtoDoseLine\022=\n\017dos"
    "eLineSetting\030\002 \001(\0132$.tps.proto.RtTpsProt"
    "oDoseLineSetting\022\017\n\007planUID\030\003 \001(\t\022\032\n\022isT"
    "emporaryUpdated\030\004 \001(\010", 301);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_doselineparams.proto", &protobuf_RegisterTypes);
  RtTpsProtoDoseLineParams::default_instance_ = new RtTpsProtoDoseLineParams();
  RtTpsProtoDoseLineParams::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoselineparams_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fdoselineparams_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fdoselineparams_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fdoselineparams_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoDoseLineParams::kDoseLineListFieldNumber;
const int RtTpsProtoDoseLineParams::kDoseLineSettingFieldNumber;
const int RtTpsProtoDoseLineParams::kPlanUIDFieldNumber;
const int RtTpsProtoDoseLineParams::kIsTemporaryUpdatedFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoDoseLineParams::RtTpsProtoDoseLineParams()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoDoseLineParams::InitAsDefaultInstance() {
  doselinesetting_ = const_cast< ::tps::proto::RtTpsProtoDoseLineSetting*>(&::tps::proto::RtTpsProtoDoseLineSetting::default_instance());
}

RtTpsProtoDoseLineParams::RtTpsProtoDoseLineParams(const RtTpsProtoDoseLineParams& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoDoseLineParams::SharedCtor() {
  _cached_size_ = 0;
  doselinesetting_ = NULL;
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  istemporaryupdated_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoDoseLineParams::~RtTpsProtoDoseLineParams() {
  SharedDtor();
}

void RtTpsProtoDoseLineParams::SharedDtor() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (this != default_instance_) {
    delete doselinesetting_;
  }
}

void RtTpsProtoDoseLineParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoDoseLineParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoDoseLineParams_descriptor_;
}

const RtTpsProtoDoseLineParams& RtTpsProtoDoseLineParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fdoselineparams_2eproto();  return *default_instance_;
}

RtTpsProtoDoseLineParams* RtTpsProtoDoseLineParams::default_instance_ = NULL;

RtTpsProtoDoseLineParams* RtTpsProtoDoseLineParams::New() const {
  return new RtTpsProtoDoseLineParams;
}

void RtTpsProtoDoseLineParams::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_doselinesetting()) {
      if (doselinesetting_ != NULL) doselinesetting_->::tps::proto::RtTpsProtoDoseLineSetting::Clear();
    }
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
    istemporaryupdated_ = false;
  }
  doselinelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoDoseLineParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doseLineList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doselinelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_doseLineList;
        if (input->ExpectTag(18)) goto parse_doseLineSetting;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoDoseLineSetting doseLineSetting = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doseLineSetting:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_doselinesetting()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_planUID;
        break;
      }
      
      // optional string planUID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isTemporaryUpdated;
        break;
      }
      
      // optional bool isTemporaryUpdated = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isTemporaryUpdated:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istemporaryupdated_)));
          set_has_istemporaryupdated();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoDoseLineParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
  for (int i = 0; i < this->doselinelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->doselinelist(i), output);
  }
  
  // optional .tps.proto.RtTpsProtoDoseLineSetting doseLineSetting = 2;
  if (has_doselinesetting()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->doselinesetting(), output);
  }
  
  // optional string planUID = 3;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->planuid(), output);
  }
  
  // optional bool isTemporaryUpdated = 4;
  if (has_istemporaryupdated()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->istemporaryupdated(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoDoseLineParams::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
  for (int i = 0; i < this->doselinelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->doselinelist(i), target);
  }
  
  // optional .tps.proto.RtTpsProtoDoseLineSetting doseLineSetting = 2;
  if (has_doselinesetting()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->doselinesetting(), target);
  }
  
  // optional string planUID = 3;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->planuid(), target);
  }
  
  // optional bool isTemporaryUpdated = 4;
  if (has_istemporaryupdated()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->istemporaryupdated(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoDoseLineParams::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .tps.proto.RtTpsProtoDoseLineSetting doseLineSetting = 2;
    if (has_doselinesetting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->doselinesetting());
    }
    
    // optional string planUID = 3;
    if (has_planuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
    // optional bool isTemporaryUpdated = 4;
    if (has_istemporaryupdated()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
  total_size += 1 * this->doselinelist_size();
  for (int i = 0; i < this->doselinelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doselinelist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoDoseLineParams::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoDoseLineParams* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoDoseLineParams*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoDoseLineParams::MergeFrom(const RtTpsProtoDoseLineParams& from) {
  GOOGLE_CHECK_NE(&from, this);
  doselinelist_.MergeFrom(from.doselinelist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_doselinesetting()) {
      mutable_doselinesetting()->::tps::proto::RtTpsProtoDoseLineSetting::MergeFrom(from.doselinesetting());
    }
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
    if (from.has_istemporaryupdated()) {
      set_istemporaryupdated(from.istemporaryupdated());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoDoseLineParams::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoDoseLineParams::CopyFrom(const RtTpsProtoDoseLineParams& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoDoseLineParams::IsInitialized() const {
  
  for (int i = 0; i < doselinelist_size(); i++) {
    if (!this->doselinelist(i).IsInitialized()) return false;
  }
  if (has_doselinesetting()) {
    if (!this->doselinesetting().IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoDoseLineParams::Swap(RtTpsProtoDoseLineParams* other) {
  if (other != this) {
    doselinelist_.Swap(&other->doselinelist_);
    std::swap(doselinesetting_, other->doselinesetting_);
    std::swap(planuid_, other->planuid_);
    std::swap(istemporaryupdated_, other->istemporaryupdated_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoDoseLineParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoDoseLineParams_descriptor_;
  metadata.reflection = RtTpsProtoDoseLineParams_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
