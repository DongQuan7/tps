// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_voi_advanced.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoVoiAdvanced_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoVoiAdvanced_reflection_ = NULL;
const ::google::protobuf::Descriptor* FunctionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_voi_advanced.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoVoiAdvanced_descriptor_ = file->message_type(0);
  static const int RtTpsProtoVoiAdvanced_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, ispreview_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, roiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, planningrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, subrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, isbasedondose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, fromdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, todose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, sourceroiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, functions_),
  };
  RtTpsProtoVoiAdvanced_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoVoiAdvanced_descriptor_,
      RtTpsProtoVoiAdvanced::default_instance_,
      RtTpsProtoVoiAdvanced_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoVoiAdvanced, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoVoiAdvanced));
  FunctionData_descriptor_ = file->message_type(1);
  static const int FunctionData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, mirrormode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, isexpansion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, is2dmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, isisotropic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, margin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, istocreatering_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, ringsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, combinationmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, combinationroiuids_),
  };
  FunctionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionData_descriptor_,
      FunctionData::default_instance_,
      FunctionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoVoiAdvanced_descriptor_, &RtTpsProtoVoiAdvanced::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionData_descriptor_, &FunctionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto() {
  delete RtTpsProtoVoiAdvanced::default_instance_;
  delete RtTpsProtoVoiAdvanced_reflection_;
  delete FunctionData::default_instance_;
  delete FunctionData_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rt_tps_proto_voi_advanced.proto\022\ttps.p"
    "roto\"\235\002\n\025RtTpsProtoVoiAdvanced\022\021\n\tisPrev"
    "iew\030\001 \002(\010\022\016\n\006roiUid\030\002 \002(\t\022\021\n\tseriesUid\030\003"
    " \001(\t\022\014\n\004name\030\004 \001(\t\022\024\n\014planningRole\030\005 \001(\005"
    "\022\017\n\007subRole\030\006 \001(\005\022\r\n\005color\030\007 \003(\002\022\025\n\risBa"
    "sedOnDose\030\010 \002(\010\022\017\n\007planUid\030\t \001(\t\022\020\n\010from"
    "Dose\030\n \001(\002\022\016\n\006toDose\030\013 \001(\002\022\024\n\014sourceROIU"
    "id\030\014 \001(\t\022*\n\tfunctions\030\r \003(\0132\027.tps.proto."
    "FunctionData\"\333\001\n\014FunctionData\022\014\n\004mode\030\001 "
    "\002(\005\022\022\n\nmirrorMode\030\002 \001(\005\022\023\n\013isExpansion\030\003"
    " \001(\010\022\020\n\010is2DMode\030\004 \001(\010\022\023\n\013isIsotropic\030\005 "
    "\001(\010\022\016\n\006margin\030\006 \003(\002\022\026\n\016isToCreateRing\030\007 "
    "\001(\010\022\020\n\010ringSize\030\010 \001(\002\022\027\n\017combinationMode"
    "\030\t \001(\005\022\032\n\022combinationRoiUids\030\n \003(\t", 554);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_voi_advanced.proto", &protobuf_RegisterTypes);
  RtTpsProtoVoiAdvanced::default_instance_ = new RtTpsProtoVoiAdvanced();
  FunctionData::default_instance_ = new FunctionData();
  RtTpsProtoVoiAdvanced::default_instance_->InitAsDefaultInstance();
  FunctionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoVoiAdvanced::kIsPreviewFieldNumber;
const int RtTpsProtoVoiAdvanced::kRoiUidFieldNumber;
const int RtTpsProtoVoiAdvanced::kSeriesUidFieldNumber;
const int RtTpsProtoVoiAdvanced::kNameFieldNumber;
const int RtTpsProtoVoiAdvanced::kPlanningRoleFieldNumber;
const int RtTpsProtoVoiAdvanced::kSubRoleFieldNumber;
const int RtTpsProtoVoiAdvanced::kColorFieldNumber;
const int RtTpsProtoVoiAdvanced::kIsBasedOnDoseFieldNumber;
const int RtTpsProtoVoiAdvanced::kPlanUidFieldNumber;
const int RtTpsProtoVoiAdvanced::kFromDoseFieldNumber;
const int RtTpsProtoVoiAdvanced::kToDoseFieldNumber;
const int RtTpsProtoVoiAdvanced::kSourceROIUidFieldNumber;
const int RtTpsProtoVoiAdvanced::kFunctionsFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoVoiAdvanced::RtTpsProtoVoiAdvanced()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoVoiAdvanced::InitAsDefaultInstance() {
}

RtTpsProtoVoiAdvanced::RtTpsProtoVoiAdvanced(const RtTpsProtoVoiAdvanced& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoVoiAdvanced::SharedCtor() {
  _cached_size_ = 0;
  ispreview_ = false;
  roiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planningrole_ = 0;
  subrole_ = 0;
  isbasedondose_ = false;
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fromdose_ = 0;
  todose_ = 0;
  sourceroiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoVoiAdvanced::~RtTpsProtoVoiAdvanced() {
  SharedDtor();
}

void RtTpsProtoVoiAdvanced::SharedDtor() {
  if (roiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete roiuid_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (sourceroiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete sourceroiuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoVoiAdvanced::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoVoiAdvanced::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoVoiAdvanced_descriptor_;
}

const RtTpsProtoVoiAdvanced& RtTpsProtoVoiAdvanced::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();  return *default_instance_;
}

RtTpsProtoVoiAdvanced* RtTpsProtoVoiAdvanced::default_instance_ = NULL;

RtTpsProtoVoiAdvanced* RtTpsProtoVoiAdvanced::New() const {
  return new RtTpsProtoVoiAdvanced;
}

void RtTpsProtoVoiAdvanced::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ispreview_ = false;
    if (has_roiuid()) {
      if (roiuid_ != &::google::protobuf::internal::kEmptyString) {
        roiuid_->clear();
      }
    }
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    planningrole_ = 0;
    subrole_ = 0;
    isbasedondose_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
    fromdose_ = 0;
    todose_ = 0;
    if (has_sourceroiuid()) {
      if (sourceroiuid_ != &::google::protobuf::internal::kEmptyString) {
        sourceroiuid_->clear();
      }
    }
  }
  color_.Clear();
  functions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoVoiAdvanced::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isPreview = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispreview_)));
          set_has_ispreview();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roiUid;
        break;
      }
      
      // required string roiUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roiUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_roiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->roiuid().data(), this->roiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_seriesUid;
        break;
      }
      
      // optional string seriesUid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }
      
      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_planningRole;
        break;
      }
      
      // optional int32 planningRole = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planningRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planningrole_)));
          set_has_planningrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_subRole;
        break;
      }
      
      // optional int32 subRole = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrole_)));
          set_has_subrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_color;
        break;
      }
      
      // repeated float color = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 61, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_color;
        if (input->ExpectTag(64)) goto parse_isBasedOnDose;
        break;
      }
      
      // required bool isBasedOnDose = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isBasedOnDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbasedondose_)));
          set_has_isbasedondose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_planUid;
        break;
      }
      
      // optional string planUid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fromDose;
        break;
      }
      
      // optional float fromDose = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fromDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fromdose_)));
          set_has_fromdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_toDose;
        break;
      }
      
      // optional float toDose = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_toDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &todose_)));
          set_has_todose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sourceROIUid;
        break;
      }
      
      // optional string sourceROIUid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sourceROIUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceroiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sourceroiuid().data(), this->sourceroiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_functions;
        break;
      }
      
      // repeated .tps.proto.FunctionData functions = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_functions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_functions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoVoiAdvanced::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isPreview = 1;
  if (has_ispreview()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ispreview(), output);
  }
  
  // required string roiUid = 2;
  if (has_roiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roiuid().data(), this->roiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->roiuid(), output);
  }
  
  // optional string seriesUid = 3;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->seriesuid(), output);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }
  
  // optional int32 planningRole = 5;
  if (has_planningrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->planningrole(), output);
  }
  
  // optional int32 subRole = 6;
  if (has_subrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->subrole(), output);
  }
  
  // repeated float color = 7;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      7, this->color(i), output);
  }
  
  // required bool isBasedOnDose = 8;
  if (has_isbasedondose()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isbasedondose(), output);
  }
  
  // optional string planUid = 9;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->planuid(), output);
  }
  
  // optional float fromDose = 10;
  if (has_fromdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fromdose(), output);
  }
  
  // optional float toDose = 11;
  if (has_todose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->todose(), output);
  }
  
  // optional string sourceROIUid = 12;
  if (has_sourceroiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceroiuid().data(), this->sourceroiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sourceroiuid(), output);
  }
  
  // repeated .tps.proto.FunctionData functions = 13;
  for (int i = 0; i < this->functions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->functions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoVoiAdvanced::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isPreview = 1;
  if (has_ispreview()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ispreview(), target);
  }
  
  // required string roiUid = 2;
  if (has_roiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->roiuid().data(), this->roiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->roiuid(), target);
  }
  
  // optional string seriesUid = 3;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->seriesuid(), target);
  }
  
  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }
  
  // optional int32 planningRole = 5;
  if (has_planningrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->planningrole(), target);
  }
  
  // optional int32 subRole = 6;
  if (has_subrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->subrole(), target);
  }
  
  // repeated float color = 7;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(7, this->color(i), target);
  }
  
  // required bool isBasedOnDose = 8;
  if (has_isbasedondose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isbasedondose(), target);
  }
  
  // optional string planUid = 9;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->planuid(), target);
  }
  
  // optional float fromDose = 10;
  if (has_fromdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fromdose(), target);
  }
  
  // optional float toDose = 11;
  if (has_todose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->todose(), target);
  }
  
  // optional string sourceROIUid = 12;
  if (has_sourceroiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sourceroiuid().data(), this->sourceroiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sourceroiuid(), target);
  }
  
  // repeated .tps.proto.FunctionData functions = 13;
  for (int i = 0; i < this->functions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->functions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoVoiAdvanced::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isPreview = 1;
    if (has_ispreview()) {
      total_size += 1 + 1;
    }
    
    // required string roiUid = 2;
    if (has_roiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->roiuid());
    }
    
    // optional string seriesUid = 3;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 planningRole = 5;
    if (has_planningrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planningrole());
    }
    
    // optional int32 subRole = 6;
    if (has_subrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrole());
    }
    
    // required bool isBasedOnDose = 8;
    if (has_isbasedondose()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string planUid = 9;
    if (has_planuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
    // optional float fromDose = 10;
    if (has_fromdose()) {
      total_size += 1 + 4;
    }
    
    // optional float toDose = 11;
    if (has_todose()) {
      total_size += 1 + 4;
    }
    
    // optional string sourceROIUid = 12;
    if (has_sourceroiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceroiuid());
    }
    
  }
  // repeated float color = 7;
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    total_size += 1 * this->color_size() + data_size;
  }
  
  // repeated .tps.proto.FunctionData functions = 13;
  total_size += 1 * this->functions_size();
  for (int i = 0; i < this->functions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->functions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoVoiAdvanced::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoVoiAdvanced* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoVoiAdvanced*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoVoiAdvanced::MergeFrom(const RtTpsProtoVoiAdvanced& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_.MergeFrom(from.color_);
  functions_.MergeFrom(from.functions_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ispreview()) {
      set_ispreview(from.ispreview());
    }
    if (from.has_roiuid()) {
      set_roiuid(from.roiuid());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_planningrole()) {
      set_planningrole(from.planningrole());
    }
    if (from.has_subrole()) {
      set_subrole(from.subrole());
    }
    if (from.has_isbasedondose()) {
      set_isbasedondose(from.isbasedondose());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
    if (from.has_fromdose()) {
      set_fromdose(from.fromdose());
    }
    if (from.has_todose()) {
      set_todose(from.todose());
    }
    if (from.has_sourceroiuid()) {
      set_sourceroiuid(from.sourceroiuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoVoiAdvanced::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoVoiAdvanced::CopyFrom(const RtTpsProtoVoiAdvanced& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoVoiAdvanced::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000083) != 0x00000083) return false;
  
  for (int i = 0; i < functions_size(); i++) {
    if (!this->functions(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoVoiAdvanced::Swap(RtTpsProtoVoiAdvanced* other) {
  if (other != this) {
    std::swap(ispreview_, other->ispreview_);
    std::swap(roiuid_, other->roiuid_);
    std::swap(seriesuid_, other->seriesuid_);
    std::swap(name_, other->name_);
    std::swap(planningrole_, other->planningrole_);
    std::swap(subrole_, other->subrole_);
    color_.Swap(&other->color_);
    std::swap(isbasedondose_, other->isbasedondose_);
    std::swap(planuid_, other->planuid_);
    std::swap(fromdose_, other->fromdose_);
    std::swap(todose_, other->todose_);
    std::swap(sourceroiuid_, other->sourceroiuid_);
    functions_.Swap(&other->functions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoVoiAdvanced::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoVoiAdvanced_descriptor_;
  metadata.reflection = RtTpsProtoVoiAdvanced_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FunctionData::kModeFieldNumber;
const int FunctionData::kMirrorModeFieldNumber;
const int FunctionData::kIsExpansionFieldNumber;
const int FunctionData::kIs2DModeFieldNumber;
const int FunctionData::kIsIsotropicFieldNumber;
const int FunctionData::kMarginFieldNumber;
const int FunctionData::kIsToCreateRingFieldNumber;
const int FunctionData::kRingSizeFieldNumber;
const int FunctionData::kCombinationModeFieldNumber;
const int FunctionData::kCombinationRoiUidsFieldNumber;
#endif  // !_MSC_VER

FunctionData::FunctionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionData::InitAsDefaultInstance() {
}

FunctionData::FunctionData(const FunctionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionData::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  mirrormode_ = 0;
  isexpansion_ = false;
  is2dmode_ = false;
  isisotropic_ = false;
  istocreatering_ = false;
  ringsize_ = 0;
  combinationmode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionData::~FunctionData() {
  SharedDtor();
}

void FunctionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FunctionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FunctionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionData_descriptor_;
}

const FunctionData& FunctionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();  return *default_instance_;
}

FunctionData* FunctionData::default_instance_ = NULL;

FunctionData* FunctionData::New() const {
  return new FunctionData;
}

void FunctionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    mirrormode_ = 0;
    isexpansion_ = false;
    is2dmode_ = false;
    isisotropic_ = false;
    istocreatering_ = false;
    ringsize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    combinationmode_ = 0;
  }
  margin_.Clear();
  combinationroiuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mirrorMode;
        break;
      }
      
      // optional int32 mirrorMode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mirrorMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mirrormode_)));
          set_has_mirrormode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isExpansion;
        break;
      }
      
      // optional bool isExpansion = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExpansion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isexpansion_)));
          set_has_isexpansion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_is2DMode;
        break;
      }
      
      // optional bool is2DMode = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is2DMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is2dmode_)));
          set_has_is2dmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isIsotropic;
        break;
      }
      
      // optional bool isIsotropic = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isIsotropic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isisotropic_)));
          set_has_isisotropic();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_margin;
        break;
      }
      
      // repeated float margin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_margin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 53, input, this->mutable_margin())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_margin())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_margin;
        if (input->ExpectTag(56)) goto parse_isToCreateRing;
        break;
      }
      
      // optional bool isToCreateRing = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isToCreateRing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &istocreatering_)));
          set_has_istocreatering();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_ringSize;
        break;
      }
      
      // optional float ringSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ringSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ringsize_)));
          set_has_ringsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_combinationMode;
        break;
      }
      
      // optional int32 combinationMode = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_combinationMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combinationmode_)));
          set_has_combinationmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_combinationRoiUids;
        break;
      }
      
      // repeated string combinationRoiUids = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_combinationRoiUids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_combinationroiuids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->combinationroiuids(0).data(), this->combinationroiuids(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_combinationRoiUids;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // optional int32 mirrorMode = 2;
  if (has_mirrormode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mirrormode(), output);
  }
  
  // optional bool isExpansion = 3;
  if (has_isexpansion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isexpansion(), output);
  }
  
  // optional bool is2DMode = 4;
  if (has_is2dmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is2dmode(), output);
  }
  
  // optional bool isIsotropic = 5;
  if (has_isisotropic()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isisotropic(), output);
  }
  
  // repeated float margin = 6;
  for (int i = 0; i < this->margin_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      6, this->margin(i), output);
  }
  
  // optional bool isToCreateRing = 7;
  if (has_istocreatering()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->istocreatering(), output);
  }
  
  // optional float ringSize = 8;
  if (has_ringsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ringsize(), output);
  }
  
  // optional int32 combinationMode = 9;
  if (has_combinationmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->combinationmode(), output);
  }
  
  // repeated string combinationRoiUids = 10;
  for (int i = 0; i < this->combinationroiuids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->combinationroiuids(i).data(), this->combinationroiuids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->combinationroiuids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }
  
  // optional int32 mirrorMode = 2;
  if (has_mirrormode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mirrormode(), target);
  }
  
  // optional bool isExpansion = 3;
  if (has_isexpansion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isexpansion(), target);
  }
  
  // optional bool is2DMode = 4;
  if (has_is2dmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is2dmode(), target);
  }
  
  // optional bool isIsotropic = 5;
  if (has_isisotropic()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isisotropic(), target);
  }
  
  // repeated float margin = 6;
  for (int i = 0; i < this->margin_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(6, this->margin(i), target);
  }
  
  // optional bool isToCreateRing = 7;
  if (has_istocreatering()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->istocreatering(), target);
  }
  
  // optional float ringSize = 8;
  if (has_ringsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ringsize(), target);
  }
  
  // optional int32 combinationMode = 9;
  if (has_combinationmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->combinationmode(), target);
  }
  
  // repeated string combinationRoiUids = 10;
  for (int i = 0; i < this->combinationroiuids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->combinationroiuids(i).data(), this->combinationroiuids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->combinationroiuids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // optional int32 mirrorMode = 2;
    if (has_mirrormode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mirrormode());
    }
    
    // optional bool isExpansion = 3;
    if (has_isexpansion()) {
      total_size += 1 + 1;
    }
    
    // optional bool is2DMode = 4;
    if (has_is2dmode()) {
      total_size += 1 + 1;
    }
    
    // optional bool isIsotropic = 5;
    if (has_isisotropic()) {
      total_size += 1 + 1;
    }
    
    // optional bool isToCreateRing = 7;
    if (has_istocreatering()) {
      total_size += 1 + 1;
    }
    
    // optional float ringSize = 8;
    if (has_ringsize()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 combinationMode = 9;
    if (has_combinationmode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combinationmode());
    }
    
  }
  // repeated float margin = 6;
  {
    int data_size = 0;
    data_size = 4 * this->margin_size();
    total_size += 1 * this->margin_size() + data_size;
  }
  
  // repeated string combinationRoiUids = 10;
  total_size += 1 * this->combinationroiuids_size();
  for (int i = 0; i < this->combinationroiuids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->combinationroiuids(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FunctionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionData::MergeFrom(const FunctionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  margin_.MergeFrom(from.margin_);
  combinationroiuids_.MergeFrom(from.combinationroiuids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_mirrormode()) {
      set_mirrormode(from.mirrormode());
    }
    if (from.has_isexpansion()) {
      set_isexpansion(from.isexpansion());
    }
    if (from.has_is2dmode()) {
      set_is2dmode(from.is2dmode());
    }
    if (from.has_isisotropic()) {
      set_isisotropic(from.isisotropic());
    }
    if (from.has_istocreatering()) {
      set_istocreatering(from.istocreatering());
    }
    if (from.has_ringsize()) {
      set_ringsize(from.ringsize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_combinationmode()) {
      set_combinationmode(from.combinationmode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionData::CopyFrom(const FunctionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void FunctionData::Swap(FunctionData* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(mirrormode_, other->mirrormode_);
    std::swap(isexpansion_, other->isexpansion_);
    std::swap(is2dmode_, other->is2dmode_);
    std::swap(isisotropic_, other->isisotropic_);
    margin_.Swap(&other->margin_);
    std::swap(istocreatering_, other->istocreatering_);
    std::swap(ringsize_, other->ringsize_);
    std::swap(combinationmode_, other->combinationmode_);
    combinationroiuids_.Swap(&other->combinationroiuids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FunctionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FunctionData_descriptor_;
  metadata.reflection = FunctionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
