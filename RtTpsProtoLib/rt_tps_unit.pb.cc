// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_unit.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_Unit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Unit_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5funit_2eproto() {
  protobuf_AddDesc_rt_5ftps_5funit_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_unit.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_Unit_descriptor_ = file->message_type(0);
  static const int RT_TPS_Unit_offsets_[25] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, unituid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, machineuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, machinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, radiationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, techniquetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, unitenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, flatteningfiltermode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, gantry_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, gantry_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, table_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, table_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, collimator_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, collimator_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_x1_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_x1_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_x2_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_x2_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_y1_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_y1_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_y2_min_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, jaw_y2_max_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, applicators_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, doserates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, trayuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, tray_factor_),
  };
  RT_TPS_Unit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Unit_descriptor_,
      RT_TPS_Unit::default_instance_,
      RT_TPS_Unit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Unit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Unit));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5funit_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Unit_descriptor_, &RT_TPS_Unit::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5funit_2eproto() {
  delete RT_TPS_Unit::default_instance_;
  delete RT_TPS_Unit_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5funit_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5ftray_5ffactor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021rt_tps_unit.proto\022\ttps.proto\032\027rt_tps_a"
    "pplicator.proto\032\030rt_tps_tray_factor.prot"
    "o\"\320\004\n\013RT_TPS_Unit\022\017\n\007unitUid\030\001 \002(\t\022\022\n\nma"
    "chineUid\030\002 \002(\t\022\023\n\013machineName\030\003 \002(\t\022\025\n\rr"
    "adiationType\030\004 \002(\005\022\025\n\rtechniqueType\030\005 \003("
    "\005\022\022\n\nunitEnergy\030\006 \002(\t\022\034\n\024flatteningfilte"
    "rmode\030\007 \002(\005\022\022\n\ngantry_min\030\010 \002(\001\022\022\n\ngantr"
    "y_max\030\t \002(\001\022\021\n\ttable_min\030\n \002(\001\022\021\n\ttable_"
    "max\030\013 \002(\001\022\026\n\016collimator_min\030\014 \002(\001\022\026\n\016col"
    "limator_max\030\r \002(\001\022\022\n\njaw_x1_min\030\016 \002(\001\022\022\n"
    "\njaw_x1_max\030\017 \002(\001\022\022\n\njaw_x2_min\030\020 \002(\001\022\022\n"
    "\njaw_x2_max\030\021 \002(\001\022\022\n\njaw_y1_min\030\022 \002(\001\022\022\n"
    "\njaw_y1_max\030\023 \002(\001\022\022\n\njaw_y2_min\030\024 \002(\001\022\022\n"
    "\njaw_y2_max\030\025 \002(\001\0221\n\013applicators\030\026 \003(\0132\034"
    ".tps.proto.RT_TPS_Applicator\022\021\n\tdoseRate"
    "s\030\027 \003(\002\022\017\n\007trayuid\030\030 \003(\t\0222\n\013tray_factor\030"
    "\031 \003(\0132\035.tps.proto.RT_TPS_Tray_Factor", 676);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_unit.proto", &protobuf_RegisterTypes);
  RT_TPS_Unit::default_instance_ = new RT_TPS_Unit();
  RT_TPS_Unit::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5funit_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5funit_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5funit_2eproto() {
    protobuf_AddDesc_rt_5ftps_5funit_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5funit_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Unit::kUnitUidFieldNumber;
const int RT_TPS_Unit::kMachineUidFieldNumber;
const int RT_TPS_Unit::kMachineNameFieldNumber;
const int RT_TPS_Unit::kRadiationTypeFieldNumber;
const int RT_TPS_Unit::kTechniqueTypeFieldNumber;
const int RT_TPS_Unit::kUnitEnergyFieldNumber;
const int RT_TPS_Unit::kFlatteningfiltermodeFieldNumber;
const int RT_TPS_Unit::kGantryMinFieldNumber;
const int RT_TPS_Unit::kGantryMaxFieldNumber;
const int RT_TPS_Unit::kTableMinFieldNumber;
const int RT_TPS_Unit::kTableMaxFieldNumber;
const int RT_TPS_Unit::kCollimatorMinFieldNumber;
const int RT_TPS_Unit::kCollimatorMaxFieldNumber;
const int RT_TPS_Unit::kJawX1MinFieldNumber;
const int RT_TPS_Unit::kJawX1MaxFieldNumber;
const int RT_TPS_Unit::kJawX2MinFieldNumber;
const int RT_TPS_Unit::kJawX2MaxFieldNumber;
const int RT_TPS_Unit::kJawY1MinFieldNumber;
const int RT_TPS_Unit::kJawY1MaxFieldNumber;
const int RT_TPS_Unit::kJawY2MinFieldNumber;
const int RT_TPS_Unit::kJawY2MaxFieldNumber;
const int RT_TPS_Unit::kApplicatorsFieldNumber;
const int RT_TPS_Unit::kDoseRatesFieldNumber;
const int RT_TPS_Unit::kTrayuidFieldNumber;
const int RT_TPS_Unit::kTrayFactorFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Unit::RT_TPS_Unit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Unit::InitAsDefaultInstance() {
}

RT_TPS_Unit::RT_TPS_Unit(const RT_TPS_Unit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Unit::SharedCtor() {
  _cached_size_ = 0;
  unituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  radiationtype_ = 0;
  unitenergy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flatteningfiltermode_ = 0;
  gantry_min_ = 0;
  gantry_max_ = 0;
  table_min_ = 0;
  table_max_ = 0;
  collimator_min_ = 0;
  collimator_max_ = 0;
  jaw_x1_min_ = 0;
  jaw_x1_max_ = 0;
  jaw_x2_min_ = 0;
  jaw_x2_max_ = 0;
  jaw_y1_min_ = 0;
  jaw_y1_max_ = 0;
  jaw_y2_min_ = 0;
  jaw_y2_max_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Unit::~RT_TPS_Unit() {
  SharedDtor();
}

void RT_TPS_Unit::SharedDtor() {
  if (unituid_ != &::google::protobuf::internal::kEmptyString) {
    delete unituid_;
  }
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineuid_;
  }
  if (machinename_ != &::google::protobuf::internal::kEmptyString) {
    delete machinename_;
  }
  if (unitenergy_ != &::google::protobuf::internal::kEmptyString) {
    delete unitenergy_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Unit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Unit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Unit_descriptor_;
}

const RT_TPS_Unit& RT_TPS_Unit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5funit_2eproto();  return *default_instance_;
}

RT_TPS_Unit* RT_TPS_Unit::default_instance_ = NULL;

RT_TPS_Unit* RT_TPS_Unit::New() const {
  return new RT_TPS_Unit;
}

void RT_TPS_Unit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_unituid()) {
      if (unituid_ != &::google::protobuf::internal::kEmptyString) {
        unituid_->clear();
      }
    }
    if (has_machineuid()) {
      if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
        machineuid_->clear();
      }
    }
    if (has_machinename()) {
      if (machinename_ != &::google::protobuf::internal::kEmptyString) {
        machinename_->clear();
      }
    }
    radiationtype_ = 0;
    if (has_unitenergy()) {
      if (unitenergy_ != &::google::protobuf::internal::kEmptyString) {
        unitenergy_->clear();
      }
    }
    flatteningfiltermode_ = 0;
    gantry_min_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    gantry_max_ = 0;
    table_min_ = 0;
    table_max_ = 0;
    collimator_min_ = 0;
    collimator_max_ = 0;
    jaw_x1_min_ = 0;
    jaw_x1_max_ = 0;
    jaw_x2_min_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    jaw_x2_max_ = 0;
    jaw_y1_min_ = 0;
    jaw_y1_max_ = 0;
    jaw_y2_min_ = 0;
    jaw_y2_max_ = 0;
  }
  techniquetype_.Clear();
  applicators_.Clear();
  doserates_.Clear();
  trayuid_.Clear();
  tray_factor_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Unit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string unitUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unituid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unituid().data(), this->unituid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machineUid;
        break;
      }
      
      // required string machineUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineuid().data(), this->machineuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machineName;
        break;
      }
      
      // required string machineName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machinename().data(), this->machinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_radiationType;
        break;
      }
      
      // required int32 radiationType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radiationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiationtype_)));
          set_has_radiationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_techniqueType;
        break;
      }
      
      // repeated int32 techniqueType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_techniqueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_techniquetype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_techniquetype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_techniqueType;
        if (input->ExpectTag(50)) goto parse_unitEnergy;
        break;
      }
      
      // required string unitEnergy = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unitEnergy:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitenergy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unitenergy().data(), this->unitenergy().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_flatteningfiltermode;
        break;
      }
      
      // required int32 flatteningfiltermode = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flatteningfiltermode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flatteningfiltermode_)));
          set_has_flatteningfiltermode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_gantry_min;
        break;
      }
      
      // required double gantry_min = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantry_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantry_min_)));
          set_has_gantry_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_gantry_max;
        break;
      }
      
      // required double gantry_max = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_gantry_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gantry_max_)));
          set_has_gantry_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_table_min;
        break;
      }
      
      // required double table_min = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_table_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &table_min_)));
          set_has_table_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_table_max;
        break;
      }
      
      // required double table_max = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_table_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &table_max_)));
          set_has_table_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_collimator_min;
        break;
      }
      
      // required double collimator_min = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_collimator_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collimator_min_)));
          set_has_collimator_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_collimator_max;
        break;
      }
      
      // required double collimator_max = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_collimator_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &collimator_max_)));
          set_has_collimator_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_jaw_x1_min;
        break;
      }
      
      // required double jaw_x1_min = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x1_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x1_min_)));
          set_has_jaw_x1_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_jaw_x1_max;
        break;
      }
      
      // required double jaw_x1_max = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x1_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x1_max_)));
          set_has_jaw_x1_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_jaw_x2_min;
        break;
      }
      
      // required double jaw_x2_min = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x2_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x2_min_)));
          set_has_jaw_x2_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_jaw_x2_max;
        break;
      }
      
      // required double jaw_x2_max = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_x2_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_x2_max_)));
          set_has_jaw_x2_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_jaw_y1_min;
        break;
      }
      
      // required double jaw_y1_min = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y1_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y1_min_)));
          set_has_jaw_y1_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_jaw_y1_max;
        break;
      }
      
      // required double jaw_y1_max = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y1_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y1_max_)));
          set_has_jaw_y1_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_jaw_y2_min;
        break;
      }
      
      // required double jaw_y2_min = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y2_min:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y2_min_)));
          set_has_jaw_y2_min();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_jaw_y2_max;
        break;
      }
      
      // required double jaw_y2_max = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_jaw_y2_max:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jaw_y2_max_)));
          set_has_jaw_y2_max();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_applicators;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Applicator applicators = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicators:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applicators()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_applicators;
        if (input->ExpectTag(189)) goto parse_doseRates;
        break;
      }
      
      // repeated float doseRates = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseRates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 189, input, this->mutable_doserates())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_doserates())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_doseRates;
        if (input->ExpectTag(194)) goto parse_trayuid;
        break;
      }
      
      // repeated string trayuid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trayuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayuid(0).data(), this->trayuid(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_trayuid;
        if (input->ExpectTag(202)) goto parse_tray_factor;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_Tray_Factor tray_factor = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tray_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tray_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_tray_factor;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Unit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string unitUid = 1;
  if (has_unituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unituid().data(), this->unituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->unituid(), output);
  }
  
  // required string machineUid = 2;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->machineuid(), output);
  }
  
  // required string machineName = 3;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->machinename(), output);
  }
  
  // required int32 radiationType = 4;
  if (has_radiationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->radiationtype(), output);
  }
  
  // repeated int32 techniqueType = 5;
  for (int i = 0; i < this->techniquetype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->techniquetype(i), output);
  }
  
  // required string unitEnergy = 6;
  if (has_unitenergy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitenergy().data(), this->unitenergy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->unitenergy(), output);
  }
  
  // required int32 flatteningfiltermode = 7;
  if (has_flatteningfiltermode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->flatteningfiltermode(), output);
  }
  
  // required double gantry_min = 8;
  if (has_gantry_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->gantry_min(), output);
  }
  
  // required double gantry_max = 9;
  if (has_gantry_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->gantry_max(), output);
  }
  
  // required double table_min = 10;
  if (has_table_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->table_min(), output);
  }
  
  // required double table_max = 11;
  if (has_table_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->table_max(), output);
  }
  
  // required double collimator_min = 12;
  if (has_collimator_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->collimator_min(), output);
  }
  
  // required double collimator_max = 13;
  if (has_collimator_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->collimator_max(), output);
  }
  
  // required double jaw_x1_min = 14;
  if (has_jaw_x1_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->jaw_x1_min(), output);
  }
  
  // required double jaw_x1_max = 15;
  if (has_jaw_x1_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->jaw_x1_max(), output);
  }
  
  // required double jaw_x2_min = 16;
  if (has_jaw_x2_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->jaw_x2_min(), output);
  }
  
  // required double jaw_x2_max = 17;
  if (has_jaw_x2_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->jaw_x2_max(), output);
  }
  
  // required double jaw_y1_min = 18;
  if (has_jaw_y1_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->jaw_y1_min(), output);
  }
  
  // required double jaw_y1_max = 19;
  if (has_jaw_y1_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->jaw_y1_max(), output);
  }
  
  // required double jaw_y2_min = 20;
  if (has_jaw_y2_min()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->jaw_y2_min(), output);
  }
  
  // required double jaw_y2_max = 21;
  if (has_jaw_y2_max()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->jaw_y2_max(), output);
  }
  
  // repeated .tps.proto.RT_TPS_Applicator applicators = 22;
  for (int i = 0; i < this->applicators_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->applicators(i), output);
  }
  
  // repeated float doseRates = 23;
  for (int i = 0; i < this->doserates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      23, this->doserates(i), output);
  }
  
  // repeated string trayuid = 24;
  for (int i = 0; i < this->trayuid_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->trayuid(i).data(), this->trayuid(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->trayuid(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_Tray_Factor tray_factor = 25;
  for (int i = 0; i < this->tray_factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->tray_factor(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Unit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string unitUid = 1;
  if (has_unituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unituid().data(), this->unituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->unituid(), target);
  }
  
  // required string machineUid = 2;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->machineuid(), target);
  }
  
  // required string machineName = 3;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->machinename(), target);
  }
  
  // required int32 radiationType = 4;
  if (has_radiationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->radiationtype(), target);
  }
  
  // repeated int32 techniqueType = 5;
  for (int i = 0; i < this->techniquetype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->techniquetype(i), target);
  }
  
  // required string unitEnergy = 6;
  if (has_unitenergy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unitenergy().data(), this->unitenergy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->unitenergy(), target);
  }
  
  // required int32 flatteningfiltermode = 7;
  if (has_flatteningfiltermode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->flatteningfiltermode(), target);
  }
  
  // required double gantry_min = 8;
  if (has_gantry_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->gantry_min(), target);
  }
  
  // required double gantry_max = 9;
  if (has_gantry_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->gantry_max(), target);
  }
  
  // required double table_min = 10;
  if (has_table_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->table_min(), target);
  }
  
  // required double table_max = 11;
  if (has_table_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->table_max(), target);
  }
  
  // required double collimator_min = 12;
  if (has_collimator_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->collimator_min(), target);
  }
  
  // required double collimator_max = 13;
  if (has_collimator_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->collimator_max(), target);
  }
  
  // required double jaw_x1_min = 14;
  if (has_jaw_x1_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->jaw_x1_min(), target);
  }
  
  // required double jaw_x1_max = 15;
  if (has_jaw_x1_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->jaw_x1_max(), target);
  }
  
  // required double jaw_x2_min = 16;
  if (has_jaw_x2_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->jaw_x2_min(), target);
  }
  
  // required double jaw_x2_max = 17;
  if (has_jaw_x2_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->jaw_x2_max(), target);
  }
  
  // required double jaw_y1_min = 18;
  if (has_jaw_y1_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->jaw_y1_min(), target);
  }
  
  // required double jaw_y1_max = 19;
  if (has_jaw_y1_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->jaw_y1_max(), target);
  }
  
  // required double jaw_y2_min = 20;
  if (has_jaw_y2_min()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->jaw_y2_min(), target);
  }
  
  // required double jaw_y2_max = 21;
  if (has_jaw_y2_max()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->jaw_y2_max(), target);
  }
  
  // repeated .tps.proto.RT_TPS_Applicator applicators = 22;
  for (int i = 0; i < this->applicators_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->applicators(i), target);
  }
  
  // repeated float doseRates = 23;
  for (int i = 0; i < this->doserates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(23, this->doserates(i), target);
  }
  
  // repeated string trayuid = 24;
  for (int i = 0; i < this->trayuid_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuid(i).data(), this->trayuid(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(24, this->trayuid(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_Tray_Factor tray_factor = 25;
  for (int i = 0; i < this->tray_factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->tray_factor(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Unit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string unitUid = 1;
    if (has_unituid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unituid());
    }
    
    // required string machineUid = 2;
    if (has_machineuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineuid());
    }
    
    // required string machineName = 3;
    if (has_machinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machinename());
    }
    
    // required int32 radiationType = 4;
    if (has_radiationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiationtype());
    }
    
    // required string unitEnergy = 6;
    if (has_unitenergy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unitenergy());
    }
    
    // required int32 flatteningfiltermode = 7;
    if (has_flatteningfiltermode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flatteningfiltermode());
    }
    
    // required double gantry_min = 8;
    if (has_gantry_min()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double gantry_max = 9;
    if (has_gantry_max()) {
      total_size += 1 + 8;
    }
    
    // required double table_min = 10;
    if (has_table_min()) {
      total_size += 1 + 8;
    }
    
    // required double table_max = 11;
    if (has_table_max()) {
      total_size += 1 + 8;
    }
    
    // required double collimator_min = 12;
    if (has_collimator_min()) {
      total_size += 1 + 8;
    }
    
    // required double collimator_max = 13;
    if (has_collimator_max()) {
      total_size += 1 + 8;
    }
    
    // required double jaw_x1_min = 14;
    if (has_jaw_x1_min()) {
      total_size += 1 + 8;
    }
    
    // required double jaw_x1_max = 15;
    if (has_jaw_x1_max()) {
      total_size += 1 + 8;
    }
    
    // required double jaw_x2_min = 16;
    if (has_jaw_x2_min()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double jaw_x2_max = 17;
    if (has_jaw_x2_max()) {
      total_size += 2 + 8;
    }
    
    // required double jaw_y1_min = 18;
    if (has_jaw_y1_min()) {
      total_size += 2 + 8;
    }
    
    // required double jaw_y1_max = 19;
    if (has_jaw_y1_max()) {
      total_size += 2 + 8;
    }
    
    // required double jaw_y2_min = 20;
    if (has_jaw_y2_min()) {
      total_size += 2 + 8;
    }
    
    // required double jaw_y2_max = 21;
    if (has_jaw_y2_max()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated int32 techniqueType = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->techniquetype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->techniquetype(i));
    }
    total_size += 1 * this->techniquetype_size() + data_size;
  }
  
  // repeated .tps.proto.RT_TPS_Applicator applicators = 22;
  total_size += 2 * this->applicators_size();
  for (int i = 0; i < this->applicators_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applicators(i));
  }
  
  // repeated float doseRates = 23;
  {
    int data_size = 0;
    data_size = 4 * this->doserates_size();
    total_size += 2 * this->doserates_size() + data_size;
  }
  
  // repeated string trayuid = 24;
  total_size += 2 * this->trayuid_size();
  for (int i = 0; i < this->trayuid_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trayuid(i));
  }
  
  // repeated .tps.proto.RT_TPS_Tray_Factor tray_factor = 25;
  total_size += 2 * this->tray_factor_size();
  for (int i = 0; i < this->tray_factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tray_factor(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Unit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Unit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Unit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Unit::MergeFrom(const RT_TPS_Unit& from) {
  GOOGLE_CHECK_NE(&from, this);
  techniquetype_.MergeFrom(from.techniquetype_);
  applicators_.MergeFrom(from.applicators_);
  doserates_.MergeFrom(from.doserates_);
  trayuid_.MergeFrom(from.trayuid_);
  tray_factor_.MergeFrom(from.tray_factor_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unituid()) {
      set_unituid(from.unituid());
    }
    if (from.has_machineuid()) {
      set_machineuid(from.machineuid());
    }
    if (from.has_machinename()) {
      set_machinename(from.machinename());
    }
    if (from.has_radiationtype()) {
      set_radiationtype(from.radiationtype());
    }
    if (from.has_unitenergy()) {
      set_unitenergy(from.unitenergy());
    }
    if (from.has_flatteningfiltermode()) {
      set_flatteningfiltermode(from.flatteningfiltermode());
    }
    if (from.has_gantry_min()) {
      set_gantry_min(from.gantry_min());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_gantry_max()) {
      set_gantry_max(from.gantry_max());
    }
    if (from.has_table_min()) {
      set_table_min(from.table_min());
    }
    if (from.has_table_max()) {
      set_table_max(from.table_max());
    }
    if (from.has_collimator_min()) {
      set_collimator_min(from.collimator_min());
    }
    if (from.has_collimator_max()) {
      set_collimator_max(from.collimator_max());
    }
    if (from.has_jaw_x1_min()) {
      set_jaw_x1_min(from.jaw_x1_min());
    }
    if (from.has_jaw_x1_max()) {
      set_jaw_x1_max(from.jaw_x1_max());
    }
    if (from.has_jaw_x2_min()) {
      set_jaw_x2_min(from.jaw_x2_min());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_jaw_x2_max()) {
      set_jaw_x2_max(from.jaw_x2_max());
    }
    if (from.has_jaw_y1_min()) {
      set_jaw_y1_min(from.jaw_y1_min());
    }
    if (from.has_jaw_y1_max()) {
      set_jaw_y1_max(from.jaw_y1_max());
    }
    if (from.has_jaw_y2_min()) {
      set_jaw_y2_min(from.jaw_y2_min());
    }
    if (from.has_jaw_y2_max()) {
      set_jaw_y2_max(from.jaw_y2_max());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Unit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Unit::CopyFrom(const RT_TPS_Unit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Unit::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffef) != 0x001fffef) return false;
  
  for (int i = 0; i < applicators_size(); i++) {
    if (!this->applicators(i).IsInitialized()) return false;
  }
  for (int i = 0; i < tray_factor_size(); i++) {
    if (!this->tray_factor(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_Unit::Swap(RT_TPS_Unit* other) {
  if (other != this) {
    std::swap(unituid_, other->unituid_);
    std::swap(machineuid_, other->machineuid_);
    std::swap(machinename_, other->machinename_);
    std::swap(radiationtype_, other->radiationtype_);
    techniquetype_.Swap(&other->techniquetype_);
    std::swap(unitenergy_, other->unitenergy_);
    std::swap(flatteningfiltermode_, other->flatteningfiltermode_);
    std::swap(gantry_min_, other->gantry_min_);
    std::swap(gantry_max_, other->gantry_max_);
    std::swap(table_min_, other->table_min_);
    std::swap(table_max_, other->table_max_);
    std::swap(collimator_min_, other->collimator_min_);
    std::swap(collimator_max_, other->collimator_max_);
    std::swap(jaw_x1_min_, other->jaw_x1_min_);
    std::swap(jaw_x1_max_, other->jaw_x1_max_);
    std::swap(jaw_x2_min_, other->jaw_x2_min_);
    std::swap(jaw_x2_max_, other->jaw_x2_max_);
    std::swap(jaw_y1_min_, other->jaw_y1_min_);
    std::swap(jaw_y1_max_, other->jaw_y1_max_);
    std::swap(jaw_y2_min_, other->jaw_y2_min_);
    std::swap(jaw_y2_max_, other->jaw_y2_max_);
    applicators_.Swap(&other->applicators_);
    doserates_.Swap(&other->doserates_);
    trayuid_.Swap(&other->trayuid_);
    tray_factor_.Swap(&other->tray_factor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Unit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Unit_descriptor_;
  metadata.reflection = RT_TPS_Unit_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
