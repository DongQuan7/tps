// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_machinesettingconfig.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_MachineSettingInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineSettingInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_CommissionList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_CommissionList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineConfigInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineConfigInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineGeneral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineGeneral_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineGeometry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineGeometry_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineJaw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineJaw_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_PairInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_PairInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineMLC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineMLC_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_CommissionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_CommissionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineBeamModeDoseRate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineBeamModeDoseRate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineTray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineTray_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineAccessories_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineAccessories_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineElectronApplicator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineElectronApplicator_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineMotorizedWedge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineMotorizedWedge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MachineWedge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MachineWedge_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fmachinesettingconfig_2eproto() {
  protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_machinesettingconfig.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_MachineSettingInfoList_descriptor_ = file->message_type(0);
  static const int RT_MS_MachineSettingInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineSettingInfoList, machinesettinglist_),
  };
  RT_MS_MachineSettingInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineSettingInfoList_descriptor_,
      RT_MS_MachineSettingInfoList::default_instance_,
      RT_MS_MachineSettingInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineSettingInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineSettingInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineSettingInfoList));
  RT_MS_CommissionList_descriptor_ = file->message_type(1);
  static const int RT_MS_CommissionList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionList, machinecommissioninfo_),
  };
  RT_MS_CommissionList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_CommissionList_descriptor_,
      RT_MS_CommissionList::default_instance_,
      RT_MS_CommissionList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_CommissionList));
  RT_MS_MachineConfigInfo_descriptor_ = file->message_type(2);
  static const int RT_MS_MachineConfigInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machinegeneralinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machinegeometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machinejaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machinemlc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machineaccessories_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, isapprove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, isactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, machinecommissioninfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, iscrcvalid_),
  };
  RT_MS_MachineConfigInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineConfigInfo_descriptor_,
      RT_MS_MachineConfigInfo::default_instance_,
      RT_MS_MachineConfigInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineConfigInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineConfigInfo));
  RT_MS_MachineGeneral_descriptor_ = file->message_type(3);
  static const int RT_MS_MachineGeneral_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, machinename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, manufactory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, coordinationsystem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, bywho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, comments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, uid_),
  };
  RT_MS_MachineGeneral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineGeneral_descriptor_,
      RT_MS_MachineGeneral::default_instance_,
      RT_MS_MachineGeneral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeneral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineGeneral));
  RT_MS_MachineGeometry_descriptor_ = file->message_type(4);
  static const int RT_MS_MachineGeometry_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, gantryanglemin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, gantryanglemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, maxspeedlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, sad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, cwlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, ccwlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, collimatorlow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, collimatorhigh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, lateralmotionmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, lateralmotionmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, longitudemotionmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, longitudemotionmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, verticalmotionmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, verticalmotionmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, rtnmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, rtnmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, mingantryspeed_degreepersecond_),
  };
  RT_MS_MachineGeometry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineGeometry_descriptor_,
      RT_MS_MachineGeometry::default_instance_,
      RT_MS_MachineGeometry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineGeometry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineGeometry));
  RT_MS_MachineJaw_descriptor_ = file->message_type(5);
  static const int RT_MS_MachineJaw_offsets_[28] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, isxjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, isyjaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, isxasym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, isyasym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, leftjawlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, rightjawlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, maxleftjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, minleftjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, maxrightjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, minrightjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, lateraljawoutsideedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, lateralinsidejawedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, sourcelateraljawdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, jawgap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, maxjawspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, topjawlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, bottomjawlabel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, maxtopjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, mintopjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, maxbottomjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, minbottomjawposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, longitudejawoutsideedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, longitudejawinsideedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, sourcelongitudejawdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, lateraltracking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, longitudinaltranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, note_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, isforcejawfollow_),
  };
  RT_MS_MachineJaw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineJaw_descriptor_,
      RT_MS_MachineJaw::default_instance_,
      RT_MS_MachineJaw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineJaw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineJaw));
  RT_MS_PairInfo_descriptor_ = file->message_type(6);
  static const int RT_MS_PairInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PairInfo, pairuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PairInfo, pair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PairInfo, leafpairs_),
  };
  RT_MS_PairInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_PairInfo_descriptor_,
      RT_MS_PairInfo::default_instance_,
      RT_MS_PairInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PairInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_PairInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_PairInfo));
  RT_MS_MachineMLC_descriptor_ = file->message_type(7);
  static const int RT_MS_MachineMLC_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, sourcetomlctopdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, minleafjawoverlap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, mingap_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, maxleafspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, mintipposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, maxtipposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, leafinterdigitation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, maxleafoutofcarriagedistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, mlcdirection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, pairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, pairinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, maxleafacc_mmpersec2_),
  };
  RT_MS_MachineMLC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineMLC_descriptor_,
      RT_MS_MachineMLC::default_instance_,
      RT_MS_MachineMLC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMLC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineMLC));
  RT_MS_CommissionInfo_descriptor_ = file->message_type(8);
  static const int RT_MS_CommissionInfo_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, radiationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, flatteningfiltertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isconvolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, ispencilbeam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, ismontecarlo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isdoseratevarsupport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplan2d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplan3d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplanstepshoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplanslidingwindow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplansimplearc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplanconformalarc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplanvmatarc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isplanburstarc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, electorntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, doseratelistinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, ischeckedhalfprofile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, commissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, commissionname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, isapprove_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, calibrationfieldsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, calibrationfieldsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, calibrationdmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, ssd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, lateral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, who_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, penumbra_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, blockattenuationfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, trayfactorlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, phocommissionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, nordepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, mlcfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, xjawfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, yjawfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, photonmontecarloinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, mindoserate_mupermin_),
  };
  RT_MS_CommissionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_CommissionInfo_descriptor_,
      RT_MS_CommissionInfo::default_instance_,
      RT_MS_CommissionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_CommissionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_CommissionInfo));
  RT_MS_MachineBeamModeDoseRate_descriptor_ = file->message_type(9);
  static const int RT_MS_MachineBeamModeDoseRate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineBeamModeDoseRate, doserateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineBeamModeDoseRate, doserate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineBeamModeDoseRate, isdoseratedefault_),
  };
  RT_MS_MachineBeamModeDoseRate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineBeamModeDoseRate_descriptor_,
      RT_MS_MachineBeamModeDoseRate::default_instance_,
      RT_MS_MachineBeamModeDoseRate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineBeamModeDoseRate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineBeamModeDoseRate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineBeamModeDoseRate));
  RT_MS_MachineTray_descriptor_ = file->message_type(10);
  static const int RT_MS_MachineTray_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineTray, trayuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineTray, trayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineTray, traycode_),
  };
  RT_MS_MachineTray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineTray_descriptor_,
      RT_MS_MachineTray::default_instance_,
      RT_MS_MachineTray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineTray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineTray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineTray));
  RT_MS_MachineAccessories_descriptor_ = file->message_type(11);
  static const int RT_MS_MachineAccessories_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, isapertureblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, isshieldblock_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, sourcetoblocktrydistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, sourcetoapplicatorlowdistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, sourcetowedgedistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, electronapplicatorlistinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, machinewedgelistinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, motorizedwedge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, trayuidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, trayacccode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, traylist_),
  };
  RT_MS_MachineAccessories_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineAccessories_descriptor_,
      RT_MS_MachineAccessories::default_instance_,
      RT_MS_MachineAccessories_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineAccessories, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineAccessories));
  RT_MS_MachineElectronApplicator_descriptor_ = file->message_type(12);
  static const int RT_MS_MachineElectronApplicator_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, applicatoraccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, sizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, sizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, applicatoruid_),
  };
  RT_MS_MachineElectronApplicator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineElectronApplicator_descriptor_,
      RT_MS_MachineElectronApplicator::default_instance_,
      RT_MS_MachineElectronApplicator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineElectronApplicator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineElectronApplicator));
  RT_MS_MachineMotorizedWedge_descriptor_ = file->message_type(13);
  static const int RT_MS_MachineMotorizedWedge_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMotorizedWedge, motorizedwedgeorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMotorizedWedge, motorizedfieldsizelimitx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMotorizedWedge, motorizedfieldsizelimity_),
  };
  RT_MS_MachineMotorizedWedge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineMotorizedWedge_descriptor_,
      RT_MS_MachineMotorizedWedge::default_instance_,
      RT_MS_MachineMotorizedWedge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMotorizedWedge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineMotorizedWedge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineMotorizedWedge));
  RT_MS_MachineWedge_descriptor_ = file->message_type(14);
  static const int RT_MS_MachineWedge_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, wedgeaccid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, degree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, leftmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, leftmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, rightmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, rightmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, topmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, topmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, bottommin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, bottommax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, orientationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, wedgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, acccode_),
  };
  RT_MS_MachineWedge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MachineWedge_descriptor_,
      RT_MS_MachineWedge::default_instance_,
      RT_MS_MachineWedge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MachineWedge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MachineWedge));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fmachinesettingconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineSettingInfoList_descriptor_, &RT_MS_MachineSettingInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_CommissionList_descriptor_, &RT_MS_CommissionList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineConfigInfo_descriptor_, &RT_MS_MachineConfigInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineGeneral_descriptor_, &RT_MS_MachineGeneral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineGeometry_descriptor_, &RT_MS_MachineGeometry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineJaw_descriptor_, &RT_MS_MachineJaw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_PairInfo_descriptor_, &RT_MS_PairInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineMLC_descriptor_, &RT_MS_MachineMLC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_CommissionInfo_descriptor_, &RT_MS_CommissionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineBeamModeDoseRate_descriptor_, &RT_MS_MachineBeamModeDoseRate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineTray_descriptor_, &RT_MS_MachineTray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineAccessories_descriptor_, &RT_MS_MachineAccessories::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineElectronApplicator_descriptor_, &RT_MS_MachineElectronApplicator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineMotorizedWedge_descriptor_, &RT_MS_MachineMotorizedWedge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MachineWedge_descriptor_, &RT_MS_MachineWedge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fmachinesettingconfig_2eproto() {
  delete RT_MS_MachineSettingInfoList::default_instance_;
  delete RT_MS_MachineSettingInfoList_reflection_;
  delete RT_MS_CommissionList::default_instance_;
  delete RT_MS_CommissionList_reflection_;
  delete RT_MS_MachineConfigInfo::default_instance_;
  delete RT_MS_MachineConfigInfo_reflection_;
  delete RT_MS_MachineGeneral::default_instance_;
  delete RT_MS_MachineGeneral_reflection_;
  delete RT_MS_MachineGeometry::default_instance_;
  delete RT_MS_MachineGeometry_reflection_;
  delete RT_MS_MachineJaw::default_instance_;
  delete RT_MS_MachineJaw_reflection_;
  delete RT_MS_PairInfo::default_instance_;
  delete RT_MS_PairInfo_reflection_;
  delete RT_MS_MachineMLC::default_instance_;
  delete RT_MS_MachineMLC_reflection_;
  delete RT_MS_CommissionInfo::default_instance_;
  delete RT_MS_CommissionInfo_reflection_;
  delete RT_MS_MachineBeamModeDoseRate::default_instance_;
  delete RT_MS_MachineBeamModeDoseRate_reflection_;
  delete RT_MS_MachineTray::default_instance_;
  delete RT_MS_MachineTray_reflection_;
  delete RT_MS_MachineAccessories::default_instance_;
  delete RT_MS_MachineAccessories_reflection_;
  delete RT_MS_MachineElectronApplicator::default_instance_;
  delete RT_MS_MachineElectronApplicator_reflection_;
  delete RT_MS_MachineMotorizedWedge::default_instance_;
  delete RT_MS_MachineMotorizedWedge_reflection_;
  delete RT_MS_MachineWedge::default_instance_;
  delete RT_MS_MachineWedge_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ms::proto::protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n rt_ms_machinesettingconfig.proto\022\010ms.p"
    "roto\032\035rt_ms_photonsmontecarlo.proto\"]\n\034R"
    "T_MS_MachineSettingInfoList\022=\n\022machineSe"
    "ttingList\030\001 \003(\0132!.ms.proto.RT_MS_Machine"
    "ConfigInfo\"U\n\024RT_MS_CommissionList\022=\n\025ma"
    "chineCommissionInfo\030\001 \003(\0132\036.ms.proto.RT_"
    "MS_CommissionInfo\"\247\003\n\027RT_MS_MachineConfi"
    "gInfo\022:\n\022machineGeneralInfo\030\001 \001(\0132\036.ms.p"
    "roto.RT_MS_MachineGeneral\0228\n\017machineGeom"
    "etry\030\002 \001(\0132\037.ms.proto.RT_MS_MachineGeome"
    "try\022.\n\nmachineJaw\030\003 \001(\0132\032.ms.proto.RT_MS"
    "_MachineJaw\022.\n\nmachineMLC\030\004 \001(\0132\032.ms.pro"
    "to.RT_MS_MachineMLC\022>\n\022machineAccessorie"
    "s\030\005 \001(\0132\".ms.proto.RT_MS_MachineAccessor"
    "ies\022\021\n\tisApprove\030\006 \001(\010\022\020\n\010isActive\030\007 \001(\010"
    "\022=\n\025machineCommissionInfo\030\010 \003(\0132\036.ms.pro"
    "to.RT_MS_CommissionInfo\022\022\n\nisCrcValid\030\t "
    "\001(\010\"\270\001\n\024RT_MS_MachineGeneral\022\023\n\013machineN"
    "ame\030\001 \001(\t\022\023\n\013manufactory\030\002 \001(\t\022\020\n\010Device"
    "ID\030\003 \001(\t\022\032\n\022coordinationSystem\030\004 \001(\t\022\014\n\004"
    "date\030\005 \001(\t\022\014\n\004time\030\006 \001(\t\022\r\n\005byWho\030\007 \001(\t\022"
    "\020\n\010comments\030\010 \001(\t\022\013\n\003uid\030\t \001(\t\"\247\003\n\025RT_MS"
    "_MachineGeometry\022\026\n\016gantryAngleMin\030\001 \001(\002"
    "\022\026\n\016gantryAngleMax\030\002 \001(\002\022\025\n\rmaxSpeedLimi"
    "t\030\003 \001(\002\022\013\n\003sad\030\004 \001(\002\022\017\n\007cwLimit\030\005 \001(\002\022\020\n"
    "\010ccwLimit\030\006 \001(\002\022\025\n\rcollimatorLow\030\007 \001(\002\022\026"
    "\n\016collimatorHigh\030\010 \001(\002\022\030\n\020lateralMotionM"
    "ax\030\t \001(\002\022\030\n\020lateralMotionMin\030\n \001(\002\022\032\n\022lo"
    "ngitudeMotionMin\030\013 \001(\002\022\032\n\022longitudeMotio"
    "nMax\030\014 \001(\002\022\031\n\021verticalMotionMax\030\r \001(\002\022\031\n"
    "\021verticalMotionMin\030\016 \001(\002\022\016\n\006rTNMax\030\017 \001(\002"
    "\022\016\n\006rTNMIN\030\020 \001(\002\022&\n\036minGantrySpeed_Degre"
    "eperSecond\030\021 \001(\002\"\332\005\n\020RT_MS_MachineJaw\022\016\n"
    "\006isXjaw\030\001 \001(\010\022\016\n\006isYjaw\030\002 \001(\010\022\017\n\007isXasym"
    "\030\003 \001(\010\022\017\n\007isYasym\030\004 \001(\010\022\024\n\014leftJawLabel\030"
    "\005 \001(\t\022\025\n\rrightJawLabel\030\006 \001(\t\022\032\n\022maxLeftJ"
    "awPosition\030\007 \001(\002\022\032\n\022minLeftJawPosition\030\010"
    " \001(\002\022\033\n\023maxRightJawPosition\030\t \001(\002\022\033\n\023min"
    "RightJawPosition\030\n \001(\002\022\035\n\025lateralJawOuts"
    "ideEdge\030\013 \001(\002\022\034\n\024lateralInsideJawEdge\030\014 "
    "\001(\002\022 \n\030sourceLateralJawDistance\030\r \001(\002\022\016\n"
    "\006jawGap\030\016 \001(\002\022\023\n\013MaxJawSpeed\030\017 \001(\002\022\023\n\013to"
    "pJawLabel\030\020 \001(\t\022\026\n\016bottomJawLabel\030\021 \001(\t\022"
    "\031\n\021maxTopJawPosition\030\022 \001(\002\022\031\n\021minTopJawP"
    "osition\030\023 \001(\002\022\034\n\024maxBottomJawPosition\030\024 "
    "\001(\002\022\034\n\024minBottomJawPosition\030\025 \001(\002\022\037\n\027lon"
    "gitudeJawOutsideEdge\030\026 \001(\002\022\036\n\026longitudeJ"
    "awInsideEdge\030\027 \001(\002\022\"\n\032sourceLongitudeJaw"
    "Distance\030\030 \001(\002\022\027\n\017lateralTracking\030\031 \001(\010\022"
    "\034\n\024longitudinalTranking\030\032 \001(\010\022\014\n\004note\030\033 "
    "\001(\t\022\030\n\020isForceJawFollow\030\034 \001(\010\"B\n\016RT_MS_P"
    "airInfo\022\017\n\007pairUID\030\001 \001(\t\022\014\n\004pair\030\002 \001(\005\022\021"
    "\n\tleafPairs\030\003 \001(\001\"\331\002\n\020RT_MS_MachineMLC\022\036"
    "\n\026sourceToMLCtopDistance\030\001 \001(\002\022\031\n\021minLea"
    "fJawOverlap\030\002 \001(\002\022\016\n\006minGap\030\003 \001(\002\022\024\n\014max"
    "LeafSpeed\030\004 \001(\002\022\026\n\016minTipPosition\030\005 \001(\002\022"
    "\026\n\016maxTipPosition\030\006 \001(\002\022\033\n\023leafInterdigi"
    "tation\030\007 \001(\010\022$\n\034maxLeafoutofCarriageDist"
    "ance\030\010 \001(\002\022\024\n\014mlcDirection\030\t \001(\005\022\r\n\005pair"
    "s\030\n \001(\005\022.\n\014pairInfoList\030\013 \003(\0132\030.ms.proto"
    ".RT_MS_PairInfo\022\034\n\024maxLeafAcc_mmPerSec2\030"
    "\014 \001(\005\"\232\010\n\024RT_MS_CommissionInfo\022\025\n\rradiat"
    "ionType\030\001 \001(\005\022\016\n\006energy\030\002 \001(\002\022\034\n\024flatten"
    "ingFilterType\030\003 \001(\005\022\025\n\risConvolution\030\004 \001"
    "(\010\022\024\n\014isPencilBeam\030\005 \001(\010\022\024\n\014isMonteCarlo"
    "\030\006 \001(\010\022\034\n\024isDoseRateVarSupport\030\007 \001(\010\022\020\n\010"
    "isPlan2D\030\010 \001(\010\022\020\n\010isPlan3D\030\t \001(\010\022\027\n\017isPl"
    "anStepShoot\030\n \001(\010\022\033\n\023isPlanSlidingWindow"
    "\030\013 \001(\010\022\027\n\017isPlanSimpleArc\030\014 \001(\010\022\032\n\022isPla"
    "nConformalArc\030\r \001(\010\022\025\n\risPlanVMATArc\030\016 \001"
    "(\010\022\026\n\016isPlanBurstArc\030\017 \001(\010\022\024\n\014electornTy"
    "pe\030\020 \001(\010\022A\n\020doseRateListInfo\030\021 \003(\0132\'.ms."
    "proto.RT_MS_MachineBeamModeDoseRate\022\034\n\024i"
    "sCheckedHalfProfile\030\022 \001(\010\022\025\n\rcommissionU"
    "ID\030\023 \001(\t\022\026\n\016commissionName\030\024 \001(\t\022\021\n\tisAp"
    "prove\030\025 \001(\010\022\035\n\025calibrationFieldSizeX\030\026 \001"
    "(\002\022\035\n\025calibrationFieldSizeY\030\027 \001(\002\022\027\n\017cal"
    "ibrationDmax\030\030 \001(\002\022\013\n\003sSD\030\031 \001(\002\022\017\n\007later"
    "al\030\032 \001(\002\022\r\n\005depth\030\033 \001(\002\022\014\n\004date\030\034 \001(\t\022\014\n"
    "\004time\030\035 \001(\t\022\013\n\003who\030\036 \001(\t\022\013\n\003uid\030\037 \001(\t\022\021\n"
    "\tParentUID\030  \001(\t\022\020\n\010penumbra\030! \001(\002\022\036\n\026bl"
    "ockattenuationfactor\030\" \001(\002\022\026\n\016trayFactor"
    "List\030# \003(\002\022\030\n\020phoCommissionUID\030$ \001(\t\022\020\n\010"
    "norDepth\030% \001(\002\022\021\n\tmlcFactor\030& \001(\002\022\022\n\nxJa"
    "wFactor\030\' \001(\002\022\022\n\nyJawFactor\030( \001(\002\022I\n\024Pho"
    "tonMonteCarloInfo\030) \001(\0132+.ms.proto.RT_MS"
    "_PhotonMonteCarloInformation\022\034\n\024mindoser"
    "ate_mupermin\030* \001(\005\"a\n\035RT_MS_MachineBeamM"
    "odeDoseRate\022\023\n\013doseRateUID\030\001 \001(\t\022\020\n\010dose"
    "Rate\030\002 \001(\005\022\031\n\021isDoseRateDefault\030\003 \001(\010\"F\n"
    "\021RT_MS_MachineTray\022\017\n\007trayUID\030\001 \001(\t\022\016\n\006t"
    "rayid\030\002 \001(\t\022\020\n\010trayCode\030\003 \001(\t\"\362\003\n\030RT_MS_"
    "MachineAccessories\022\027\n\017isApertureBlock\030\001 "
    "\001(\010\022\025\n\risShieldBlock\030\002 \001(\010\022 \n\030sourceToBl"
    "ockTryDistance\030\003 \001(\002\022\016\n\006height\030\004 \001(\002\022%\n\035"
    "sourceToApplicatorLowDistance\030\005 \001(\002\022\035\n\025s"
    "ourceToWedgeDistance\030\006 \001(\002\022M\n\032electronAp"
    "plicatorListInfo\030\007 \003(\0132).ms.proto.RT_MS_"
    "MachineElectronApplicator\022:\n\024machineWedg"
    "eListInfo\030\010 \003(\0132\034.ms.proto.RT_MS_Machine"
    "Wedge\022=\n\016motorizedWedge\030\t \001(\0132%.ms.proto"
    ".RT_MS_MachineMotorizedWedge\022\023\n\013trayUIDL"
    "ist\030\n \003(\t\022\013\n\003UID\030\013 \001(\t\022\023\n\013trayACCcode\030\014 "
    "\003(\t\022-\n\010trayList\030\r \003(\0132\033.ms.proto.RT_MS_M"
    "achineTray\"o\n\037RT_MS_MachineElectronAppli"
    "cator\022\027\n\017applicatorACCID\030\001 \001(\t\022\r\n\005sizeX\030"
    "\002 \001(\002\022\r\n\005sizeY\030\003 \001(\002\022\025\n\rapplicatorUID\030\004 "
    "\001(\t\"\204\001\n\033RT_MS_MachineMotorizedWedge\022!\n\031m"
    "otorizedWedgeOrientation\030\001 \001(\005\022 \n\030motori"
    "zedFieldSizeLimitX\030\002 \001(\002\022 \n\030motorizedfie"
    "ldSizeLimitY\030\003 \001(\002\"\223\002\n\022RT_MS_MachineWedg"
    "e\022\022\n\nwedgeACCID\030\001 \001(\t\022\016\n\006degree\030\002 \001(\002\022\017\n"
    "\007leftMin\030\003 \001(\002\022\017\n\007leftMax\030\004 \001(\002\022\020\n\010right"
    "Min\030\005 \001(\002\022\020\n\010rightMax\030\006 \001(\002\022\016\n\006topMin\030\007 "
    "\001(\002\022\016\n\006topMax\030\010 \001(\002\022\021\n\tbottomMin\030\t \001(\002\022\021"
    "\n\tbottomMax\030\n \001(\002\022\027\n\017orientationType\030\013 \001"
    "(\t\022\020\n\010wedgeUID\030\014 \001(\t\022\021\n\twedgeType\030\r \001(\005\022"
    "\017\n\007accCode\030\016 \001(\t", 4696);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_machinesettingconfig.proto", &protobuf_RegisterTypes);
  RT_MS_MachineSettingInfoList::default_instance_ = new RT_MS_MachineSettingInfoList();
  RT_MS_CommissionList::default_instance_ = new RT_MS_CommissionList();
  RT_MS_MachineConfigInfo::default_instance_ = new RT_MS_MachineConfigInfo();
  RT_MS_MachineGeneral::default_instance_ = new RT_MS_MachineGeneral();
  RT_MS_MachineGeometry::default_instance_ = new RT_MS_MachineGeometry();
  RT_MS_MachineJaw::default_instance_ = new RT_MS_MachineJaw();
  RT_MS_PairInfo::default_instance_ = new RT_MS_PairInfo();
  RT_MS_MachineMLC::default_instance_ = new RT_MS_MachineMLC();
  RT_MS_CommissionInfo::default_instance_ = new RT_MS_CommissionInfo();
  RT_MS_MachineBeamModeDoseRate::default_instance_ = new RT_MS_MachineBeamModeDoseRate();
  RT_MS_MachineTray::default_instance_ = new RT_MS_MachineTray();
  RT_MS_MachineAccessories::default_instance_ = new RT_MS_MachineAccessories();
  RT_MS_MachineElectronApplicator::default_instance_ = new RT_MS_MachineElectronApplicator();
  RT_MS_MachineMotorizedWedge::default_instance_ = new RT_MS_MachineMotorizedWedge();
  RT_MS_MachineWedge::default_instance_ = new RT_MS_MachineWedge();
  RT_MS_MachineSettingInfoList::default_instance_->InitAsDefaultInstance();
  RT_MS_CommissionList::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineConfigInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineGeneral::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineGeometry::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineJaw::default_instance_->InitAsDefaultInstance();
  RT_MS_PairInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineMLC::default_instance_->InitAsDefaultInstance();
  RT_MS_CommissionInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineBeamModeDoseRate::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineTray::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineAccessories::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineElectronApplicator::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineMotorizedWedge::default_instance_->InitAsDefaultInstance();
  RT_MS_MachineWedge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fmachinesettingconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fmachinesettingconfig_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fmachinesettingconfig_2eproto() {
    protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fmachinesettingconfig_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineSettingInfoList::kMachineSettingListFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineSettingInfoList::RT_MS_MachineSettingInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineSettingInfoList::InitAsDefaultInstance() {
}

RT_MS_MachineSettingInfoList::RT_MS_MachineSettingInfoList(const RT_MS_MachineSettingInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineSettingInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineSettingInfoList::~RT_MS_MachineSettingInfoList() {
  SharedDtor();
}

void RT_MS_MachineSettingInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_MachineSettingInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineSettingInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineSettingInfoList_descriptor_;
}

const RT_MS_MachineSettingInfoList& RT_MS_MachineSettingInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineSettingInfoList* RT_MS_MachineSettingInfoList::default_instance_ = NULL;

RT_MS_MachineSettingInfoList* RT_MS_MachineSettingInfoList::New() const {
  return new RT_MS_MachineSettingInfoList;
}

void RT_MS_MachineSettingInfoList::Clear() {
  machinesettinglist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineSettingInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_MachineConfigInfo machineSettingList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineSettingList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machinesettinglist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machineSettingList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineSettingInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_MachineConfigInfo machineSettingList = 1;
  for (int i = 0; i < this->machinesettinglist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machinesettinglist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineSettingInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_MachineConfigInfo machineSettingList = 1;
  for (int i = 0; i < this->machinesettinglist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machinesettinglist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineSettingInfoList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_MachineConfigInfo machineSettingList = 1;
  total_size += 1 * this->machinesettinglist_size();
  for (int i = 0; i < this->machinesettinglist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machinesettinglist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineSettingInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineSettingInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineSettingInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineSettingInfoList::MergeFrom(const RT_MS_MachineSettingInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  machinesettinglist_.MergeFrom(from.machinesettinglist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineSettingInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineSettingInfoList::CopyFrom(const RT_MS_MachineSettingInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineSettingInfoList::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineSettingInfoList::Swap(RT_MS_MachineSettingInfoList* other) {
  if (other != this) {
    machinesettinglist_.Swap(&other->machinesettinglist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineSettingInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineSettingInfoList_descriptor_;
  metadata.reflection = RT_MS_MachineSettingInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_CommissionList::kMachineCommissionInfoFieldNumber;
#endif  // !_MSC_VER

RT_MS_CommissionList::RT_MS_CommissionList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_CommissionList::InitAsDefaultInstance() {
}

RT_MS_CommissionList::RT_MS_CommissionList(const RT_MS_CommissionList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_CommissionList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_CommissionList::~RT_MS_CommissionList() {
  SharedDtor();
}

void RT_MS_CommissionList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_CommissionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_CommissionList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_CommissionList_descriptor_;
}

const RT_MS_CommissionList& RT_MS_CommissionList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_CommissionList* RT_MS_CommissionList::default_instance_ = NULL;

RT_MS_CommissionList* RT_MS_CommissionList::New() const {
  return new RT_MS_CommissionList;
}

void RT_MS_CommissionList::Clear() {
  machinecommissioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_CommissionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineCommissionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machinecommissioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machineCommissionInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_CommissionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 1;
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machinecommissioninfo(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_CommissionList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 1;
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machinecommissioninfo(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_CommissionList::ByteSize() const {
  int total_size = 0;
  
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 1;
  total_size += 1 * this->machinecommissioninfo_size();
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machinecommissioninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_CommissionList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_CommissionList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_CommissionList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_CommissionList::MergeFrom(const RT_MS_CommissionList& from) {
  GOOGLE_CHECK_NE(&from, this);
  machinecommissioninfo_.MergeFrom(from.machinecommissioninfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_CommissionList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_CommissionList::CopyFrom(const RT_MS_CommissionList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_CommissionList::IsInitialized() const {
  
  return true;
}

void RT_MS_CommissionList::Swap(RT_MS_CommissionList* other) {
  if (other != this) {
    machinecommissioninfo_.Swap(&other->machinecommissioninfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_CommissionList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_CommissionList_descriptor_;
  metadata.reflection = RT_MS_CommissionList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineConfigInfo::kMachineGeneralInfoFieldNumber;
const int RT_MS_MachineConfigInfo::kMachineGeometryFieldNumber;
const int RT_MS_MachineConfigInfo::kMachineJawFieldNumber;
const int RT_MS_MachineConfigInfo::kMachineMLCFieldNumber;
const int RT_MS_MachineConfigInfo::kMachineAccessoriesFieldNumber;
const int RT_MS_MachineConfigInfo::kIsApproveFieldNumber;
const int RT_MS_MachineConfigInfo::kIsActiveFieldNumber;
const int RT_MS_MachineConfigInfo::kMachineCommissionInfoFieldNumber;
const int RT_MS_MachineConfigInfo::kIsCrcValidFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineConfigInfo::RT_MS_MachineConfigInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineConfigInfo::InitAsDefaultInstance() {
  machinegeneralinfo_ = const_cast< ::ms::proto::RT_MS_MachineGeneral*>(&::ms::proto::RT_MS_MachineGeneral::default_instance());
  machinegeometry_ = const_cast< ::ms::proto::RT_MS_MachineGeometry*>(&::ms::proto::RT_MS_MachineGeometry::default_instance());
  machinejaw_ = const_cast< ::ms::proto::RT_MS_MachineJaw*>(&::ms::proto::RT_MS_MachineJaw::default_instance());
  machinemlc_ = const_cast< ::ms::proto::RT_MS_MachineMLC*>(&::ms::proto::RT_MS_MachineMLC::default_instance());
  machineaccessories_ = const_cast< ::ms::proto::RT_MS_MachineAccessories*>(&::ms::proto::RT_MS_MachineAccessories::default_instance());
}

RT_MS_MachineConfigInfo::RT_MS_MachineConfigInfo(const RT_MS_MachineConfigInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineConfigInfo::SharedCtor() {
  _cached_size_ = 0;
  machinegeneralinfo_ = NULL;
  machinegeometry_ = NULL;
  machinejaw_ = NULL;
  machinemlc_ = NULL;
  machineaccessories_ = NULL;
  isapprove_ = false;
  isactive_ = false;
  iscrcvalid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineConfigInfo::~RT_MS_MachineConfigInfo() {
  SharedDtor();
}

void RT_MS_MachineConfigInfo::SharedDtor() {
  if (this != default_instance_) {
    delete machinegeneralinfo_;
    delete machinegeometry_;
    delete machinejaw_;
    delete machinemlc_;
    delete machineaccessories_;
  }
}

void RT_MS_MachineConfigInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineConfigInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineConfigInfo_descriptor_;
}

const RT_MS_MachineConfigInfo& RT_MS_MachineConfigInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineConfigInfo* RT_MS_MachineConfigInfo::default_instance_ = NULL;

RT_MS_MachineConfigInfo* RT_MS_MachineConfigInfo::New() const {
  return new RT_MS_MachineConfigInfo;
}

void RT_MS_MachineConfigInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machinegeneralinfo()) {
      if (machinegeneralinfo_ != NULL) machinegeneralinfo_->::ms::proto::RT_MS_MachineGeneral::Clear();
    }
    if (has_machinegeometry()) {
      if (machinegeometry_ != NULL) machinegeometry_->::ms::proto::RT_MS_MachineGeometry::Clear();
    }
    if (has_machinejaw()) {
      if (machinejaw_ != NULL) machinejaw_->::ms::proto::RT_MS_MachineJaw::Clear();
    }
    if (has_machinemlc()) {
      if (machinemlc_ != NULL) machinemlc_->::ms::proto::RT_MS_MachineMLC::Clear();
    }
    if (has_machineaccessories()) {
      if (machineaccessories_ != NULL) machineaccessories_->::ms::proto::RT_MS_MachineAccessories::Clear();
    }
    isapprove_ = false;
    isactive_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iscrcvalid_ = false;
  }
  machinecommissioninfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineConfigInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ms.proto.RT_MS_MachineGeneral machineGeneralInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machinegeneralinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machineGeometry;
        break;
      }
      
      // optional .ms.proto.RT_MS_MachineGeometry machineGeometry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineGeometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machinegeometry()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_machineJaw;
        break;
      }
      
      // optional .ms.proto.RT_MS_MachineJaw machineJaw = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineJaw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machinejaw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_machineMLC;
        break;
      }
      
      // optional .ms.proto.RT_MS_MachineMLC machineMLC = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineMLC:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machinemlc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_machineAccessories;
        break;
      }
      
      // optional .ms.proto.RT_MS_MachineAccessories machineAccessories = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineAccessories:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_machineaccessories()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isApprove;
        break;
      }
      
      // optional bool isApprove = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApprove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapprove_)));
          set_has_isapprove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isActive;
        break;
      }
      
      // optional bool isActive = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isactive_)));
          set_has_isactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machineCommissionInfo;
        break;
      }
      
      // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineCommissionInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machinecommissioninfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machineCommissionInfo;
        if (input->ExpectTag(72)) goto parse_isCrcValid;
        break;
      }
      
      // optional bool isCrcValid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCrcValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscrcvalid_)));
          set_has_iscrcvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineConfigInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ms.proto.RT_MS_MachineGeneral machineGeneralInfo = 1;
  if (has_machinegeneralinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->machinegeneralinfo(), output);
  }
  
  // optional .ms.proto.RT_MS_MachineGeometry machineGeometry = 2;
  if (has_machinegeometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machinegeometry(), output);
  }
  
  // optional .ms.proto.RT_MS_MachineJaw machineJaw = 3;
  if (has_machinejaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->machinejaw(), output);
  }
  
  // optional .ms.proto.RT_MS_MachineMLC machineMLC = 4;
  if (has_machinemlc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->machinemlc(), output);
  }
  
  // optional .ms.proto.RT_MS_MachineAccessories machineAccessories = 5;
  if (has_machineaccessories()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->machineaccessories(), output);
  }
  
  // optional bool isApprove = 6;
  if (has_isapprove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isapprove(), output);
  }
  
  // optional bool isActive = 7;
  if (has_isactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isactive(), output);
  }
  
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 8;
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->machinecommissioninfo(i), output);
  }
  
  // optional bool isCrcValid = 9;
  if (has_iscrcvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->iscrcvalid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineConfigInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ms.proto.RT_MS_MachineGeneral machineGeneralInfo = 1;
  if (has_machinegeneralinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->machinegeneralinfo(), target);
  }
  
  // optional .ms.proto.RT_MS_MachineGeometry machineGeometry = 2;
  if (has_machinegeometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->machinegeometry(), target);
  }
  
  // optional .ms.proto.RT_MS_MachineJaw machineJaw = 3;
  if (has_machinejaw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->machinejaw(), target);
  }
  
  // optional .ms.proto.RT_MS_MachineMLC machineMLC = 4;
  if (has_machinemlc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->machinemlc(), target);
  }
  
  // optional .ms.proto.RT_MS_MachineAccessories machineAccessories = 5;
  if (has_machineaccessories()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->machineaccessories(), target);
  }
  
  // optional bool isApprove = 6;
  if (has_isapprove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isapprove(), target);
  }
  
  // optional bool isActive = 7;
  if (has_isactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isactive(), target);
  }
  
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 8;
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->machinecommissioninfo(i), target);
  }
  
  // optional bool isCrcValid = 9;
  if (has_iscrcvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->iscrcvalid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineConfigInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ms.proto.RT_MS_MachineGeneral machineGeneralInfo = 1;
    if (has_machinegeneralinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machinegeneralinfo());
    }
    
    // optional .ms.proto.RT_MS_MachineGeometry machineGeometry = 2;
    if (has_machinegeometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machinegeometry());
    }
    
    // optional .ms.proto.RT_MS_MachineJaw machineJaw = 3;
    if (has_machinejaw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machinejaw());
    }
    
    // optional .ms.proto.RT_MS_MachineMLC machineMLC = 4;
    if (has_machinemlc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machinemlc());
    }
    
    // optional .ms.proto.RT_MS_MachineAccessories machineAccessories = 5;
    if (has_machineaccessories()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->machineaccessories());
    }
    
    // optional bool isApprove = 6;
    if (has_isapprove()) {
      total_size += 1 + 1;
    }
    
    // optional bool isActive = 7;
    if (has_isactive()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isCrcValid = 9;
    if (has_iscrcvalid()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .ms.proto.RT_MS_CommissionInfo machineCommissionInfo = 8;
  total_size += 1 * this->machinecommissioninfo_size();
  for (int i = 0; i < this->machinecommissioninfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machinecommissioninfo(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineConfigInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineConfigInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineConfigInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineConfigInfo::MergeFrom(const RT_MS_MachineConfigInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  machinecommissioninfo_.MergeFrom(from.machinecommissioninfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machinegeneralinfo()) {
      mutable_machinegeneralinfo()->::ms::proto::RT_MS_MachineGeneral::MergeFrom(from.machinegeneralinfo());
    }
    if (from.has_machinegeometry()) {
      mutable_machinegeometry()->::ms::proto::RT_MS_MachineGeometry::MergeFrom(from.machinegeometry());
    }
    if (from.has_machinejaw()) {
      mutable_machinejaw()->::ms::proto::RT_MS_MachineJaw::MergeFrom(from.machinejaw());
    }
    if (from.has_machinemlc()) {
      mutable_machinemlc()->::ms::proto::RT_MS_MachineMLC::MergeFrom(from.machinemlc());
    }
    if (from.has_machineaccessories()) {
      mutable_machineaccessories()->::ms::proto::RT_MS_MachineAccessories::MergeFrom(from.machineaccessories());
    }
    if (from.has_isapprove()) {
      set_isapprove(from.isapprove());
    }
    if (from.has_isactive()) {
      set_isactive(from.isactive());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iscrcvalid()) {
      set_iscrcvalid(from.iscrcvalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineConfigInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineConfigInfo::CopyFrom(const RT_MS_MachineConfigInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineConfigInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineConfigInfo::Swap(RT_MS_MachineConfigInfo* other) {
  if (other != this) {
    std::swap(machinegeneralinfo_, other->machinegeneralinfo_);
    std::swap(machinegeometry_, other->machinegeometry_);
    std::swap(machinejaw_, other->machinejaw_);
    std::swap(machinemlc_, other->machinemlc_);
    std::swap(machineaccessories_, other->machineaccessories_);
    std::swap(isapprove_, other->isapprove_);
    std::swap(isactive_, other->isactive_);
    machinecommissioninfo_.Swap(&other->machinecommissioninfo_);
    std::swap(iscrcvalid_, other->iscrcvalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineConfigInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineConfigInfo_descriptor_;
  metadata.reflection = RT_MS_MachineConfigInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineGeneral::kMachineNameFieldNumber;
const int RT_MS_MachineGeneral::kManufactoryFieldNumber;
const int RT_MS_MachineGeneral::kDeviceIDFieldNumber;
const int RT_MS_MachineGeneral::kCoordinationSystemFieldNumber;
const int RT_MS_MachineGeneral::kDateFieldNumber;
const int RT_MS_MachineGeneral::kTimeFieldNumber;
const int RT_MS_MachineGeneral::kByWhoFieldNumber;
const int RT_MS_MachineGeneral::kCommentsFieldNumber;
const int RT_MS_MachineGeneral::kUidFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineGeneral::RT_MS_MachineGeneral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineGeneral::InitAsDefaultInstance() {
}

RT_MS_MachineGeneral::RT_MS_MachineGeneral(const RT_MS_MachineGeneral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineGeneral::SharedCtor() {
  _cached_size_ = 0;
  machinename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  manufactory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  coordinationsystem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bywho_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineGeneral::~RT_MS_MachineGeneral() {
  SharedDtor();
}

void RT_MS_MachineGeneral::SharedDtor() {
  if (machinename_ != &::google::protobuf::internal::kEmptyString) {
    delete machinename_;
  }
  if (manufactory_ != &::google::protobuf::internal::kEmptyString) {
    delete manufactory_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (coordinationsystem_ != &::google::protobuf::internal::kEmptyString) {
    delete coordinationsystem_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (bywho_ != &::google::protobuf::internal::kEmptyString) {
    delete bywho_;
  }
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    delete comments_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineGeneral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineGeneral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineGeneral_descriptor_;
}

const RT_MS_MachineGeneral& RT_MS_MachineGeneral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineGeneral* RT_MS_MachineGeneral::default_instance_ = NULL;

RT_MS_MachineGeneral* RT_MS_MachineGeneral::New() const {
  return new RT_MS_MachineGeneral;
}

void RT_MS_MachineGeneral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machinename()) {
      if (machinename_ != &::google::protobuf::internal::kEmptyString) {
        machinename_->clear();
      }
    }
    if (has_manufactory()) {
      if (manufactory_ != &::google::protobuf::internal::kEmptyString) {
        manufactory_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_coordinationsystem()) {
      if (coordinationsystem_ != &::google::protobuf::internal::kEmptyString) {
        coordinationsystem_->clear();
      }
    }
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_bywho()) {
      if (bywho_ != &::google::protobuf::internal::kEmptyString) {
        bywho_->clear();
      }
    }
    if (has_comments()) {
      if (comments_ != &::google::protobuf::internal::kEmptyString) {
        comments_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineGeneral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string machineName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machinename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machinename().data(), this->machinename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_manufactory;
        break;
      }
      
      // optional string manufactory = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manufactory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufactory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->manufactory().data(), this->manufactory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_DeviceID;
        break;
      }
      
      // optional string DeviceID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_coordinationSystem;
        break;
      }
      
      // optional string coordinationSystem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coordinationSystem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coordinationsystem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->coordinationsystem().data(), this->coordinationsystem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_date;
        break;
      }
      
      // optional string date = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_time;
        break;
      }
      
      // optional string time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_byWho;
        break;
      }
      
      // optional string byWho = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byWho:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bywho()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bywho().data(), this->bywho().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_comments;
        break;
      }
      
      // optional string comments = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_comments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->comments().data(), this->comments().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_uid;
        break;
      }
      
      // optional string uid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineGeneral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string machineName = 1;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machinename(), output);
  }
  
  // optional string manufactory = 2;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->manufactory(), output);
  }
  
  // optional string DeviceID = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->deviceid(), output);
  }
  
  // optional string coordinationSystem = 4;
  if (has_coordinationsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coordinationsystem().data(), this->coordinationsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->coordinationsystem(), output);
  }
  
  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->date(), output);
  }
  
  // optional string time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->time(), output);
  }
  
  // optional string byWho = 7;
  if (has_bywho()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bywho().data(), this->bywho().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->bywho(), output);
  }
  
  // optional string comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->comments(), output);
  }
  
  // optional string uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->uid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineGeneral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string machineName = 1;
  if (has_machinename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machinename().data(), this->machinename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machinename(), target);
  }
  
  // optional string manufactory = 2;
  if (has_manufactory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->manufactory().data(), this->manufactory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->manufactory(), target);
  }
  
  // optional string DeviceID = 3;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceid(), target);
  }
  
  // optional string coordinationSystem = 4;
  if (has_coordinationsystem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->coordinationsystem().data(), this->coordinationsystem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->coordinationsystem(), target);
  }
  
  // optional string date = 5;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->date(), target);
  }
  
  // optional string time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->time(), target);
  }
  
  // optional string byWho = 7;
  if (has_bywho()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bywho().data(), this->bywho().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->bywho(), target);
  }
  
  // optional string comments = 8;
  if (has_comments()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->comments().data(), this->comments().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->comments(), target);
  }
  
  // optional string uid = 9;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->uid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineGeneral::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string machineName = 1;
    if (has_machinename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machinename());
    }
    
    // optional string manufactory = 2;
    if (has_manufactory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->manufactory());
    }
    
    // optional string DeviceID = 3;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }
    
    // optional string coordinationSystem = 4;
    if (has_coordinationsystem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->coordinationsystem());
    }
    
    // optional string date = 5;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional string time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
    // optional string byWho = 7;
    if (has_bywho()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bywho());
    }
    
    // optional string comments = 8;
    if (has_comments()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comments());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string uid = 9;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineGeneral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineGeneral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineGeneral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineGeneral::MergeFrom(const RT_MS_MachineGeneral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machinename()) {
      set_machinename(from.machinename());
    }
    if (from.has_manufactory()) {
      set_manufactory(from.manufactory());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_coordinationsystem()) {
      set_coordinationsystem(from.coordinationsystem());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bywho()) {
      set_bywho(from.bywho());
    }
    if (from.has_comments()) {
      set_comments(from.comments());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineGeneral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineGeneral::CopyFrom(const RT_MS_MachineGeneral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineGeneral::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineGeneral::Swap(RT_MS_MachineGeneral* other) {
  if (other != this) {
    std::swap(machinename_, other->machinename_);
    std::swap(manufactory_, other->manufactory_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(coordinationsystem_, other->coordinationsystem_);
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(bywho_, other->bywho_);
    std::swap(comments_, other->comments_);
    std::swap(uid_, other->uid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineGeneral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineGeneral_descriptor_;
  metadata.reflection = RT_MS_MachineGeneral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineGeometry::kGantryAngleMinFieldNumber;
const int RT_MS_MachineGeometry::kGantryAngleMaxFieldNumber;
const int RT_MS_MachineGeometry::kMaxSpeedLimitFieldNumber;
const int RT_MS_MachineGeometry::kSadFieldNumber;
const int RT_MS_MachineGeometry::kCwLimitFieldNumber;
const int RT_MS_MachineGeometry::kCcwLimitFieldNumber;
const int RT_MS_MachineGeometry::kCollimatorLowFieldNumber;
const int RT_MS_MachineGeometry::kCollimatorHighFieldNumber;
const int RT_MS_MachineGeometry::kLateralMotionMaxFieldNumber;
const int RT_MS_MachineGeometry::kLateralMotionMinFieldNumber;
const int RT_MS_MachineGeometry::kLongitudeMotionMinFieldNumber;
const int RT_MS_MachineGeometry::kLongitudeMotionMaxFieldNumber;
const int RT_MS_MachineGeometry::kVerticalMotionMaxFieldNumber;
const int RT_MS_MachineGeometry::kVerticalMotionMinFieldNumber;
const int RT_MS_MachineGeometry::kRTNMaxFieldNumber;
const int RT_MS_MachineGeometry::kRTNMINFieldNumber;
const int RT_MS_MachineGeometry::kMinGantrySpeedDegreeperSecondFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineGeometry::RT_MS_MachineGeometry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineGeometry::InitAsDefaultInstance() {
}

RT_MS_MachineGeometry::RT_MS_MachineGeometry(const RT_MS_MachineGeometry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineGeometry::SharedCtor() {
  _cached_size_ = 0;
  gantryanglemin_ = 0;
  gantryanglemax_ = 0;
  maxspeedlimit_ = 0;
  sad_ = 0;
  cwlimit_ = 0;
  ccwlimit_ = 0;
  collimatorlow_ = 0;
  collimatorhigh_ = 0;
  lateralmotionmax_ = 0;
  lateralmotionmin_ = 0;
  longitudemotionmin_ = 0;
  longitudemotionmax_ = 0;
  verticalmotionmax_ = 0;
  verticalmotionmin_ = 0;
  rtnmax_ = 0;
  rtnmin_ = 0;
  mingantryspeed_degreepersecond_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineGeometry::~RT_MS_MachineGeometry() {
  SharedDtor();
}

void RT_MS_MachineGeometry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_MachineGeometry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineGeometry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineGeometry_descriptor_;
}

const RT_MS_MachineGeometry& RT_MS_MachineGeometry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineGeometry* RT_MS_MachineGeometry::default_instance_ = NULL;

RT_MS_MachineGeometry* RT_MS_MachineGeometry::New() const {
  return new RT_MS_MachineGeometry;
}

void RT_MS_MachineGeometry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gantryanglemin_ = 0;
    gantryanglemax_ = 0;
    maxspeedlimit_ = 0;
    sad_ = 0;
    cwlimit_ = 0;
    ccwlimit_ = 0;
    collimatorlow_ = 0;
    collimatorhigh_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lateralmotionmax_ = 0;
    lateralmotionmin_ = 0;
    longitudemotionmin_ = 0;
    longitudemotionmax_ = 0;
    verticalmotionmax_ = 0;
    verticalmotionmin_ = 0;
    rtnmax_ = 0;
    rtnmin_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    mingantryspeed_degreepersecond_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineGeometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float gantryAngleMin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gantryanglemin_)));
          set_has_gantryanglemin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gantryAngleMax;
        break;
      }
      
      // optional float gantryAngleMax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gantryAngleMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gantryanglemax_)));
          set_has_gantryanglemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_maxSpeedLimit;
        break;
      }
      
      // optional float maxSpeedLimit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxSpeedLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxspeedlimit_)));
          set_has_maxspeedlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_sad;
        break;
      }
      
      // optional float sad = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sad_)));
          set_has_sad();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_cwLimit;
        break;
      }
      
      // optional float cwLimit = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cwLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cwlimit_)));
          set_has_cwlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_ccwLimit;
        break;
      }
      
      // optional float ccwLimit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ccwLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ccwlimit_)));
          set_has_ccwlimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_collimatorLow;
        break;
      }
      
      // optional float collimatorLow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorLow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorlow_)));
          set_has_collimatorlow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_collimatorHigh;
        break;
      }
      
      // optional float collimatorHigh = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorHigh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorhigh_)));
          set_has_collimatorhigh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_lateralMotionMax;
        break;
      }
      
      // optional float lateralMotionMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lateralMotionMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateralmotionmax_)));
          set_has_lateralmotionmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_lateralMotionMin;
        break;
      }
      
      // optional float lateralMotionMin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lateralMotionMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateralmotionmin_)));
          set_has_lateralmotionmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_longitudeMotionMin;
        break;
      }
      
      // optional float longitudeMotionMin = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitudeMotionMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudemotionmin_)));
          set_has_longitudemotionmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_longitudeMotionMax;
        break;
      }
      
      // optional float longitudeMotionMax = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitudeMotionMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudemotionmax_)));
          set_has_longitudemotionmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_verticalMotionMax;
        break;
      }
      
      // optional float verticalMotionMax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_verticalMotionMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticalmotionmax_)));
          set_has_verticalmotionmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_verticalMotionMin;
        break;
      }
      
      // optional float verticalMotionMin = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_verticalMotionMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &verticalmotionmin_)));
          set_has_verticalmotionmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_rTNMax;
        break;
      }
      
      // optional float rTNMax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rTNMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rtnmax_)));
          set_has_rtnmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(133)) goto parse_rTNMIN;
        break;
      }
      
      // optional float rTNMIN = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rTNMIN:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rtnmin_)));
          set_has_rtnmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(141)) goto parse_minGantrySpeed_DegreeperSecond;
        break;
      }
      
      // optional float minGantrySpeed_DegreeperSecond = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minGantrySpeed_DegreeperSecond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mingantryspeed_degreepersecond_)));
          set_has_mingantryspeed_degreepersecond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineGeometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float gantryAngleMin = 1;
  if (has_gantryanglemin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gantryanglemin(), output);
  }
  
  // optional float gantryAngleMax = 2;
  if (has_gantryanglemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gantryanglemax(), output);
  }
  
  // optional float maxSpeedLimit = 3;
  if (has_maxspeedlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->maxspeedlimit(), output);
  }
  
  // optional float sad = 4;
  if (has_sad()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->sad(), output);
  }
  
  // optional float cwLimit = 5;
  if (has_cwlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cwlimit(), output);
  }
  
  // optional float ccwLimit = 6;
  if (has_ccwlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ccwlimit(), output);
  }
  
  // optional float collimatorLow = 7;
  if (has_collimatorlow()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->collimatorlow(), output);
  }
  
  // optional float collimatorHigh = 8;
  if (has_collimatorhigh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->collimatorhigh(), output);
  }
  
  // optional float lateralMotionMax = 9;
  if (has_lateralmotionmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->lateralmotionmax(), output);
  }
  
  // optional float lateralMotionMin = 10;
  if (has_lateralmotionmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->lateralmotionmin(), output);
  }
  
  // optional float longitudeMotionMin = 11;
  if (has_longitudemotionmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->longitudemotionmin(), output);
  }
  
  // optional float longitudeMotionMax = 12;
  if (has_longitudemotionmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->longitudemotionmax(), output);
  }
  
  // optional float verticalMotionMax = 13;
  if (has_verticalmotionmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->verticalmotionmax(), output);
  }
  
  // optional float verticalMotionMin = 14;
  if (has_verticalmotionmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->verticalmotionmin(), output);
  }
  
  // optional float rTNMax = 15;
  if (has_rtnmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->rtnmax(), output);
  }
  
  // optional float rTNMIN = 16;
  if (has_rtnmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->rtnmin(), output);
  }
  
  // optional float minGantrySpeed_DegreeperSecond = 17;
  if (has_mingantryspeed_degreepersecond()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->mingantryspeed_degreepersecond(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineGeometry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float gantryAngleMin = 1;
  if (has_gantryanglemin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gantryanglemin(), target);
  }
  
  // optional float gantryAngleMax = 2;
  if (has_gantryanglemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gantryanglemax(), target);
  }
  
  // optional float maxSpeedLimit = 3;
  if (has_maxspeedlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->maxspeedlimit(), target);
  }
  
  // optional float sad = 4;
  if (has_sad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->sad(), target);
  }
  
  // optional float cwLimit = 5;
  if (has_cwlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cwlimit(), target);
  }
  
  // optional float ccwLimit = 6;
  if (has_ccwlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->ccwlimit(), target);
  }
  
  // optional float collimatorLow = 7;
  if (has_collimatorlow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->collimatorlow(), target);
  }
  
  // optional float collimatorHigh = 8;
  if (has_collimatorhigh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->collimatorhigh(), target);
  }
  
  // optional float lateralMotionMax = 9;
  if (has_lateralmotionmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->lateralmotionmax(), target);
  }
  
  // optional float lateralMotionMin = 10;
  if (has_lateralmotionmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->lateralmotionmin(), target);
  }
  
  // optional float longitudeMotionMin = 11;
  if (has_longitudemotionmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->longitudemotionmin(), target);
  }
  
  // optional float longitudeMotionMax = 12;
  if (has_longitudemotionmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->longitudemotionmax(), target);
  }
  
  // optional float verticalMotionMax = 13;
  if (has_verticalmotionmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->verticalmotionmax(), target);
  }
  
  // optional float verticalMotionMin = 14;
  if (has_verticalmotionmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->verticalmotionmin(), target);
  }
  
  // optional float rTNMax = 15;
  if (has_rtnmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->rtnmax(), target);
  }
  
  // optional float rTNMIN = 16;
  if (has_rtnmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->rtnmin(), target);
  }
  
  // optional float minGantrySpeed_DegreeperSecond = 17;
  if (has_mingantryspeed_degreepersecond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->mingantryspeed_degreepersecond(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineGeometry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float gantryAngleMin = 1;
    if (has_gantryanglemin()) {
      total_size += 1 + 4;
    }
    
    // optional float gantryAngleMax = 2;
    if (has_gantryanglemax()) {
      total_size += 1 + 4;
    }
    
    // optional float maxSpeedLimit = 3;
    if (has_maxspeedlimit()) {
      total_size += 1 + 4;
    }
    
    // optional float sad = 4;
    if (has_sad()) {
      total_size += 1 + 4;
    }
    
    // optional float cwLimit = 5;
    if (has_cwlimit()) {
      total_size += 1 + 4;
    }
    
    // optional float ccwLimit = 6;
    if (has_ccwlimit()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorLow = 7;
    if (has_collimatorlow()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorHigh = 8;
    if (has_collimatorhigh()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float lateralMotionMax = 9;
    if (has_lateralmotionmax()) {
      total_size += 1 + 4;
    }
    
    // optional float lateralMotionMin = 10;
    if (has_lateralmotionmin()) {
      total_size += 1 + 4;
    }
    
    // optional float longitudeMotionMin = 11;
    if (has_longitudemotionmin()) {
      total_size += 1 + 4;
    }
    
    // optional float longitudeMotionMax = 12;
    if (has_longitudemotionmax()) {
      total_size += 1 + 4;
    }
    
    // optional float verticalMotionMax = 13;
    if (has_verticalmotionmax()) {
      total_size += 1 + 4;
    }
    
    // optional float verticalMotionMin = 14;
    if (has_verticalmotionmin()) {
      total_size += 1 + 4;
    }
    
    // optional float rTNMax = 15;
    if (has_rtnmax()) {
      total_size += 1 + 4;
    }
    
    // optional float rTNMIN = 16;
    if (has_rtnmin()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional float minGantrySpeed_DegreeperSecond = 17;
    if (has_mingantryspeed_degreepersecond()) {
      total_size += 2 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineGeometry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineGeometry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineGeometry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineGeometry::MergeFrom(const RT_MS_MachineGeometry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gantryanglemin()) {
      set_gantryanglemin(from.gantryanglemin());
    }
    if (from.has_gantryanglemax()) {
      set_gantryanglemax(from.gantryanglemax());
    }
    if (from.has_maxspeedlimit()) {
      set_maxspeedlimit(from.maxspeedlimit());
    }
    if (from.has_sad()) {
      set_sad(from.sad());
    }
    if (from.has_cwlimit()) {
      set_cwlimit(from.cwlimit());
    }
    if (from.has_ccwlimit()) {
      set_ccwlimit(from.ccwlimit());
    }
    if (from.has_collimatorlow()) {
      set_collimatorlow(from.collimatorlow());
    }
    if (from.has_collimatorhigh()) {
      set_collimatorhigh(from.collimatorhigh());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lateralmotionmax()) {
      set_lateralmotionmax(from.lateralmotionmax());
    }
    if (from.has_lateralmotionmin()) {
      set_lateralmotionmin(from.lateralmotionmin());
    }
    if (from.has_longitudemotionmin()) {
      set_longitudemotionmin(from.longitudemotionmin());
    }
    if (from.has_longitudemotionmax()) {
      set_longitudemotionmax(from.longitudemotionmax());
    }
    if (from.has_verticalmotionmax()) {
      set_verticalmotionmax(from.verticalmotionmax());
    }
    if (from.has_verticalmotionmin()) {
      set_verticalmotionmin(from.verticalmotionmin());
    }
    if (from.has_rtnmax()) {
      set_rtnmax(from.rtnmax());
    }
    if (from.has_rtnmin()) {
      set_rtnmin(from.rtnmin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_mingantryspeed_degreepersecond()) {
      set_mingantryspeed_degreepersecond(from.mingantryspeed_degreepersecond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineGeometry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineGeometry::CopyFrom(const RT_MS_MachineGeometry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineGeometry::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineGeometry::Swap(RT_MS_MachineGeometry* other) {
  if (other != this) {
    std::swap(gantryanglemin_, other->gantryanglemin_);
    std::swap(gantryanglemax_, other->gantryanglemax_);
    std::swap(maxspeedlimit_, other->maxspeedlimit_);
    std::swap(sad_, other->sad_);
    std::swap(cwlimit_, other->cwlimit_);
    std::swap(ccwlimit_, other->ccwlimit_);
    std::swap(collimatorlow_, other->collimatorlow_);
    std::swap(collimatorhigh_, other->collimatorhigh_);
    std::swap(lateralmotionmax_, other->lateralmotionmax_);
    std::swap(lateralmotionmin_, other->lateralmotionmin_);
    std::swap(longitudemotionmin_, other->longitudemotionmin_);
    std::swap(longitudemotionmax_, other->longitudemotionmax_);
    std::swap(verticalmotionmax_, other->verticalmotionmax_);
    std::swap(verticalmotionmin_, other->verticalmotionmin_);
    std::swap(rtnmax_, other->rtnmax_);
    std::swap(rtnmin_, other->rtnmin_);
    std::swap(mingantryspeed_degreepersecond_, other->mingantryspeed_degreepersecond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineGeometry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineGeometry_descriptor_;
  metadata.reflection = RT_MS_MachineGeometry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineJaw::kIsXjawFieldNumber;
const int RT_MS_MachineJaw::kIsYjawFieldNumber;
const int RT_MS_MachineJaw::kIsXasymFieldNumber;
const int RT_MS_MachineJaw::kIsYasymFieldNumber;
const int RT_MS_MachineJaw::kLeftJawLabelFieldNumber;
const int RT_MS_MachineJaw::kRightJawLabelFieldNumber;
const int RT_MS_MachineJaw::kMaxLeftJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMinLeftJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMaxRightJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMinRightJawPositionFieldNumber;
const int RT_MS_MachineJaw::kLateralJawOutsideEdgeFieldNumber;
const int RT_MS_MachineJaw::kLateralInsideJawEdgeFieldNumber;
const int RT_MS_MachineJaw::kSourceLateralJawDistanceFieldNumber;
const int RT_MS_MachineJaw::kJawGapFieldNumber;
const int RT_MS_MachineJaw::kMaxJawSpeedFieldNumber;
const int RT_MS_MachineJaw::kTopJawLabelFieldNumber;
const int RT_MS_MachineJaw::kBottomJawLabelFieldNumber;
const int RT_MS_MachineJaw::kMaxTopJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMinTopJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMaxBottomJawPositionFieldNumber;
const int RT_MS_MachineJaw::kMinBottomJawPositionFieldNumber;
const int RT_MS_MachineJaw::kLongitudeJawOutsideEdgeFieldNumber;
const int RT_MS_MachineJaw::kLongitudeJawInsideEdgeFieldNumber;
const int RT_MS_MachineJaw::kSourceLongitudeJawDistanceFieldNumber;
const int RT_MS_MachineJaw::kLateralTrackingFieldNumber;
const int RT_MS_MachineJaw::kLongitudinalTrankingFieldNumber;
const int RT_MS_MachineJaw::kNoteFieldNumber;
const int RT_MS_MachineJaw::kIsForceJawFollowFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineJaw::RT_MS_MachineJaw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineJaw::InitAsDefaultInstance() {
}

RT_MS_MachineJaw::RT_MS_MachineJaw(const RT_MS_MachineJaw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineJaw::SharedCtor() {
  _cached_size_ = 0;
  isxjaw_ = false;
  isyjaw_ = false;
  isxasym_ = false;
  isyasym_ = false;
  leftjawlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rightjawlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxleftjawposition_ = 0;
  minleftjawposition_ = 0;
  maxrightjawposition_ = 0;
  minrightjawposition_ = 0;
  lateraljawoutsideedge_ = 0;
  lateralinsidejawedge_ = 0;
  sourcelateraljawdistance_ = 0;
  jawgap_ = 0;
  maxjawspeed_ = 0;
  topjawlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bottomjawlabel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxtopjawposition_ = 0;
  mintopjawposition_ = 0;
  maxbottomjawposition_ = 0;
  minbottomjawposition_ = 0;
  longitudejawoutsideedge_ = 0;
  longitudejawinsideedge_ = 0;
  sourcelongitudejawdistance_ = 0;
  lateraltracking_ = false;
  longitudinaltranking_ = false;
  note_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isforcejawfollow_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineJaw::~RT_MS_MachineJaw() {
  SharedDtor();
}

void RT_MS_MachineJaw::SharedDtor() {
  if (leftjawlabel_ != &::google::protobuf::internal::kEmptyString) {
    delete leftjawlabel_;
  }
  if (rightjawlabel_ != &::google::protobuf::internal::kEmptyString) {
    delete rightjawlabel_;
  }
  if (topjawlabel_ != &::google::protobuf::internal::kEmptyString) {
    delete topjawlabel_;
  }
  if (bottomjawlabel_ != &::google::protobuf::internal::kEmptyString) {
    delete bottomjawlabel_;
  }
  if (note_ != &::google::protobuf::internal::kEmptyString) {
    delete note_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineJaw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineJaw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineJaw_descriptor_;
}

const RT_MS_MachineJaw& RT_MS_MachineJaw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineJaw* RT_MS_MachineJaw::default_instance_ = NULL;

RT_MS_MachineJaw* RT_MS_MachineJaw::New() const {
  return new RT_MS_MachineJaw;
}

void RT_MS_MachineJaw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isxjaw_ = false;
    isyjaw_ = false;
    isxasym_ = false;
    isyasym_ = false;
    if (has_leftjawlabel()) {
      if (leftjawlabel_ != &::google::protobuf::internal::kEmptyString) {
        leftjawlabel_->clear();
      }
    }
    if (has_rightjawlabel()) {
      if (rightjawlabel_ != &::google::protobuf::internal::kEmptyString) {
        rightjawlabel_->clear();
      }
    }
    maxleftjawposition_ = 0;
    minleftjawposition_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    maxrightjawposition_ = 0;
    minrightjawposition_ = 0;
    lateraljawoutsideedge_ = 0;
    lateralinsidejawedge_ = 0;
    sourcelateraljawdistance_ = 0;
    jawgap_ = 0;
    maxjawspeed_ = 0;
    if (has_topjawlabel()) {
      if (topjawlabel_ != &::google::protobuf::internal::kEmptyString) {
        topjawlabel_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_bottomjawlabel()) {
      if (bottomjawlabel_ != &::google::protobuf::internal::kEmptyString) {
        bottomjawlabel_->clear();
      }
    }
    maxtopjawposition_ = 0;
    mintopjawposition_ = 0;
    maxbottomjawposition_ = 0;
    minbottomjawposition_ = 0;
    longitudejawoutsideedge_ = 0;
    longitudejawinsideedge_ = 0;
    sourcelongitudejawdistance_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    lateraltracking_ = false;
    longitudinaltranking_ = false;
    if (has_note()) {
      if (note_ != &::google::protobuf::internal::kEmptyString) {
        note_->clear();
      }
    }
    isforcejawfollow_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineJaw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isXjaw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isxjaw_)));
          set_has_isxjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isYjaw;
        break;
      }
      
      // optional bool isYjaw = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYjaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyjaw_)));
          set_has_isyjaw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isXasym;
        break;
      }
      
      // optional bool isXasym = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isXasym:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isxasym_)));
          set_has_isxasym();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isYasym;
        break;
      }
      
      // optional bool isYasym = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYasym:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isyasym_)));
          set_has_isyasym();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leftJawLabel;
        break;
      }
      
      // optional string leftJawLabel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leftJawLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leftjawlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leftjawlabel().data(), this->leftjawlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_rightJawLabel;
        break;
      }
      
      // optional string rightJawLabel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightJawLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rightjawlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rightjawlabel().data(), this->rightjawlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_maxLeftJawPosition;
        break;
      }
      
      // optional float maxLeftJawPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxLeftJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxleftjawposition_)));
          set_has_maxleftjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_minLeftJawPosition;
        break;
      }
      
      // optional float minLeftJawPosition = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minLeftJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minleftjawposition_)));
          set_has_minleftjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_maxRightJawPosition;
        break;
      }
      
      // optional float maxRightJawPosition = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxRightJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxrightjawposition_)));
          set_has_maxrightjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_minRightJawPosition;
        break;
      }
      
      // optional float minRightJawPosition = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minRightJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minrightjawposition_)));
          set_has_minrightjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_lateralJawOutsideEdge;
        break;
      }
      
      // optional float lateralJawOutsideEdge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lateralJawOutsideEdge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateraljawoutsideedge_)));
          set_has_lateraljawoutsideedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_lateralInsideJawEdge;
        break;
      }
      
      // optional float lateralInsideJawEdge = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lateralInsideJawEdge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateralinsidejawedge_)));
          set_has_lateralinsidejawedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_sourceLateralJawDistance;
        break;
      }
      
      // optional float sourceLateralJawDistance = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceLateralJawDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcelateraljawdistance_)));
          set_has_sourcelateraljawdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_jawGap;
        break;
      }
      
      // optional float jawGap = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_jawGap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &jawgap_)));
          set_has_jawgap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_MaxJawSpeed;
        break;
      }
      
      // optional float MaxJawSpeed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_MaxJawSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxjawspeed_)));
          set_has_maxjawspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_topJawLabel;
        break;
      }
      
      // optional string topJawLabel = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topJawLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topjawlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->topjawlabel().data(), this->topjawlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_bottomJawLabel;
        break;
      }
      
      // optional string bottomJawLabel = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bottomJawLabel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bottomjawlabel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bottomjawlabel().data(), this->bottomjawlabel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(149)) goto parse_maxTopJawPosition;
        break;
      }
      
      // optional float maxTopJawPosition = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxTopJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxtopjawposition_)));
          set_has_maxtopjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(157)) goto parse_minTopJawPosition;
        break;
      }
      
      // optional float minTopJawPosition = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minTopJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mintopjawposition_)));
          set_has_mintopjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_maxBottomJawPosition;
        break;
      }
      
      // optional float maxBottomJawPosition = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxBottomJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxbottomjawposition_)));
          set_has_maxbottomjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_minBottomJawPosition;
        break;
      }
      
      // optional float minBottomJawPosition = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minBottomJawPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minbottomjawposition_)));
          set_has_minbottomjawposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_longitudeJawOutsideEdge;
        break;
      }
      
      // optional float longitudeJawOutsideEdge = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitudeJawOutsideEdge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudejawoutsideedge_)));
          set_has_longitudejawoutsideedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_longitudeJawInsideEdge;
        break;
      }
      
      // optional float longitudeJawInsideEdge = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_longitudeJawInsideEdge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &longitudejawinsideedge_)));
          set_has_longitudejawinsideedge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_sourceLongitudeJawDistance;
        break;
      }
      
      // optional float sourceLongitudeJawDistance = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceLongitudeJawDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcelongitudejawdistance_)));
          set_has_sourcelongitudejawdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_lateralTracking;
        break;
      }
      
      // optional bool lateralTracking = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lateralTracking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lateraltracking_)));
          set_has_lateraltracking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_longitudinalTranking;
        break;
      }
      
      // optional bool longitudinalTranking = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_longitudinalTranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &longitudinaltranking_)));
          set_has_longitudinaltranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_note;
        break;
      }
      
      // optional string note = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_note:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_note()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->note().data(), this->note().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_isForceJawFollow;
        break;
      }
      
      // optional bool isForceJawFollow = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isForceJawFollow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isforcejawfollow_)));
          set_has_isforcejawfollow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineJaw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isXjaw = 1;
  if (has_isxjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isxjaw(), output);
  }
  
  // optional bool isYjaw = 2;
  if (has_isyjaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isyjaw(), output);
  }
  
  // optional bool isXasym = 3;
  if (has_isxasym()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isxasym(), output);
  }
  
  // optional bool isYasym = 4;
  if (has_isyasym()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isyasym(), output);
  }
  
  // optional string leftJawLabel = 5;
  if (has_leftjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leftjawlabel().data(), this->leftjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leftjawlabel(), output);
  }
  
  // optional string rightJawLabel = 6;
  if (has_rightjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rightjawlabel().data(), this->rightjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->rightjawlabel(), output);
  }
  
  // optional float maxLeftJawPosition = 7;
  if (has_maxleftjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->maxleftjawposition(), output);
  }
  
  // optional float minLeftJawPosition = 8;
  if (has_minleftjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->minleftjawposition(), output);
  }
  
  // optional float maxRightJawPosition = 9;
  if (has_maxrightjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->maxrightjawposition(), output);
  }
  
  // optional float minRightJawPosition = 10;
  if (has_minrightjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->minrightjawposition(), output);
  }
  
  // optional float lateralJawOutsideEdge = 11;
  if (has_lateraljawoutsideedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->lateraljawoutsideedge(), output);
  }
  
  // optional float lateralInsideJawEdge = 12;
  if (has_lateralinsidejawedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->lateralinsidejawedge(), output);
  }
  
  // optional float sourceLateralJawDistance = 13;
  if (has_sourcelateraljawdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sourcelateraljawdistance(), output);
  }
  
  // optional float jawGap = 14;
  if (has_jawgap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->jawgap(), output);
  }
  
  // optional float MaxJawSpeed = 15;
  if (has_maxjawspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->maxjawspeed(), output);
  }
  
  // optional string topJawLabel = 16;
  if (has_topjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topjawlabel().data(), this->topjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->topjawlabel(), output);
  }
  
  // optional string bottomJawLabel = 17;
  if (has_bottomjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottomjawlabel().data(), this->bottomjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->bottomjawlabel(), output);
  }
  
  // optional float maxTopJawPosition = 18;
  if (has_maxtopjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->maxtopjawposition(), output);
  }
  
  // optional float minTopJawPosition = 19;
  if (has_mintopjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->mintopjawposition(), output);
  }
  
  // optional float maxBottomJawPosition = 20;
  if (has_maxbottomjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->maxbottomjawposition(), output);
  }
  
  // optional float minBottomJawPosition = 21;
  if (has_minbottomjawposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->minbottomjawposition(), output);
  }
  
  // optional float longitudeJawOutsideEdge = 22;
  if (has_longitudejawoutsideedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->longitudejawoutsideedge(), output);
  }
  
  // optional float longitudeJawInsideEdge = 23;
  if (has_longitudejawinsideedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->longitudejawinsideedge(), output);
  }
  
  // optional float sourceLongitudeJawDistance = 24;
  if (has_sourcelongitudejawdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->sourcelongitudejawdistance(), output);
  }
  
  // optional bool lateralTracking = 25;
  if (has_lateraltracking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->lateraltracking(), output);
  }
  
  // optional bool longitudinalTranking = 26;
  if (has_longitudinaltranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->longitudinaltranking(), output);
  }
  
  // optional string note = 27;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->note(), output);
  }
  
  // optional bool isForceJawFollow = 28;
  if (has_isforcejawfollow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->isforcejawfollow(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineJaw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isXjaw = 1;
  if (has_isxjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isxjaw(), target);
  }
  
  // optional bool isYjaw = 2;
  if (has_isyjaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isyjaw(), target);
  }
  
  // optional bool isXasym = 3;
  if (has_isxasym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isxasym(), target);
  }
  
  // optional bool isYasym = 4;
  if (has_isyasym()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isyasym(), target);
  }
  
  // optional string leftJawLabel = 5;
  if (has_leftjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leftjawlabel().data(), this->leftjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leftjawlabel(), target);
  }
  
  // optional string rightJawLabel = 6;
  if (has_rightjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rightjawlabel().data(), this->rightjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->rightjawlabel(), target);
  }
  
  // optional float maxLeftJawPosition = 7;
  if (has_maxleftjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->maxleftjawposition(), target);
  }
  
  // optional float minLeftJawPosition = 8;
  if (has_minleftjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->minleftjawposition(), target);
  }
  
  // optional float maxRightJawPosition = 9;
  if (has_maxrightjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->maxrightjawposition(), target);
  }
  
  // optional float minRightJawPosition = 10;
  if (has_minrightjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->minrightjawposition(), target);
  }
  
  // optional float lateralJawOutsideEdge = 11;
  if (has_lateraljawoutsideedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->lateraljawoutsideedge(), target);
  }
  
  // optional float lateralInsideJawEdge = 12;
  if (has_lateralinsidejawedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->lateralinsidejawedge(), target);
  }
  
  // optional float sourceLateralJawDistance = 13;
  if (has_sourcelateraljawdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->sourcelateraljawdistance(), target);
  }
  
  // optional float jawGap = 14;
  if (has_jawgap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->jawgap(), target);
  }
  
  // optional float MaxJawSpeed = 15;
  if (has_maxjawspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->maxjawspeed(), target);
  }
  
  // optional string topJawLabel = 16;
  if (has_topjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->topjawlabel().data(), this->topjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->topjawlabel(), target);
  }
  
  // optional string bottomJawLabel = 17;
  if (has_bottomjawlabel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bottomjawlabel().data(), this->bottomjawlabel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->bottomjawlabel(), target);
  }
  
  // optional float maxTopJawPosition = 18;
  if (has_maxtopjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->maxtopjawposition(), target);
  }
  
  // optional float minTopJawPosition = 19;
  if (has_mintopjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(19, this->mintopjawposition(), target);
  }
  
  // optional float maxBottomJawPosition = 20;
  if (has_maxbottomjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->maxbottomjawposition(), target);
  }
  
  // optional float minBottomJawPosition = 21;
  if (has_minbottomjawposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->minbottomjawposition(), target);
  }
  
  // optional float longitudeJawOutsideEdge = 22;
  if (has_longitudejawoutsideedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->longitudejawoutsideedge(), target);
  }
  
  // optional float longitudeJawInsideEdge = 23;
  if (has_longitudejawinsideedge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->longitudejawinsideedge(), target);
  }
  
  // optional float sourceLongitudeJawDistance = 24;
  if (has_sourcelongitudejawdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->sourcelongitudejawdistance(), target);
  }
  
  // optional bool lateralTracking = 25;
  if (has_lateraltracking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(25, this->lateraltracking(), target);
  }
  
  // optional bool longitudinalTranking = 26;
  if (has_longitudinaltranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->longitudinaltranking(), target);
  }
  
  // optional string note = 27;
  if (has_note()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->note().data(), this->note().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->note(), target);
  }
  
  // optional bool isForceJawFollow = 28;
  if (has_isforcejawfollow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(28, this->isforcejawfollow(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineJaw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isXjaw = 1;
    if (has_isxjaw()) {
      total_size += 1 + 1;
    }
    
    // optional bool isYjaw = 2;
    if (has_isyjaw()) {
      total_size += 1 + 1;
    }
    
    // optional bool isXasym = 3;
    if (has_isxasym()) {
      total_size += 1 + 1;
    }
    
    // optional bool isYasym = 4;
    if (has_isyasym()) {
      total_size += 1 + 1;
    }
    
    // optional string leftJawLabel = 5;
    if (has_leftjawlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leftjawlabel());
    }
    
    // optional string rightJawLabel = 6;
    if (has_rightjawlabel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rightjawlabel());
    }
    
    // optional float maxLeftJawPosition = 7;
    if (has_maxleftjawposition()) {
      total_size += 1 + 4;
    }
    
    // optional float minLeftJawPosition = 8;
    if (has_minleftjawposition()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float maxRightJawPosition = 9;
    if (has_maxrightjawposition()) {
      total_size += 1 + 4;
    }
    
    // optional float minRightJawPosition = 10;
    if (has_minrightjawposition()) {
      total_size += 1 + 4;
    }
    
    // optional float lateralJawOutsideEdge = 11;
    if (has_lateraljawoutsideedge()) {
      total_size += 1 + 4;
    }
    
    // optional float lateralInsideJawEdge = 12;
    if (has_lateralinsidejawedge()) {
      total_size += 1 + 4;
    }
    
    // optional float sourceLateralJawDistance = 13;
    if (has_sourcelateraljawdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float jawGap = 14;
    if (has_jawgap()) {
      total_size += 1 + 4;
    }
    
    // optional float MaxJawSpeed = 15;
    if (has_maxjawspeed()) {
      total_size += 1 + 4;
    }
    
    // optional string topJawLabel = 16;
    if (has_topjawlabel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->topjawlabel());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string bottomJawLabel = 17;
    if (has_bottomjawlabel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bottomjawlabel());
    }
    
    // optional float maxTopJawPosition = 18;
    if (has_maxtopjawposition()) {
      total_size += 2 + 4;
    }
    
    // optional float minTopJawPosition = 19;
    if (has_mintopjawposition()) {
      total_size += 2 + 4;
    }
    
    // optional float maxBottomJawPosition = 20;
    if (has_maxbottomjawposition()) {
      total_size += 2 + 4;
    }
    
    // optional float minBottomJawPosition = 21;
    if (has_minbottomjawposition()) {
      total_size += 2 + 4;
    }
    
    // optional float longitudeJawOutsideEdge = 22;
    if (has_longitudejawoutsideedge()) {
      total_size += 2 + 4;
    }
    
    // optional float longitudeJawInsideEdge = 23;
    if (has_longitudejawinsideedge()) {
      total_size += 2 + 4;
    }
    
    // optional float sourceLongitudeJawDistance = 24;
    if (has_sourcelongitudejawdistance()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool lateralTracking = 25;
    if (has_lateraltracking()) {
      total_size += 2 + 1;
    }
    
    // optional bool longitudinalTranking = 26;
    if (has_longitudinaltranking()) {
      total_size += 2 + 1;
    }
    
    // optional string note = 27;
    if (has_note()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->note());
    }
    
    // optional bool isForceJawFollow = 28;
    if (has_isforcejawfollow()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineJaw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineJaw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineJaw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineJaw::MergeFrom(const RT_MS_MachineJaw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isxjaw()) {
      set_isxjaw(from.isxjaw());
    }
    if (from.has_isyjaw()) {
      set_isyjaw(from.isyjaw());
    }
    if (from.has_isxasym()) {
      set_isxasym(from.isxasym());
    }
    if (from.has_isyasym()) {
      set_isyasym(from.isyasym());
    }
    if (from.has_leftjawlabel()) {
      set_leftjawlabel(from.leftjawlabel());
    }
    if (from.has_rightjawlabel()) {
      set_rightjawlabel(from.rightjawlabel());
    }
    if (from.has_maxleftjawposition()) {
      set_maxleftjawposition(from.maxleftjawposition());
    }
    if (from.has_minleftjawposition()) {
      set_minleftjawposition(from.minleftjawposition());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_maxrightjawposition()) {
      set_maxrightjawposition(from.maxrightjawposition());
    }
    if (from.has_minrightjawposition()) {
      set_minrightjawposition(from.minrightjawposition());
    }
    if (from.has_lateraljawoutsideedge()) {
      set_lateraljawoutsideedge(from.lateraljawoutsideedge());
    }
    if (from.has_lateralinsidejawedge()) {
      set_lateralinsidejawedge(from.lateralinsidejawedge());
    }
    if (from.has_sourcelateraljawdistance()) {
      set_sourcelateraljawdistance(from.sourcelateraljawdistance());
    }
    if (from.has_jawgap()) {
      set_jawgap(from.jawgap());
    }
    if (from.has_maxjawspeed()) {
      set_maxjawspeed(from.maxjawspeed());
    }
    if (from.has_topjawlabel()) {
      set_topjawlabel(from.topjawlabel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_bottomjawlabel()) {
      set_bottomjawlabel(from.bottomjawlabel());
    }
    if (from.has_maxtopjawposition()) {
      set_maxtopjawposition(from.maxtopjawposition());
    }
    if (from.has_mintopjawposition()) {
      set_mintopjawposition(from.mintopjawposition());
    }
    if (from.has_maxbottomjawposition()) {
      set_maxbottomjawposition(from.maxbottomjawposition());
    }
    if (from.has_minbottomjawposition()) {
      set_minbottomjawposition(from.minbottomjawposition());
    }
    if (from.has_longitudejawoutsideedge()) {
      set_longitudejawoutsideedge(from.longitudejawoutsideedge());
    }
    if (from.has_longitudejawinsideedge()) {
      set_longitudejawinsideedge(from.longitudejawinsideedge());
    }
    if (from.has_sourcelongitudejawdistance()) {
      set_sourcelongitudejawdistance(from.sourcelongitudejawdistance());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_lateraltracking()) {
      set_lateraltracking(from.lateraltracking());
    }
    if (from.has_longitudinaltranking()) {
      set_longitudinaltranking(from.longitudinaltranking());
    }
    if (from.has_note()) {
      set_note(from.note());
    }
    if (from.has_isforcejawfollow()) {
      set_isforcejawfollow(from.isforcejawfollow());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineJaw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineJaw::CopyFrom(const RT_MS_MachineJaw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineJaw::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineJaw::Swap(RT_MS_MachineJaw* other) {
  if (other != this) {
    std::swap(isxjaw_, other->isxjaw_);
    std::swap(isyjaw_, other->isyjaw_);
    std::swap(isxasym_, other->isxasym_);
    std::swap(isyasym_, other->isyasym_);
    std::swap(leftjawlabel_, other->leftjawlabel_);
    std::swap(rightjawlabel_, other->rightjawlabel_);
    std::swap(maxleftjawposition_, other->maxleftjawposition_);
    std::swap(minleftjawposition_, other->minleftjawposition_);
    std::swap(maxrightjawposition_, other->maxrightjawposition_);
    std::swap(minrightjawposition_, other->minrightjawposition_);
    std::swap(lateraljawoutsideedge_, other->lateraljawoutsideedge_);
    std::swap(lateralinsidejawedge_, other->lateralinsidejawedge_);
    std::swap(sourcelateraljawdistance_, other->sourcelateraljawdistance_);
    std::swap(jawgap_, other->jawgap_);
    std::swap(maxjawspeed_, other->maxjawspeed_);
    std::swap(topjawlabel_, other->topjawlabel_);
    std::swap(bottomjawlabel_, other->bottomjawlabel_);
    std::swap(maxtopjawposition_, other->maxtopjawposition_);
    std::swap(mintopjawposition_, other->mintopjawposition_);
    std::swap(maxbottomjawposition_, other->maxbottomjawposition_);
    std::swap(minbottomjawposition_, other->minbottomjawposition_);
    std::swap(longitudejawoutsideedge_, other->longitudejawoutsideedge_);
    std::swap(longitudejawinsideedge_, other->longitudejawinsideedge_);
    std::swap(sourcelongitudejawdistance_, other->sourcelongitudejawdistance_);
    std::swap(lateraltracking_, other->lateraltracking_);
    std::swap(longitudinaltranking_, other->longitudinaltranking_);
    std::swap(note_, other->note_);
    std::swap(isforcejawfollow_, other->isforcejawfollow_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineJaw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineJaw_descriptor_;
  metadata.reflection = RT_MS_MachineJaw_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_PairInfo::kPairUIDFieldNumber;
const int RT_MS_PairInfo::kPairFieldNumber;
const int RT_MS_PairInfo::kLeafPairsFieldNumber;
#endif  // !_MSC_VER

RT_MS_PairInfo::RT_MS_PairInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_PairInfo::InitAsDefaultInstance() {
}

RT_MS_PairInfo::RT_MS_PairInfo(const RT_MS_PairInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_PairInfo::SharedCtor() {
  _cached_size_ = 0;
  pairuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pair_ = 0;
  leafpairs_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_PairInfo::~RT_MS_PairInfo() {
  SharedDtor();
}

void RT_MS_PairInfo::SharedDtor() {
  if (pairuid_ != &::google::protobuf::internal::kEmptyString) {
    delete pairuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_PairInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_PairInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_PairInfo_descriptor_;
}

const RT_MS_PairInfo& RT_MS_PairInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_PairInfo* RT_MS_PairInfo::default_instance_ = NULL;

RT_MS_PairInfo* RT_MS_PairInfo::New() const {
  return new RT_MS_PairInfo;
}

void RT_MS_PairInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pairuid()) {
      if (pairuid_ != &::google::protobuf::internal::kEmptyString) {
        pairuid_->clear();
      }
    }
    pair_ = 0;
    leafpairs_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_PairInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pairUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pairuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pairuid().data(), this->pairuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pair;
        break;
      }
      
      // optional int32 pair = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pair_)));
          set_has_pair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_leafPairs;
        break;
      }
      
      // optional double leafPairs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_leafPairs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &leafpairs_)));
          set_has_leafpairs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_PairInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string pairUID = 1;
  if (has_pairuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairuid().data(), this->pairuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->pairuid(), output);
  }
  
  // optional int32 pair = 2;
  if (has_pair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pair(), output);
  }
  
  // optional double leafPairs = 3;
  if (has_leafpairs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->leafpairs(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_PairInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string pairUID = 1;
  if (has_pairuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pairuid().data(), this->pairuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pairuid(), target);
  }
  
  // optional int32 pair = 2;
  if (has_pair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pair(), target);
  }
  
  // optional double leafPairs = 3;
  if (has_leafpairs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->leafpairs(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_PairInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string pairUID = 1;
    if (has_pairuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pairuid());
    }
    
    // optional int32 pair = 2;
    if (has_pair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pair());
    }
    
    // optional double leafPairs = 3;
    if (has_leafpairs()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_PairInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_PairInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_PairInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_PairInfo::MergeFrom(const RT_MS_PairInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pairuid()) {
      set_pairuid(from.pairuid());
    }
    if (from.has_pair()) {
      set_pair(from.pair());
    }
    if (from.has_leafpairs()) {
      set_leafpairs(from.leafpairs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_PairInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_PairInfo::CopyFrom(const RT_MS_PairInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_PairInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_PairInfo::Swap(RT_MS_PairInfo* other) {
  if (other != this) {
    std::swap(pairuid_, other->pairuid_);
    std::swap(pair_, other->pair_);
    std::swap(leafpairs_, other->leafpairs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_PairInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_PairInfo_descriptor_;
  metadata.reflection = RT_MS_PairInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineMLC::kSourceToMLCtopDistanceFieldNumber;
const int RT_MS_MachineMLC::kMinLeafJawOverlapFieldNumber;
const int RT_MS_MachineMLC::kMinGapFieldNumber;
const int RT_MS_MachineMLC::kMaxLeafSpeedFieldNumber;
const int RT_MS_MachineMLC::kMinTipPositionFieldNumber;
const int RT_MS_MachineMLC::kMaxTipPositionFieldNumber;
const int RT_MS_MachineMLC::kLeafInterdigitationFieldNumber;
const int RT_MS_MachineMLC::kMaxLeafoutofCarriageDistanceFieldNumber;
const int RT_MS_MachineMLC::kMlcDirectionFieldNumber;
const int RT_MS_MachineMLC::kPairsFieldNumber;
const int RT_MS_MachineMLC::kPairInfoListFieldNumber;
const int RT_MS_MachineMLC::kMaxLeafAccMmPerSec2FieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineMLC::RT_MS_MachineMLC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineMLC::InitAsDefaultInstance() {
}

RT_MS_MachineMLC::RT_MS_MachineMLC(const RT_MS_MachineMLC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineMLC::SharedCtor() {
  _cached_size_ = 0;
  sourcetomlctopdistance_ = 0;
  minleafjawoverlap_ = 0;
  mingap_ = 0;
  maxleafspeed_ = 0;
  mintipposition_ = 0;
  maxtipposition_ = 0;
  leafinterdigitation_ = false;
  maxleafoutofcarriagedistance_ = 0;
  mlcdirection_ = 0;
  pairs_ = 0;
  maxleafacc_mmpersec2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineMLC::~RT_MS_MachineMLC() {
  SharedDtor();
}

void RT_MS_MachineMLC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_MachineMLC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineMLC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineMLC_descriptor_;
}

const RT_MS_MachineMLC& RT_MS_MachineMLC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineMLC* RT_MS_MachineMLC::default_instance_ = NULL;

RT_MS_MachineMLC* RT_MS_MachineMLC::New() const {
  return new RT_MS_MachineMLC;
}

void RT_MS_MachineMLC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sourcetomlctopdistance_ = 0;
    minleafjawoverlap_ = 0;
    mingap_ = 0;
    maxleafspeed_ = 0;
    mintipposition_ = 0;
    maxtipposition_ = 0;
    leafinterdigitation_ = false;
    maxleafoutofcarriagedistance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mlcdirection_ = 0;
    pairs_ = 0;
    maxleafacc_mmpersec2_ = 0;
  }
  pairinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineMLC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sourceToMLCtopDistance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcetomlctopdistance_)));
          set_has_sourcetomlctopdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_minLeafJawOverlap;
        break;
      }
      
      // optional float minLeafJawOverlap = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minLeafJawOverlap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minleafjawoverlap_)));
          set_has_minleafjawoverlap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_minGap;
        break;
      }
      
      // optional float minGap = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minGap:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mingap_)));
          set_has_mingap();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_maxLeafSpeed;
        break;
      }
      
      // optional float maxLeafSpeed = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxLeafSpeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxleafspeed_)));
          set_has_maxleafspeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_minTipPosition;
        break;
      }
      
      // optional float minTipPosition = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minTipPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mintipposition_)));
          set_has_mintipposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_maxTipPosition;
        break;
      }
      
      // optional float maxTipPosition = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxTipPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxtipposition_)));
          set_has_maxtipposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_leafInterdigitation;
        break;
      }
      
      // optional bool leafInterdigitation = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leafInterdigitation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leafinterdigitation_)));
          set_has_leafinterdigitation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_maxLeafoutofCarriageDistance;
        break;
      }
      
      // optional float maxLeafoutofCarriageDistance = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxLeafoutofCarriageDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxleafoutofcarriagedistance_)));
          set_has_maxleafoutofcarriagedistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mlcDirection;
        break;
      }
      
      // optional int32 mlcDirection = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mlcDirection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mlcdirection_)));
          set_has_mlcdirection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_pairs;
        break;
      }
      
      // optional int32 pairs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pairs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pairs_)));
          set_has_pairs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pairInfoList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_PairInfo pairInfoList = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pairInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pairinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_pairInfoList;
        if (input->ExpectTag(96)) goto parse_maxLeafAcc_mmPerSec2;
        break;
      }
      
      // optional int32 maxLeafAcc_mmPerSec2 = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxLeafAcc_mmPerSec2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxleafacc_mmpersec2_)));
          set_has_maxleafacc_mmpersec2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineMLC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float sourceToMLCtopDistance = 1;
  if (has_sourcetomlctopdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sourcetomlctopdistance(), output);
  }
  
  // optional float minLeafJawOverlap = 2;
  if (has_minleafjawoverlap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->minleafjawoverlap(), output);
  }
  
  // optional float minGap = 3;
  if (has_mingap()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mingap(), output);
  }
  
  // optional float maxLeafSpeed = 4;
  if (has_maxleafspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxleafspeed(), output);
  }
  
  // optional float minTipPosition = 5;
  if (has_mintipposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->mintipposition(), output);
  }
  
  // optional float maxTipPosition = 6;
  if (has_maxtipposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->maxtipposition(), output);
  }
  
  // optional bool leafInterdigitation = 7;
  if (has_leafinterdigitation()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->leafinterdigitation(), output);
  }
  
  // optional float maxLeafoutofCarriageDistance = 8;
  if (has_maxleafoutofcarriagedistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->maxleafoutofcarriagedistance(), output);
  }
  
  // optional int32 mlcDirection = 9;
  if (has_mlcdirection()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mlcdirection(), output);
  }
  
  // optional int32 pairs = 10;
  if (has_pairs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pairs(), output);
  }
  
  // repeated .ms.proto.RT_MS_PairInfo pairInfoList = 11;
  for (int i = 0; i < this->pairinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->pairinfolist(i), output);
  }
  
  // optional int32 maxLeafAcc_mmPerSec2 = 12;
  if (has_maxleafacc_mmpersec2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxleafacc_mmpersec2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineMLC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float sourceToMLCtopDistance = 1;
  if (has_sourcetomlctopdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->sourcetomlctopdistance(), target);
  }
  
  // optional float minLeafJawOverlap = 2;
  if (has_minleafjawoverlap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->minleafjawoverlap(), target);
  }
  
  // optional float minGap = 3;
  if (has_mingap()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mingap(), target);
  }
  
  // optional float maxLeafSpeed = 4;
  if (has_maxleafspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxleafspeed(), target);
  }
  
  // optional float minTipPosition = 5;
  if (has_mintipposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->mintipposition(), target);
  }
  
  // optional float maxTipPosition = 6;
  if (has_maxtipposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->maxtipposition(), target);
  }
  
  // optional bool leafInterdigitation = 7;
  if (has_leafinterdigitation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->leafinterdigitation(), target);
  }
  
  // optional float maxLeafoutofCarriageDistance = 8;
  if (has_maxleafoutofcarriagedistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->maxleafoutofcarriagedistance(), target);
  }
  
  // optional int32 mlcDirection = 9;
  if (has_mlcdirection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mlcdirection(), target);
  }
  
  // optional int32 pairs = 10;
  if (has_pairs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pairs(), target);
  }
  
  // repeated .ms.proto.RT_MS_PairInfo pairInfoList = 11;
  for (int i = 0; i < this->pairinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->pairinfolist(i), target);
  }
  
  // optional int32 maxLeafAcc_mmPerSec2 = 12;
  if (has_maxleafacc_mmpersec2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxleafacc_mmpersec2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineMLC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float sourceToMLCtopDistance = 1;
    if (has_sourcetomlctopdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float minLeafJawOverlap = 2;
    if (has_minleafjawoverlap()) {
      total_size += 1 + 4;
    }
    
    // optional float minGap = 3;
    if (has_mingap()) {
      total_size += 1 + 4;
    }
    
    // optional float maxLeafSpeed = 4;
    if (has_maxleafspeed()) {
      total_size += 1 + 4;
    }
    
    // optional float minTipPosition = 5;
    if (has_mintipposition()) {
      total_size += 1 + 4;
    }
    
    // optional float maxTipPosition = 6;
    if (has_maxtipposition()) {
      total_size += 1 + 4;
    }
    
    // optional bool leafInterdigitation = 7;
    if (has_leafinterdigitation()) {
      total_size += 1 + 1;
    }
    
    // optional float maxLeafoutofCarriageDistance = 8;
    if (has_maxleafoutofcarriagedistance()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mlcDirection = 9;
    if (has_mlcdirection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mlcdirection());
    }
    
    // optional int32 pairs = 10;
    if (has_pairs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pairs());
    }
    
    // optional int32 maxLeafAcc_mmPerSec2 = 12;
    if (has_maxleafacc_mmpersec2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxleafacc_mmpersec2());
    }
    
  }
  // repeated .ms.proto.RT_MS_PairInfo pairInfoList = 11;
  total_size += 1 * this->pairinfolist_size();
  for (int i = 0; i < this->pairinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pairinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineMLC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineMLC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineMLC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineMLC::MergeFrom(const RT_MS_MachineMLC& from) {
  GOOGLE_CHECK_NE(&from, this);
  pairinfolist_.MergeFrom(from.pairinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sourcetomlctopdistance()) {
      set_sourcetomlctopdistance(from.sourcetomlctopdistance());
    }
    if (from.has_minleafjawoverlap()) {
      set_minleafjawoverlap(from.minleafjawoverlap());
    }
    if (from.has_mingap()) {
      set_mingap(from.mingap());
    }
    if (from.has_maxleafspeed()) {
      set_maxleafspeed(from.maxleafspeed());
    }
    if (from.has_mintipposition()) {
      set_mintipposition(from.mintipposition());
    }
    if (from.has_maxtipposition()) {
      set_maxtipposition(from.maxtipposition());
    }
    if (from.has_leafinterdigitation()) {
      set_leafinterdigitation(from.leafinterdigitation());
    }
    if (from.has_maxleafoutofcarriagedistance()) {
      set_maxleafoutofcarriagedistance(from.maxleafoutofcarriagedistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mlcdirection()) {
      set_mlcdirection(from.mlcdirection());
    }
    if (from.has_pairs()) {
      set_pairs(from.pairs());
    }
    if (from.has_maxleafacc_mmpersec2()) {
      set_maxleafacc_mmpersec2(from.maxleafacc_mmpersec2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineMLC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineMLC::CopyFrom(const RT_MS_MachineMLC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineMLC::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineMLC::Swap(RT_MS_MachineMLC* other) {
  if (other != this) {
    std::swap(sourcetomlctopdistance_, other->sourcetomlctopdistance_);
    std::swap(minleafjawoverlap_, other->minleafjawoverlap_);
    std::swap(mingap_, other->mingap_);
    std::swap(maxleafspeed_, other->maxleafspeed_);
    std::swap(mintipposition_, other->mintipposition_);
    std::swap(maxtipposition_, other->maxtipposition_);
    std::swap(leafinterdigitation_, other->leafinterdigitation_);
    std::swap(maxleafoutofcarriagedistance_, other->maxleafoutofcarriagedistance_);
    std::swap(mlcdirection_, other->mlcdirection_);
    std::swap(pairs_, other->pairs_);
    pairinfolist_.Swap(&other->pairinfolist_);
    std::swap(maxleafacc_mmpersec2_, other->maxleafacc_mmpersec2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineMLC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineMLC_descriptor_;
  metadata.reflection = RT_MS_MachineMLC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_CommissionInfo::kRadiationTypeFieldNumber;
const int RT_MS_CommissionInfo::kEnergyFieldNumber;
const int RT_MS_CommissionInfo::kFlatteningFilterTypeFieldNumber;
const int RT_MS_CommissionInfo::kIsConvolutionFieldNumber;
const int RT_MS_CommissionInfo::kIsPencilBeamFieldNumber;
const int RT_MS_CommissionInfo::kIsMonteCarloFieldNumber;
const int RT_MS_CommissionInfo::kIsDoseRateVarSupportFieldNumber;
const int RT_MS_CommissionInfo::kIsPlan2DFieldNumber;
const int RT_MS_CommissionInfo::kIsPlan3DFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanStepShootFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanSlidingWindowFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanSimpleArcFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanConformalArcFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanVMATArcFieldNumber;
const int RT_MS_CommissionInfo::kIsPlanBurstArcFieldNumber;
const int RT_MS_CommissionInfo::kElectornTypeFieldNumber;
const int RT_MS_CommissionInfo::kDoseRateListInfoFieldNumber;
const int RT_MS_CommissionInfo::kIsCheckedHalfProfileFieldNumber;
const int RT_MS_CommissionInfo::kCommissionUIDFieldNumber;
const int RT_MS_CommissionInfo::kCommissionNameFieldNumber;
const int RT_MS_CommissionInfo::kIsApproveFieldNumber;
const int RT_MS_CommissionInfo::kCalibrationFieldSizeXFieldNumber;
const int RT_MS_CommissionInfo::kCalibrationFieldSizeYFieldNumber;
const int RT_MS_CommissionInfo::kCalibrationDmaxFieldNumber;
const int RT_MS_CommissionInfo::kSSDFieldNumber;
const int RT_MS_CommissionInfo::kLateralFieldNumber;
const int RT_MS_CommissionInfo::kDepthFieldNumber;
const int RT_MS_CommissionInfo::kDateFieldNumber;
const int RT_MS_CommissionInfo::kTimeFieldNumber;
const int RT_MS_CommissionInfo::kWhoFieldNumber;
const int RT_MS_CommissionInfo::kUidFieldNumber;
const int RT_MS_CommissionInfo::kParentUIDFieldNumber;
const int RT_MS_CommissionInfo::kPenumbraFieldNumber;
const int RT_MS_CommissionInfo::kBlockattenuationfactorFieldNumber;
const int RT_MS_CommissionInfo::kTrayFactorListFieldNumber;
const int RT_MS_CommissionInfo::kPhoCommissionUIDFieldNumber;
const int RT_MS_CommissionInfo::kNorDepthFieldNumber;
const int RT_MS_CommissionInfo::kMlcFactorFieldNumber;
const int RT_MS_CommissionInfo::kXJawFactorFieldNumber;
const int RT_MS_CommissionInfo::kYJawFactorFieldNumber;
const int RT_MS_CommissionInfo::kPhotonMonteCarloInfoFieldNumber;
const int RT_MS_CommissionInfo::kMindoserateMuperminFieldNumber;
#endif  // !_MSC_VER

RT_MS_CommissionInfo::RT_MS_CommissionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_CommissionInfo::InitAsDefaultInstance() {
  photonmontecarloinfo_ = const_cast< ::ms::proto::RT_MS_PhotonMonteCarloInformation*>(&::ms::proto::RT_MS_PhotonMonteCarloInformation::default_instance());
}

RT_MS_CommissionInfo::RT_MS_CommissionInfo(const RT_MS_CommissionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_CommissionInfo::SharedCtor() {
  _cached_size_ = 0;
  radiationtype_ = 0;
  energy_ = 0;
  flatteningfiltertype_ = 0;
  isconvolution_ = false;
  ispencilbeam_ = false;
  ismontecarlo_ = false;
  isdoseratevarsupport_ = false;
  isplan2d_ = false;
  isplan3d_ = false;
  isplanstepshoot_ = false;
  isplanslidingwindow_ = false;
  isplansimplearc_ = false;
  isplanconformalarc_ = false;
  isplanvmatarc_ = false;
  isplanburstarc_ = false;
  electorntype_ = false;
  ischeckedhalfprofile_ = false;
  commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commissionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isapprove_ = false;
  calibrationfieldsizex_ = 0;
  calibrationfieldsizey_ = 0;
  calibrationdmax_ = 0;
  ssd_ = 0;
  lateral_ = 0;
  depth_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  who_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  penumbra_ = 0;
  blockattenuationfactor_ = 0;
  phocommissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nordepth_ = 0;
  mlcfactor_ = 0;
  xjawfactor_ = 0;
  yjawfactor_ = 0;
  photonmontecarloinfo_ = NULL;
  mindoserate_mupermin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_CommissionInfo::~RT_MS_CommissionInfo() {
  SharedDtor();
}

void RT_MS_CommissionInfo::SharedDtor() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionuid_;
  }
  if (commissionname_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionname_;
  }
  if (date_ != &::google::protobuf::internal::kEmptyString) {
    delete date_;
  }
  if (time_ != &::google::protobuf::internal::kEmptyString) {
    delete time_;
  }
  if (who_ != &::google::protobuf::internal::kEmptyString) {
    delete who_;
  }
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (phocommissionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete phocommissionuid_;
  }
  if (this != default_instance_) {
    delete photonmontecarloinfo_;
  }
}

void RT_MS_CommissionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_CommissionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_CommissionInfo_descriptor_;
}

const RT_MS_CommissionInfo& RT_MS_CommissionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_CommissionInfo* RT_MS_CommissionInfo::default_instance_ = NULL;

RT_MS_CommissionInfo* RT_MS_CommissionInfo::New() const {
  return new RT_MS_CommissionInfo;
}

void RT_MS_CommissionInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    radiationtype_ = 0;
    energy_ = 0;
    flatteningfiltertype_ = 0;
    isconvolution_ = false;
    ispencilbeam_ = false;
    ismontecarlo_ = false;
    isdoseratevarsupport_ = false;
    isplan2d_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isplan3d_ = false;
    isplanstepshoot_ = false;
    isplanslidingwindow_ = false;
    isplansimplearc_ = false;
    isplanconformalarc_ = false;
    isplanvmatarc_ = false;
    isplanburstarc_ = false;
    electorntype_ = false;
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    ischeckedhalfprofile_ = false;
    if (has_commissionuid()) {
      if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
        commissionuid_->clear();
      }
    }
    if (has_commissionname()) {
      if (commissionname_ != &::google::protobuf::internal::kEmptyString) {
        commissionname_->clear();
      }
    }
    isapprove_ = false;
    calibrationfieldsizex_ = 0;
    calibrationfieldsizey_ = 0;
    calibrationdmax_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ssd_ = 0;
    lateral_ = 0;
    depth_ = 0;
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::kEmptyString) {
        date_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::kEmptyString) {
        time_->clear();
      }
    }
    if (has_who()) {
      if (who_ != &::google::protobuf::internal::kEmptyString) {
        who_->clear();
      }
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    penumbra_ = 0;
    blockattenuationfactor_ = 0;
    if (has_phocommissionuid()) {
      if (phocommissionuid_ != &::google::protobuf::internal::kEmptyString) {
        phocommissionuid_->clear();
      }
    }
    nordepth_ = 0;
    mlcfactor_ = 0;
    xjawfactor_ = 0;
    yjawfactor_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_photonmontecarloinfo()) {
      if (photonmontecarloinfo_ != NULL) photonmontecarloinfo_->::ms::proto::RT_MS_PhotonMonteCarloInformation::Clear();
    }
    mindoserate_mupermin_ = 0;
  }
  doseratelistinfo_.Clear();
  trayfactorlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_CommissionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 radiationType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiationtype_)));
          set_has_radiationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_energy;
        break;
      }
      
      // optional float energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flatteningFilterType;
        break;
      }
      
      // optional int32 flatteningFilterType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flatteningFilterType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flatteningfiltertype_)));
          set_has_flatteningfiltertype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isConvolution;
        break;
      }
      
      // optional bool isConvolution = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isConvolution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isconvolution_)));
          set_has_isconvolution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isPencilBeam;
        break;
      }
      
      // optional bool isPencilBeam = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPencilBeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispencilbeam_)));
          set_has_ispencilbeam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isMonteCarlo;
        break;
      }
      
      // optional bool isMonteCarlo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isMonteCarlo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ismontecarlo_)));
          set_has_ismontecarlo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isDoseRateVarSupport;
        break;
      }
      
      // optional bool isDoseRateVarSupport = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDoseRateVarSupport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdoseratevarsupport_)));
          set_has_isdoseratevarsupport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isPlan2D;
        break;
      }
      
      // optional bool isPlan2D = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlan2D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplan2d_)));
          set_has_isplan2d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isPlan3D;
        break;
      }
      
      // optional bool isPlan3D = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlan3D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplan3d_)));
          set_has_isplan3d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isPlanStepShoot;
        break;
      }
      
      // optional bool isPlanStepShoot = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanStepShoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplanstepshoot_)));
          set_has_isplanstepshoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isPlanSlidingWindow;
        break;
      }
      
      // optional bool isPlanSlidingWindow = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanSlidingWindow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplanslidingwindow_)));
          set_has_isplanslidingwindow();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isPlanSimpleArc;
        break;
      }
      
      // optional bool isPlanSimpleArc = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanSimpleArc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplansimplearc_)));
          set_has_isplansimplearc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isPlanConformalArc;
        break;
      }
      
      // optional bool isPlanConformalArc = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanConformalArc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplanconformalarc_)));
          set_has_isplanconformalarc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isPlanVMATArc;
        break;
      }
      
      // optional bool isPlanVMATArc = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanVMATArc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplanvmatarc_)));
          set_has_isplanvmatarc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_isPlanBurstArc;
        break;
      }
      
      // optional bool isPlanBurstArc = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPlanBurstArc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isplanburstarc_)));
          set_has_isplanburstarc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_electornType;
        break;
      }
      
      // optional bool electornType = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electornType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &electorntype_)));
          set_has_electorntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_doseRateListInfo;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MachineBeamModeDoseRate doseRateListInfo = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_doseRateListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_doseratelistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_doseRateListInfo;
        if (input->ExpectTag(144)) goto parse_isCheckedHalfProfile;
        break;
      }
      
      // optional bool isCheckedHalfProfile = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCheckedHalfProfile:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischeckedhalfprofile_)));
          set_has_ischeckedhalfprofile();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_commissionUID;
        break;
      }
      
      // optional string commissionUID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionuid().data(), this->commissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_commissionName;
        break;
      }
      
      // optional string commissionName = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionname().data(), this->commissionname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_isApprove;
        break;
      }
      
      // optional bool isApprove = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApprove:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapprove_)));
          set_has_isapprove();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_calibrationFieldSizeX;
        break;
      }
      
      // optional float calibrationFieldSizeX = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_calibrationFieldSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calibrationfieldsizex_)));
          set_has_calibrationfieldsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_calibrationFieldSizeY;
        break;
      }
      
      // optional float calibrationFieldSizeY = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_calibrationFieldSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calibrationfieldsizey_)));
          set_has_calibrationfieldsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_calibrationDmax;
        break;
      }
      
      // optional float calibrationDmax = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_calibrationDmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &calibrationdmax_)));
          set_has_calibrationdmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_sSD;
        break;
      }
      
      // optional float sSD = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sSD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ssd_)));
          set_has_ssd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_lateral;
        break;
      }
      
      // optional float lateral = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_lateral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_)));
          set_has_lateral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_depth;
        break;
      }
      
      // optional float depth = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_date;
        break;
      }
      
      // optional string date = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_time;
        break;
      }
      
      // optional string time = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_who;
        break;
      }
      
      // optional string who = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_who:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_who()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->who().data(), this->who().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_uid;
        break;
      }
      
      // optional string uid = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_ParentUID;
        break;
      }
      
      // optional string ParentUID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ParentUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(269)) goto parse_penumbra;
        break;
      }
      
      // optional float penumbra = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_penumbra:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &penumbra_)));
          set_has_penumbra();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(277)) goto parse_blockattenuationfactor;
        break;
      }
      
      // optional float blockattenuationfactor = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_blockattenuationfactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blockattenuationfactor_)));
          set_has_blockattenuationfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_trayFactorList;
        break;
      }
      
      // repeated float trayFactorList = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_trayFactorList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 2, 285, input, this->mutable_trayfactorlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_trayfactorlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(285)) goto parse_trayFactorList;
        if (input->ExpectTag(290)) goto parse_phoCommissionUID;
        break;
      }
      
      // optional string phoCommissionUID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_phoCommissionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phocommissionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phocommissionuid().data(), this->phocommissionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(301)) goto parse_norDepth;
        break;
      }
      
      // optional float norDepth = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_norDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &nordepth_)));
          set_has_nordepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(309)) goto parse_mlcFactor;
        break;
      }
      
      // optional float mlcFactor = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mlcFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mlcfactor_)));
          set_has_mlcfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(317)) goto parse_xJawFactor;
        break;
      }
      
      // optional float xJawFactor = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xJawFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xjawfactor_)));
          set_has_xjawfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(325)) goto parse_yJawFactor;
        break;
      }
      
      // optional float yJawFactor = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yJawFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yjawfactor_)));
          set_has_yjawfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_PhotonMonteCarloInfo;
        break;
      }
      
      // optional .ms.proto.RT_MS_PhotonMonteCarloInformation PhotonMonteCarloInfo = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PhotonMonteCarloInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_photonmontecarloinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_mindoserate_mupermin;
        break;
      }
      
      // optional int32 mindoserate_mupermin = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mindoserate_mupermin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mindoserate_mupermin_)));
          set_has_mindoserate_mupermin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_CommissionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 radiationType = 1;
  if (has_radiationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->radiationtype(), output);
  }
  
  // optional float energy = 2;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->energy(), output);
  }
  
  // optional int32 flatteningFilterType = 3;
  if (has_flatteningfiltertype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flatteningfiltertype(), output);
  }
  
  // optional bool isConvolution = 4;
  if (has_isconvolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isconvolution(), output);
  }
  
  // optional bool isPencilBeam = 5;
  if (has_ispencilbeam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ispencilbeam(), output);
  }
  
  // optional bool isMonteCarlo = 6;
  if (has_ismontecarlo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ismontecarlo(), output);
  }
  
  // optional bool isDoseRateVarSupport = 7;
  if (has_isdoseratevarsupport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isdoseratevarsupport(), output);
  }
  
  // optional bool isPlan2D = 8;
  if (has_isplan2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isplan2d(), output);
  }
  
  // optional bool isPlan3D = 9;
  if (has_isplan3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isplan3d(), output);
  }
  
  // optional bool isPlanStepShoot = 10;
  if (has_isplanstepshoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isplanstepshoot(), output);
  }
  
  // optional bool isPlanSlidingWindow = 11;
  if (has_isplanslidingwindow()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->isplanslidingwindow(), output);
  }
  
  // optional bool isPlanSimpleArc = 12;
  if (has_isplansimplearc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isplansimplearc(), output);
  }
  
  // optional bool isPlanConformalArc = 13;
  if (has_isplanconformalarc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isplanconformalarc(), output);
  }
  
  // optional bool isPlanVMATArc = 14;
  if (has_isplanvmatarc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isplanvmatarc(), output);
  }
  
  // optional bool isPlanBurstArc = 15;
  if (has_isplanburstarc()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->isplanburstarc(), output);
  }
  
  // optional bool electornType = 16;
  if (has_electorntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->electorntype(), output);
  }
  
  // repeated .ms.proto.RT_MS_MachineBeamModeDoseRate doseRateListInfo = 17;
  for (int i = 0; i < this->doseratelistinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->doseratelistinfo(i), output);
  }
  
  // optional bool isCheckedHalfProfile = 18;
  if (has_ischeckedhalfprofile()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ischeckedhalfprofile(), output);
  }
  
  // optional string commissionUID = 19;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->commissionuid(), output);
  }
  
  // optional string commissionName = 20;
  if (has_commissionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionname().data(), this->commissionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->commissionname(), output);
  }
  
  // optional bool isApprove = 21;
  if (has_isapprove()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->isapprove(), output);
  }
  
  // optional float calibrationFieldSizeX = 22;
  if (has_calibrationfieldsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->calibrationfieldsizex(), output);
  }
  
  // optional float calibrationFieldSizeY = 23;
  if (has_calibrationfieldsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->calibrationfieldsizey(), output);
  }
  
  // optional float calibrationDmax = 24;
  if (has_calibrationdmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->calibrationdmax(), output);
  }
  
  // optional float sSD = 25;
  if (has_ssd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->ssd(), output);
  }
  
  // optional float lateral = 26;
  if (has_lateral()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->lateral(), output);
  }
  
  // optional float depth = 27;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->depth(), output);
  }
  
  // optional string date = 28;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->date(), output);
  }
  
  // optional string time = 29;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      29, this->time(), output);
  }
  
  // optional string who = 30;
  if (has_who()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->who().data(), this->who().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      30, this->who(), output);
  }
  
  // optional string uid = 31;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->uid(), output);
  }
  
  // optional string ParentUID = 32;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->parentuid(), output);
  }
  
  // optional float penumbra = 33;
  if (has_penumbra()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->penumbra(), output);
  }
  
  // optional float blockattenuationfactor = 34;
  if (has_blockattenuationfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(34, this->blockattenuationfactor(), output);
  }
  
  // repeated float trayFactorList = 35;
  for (int i = 0; i < this->trayfactorlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      35, this->trayfactorlist(i), output);
  }
  
  // optional string phoCommissionUID = 36;
  if (has_phocommissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phocommissionuid().data(), this->phocommissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->phocommissionuid(), output);
  }
  
  // optional float norDepth = 37;
  if (has_nordepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->nordepth(), output);
  }
  
  // optional float mlcFactor = 38;
  if (has_mlcfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->mlcfactor(), output);
  }
  
  // optional float xJawFactor = 39;
  if (has_xjawfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->xjawfactor(), output);
  }
  
  // optional float yJawFactor = 40;
  if (has_yjawfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->yjawfactor(), output);
  }
  
  // optional .ms.proto.RT_MS_PhotonMonteCarloInformation PhotonMonteCarloInfo = 41;
  if (has_photonmontecarloinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->photonmontecarloinfo(), output);
  }
  
  // optional int32 mindoserate_mupermin = 42;
  if (has_mindoserate_mupermin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->mindoserate_mupermin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_CommissionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 radiationType = 1;
  if (has_radiationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->radiationtype(), target);
  }
  
  // optional float energy = 2;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->energy(), target);
  }
  
  // optional int32 flatteningFilterType = 3;
  if (has_flatteningfiltertype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flatteningfiltertype(), target);
  }
  
  // optional bool isConvolution = 4;
  if (has_isconvolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isconvolution(), target);
  }
  
  // optional bool isPencilBeam = 5;
  if (has_ispencilbeam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ispencilbeam(), target);
  }
  
  // optional bool isMonteCarlo = 6;
  if (has_ismontecarlo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ismontecarlo(), target);
  }
  
  // optional bool isDoseRateVarSupport = 7;
  if (has_isdoseratevarsupport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->isdoseratevarsupport(), target);
  }
  
  // optional bool isPlan2D = 8;
  if (has_isplan2d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isplan2d(), target);
  }
  
  // optional bool isPlan3D = 9;
  if (has_isplan3d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isplan3d(), target);
  }
  
  // optional bool isPlanStepShoot = 10;
  if (has_isplanstepshoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isplanstepshoot(), target);
  }
  
  // optional bool isPlanSlidingWindow = 11;
  if (has_isplanslidingwindow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->isplanslidingwindow(), target);
  }
  
  // optional bool isPlanSimpleArc = 12;
  if (has_isplansimplearc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isplansimplearc(), target);
  }
  
  // optional bool isPlanConformalArc = 13;
  if (has_isplanconformalarc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isplanconformalarc(), target);
  }
  
  // optional bool isPlanVMATArc = 14;
  if (has_isplanvmatarc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isplanvmatarc(), target);
  }
  
  // optional bool isPlanBurstArc = 15;
  if (has_isplanburstarc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->isplanburstarc(), target);
  }
  
  // optional bool electornType = 16;
  if (has_electorntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->electorntype(), target);
  }
  
  // repeated .ms.proto.RT_MS_MachineBeamModeDoseRate doseRateListInfo = 17;
  for (int i = 0; i < this->doseratelistinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->doseratelistinfo(i), target);
  }
  
  // optional bool isCheckedHalfProfile = 18;
  if (has_ischeckedhalfprofile()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ischeckedhalfprofile(), target);
  }
  
  // optional string commissionUID = 19;
  if (has_commissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionuid().data(), this->commissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->commissionuid(), target);
  }
  
  // optional string commissionName = 20;
  if (has_commissionname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionname().data(), this->commissionname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->commissionname(), target);
  }
  
  // optional bool isApprove = 21;
  if (has_isapprove()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->isapprove(), target);
  }
  
  // optional float calibrationFieldSizeX = 22;
  if (has_calibrationfieldsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->calibrationfieldsizex(), target);
  }
  
  // optional float calibrationFieldSizeY = 23;
  if (has_calibrationfieldsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->calibrationfieldsizey(), target);
  }
  
  // optional float calibrationDmax = 24;
  if (has_calibrationdmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->calibrationdmax(), target);
  }
  
  // optional float sSD = 25;
  if (has_ssd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->ssd(), target);
  }
  
  // optional float lateral = 26;
  if (has_lateral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->lateral(), target);
  }
  
  // optional float depth = 27;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->depth(), target);
  }
  
  // optional string date = 28;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->date(), target);
  }
  
  // optional string time = 29;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        29, this->time(), target);
  }
  
  // optional string who = 30;
  if (has_who()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->who().data(), this->who().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->who(), target);
  }
  
  // optional string uid = 31;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->uid(), target);
  }
  
  // optional string ParentUID = 32;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->parentuid(), target);
  }
  
  // optional float penumbra = 33;
  if (has_penumbra()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(33, this->penumbra(), target);
  }
  
  // optional float blockattenuationfactor = 34;
  if (has_blockattenuationfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(34, this->blockattenuationfactor(), target);
  }
  
  // repeated float trayFactorList = 35;
  for (int i = 0; i < this->trayfactorlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(35, this->trayfactorlist(i), target);
  }
  
  // optional string phoCommissionUID = 36;
  if (has_phocommissionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phocommissionuid().data(), this->phocommissionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->phocommissionuid(), target);
  }
  
  // optional float norDepth = 37;
  if (has_nordepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(37, this->nordepth(), target);
  }
  
  // optional float mlcFactor = 38;
  if (has_mlcfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(38, this->mlcfactor(), target);
  }
  
  // optional float xJawFactor = 39;
  if (has_xjawfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(39, this->xjawfactor(), target);
  }
  
  // optional float yJawFactor = 40;
  if (has_yjawfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(40, this->yjawfactor(), target);
  }
  
  // optional .ms.proto.RT_MS_PhotonMonteCarloInformation PhotonMonteCarloInfo = 41;
  if (has_photonmontecarloinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->photonmontecarloinfo(), target);
  }
  
  // optional int32 mindoserate_mupermin = 42;
  if (has_mindoserate_mupermin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->mindoserate_mupermin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_CommissionInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 radiationType = 1;
    if (has_radiationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiationtype());
    }
    
    // optional float energy = 2;
    if (has_energy()) {
      total_size += 1 + 4;
    }
    
    // optional int32 flatteningFilterType = 3;
    if (has_flatteningfiltertype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flatteningfiltertype());
    }
    
    // optional bool isConvolution = 4;
    if (has_isconvolution()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPencilBeam = 5;
    if (has_ispencilbeam()) {
      total_size += 1 + 1;
    }
    
    // optional bool isMonteCarlo = 6;
    if (has_ismontecarlo()) {
      total_size += 1 + 1;
    }
    
    // optional bool isDoseRateVarSupport = 7;
    if (has_isdoseratevarsupport()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlan2D = 8;
    if (has_isplan2d()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isPlan3D = 9;
    if (has_isplan3d()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanStepShoot = 10;
    if (has_isplanstepshoot()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanSlidingWindow = 11;
    if (has_isplanslidingwindow()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanSimpleArc = 12;
    if (has_isplansimplearc()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanConformalArc = 13;
    if (has_isplanconformalarc()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanVMATArc = 14;
    if (has_isplanvmatarc()) {
      total_size += 1 + 1;
    }
    
    // optional bool isPlanBurstArc = 15;
    if (has_isplanburstarc()) {
      total_size += 1 + 1;
    }
    
    // optional bool electornType = 16;
    if (has_electorntype()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    // optional bool isCheckedHalfProfile = 18;
    if (has_ischeckedhalfprofile()) {
      total_size += 2 + 1;
    }
    
    // optional string commissionUID = 19;
    if (has_commissionuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionuid());
    }
    
    // optional string commissionName = 20;
    if (has_commissionname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionname());
    }
    
    // optional bool isApprove = 21;
    if (has_isapprove()) {
      total_size += 2 + 1;
    }
    
    // optional float calibrationFieldSizeX = 22;
    if (has_calibrationfieldsizex()) {
      total_size += 2 + 4;
    }
    
    // optional float calibrationFieldSizeY = 23;
    if (has_calibrationfieldsizey()) {
      total_size += 2 + 4;
    }
    
    // optional float calibrationDmax = 24;
    if (has_calibrationdmax()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float sSD = 25;
    if (has_ssd()) {
      total_size += 2 + 4;
    }
    
    // optional float lateral = 26;
    if (has_lateral()) {
      total_size += 2 + 4;
    }
    
    // optional float depth = 27;
    if (has_depth()) {
      total_size += 2 + 4;
    }
    
    // optional string date = 28;
    if (has_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }
    
    // optional string time = 29;
    if (has_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }
    
    // optional string who = 30;
    if (has_who()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->who());
    }
    
    // optional string uid = 31;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string ParentUID = 32;
    if (has_parentuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional float penumbra = 33;
    if (has_penumbra()) {
      total_size += 2 + 4;
    }
    
    // optional float blockattenuationfactor = 34;
    if (has_blockattenuationfactor()) {
      total_size += 2 + 4;
    }
    
    // optional string phoCommissionUID = 36;
    if (has_phocommissionuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phocommissionuid());
    }
    
    // optional float norDepth = 37;
    if (has_nordepth()) {
      total_size += 2 + 4;
    }
    
    // optional float mlcFactor = 38;
    if (has_mlcfactor()) {
      total_size += 2 + 4;
    }
    
    // optional float xJawFactor = 39;
    if (has_xjawfactor()) {
      total_size += 2 + 4;
    }
    
    // optional float yJawFactor = 40;
    if (has_yjawfactor()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .ms.proto.RT_MS_PhotonMonteCarloInformation PhotonMonteCarloInfo = 41;
    if (has_photonmontecarloinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->photonmontecarloinfo());
    }
    
    // optional int32 mindoserate_mupermin = 42;
    if (has_mindoserate_mupermin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mindoserate_mupermin());
    }
    
  }
  // repeated .ms.proto.RT_MS_MachineBeamModeDoseRate doseRateListInfo = 17;
  total_size += 2 * this->doseratelistinfo_size();
  for (int i = 0; i < this->doseratelistinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->doseratelistinfo(i));
  }
  
  // repeated float trayFactorList = 35;
  {
    int data_size = 0;
    data_size = 4 * this->trayfactorlist_size();
    total_size += 2 * this->trayfactorlist_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_CommissionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_CommissionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_CommissionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_CommissionInfo::MergeFrom(const RT_MS_CommissionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  doseratelistinfo_.MergeFrom(from.doseratelistinfo_);
  trayfactorlist_.MergeFrom(from.trayfactorlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radiationtype()) {
      set_radiationtype(from.radiationtype());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_flatteningfiltertype()) {
      set_flatteningfiltertype(from.flatteningfiltertype());
    }
    if (from.has_isconvolution()) {
      set_isconvolution(from.isconvolution());
    }
    if (from.has_ispencilbeam()) {
      set_ispencilbeam(from.ispencilbeam());
    }
    if (from.has_ismontecarlo()) {
      set_ismontecarlo(from.ismontecarlo());
    }
    if (from.has_isdoseratevarsupport()) {
      set_isdoseratevarsupport(from.isdoseratevarsupport());
    }
    if (from.has_isplan2d()) {
      set_isplan2d(from.isplan2d());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isplan3d()) {
      set_isplan3d(from.isplan3d());
    }
    if (from.has_isplanstepshoot()) {
      set_isplanstepshoot(from.isplanstepshoot());
    }
    if (from.has_isplanslidingwindow()) {
      set_isplanslidingwindow(from.isplanslidingwindow());
    }
    if (from.has_isplansimplearc()) {
      set_isplansimplearc(from.isplansimplearc());
    }
    if (from.has_isplanconformalarc()) {
      set_isplanconformalarc(from.isplanconformalarc());
    }
    if (from.has_isplanvmatarc()) {
      set_isplanvmatarc(from.isplanvmatarc());
    }
    if (from.has_isplanburstarc()) {
      set_isplanburstarc(from.isplanburstarc());
    }
    if (from.has_electorntype()) {
      set_electorntype(from.electorntype());
    }
  }
  if (from._has_bits_[17 / 32] & (0xffu << (17 % 32))) {
    if (from.has_ischeckedhalfprofile()) {
      set_ischeckedhalfprofile(from.ischeckedhalfprofile());
    }
    if (from.has_commissionuid()) {
      set_commissionuid(from.commissionuid());
    }
    if (from.has_commissionname()) {
      set_commissionname(from.commissionname());
    }
    if (from.has_isapprove()) {
      set_isapprove(from.isapprove());
    }
    if (from.has_calibrationfieldsizex()) {
      set_calibrationfieldsizex(from.calibrationfieldsizex());
    }
    if (from.has_calibrationfieldsizey()) {
      set_calibrationfieldsizey(from.calibrationfieldsizey());
    }
    if (from.has_calibrationdmax()) {
      set_calibrationdmax(from.calibrationdmax());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ssd()) {
      set_ssd(from.ssd());
    }
    if (from.has_lateral()) {
      set_lateral(from.lateral());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_who()) {
      set_who(from.who());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_penumbra()) {
      set_penumbra(from.penumbra());
    }
    if (from.has_blockattenuationfactor()) {
      set_blockattenuationfactor(from.blockattenuationfactor());
    }
    if (from.has_phocommissionuid()) {
      set_phocommissionuid(from.phocommissionuid());
    }
    if (from.has_nordepth()) {
      set_nordepth(from.nordepth());
    }
    if (from.has_mlcfactor()) {
      set_mlcfactor(from.mlcfactor());
    }
    if (from.has_xjawfactor()) {
      set_xjawfactor(from.xjawfactor());
    }
    if (from.has_yjawfactor()) {
      set_yjawfactor(from.yjawfactor());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_photonmontecarloinfo()) {
      mutable_photonmontecarloinfo()->::ms::proto::RT_MS_PhotonMonteCarloInformation::MergeFrom(from.photonmontecarloinfo());
    }
    if (from.has_mindoserate_mupermin()) {
      set_mindoserate_mupermin(from.mindoserate_mupermin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_CommissionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_CommissionInfo::CopyFrom(const RT_MS_CommissionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_CommissionInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_CommissionInfo::Swap(RT_MS_CommissionInfo* other) {
  if (other != this) {
    std::swap(radiationtype_, other->radiationtype_);
    std::swap(energy_, other->energy_);
    std::swap(flatteningfiltertype_, other->flatteningfiltertype_);
    std::swap(isconvolution_, other->isconvolution_);
    std::swap(ispencilbeam_, other->ispencilbeam_);
    std::swap(ismontecarlo_, other->ismontecarlo_);
    std::swap(isdoseratevarsupport_, other->isdoseratevarsupport_);
    std::swap(isplan2d_, other->isplan2d_);
    std::swap(isplan3d_, other->isplan3d_);
    std::swap(isplanstepshoot_, other->isplanstepshoot_);
    std::swap(isplanslidingwindow_, other->isplanslidingwindow_);
    std::swap(isplansimplearc_, other->isplansimplearc_);
    std::swap(isplanconformalarc_, other->isplanconformalarc_);
    std::swap(isplanvmatarc_, other->isplanvmatarc_);
    std::swap(isplanburstarc_, other->isplanburstarc_);
    std::swap(electorntype_, other->electorntype_);
    doseratelistinfo_.Swap(&other->doseratelistinfo_);
    std::swap(ischeckedhalfprofile_, other->ischeckedhalfprofile_);
    std::swap(commissionuid_, other->commissionuid_);
    std::swap(commissionname_, other->commissionname_);
    std::swap(isapprove_, other->isapprove_);
    std::swap(calibrationfieldsizex_, other->calibrationfieldsizex_);
    std::swap(calibrationfieldsizey_, other->calibrationfieldsizey_);
    std::swap(calibrationdmax_, other->calibrationdmax_);
    std::swap(ssd_, other->ssd_);
    std::swap(lateral_, other->lateral_);
    std::swap(depth_, other->depth_);
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(who_, other->who_);
    std::swap(uid_, other->uid_);
    std::swap(parentuid_, other->parentuid_);
    std::swap(penumbra_, other->penumbra_);
    std::swap(blockattenuationfactor_, other->blockattenuationfactor_);
    trayfactorlist_.Swap(&other->trayfactorlist_);
    std::swap(phocommissionuid_, other->phocommissionuid_);
    std::swap(nordepth_, other->nordepth_);
    std::swap(mlcfactor_, other->mlcfactor_);
    std::swap(xjawfactor_, other->xjawfactor_);
    std::swap(yjawfactor_, other->yjawfactor_);
    std::swap(photonmontecarloinfo_, other->photonmontecarloinfo_);
    std::swap(mindoserate_mupermin_, other->mindoserate_mupermin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_CommissionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_CommissionInfo_descriptor_;
  metadata.reflection = RT_MS_CommissionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineBeamModeDoseRate::kDoseRateUIDFieldNumber;
const int RT_MS_MachineBeamModeDoseRate::kDoseRateFieldNumber;
const int RT_MS_MachineBeamModeDoseRate::kIsDoseRateDefaultFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineBeamModeDoseRate::RT_MS_MachineBeamModeDoseRate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineBeamModeDoseRate::InitAsDefaultInstance() {
}

RT_MS_MachineBeamModeDoseRate::RT_MS_MachineBeamModeDoseRate(const RT_MS_MachineBeamModeDoseRate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineBeamModeDoseRate::SharedCtor() {
  _cached_size_ = 0;
  doserateuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doserate_ = 0;
  isdoseratedefault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineBeamModeDoseRate::~RT_MS_MachineBeamModeDoseRate() {
  SharedDtor();
}

void RT_MS_MachineBeamModeDoseRate::SharedDtor() {
  if (doserateuid_ != &::google::protobuf::internal::kEmptyString) {
    delete doserateuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineBeamModeDoseRate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineBeamModeDoseRate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineBeamModeDoseRate_descriptor_;
}

const RT_MS_MachineBeamModeDoseRate& RT_MS_MachineBeamModeDoseRate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineBeamModeDoseRate* RT_MS_MachineBeamModeDoseRate::default_instance_ = NULL;

RT_MS_MachineBeamModeDoseRate* RT_MS_MachineBeamModeDoseRate::New() const {
  return new RT_MS_MachineBeamModeDoseRate;
}

void RT_MS_MachineBeamModeDoseRate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_doserateuid()) {
      if (doserateuid_ != &::google::protobuf::internal::kEmptyString) {
        doserateuid_->clear();
      }
    }
    doserate_ = 0;
    isdoseratedefault_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineBeamModeDoseRate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string doseRateUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_doserateuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->doserateuid().data(), this->doserateuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_doseRate;
        break;
      }
      
      // optional int32 doseRate = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doseRate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doserate_)));
          set_has_doserate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isDoseRateDefault;
        break;
      }
      
      // optional bool isDoseRateDefault = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDoseRateDefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdoseratedefault_)));
          set_has_isdoseratedefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineBeamModeDoseRate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string doseRateUID = 1;
  if (has_doserateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doserateuid().data(), this->doserateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->doserateuid(), output);
  }
  
  // optional int32 doseRate = 2;
  if (has_doserate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->doserate(), output);
  }
  
  // optional bool isDoseRateDefault = 3;
  if (has_isdoseratedefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdoseratedefault(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineBeamModeDoseRate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string doseRateUID = 1;
  if (has_doserateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->doserateuid().data(), this->doserateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->doserateuid(), target);
  }
  
  // optional int32 doseRate = 2;
  if (has_doserate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->doserate(), target);
  }
  
  // optional bool isDoseRateDefault = 3;
  if (has_isdoseratedefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdoseratedefault(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineBeamModeDoseRate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string doseRateUID = 1;
    if (has_doserateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->doserateuid());
    }
    
    // optional int32 doseRate = 2;
    if (has_doserate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doserate());
    }
    
    // optional bool isDoseRateDefault = 3;
    if (has_isdoseratedefault()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineBeamModeDoseRate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineBeamModeDoseRate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineBeamModeDoseRate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineBeamModeDoseRate::MergeFrom(const RT_MS_MachineBeamModeDoseRate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_doserateuid()) {
      set_doserateuid(from.doserateuid());
    }
    if (from.has_doserate()) {
      set_doserate(from.doserate());
    }
    if (from.has_isdoseratedefault()) {
      set_isdoseratedefault(from.isdoseratedefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineBeamModeDoseRate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineBeamModeDoseRate::CopyFrom(const RT_MS_MachineBeamModeDoseRate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineBeamModeDoseRate::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineBeamModeDoseRate::Swap(RT_MS_MachineBeamModeDoseRate* other) {
  if (other != this) {
    std::swap(doserateuid_, other->doserateuid_);
    std::swap(doserate_, other->doserate_);
    std::swap(isdoseratedefault_, other->isdoseratedefault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineBeamModeDoseRate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineBeamModeDoseRate_descriptor_;
  metadata.reflection = RT_MS_MachineBeamModeDoseRate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineTray::kTrayUIDFieldNumber;
const int RT_MS_MachineTray::kTrayidFieldNumber;
const int RT_MS_MachineTray::kTrayCodeFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineTray::RT_MS_MachineTray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineTray::InitAsDefaultInstance() {
}

RT_MS_MachineTray::RT_MS_MachineTray(const RT_MS_MachineTray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineTray::SharedCtor() {
  _cached_size_ = 0;
  trayuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  trayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  traycode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineTray::~RT_MS_MachineTray() {
  SharedDtor();
}

void RT_MS_MachineTray::SharedDtor() {
  if (trayuid_ != &::google::protobuf::internal::kEmptyString) {
    delete trayuid_;
  }
  if (trayid_ != &::google::protobuf::internal::kEmptyString) {
    delete trayid_;
  }
  if (traycode_ != &::google::protobuf::internal::kEmptyString) {
    delete traycode_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineTray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineTray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineTray_descriptor_;
}

const RT_MS_MachineTray& RT_MS_MachineTray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineTray* RT_MS_MachineTray::default_instance_ = NULL;

RT_MS_MachineTray* RT_MS_MachineTray::New() const {
  return new RT_MS_MachineTray;
}

void RT_MS_MachineTray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trayuid()) {
      if (trayuid_ != &::google::protobuf::internal::kEmptyString) {
        trayuid_->clear();
      }
    }
    if (has_trayid()) {
      if (trayid_ != &::google::protobuf::internal::kEmptyString) {
        trayid_->clear();
      }
    }
    if (has_traycode()) {
      if (traycode_ != &::google::protobuf::internal::kEmptyString) {
        traycode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineTray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string trayUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trayuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayuid().data(), this->trayuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_trayid;
        break;
      }
      
      // optional string trayid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_trayid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayid().data(), this->trayid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_trayCode;
        break;
      }
      
      // optional string trayCode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_traycode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->traycode().data(), this->traycode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineTray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string trayUID = 1;
  if (has_trayuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuid().data(), this->trayuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->trayuid(), output);
  }
  
  // optional string trayid = 2;
  if (has_trayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayid().data(), this->trayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->trayid(), output);
  }
  
  // optional string trayCode = 3;
  if (has_traycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traycode().data(), this->traycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->traycode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineTray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string trayUID = 1;
  if (has_trayuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuid().data(), this->trayuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->trayuid(), target);
  }
  
  // optional string trayid = 2;
  if (has_trayid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayid().data(), this->trayid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->trayid(), target);
  }
  
  // optional string trayCode = 3;
  if (has_traycode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->traycode().data(), this->traycode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->traycode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineTray::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string trayUID = 1;
    if (has_trayuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trayuid());
    }
    
    // optional string trayid = 2;
    if (has_trayid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->trayid());
    }
    
    // optional string trayCode = 3;
    if (has_traycode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->traycode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineTray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineTray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineTray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineTray::MergeFrom(const RT_MS_MachineTray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trayuid()) {
      set_trayuid(from.trayuid());
    }
    if (from.has_trayid()) {
      set_trayid(from.trayid());
    }
    if (from.has_traycode()) {
      set_traycode(from.traycode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineTray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineTray::CopyFrom(const RT_MS_MachineTray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineTray::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineTray::Swap(RT_MS_MachineTray* other) {
  if (other != this) {
    std::swap(trayuid_, other->trayuid_);
    std::swap(trayid_, other->trayid_);
    std::swap(traycode_, other->traycode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineTray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineTray_descriptor_;
  metadata.reflection = RT_MS_MachineTray_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineAccessories::kIsApertureBlockFieldNumber;
const int RT_MS_MachineAccessories::kIsShieldBlockFieldNumber;
const int RT_MS_MachineAccessories::kSourceToBlockTryDistanceFieldNumber;
const int RT_MS_MachineAccessories::kHeightFieldNumber;
const int RT_MS_MachineAccessories::kSourceToApplicatorLowDistanceFieldNumber;
const int RT_MS_MachineAccessories::kSourceToWedgeDistanceFieldNumber;
const int RT_MS_MachineAccessories::kElectronApplicatorListInfoFieldNumber;
const int RT_MS_MachineAccessories::kMachineWedgeListInfoFieldNumber;
const int RT_MS_MachineAccessories::kMotorizedWedgeFieldNumber;
const int RT_MS_MachineAccessories::kTrayUIDListFieldNumber;
const int RT_MS_MachineAccessories::kUIDFieldNumber;
const int RT_MS_MachineAccessories::kTrayACCcodeFieldNumber;
const int RT_MS_MachineAccessories::kTrayListFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineAccessories::RT_MS_MachineAccessories()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineAccessories::InitAsDefaultInstance() {
  motorizedwedge_ = const_cast< ::ms::proto::RT_MS_MachineMotorizedWedge*>(&::ms::proto::RT_MS_MachineMotorizedWedge::default_instance());
}

RT_MS_MachineAccessories::RT_MS_MachineAccessories(const RT_MS_MachineAccessories& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineAccessories::SharedCtor() {
  _cached_size_ = 0;
  isapertureblock_ = false;
  isshieldblock_ = false;
  sourcetoblocktrydistance_ = 0;
  height_ = 0;
  sourcetoapplicatorlowdistance_ = 0;
  sourcetowedgedistance_ = 0;
  motorizedwedge_ = NULL;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineAccessories::~RT_MS_MachineAccessories() {
  SharedDtor();
}

void RT_MS_MachineAccessories::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
    delete motorizedwedge_;
  }
}

void RT_MS_MachineAccessories::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineAccessories::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineAccessories_descriptor_;
}

const RT_MS_MachineAccessories& RT_MS_MachineAccessories::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineAccessories* RT_MS_MachineAccessories::default_instance_ = NULL;

RT_MS_MachineAccessories* RT_MS_MachineAccessories::New() const {
  return new RT_MS_MachineAccessories;
}

void RT_MS_MachineAccessories::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isapertureblock_ = false;
    isshieldblock_ = false;
    sourcetoblocktrydistance_ = 0;
    height_ = 0;
    sourcetoapplicatorlowdistance_ = 0;
    sourcetowedgedistance_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_motorizedwedge()) {
      if (motorizedwedge_ != NULL) motorizedwedge_->::ms::proto::RT_MS_MachineMotorizedWedge::Clear();
    }
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
  }
  electronapplicatorlistinfo_.Clear();
  machinewedgelistinfo_.Clear();
  trayuidlist_.Clear();
  trayacccode_.Clear();
  traylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineAccessories::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isApertureBlock = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isapertureblock_)));
          set_has_isapertureblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isShieldBlock;
        break;
      }
      
      // optional bool isShieldBlock = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isShieldBlock:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isshieldblock_)));
          set_has_isshieldblock();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sourceToBlockTryDistance;
        break;
      }
      
      // optional float sourceToBlockTryDistance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceToBlockTryDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcetoblocktrydistance_)));
          set_has_sourcetoblocktrydistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_height;
        break;
      }
      
      // optional float height = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_sourceToApplicatorLowDistance;
        break;
      }
      
      // optional float sourceToApplicatorLowDistance = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceToApplicatorLowDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcetoapplicatorlowdistance_)));
          set_has_sourcetoapplicatorlowdistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_sourceToWedgeDistance;
        break;
      }
      
      // optional float sourceToWedgeDistance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sourceToWedgeDistance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sourcetowedgedistance_)));
          set_has_sourcetowedgedistance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_electronApplicatorListInfo;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MachineElectronApplicator electronApplicatorListInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_electronApplicatorListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_electronapplicatorlistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_electronApplicatorListInfo;
        if (input->ExpectTag(66)) goto parse_machineWedgeListInfo;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MachineWedge machineWedgeListInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineWedgeListInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machinewedgelistinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_machineWedgeListInfo;
        if (input->ExpectTag(74)) goto parse_motorizedWedge;
        break;
      }
      
      // optional .ms.proto.RT_MS_MachineMotorizedWedge motorizedWedge = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_motorizedWedge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motorizedwedge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_trayUIDList;
        break;
      }
      
      // repeated string trayUIDList = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayUIDList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trayuidlist()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayuidlist(0).data(), this->trayuidlist(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_trayUIDList;
        if (input->ExpectTag(90)) goto parse_UID;
        break;
      }
      
      // optional string UID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trayACCcode;
        break;
      }
      
      // repeated string trayACCcode = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayACCcode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_trayacccode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->trayacccode(0).data(), this->trayacccode(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_trayACCcode;
        if (input->ExpectTag(106)) goto parse_trayList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MachineTray trayList = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trayList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_trayList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineAccessories::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool isApertureBlock = 1;
  if (has_isapertureblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isapertureblock(), output);
  }
  
  // optional bool isShieldBlock = 2;
  if (has_isshieldblock()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isshieldblock(), output);
  }
  
  // optional float sourceToBlockTryDistance = 3;
  if (has_sourcetoblocktrydistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sourcetoblocktrydistance(), output);
  }
  
  // optional float height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->height(), output);
  }
  
  // optional float sourceToApplicatorLowDistance = 5;
  if (has_sourcetoapplicatorlowdistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sourcetoapplicatorlowdistance(), output);
  }
  
  // optional float sourceToWedgeDistance = 6;
  if (has_sourcetowedgedistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sourcetowedgedistance(), output);
  }
  
  // repeated .ms.proto.RT_MS_MachineElectronApplicator electronApplicatorListInfo = 7;
  for (int i = 0; i < this->electronapplicatorlistinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->electronapplicatorlistinfo(i), output);
  }
  
  // repeated .ms.proto.RT_MS_MachineWedge machineWedgeListInfo = 8;
  for (int i = 0; i < this->machinewedgelistinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->machinewedgelistinfo(i), output);
  }
  
  // optional .ms.proto.RT_MS_MachineMotorizedWedge motorizedWedge = 9;
  if (has_motorizedwedge()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->motorizedwedge(), output);
  }
  
  // repeated string trayUIDList = 10;
  for (int i = 0; i < this->trayuidlist_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->trayuidlist(i).data(), this->trayuidlist(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->trayuidlist(i), output);
  }
  
  // optional string UID = 11;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->uid(), output);
  }
  
  // repeated string trayACCcode = 12;
  for (int i = 0; i < this->trayacccode_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->trayacccode(i).data(), this->trayacccode(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->trayacccode(i), output);
  }
  
  // repeated .ms.proto.RT_MS_MachineTray trayList = 13;
  for (int i = 0; i < this->traylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->traylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineAccessories::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool isApertureBlock = 1;
  if (has_isapertureblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isapertureblock(), target);
  }
  
  // optional bool isShieldBlock = 2;
  if (has_isshieldblock()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isshieldblock(), target);
  }
  
  // optional float sourceToBlockTryDistance = 3;
  if (has_sourcetoblocktrydistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sourcetoblocktrydistance(), target);
  }
  
  // optional float height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->height(), target);
  }
  
  // optional float sourceToApplicatorLowDistance = 5;
  if (has_sourcetoapplicatorlowdistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->sourcetoapplicatorlowdistance(), target);
  }
  
  // optional float sourceToWedgeDistance = 6;
  if (has_sourcetowedgedistance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sourcetowedgedistance(), target);
  }
  
  // repeated .ms.proto.RT_MS_MachineElectronApplicator electronApplicatorListInfo = 7;
  for (int i = 0; i < this->electronapplicatorlistinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->electronapplicatorlistinfo(i), target);
  }
  
  // repeated .ms.proto.RT_MS_MachineWedge machineWedgeListInfo = 8;
  for (int i = 0; i < this->machinewedgelistinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->machinewedgelistinfo(i), target);
  }
  
  // optional .ms.proto.RT_MS_MachineMotorizedWedge motorizedWedge = 9;
  if (has_motorizedwedge()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->motorizedwedge(), target);
  }
  
  // repeated string trayUIDList = 10;
  for (int i = 0; i < this->trayuidlist_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayuidlist(i).data(), this->trayuidlist(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(10, this->trayuidlist(i), target);
  }
  
  // optional string UID = 11;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->uid(), target);
  }
  
  // repeated string trayACCcode = 12;
  for (int i = 0; i < this->trayacccode_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->trayacccode(i).data(), this->trayacccode(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(12, this->trayacccode(i), target);
  }
  
  // repeated .ms.proto.RT_MS_MachineTray trayList = 13;
  for (int i = 0; i < this->traylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->traylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineAccessories::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isApertureBlock = 1;
    if (has_isapertureblock()) {
      total_size += 1 + 1;
    }
    
    // optional bool isShieldBlock = 2;
    if (has_isshieldblock()) {
      total_size += 1 + 1;
    }
    
    // optional float sourceToBlockTryDistance = 3;
    if (has_sourcetoblocktrydistance()) {
      total_size += 1 + 4;
    }
    
    // optional float height = 4;
    if (has_height()) {
      total_size += 1 + 4;
    }
    
    // optional float sourceToApplicatorLowDistance = 5;
    if (has_sourcetoapplicatorlowdistance()) {
      total_size += 1 + 4;
    }
    
    // optional float sourceToWedgeDistance = 6;
    if (has_sourcetowedgedistance()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .ms.proto.RT_MS_MachineMotorizedWedge motorizedWedge = 9;
    if (has_motorizedwedge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->motorizedwedge());
    }
    
    // optional string UID = 11;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
  }
  // repeated .ms.proto.RT_MS_MachineElectronApplicator electronApplicatorListInfo = 7;
  total_size += 1 * this->electronapplicatorlistinfo_size();
  for (int i = 0; i < this->electronapplicatorlistinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->electronapplicatorlistinfo(i));
  }
  
  // repeated .ms.proto.RT_MS_MachineWedge machineWedgeListInfo = 8;
  total_size += 1 * this->machinewedgelistinfo_size();
  for (int i = 0; i < this->machinewedgelistinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machinewedgelistinfo(i));
  }
  
  // repeated string trayUIDList = 10;
  total_size += 1 * this->trayuidlist_size();
  for (int i = 0; i < this->trayuidlist_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trayuidlist(i));
  }
  
  // repeated string trayACCcode = 12;
  total_size += 1 * this->trayacccode_size();
  for (int i = 0; i < this->trayacccode_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->trayacccode(i));
  }
  
  // repeated .ms.proto.RT_MS_MachineTray trayList = 13;
  total_size += 1 * this->traylist_size();
  for (int i = 0; i < this->traylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineAccessories::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineAccessories* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineAccessories*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineAccessories::MergeFrom(const RT_MS_MachineAccessories& from) {
  GOOGLE_CHECK_NE(&from, this);
  electronapplicatorlistinfo_.MergeFrom(from.electronapplicatorlistinfo_);
  machinewedgelistinfo_.MergeFrom(from.machinewedgelistinfo_);
  trayuidlist_.MergeFrom(from.trayuidlist_);
  trayacccode_.MergeFrom(from.trayacccode_);
  traylist_.MergeFrom(from.traylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isapertureblock()) {
      set_isapertureblock(from.isapertureblock());
    }
    if (from.has_isshieldblock()) {
      set_isshieldblock(from.isshieldblock());
    }
    if (from.has_sourcetoblocktrydistance()) {
      set_sourcetoblocktrydistance(from.sourcetoblocktrydistance());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_sourcetoapplicatorlowdistance()) {
      set_sourcetoapplicatorlowdistance(from.sourcetoapplicatorlowdistance());
    }
    if (from.has_sourcetowedgedistance()) {
      set_sourcetowedgedistance(from.sourcetowedgedistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_motorizedwedge()) {
      mutable_motorizedwedge()->::ms::proto::RT_MS_MachineMotorizedWedge::MergeFrom(from.motorizedwedge());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineAccessories::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineAccessories::CopyFrom(const RT_MS_MachineAccessories& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineAccessories::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineAccessories::Swap(RT_MS_MachineAccessories* other) {
  if (other != this) {
    std::swap(isapertureblock_, other->isapertureblock_);
    std::swap(isshieldblock_, other->isshieldblock_);
    std::swap(sourcetoblocktrydistance_, other->sourcetoblocktrydistance_);
    std::swap(height_, other->height_);
    std::swap(sourcetoapplicatorlowdistance_, other->sourcetoapplicatorlowdistance_);
    std::swap(sourcetowedgedistance_, other->sourcetowedgedistance_);
    electronapplicatorlistinfo_.Swap(&other->electronapplicatorlistinfo_);
    machinewedgelistinfo_.Swap(&other->machinewedgelistinfo_);
    std::swap(motorizedwedge_, other->motorizedwedge_);
    trayuidlist_.Swap(&other->trayuidlist_);
    std::swap(uid_, other->uid_);
    trayacccode_.Swap(&other->trayacccode_);
    traylist_.Swap(&other->traylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineAccessories::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineAccessories_descriptor_;
  metadata.reflection = RT_MS_MachineAccessories_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineElectronApplicator::kApplicatorACCIDFieldNumber;
const int RT_MS_MachineElectronApplicator::kSizeXFieldNumber;
const int RT_MS_MachineElectronApplicator::kSizeYFieldNumber;
const int RT_MS_MachineElectronApplicator::kApplicatorUIDFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineElectronApplicator::RT_MS_MachineElectronApplicator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineElectronApplicator::InitAsDefaultInstance() {
}

RT_MS_MachineElectronApplicator::RT_MS_MachineElectronApplicator(const RT_MS_MachineElectronApplicator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineElectronApplicator::SharedCtor() {
  _cached_size_ = 0;
  applicatoraccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sizex_ = 0;
  sizey_ = 0;
  applicatoruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineElectronApplicator::~RT_MS_MachineElectronApplicator() {
  SharedDtor();
}

void RT_MS_MachineElectronApplicator::SharedDtor() {
  if (applicatoraccid_ != &::google::protobuf::internal::kEmptyString) {
    delete applicatoraccid_;
  }
  if (applicatoruid_ != &::google::protobuf::internal::kEmptyString) {
    delete applicatoruid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineElectronApplicator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineElectronApplicator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineElectronApplicator_descriptor_;
}

const RT_MS_MachineElectronApplicator& RT_MS_MachineElectronApplicator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineElectronApplicator* RT_MS_MachineElectronApplicator::default_instance_ = NULL;

RT_MS_MachineElectronApplicator* RT_MS_MachineElectronApplicator::New() const {
  return new RT_MS_MachineElectronApplicator;
}

void RT_MS_MachineElectronApplicator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicatoraccid()) {
      if (applicatoraccid_ != &::google::protobuf::internal::kEmptyString) {
        applicatoraccid_->clear();
      }
    }
    sizex_ = 0;
    sizey_ = 0;
    if (has_applicatoruid()) {
      if (applicatoruid_ != &::google::protobuf::internal::kEmptyString) {
        applicatoruid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineElectronApplicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string applicatorACCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicatoraccid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicatoraccid().data(), this->applicatoraccid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_sizeX;
        break;
      }
      
      // optional float sizeX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizex_)));
          set_has_sizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_sizeY;
        break;
      }
      
      // optional float sizeY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sizey_)));
          set_has_sizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_applicatorUID;
        break;
      }
      
      // optional string applicatorUID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicatorUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicatoruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicatoruid().data(), this->applicatoruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineElectronApplicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string applicatorACCID = 1;
  if (has_applicatoraccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicatoraccid().data(), this->applicatoraccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->applicatoraccid(), output);
  }
  
  // optional float sizeX = 2;
  if (has_sizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sizex(), output);
  }
  
  // optional float sizeY = 3;
  if (has_sizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sizey(), output);
  }
  
  // optional string applicatorUID = 4;
  if (has_applicatoruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicatoruid().data(), this->applicatoruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->applicatoruid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineElectronApplicator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string applicatorACCID = 1;
  if (has_applicatoraccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicatoraccid().data(), this->applicatoraccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->applicatoraccid(), target);
  }
  
  // optional float sizeX = 2;
  if (has_sizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->sizex(), target);
  }
  
  // optional float sizeY = 3;
  if (has_sizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->sizey(), target);
  }
  
  // optional string applicatorUID = 4;
  if (has_applicatoruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicatoruid().data(), this->applicatoruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->applicatoruid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineElectronApplicator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string applicatorACCID = 1;
    if (has_applicatoraccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicatoraccid());
    }
    
    // optional float sizeX = 2;
    if (has_sizex()) {
      total_size += 1 + 4;
    }
    
    // optional float sizeY = 3;
    if (has_sizey()) {
      total_size += 1 + 4;
    }
    
    // optional string applicatorUID = 4;
    if (has_applicatoruid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicatoruid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineElectronApplicator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineElectronApplicator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineElectronApplicator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineElectronApplicator::MergeFrom(const RT_MS_MachineElectronApplicator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicatoraccid()) {
      set_applicatoraccid(from.applicatoraccid());
    }
    if (from.has_sizex()) {
      set_sizex(from.sizex());
    }
    if (from.has_sizey()) {
      set_sizey(from.sizey());
    }
    if (from.has_applicatoruid()) {
      set_applicatoruid(from.applicatoruid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineElectronApplicator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineElectronApplicator::CopyFrom(const RT_MS_MachineElectronApplicator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineElectronApplicator::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineElectronApplicator::Swap(RT_MS_MachineElectronApplicator* other) {
  if (other != this) {
    std::swap(applicatoraccid_, other->applicatoraccid_);
    std::swap(sizex_, other->sizex_);
    std::swap(sizey_, other->sizey_);
    std::swap(applicatoruid_, other->applicatoruid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineElectronApplicator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineElectronApplicator_descriptor_;
  metadata.reflection = RT_MS_MachineElectronApplicator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineMotorizedWedge::kMotorizedWedgeOrientationFieldNumber;
const int RT_MS_MachineMotorizedWedge::kMotorizedFieldSizeLimitXFieldNumber;
const int RT_MS_MachineMotorizedWedge::kMotorizedfieldSizeLimitYFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineMotorizedWedge::RT_MS_MachineMotorizedWedge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineMotorizedWedge::InitAsDefaultInstance() {
}

RT_MS_MachineMotorizedWedge::RT_MS_MachineMotorizedWedge(const RT_MS_MachineMotorizedWedge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineMotorizedWedge::SharedCtor() {
  _cached_size_ = 0;
  motorizedwedgeorientation_ = 0;
  motorizedfieldsizelimitx_ = 0;
  motorizedfieldsizelimity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineMotorizedWedge::~RT_MS_MachineMotorizedWedge() {
  SharedDtor();
}

void RT_MS_MachineMotorizedWedge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_MS_MachineMotorizedWedge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineMotorizedWedge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineMotorizedWedge_descriptor_;
}

const RT_MS_MachineMotorizedWedge& RT_MS_MachineMotorizedWedge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineMotorizedWedge* RT_MS_MachineMotorizedWedge::default_instance_ = NULL;

RT_MS_MachineMotorizedWedge* RT_MS_MachineMotorizedWedge::New() const {
  return new RT_MS_MachineMotorizedWedge;
}

void RT_MS_MachineMotorizedWedge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    motorizedwedgeorientation_ = 0;
    motorizedfieldsizelimitx_ = 0;
    motorizedfieldsizelimity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineMotorizedWedge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 motorizedWedgeOrientation = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motorizedwedgeorientation_)));
          set_has_motorizedwedgeorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_motorizedFieldSizeLimitX;
        break;
      }
      
      // optional float motorizedFieldSizeLimitX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motorizedFieldSizeLimitX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motorizedfieldsizelimitx_)));
          set_has_motorizedfieldsizelimitx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_motorizedfieldSizeLimitY;
        break;
      }
      
      // optional float motorizedfieldSizeLimitY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_motorizedfieldSizeLimitY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &motorizedfieldsizelimity_)));
          set_has_motorizedfieldsizelimity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineMotorizedWedge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 motorizedWedgeOrientation = 1;
  if (has_motorizedwedgeorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->motorizedwedgeorientation(), output);
  }
  
  // optional float motorizedFieldSizeLimitX = 2;
  if (has_motorizedfieldsizelimitx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->motorizedfieldsizelimitx(), output);
  }
  
  // optional float motorizedfieldSizeLimitY = 3;
  if (has_motorizedfieldsizelimity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->motorizedfieldsizelimity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineMotorizedWedge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 motorizedWedgeOrientation = 1;
  if (has_motorizedwedgeorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->motorizedwedgeorientation(), target);
  }
  
  // optional float motorizedFieldSizeLimitX = 2;
  if (has_motorizedfieldsizelimitx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->motorizedfieldsizelimitx(), target);
  }
  
  // optional float motorizedfieldSizeLimitY = 3;
  if (has_motorizedfieldsizelimity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->motorizedfieldsizelimity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineMotorizedWedge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 motorizedWedgeOrientation = 1;
    if (has_motorizedwedgeorientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motorizedwedgeorientation());
    }
    
    // optional float motorizedFieldSizeLimitX = 2;
    if (has_motorizedfieldsizelimitx()) {
      total_size += 1 + 4;
    }
    
    // optional float motorizedfieldSizeLimitY = 3;
    if (has_motorizedfieldsizelimity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineMotorizedWedge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineMotorizedWedge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineMotorizedWedge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineMotorizedWedge::MergeFrom(const RT_MS_MachineMotorizedWedge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_motorizedwedgeorientation()) {
      set_motorizedwedgeorientation(from.motorizedwedgeorientation());
    }
    if (from.has_motorizedfieldsizelimitx()) {
      set_motorizedfieldsizelimitx(from.motorizedfieldsizelimitx());
    }
    if (from.has_motorizedfieldsizelimity()) {
      set_motorizedfieldsizelimity(from.motorizedfieldsizelimity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineMotorizedWedge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineMotorizedWedge::CopyFrom(const RT_MS_MachineMotorizedWedge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineMotorizedWedge::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineMotorizedWedge::Swap(RT_MS_MachineMotorizedWedge* other) {
  if (other != this) {
    std::swap(motorizedwedgeorientation_, other->motorizedwedgeorientation_);
    std::swap(motorizedfieldsizelimitx_, other->motorizedfieldsizelimitx_);
    std::swap(motorizedfieldsizelimity_, other->motorizedfieldsizelimity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineMotorizedWedge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineMotorizedWedge_descriptor_;
  metadata.reflection = RT_MS_MachineMotorizedWedge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MachineWedge::kWedgeACCIDFieldNumber;
const int RT_MS_MachineWedge::kDegreeFieldNumber;
const int RT_MS_MachineWedge::kLeftMinFieldNumber;
const int RT_MS_MachineWedge::kLeftMaxFieldNumber;
const int RT_MS_MachineWedge::kRightMinFieldNumber;
const int RT_MS_MachineWedge::kRightMaxFieldNumber;
const int RT_MS_MachineWedge::kTopMinFieldNumber;
const int RT_MS_MachineWedge::kTopMaxFieldNumber;
const int RT_MS_MachineWedge::kBottomMinFieldNumber;
const int RT_MS_MachineWedge::kBottomMaxFieldNumber;
const int RT_MS_MachineWedge::kOrientationTypeFieldNumber;
const int RT_MS_MachineWedge::kWedgeUIDFieldNumber;
const int RT_MS_MachineWedge::kWedgeTypeFieldNumber;
const int RT_MS_MachineWedge::kAccCodeFieldNumber;
#endif  // !_MSC_VER

RT_MS_MachineWedge::RT_MS_MachineWedge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MachineWedge::InitAsDefaultInstance() {
}

RT_MS_MachineWedge::RT_MS_MachineWedge(const RT_MS_MachineWedge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MachineWedge::SharedCtor() {
  _cached_size_ = 0;
  wedgeaccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  degree_ = 0;
  leftmin_ = 0;
  leftmax_ = 0;
  rightmin_ = 0;
  rightmax_ = 0;
  topmin_ = 0;
  topmax_ = 0;
  bottommin_ = 0;
  bottommax_ = 0;
  orientationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgetype_ = 0;
  acccode_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MachineWedge::~RT_MS_MachineWedge() {
  SharedDtor();
}

void RT_MS_MachineWedge::SharedDtor() {
  if (wedgeaccid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeaccid_;
  }
  if (orientationtype_ != &::google::protobuf::internal::kEmptyString) {
    delete orientationtype_;
  }
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (acccode_ != &::google::protobuf::internal::kEmptyString) {
    delete acccode_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MachineWedge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MachineWedge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MachineWedge_descriptor_;
}

const RT_MS_MachineWedge& RT_MS_MachineWedge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmachinesettingconfig_2eproto();  return *default_instance_;
}

RT_MS_MachineWedge* RT_MS_MachineWedge::default_instance_ = NULL;

RT_MS_MachineWedge* RT_MS_MachineWedge::New() const {
  return new RT_MS_MachineWedge;
}

void RT_MS_MachineWedge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgeaccid()) {
      if (wedgeaccid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeaccid_->clear();
      }
    }
    degree_ = 0;
    leftmin_ = 0;
    leftmax_ = 0;
    rightmin_ = 0;
    rightmax_ = 0;
    topmin_ = 0;
    topmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    bottommin_ = 0;
    bottommax_ = 0;
    if (has_orientationtype()) {
      if (orientationtype_ != &::google::protobuf::internal::kEmptyString) {
        orientationtype_->clear();
      }
    }
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    wedgetype_ = 0;
    if (has_acccode()) {
      if (acccode_ != &::google::protobuf::internal::kEmptyString) {
        acccode_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MachineWedge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeACCID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeaccid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeaccid().data(), this->wedgeaccid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_degree;
        break;
      }
      
      // optional float degree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_degree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &degree_)));
          set_has_degree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_leftMin;
        break;
      }
      
      // optional float leftMin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftmin_)));
          set_has_leftmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_leftMax;
        break;
      }
      
      // optional float leftMax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftmax_)));
          set_has_leftmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rightMin;
        break;
      }
      
      // optional float rightMin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightmin_)));
          set_has_rightmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_rightMax;
        break;
      }
      
      // optional float rightMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightmax_)));
          set_has_rightmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_topMin;
        break;
      }
      
      // optional float topMin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topmin_)));
          set_has_topmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_topMax;
        break;
      }
      
      // optional float topMax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topmax_)));
          set_has_topmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_bottomMin;
        break;
      }
      
      // optional float bottomMin = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottomMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottommin_)));
          set_has_bottommin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_bottomMax;
        break;
      }
      
      // optional float bottomMax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottomMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottommax_)));
          set_has_bottommax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_orientationType;
        break;
      }
      
      // optional string orientationType = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orientationType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orientationtype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orientationtype().data(), this->orientationtype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_wedgeUID;
        break;
      }
      
      // optional string wedgeUID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_wedgeType;
        break;
      }
      
      // optional int32 wedgeType = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedgeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedgetype_)));
          set_has_wedgetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_accCode;
        break;
      }
      
      // optional string accCode = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accCode:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acccode()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acccode().data(), this->acccode().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MachineWedge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeACCID = 1;
  if (has_wedgeaccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeaccid().data(), this->wedgeaccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgeaccid(), output);
  }
  
  // optional float degree = 2;
  if (has_degree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->degree(), output);
  }
  
  // optional float leftMin = 3;
  if (has_leftmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->leftmin(), output);
  }
  
  // optional float leftMax = 4;
  if (has_leftmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->leftmax(), output);
  }
  
  // optional float rightMin = 5;
  if (has_rightmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rightmin(), output);
  }
  
  // optional float rightMax = 6;
  if (has_rightmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rightmax(), output);
  }
  
  // optional float topMin = 7;
  if (has_topmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->topmin(), output);
  }
  
  // optional float topMax = 8;
  if (has_topmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->topmax(), output);
  }
  
  // optional float bottomMin = 9;
  if (has_bottommin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bottommin(), output);
  }
  
  // optional float bottomMax = 10;
  if (has_bottommax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bottommax(), output);
  }
  
  // optional string orientationType = 11;
  if (has_orientationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orientationtype().data(), this->orientationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->orientationtype(), output);
  }
  
  // optional string wedgeUID = 12;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->wedgeuid(), output);
  }
  
  // optional int32 wedgeType = 13;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->wedgetype(), output);
  }
  
  // optional string accCode = 14;
  if (has_acccode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acccode().data(), this->acccode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->acccode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MachineWedge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeACCID = 1;
  if (has_wedgeaccid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeaccid().data(), this->wedgeaccid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgeaccid(), target);
  }
  
  // optional float degree = 2;
  if (has_degree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->degree(), target);
  }
  
  // optional float leftMin = 3;
  if (has_leftmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->leftmin(), target);
  }
  
  // optional float leftMax = 4;
  if (has_leftmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->leftmax(), target);
  }
  
  // optional float rightMin = 5;
  if (has_rightmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rightmin(), target);
  }
  
  // optional float rightMax = 6;
  if (has_rightmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->rightmax(), target);
  }
  
  // optional float topMin = 7;
  if (has_topmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->topmin(), target);
  }
  
  // optional float topMax = 8;
  if (has_topmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->topmax(), target);
  }
  
  // optional float bottomMin = 9;
  if (has_bottommin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->bottommin(), target);
  }
  
  // optional float bottomMax = 10;
  if (has_bottommax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->bottommax(), target);
  }
  
  // optional string orientationType = 11;
  if (has_orientationtype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orientationtype().data(), this->orientationtype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->orientationtype(), target);
  }
  
  // optional string wedgeUID = 12;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->wedgeuid(), target);
  }
  
  // optional int32 wedgeType = 13;
  if (has_wedgetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->wedgetype(), target);
  }
  
  // optional string accCode = 14;
  if (has_acccode()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acccode().data(), this->acccode().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->acccode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MachineWedge::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeACCID = 1;
    if (has_wedgeaccid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeaccid());
    }
    
    // optional float degree = 2;
    if (has_degree()) {
      total_size += 1 + 4;
    }
    
    // optional float leftMin = 3;
    if (has_leftmin()) {
      total_size += 1 + 4;
    }
    
    // optional float leftMax = 4;
    if (has_leftmax()) {
      total_size += 1 + 4;
    }
    
    // optional float rightMin = 5;
    if (has_rightmin()) {
      total_size += 1 + 4;
    }
    
    // optional float rightMax = 6;
    if (has_rightmax()) {
      total_size += 1 + 4;
    }
    
    // optional float topMin = 7;
    if (has_topmin()) {
      total_size += 1 + 4;
    }
    
    // optional float topMax = 8;
    if (has_topmax()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float bottomMin = 9;
    if (has_bottommin()) {
      total_size += 1 + 4;
    }
    
    // optional float bottomMax = 10;
    if (has_bottommax()) {
      total_size += 1 + 4;
    }
    
    // optional string orientationType = 11;
    if (has_orientationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orientationtype());
    }
    
    // optional string wedgeUID = 12;
    if (has_wedgeuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional int32 wedgeType = 13;
    if (has_wedgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedgetype());
    }
    
    // optional string accCode = 14;
    if (has_acccode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acccode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MachineWedge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MachineWedge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MachineWedge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MachineWedge::MergeFrom(const RT_MS_MachineWedge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgeaccid()) {
      set_wedgeaccid(from.wedgeaccid());
    }
    if (from.has_degree()) {
      set_degree(from.degree());
    }
    if (from.has_leftmin()) {
      set_leftmin(from.leftmin());
    }
    if (from.has_leftmax()) {
      set_leftmax(from.leftmax());
    }
    if (from.has_rightmin()) {
      set_rightmin(from.rightmin());
    }
    if (from.has_rightmax()) {
      set_rightmax(from.rightmax());
    }
    if (from.has_topmin()) {
      set_topmin(from.topmin());
    }
    if (from.has_topmax()) {
      set_topmax(from.topmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bottommin()) {
      set_bottommin(from.bottommin());
    }
    if (from.has_bottommax()) {
      set_bottommax(from.bottommax());
    }
    if (from.has_orientationtype()) {
      set_orientationtype(from.orientationtype());
    }
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_wedgetype()) {
      set_wedgetype(from.wedgetype());
    }
    if (from.has_acccode()) {
      set_acccode(from.acccode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MachineWedge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MachineWedge::CopyFrom(const RT_MS_MachineWedge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MachineWedge::IsInitialized() const {
  
  return true;
}

void RT_MS_MachineWedge::Swap(RT_MS_MachineWedge* other) {
  if (other != this) {
    std::swap(wedgeaccid_, other->wedgeaccid_);
    std::swap(degree_, other->degree_);
    std::swap(leftmin_, other->leftmin_);
    std::swap(leftmax_, other->leftmax_);
    std::swap(rightmin_, other->rightmin_);
    std::swap(rightmax_, other->rightmax_);
    std::swap(topmin_, other->topmin_);
    std::swap(topmax_, other->topmax_);
    std::swap(bottommin_, other->bottommin_);
    std::swap(bottommax_, other->bottommax_);
    std::swap(orientationtype_, other->orientationtype_);
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(wedgetype_, other->wedgetype_);
    std::swap(acccode_, other->acccode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MachineWedge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MachineWedge_descriptor_;
  metadata.reflection = RT_MS_MachineWedge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
