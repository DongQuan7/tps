// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_dvhdatalist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        namespace {

            const ::google::protobuf::Descriptor* RT_TPS_DVHDataList_descriptor_ = NULL;
            const ::google::protobuf::internal::GeneratedMessageReflection*
                RT_TPS_DVHDataList_reflection_ = NULL;

        }  // namespace


        void protobuf_AssignDesc_rt_5ftps_5fdvhdatalist_2eproto() {
            protobuf_AddDesc_rt_5ftps_5fdvhdatalist_2eproto();
            const ::google::protobuf::FileDescriptor* file =
                ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "rt_tps_dvhdatalist.proto");
            GOOGLE_CHECK(file != NULL);
            RT_TPS_DVHDataList_descriptor_ = file->message_type(0);
            static const int RT_TPS_DVHDataList_offsets_[1] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHDataList, dvhdatalist_),
            };
            RT_TPS_DVHDataList_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                RT_TPS_DVHDataList_descriptor_,
                RT_TPS_DVHDataList::default_instance_,
                RT_TPS_DVHDataList_offsets_,
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHDataList, _has_bits_[0]),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHDataList, _unknown_fields_),
                -1,
                ::google::protobuf::DescriptorPool::generated_pool(),
                ::google::protobuf::MessageFactory::generated_factory(),
                sizeof(RT_TPS_DVHDataList));
        }

        namespace {

            GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
            inline void protobuf_AssignDescriptorsOnce() {
                ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                    &protobuf_AssignDesc_rt_5ftps_5fdvhdatalist_2eproto);
            }

            void protobuf_RegisterTypes(const ::std::string&) {
                protobuf_AssignDescriptorsOnce();
                ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    RT_TPS_DVHDataList_descriptor_, &RT_TPS_DVHDataList::default_instance());
            }

        }  // namespace

        void protobuf_ShutdownFile_rt_5ftps_5fdvhdatalist_2eproto() {
            delete RT_TPS_DVHDataList::default_instance_;
            delete RT_TPS_DVHDataList_reflection_;
        }

        void protobuf_AddDesc_rt_5ftps_5fdvhdatalist_2eproto() {
            static bool already_here = false;
            if (already_here) return;
            already_here = true;
            GOOGLE_PROTOBUF_VERIFY_VERSION;

            ::tps::proto::protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();
            ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                "\n\030rt_tps_dvhdatalist.proto\022\ttps.proto\032\024r"
                "t_tps_dvhdata.proto\"D\n\022RT_TPS_DVHDataLis"
                "t\022.\n\013dvhdatalist\030\001 \003(\0132\031.tps.proto.RT_TP"
                "S_DVHData", 129);
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                "rt_tps_dvhdatalist.proto", &protobuf_RegisterTypes);
            RT_TPS_DVHDataList::default_instance_ = new RT_TPS_DVHDataList();
            RT_TPS_DVHDataList::default_instance_->InitAsDefaultInstance();
            ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fdvhdatalist_2eproto);
        }

        // Force AddDescriptors() to be called at static initialization time.
        struct StaticDescriptorInitializer_rt_5ftps_5fdvhdatalist_2eproto {
            StaticDescriptorInitializer_rt_5ftps_5fdvhdatalist_2eproto() {
                protobuf_AddDesc_rt_5ftps_5fdvhdatalist_2eproto();
            }
        } static_descriptor_initializer_rt_5ftps_5fdvhdatalist_2eproto_;


        // ===================================================================

#ifndef _MSC_VER
        const int RT_TPS_DVHDataList::kDvhdatalistFieldNumber;
#endif  // !_MSC_VER

        RT_TPS_DVHDataList::RT_TPS_DVHDataList()
            : ::google::protobuf::Message() {
                SharedCtor();
        }

        void RT_TPS_DVHDataList::InitAsDefaultInstance() {
        }

        RT_TPS_DVHDataList::RT_TPS_DVHDataList(const RT_TPS_DVHDataList& from)
            : ::google::protobuf::Message() {
                SharedCtor();
                MergeFrom(from);
        }

        void RT_TPS_DVHDataList::SharedCtor() {
            _cached_size_ = 0;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        RT_TPS_DVHDataList::~RT_TPS_DVHDataList() {
            SharedDtor();
        }

        void RT_TPS_DVHDataList::SharedDtor() {
            if (this != default_instance_) {
            }
        }

        void RT_TPS_DVHDataList::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RT_TPS_DVHDataList::descriptor() {
            protobuf_AssignDescriptorsOnce();
            return RT_TPS_DVHDataList_descriptor_;
        }

        const RT_TPS_DVHDataList& RT_TPS_DVHDataList::default_instance() {
            if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fdvhdatalist_2eproto();  return *default_instance_;
        }

        RT_TPS_DVHDataList* RT_TPS_DVHDataList::default_instance_ = NULL;

        RT_TPS_DVHDataList* RT_TPS_DVHDataList::New() const {
            return new RT_TPS_DVHDataList;
        }

        void RT_TPS_DVHDataList::Clear() {
            dvhdatalist_.Clear();
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            mutable_unknown_fields()->Clear();
        }

        bool RT_TPS_DVHDataList::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
                ::google::protobuf::uint32 tag;
                while ((tag = input->ReadTag()) != 0) {
                    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                        // repeated .tps.proto.RT_TPS_DVHData dvhdatalist = 1;
                    case 1: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
parse_dvhdatalist:
                                DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                                    input, add_dvhdatalist()));
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(10)) goto parse_dvhdatalist;
                        if (input->ExpectAtEnd()) return true;
                        break;
                            }

                    default: {
handle_uninterpreted:
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                return true;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                        break;
                             }
                    }
                }
                return true;
#undef DO_
        }

        void RT_TPS_DVHDataList::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
                // repeated .tps.proto.RT_TPS_DVHData dvhdatalist = 1;
                for (int i = 0; i < this->dvhdatalist_size(); i++) {
                    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
                        1, this->dvhdatalist(i), output);
                }

                if (!unknown_fields().empty()) {
                    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                        unknown_fields(), output);
                }
        }

        ::google::protobuf::uint8* RT_TPS_DVHDataList::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8* target) const {
                // repeated .tps.proto.RT_TPS_DVHData dvhdatalist = 1;
                for (int i = 0; i < this->dvhdatalist_size(); i++) {
                    target = ::google::protobuf::internal::WireFormatLite::
                        WriteMessageNoVirtualToArray(
                        1, this->dvhdatalist(i), target);
                }

                if (!unknown_fields().empty()) {
                    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                        unknown_fields(), target);
                }
                return target;
        }

        int RT_TPS_DVHDataList::ByteSize() const {
            int total_size = 0;

            // repeated .tps.proto.RT_TPS_DVHData dvhdatalist = 1;
            total_size += 1 * this->dvhdatalist_size();
            for (int i = 0; i < this->dvhdatalist_size(); i++) {
                total_size +=
                    ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
                    this->dvhdatalist(i));
            }

            if (!unknown_fields().empty()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RT_TPS_DVHDataList::MergeFrom(const ::google::protobuf::Message& from) {
            GOOGLE_CHECK_NE(&from, this);
            const RT_TPS_DVHDataList* source =
                ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_DVHDataList*>(
                &from);
            if (source == NULL) {
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                MergeFrom(*source);
            }
        }

        void RT_TPS_DVHDataList::MergeFrom(const RT_TPS_DVHDataList& from) {
            GOOGLE_CHECK_NE(&from, this);
            dvhdatalist_.MergeFrom(from.dvhdatalist_);
            mutable_unknown_fields()->MergeFrom(from.unknown_fields());
        }

        void RT_TPS_DVHDataList::CopyFrom(const ::google::protobuf::Message& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RT_TPS_DVHDataList::CopyFrom(const RT_TPS_DVHDataList& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RT_TPS_DVHDataList::IsInitialized() const {

            for (int i = 0; i < dvhdatalist_size(); i++) {
                if (!this->dvhdatalist(i).IsInitialized()) return false;
            }
            return true;
        }

        void RT_TPS_DVHDataList::Swap(RT_TPS_DVHDataList* other) {
            if (other != this) {
                dvhdatalist_.Swap(&other->dvhdatalist_);
                std::swap(_has_bits_[0], other->_has_bits_[0]);
                _unknown_fields_.Swap(&other->_unknown_fields_);
                std::swap(_cached_size_, other->_cached_size_);
            }
        }

        ::google::protobuf::Metadata RT_TPS_DVHDataList::GetMetadata() const {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::Metadata metadata;
            metadata.descriptor = RT_TPS_DVHDataList_descriptor_;
            metadata.reflection = RT_TPS_DVHDataList_reflection_;
            return metadata;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
