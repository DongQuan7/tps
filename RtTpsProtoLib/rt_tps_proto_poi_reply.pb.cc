// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_poi_reply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoPoiReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPoiReply_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_poi_reply.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoPoiReply_descriptor_ = file->message_type(0);
  static const int RtTpsProtoPoiReply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiReply, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiReply, poi_),
  };
  RtTpsProtoPoiReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPoiReply_descriptor_,
      RtTpsProtoPoiReply::default_instance_,
      RtTpsProtoPoiReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPoiReply));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPoiReply_descriptor_, &RtTpsProtoPoiReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_5freply_2eproto() {
  delete RtTpsProtoPoiReply::default_instance_;
  delete RtTpsProtoPoiReply_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fheader_2eproto();
  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rt_tps_proto_poi_reply.proto\022\ttps.prot"
    "o\032\031rt_tps_proto_header.proto\032\026rt_tps_pro"
    "to_poi.proto\"h\n\022RtTpsProtoPoiReply\022+\n\006he"
    "ader\030\001 \002(\0132\033.tps.proto.RtTpsProtoHeader\022"
    "%\n\003poi\030\002 \001(\0132\030.tps.proto.RtTpsProtoPoi", 198);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_poi_reply.proto", &protobuf_RegisterTypes);
  RtTpsProtoPoiReply::default_instance_ = new RtTpsProtoPoiReply();
  RtTpsProtoPoiReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_5freply_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fpoi_5freply_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fpoi_5freply_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fpoi_5freply_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPoiReply::kHeaderFieldNumber;
const int RtTpsProtoPoiReply::kPoiFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPoiReply::RtTpsProtoPoiReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPoiReply::InitAsDefaultInstance() {
  header_ = const_cast< ::tps::proto::RtTpsProtoHeader*>(&::tps::proto::RtTpsProtoHeader::default_instance());
  poi_ = const_cast< ::tps::proto::RtTpsProtoPoi*>(&::tps::proto::RtTpsProtoPoi::default_instance());
}

RtTpsProtoPoiReply::RtTpsProtoPoiReply(const RtTpsProtoPoiReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPoiReply::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
  poi_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPoiReply::~RtTpsProtoPoiReply() {
  SharedDtor();
}

void RtTpsProtoPoiReply::SharedDtor() {
  if (this != default_instance_) {
    delete header_;
    delete poi_;
  }
}

void RtTpsProtoPoiReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPoiReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPoiReply_descriptor_;
}

const RtTpsProtoPoiReply& RtTpsProtoPoiReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_5freply_2eproto();  return *default_instance_;
}

RtTpsProtoPoiReply* RtTpsProtoPoiReply::default_instance_ = NULL;

RtTpsProtoPoiReply* RtTpsProtoPoiReply::New() const {
  return new RtTpsProtoPoiReply;
}

void RtTpsProtoPoiReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_header()) {
      if (header_ != NULL) header_->::tps::proto::RtTpsProtoHeader::Clear();
    }
    if (has_poi()) {
      if (poi_ != NULL) poi_->::tps::proto::RtTpsProtoPoi::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPoiReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .tps.proto.RtTpsProtoHeader header = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poi;
        break;
      }
      
      // optional .tps.proto.RtTpsProtoPoi poi = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poi:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_poi()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPoiReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .tps.proto.RtTpsProtoHeader header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->header(), output);
  }
  
  // optional .tps.proto.RtTpsProtoPoi poi = 2;
  if (has_poi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->poi(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPoiReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .tps.proto.RtTpsProtoHeader header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->header(), target);
  }
  
  // optional .tps.proto.RtTpsProtoPoi poi = 2;
  if (has_poi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->poi(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPoiReply::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .tps.proto.RtTpsProtoHeader header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->header());
    }
    
    // optional .tps.proto.RtTpsProtoPoi poi = 2;
    if (has_poi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->poi());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPoiReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPoiReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPoiReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPoiReply::MergeFrom(const RtTpsProtoPoiReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::tps::proto::RtTpsProtoHeader::MergeFrom(from.header());
    }
    if (from.has_poi()) {
      mutable_poi()->::tps::proto::RtTpsProtoPoi::MergeFrom(from.poi());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPoiReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPoiReply::CopyFrom(const RtTpsProtoPoiReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPoiReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_header()) {
    if (!this->header().IsInitialized()) return false;
  }
  if (has_poi()) {
    if (!this->poi().IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoPoiReply::Swap(RtTpsProtoPoiReply* other) {
  if (other != this) {
    std::swap(header_, other->header_);
    std::swap(poi_, other->poi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPoiReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPoiReply_descriptor_;
  metadata.reflection = RtTpsProtoPoiReply_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
