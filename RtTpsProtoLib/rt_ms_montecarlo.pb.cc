// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_ms_montecarlo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_MS_Spectrum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_Spectrum_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_FieldSize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_FieldSize_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_ContourVerter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_ContourVerter_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MonteCarloVirtualWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MonteCarloVirtualWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MonteCarloVirtualWedgeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MonteCarloVirtualWedgeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MonteCarloPhysicalWedgeField_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MonteCarloPhysicalWedgeField_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_MS_MonteCarlo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_MS_MonteCarlo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5fms_5fmontecarlo_2eproto() {
  protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_ms_montecarlo.proto");
  GOOGLE_CHECK(file != NULL);
  RT_MS_Spectrum_descriptor_ = file->message_type(0);
  static const int RT_MS_Spectrum_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Spectrum, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Spectrum, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Spectrum, weight_),
  };
  RT_MS_Spectrum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_Spectrum_descriptor_,
      RT_MS_Spectrum::default_instance_,
      RT_MS_Spectrum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Spectrum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_Spectrum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_Spectrum));
  RT_MS_FieldSize_descriptor_ = file->message_type(1);
  static const int RT_MS_FieldSize_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FieldSize, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FieldSize, fieldsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FieldSize, absolutefactor_),
  };
  RT_MS_FieldSize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_FieldSize_descriptor_,
      RT_MS_FieldSize::default_instance_,
      RT_MS_FieldSize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FieldSize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_FieldSize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_FieldSize));
  RT_MS_ContourVerter_descriptor_ = file->message_type(2);
  static const int RT_MS_ContourVerter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ContourVerter, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ContourVerter, contourverterx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ContourVerter, contourvertery_),
  };
  RT_MS_ContourVerter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_ContourVerter_descriptor_,
      RT_MS_ContourVerter::default_instance_,
      RT_MS_ContourVerter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ContourVerter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_ContourVerter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_ContourVerter));
  RT_MS_MonteCarloVirtualWedgeField_descriptor_ = file->message_type(3);
  static const int RT_MS_MonteCarloVirtualWedgeField_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, collimatorx1position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, collimatorx2position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, relativemu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, correctionfactor_),
  };
  RT_MS_MonteCarloVirtualWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MonteCarloVirtualWedgeField_descriptor_,
      RT_MS_MonteCarloVirtualWedgeField::default_instance_,
      RT_MS_MonteCarloVirtualWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MonteCarloVirtualWedgeField));
  RT_MS_MonteCarloVirtualWedgeInfo_descriptor_ = file->message_type(4);
  static const int RT_MS_MonteCarloVirtualWedgeInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeInfo, virtualuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeInfo, goldenuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeInfo, virtualwedgefieldlist_),
  };
  RT_MS_MonteCarloVirtualWedgeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MonteCarloVirtualWedgeInfo_descriptor_,
      RT_MS_MonteCarloVirtualWedgeInfo::default_instance_,
      RT_MS_MonteCarloVirtualWedgeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloVirtualWedgeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MonteCarloVirtualWedgeInfo));
  RT_MS_MonteCarloPhysicalWedgeField_descriptor_ = file->message_type(5);
  static const int RT_MS_MonteCarloPhysicalWedgeField_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, wedgetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, mu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, dmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, dmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, dmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, hvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carriermu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrierdmudx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrierdmudr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrierdmuda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrierhvlslope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, wedgethick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrierthick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, weightcontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carriercontourverterlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, wedgeuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, carrieruid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, contouruid1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, contouruid2_),
  };
  RT_MS_MonteCarloPhysicalWedgeField_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MonteCarloPhysicalWedgeField_descriptor_,
      RT_MS_MonteCarloPhysicalWedgeField::default_instance_,
      RT_MS_MonteCarloPhysicalWedgeField_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarloPhysicalWedgeField, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MonteCarloPhysicalWedgeField));
  RT_MS_MonteCarlo_descriptor_ = file->message_type(6);
  static const int RT_MS_MonteCarlo_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, xjawtopposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, yjawtopposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, xjawthickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, yjawthickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, mlccenterposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, mlcthickness_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, mlcleafendradius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, airgapwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, tonguegroovewidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, mucorrectionfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, minelectronenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, maxelectronenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, normten_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, oardepth1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, oardepth2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, energyvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, electroncontaminationflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, electronmaxdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, surfacedose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, depthcoefficientk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, offaxiscoefficienta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, df_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, sf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, cone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, ctwo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, cthree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, spectrumlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, fieldsizelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, physicalwedgefieldlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, virtualweidgefieldlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, montercarloname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, wedgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, filepath_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, accessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, algtype_),
  };
  RT_MS_MonteCarlo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_MS_MonteCarlo_descriptor_,
      RT_MS_MonteCarlo::default_instance_,
      RT_MS_MonteCarlo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_MS_MonteCarlo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_MS_MonteCarlo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5fms_5fmontecarlo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_Spectrum_descriptor_, &RT_MS_Spectrum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_FieldSize_descriptor_, &RT_MS_FieldSize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_ContourVerter_descriptor_, &RT_MS_ContourVerter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MonteCarloVirtualWedgeField_descriptor_, &RT_MS_MonteCarloVirtualWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MonteCarloVirtualWedgeInfo_descriptor_, &RT_MS_MonteCarloVirtualWedgeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MonteCarloPhysicalWedgeField_descriptor_, &RT_MS_MonteCarloPhysicalWedgeField::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_MS_MonteCarlo_descriptor_, &RT_MS_MonteCarlo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5fms_5fmontecarlo_2eproto() {
  delete RT_MS_Spectrum::default_instance_;
  delete RT_MS_Spectrum_reflection_;
  delete RT_MS_FieldSize::default_instance_;
  delete RT_MS_FieldSize_reflection_;
  delete RT_MS_ContourVerter::default_instance_;
  delete RT_MS_ContourVerter_reflection_;
  delete RT_MS_MonteCarloVirtualWedgeField::default_instance_;
  delete RT_MS_MonteCarloVirtualWedgeField_reflection_;
  delete RT_MS_MonteCarloVirtualWedgeInfo::default_instance_;
  delete RT_MS_MonteCarloVirtualWedgeInfo_reflection_;
  delete RT_MS_MonteCarloPhysicalWedgeField::default_instance_;
  delete RT_MS_MonteCarloPhysicalWedgeField_reflection_;
  delete RT_MS_MonteCarlo::default_instance_;
  delete RT_MS_MonteCarlo_reflection_;
}

void protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rt_ms_montecarlo.proto\022\010ms.proto\"=\n\016RT"
    "_MS_Spectrum\022\013\n\003uid\030\001 \001(\t\022\016\n\006energy\030\002 \001("
    "\002\022\016\n\006weight\030\003 \001(\002\"I\n\017RT_MS_FieldSize\022\013\n\003"
    "uid\030\001 \001(\t\022\021\n\tfieldSize\030\002 \001(\002\022\026\n\016absolute"
    "Factor\030\003 \001(\002\"R\n\023RT_MS_ContourVerter\022\013\n\003u"
    "id\030\001 \001(\t\022\026\n\016ContourVerterx\030\002 \001(\002\022\026\n\016Cont"
    "ourVertery\030\003 \001(\002\"\232\001\n!RT_MS_MonteCarloVir"
    "tualWedgeField\022\013\n\003uid\030\001 \001(\t\022\034\n\024collimato"
    "rX1Position\030\002 \001(\002\022\034\n\024collimatorX2Positio"
    "n\030\003 \001(\002\022\022\n\nrelativeMU\030\004 \001(\002\022\030\n\020correctio"
    "nFactor\030\005 \001(\002\"\225\001\n RT_MS_MonteCarloVirtua"
    "lWedgeInfo\022\022\n\nvirtualUid\030\001 \001(\t\022\021\n\tgolden"
    "UID\030\002 \001(\t\022J\n\025virtualWedgeFieldList\030\003 \003(\013"
    "2+.ms.proto.RT_MS_MonteCarloVirtualWedge"
    "Field\"\374\003\n\"RT_MS_MonteCarloPhysicalWedgeF"
    "ield\022\017\n\007wedgeId\030\001 \001(\t\022\021\n\twedgeType\030\002 \001(\t"
    "\022\n\n\002mu\030\003 \001(\002\022\r\n\005dmudx\030\004 \001(\002\022\r\n\005dmudr\030\005 \001"
    "(\002\022\r\n\005dmuda\030\006 \001(\002\022\020\n\010hvlSlope\030\007 \001(\002\022\021\n\tC"
    "arriermu\030\010 \001(\002\022\024\n\014Carrierdmudx\030\t \001(\002\022\024\n\014"
    "Carrierdmudr\030\n \001(\002\022\024\n\014Carrierdmuda\030\013 \001(\002"
    "\022\027\n\017CarrierhvlSlope\030\014 \001(\002\022\022\n\nwedgeThick\030"
    "\r \001(\002\022\024\n\014carrierThick\030\016 \001(\002\022>\n\027weightCon"
    "tourVerterList\030\017 \003(\0132\035.ms.proto.RT_MS_Co"
    "ntourVerter\022\?\n\030carrierContourVerterList\030"
    "\020 \003(\0132\035.ms.proto.RT_MS_ContourVerter\022\020\n\010"
    "wedgeUID\030\021 \001(\t\022\022\n\ncarrierUID\030\022 \001(\t\022\023\n\013co"
    "ntourUID1\030\023 \001(\t\022\023\n\013contourUID2\030\024 \001(\t\"\330\007\n"
    "\020RT_MS_MonteCarlo\022\013\n\003uid\030\001 \001(\t\022\021\n\tparent"
    "uid\030\002 \001(\t\022\027\n\017xJawTopPosition\030\003 \001(\002\022\027\n\017yJ"
    "awTopPosition\030\004 \001(\002\022\025\n\rxJawThickness\030\005 \001"
    "(\002\022\025\n\ryJawThickness\030\006 \001(\002\022\031\n\021mlcCenterPo"
    "sition\030\007 \001(\002\022\024\n\014mlcThickness\030\010 \001(\002\022\030\n\020ml"
    "cLeafendRadius\030\t \001(\002\022\023\n\013airGapWidth\030\n \001("
    "\002\022\031\n\021tongueGrooveWidth\030\013 \001(\002\022\032\n\022muCorrec"
    "tionFactor\030\014 \001(\002\022\031\n\021minElectronEnergy\030\r "
    "\001(\002\022\031\n\021maxElectronEnergy\030\016 \001(\002\022\017\n\007normTe"
    "n\030\017 \001(\002\022\021\n\toarDepth1\030\020 \001(\t\022\021\n\toarDepth2\030"
    "\021 \001(\t\022\023\n\013energyValue\030\022 \001(\t\022!\n\031electronCo"
    "ntaminationFlag\030\023 \001(\010\022\030\n\020electronMaxDept"
    "h\030\024 \001(\002\022\023\n\013surfaceDose\030\025 \001(\002\022\031\n\021depthCoe"
    "fficientK\030\026 \001(\002\022\033\n\023offaxisCoefficientA\030\027"
    " \001(\002\022\n\n\002df\030\030 \001(\002\022\n\n\002sf\030\031 \001(\002\022\014\n\004cOne\030\032 \001"
    "(\002\022\014\n\004cTwo\030\033 \001(\002\022\016\n\006cThree\030\034 \001(\002\022.\n\014spec"
    "trumList\030\035 \003(\0132\030.ms.proto.RT_MS_Spectrum"
    "\0220\n\rfieldSizeList\030\036 \003(\0132\031.ms.proto.RT_MS"
    "_FieldSize\022L\n\026physicalWedgeFieldList\030\037 \003"
    "(\0132,.ms.proto.RT_MS_MonteCarloPhysicalWe"
    "dgeField\022J\n\026virtualWeidgeFieldList\030  \003(\013"
    "2*.ms.proto.RT_MS_MonteCarloVirtualWedge"
    "Info\022\027\n\017monterCarloName\030! \001(\t\022\017\n\007wedgeId"
    "\030\" \001(\t\022\020\n\010filePath\030# \001(\t\022\024\n\014accessoryUID"
    "\030$ \001(\t\022\017\n\007algType\030% \001(\005", 2063);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_ms_montecarlo.proto", &protobuf_RegisterTypes);
  RT_MS_Spectrum::default_instance_ = new RT_MS_Spectrum();
  RT_MS_FieldSize::default_instance_ = new RT_MS_FieldSize();
  RT_MS_ContourVerter::default_instance_ = new RT_MS_ContourVerter();
  RT_MS_MonteCarloVirtualWedgeField::default_instance_ = new RT_MS_MonteCarloVirtualWedgeField();
  RT_MS_MonteCarloVirtualWedgeInfo::default_instance_ = new RT_MS_MonteCarloVirtualWedgeInfo();
  RT_MS_MonteCarloPhysicalWedgeField::default_instance_ = new RT_MS_MonteCarloPhysicalWedgeField();
  RT_MS_MonteCarlo::default_instance_ = new RT_MS_MonteCarlo();
  RT_MS_Spectrum::default_instance_->InitAsDefaultInstance();
  RT_MS_FieldSize::default_instance_->InitAsDefaultInstance();
  RT_MS_ContourVerter::default_instance_->InitAsDefaultInstance();
  RT_MS_MonteCarloVirtualWedgeField::default_instance_->InitAsDefaultInstance();
  RT_MS_MonteCarloVirtualWedgeInfo::default_instance_->InitAsDefaultInstance();
  RT_MS_MonteCarloPhysicalWedgeField::default_instance_->InitAsDefaultInstance();
  RT_MS_MonteCarlo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5fms_5fmontecarlo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5fms_5fmontecarlo_2eproto {
  StaticDescriptorInitializer_rt_5fms_5fmontecarlo_2eproto() {
    protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();
  }
} static_descriptor_initializer_rt_5fms_5fmontecarlo_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_Spectrum::kUidFieldNumber;
const int RT_MS_Spectrum::kEnergyFieldNumber;
const int RT_MS_Spectrum::kWeightFieldNumber;
#endif  // !_MSC_VER

RT_MS_Spectrum::RT_MS_Spectrum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_Spectrum::InitAsDefaultInstance() {
}

RT_MS_Spectrum::RT_MS_Spectrum(const RT_MS_Spectrum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_Spectrum::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  energy_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_Spectrum::~RT_MS_Spectrum() {
  SharedDtor();
}

void RT_MS_Spectrum::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_Spectrum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_Spectrum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_Spectrum_descriptor_;
}

const RT_MS_Spectrum& RT_MS_Spectrum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_Spectrum* RT_MS_Spectrum::default_instance_ = NULL;

RT_MS_Spectrum* RT_MS_Spectrum::New() const {
  return new RT_MS_Spectrum;
}

void RT_MS_Spectrum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    energy_ = 0;
    weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_Spectrum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_energy;
        break;
      }
      
      // optional float energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_weight;
        break;
      }
      
      // optional float weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_Spectrum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float energy = 2;
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->energy(), output);
  }
  
  // optional float weight = 3;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_Spectrum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float energy = 2;
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->energy(), target);
  }
  
  // optional float weight = 3;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_Spectrum::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float energy = 2;
    if (has_energy()) {
      total_size += 1 + 4;
    }
    
    // optional float weight = 3;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_Spectrum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_Spectrum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_Spectrum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_Spectrum::MergeFrom(const RT_MS_Spectrum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_Spectrum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_Spectrum::CopyFrom(const RT_MS_Spectrum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_Spectrum::IsInitialized() const {
  
  return true;
}

void RT_MS_Spectrum::Swap(RT_MS_Spectrum* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(energy_, other->energy_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_Spectrum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_Spectrum_descriptor_;
  metadata.reflection = RT_MS_Spectrum_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_FieldSize::kUidFieldNumber;
const int RT_MS_FieldSize::kFieldSizeFieldNumber;
const int RT_MS_FieldSize::kAbsoluteFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_FieldSize::RT_MS_FieldSize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_FieldSize::InitAsDefaultInstance() {
}

RT_MS_FieldSize::RT_MS_FieldSize(const RT_MS_FieldSize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_FieldSize::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fieldsize_ = 0;
  absolutefactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_FieldSize::~RT_MS_FieldSize() {
  SharedDtor();
}

void RT_MS_FieldSize::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_FieldSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_FieldSize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_FieldSize_descriptor_;
}

const RT_MS_FieldSize& RT_MS_FieldSize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_FieldSize* RT_MS_FieldSize::default_instance_ = NULL;

RT_MS_FieldSize* RT_MS_FieldSize::New() const {
  return new RT_MS_FieldSize;
}

void RT_MS_FieldSize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    fieldsize_ = 0;
    absolutefactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_FieldSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_fieldSize;
        break;
      }
      
      // optional float fieldSize = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fieldSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fieldsize_)));
          set_has_fieldsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_absoluteFactor;
        break;
      }
      
      // optional float absoluteFactor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_absoluteFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &absolutefactor_)));
          set_has_absolutefactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_FieldSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float fieldSize = 2;
  if (has_fieldsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fieldsize(), output);
  }
  
  // optional float absoluteFactor = 3;
  if (has_absolutefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->absolutefactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_FieldSize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float fieldSize = 2;
  if (has_fieldsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fieldsize(), target);
  }
  
  // optional float absoluteFactor = 3;
  if (has_absolutefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->absolutefactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_FieldSize::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float fieldSize = 2;
    if (has_fieldsize()) {
      total_size += 1 + 4;
    }
    
    // optional float absoluteFactor = 3;
    if (has_absolutefactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_FieldSize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_FieldSize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_FieldSize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_FieldSize::MergeFrom(const RT_MS_FieldSize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_fieldsize()) {
      set_fieldsize(from.fieldsize());
    }
    if (from.has_absolutefactor()) {
      set_absolutefactor(from.absolutefactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_FieldSize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_FieldSize::CopyFrom(const RT_MS_FieldSize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_FieldSize::IsInitialized() const {
  
  return true;
}

void RT_MS_FieldSize::Swap(RT_MS_FieldSize* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(fieldsize_, other->fieldsize_);
    std::swap(absolutefactor_, other->absolutefactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_FieldSize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_FieldSize_descriptor_;
  metadata.reflection = RT_MS_FieldSize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_ContourVerter::kUidFieldNumber;
const int RT_MS_ContourVerter::kContourVerterxFieldNumber;
const int RT_MS_ContourVerter::kContourVerteryFieldNumber;
#endif  // !_MSC_VER

RT_MS_ContourVerter::RT_MS_ContourVerter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_ContourVerter::InitAsDefaultInstance() {
}

RT_MS_ContourVerter::RT_MS_ContourVerter(const RT_MS_ContourVerter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_ContourVerter::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contourverterx_ = 0;
  contourvertery_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_ContourVerter::~RT_MS_ContourVerter() {
  SharedDtor();
}

void RT_MS_ContourVerter::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_ContourVerter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_ContourVerter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_ContourVerter_descriptor_;
}

const RT_MS_ContourVerter& RT_MS_ContourVerter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_ContourVerter* RT_MS_ContourVerter::default_instance_ = NULL;

RT_MS_ContourVerter* RT_MS_ContourVerter::New() const {
  return new RT_MS_ContourVerter;
}

void RT_MS_ContourVerter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    contourverterx_ = 0;
    contourvertery_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_ContourVerter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_ContourVerterx;
        break;
      }
      
      // optional float ContourVerterx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVerterx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourverterx_)));
          set_has_contourverterx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ContourVertery;
        break;
      }
      
      // optional float ContourVertery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ContourVertery:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contourvertery_)));
          set_has_contourvertery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_ContourVerter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->contourverterx(), output);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->contourvertery(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_ContourVerter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float ContourVerterx = 2;
  if (has_contourverterx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->contourverterx(), target);
  }
  
  // optional float ContourVertery = 3;
  if (has_contourvertery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->contourvertery(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_ContourVerter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float ContourVerterx = 2;
    if (has_contourverterx()) {
      total_size += 1 + 4;
    }
    
    // optional float ContourVertery = 3;
    if (has_contourvertery()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_ContourVerter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_ContourVerter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_ContourVerter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_ContourVerter::MergeFrom(const RT_MS_ContourVerter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_contourverterx()) {
      set_contourverterx(from.contourverterx());
    }
    if (from.has_contourvertery()) {
      set_contourvertery(from.contourvertery());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_ContourVerter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_ContourVerter::CopyFrom(const RT_MS_ContourVerter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_ContourVerter::IsInitialized() const {
  
  return true;
}

void RT_MS_ContourVerter::Swap(RT_MS_ContourVerter* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(contourverterx_, other->contourverterx_);
    std::swap(contourvertery_, other->contourvertery_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_ContourVerter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_ContourVerter_descriptor_;
  metadata.reflection = RT_MS_ContourVerter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MonteCarloVirtualWedgeField::kUidFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeField::kCollimatorX1PositionFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeField::kCollimatorX2PositionFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeField::kRelativeMUFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeField::kCorrectionFactorFieldNumber;
#endif  // !_MSC_VER

RT_MS_MonteCarloVirtualWedgeField::RT_MS_MonteCarloVirtualWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MonteCarloVirtualWedgeField::InitAsDefaultInstance() {
}

RT_MS_MonteCarloVirtualWedgeField::RT_MS_MonteCarloVirtualWedgeField(const RT_MS_MonteCarloVirtualWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MonteCarloVirtualWedgeField::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  collimatorx1position_ = 0;
  collimatorx2position_ = 0;
  relativemu_ = 0;
  correctionfactor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MonteCarloVirtualWedgeField::~RT_MS_MonteCarloVirtualWedgeField() {
  SharedDtor();
}

void RT_MS_MonteCarloVirtualWedgeField::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MonteCarloVirtualWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MonteCarloVirtualWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MonteCarloVirtualWedgeField_descriptor_;
}

const RT_MS_MonteCarloVirtualWedgeField& RT_MS_MonteCarloVirtualWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_MonteCarloVirtualWedgeField* RT_MS_MonteCarloVirtualWedgeField::default_instance_ = NULL;

RT_MS_MonteCarloVirtualWedgeField* RT_MS_MonteCarloVirtualWedgeField::New() const {
  return new RT_MS_MonteCarloVirtualWedgeField;
}

void RT_MS_MonteCarloVirtualWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    collimatorx1position_ = 0;
    collimatorx2position_ = 0;
    relativemu_ = 0;
    correctionfactor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MonteCarloVirtualWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_collimatorX1Position;
        break;
      }
      
      // optional float collimatorX1Position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX1Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx1position_)));
          set_has_collimatorx1position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_collimatorX2Position;
        break;
      }
      
      // optional float collimatorX2Position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_collimatorX2Position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &collimatorx2position_)));
          set_has_collimatorx2position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_relativeMU;
        break;
      }
      
      // optional float relativeMU = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_relativeMU:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relativemu_)));
          set_has_relativemu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_correctionFactor;
        break;
      }
      
      // optional float correctionFactor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_correctionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &correctionfactor_)));
          set_has_correctionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MonteCarloVirtualWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->collimatorx1position(), output);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->collimatorx2position(), output);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->relativemu(), output);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->correctionfactor(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MonteCarloVirtualWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional float collimatorX1Position = 2;
  if (has_collimatorx1position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->collimatorx1position(), target);
  }
  
  // optional float collimatorX2Position = 3;
  if (has_collimatorx2position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->collimatorx2position(), target);
  }
  
  // optional float relativeMU = 4;
  if (has_relativemu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->relativemu(), target);
  }
  
  // optional float correctionFactor = 5;
  if (has_correctionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->correctionfactor(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MonteCarloVirtualWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional float collimatorX1Position = 2;
    if (has_collimatorx1position()) {
      total_size += 1 + 4;
    }
    
    // optional float collimatorX2Position = 3;
    if (has_collimatorx2position()) {
      total_size += 1 + 4;
    }
    
    // optional float relativeMU = 4;
    if (has_relativemu()) {
      total_size += 1 + 4;
    }
    
    // optional float correctionFactor = 5;
    if (has_correctionfactor()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MonteCarloVirtualWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MonteCarloVirtualWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MonteCarloVirtualWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MonteCarloVirtualWedgeField::MergeFrom(const RT_MS_MonteCarloVirtualWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_collimatorx1position()) {
      set_collimatorx1position(from.collimatorx1position());
    }
    if (from.has_collimatorx2position()) {
      set_collimatorx2position(from.collimatorx2position());
    }
    if (from.has_relativemu()) {
      set_relativemu(from.relativemu());
    }
    if (from.has_correctionfactor()) {
      set_correctionfactor(from.correctionfactor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MonteCarloVirtualWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MonteCarloVirtualWedgeField::CopyFrom(const RT_MS_MonteCarloVirtualWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MonteCarloVirtualWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_MonteCarloVirtualWedgeField::Swap(RT_MS_MonteCarloVirtualWedgeField* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(collimatorx1position_, other->collimatorx1position_);
    std::swap(collimatorx2position_, other->collimatorx2position_);
    std::swap(relativemu_, other->relativemu_);
    std::swap(correctionfactor_, other->correctionfactor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MonteCarloVirtualWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MonteCarloVirtualWedgeField_descriptor_;
  metadata.reflection = RT_MS_MonteCarloVirtualWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MonteCarloVirtualWedgeInfo::kVirtualUidFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeInfo::kGoldenUIDFieldNumber;
const int RT_MS_MonteCarloVirtualWedgeInfo::kVirtualWedgeFieldListFieldNumber;
#endif  // !_MSC_VER

RT_MS_MonteCarloVirtualWedgeInfo::RT_MS_MonteCarloVirtualWedgeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MonteCarloVirtualWedgeInfo::InitAsDefaultInstance() {
}

RT_MS_MonteCarloVirtualWedgeInfo::RT_MS_MonteCarloVirtualWedgeInfo(const RT_MS_MonteCarloVirtualWedgeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MonteCarloVirtualWedgeInfo::SharedCtor() {
  _cached_size_ = 0;
  virtualuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  goldenuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MonteCarloVirtualWedgeInfo::~RT_MS_MonteCarloVirtualWedgeInfo() {
  SharedDtor();
}

void RT_MS_MonteCarloVirtualWedgeInfo::SharedDtor() {
  if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
    delete virtualuid_;
  }
  if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
    delete goldenuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MonteCarloVirtualWedgeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MonteCarloVirtualWedgeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MonteCarloVirtualWedgeInfo_descriptor_;
}

const RT_MS_MonteCarloVirtualWedgeInfo& RT_MS_MonteCarloVirtualWedgeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_MonteCarloVirtualWedgeInfo* RT_MS_MonteCarloVirtualWedgeInfo::default_instance_ = NULL;

RT_MS_MonteCarloVirtualWedgeInfo* RT_MS_MonteCarloVirtualWedgeInfo::New() const {
  return new RT_MS_MonteCarloVirtualWedgeInfo;
}

void RT_MS_MonteCarloVirtualWedgeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_virtualuid()) {
      if (virtualuid_ != &::google::protobuf::internal::kEmptyString) {
        virtualuid_->clear();
      }
    }
    if (has_goldenuid()) {
      if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
        goldenuid_->clear();
      }
    }
  }
  virtualwedgefieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MonteCarloVirtualWedgeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string virtualUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_virtualuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->virtualuid().data(), this->virtualuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goldenUID;
        break;
      }
      
      // optional string goldenUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goldenUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_goldenuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->goldenuid().data(), this->goldenuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_virtualWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeField virtualWedgeFieldList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_virtualWedgeFieldList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MonteCarloVirtualWedgeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string virtualUid = 1;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->virtualuid(), output);
  }
  
  // optional string goldenUID = 2;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->goldenuid(), output);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeField virtualWedgeFieldList = 3;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->virtualwedgefieldlist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MonteCarloVirtualWedgeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string virtualUid = 1;
  if (has_virtualuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->virtualuid().data(), this->virtualuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->virtualuid(), target);
  }
  
  // optional string goldenUID = 2;
  if (has_goldenuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->goldenuid().data(), this->goldenuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->goldenuid(), target);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeField virtualWedgeFieldList = 3;
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->virtualwedgefieldlist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MonteCarloVirtualWedgeInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string virtualUid = 1;
    if (has_virtualuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->virtualuid());
    }
    
    // optional string goldenUID = 2;
    if (has_goldenuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->goldenuid());
    }
    
  }
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeField virtualWedgeFieldList = 3;
  total_size += 1 * this->virtualwedgefieldlist_size();
  for (int i = 0; i < this->virtualwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualwedgefieldlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MonteCarloVirtualWedgeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MonteCarloVirtualWedgeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MonteCarloVirtualWedgeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MonteCarloVirtualWedgeInfo::MergeFrom(const RT_MS_MonteCarloVirtualWedgeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  virtualwedgefieldlist_.MergeFrom(from.virtualwedgefieldlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_virtualuid()) {
      set_virtualuid(from.virtualuid());
    }
    if (from.has_goldenuid()) {
      set_goldenuid(from.goldenuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MonteCarloVirtualWedgeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MonteCarloVirtualWedgeInfo::CopyFrom(const RT_MS_MonteCarloVirtualWedgeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MonteCarloVirtualWedgeInfo::IsInitialized() const {
  
  return true;
}

void RT_MS_MonteCarloVirtualWedgeInfo::Swap(RT_MS_MonteCarloVirtualWedgeInfo* other) {
  if (other != this) {
    std::swap(virtualuid_, other->virtualuid_);
    std::swap(goldenuid_, other->goldenuid_);
    virtualwedgefieldlist_.Swap(&other->virtualwedgefieldlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MonteCarloVirtualWedgeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MonteCarloVirtualWedgeInfo_descriptor_;
  metadata.reflection = RT_MS_MonteCarloVirtualWedgeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MonteCarloPhysicalWedgeField::kWedgeIdFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kWedgeTypeFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kMuFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kDmudxFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kDmudrFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kDmudaFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kHvlSlopeFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarriermuFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierdmudxFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierdmudrFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierdmudaFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierhvlSlopeFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kWedgeThickFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierThickFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kWeightContourVerterListFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierContourVerterListFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kWedgeUIDFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kCarrierUIDFieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kContourUID1FieldNumber;
const int RT_MS_MonteCarloPhysicalWedgeField::kContourUID2FieldNumber;
#endif  // !_MSC_VER

RT_MS_MonteCarloPhysicalWedgeField::RT_MS_MonteCarloPhysicalWedgeField()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MonteCarloPhysicalWedgeField::InitAsDefaultInstance() {
}

RT_MS_MonteCarloPhysicalWedgeField::RT_MS_MonteCarloPhysicalWedgeField(const RT_MS_MonteCarloPhysicalWedgeField& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MonteCarloPhysicalWedgeField::SharedCtor() {
  _cached_size_ = 0;
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mu_ = 0;
  dmudx_ = 0;
  dmudr_ = 0;
  dmuda_ = 0;
  hvlslope_ = 0;
  carriermu_ = 0;
  carrierdmudx_ = 0;
  carrierdmudr_ = 0;
  carrierdmuda_ = 0;
  carrierhvlslope_ = 0;
  wedgethick_ = 0;
  carrierthick_ = 0;
  wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  carrieruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contouruid1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contouruid2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MonteCarloPhysicalWedgeField::~RT_MS_MonteCarloPhysicalWedgeField() {
  SharedDtor();
}

void RT_MS_MonteCarloPhysicalWedgeField::SharedDtor() {
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgetype_;
  }
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeuid_;
  }
  if (carrieruid_ != &::google::protobuf::internal::kEmptyString) {
    delete carrieruid_;
  }
  if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid1_;
  }
  if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
    delete contouruid2_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MonteCarloPhysicalWedgeField::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MonteCarloPhysicalWedgeField::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MonteCarloPhysicalWedgeField_descriptor_;
}

const RT_MS_MonteCarloPhysicalWedgeField& RT_MS_MonteCarloPhysicalWedgeField::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_MonteCarloPhysicalWedgeField* RT_MS_MonteCarloPhysicalWedgeField::default_instance_ = NULL;

RT_MS_MonteCarloPhysicalWedgeField* RT_MS_MonteCarloPhysicalWedgeField::New() const {
  return new RT_MS_MonteCarloPhysicalWedgeField;
}

void RT_MS_MonteCarloPhysicalWedgeField::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    if (has_wedgetype()) {
      if (wedgetype_ != &::google::protobuf::internal::kEmptyString) {
        wedgetype_->clear();
      }
    }
    mu_ = 0;
    dmudx_ = 0;
    dmudr_ = 0;
    dmuda_ = 0;
    hvlslope_ = 0;
    carriermu_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    carrierdmudx_ = 0;
    carrierdmudr_ = 0;
    carrierdmuda_ = 0;
    carrierhvlslope_ = 0;
    wedgethick_ = 0;
    carrierthick_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_wedgeuid()) {
      if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeuid_->clear();
      }
    }
    if (has_carrieruid()) {
      if (carrieruid_ != &::google::protobuf::internal::kEmptyString) {
        carrieruid_->clear();
      }
    }
    if (has_contouruid1()) {
      if (contouruid1_ != &::google::protobuf::internal::kEmptyString) {
        contouruid1_->clear();
      }
    }
    if (has_contouruid2()) {
      if (contouruid2_ != &::google::protobuf::internal::kEmptyString) {
        contouruid2_->clear();
      }
    }
  }
  weightcontourverterlist_.Clear();
  carriercontourverterlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MonteCarloPhysicalWedgeField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string wedgeId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wedgeType;
        break;
      }
      
      // optional string wedgeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgetype().data(), this->wedgetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_mu;
        break;
      }
      
      // optional float mu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mu_)));
          set_has_mu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_dmudx;
        break;
      }
      
      // optional float dmudx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudx_)));
          set_has_dmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_dmudr;
        break;
      }
      
      // optional float dmudr = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmudr_)));
          set_has_dmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_dmuda;
        break;
      }
      
      // optional float dmuda = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dmuda_)));
          set_has_dmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_hvlSlope;
        break;
      }
      
      // optional float hvlSlope = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hvlslope_)));
          set_has_hvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_Carriermu;
        break;
      }
      
      // optional float Carriermu = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carriermu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carriermu_)));
          set_has_carriermu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_Carrierdmudx;
        break;
      }
      
      // optional float Carrierdmudx = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudx_)));
          set_has_carrierdmudx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_Carrierdmudr;
        break;
      }
      
      // optional float Carrierdmudr = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmudr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmudr_)));
          set_has_carrierdmudr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_Carrierdmuda;
        break;
      }
      
      // optional float Carrierdmuda = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_Carrierdmuda:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierdmuda_)));
          set_has_carrierdmuda();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_CarrierhvlSlope;
        break;
      }
      
      // optional float CarrierhvlSlope = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_CarrierhvlSlope:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierhvlslope_)));
          set_has_carrierhvlslope();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_wedgeThick;
        break;
      }
      
      // optional float wedgeThick = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wedgeThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wedgethick_)));
          set_has_wedgethick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_carrierThick;
        break;
      }
      
      // optional float carrierThick = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_carrierThick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &carrierthick_)));
          set_has_carrierthick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_weightContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ContourVerter weightContourVerterList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weightContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weightcontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_weightContourVerterList;
        if (input->ExpectTag(130)) goto parse_carrierContourVerterList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_ContourVerter carrierContourVerterList = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierContourVerterList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_carriercontourverterlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_carrierContourVerterList;
        if (input->ExpectTag(138)) goto parse_wedgeUID;
        break;
      }
      
      // optional string wedgeUID = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeuid().data(), this->wedgeuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_carrierUID;
        break;
      }
      
      // optional string carrierUID = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_carrierUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_carrieruid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->carrieruid().data(), this->carrieruid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_contourUID1;
        break;
      }
      
      // optional string contourUID1 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid1().data(), this->contouruid1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_contourUID2;
        break;
      }
      
      // optional string contourUID2 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contourUID2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contouruid2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contouruid2().data(), this->contouruid2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MonteCarloPhysicalWedgeField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string wedgeId = 1;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->wedgeid(), output);
  }
  
  // optional string wedgeType = 2;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->wedgetype(), output);
  }
  
  // optional float mu = 3;
  if (has_mu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mu(), output);
  }
  
  // optional float dmudx = 4;
  if (has_dmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->dmudx(), output);
  }
  
  // optional float dmudr = 5;
  if (has_dmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dmudr(), output);
  }
  
  // optional float dmuda = 6;
  if (has_dmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->dmuda(), output);
  }
  
  // optional float hvlSlope = 7;
  if (has_hvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->hvlslope(), output);
  }
  
  // optional float Carriermu = 8;
  if (has_carriermu()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->carriermu(), output);
  }
  
  // optional float Carrierdmudx = 9;
  if (has_carrierdmudx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->carrierdmudx(), output);
  }
  
  // optional float Carrierdmudr = 10;
  if (has_carrierdmudr()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->carrierdmudr(), output);
  }
  
  // optional float Carrierdmuda = 11;
  if (has_carrierdmuda()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->carrierdmuda(), output);
  }
  
  // optional float CarrierhvlSlope = 12;
  if (has_carrierhvlslope()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->carrierhvlslope(), output);
  }
  
  // optional float wedgeThick = 13;
  if (has_wedgethick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->wedgethick(), output);
  }
  
  // optional float carrierThick = 14;
  if (has_carrierthick()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->carrierthick(), output);
  }
  
  // repeated .ms.proto.RT_MS_ContourVerter weightContourVerterList = 15;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->weightcontourverterlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_ContourVerter carrierContourVerterList = 16;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->carriercontourverterlist(i), output);
  }
  
  // optional string wedgeUID = 17;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->wedgeuid(), output);
  }
  
  // optional string carrierUID = 18;
  if (has_carrieruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrieruid().data(), this->carrieruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->carrieruid(), output);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->contouruid1(), output);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->contouruid2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MonteCarloPhysicalWedgeField::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string wedgeId = 1;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->wedgeid(), target);
  }
  
  // optional string wedgeType = 2;
  if (has_wedgetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgetype().data(), this->wedgetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wedgetype(), target);
  }
  
  // optional float mu = 3;
  if (has_mu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mu(), target);
  }
  
  // optional float dmudx = 4;
  if (has_dmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->dmudx(), target);
  }
  
  // optional float dmudr = 5;
  if (has_dmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dmudr(), target);
  }
  
  // optional float dmuda = 6;
  if (has_dmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->dmuda(), target);
  }
  
  // optional float hvlSlope = 7;
  if (has_hvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->hvlslope(), target);
  }
  
  // optional float Carriermu = 8;
  if (has_carriermu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->carriermu(), target);
  }
  
  // optional float Carrierdmudx = 9;
  if (has_carrierdmudx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->carrierdmudx(), target);
  }
  
  // optional float Carrierdmudr = 10;
  if (has_carrierdmudr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->carrierdmudr(), target);
  }
  
  // optional float Carrierdmuda = 11;
  if (has_carrierdmuda()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->carrierdmuda(), target);
  }
  
  // optional float CarrierhvlSlope = 12;
  if (has_carrierhvlslope()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->carrierhvlslope(), target);
  }
  
  // optional float wedgeThick = 13;
  if (has_wedgethick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->wedgethick(), target);
  }
  
  // optional float carrierThick = 14;
  if (has_carrierthick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->carrierthick(), target);
  }
  
  // repeated .ms.proto.RT_MS_ContourVerter weightContourVerterList = 15;
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->weightcontourverterlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_ContourVerter carrierContourVerterList = 16;
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->carriercontourverterlist(i), target);
  }
  
  // optional string wedgeUID = 17;
  if (has_wedgeuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeuid().data(), this->wedgeuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->wedgeuid(), target);
  }
  
  // optional string carrierUID = 18;
  if (has_carrieruid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->carrieruid().data(), this->carrieruid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->carrieruid(), target);
  }
  
  // optional string contourUID1 = 19;
  if (has_contouruid1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid1().data(), this->contouruid1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->contouruid1(), target);
  }
  
  // optional string contourUID2 = 20;
  if (has_contouruid2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contouruid2().data(), this->contouruid2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->contouruid2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MonteCarloPhysicalWedgeField::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string wedgeId = 1;
    if (has_wedgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional string wedgeType = 2;
    if (has_wedgetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgetype());
    }
    
    // optional float mu = 3;
    if (has_mu()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudx = 4;
    if (has_dmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float dmudr = 5;
    if (has_dmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float dmuda = 6;
    if (has_dmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float hvlSlope = 7;
    if (has_hvlslope()) {
      total_size += 1 + 4;
    }
    
    // optional float Carriermu = 8;
    if (has_carriermu()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float Carrierdmudx = 9;
    if (has_carrierdmudx()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmudr = 10;
    if (has_carrierdmudr()) {
      total_size += 1 + 4;
    }
    
    // optional float Carrierdmuda = 11;
    if (has_carrierdmuda()) {
      total_size += 1 + 4;
    }
    
    // optional float CarrierhvlSlope = 12;
    if (has_carrierhvlslope()) {
      total_size += 1 + 4;
    }
    
    // optional float wedgeThick = 13;
    if (has_wedgethick()) {
      total_size += 1 + 4;
    }
    
    // optional float carrierThick = 14;
    if (has_carrierthick()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string wedgeUID = 17;
    if (has_wedgeuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeuid());
    }
    
    // optional string carrierUID = 18;
    if (has_carrieruid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->carrieruid());
    }
    
    // optional string contourUID1 = 19;
    if (has_contouruid1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid1());
    }
    
    // optional string contourUID2 = 20;
    if (has_contouruid2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contouruid2());
    }
    
  }
  // repeated .ms.proto.RT_MS_ContourVerter weightContourVerterList = 15;
  total_size += 1 * this->weightcontourverterlist_size();
  for (int i = 0; i < this->weightcontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weightcontourverterlist(i));
  }
  
  // repeated .ms.proto.RT_MS_ContourVerter carrierContourVerterList = 16;
  total_size += 2 * this->carriercontourverterlist_size();
  for (int i = 0; i < this->carriercontourverterlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->carriercontourverterlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MonteCarloPhysicalWedgeField::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MonteCarloPhysicalWedgeField* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MonteCarloPhysicalWedgeField*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MonteCarloPhysicalWedgeField::MergeFrom(const RT_MS_MonteCarloPhysicalWedgeField& from) {
  GOOGLE_CHECK_NE(&from, this);
  weightcontourverterlist_.MergeFrom(from.weightcontourverterlist_);
  carriercontourverterlist_.MergeFrom(from.carriercontourverterlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_wedgetype()) {
      set_wedgetype(from.wedgetype());
    }
    if (from.has_mu()) {
      set_mu(from.mu());
    }
    if (from.has_dmudx()) {
      set_dmudx(from.dmudx());
    }
    if (from.has_dmudr()) {
      set_dmudr(from.dmudr());
    }
    if (from.has_dmuda()) {
      set_dmuda(from.dmuda());
    }
    if (from.has_hvlslope()) {
      set_hvlslope(from.hvlslope());
    }
    if (from.has_carriermu()) {
      set_carriermu(from.carriermu());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_carrierdmudx()) {
      set_carrierdmudx(from.carrierdmudx());
    }
    if (from.has_carrierdmudr()) {
      set_carrierdmudr(from.carrierdmudr());
    }
    if (from.has_carrierdmuda()) {
      set_carrierdmuda(from.carrierdmuda());
    }
    if (from.has_carrierhvlslope()) {
      set_carrierhvlslope(from.carrierhvlslope());
    }
    if (from.has_wedgethick()) {
      set_wedgethick(from.wedgethick());
    }
    if (from.has_carrierthick()) {
      set_carrierthick(from.carrierthick());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wedgeuid()) {
      set_wedgeuid(from.wedgeuid());
    }
    if (from.has_carrieruid()) {
      set_carrieruid(from.carrieruid());
    }
    if (from.has_contouruid1()) {
      set_contouruid1(from.contouruid1());
    }
    if (from.has_contouruid2()) {
      set_contouruid2(from.contouruid2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MonteCarloPhysicalWedgeField::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MonteCarloPhysicalWedgeField::CopyFrom(const RT_MS_MonteCarloPhysicalWedgeField& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MonteCarloPhysicalWedgeField::IsInitialized() const {
  
  return true;
}

void RT_MS_MonteCarloPhysicalWedgeField::Swap(RT_MS_MonteCarloPhysicalWedgeField* other) {
  if (other != this) {
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(wedgetype_, other->wedgetype_);
    std::swap(mu_, other->mu_);
    std::swap(dmudx_, other->dmudx_);
    std::swap(dmudr_, other->dmudr_);
    std::swap(dmuda_, other->dmuda_);
    std::swap(hvlslope_, other->hvlslope_);
    std::swap(carriermu_, other->carriermu_);
    std::swap(carrierdmudx_, other->carrierdmudx_);
    std::swap(carrierdmudr_, other->carrierdmudr_);
    std::swap(carrierdmuda_, other->carrierdmuda_);
    std::swap(carrierhvlslope_, other->carrierhvlslope_);
    std::swap(wedgethick_, other->wedgethick_);
    std::swap(carrierthick_, other->carrierthick_);
    weightcontourverterlist_.Swap(&other->weightcontourverterlist_);
    carriercontourverterlist_.Swap(&other->carriercontourverterlist_);
    std::swap(wedgeuid_, other->wedgeuid_);
    std::swap(carrieruid_, other->carrieruid_);
    std::swap(contouruid1_, other->contouruid1_);
    std::swap(contouruid2_, other->contouruid2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MonteCarloPhysicalWedgeField::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MonteCarloPhysicalWedgeField_descriptor_;
  metadata.reflection = RT_MS_MonteCarloPhysicalWedgeField_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_MS_MonteCarlo::kUidFieldNumber;
const int RT_MS_MonteCarlo::kParentuidFieldNumber;
const int RT_MS_MonteCarlo::kXJawTopPositionFieldNumber;
const int RT_MS_MonteCarlo::kYJawTopPositionFieldNumber;
const int RT_MS_MonteCarlo::kXJawThicknessFieldNumber;
const int RT_MS_MonteCarlo::kYJawThicknessFieldNumber;
const int RT_MS_MonteCarlo::kMlcCenterPositionFieldNumber;
const int RT_MS_MonteCarlo::kMlcThicknessFieldNumber;
const int RT_MS_MonteCarlo::kMlcLeafendRadiusFieldNumber;
const int RT_MS_MonteCarlo::kAirGapWidthFieldNumber;
const int RT_MS_MonteCarlo::kTongueGrooveWidthFieldNumber;
const int RT_MS_MonteCarlo::kMuCorrectionFactorFieldNumber;
const int RT_MS_MonteCarlo::kMinElectronEnergyFieldNumber;
const int RT_MS_MonteCarlo::kMaxElectronEnergyFieldNumber;
const int RT_MS_MonteCarlo::kNormTenFieldNumber;
const int RT_MS_MonteCarlo::kOarDepth1FieldNumber;
const int RT_MS_MonteCarlo::kOarDepth2FieldNumber;
const int RT_MS_MonteCarlo::kEnergyValueFieldNumber;
const int RT_MS_MonteCarlo::kElectronContaminationFlagFieldNumber;
const int RT_MS_MonteCarlo::kElectronMaxDepthFieldNumber;
const int RT_MS_MonteCarlo::kSurfaceDoseFieldNumber;
const int RT_MS_MonteCarlo::kDepthCoefficientKFieldNumber;
const int RT_MS_MonteCarlo::kOffaxisCoefficientAFieldNumber;
const int RT_MS_MonteCarlo::kDfFieldNumber;
const int RT_MS_MonteCarlo::kSfFieldNumber;
const int RT_MS_MonteCarlo::kCOneFieldNumber;
const int RT_MS_MonteCarlo::kCTwoFieldNumber;
const int RT_MS_MonteCarlo::kCThreeFieldNumber;
const int RT_MS_MonteCarlo::kSpectrumListFieldNumber;
const int RT_MS_MonteCarlo::kFieldSizeListFieldNumber;
const int RT_MS_MonteCarlo::kPhysicalWedgeFieldListFieldNumber;
const int RT_MS_MonteCarlo::kVirtualWeidgeFieldListFieldNumber;
const int RT_MS_MonteCarlo::kMonterCarloNameFieldNumber;
const int RT_MS_MonteCarlo::kWedgeIdFieldNumber;
const int RT_MS_MonteCarlo::kFilePathFieldNumber;
const int RT_MS_MonteCarlo::kAccessoryUIDFieldNumber;
const int RT_MS_MonteCarlo::kAlgTypeFieldNumber;
#endif  // !_MSC_VER

RT_MS_MonteCarlo::RT_MS_MonteCarlo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_MS_MonteCarlo::InitAsDefaultInstance() {
}

RT_MS_MonteCarlo::RT_MS_MonteCarlo(const RT_MS_MonteCarlo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_MS_MonteCarlo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  xjawtopposition_ = 0;
  yjawtopposition_ = 0;
  xjawthickness_ = 0;
  yjawthickness_ = 0;
  mlccenterposition_ = 0;
  mlcthickness_ = 0;
  mlcleafendradius_ = 0;
  airgapwidth_ = 0;
  tonguegroovewidth_ = 0;
  mucorrectionfactor_ = 0;
  minelectronenergy_ = 0;
  maxelectronenergy_ = 0;
  normten_ = 0;
  oardepth1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oardepth2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  energyvalue_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  electroncontaminationflag_ = false;
  electronmaxdepth_ = 0;
  surfacedose_ = 0;
  depthcoefficientk_ = 0;
  offaxiscoefficienta_ = 0;
  df_ = 0;
  sf_ = 0;
  cone_ = 0;
  ctwo_ = 0;
  cthree_ = 0;
  montercarloname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  filepath_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  algtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_MS_MonteCarlo::~RT_MS_MonteCarlo() {
  SharedDtor();
}

void RT_MS_MonteCarlo::SharedDtor() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (oardepth1_ != &::google::protobuf::internal::kEmptyString) {
    delete oardepth1_;
  }
  if (oardepth2_ != &::google::protobuf::internal::kEmptyString) {
    delete oardepth2_;
  }
  if (energyvalue_ != &::google::protobuf::internal::kEmptyString) {
    delete energyvalue_;
  }
  if (montercarloname_ != &::google::protobuf::internal::kEmptyString) {
    delete montercarloname_;
  }
  if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
    delete wedgeid_;
  }
  if (filepath_ != &::google::protobuf::internal::kEmptyString) {
    delete filepath_;
  }
  if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_MS_MonteCarlo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_MS_MonteCarlo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_MS_MonteCarlo_descriptor_;
}

const RT_MS_MonteCarlo& RT_MS_MonteCarlo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5fms_5fmontecarlo_2eproto();  return *default_instance_;
}

RT_MS_MonteCarlo* RT_MS_MonteCarlo::default_instance_ = NULL;

RT_MS_MonteCarlo* RT_MS_MonteCarlo::New() const {
  return new RT_MS_MonteCarlo;
}

void RT_MS_MonteCarlo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_uid()) {
      if (uid_ != &::google::protobuf::internal::kEmptyString) {
        uid_->clear();
      }
    }
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
    xjawtopposition_ = 0;
    yjawtopposition_ = 0;
    xjawthickness_ = 0;
    yjawthickness_ = 0;
    mlccenterposition_ = 0;
    mlcthickness_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mlcleafendradius_ = 0;
    airgapwidth_ = 0;
    tonguegroovewidth_ = 0;
    mucorrectionfactor_ = 0;
    minelectronenergy_ = 0;
    maxelectronenergy_ = 0;
    normten_ = 0;
    if (has_oardepth1()) {
      if (oardepth1_ != &::google::protobuf::internal::kEmptyString) {
        oardepth1_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_oardepth2()) {
      if (oardepth2_ != &::google::protobuf::internal::kEmptyString) {
        oardepth2_->clear();
      }
    }
    if (has_energyvalue()) {
      if (energyvalue_ != &::google::protobuf::internal::kEmptyString) {
        energyvalue_->clear();
      }
    }
    electroncontaminationflag_ = false;
    electronmaxdepth_ = 0;
    surfacedose_ = 0;
    depthcoefficientk_ = 0;
    offaxiscoefficienta_ = 0;
    df_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sf_ = 0;
    cone_ = 0;
    ctwo_ = 0;
    cthree_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_montercarloname()) {
      if (montercarloname_ != &::google::protobuf::internal::kEmptyString) {
        montercarloname_->clear();
      }
    }
    if (has_wedgeid()) {
      if (wedgeid_ != &::google::protobuf::internal::kEmptyString) {
        wedgeid_->clear();
      }
    }
    if (has_filepath()) {
      if (filepath_ != &::google::protobuf::internal::kEmptyString) {
        filepath_->clear();
      }
    }
    if (has_accessoryuid()) {
      if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accessoryuid_->clear();
      }
    }
    algtype_ = 0;
  }
  spectrumlist_.Clear();
  fieldsizelist_.Clear();
  physicalwedgefieldlist_.Clear();
  virtualweidgefieldlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_MS_MonteCarlo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->uid().data(), this->uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_parentuid;
        break;
      }
      
      // optional string parentuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parentuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_xJawTopPosition;
        break;
      }
      
      // optional float xJawTopPosition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xJawTopPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xjawtopposition_)));
          set_has_xjawtopposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_yJawTopPosition;
        break;
      }
      
      // optional float yJawTopPosition = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yJawTopPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yjawtopposition_)));
          set_has_yjawtopposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_xJawThickness;
        break;
      }
      
      // optional float xJawThickness = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xJawThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xjawthickness_)));
          set_has_xjawthickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_yJawThickness;
        break;
      }
      
      // optional float yJawThickness = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yJawThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yjawthickness_)));
          set_has_yjawthickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_mlcCenterPosition;
        break;
      }
      
      // optional float mlcCenterPosition = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mlcCenterPosition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mlccenterposition_)));
          set_has_mlccenterposition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_mlcThickness;
        break;
      }
      
      // optional float mlcThickness = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mlcThickness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mlcthickness_)));
          set_has_mlcthickness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_mlcLeafendRadius;
        break;
      }
      
      // optional float mlcLeafendRadius = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mlcLeafendRadius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mlcleafendradius_)));
          set_has_mlcleafendradius();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_airGapWidth;
        break;
      }
      
      // optional float airGapWidth = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_airGapWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &airgapwidth_)));
          set_has_airgapwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_tongueGrooveWidth;
        break;
      }
      
      // optional float tongueGrooveWidth = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_tongueGrooveWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tonguegroovewidth_)));
          set_has_tonguegroovewidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_muCorrectionFactor;
        break;
      }
      
      // optional float muCorrectionFactor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_muCorrectionFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mucorrectionfactor_)));
          set_has_mucorrectionfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_minElectronEnergy;
        break;
      }
      
      // optional float minElectronEnergy = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minElectronEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minelectronenergy_)));
          set_has_minelectronenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_maxElectronEnergy;
        break;
      }
      
      // optional float maxElectronEnergy = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxElectronEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxelectronenergy_)));
          set_has_maxelectronenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_normTen;
        break;
      }
      
      // optional float normTen = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_normTen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &normten_)));
          set_has_normten();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_oarDepth1;
        break;
      }
      
      // optional string oarDepth1 = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oarDepth1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oardepth1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oardepth1().data(), this->oardepth1().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_oarDepth2;
        break;
      }
      
      // optional string oarDepth2 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_oarDepth2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oardepth2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->oardepth2().data(), this->oardepth2().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_energyValue;
        break;
      }
      
      // optional string energyValue = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_energyValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_energyvalue()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->energyvalue().data(), this->energyvalue().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_electronContaminationFlag;
        break;
      }
      
      // optional bool electronContaminationFlag = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_electronContaminationFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &electroncontaminationflag_)));
          set_has_electroncontaminationflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(165)) goto parse_electronMaxDepth;
        break;
      }
      
      // optional float electronMaxDepth = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_electronMaxDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &electronmaxdepth_)));
          set_has_electronmaxdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(173)) goto parse_surfaceDose;
        break;
      }
      
      // optional float surfaceDose = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_surfaceDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &surfacedose_)));
          set_has_surfacedose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(181)) goto parse_depthCoefficientK;
        break;
      }
      
      // optional float depthCoefficientK = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_depthCoefficientK:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depthcoefficientk_)));
          set_has_depthcoefficientk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(189)) goto parse_offaxisCoefficientA;
        break;
      }
      
      // optional float offaxisCoefficientA = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_offaxisCoefficientA:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offaxiscoefficienta_)));
          set_has_offaxiscoefficienta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(197)) goto parse_df;
        break;
      }
      
      // optional float df = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_df:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &df_)));
          set_has_df();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(205)) goto parse_sf;
        break;
      }
      
      // optional float sf = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_sf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sf_)));
          set_has_sf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(213)) goto parse_cOne;
        break;
      }
      
      // optional float cOne = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cOne:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cone_)));
          set_has_cone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(221)) goto parse_cTwo;
        break;
      }
      
      // optional float cTwo = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cTwo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ctwo_)));
          set_has_ctwo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(229)) goto parse_cThree;
        break;
      }
      
      // optional float cThree = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cThree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cthree_)));
          set_has_cthree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_spectrumList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_Spectrum spectrumList = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_spectrumList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_spectrumlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_spectrumList;
        if (input->ExpectTag(242)) goto parse_fieldSizeList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_FieldSize fieldSizeList = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fieldSizeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fieldsizelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_fieldSizeList;
        if (input->ExpectTag(250)) goto parse_physicalWedgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MonteCarloPhysicalWedgeField physicalWedgeFieldList = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_physicalWedgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_physicalwedgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_physicalWedgeFieldList;
        if (input->ExpectTag(258)) goto parse_virtualWeidgeFieldList;
        break;
      }
      
      // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeInfo virtualWeidgeFieldList = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_virtualWeidgeFieldList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_virtualweidgefieldlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_virtualWeidgeFieldList;
        if (input->ExpectTag(266)) goto parse_monterCarloName;
        break;
      }
      
      // optional string monterCarloName = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monterCarloName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_montercarloname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->montercarloname().data(), this->montercarloname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_wedgeId;
        break;
      }
      
      // optional string wedgeId = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wedgeId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wedgeid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wedgeid().data(), this->wedgeid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_filePath;
        break;
      }
      
      // optional string filePath = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_filePath:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filepath()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->filepath().data(), this->filepath().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_accessoryUID;
        break;
      }
      
      // optional string accessoryUID = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessoryUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryuid().data(), this->accessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_algType;
        break;
      }
      
      // optional int32 algType = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_algType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &algtype_)));
          set_has_algtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_MS_MonteCarlo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->uid(), output);
  }
  
  // optional string parentuid = 2;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->parentuid(), output);
  }
  
  // optional float xJawTopPosition = 3;
  if (has_xjawtopposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->xjawtopposition(), output);
  }
  
  // optional float yJawTopPosition = 4;
  if (has_yjawtopposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->yjawtopposition(), output);
  }
  
  // optional float xJawThickness = 5;
  if (has_xjawthickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->xjawthickness(), output);
  }
  
  // optional float yJawThickness = 6;
  if (has_yjawthickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yjawthickness(), output);
  }
  
  // optional float mlcCenterPosition = 7;
  if (has_mlccenterposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->mlccenterposition(), output);
  }
  
  // optional float mlcThickness = 8;
  if (has_mlcthickness()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->mlcthickness(), output);
  }
  
  // optional float mlcLeafendRadius = 9;
  if (has_mlcleafendradius()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->mlcleafendradius(), output);
  }
  
  // optional float airGapWidth = 10;
  if (has_airgapwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->airgapwidth(), output);
  }
  
  // optional float tongueGrooveWidth = 11;
  if (has_tonguegroovewidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->tonguegroovewidth(), output);
  }
  
  // optional float muCorrectionFactor = 12;
  if (has_mucorrectionfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->mucorrectionfactor(), output);
  }
  
  // optional float minElectronEnergy = 13;
  if (has_minelectronenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->minelectronenergy(), output);
  }
  
  // optional float maxElectronEnergy = 14;
  if (has_maxelectronenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->maxelectronenergy(), output);
  }
  
  // optional float normTen = 15;
  if (has_normten()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->normten(), output);
  }
  
  // optional string oarDepth1 = 16;
  if (has_oardepth1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oardepth1().data(), this->oardepth1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->oardepth1(), output);
  }
  
  // optional string oarDepth2 = 17;
  if (has_oardepth2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oardepth2().data(), this->oardepth2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->oardepth2(), output);
  }
  
  // optional string energyValue = 18;
  if (has_energyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->energyvalue().data(), this->energyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->energyvalue(), output);
  }
  
  // optional bool electronContaminationFlag = 19;
  if (has_electroncontaminationflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->electroncontaminationflag(), output);
  }
  
  // optional float electronMaxDepth = 20;
  if (has_electronmaxdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->electronmaxdepth(), output);
  }
  
  // optional float surfaceDose = 21;
  if (has_surfacedose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->surfacedose(), output);
  }
  
  // optional float depthCoefficientK = 22;
  if (has_depthcoefficientk()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->depthcoefficientk(), output);
  }
  
  // optional float offaxisCoefficientA = 23;
  if (has_offaxiscoefficienta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->offaxiscoefficienta(), output);
  }
  
  // optional float df = 24;
  if (has_df()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->df(), output);
  }
  
  // optional float sf = 25;
  if (has_sf()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->sf(), output);
  }
  
  // optional float cOne = 26;
  if (has_cone()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->cone(), output);
  }
  
  // optional float cTwo = 27;
  if (has_ctwo()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->ctwo(), output);
  }
  
  // optional float cThree = 28;
  if (has_cthree()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->cthree(), output);
  }
  
  // repeated .ms.proto.RT_MS_Spectrum spectrumList = 29;
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->spectrumlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_FieldSize fieldSizeList = 30;
  for (int i = 0; i < this->fieldsizelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->fieldsizelist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloPhysicalWedgeField physicalWedgeFieldList = 31;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->physicalwedgefieldlist(i), output);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeInfo virtualWeidgeFieldList = 32;
  for (int i = 0; i < this->virtualweidgefieldlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->virtualweidgefieldlist(i), output);
  }
  
  // optional string monterCarloName = 33;
  if (has_montercarloname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->montercarloname().data(), this->montercarloname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->montercarloname(), output);
  }
  
  // optional string wedgeId = 34;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      34, this->wedgeid(), output);
  }
  
  // optional string filePath = 35;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->filepath(), output);
  }
  
  // optional string accessoryUID = 36;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->accessoryuid(), output);
  }
  
  // optional int32 algType = 37;
  if (has_algtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->algtype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_MS_MonteCarlo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->uid().data(), this->uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->uid(), target);
  }
  
  // optional string parentuid = 2;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->parentuid(), target);
  }
  
  // optional float xJawTopPosition = 3;
  if (has_xjawtopposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->xjawtopposition(), target);
  }
  
  // optional float yJawTopPosition = 4;
  if (has_yjawtopposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->yjawtopposition(), target);
  }
  
  // optional float xJawThickness = 5;
  if (has_xjawthickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->xjawthickness(), target);
  }
  
  // optional float yJawThickness = 6;
  if (has_yjawthickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yjawthickness(), target);
  }
  
  // optional float mlcCenterPosition = 7;
  if (has_mlccenterposition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->mlccenterposition(), target);
  }
  
  // optional float mlcThickness = 8;
  if (has_mlcthickness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->mlcthickness(), target);
  }
  
  // optional float mlcLeafendRadius = 9;
  if (has_mlcleafendradius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->mlcleafendradius(), target);
  }
  
  // optional float airGapWidth = 10;
  if (has_airgapwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->airgapwidth(), target);
  }
  
  // optional float tongueGrooveWidth = 11;
  if (has_tonguegroovewidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->tonguegroovewidth(), target);
  }
  
  // optional float muCorrectionFactor = 12;
  if (has_mucorrectionfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->mucorrectionfactor(), target);
  }
  
  // optional float minElectronEnergy = 13;
  if (has_minelectronenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->minelectronenergy(), target);
  }
  
  // optional float maxElectronEnergy = 14;
  if (has_maxelectronenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->maxelectronenergy(), target);
  }
  
  // optional float normTen = 15;
  if (has_normten()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->normten(), target);
  }
  
  // optional string oarDepth1 = 16;
  if (has_oardepth1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oardepth1().data(), this->oardepth1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->oardepth1(), target);
  }
  
  // optional string oarDepth2 = 17;
  if (has_oardepth2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->oardepth2().data(), this->oardepth2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->oardepth2(), target);
  }
  
  // optional string energyValue = 18;
  if (has_energyvalue()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->energyvalue().data(), this->energyvalue().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->energyvalue(), target);
  }
  
  // optional bool electronContaminationFlag = 19;
  if (has_electroncontaminationflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->electroncontaminationflag(), target);
  }
  
  // optional float electronMaxDepth = 20;
  if (has_electronmaxdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(20, this->electronmaxdepth(), target);
  }
  
  // optional float surfaceDose = 21;
  if (has_surfacedose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(21, this->surfacedose(), target);
  }
  
  // optional float depthCoefficientK = 22;
  if (has_depthcoefficientk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(22, this->depthcoefficientk(), target);
  }
  
  // optional float offaxisCoefficientA = 23;
  if (has_offaxiscoefficienta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(23, this->offaxiscoefficienta(), target);
  }
  
  // optional float df = 24;
  if (has_df()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->df(), target);
  }
  
  // optional float sf = 25;
  if (has_sf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->sf(), target);
  }
  
  // optional float cOne = 26;
  if (has_cone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(26, this->cone(), target);
  }
  
  // optional float cTwo = 27;
  if (has_ctwo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(27, this->ctwo(), target);
  }
  
  // optional float cThree = 28;
  if (has_cthree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(28, this->cthree(), target);
  }
  
  // repeated .ms.proto.RT_MS_Spectrum spectrumList = 29;
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->spectrumlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_FieldSize fieldSizeList = 30;
  for (int i = 0; i < this->fieldsizelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->fieldsizelist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloPhysicalWedgeField physicalWedgeFieldList = 31;
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->physicalwedgefieldlist(i), target);
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeInfo virtualWeidgeFieldList = 32;
  for (int i = 0; i < this->virtualweidgefieldlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->virtualweidgefieldlist(i), target);
  }
  
  // optional string monterCarloName = 33;
  if (has_montercarloname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->montercarloname().data(), this->montercarloname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->montercarloname(), target);
  }
  
  // optional string wedgeId = 34;
  if (has_wedgeid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wedgeid().data(), this->wedgeid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->wedgeid(), target);
  }
  
  // optional string filePath = 35;
  if (has_filepath()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->filepath().data(), this->filepath().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->filepath(), target);
  }
  
  // optional string accessoryUID = 36;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->accessoryuid(), target);
  }
  
  // optional int32 algType = 37;
  if (has_algtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->algtype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_MS_MonteCarlo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->uid());
    }
    
    // optional string parentuid = 2;
    if (has_parentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
    // optional float xJawTopPosition = 3;
    if (has_xjawtopposition()) {
      total_size += 1 + 4;
    }
    
    // optional float yJawTopPosition = 4;
    if (has_yjawtopposition()) {
      total_size += 1 + 4;
    }
    
    // optional float xJawThickness = 5;
    if (has_xjawthickness()) {
      total_size += 1 + 4;
    }
    
    // optional float yJawThickness = 6;
    if (has_yjawthickness()) {
      total_size += 1 + 4;
    }
    
    // optional float mlcCenterPosition = 7;
    if (has_mlccenterposition()) {
      total_size += 1 + 4;
    }
    
    // optional float mlcThickness = 8;
    if (has_mlcthickness()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float mlcLeafendRadius = 9;
    if (has_mlcleafendradius()) {
      total_size += 1 + 4;
    }
    
    // optional float airGapWidth = 10;
    if (has_airgapwidth()) {
      total_size += 1 + 4;
    }
    
    // optional float tongueGrooveWidth = 11;
    if (has_tonguegroovewidth()) {
      total_size += 1 + 4;
    }
    
    // optional float muCorrectionFactor = 12;
    if (has_mucorrectionfactor()) {
      total_size += 1 + 4;
    }
    
    // optional float minElectronEnergy = 13;
    if (has_minelectronenergy()) {
      total_size += 1 + 4;
    }
    
    // optional float maxElectronEnergy = 14;
    if (has_maxelectronenergy()) {
      total_size += 1 + 4;
    }
    
    // optional float normTen = 15;
    if (has_normten()) {
      total_size += 1 + 4;
    }
    
    // optional string oarDepth1 = 16;
    if (has_oardepth1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oardepth1());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional string oarDepth2 = 17;
    if (has_oardepth2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->oardepth2());
    }
    
    // optional string energyValue = 18;
    if (has_energyvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->energyvalue());
    }
    
    // optional bool electronContaminationFlag = 19;
    if (has_electroncontaminationflag()) {
      total_size += 2 + 1;
    }
    
    // optional float electronMaxDepth = 20;
    if (has_electronmaxdepth()) {
      total_size += 2 + 4;
    }
    
    // optional float surfaceDose = 21;
    if (has_surfacedose()) {
      total_size += 2 + 4;
    }
    
    // optional float depthCoefficientK = 22;
    if (has_depthcoefficientk()) {
      total_size += 2 + 4;
    }
    
    // optional float offaxisCoefficientA = 23;
    if (has_offaxiscoefficienta()) {
      total_size += 2 + 4;
    }
    
    // optional float df = 24;
    if (has_df()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float sf = 25;
    if (has_sf()) {
      total_size += 2 + 4;
    }
    
    // optional float cOne = 26;
    if (has_cone()) {
      total_size += 2 + 4;
    }
    
    // optional float cTwo = 27;
    if (has_ctwo()) {
      total_size += 2 + 4;
    }
    
    // optional float cThree = 28;
    if (has_cthree()) {
      total_size += 2 + 4;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string monterCarloName = 33;
    if (has_montercarloname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->montercarloname());
    }
    
    // optional string wedgeId = 34;
    if (has_wedgeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wedgeid());
    }
    
    // optional string filePath = 35;
    if (has_filepath()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filepath());
    }
    
    // optional string accessoryUID = 36;
    if (has_accessoryuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryuid());
    }
    
    // optional int32 algType = 37;
    if (has_algtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->algtype());
    }
    
  }
  // repeated .ms.proto.RT_MS_Spectrum spectrumList = 29;
  total_size += 2 * this->spectrumlist_size();
  for (int i = 0; i < this->spectrumlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->spectrumlist(i));
  }
  
  // repeated .ms.proto.RT_MS_FieldSize fieldSizeList = 30;
  total_size += 2 * this->fieldsizelist_size();
  for (int i = 0; i < this->fieldsizelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fieldsizelist(i));
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloPhysicalWedgeField physicalWedgeFieldList = 31;
  total_size += 2 * this->physicalwedgefieldlist_size();
  for (int i = 0; i < this->physicalwedgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->physicalwedgefieldlist(i));
  }
  
  // repeated .ms.proto.RT_MS_MonteCarloVirtualWedgeInfo virtualWeidgeFieldList = 32;
  total_size += 2 * this->virtualweidgefieldlist_size();
  for (int i = 0; i < this->virtualweidgefieldlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->virtualweidgefieldlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_MS_MonteCarlo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_MS_MonteCarlo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_MS_MonteCarlo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_MS_MonteCarlo::MergeFrom(const RT_MS_MonteCarlo& from) {
  GOOGLE_CHECK_NE(&from, this);
  spectrumlist_.MergeFrom(from.spectrumlist_);
  fieldsizelist_.MergeFrom(from.fieldsizelist_);
  physicalwedgefieldlist_.MergeFrom(from.physicalwedgefieldlist_);
  virtualweidgefieldlist_.MergeFrom(from.virtualweidgefieldlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
    if (from.has_xjawtopposition()) {
      set_xjawtopposition(from.xjawtopposition());
    }
    if (from.has_yjawtopposition()) {
      set_yjawtopposition(from.yjawtopposition());
    }
    if (from.has_xjawthickness()) {
      set_xjawthickness(from.xjawthickness());
    }
    if (from.has_yjawthickness()) {
      set_yjawthickness(from.yjawthickness());
    }
    if (from.has_mlccenterposition()) {
      set_mlccenterposition(from.mlccenterposition());
    }
    if (from.has_mlcthickness()) {
      set_mlcthickness(from.mlcthickness());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mlcleafendradius()) {
      set_mlcleafendradius(from.mlcleafendradius());
    }
    if (from.has_airgapwidth()) {
      set_airgapwidth(from.airgapwidth());
    }
    if (from.has_tonguegroovewidth()) {
      set_tonguegroovewidth(from.tonguegroovewidth());
    }
    if (from.has_mucorrectionfactor()) {
      set_mucorrectionfactor(from.mucorrectionfactor());
    }
    if (from.has_minelectronenergy()) {
      set_minelectronenergy(from.minelectronenergy());
    }
    if (from.has_maxelectronenergy()) {
      set_maxelectronenergy(from.maxelectronenergy());
    }
    if (from.has_normten()) {
      set_normten(from.normten());
    }
    if (from.has_oardepth1()) {
      set_oardepth1(from.oardepth1());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_oardepth2()) {
      set_oardepth2(from.oardepth2());
    }
    if (from.has_energyvalue()) {
      set_energyvalue(from.energyvalue());
    }
    if (from.has_electroncontaminationflag()) {
      set_electroncontaminationflag(from.electroncontaminationflag());
    }
    if (from.has_electronmaxdepth()) {
      set_electronmaxdepth(from.electronmaxdepth());
    }
    if (from.has_surfacedose()) {
      set_surfacedose(from.surfacedose());
    }
    if (from.has_depthcoefficientk()) {
      set_depthcoefficientk(from.depthcoefficientk());
    }
    if (from.has_offaxiscoefficienta()) {
      set_offaxiscoefficienta(from.offaxiscoefficienta());
    }
    if (from.has_df()) {
      set_df(from.df());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sf()) {
      set_sf(from.sf());
    }
    if (from.has_cone()) {
      set_cone(from.cone());
    }
    if (from.has_ctwo()) {
      set_ctwo(from.ctwo());
    }
    if (from.has_cthree()) {
      set_cthree(from.cthree());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_montercarloname()) {
      set_montercarloname(from.montercarloname());
    }
    if (from.has_wedgeid()) {
      set_wedgeid(from.wedgeid());
    }
    if (from.has_filepath()) {
      set_filepath(from.filepath());
    }
    if (from.has_accessoryuid()) {
      set_accessoryuid(from.accessoryuid());
    }
    if (from.has_algtype()) {
      set_algtype(from.algtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_MS_MonteCarlo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_MS_MonteCarlo::CopyFrom(const RT_MS_MonteCarlo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_MS_MonteCarlo::IsInitialized() const {
  
  return true;
}

void RT_MS_MonteCarlo::Swap(RT_MS_MonteCarlo* other) {
  if (other != this) {
    std::swap(uid_, other->uid_);
    std::swap(parentuid_, other->parentuid_);
    std::swap(xjawtopposition_, other->xjawtopposition_);
    std::swap(yjawtopposition_, other->yjawtopposition_);
    std::swap(xjawthickness_, other->xjawthickness_);
    std::swap(yjawthickness_, other->yjawthickness_);
    std::swap(mlccenterposition_, other->mlccenterposition_);
    std::swap(mlcthickness_, other->mlcthickness_);
    std::swap(mlcleafendradius_, other->mlcleafendradius_);
    std::swap(airgapwidth_, other->airgapwidth_);
    std::swap(tonguegroovewidth_, other->tonguegroovewidth_);
    std::swap(mucorrectionfactor_, other->mucorrectionfactor_);
    std::swap(minelectronenergy_, other->minelectronenergy_);
    std::swap(maxelectronenergy_, other->maxelectronenergy_);
    std::swap(normten_, other->normten_);
    std::swap(oardepth1_, other->oardepth1_);
    std::swap(oardepth2_, other->oardepth2_);
    std::swap(energyvalue_, other->energyvalue_);
    std::swap(electroncontaminationflag_, other->electroncontaminationflag_);
    std::swap(electronmaxdepth_, other->electronmaxdepth_);
    std::swap(surfacedose_, other->surfacedose_);
    std::swap(depthcoefficientk_, other->depthcoefficientk_);
    std::swap(offaxiscoefficienta_, other->offaxiscoefficienta_);
    std::swap(df_, other->df_);
    std::swap(sf_, other->sf_);
    std::swap(cone_, other->cone_);
    std::swap(ctwo_, other->ctwo_);
    std::swap(cthree_, other->cthree_);
    spectrumlist_.Swap(&other->spectrumlist_);
    fieldsizelist_.Swap(&other->fieldsizelist_);
    physicalwedgefieldlist_.Swap(&other->physicalwedgefieldlist_);
    virtualweidgefieldlist_.Swap(&other->virtualweidgefieldlist_);
    std::swap(montercarloname_, other->montercarloname_);
    std::swap(wedgeid_, other->wedgeid_);
    std::swap(filepath_, other->filepath_);
    std::swap(accessoryuid_, other->accessoryuid_);
    std::swap(algtype_, other->algtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_MS_MonteCarlo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_MS_MonteCarlo_descriptor_;
  metadata.reflection = RT_MS_MonteCarlo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

// @@protoc_insertion_point(global_scope)
