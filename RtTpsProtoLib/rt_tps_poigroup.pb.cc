// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_poigroup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_PoiGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_PoiGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_PoiInformation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_PoiInformation_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_BeamContributionDose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_BeamContributionDose_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fpoigroup_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_poigroup.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_PoiGroup_descriptor_ = file->message_type(0);
  static const int RT_TPS_PoiGroup_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiGroup, poiinfolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiGroup, groupid_),
  };
  RT_TPS_PoiGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_PoiGroup_descriptor_,
      RT_TPS_PoiGroup::default_instance_,
      RT_TPS_PoiGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_PoiGroup));
  RT_TPS_PoiInformation_descriptor_ = file->message_type(1);
  static const int RT_TPS_PoiInformation_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, poiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, role_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, locktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, xcoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, ycoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, zcoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, xcoordincol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, ycoordincol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, pointdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, relatedbeamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, doseatrelatedbeam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, beamdoselist_),
  };
  RT_TPS_PoiInformation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_PoiInformation_descriptor_,
      RT_TPS_PoiInformation::default_instance_,
      RT_TPS_PoiInformation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_PoiInformation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_PoiInformation));
  RT_TPS_BeamContributionDose_descriptor_ = file->message_type(2);
  static const int RT_TPS_BeamContributionDose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamContributionDose, beamuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamContributionDose, contributiondose_),
  };
  RT_TPS_BeamContributionDose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_BeamContributionDose_descriptor_,
      RT_TPS_BeamContributionDose::default_instance_,
      RT_TPS_BeamContributionDose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamContributionDose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamContributionDose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_BeamContributionDose));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fpoigroup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_PoiGroup_descriptor_, &RT_TPS_PoiGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_PoiInformation_descriptor_, &RT_TPS_PoiInformation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_BeamContributionDose_descriptor_, &RT_TPS_BeamContributionDose::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fpoigroup_2eproto() {
  delete RT_TPS_PoiGroup::default_instance_;
  delete RT_TPS_PoiGroup_reflection_;
  delete RT_TPS_PoiInformation::default_instance_;
  delete RT_TPS_PoiInformation_reflection_;
  delete RT_TPS_BeamContributionDose::default_instance_;
  delete RT_TPS_BeamContributionDose_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025rt_tps_poigroup.proto\022\ttps.proto\"Y\n\017RT"
    "_TPS_PoiGroup\0225\n\013poiInfoList\030\001 \003(\0132 .tps"
    ".proto.RT_TPS_PoiInformation\022\017\n\007groupID\030"
    "\002 \001(\t\"\204\003\n\025RT_TPS_PoiInformation\022\016\n\006poiUi"
    "d\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022\014\n\004role\030\003 \001(\005\022\r\n\005c"
    "olor\030\004 \003(\002\022\021\n\tisVisible\030\005 \001(\010\022\020\n\010lockTyp"
    "e\030\006 \001(\005\022\023\n\013xCoordInPat\030\007 \001(\002\022\023\n\013yCoordIn"
    "Pat\030\010 \001(\002\022\023\n\013zCoordInPat\030\t \001(\002\022\014\n\004dose\030\n"
    " \001(\002\022\023\n\013xCoordInCol\030\013 \001(\002\022\023\n\013yCoordInCol"
    "\030\014 \001(\002\022\022\n\npointDepth\030\r \001(\002\022\026\n\016relatedBea"
    "mUID\030\016 \001(\t\022\031\n\021doseAtRelatedBeam\030\017 \001(\002\022\017\n"
    "\007planUid\030\020 \001(\t\022<\n\014beamDoseList\030\021 \003(\0132&.t"
    "ps.proto.RT_TPS_BeamContributionDose\"H\n\033"
    "RT_TPS_BeamContributionDose\022\017\n\007beamUid\030\001"
    " \001(\t\022\030\n\020contributionDose\030\002 \001(\002", 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_poigroup.proto", &protobuf_RegisterTypes);
  RT_TPS_PoiGroup::default_instance_ = new RT_TPS_PoiGroup();
  RT_TPS_PoiInformation::default_instance_ = new RT_TPS_PoiInformation();
  RT_TPS_BeamContributionDose::default_instance_ = new RT_TPS_BeamContributionDose();
  RT_TPS_PoiGroup::default_instance_->InitAsDefaultInstance();
  RT_TPS_PoiInformation::default_instance_->InitAsDefaultInstance();
  RT_TPS_BeamContributionDose::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fpoigroup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fpoigroup_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fpoigroup_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fpoigroup_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_PoiGroup::kPoiInfoListFieldNumber;
const int RT_TPS_PoiGroup::kGroupIDFieldNumber;
#endif  // !_MSC_VER

RT_TPS_PoiGroup::RT_TPS_PoiGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_PoiGroup::InitAsDefaultInstance() {
}

RT_TPS_PoiGroup::RT_TPS_PoiGroup(const RT_TPS_PoiGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_PoiGroup::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_PoiGroup::~RT_TPS_PoiGroup() {
  SharedDtor();
}

void RT_TPS_PoiGroup::SharedDtor() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    delete groupid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_PoiGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_PoiGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_PoiGroup_descriptor_;
}

const RT_TPS_PoiGroup& RT_TPS_PoiGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto();  return *default_instance_;
}

RT_TPS_PoiGroup* RT_TPS_PoiGroup::default_instance_ = NULL;

RT_TPS_PoiGroup* RT_TPS_PoiGroup::New() const {
  return new RT_TPS_PoiGroup;
}

void RT_TPS_PoiGroup::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_groupid()) {
      if (groupid_ != &::google::protobuf::internal::kEmptyString) {
        groupid_->clear();
      }
    }
  }
  poiinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_PoiGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_PoiInformation poiInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poiinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_poiInfoList;
        if (input->ExpectTag(18)) goto parse_groupID;
        break;
      }
      
      // optional string groupID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_PoiGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_PoiInformation poiInfoList = 1;
  for (int i = 0; i < this->poiinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poiinfolist(i), output);
  }
  
  // optional string groupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->groupid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_PoiGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_PoiInformation poiInfoList = 1;
  for (int i = 0; i < this->poiinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poiinfolist(i), target);
  }
  
  // optional string groupID = 2;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->groupid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_PoiGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string groupID = 2;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->groupid());
    }
    
  }
  // repeated .tps.proto.RT_TPS_PoiInformation poiInfoList = 1;
  total_size += 1 * this->poiinfolist_size();
  for (int i = 0; i < this->poiinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poiinfolist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_PoiGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_PoiGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_PoiGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_PoiGroup::MergeFrom(const RT_TPS_PoiGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  poiinfolist_.MergeFrom(from.poiinfolist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_PoiGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_PoiGroup::CopyFrom(const RT_TPS_PoiGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_PoiGroup::IsInitialized() const {
  
  return true;
}

void RT_TPS_PoiGroup::Swap(RT_TPS_PoiGroup* other) {
  if (other != this) {
    poiinfolist_.Swap(&other->poiinfolist_);
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_PoiGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_PoiGroup_descriptor_;
  metadata.reflection = RT_TPS_PoiGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_PoiInformation::kPoiUidFieldNumber;
const int RT_TPS_PoiInformation::kNameFieldNumber;
const int RT_TPS_PoiInformation::kRoleFieldNumber;
const int RT_TPS_PoiInformation::kColorFieldNumber;
const int RT_TPS_PoiInformation::kIsVisibleFieldNumber;
const int RT_TPS_PoiInformation::kLockTypeFieldNumber;
const int RT_TPS_PoiInformation::kXCoordInPatFieldNumber;
const int RT_TPS_PoiInformation::kYCoordInPatFieldNumber;
const int RT_TPS_PoiInformation::kZCoordInPatFieldNumber;
const int RT_TPS_PoiInformation::kDoseFieldNumber;
const int RT_TPS_PoiInformation::kXCoordInColFieldNumber;
const int RT_TPS_PoiInformation::kYCoordInColFieldNumber;
const int RT_TPS_PoiInformation::kPointDepthFieldNumber;
const int RT_TPS_PoiInformation::kRelatedBeamUIDFieldNumber;
const int RT_TPS_PoiInformation::kDoseAtRelatedBeamFieldNumber;
const int RT_TPS_PoiInformation::kPlanUidFieldNumber;
const int RT_TPS_PoiInformation::kBeamDoseListFieldNumber;
#endif  // !_MSC_VER

RT_TPS_PoiInformation::RT_TPS_PoiInformation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_PoiInformation::InitAsDefaultInstance() {
}

RT_TPS_PoiInformation::RT_TPS_PoiInformation(const RT_TPS_PoiInformation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_PoiInformation::SharedCtor() {
  _cached_size_ = 0;
  poiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  role_ = 0;
  isvisible_ = false;
  locktype_ = 0;
  xcoordinpat_ = 0;
  ycoordinpat_ = 0;
  zcoordinpat_ = 0;
  dose_ = 0;
  xcoordincol_ = 0;
  ycoordincol_ = 0;
  pointdepth_ = 0;
  relatedbeamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  doseatrelatedbeam_ = 0;
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_PoiInformation::~RT_TPS_PoiInformation() {
  SharedDtor();
}

void RT_TPS_PoiInformation::SharedDtor() {
  if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete poiuid_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (relatedbeamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete relatedbeamuid_;
  }
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_PoiInformation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_PoiInformation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_PoiInformation_descriptor_;
}

const RT_TPS_PoiInformation& RT_TPS_PoiInformation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto();  return *default_instance_;
}

RT_TPS_PoiInformation* RT_TPS_PoiInformation::default_instance_ = NULL;

RT_TPS_PoiInformation* RT_TPS_PoiInformation::New() const {
  return new RT_TPS_PoiInformation;
}

void RT_TPS_PoiInformation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poiuid()) {
      if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
        poiuid_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    role_ = 0;
    isvisible_ = false;
    locktype_ = 0;
    xcoordinpat_ = 0;
    ycoordinpat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zcoordinpat_ = 0;
    dose_ = 0;
    xcoordincol_ = 0;
    ycoordincol_ = 0;
    pointdepth_ = 0;
    if (has_relatedbeamuid()) {
      if (relatedbeamuid_ != &::google::protobuf::internal::kEmptyString) {
        relatedbeamuid_->clear();
      }
    }
    doseatrelatedbeam_ = 0;
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
  }
  color_.Clear();
  beamdoselist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_PoiInformation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poiUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poiuid().data(), this->poiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_role;
        break;
      }
      
      // optional int32 role = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_role:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
          set_has_role();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }
      
      // repeated float color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        if (input->ExpectTag(40)) goto parse_isVisible;
        break;
      }
      
      // optional bool isVisible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lockType;
        break;
      }
      
      // optional int32 lockType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locktype_)));
          set_has_locktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_xCoordInPat;
        break;
      }
      
      // optional float xCoordInPat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xcoordinpat_)));
          set_has_xcoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_yCoordInPat;
        break;
      }
      
      // optional float yCoordInPat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ycoordinpat_)));
          set_has_ycoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_zCoordInPat;
        break;
      }
      
      // optional float zCoordInPat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zcoordinpat_)));
          set_has_zcoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_dose;
        break;
      }
      
      // optional float dose = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_xCoordInCol;
        break;
      }
      
      // optional float xCoordInCol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xCoordInCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xcoordincol_)));
          set_has_xcoordincol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_yCoordInCol;
        break;
      }
      
      // optional float yCoordInCol = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yCoordInCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ycoordincol_)));
          set_has_ycoordincol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pointDepth;
        break;
      }
      
      // optional float pointDepth = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointdepth_)));
          set_has_pointdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_relatedBeamUID;
        break;
      }
      
      // optional string relatedBeamUID = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_relatedBeamUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_relatedbeamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->relatedbeamuid().data(), this->relatedbeamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_doseAtRelatedBeam;
        break;
      }
      
      // optional float doseAtRelatedBeam = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_doseAtRelatedBeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &doseatrelatedbeam_)));
          set_has_doseatrelatedbeam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_planUid;
        break;
      }
      
      // optional string planUid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_beamDoseList;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_BeamContributionDose beamDoseList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamDoseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamdoselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_beamDoseList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_PoiInformation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poiUid = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poiuid(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional int32 role = 3;
  if (has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->role(), output);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->color(i), output);
  }
  
  // optional bool isVisible = 5;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isvisible(), output);
  }
  
  // optional int32 lockType = 6;
  if (has_locktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->locktype(), output);
  }
  
  // optional float xCoordInPat = 7;
  if (has_xcoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->xcoordinpat(), output);
  }
  
  // optional float yCoordInPat = 8;
  if (has_ycoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ycoordinpat(), output);
  }
  
  // optional float zCoordInPat = 9;
  if (has_zcoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->zcoordinpat(), output);
  }
  
  // optional float dose = 10;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dose(), output);
  }
  
  // optional float xCoordInCol = 11;
  if (has_xcoordincol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->xcoordincol(), output);
  }
  
  // optional float yCoordInCol = 12;
  if (has_ycoordincol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ycoordincol(), output);
  }
  
  // optional float pointDepth = 13;
  if (has_pointdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pointdepth(), output);
  }
  
  // optional string relatedBeamUID = 14;
  if (has_relatedbeamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relatedbeamuid().data(), this->relatedbeamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->relatedbeamuid(), output);
  }
  
  // optional float doseAtRelatedBeam = 15;
  if (has_doseatrelatedbeam()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->doseatrelatedbeam(), output);
  }
  
  // optional string planUid = 16;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->planuid(), output);
  }
  
  // repeated .tps.proto.RT_TPS_BeamContributionDose beamDoseList = 17;
  for (int i = 0; i < this->beamdoselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->beamdoselist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_PoiInformation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poiUid = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poiuid(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional int32 role = 3;
  if (has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->role(), target);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->color(i), target);
  }
  
  // optional bool isVisible = 5;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isvisible(), target);
  }
  
  // optional int32 lockType = 6;
  if (has_locktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->locktype(), target);
  }
  
  // optional float xCoordInPat = 7;
  if (has_xcoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->xcoordinpat(), target);
  }
  
  // optional float yCoordInPat = 8;
  if (has_ycoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ycoordinpat(), target);
  }
  
  // optional float zCoordInPat = 9;
  if (has_zcoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->zcoordinpat(), target);
  }
  
  // optional float dose = 10;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dose(), target);
  }
  
  // optional float xCoordInCol = 11;
  if (has_xcoordincol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->xcoordincol(), target);
  }
  
  // optional float yCoordInCol = 12;
  if (has_ycoordincol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ycoordincol(), target);
  }
  
  // optional float pointDepth = 13;
  if (has_pointdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pointdepth(), target);
  }
  
  // optional string relatedBeamUID = 14;
  if (has_relatedbeamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->relatedbeamuid().data(), this->relatedbeamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->relatedbeamuid(), target);
  }
  
  // optional float doseAtRelatedBeam = 15;
  if (has_doseatrelatedbeam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->doseatrelatedbeam(), target);
  }
  
  // optional string planUid = 16;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->planuid(), target);
  }
  
  // repeated .tps.proto.RT_TPS_BeamContributionDose beamDoseList = 17;
  for (int i = 0; i < this->beamdoselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->beamdoselist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_PoiInformation::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poiUid = 1;
    if (has_poiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poiuid());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 role = 3;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }
    
    // optional bool isVisible = 5;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lockType = 6;
    if (has_locktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locktype());
    }
    
    // optional float xCoordInPat = 7;
    if (has_xcoordinpat()) {
      total_size += 1 + 4;
    }
    
    // optional float yCoordInPat = 8;
    if (has_ycoordinpat()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float zCoordInPat = 9;
    if (has_zcoordinpat()) {
      total_size += 1 + 4;
    }
    
    // optional float dose = 10;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
    // optional float xCoordInCol = 11;
    if (has_xcoordincol()) {
      total_size += 1 + 4;
    }
    
    // optional float yCoordInCol = 12;
    if (has_ycoordincol()) {
      total_size += 1 + 4;
    }
    
    // optional float pointDepth = 13;
    if (has_pointdepth()) {
      total_size += 1 + 4;
    }
    
    // optional string relatedBeamUID = 14;
    if (has_relatedbeamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->relatedbeamuid());
    }
    
    // optional float doseAtRelatedBeam = 15;
    if (has_doseatrelatedbeam()) {
      total_size += 1 + 4;
    }
    
    // optional string planUid = 16;
    if (has_planuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
  }
  // repeated float color = 4;
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    total_size += 1 * this->color_size() + data_size;
  }
  
  // repeated .tps.proto.RT_TPS_BeamContributionDose beamDoseList = 17;
  total_size += 2 * this->beamdoselist_size();
  for (int i = 0; i < this->beamdoselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamdoselist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_PoiInformation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_PoiInformation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_PoiInformation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_PoiInformation::MergeFrom(const RT_TPS_PoiInformation& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_.MergeFrom(from.color_);
  beamdoselist_.MergeFrom(from.beamdoselist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poiuid()) {
      set_poiuid(from.poiuid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_role()) {
      set_role(from.role());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_locktype()) {
      set_locktype(from.locktype());
    }
    if (from.has_xcoordinpat()) {
      set_xcoordinpat(from.xcoordinpat());
    }
    if (from.has_ycoordinpat()) {
      set_ycoordinpat(from.ycoordinpat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zcoordinpat()) {
      set_zcoordinpat(from.zcoordinpat());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
    if (from.has_xcoordincol()) {
      set_xcoordincol(from.xcoordincol());
    }
    if (from.has_ycoordincol()) {
      set_ycoordincol(from.ycoordincol());
    }
    if (from.has_pointdepth()) {
      set_pointdepth(from.pointdepth());
    }
    if (from.has_relatedbeamuid()) {
      set_relatedbeamuid(from.relatedbeamuid());
    }
    if (from.has_doseatrelatedbeam()) {
      set_doseatrelatedbeam(from.doseatrelatedbeam());
    }
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_PoiInformation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_PoiInformation::CopyFrom(const RT_TPS_PoiInformation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_PoiInformation::IsInitialized() const {
  
  return true;
}

void RT_TPS_PoiInformation::Swap(RT_TPS_PoiInformation* other) {
  if (other != this) {
    std::swap(poiuid_, other->poiuid_);
    std::swap(name_, other->name_);
    std::swap(role_, other->role_);
    color_.Swap(&other->color_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(locktype_, other->locktype_);
    std::swap(xcoordinpat_, other->xcoordinpat_);
    std::swap(ycoordinpat_, other->ycoordinpat_);
    std::swap(zcoordinpat_, other->zcoordinpat_);
    std::swap(dose_, other->dose_);
    std::swap(xcoordincol_, other->xcoordincol_);
    std::swap(ycoordincol_, other->ycoordincol_);
    std::swap(pointdepth_, other->pointdepth_);
    std::swap(relatedbeamuid_, other->relatedbeamuid_);
    std::swap(doseatrelatedbeam_, other->doseatrelatedbeam_);
    std::swap(planuid_, other->planuid_);
    beamdoselist_.Swap(&other->beamdoselist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_PoiInformation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_PoiInformation_descriptor_;
  metadata.reflection = RT_TPS_PoiInformation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_BeamContributionDose::kBeamUidFieldNumber;
const int RT_TPS_BeamContributionDose::kContributionDoseFieldNumber;
#endif  // !_MSC_VER

RT_TPS_BeamContributionDose::RT_TPS_BeamContributionDose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_BeamContributionDose::InitAsDefaultInstance() {
}

RT_TPS_BeamContributionDose::RT_TPS_BeamContributionDose(const RT_TPS_BeamContributionDose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_BeamContributionDose::SharedCtor() {
  _cached_size_ = 0;
  beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contributiondose_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_BeamContributionDose::~RT_TPS_BeamContributionDose() {
  SharedDtor();
}

void RT_TPS_BeamContributionDose::SharedDtor() {
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    delete beamuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_BeamContributionDose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_BeamContributionDose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_BeamContributionDose_descriptor_;
}

const RT_TPS_BeamContributionDose& RT_TPS_BeamContributionDose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fpoigroup_2eproto();  return *default_instance_;
}

RT_TPS_BeamContributionDose* RT_TPS_BeamContributionDose::default_instance_ = NULL;

RT_TPS_BeamContributionDose* RT_TPS_BeamContributionDose::New() const {
  return new RT_TPS_BeamContributionDose;
}

void RT_TPS_BeamContributionDose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_beamuid()) {
      if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
        beamuid_->clear();
      }
    }
    contributiondose_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_BeamContributionDose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string beamUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_beamuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->beamuid().data(), this->beamuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_contributionDose;
        break;
      }
      
      // optional float contributionDose = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_contributionDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &contributiondose_)));
          set_has_contributiondose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_BeamContributionDose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string beamUid = 1;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->beamuid(), output);
  }
  
  // optional float contributionDose = 2;
  if (has_contributiondose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->contributiondose(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_BeamContributionDose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string beamUid = 1;
  if (has_beamuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->beamuid().data(), this->beamuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->beamuid(), target);
  }
  
  // optional float contributionDose = 2;
  if (has_contributiondose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->contributiondose(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_BeamContributionDose::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string beamUid = 1;
    if (has_beamuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->beamuid());
    }
    
    // optional float contributionDose = 2;
    if (has_contributiondose()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_BeamContributionDose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_BeamContributionDose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_BeamContributionDose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_BeamContributionDose::MergeFrom(const RT_TPS_BeamContributionDose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beamuid()) {
      set_beamuid(from.beamuid());
    }
    if (from.has_contributiondose()) {
      set_contributiondose(from.contributiondose());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_BeamContributionDose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_BeamContributionDose::CopyFrom(const RT_TPS_BeamContributionDose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_BeamContributionDose::IsInitialized() const {
  
  return true;
}

void RT_TPS_BeamContributionDose::Swap(RT_TPS_BeamContributionDose* other) {
  if (other != this) {
    std::swap(beamuid_, other->beamuid_);
    std::swap(contributiondose_, other->contributiondose_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_BeamContributionDose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_BeamContributionDose_descriptor_;
  metadata.reflection = RT_TPS_BeamContributionDose_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
