// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_applicator.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_Applicator_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_Applicator_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_ApplicatorList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_ApplicatorList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fapplicator_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_applicator.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_Applicator_descriptor_ = file->message_type(0);
  static const int RT_TPS_Applicator_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Applicator, applicator_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Applicator, unit_uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Applicator, applicator_name_),
  };
  RT_TPS_Applicator_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_Applicator_descriptor_,
      RT_TPS_Applicator::default_instance_,
      RT_TPS_Applicator_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Applicator, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_Applicator, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_Applicator));
  RT_TPS_ApplicatorList_descriptor_ = file->message_type(1);
  static const int RT_TPS_ApplicatorList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ApplicatorList, applicator_list_),
  };
  RT_TPS_ApplicatorList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_ApplicatorList_descriptor_,
      RT_TPS_ApplicatorList::default_instance_,
      RT_TPS_ApplicatorList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ApplicatorList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_ApplicatorList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_ApplicatorList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fapplicator_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_Applicator_descriptor_, &RT_TPS_Applicator::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_ApplicatorList_descriptor_, &RT_TPS_ApplicatorList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fapplicator_2eproto() {
  delete RT_TPS_Applicator::default_instance_;
  delete RT_TPS_Applicator_reflection_;
  delete RT_TPS_ApplicatorList::default_instance_;
  delete RT_TPS_ApplicatorList_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027rt_tps_applicator.proto\022\ttps.proto\"V\n\021"
    "RT_TPS_Applicator\022\026\n\016applicator_uid\030\001 \002("
    "\t\022\020\n\010unit_uid\030\002 \001(\t\022\027\n\017applicator_name\030\003"
    " \001(\t\"N\n\025RT_TPS_ApplicatorList\0225\n\017applica"
    "tor_list\030\001 \003(\0132\034.tps.proto.RT_TPS_Applic"
    "ator", 204);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_applicator.proto", &protobuf_RegisterTypes);
  RT_TPS_Applicator::default_instance_ = new RT_TPS_Applicator();
  RT_TPS_ApplicatorList::default_instance_ = new RT_TPS_ApplicatorList();
  RT_TPS_Applicator::default_instance_->InitAsDefaultInstance();
  RT_TPS_ApplicatorList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fapplicator_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fapplicator_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fapplicator_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fapplicator_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_Applicator::kApplicatorUidFieldNumber;
const int RT_TPS_Applicator::kUnitUidFieldNumber;
const int RT_TPS_Applicator::kApplicatorNameFieldNumber;
#endif  // !_MSC_VER

RT_TPS_Applicator::RT_TPS_Applicator()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_Applicator::InitAsDefaultInstance() {
}

RT_TPS_Applicator::RT_TPS_Applicator(const RT_TPS_Applicator& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_Applicator::SharedCtor() {
  _cached_size_ = 0;
  applicator_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  unit_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  applicator_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_Applicator::~RT_TPS_Applicator() {
  SharedDtor();
}

void RT_TPS_Applicator::SharedDtor() {
  if (applicator_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete applicator_uid_;
  }
  if (unit_uid_ != &::google::protobuf::internal::kEmptyString) {
    delete unit_uid_;
  }
  if (applicator_name_ != &::google::protobuf::internal::kEmptyString) {
    delete applicator_name_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_Applicator::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_Applicator::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_Applicator_descriptor_;
}

const RT_TPS_Applicator& RT_TPS_Applicator::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto();  return *default_instance_;
}

RT_TPS_Applicator* RT_TPS_Applicator::default_instance_ = NULL;

RT_TPS_Applicator* RT_TPS_Applicator::New() const {
  return new RT_TPS_Applicator;
}

void RT_TPS_Applicator::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_applicator_uid()) {
      if (applicator_uid_ != &::google::protobuf::internal::kEmptyString) {
        applicator_uid_->clear();
      }
    }
    if (has_unit_uid()) {
      if (unit_uid_ != &::google::protobuf::internal::kEmptyString) {
        unit_uid_->clear();
      }
    }
    if (has_applicator_name()) {
      if (applicator_name_ != &::google::protobuf::internal::kEmptyString) {
        applicator_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_Applicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string applicator_uid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicator_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicator_uid().data(), this->applicator_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_unit_uid;
        break;
      }
      
      // optional string unit_uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unit_uid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unit_uid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unit_uid().data(), this->unit_uid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_applicator_name;
        break;
      }
      
      // optional string applicator_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicator_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicator_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->applicator_name().data(), this->applicator_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_Applicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string applicator_uid = 1;
  if (has_applicator_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_uid().data(), this->applicator_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->applicator_uid(), output);
  }
  
  // optional string unit_uid = 2;
  if (has_unit_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_uid().data(), this->unit_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->unit_uid(), output);
  }
  
  // optional string applicator_name = 3;
  if (has_applicator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_name().data(), this->applicator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->applicator_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_Applicator::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string applicator_uid = 1;
  if (has_applicator_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_uid().data(), this->applicator_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->applicator_uid(), target);
  }
  
  // optional string unit_uid = 2;
  if (has_unit_uid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unit_uid().data(), this->unit_uid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->unit_uid(), target);
  }
  
  // optional string applicator_name = 3;
  if (has_applicator_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->applicator_name().data(), this->applicator_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->applicator_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_Applicator::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string applicator_uid = 1;
    if (has_applicator_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicator_uid());
    }
    
    // optional string unit_uid = 2;
    if (has_unit_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unit_uid());
    }
    
    // optional string applicator_name = 3;
    if (has_applicator_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->applicator_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_Applicator::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_Applicator* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_Applicator*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_Applicator::MergeFrom(const RT_TPS_Applicator& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_applicator_uid()) {
      set_applicator_uid(from.applicator_uid());
    }
    if (from.has_unit_uid()) {
      set_unit_uid(from.unit_uid());
    }
    if (from.has_applicator_name()) {
      set_applicator_name(from.applicator_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_Applicator::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_Applicator::CopyFrom(const RT_TPS_Applicator& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_Applicator::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RT_TPS_Applicator::Swap(RT_TPS_Applicator* other) {
  if (other != this) {
    std::swap(applicator_uid_, other->applicator_uid_);
    std::swap(unit_uid_, other->unit_uid_);
    std::swap(applicator_name_, other->applicator_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_Applicator::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_Applicator_descriptor_;
  metadata.reflection = RT_TPS_Applicator_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_ApplicatorList::kApplicatorListFieldNumber;
#endif  // !_MSC_VER

RT_TPS_ApplicatorList::RT_TPS_ApplicatorList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_ApplicatorList::InitAsDefaultInstance() {
}

RT_TPS_ApplicatorList::RT_TPS_ApplicatorList(const RT_TPS_ApplicatorList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_ApplicatorList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_ApplicatorList::~RT_TPS_ApplicatorList() {
  SharedDtor();
}

void RT_TPS_ApplicatorList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_ApplicatorList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_ApplicatorList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_ApplicatorList_descriptor_;
}

const RT_TPS_ApplicatorList& RT_TPS_ApplicatorList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fapplicator_2eproto();  return *default_instance_;
}

RT_TPS_ApplicatorList* RT_TPS_ApplicatorList::default_instance_ = NULL;

RT_TPS_ApplicatorList* RT_TPS_ApplicatorList::New() const {
  return new RT_TPS_ApplicatorList;
}

void RT_TPS_ApplicatorList::Clear() {
  applicator_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_ApplicatorList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_Applicator applicator_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicator_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applicator_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_applicator_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_ApplicatorList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_Applicator applicator_list = 1;
  for (int i = 0; i < this->applicator_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->applicator_list(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_ApplicatorList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_Applicator applicator_list = 1;
  for (int i = 0; i < this->applicator_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->applicator_list(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_ApplicatorList::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_Applicator applicator_list = 1;
  total_size += 1 * this->applicator_list_size();
  for (int i = 0; i < this->applicator_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applicator_list(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_ApplicatorList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_ApplicatorList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_ApplicatorList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_ApplicatorList::MergeFrom(const RT_TPS_ApplicatorList& from) {
  GOOGLE_CHECK_NE(&from, this);
  applicator_list_.MergeFrom(from.applicator_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_ApplicatorList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_ApplicatorList::CopyFrom(const RT_TPS_ApplicatorList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_ApplicatorList::IsInitialized() const {
  
  for (int i = 0; i < applicator_list_size(); i++) {
    if (!this->applicator_list(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_ApplicatorList::Swap(RT_TPS_ApplicatorList* other) {
  if (other != this) {
    applicator_list_.Swap(&other->applicator_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_ApplicatorList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_ApplicatorList_descriptor_;
  metadata.reflection = RT_TPS_ApplicatorList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
