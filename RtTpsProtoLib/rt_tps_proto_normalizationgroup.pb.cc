// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_normalizationgroup.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoNormalizationGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoNormalizationGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedNormalizationGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedNormalizationGroup_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_normalizationgroup.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoNormalizationGroup_descriptor_ = file->message_type(0);
  static const int RtTpsProtoNormalizationGroup_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, normalizationgroupuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, normalizationgroupname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, techniquetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, machineuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, targetispoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, doseperfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, fractioncount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isaveragevoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, poidosepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, voidoseatvolume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, voidosepercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, radiationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isautocalculate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, startslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, endslice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isjoined_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, edittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isapproved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, prescriptionuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, normalizationpoiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, normalizationvoiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, beamlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridstartx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridstarty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridstartz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridspacingx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridspacingy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridspacingz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridsizex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridsizey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, dosegridsizez_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, electronenergyfordrr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, ctthresholdminfordrr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, ctthresholdmaxfordrr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, ct2densityuidfordrr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isgating_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, binmode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, beamonrangestart_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, beamonrangeend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, isdosevalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, description_),
  };
  RtTpsProtoNormalizationGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoNormalizationGroup_descriptor_,
      RtTpsProtoNormalizationGroup::default_instance_,
      RtTpsProtoNormalizationGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoNormalizationGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoNormalizationGroup));
  RtTpsProtoRepeatedNormalizationGroup_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedNormalizationGroup_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedNormalizationGroup, normalizationgrouplist_),
  };
  RtTpsProtoRepeatedNormalizationGroup_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedNormalizationGroup_descriptor_,
      RtTpsProtoRepeatedNormalizationGroup::default_instance_,
      RtTpsProtoRepeatedNormalizationGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedNormalizationGroup, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedNormalizationGroup, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedNormalizationGroup));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoNormalizationGroup_descriptor_, &RtTpsProtoNormalizationGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedNormalizationGroup_descriptor_, &RtTpsProtoRepeatedNormalizationGroup::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fnormalizationgroup_2eproto() {
  delete RtTpsProtoNormalizationGroup::default_instance_;
  delete RtTpsProtoNormalizationGroup_reflection_;
  delete RtTpsProtoRepeatedNormalizationGroup::default_instance_;
  delete RtTpsProtoRepeatedNormalizationGroup_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%rt_tps_proto_normalizationgroup.proto\022"
    "\ttps.proto\032\027rt_tps_proto_beam.proto\"\234\010\n\034"
    "RtTpsProtoNormalizationGroup\022\035\n\025normaliz"
    "ationGroupUID\030\001 \002(\t\022\036\n\026normalizationGrou"
    "pName\030\002 \001(\t\022\025\n\rtechniqueType\030\003 \001(\005\022\022\n\nma"
    "chineUID\030\004 \001(\t\022\023\n\013targetIsPoi\030\005 \001(\010\022\027\n\017d"
    "osePerFraction\030\006 \001(\001\022\025\n\rfractionCount\030\007 "
    "\001(\005\022\024\n\014isAverageVoi\030\010 \001(\010\022\026\n\016poiDosePerc"
    "ent\030\t \001(\001\022\027\n\017voiDoseAtVolume\030\n \001(\001\022\026\n\016vo"
    "iDosePercent\030\013 \001(\001\022\025\n\rradiationType\030\014 \001("
    "\005\022\027\n\017isAutoCalculate\030\r \001(\010\022\022\n\nstartSlice"
    "\030\016 \001(\005\022\020\n\010endSlice\030\017 \001(\005\022\020\n\010isJoined\030\020 \001"
    "(\010\022\020\n\010editType\030\021 \001(\005\022\022\n\nisApproved\030\022 \001(\005"
    "\022\027\n\017prescriptionUID\030\023 \001(\t\022\017\n\007planUID\030\024 \001"
    "(\t\022\033\n\023normalizationPoiUID\030\025 \001(\t\022\033\n\023norma"
    "lizationVoiUID\030\026 \001(\t\022+\n\010beamList\030\027 \003(\0132\031"
    ".tps.proto.RtTpsProtoBeam\022\026\n\016doseGridSta"
    "rtX\030\030 \001(\001\022\026\n\016doseGridStartY\030\031 \001(\001\022\026\n\016dos"
    "eGridStartZ\030\032 \001(\001\022\030\n\020doseGridSpacingX\030\033 "
    "\001(\001\022\030\n\020doseGridSpacingY\030\034 \001(\001\022\030\n\020doseGri"
    "dSpacingZ\030\035 \001(\001\022\025\n\rdoseGridSizeX\030\036 \001(\001\022\025"
    "\n\rdoseGridSizeY\030\037 \001(\001\022\025\n\rdoseGridSizeZ\030 "
    " \001(\001\022\034\n\024electronEnergyForDrr\030! \001(\001\022\034\n\024ct"
    "ThresholdMinForDrr\030\" \001(\005\022\034\n\024ctThresholdM"
    "axForDrr\030# \001(\005\022\033\n\023ct2densityUidForDrr\030$ "
    "\001(\t\022\020\n\010isGating\030% \001(\010\022\017\n\007binMode\030& \001(\005\022\030"
    "\n\020beamOnRangeStart\030\' \001(\001\022\026\n\016beamOnRangeE"
    "nd\030( \001(\001\022\023\n\013isDoseValid\030) \001(\010\022\023\n\013descrip"
    "tion\030* \001(\t\"o\n$RtTpsProtoRepeatedNormaliz"
    "ationGroup\022G\n\026normalizationGroupList\030\001 \003"
    "(\0132\'.tps.proto.RtTpsProtoNormalizationGr"
    "oup", 1243);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_normalizationgroup.proto", &protobuf_RegisterTypes);
  RtTpsProtoNormalizationGroup::default_instance_ = new RtTpsProtoNormalizationGroup();
  RtTpsProtoRepeatedNormalizationGroup::default_instance_ = new RtTpsProtoRepeatedNormalizationGroup();
  RtTpsProtoNormalizationGroup::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedNormalizationGroup::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fnormalizationgroup_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fnormalizationgroup_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fnormalizationgroup_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fnormalizationgroup_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoNormalizationGroup::kNormalizationGroupUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kNormalizationGroupNameFieldNumber;
const int RtTpsProtoNormalizationGroup::kTechniqueTypeFieldNumber;
const int RtTpsProtoNormalizationGroup::kMachineUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kTargetIsPoiFieldNumber;
const int RtTpsProtoNormalizationGroup::kDosePerFractionFieldNumber;
const int RtTpsProtoNormalizationGroup::kFractionCountFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsAverageVoiFieldNumber;
const int RtTpsProtoNormalizationGroup::kPoiDosePercentFieldNumber;
const int RtTpsProtoNormalizationGroup::kVoiDoseAtVolumeFieldNumber;
const int RtTpsProtoNormalizationGroup::kVoiDosePercentFieldNumber;
const int RtTpsProtoNormalizationGroup::kRadiationTypeFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsAutoCalculateFieldNumber;
const int RtTpsProtoNormalizationGroup::kStartSliceFieldNumber;
const int RtTpsProtoNormalizationGroup::kEndSliceFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsJoinedFieldNumber;
const int RtTpsProtoNormalizationGroup::kEditTypeFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsApprovedFieldNumber;
const int RtTpsProtoNormalizationGroup::kPrescriptionUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kPlanUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kNormalizationPoiUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kNormalizationVoiUIDFieldNumber;
const int RtTpsProtoNormalizationGroup::kBeamListFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridStartXFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridStartYFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridStartZFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSpacingXFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSpacingYFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSpacingZFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSizeXFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSizeYFieldNumber;
const int RtTpsProtoNormalizationGroup::kDoseGridSizeZFieldNumber;
const int RtTpsProtoNormalizationGroup::kElectronEnergyForDrrFieldNumber;
const int RtTpsProtoNormalizationGroup::kCtThresholdMinForDrrFieldNumber;
const int RtTpsProtoNormalizationGroup::kCtThresholdMaxForDrrFieldNumber;
const int RtTpsProtoNormalizationGroup::kCt2DensityUidForDrrFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsGatingFieldNumber;
const int RtTpsProtoNormalizationGroup::kBinModeFieldNumber;
const int RtTpsProtoNormalizationGroup::kBeamOnRangeStartFieldNumber;
const int RtTpsProtoNormalizationGroup::kBeamOnRangeEndFieldNumber;
const int RtTpsProtoNormalizationGroup::kIsDoseValidFieldNumber;
const int RtTpsProtoNormalizationGroup::kDescriptionFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoNormalizationGroup::RtTpsProtoNormalizationGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoNormalizationGroup::InitAsDefaultInstance() {
}

RtTpsProtoNormalizationGroup::RtTpsProtoNormalizationGroup(const RtTpsProtoNormalizationGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoNormalizationGroup::SharedCtor() {
  _cached_size_ = 0;
  normalizationgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalizationgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  techniquetype_ = 0;
  machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  targetispoi_ = false;
  doseperfraction_ = 0;
  fractioncount_ = 0;
  isaveragevoi_ = false;
  poidosepercent_ = 0;
  voidoseatvolume_ = 0;
  voidosepercent_ = 0;
  radiationtype_ = 0;
  isautocalculate_ = false;
  startslice_ = 0;
  endslice_ = 0;
  isjoined_ = false;
  edittype_ = 0;
  isapproved_ = 0;
  prescriptionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalizationpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  normalizationvoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dosegridstartx_ = 0;
  dosegridstarty_ = 0;
  dosegridstartz_ = 0;
  dosegridspacingx_ = 0;
  dosegridspacingy_ = 0;
  dosegridspacingz_ = 0;
  dosegridsizex_ = 0;
  dosegridsizey_ = 0;
  dosegridsizez_ = 0;
  electronenergyfordrr_ = 0;
  ctthresholdminfordrr_ = 0;
  ctthresholdmaxfordrr_ = 0;
  ct2densityuidfordrr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isgating_ = false;
  binmode_ = 0;
  beamonrangestart_ = 0;
  beamonrangeend_ = 0;
  isdosevalid_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoNormalizationGroup::~RtTpsProtoNormalizationGroup() {
  SharedDtor();
}

void RtTpsProtoNormalizationGroup::SharedDtor() {
  if (normalizationgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    delete normalizationgroupuid_;
  }
  if (normalizationgroupname_ != &::google::protobuf::internal::kEmptyString) {
    delete normalizationgroupname_;
  }
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    delete machineuid_;
  }
  if (prescriptionuid_ != &::google::protobuf::internal::kEmptyString) {
    delete prescriptionuid_;
  }
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (normalizationpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete normalizationpoiuid_;
  }
  if (normalizationvoiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete normalizationvoiuid_;
  }
  if (ct2densityuidfordrr_ != &::google::protobuf::internal::kEmptyString) {
    delete ct2densityuidfordrr_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoNormalizationGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoNormalizationGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoNormalizationGroup_descriptor_;
}

const RtTpsProtoNormalizationGroup& RtTpsProtoNormalizationGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();  return *default_instance_;
}

RtTpsProtoNormalizationGroup* RtTpsProtoNormalizationGroup::default_instance_ = NULL;

RtTpsProtoNormalizationGroup* RtTpsProtoNormalizationGroup::New() const {
  return new RtTpsProtoNormalizationGroup;
}

void RtTpsProtoNormalizationGroup::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_normalizationgroupuid()) {
      if (normalizationgroupuid_ != &::google::protobuf::internal::kEmptyString) {
        normalizationgroupuid_->clear();
      }
    }
    if (has_normalizationgroupname()) {
      if (normalizationgroupname_ != &::google::protobuf::internal::kEmptyString) {
        normalizationgroupname_->clear();
      }
    }
    techniquetype_ = 0;
    if (has_machineuid()) {
      if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
        machineuid_->clear();
      }
    }
    targetispoi_ = false;
    doseperfraction_ = 0;
    fractioncount_ = 0;
    isaveragevoi_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    poidosepercent_ = 0;
    voidoseatvolume_ = 0;
    voidosepercent_ = 0;
    radiationtype_ = 0;
    isautocalculate_ = false;
    startslice_ = 0;
    endslice_ = 0;
    isjoined_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    edittype_ = 0;
    isapproved_ = 0;
    if (has_prescriptionuid()) {
      if (prescriptionuid_ != &::google::protobuf::internal::kEmptyString) {
        prescriptionuid_->clear();
      }
    }
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
    if (has_normalizationpoiuid()) {
      if (normalizationpoiuid_ != &::google::protobuf::internal::kEmptyString) {
        normalizationpoiuid_->clear();
      }
    }
    if (has_normalizationvoiuid()) {
      if (normalizationvoiuid_ != &::google::protobuf::internal::kEmptyString) {
        normalizationvoiuid_->clear();
      }
    }
    dosegridstartx_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    dosegridstarty_ = 0;
    dosegridstartz_ = 0;
    dosegridspacingx_ = 0;
    dosegridspacingy_ = 0;
    dosegridspacingz_ = 0;
    dosegridsizex_ = 0;
    dosegridsizey_ = 0;
    dosegridsizez_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    electronenergyfordrr_ = 0;
    ctthresholdminfordrr_ = 0;
    ctthresholdmaxfordrr_ = 0;
    if (has_ct2densityuidfordrr()) {
      if (ct2densityuidfordrr_ != &::google::protobuf::internal::kEmptyString) {
        ct2densityuidfordrr_->clear();
      }
    }
    isgating_ = false;
    binmode_ = 0;
    beamonrangestart_ = 0;
    beamonrangeend_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    isdosevalid_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  beamlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoNormalizationGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string normalizationGroupUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalizationgroupuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalizationgroupuid().data(), this->normalizationgroupuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_normalizationGroupName;
        break;
      }
      
      // optional string normalizationGroupName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizationGroupName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalizationgroupname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalizationgroupname().data(), this->normalizationgroupname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_techniqueType;
        break;
      }
      
      // optional int32 techniqueType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_techniqueType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &techniquetype_)));
          set_has_techniquetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_machineUID;
        break;
      }
      
      // optional string machineUID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machineUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machineuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machineuid().data(), this->machineuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_targetIsPoi;
        break;
      }
      
      // optional bool targetIsPoi = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetIsPoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &targetispoi_)));
          set_has_targetispoi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_dosePerFraction;
        break;
      }
      
      // optional double dosePerFraction = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dosePerFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &doseperfraction_)));
          set_has_doseperfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fractionCount;
        break;
      }
      
      // optional int32 fractionCount = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fractionCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fractioncount_)));
          set_has_fractioncount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isAverageVoi;
        break;
      }
      
      // optional bool isAverageVoi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAverageVoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isaveragevoi_)));
          set_has_isaveragevoi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_poiDosePercent;
        break;
      }
      
      // optional double poiDosePercent = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_poiDosePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poidosepercent_)));
          set_has_poidosepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_voiDoseAtVolume;
        break;
      }
      
      // optional double voiDoseAtVolume = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voiDoseAtVolume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voidoseatvolume_)));
          set_has_voidoseatvolume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_voiDosePercent;
        break;
      }
      
      // optional double voiDosePercent = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_voiDosePercent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &voidosepercent_)));
          set_has_voidosepercent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_radiationType;
        break;
      }
      
      // optional int32 radiationType = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_radiationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiationtype_)));
          set_has_radiationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_isAutoCalculate;
        break;
      }
      
      // optional bool isAutoCalculate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoCalculate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautocalculate_)));
          set_has_isautocalculate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_startSlice;
        break;
      }
      
      // optional int32 startSlice = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startslice_)));
          set_has_startslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_endSlice;
        break;
      }
      
      // optional int32 endSlice = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endSlice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endslice_)));
          set_has_endslice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isJoined;
        break;
      }
      
      // optional bool isJoined = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isJoined:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isjoined_)));
          set_has_isjoined();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_editType;
        break;
      }
      
      // optional int32 editType = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_editType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &edittype_)));
          set_has_edittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isApproved;
        break;
      }
      
      // optional int32 isApproved = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isApproved:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isapproved_)));
          set_has_isapproved();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_prescriptionUID;
        break;
      }
      
      // optional string prescriptionUID = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prescriptionUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prescriptionuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prescriptionuid().data(), this->prescriptionuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_planUID;
        break;
      }
      
      // optional string planUID = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_normalizationPoiUID;
        break;
      }
      
      // optional string normalizationPoiUID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizationPoiUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalizationpoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalizationpoiuid().data(), this->normalizationpoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_normalizationVoiUID;
        break;
      }
      
      // optional string normalizationVoiUID = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizationVoiUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_normalizationvoiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->normalizationvoiuid().data(), this->normalizationvoiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_beamList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoBeam beamList = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_beamList;
        if (input->ExpectTag(193)) goto parse_doseGridStartX;
        break;
      }
      
      // optional double doseGridStartX = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridStartX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridstartx_)));
          set_has_dosegridstartx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_doseGridStartY;
        break;
      }
      
      // optional double doseGridStartY = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridStartY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridstarty_)));
          set_has_dosegridstarty();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_doseGridStartZ;
        break;
      }
      
      // optional double doseGridStartZ = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridStartZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridstartz_)));
          set_has_dosegridstartz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_doseGridSpacingX;
        break;
      }
      
      // optional double doseGridSpacingX = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSpacingX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridspacingx_)));
          set_has_dosegridspacingx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_doseGridSpacingY;
        break;
      }
      
      // optional double doseGridSpacingY = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSpacingY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridspacingy_)));
          set_has_dosegridspacingy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_doseGridSpacingZ;
        break;
      }
      
      // optional double doseGridSpacingZ = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSpacingZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridspacingz_)));
          set_has_dosegridspacingz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_doseGridSizeX;
        break;
      }
      
      // optional double doseGridSizeX = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSizeX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridsizex_)));
          set_has_dosegridsizex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_doseGridSizeY;
        break;
      }
      
      // optional double doseGridSizeY = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSizeY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridsizey_)));
          set_has_dosegridsizey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_doseGridSizeZ;
        break;
      }
      
      // optional double doseGridSizeZ = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_doseGridSizeZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dosegridsizez_)));
          set_has_dosegridsizez();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_electronEnergyForDrr;
        break;
      }
      
      // optional double electronEnergyForDrr = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_electronEnergyForDrr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &electronenergyfordrr_)));
          set_has_electronenergyfordrr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_ctThresholdMinForDrr;
        break;
      }
      
      // optional int32 ctThresholdMinForDrr = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctThresholdMinForDrr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctthresholdminfordrr_)));
          set_has_ctthresholdminfordrr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_ctThresholdMaxForDrr;
        break;
      }
      
      // optional int32 ctThresholdMaxForDrr = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctThresholdMaxForDrr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctthresholdmaxfordrr_)));
          set_has_ctthresholdmaxfordrr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_ct2densityUidForDrr;
        break;
      }
      
      // optional string ct2densityUidForDrr = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ct2densityUidForDrr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ct2densityuidfordrr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ct2densityuidfordrr().data(), this->ct2densityuidfordrr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_isGating;
        break;
      }
      
      // optional bool isGating = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgating_)));
          set_has_isgating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_binMode;
        break;
      }
      
      // optional int32 binMode = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_binMode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &binmode_)));
          set_has_binmode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_beamOnRangeStart;
        break;
      }
      
      // optional double beamOnRangeStart = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beamOnRangeStart:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beamonrangestart_)));
          set_has_beamonrangestart();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_beamOnRangeEnd;
        break;
      }
      
      // optional double beamOnRangeEnd = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beamOnRangeEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beamonrangeend_)));
          set_has_beamonrangeend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_isDoseValid;
        break;
      }
      
      // optional bool isDoseValid = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDoseValid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdosevalid_)));
          set_has_isdosevalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_description;
        break;
      }
      
      // optional string description = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoNormalizationGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string normalizationGroupUID = 1;
  if (has_normalizationgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationgroupuid().data(), this->normalizationgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->normalizationgroupuid(), output);
  }
  
  // optional string normalizationGroupName = 2;
  if (has_normalizationgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationgroupname().data(), this->normalizationgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->normalizationgroupname(), output);
  }
  
  // optional int32 techniqueType = 3;
  if (has_techniquetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->techniquetype(), output);
  }
  
  // optional string machineUID = 4;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->machineuid(), output);
  }
  
  // optional bool targetIsPoi = 5;
  if (has_targetispoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->targetispoi(), output);
  }
  
  // optional double dosePerFraction = 6;
  if (has_doseperfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->doseperfraction(), output);
  }
  
  // optional int32 fractionCount = 7;
  if (has_fractioncount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fractioncount(), output);
  }
  
  // optional bool isAverageVoi = 8;
  if (has_isaveragevoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->isaveragevoi(), output);
  }
  
  // optional double poiDosePercent = 9;
  if (has_poidosepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->poidosepercent(), output);
  }
  
  // optional double voiDoseAtVolume = 10;
  if (has_voidoseatvolume()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->voidoseatvolume(), output);
  }
  
  // optional double voiDosePercent = 11;
  if (has_voidosepercent()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->voidosepercent(), output);
  }
  
  // optional int32 radiationType = 12;
  if (has_radiationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->radiationtype(), output);
  }
  
  // optional bool isAutoCalculate = 13;
  if (has_isautocalculate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->isautocalculate(), output);
  }
  
  // optional int32 startSlice = 14;
  if (has_startslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->startslice(), output);
  }
  
  // optional int32 endSlice = 15;
  if (has_endslice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->endslice(), output);
  }
  
  // optional bool isJoined = 16;
  if (has_isjoined()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isjoined(), output);
  }
  
  // optional int32 editType = 17;
  if (has_edittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->edittype(), output);
  }
  
  // optional int32 isApproved = 18;
  if (has_isapproved()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->isapproved(), output);
  }
  
  // optional string prescriptionUID = 19;
  if (has_prescriptionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prescriptionuid().data(), this->prescriptionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->prescriptionuid(), output);
  }
  
  // optional string planUID = 20;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->planuid(), output);
  }
  
  // optional string normalizationPoiUID = 21;
  if (has_normalizationpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationpoiuid().data(), this->normalizationpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->normalizationpoiuid(), output);
  }
  
  // optional string normalizationVoiUID = 22;
  if (has_normalizationvoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationvoiuid().data(), this->normalizationvoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      22, this->normalizationvoiuid(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoBeam beamList = 23;
  for (int i = 0; i < this->beamlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->beamlist(i), output);
  }
  
  // optional double doseGridStartX = 24;
  if (has_dosegridstartx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->dosegridstartx(), output);
  }
  
  // optional double doseGridStartY = 25;
  if (has_dosegridstarty()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->dosegridstarty(), output);
  }
  
  // optional double doseGridStartZ = 26;
  if (has_dosegridstartz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->dosegridstartz(), output);
  }
  
  // optional double doseGridSpacingX = 27;
  if (has_dosegridspacingx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->dosegridspacingx(), output);
  }
  
  // optional double doseGridSpacingY = 28;
  if (has_dosegridspacingy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->dosegridspacingy(), output);
  }
  
  // optional double doseGridSpacingZ = 29;
  if (has_dosegridspacingz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->dosegridspacingz(), output);
  }
  
  // optional double doseGridSizeX = 30;
  if (has_dosegridsizex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->dosegridsizex(), output);
  }
  
  // optional double doseGridSizeY = 31;
  if (has_dosegridsizey()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->dosegridsizey(), output);
  }
  
  // optional double doseGridSizeZ = 32;
  if (has_dosegridsizez()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->dosegridsizez(), output);
  }
  
  // optional double electronEnergyForDrr = 33;
  if (has_electronenergyfordrr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->electronenergyfordrr(), output);
  }
  
  // optional int32 ctThresholdMinForDrr = 34;
  if (has_ctthresholdminfordrr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->ctthresholdminfordrr(), output);
  }
  
  // optional int32 ctThresholdMaxForDrr = 35;
  if (has_ctthresholdmaxfordrr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->ctthresholdmaxfordrr(), output);
  }
  
  // optional string ct2densityUidForDrr = 36;
  if (has_ct2densityuidfordrr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ct2densityuidfordrr().data(), this->ct2densityuidfordrr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      36, this->ct2densityuidfordrr(), output);
  }
  
  // optional bool isGating = 37;
  if (has_isgating()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(37, this->isgating(), output);
  }
  
  // optional int32 binMode = 38;
  if (has_binmode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->binmode(), output);
  }
  
  // optional double beamOnRangeStart = 39;
  if (has_beamonrangestart()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->beamonrangestart(), output);
  }
  
  // optional double beamOnRangeEnd = 40;
  if (has_beamonrangeend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->beamonrangeend(), output);
  }
  
  // optional bool isDoseValid = 41;
  if (has_isdosevalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->isdosevalid(), output);
  }
  
  // optional string description = 42;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      42, this->description(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoNormalizationGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string normalizationGroupUID = 1;
  if (has_normalizationgroupuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationgroupuid().data(), this->normalizationgroupuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->normalizationgroupuid(), target);
  }
  
  // optional string normalizationGroupName = 2;
  if (has_normalizationgroupname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationgroupname().data(), this->normalizationgroupname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->normalizationgroupname(), target);
  }
  
  // optional int32 techniqueType = 3;
  if (has_techniquetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->techniquetype(), target);
  }
  
  // optional string machineUID = 4;
  if (has_machineuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machineuid().data(), this->machineuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->machineuid(), target);
  }
  
  // optional bool targetIsPoi = 5;
  if (has_targetispoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->targetispoi(), target);
  }
  
  // optional double dosePerFraction = 6;
  if (has_doseperfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->doseperfraction(), target);
  }
  
  // optional int32 fractionCount = 7;
  if (has_fractioncount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fractioncount(), target);
  }
  
  // optional bool isAverageVoi = 8;
  if (has_isaveragevoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->isaveragevoi(), target);
  }
  
  // optional double poiDosePercent = 9;
  if (has_poidosepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->poidosepercent(), target);
  }
  
  // optional double voiDoseAtVolume = 10;
  if (has_voidoseatvolume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->voidoseatvolume(), target);
  }
  
  // optional double voiDosePercent = 11;
  if (has_voidosepercent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->voidosepercent(), target);
  }
  
  // optional int32 radiationType = 12;
  if (has_radiationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->radiationtype(), target);
  }
  
  // optional bool isAutoCalculate = 13;
  if (has_isautocalculate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->isautocalculate(), target);
  }
  
  // optional int32 startSlice = 14;
  if (has_startslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->startslice(), target);
  }
  
  // optional int32 endSlice = 15;
  if (has_endslice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->endslice(), target);
  }
  
  // optional bool isJoined = 16;
  if (has_isjoined()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isjoined(), target);
  }
  
  // optional int32 editType = 17;
  if (has_edittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->edittype(), target);
  }
  
  // optional int32 isApproved = 18;
  if (has_isapproved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->isapproved(), target);
  }
  
  // optional string prescriptionUID = 19;
  if (has_prescriptionuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prescriptionuid().data(), this->prescriptionuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->prescriptionuid(), target);
  }
  
  // optional string planUID = 20;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->planuid(), target);
  }
  
  // optional string normalizationPoiUID = 21;
  if (has_normalizationpoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationpoiuid().data(), this->normalizationpoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->normalizationpoiuid(), target);
  }
  
  // optional string normalizationVoiUID = 22;
  if (has_normalizationvoiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->normalizationvoiuid().data(), this->normalizationvoiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        22, this->normalizationvoiuid(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoBeam beamList = 23;
  for (int i = 0; i < this->beamlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->beamlist(i), target);
  }
  
  // optional double doseGridStartX = 24;
  if (has_dosegridstartx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->dosegridstartx(), target);
  }
  
  // optional double doseGridStartY = 25;
  if (has_dosegridstarty()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->dosegridstarty(), target);
  }
  
  // optional double doseGridStartZ = 26;
  if (has_dosegridstartz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->dosegridstartz(), target);
  }
  
  // optional double doseGridSpacingX = 27;
  if (has_dosegridspacingx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->dosegridspacingx(), target);
  }
  
  // optional double doseGridSpacingY = 28;
  if (has_dosegridspacingy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->dosegridspacingy(), target);
  }
  
  // optional double doseGridSpacingZ = 29;
  if (has_dosegridspacingz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->dosegridspacingz(), target);
  }
  
  // optional double doseGridSizeX = 30;
  if (has_dosegridsizex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->dosegridsizex(), target);
  }
  
  // optional double doseGridSizeY = 31;
  if (has_dosegridsizey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->dosegridsizey(), target);
  }
  
  // optional double doseGridSizeZ = 32;
  if (has_dosegridsizez()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->dosegridsizez(), target);
  }
  
  // optional double electronEnergyForDrr = 33;
  if (has_electronenergyfordrr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->electronenergyfordrr(), target);
  }
  
  // optional int32 ctThresholdMinForDrr = 34;
  if (has_ctthresholdminfordrr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->ctthresholdminfordrr(), target);
  }
  
  // optional int32 ctThresholdMaxForDrr = 35;
  if (has_ctthresholdmaxfordrr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->ctthresholdmaxfordrr(), target);
  }
  
  // optional string ct2densityUidForDrr = 36;
  if (has_ct2densityuidfordrr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ct2densityuidfordrr().data(), this->ct2densityuidfordrr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->ct2densityuidfordrr(), target);
  }
  
  // optional bool isGating = 37;
  if (has_isgating()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(37, this->isgating(), target);
  }
  
  // optional int32 binMode = 38;
  if (has_binmode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->binmode(), target);
  }
  
  // optional double beamOnRangeStart = 39;
  if (has_beamonrangestart()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->beamonrangestart(), target);
  }
  
  // optional double beamOnRangeEnd = 40;
  if (has_beamonrangeend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->beamonrangeend(), target);
  }
  
  // optional bool isDoseValid = 41;
  if (has_isdosevalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(41, this->isdosevalid(), target);
  }
  
  // optional string description = 42;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        42, this->description(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoNormalizationGroup::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string normalizationGroupUID = 1;
    if (has_normalizationgroupuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalizationgroupuid());
    }
    
    // optional string normalizationGroupName = 2;
    if (has_normalizationgroupname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalizationgroupname());
    }
    
    // optional int32 techniqueType = 3;
    if (has_techniquetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->techniquetype());
    }
    
    // optional string machineUID = 4;
    if (has_machineuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machineuid());
    }
    
    // optional bool targetIsPoi = 5;
    if (has_targetispoi()) {
      total_size += 1 + 1;
    }
    
    // optional double dosePerFraction = 6;
    if (has_doseperfraction()) {
      total_size += 1 + 8;
    }
    
    // optional int32 fractionCount = 7;
    if (has_fractioncount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fractioncount());
    }
    
    // optional bool isAverageVoi = 8;
    if (has_isaveragevoi()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double poiDosePercent = 9;
    if (has_poidosepercent()) {
      total_size += 1 + 8;
    }
    
    // optional double voiDoseAtVolume = 10;
    if (has_voidoseatvolume()) {
      total_size += 1 + 8;
    }
    
    // optional double voiDosePercent = 11;
    if (has_voidosepercent()) {
      total_size += 1 + 8;
    }
    
    // optional int32 radiationType = 12;
    if (has_radiationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiationtype());
    }
    
    // optional bool isAutoCalculate = 13;
    if (has_isautocalculate()) {
      total_size += 1 + 1;
    }
    
    // optional int32 startSlice = 14;
    if (has_startslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startslice());
    }
    
    // optional int32 endSlice = 15;
    if (has_endslice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endslice());
    }
    
    // optional bool isJoined = 16;
    if (has_isjoined()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 editType = 17;
    if (has_edittype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->edittype());
    }
    
    // optional int32 isApproved = 18;
    if (has_isapproved()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isapproved());
    }
    
    // optional string prescriptionUID = 19;
    if (has_prescriptionuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prescriptionuid());
    }
    
    // optional string planUID = 20;
    if (has_planuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
    // optional string normalizationPoiUID = 21;
    if (has_normalizationpoiuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalizationpoiuid());
    }
    
    // optional string normalizationVoiUID = 22;
    if (has_normalizationvoiuid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->normalizationvoiuid());
    }
    
    // optional double doseGridStartX = 24;
    if (has_dosegridstartx()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double doseGridStartY = 25;
    if (has_dosegridstarty()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridStartZ = 26;
    if (has_dosegridstartz()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSpacingX = 27;
    if (has_dosegridspacingx()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSpacingY = 28;
    if (has_dosegridspacingy()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSpacingZ = 29;
    if (has_dosegridspacingz()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSizeX = 30;
    if (has_dosegridsizex()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSizeY = 31;
    if (has_dosegridsizey()) {
      total_size += 2 + 8;
    }
    
    // optional double doseGridSizeZ = 32;
    if (has_dosegridsizez()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double electronEnergyForDrr = 33;
    if (has_electronenergyfordrr()) {
      total_size += 2 + 8;
    }
    
    // optional int32 ctThresholdMinForDrr = 34;
    if (has_ctthresholdminfordrr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctthresholdminfordrr());
    }
    
    // optional int32 ctThresholdMaxForDrr = 35;
    if (has_ctthresholdmaxfordrr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctthresholdmaxfordrr());
    }
    
    // optional string ct2densityUidForDrr = 36;
    if (has_ct2densityuidfordrr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ct2densityuidfordrr());
    }
    
    // optional bool isGating = 37;
    if (has_isgating()) {
      total_size += 2 + 1;
    }
    
    // optional int32 binMode = 38;
    if (has_binmode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->binmode());
    }
    
    // optional double beamOnRangeStart = 39;
    if (has_beamonrangestart()) {
      total_size += 2 + 8;
    }
    
    // optional double beamOnRangeEnd = 40;
    if (has_beamonrangeend()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool isDoseValid = 41;
    if (has_isdosevalid()) {
      total_size += 2 + 1;
    }
    
    // optional string description = 42;
    if (has_description()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }
    
  }
  // repeated .tps.proto.RtTpsProtoBeam beamList = 23;
  total_size += 2 * this->beamlist_size();
  for (int i = 0; i < this->beamlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoNormalizationGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoNormalizationGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoNormalizationGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoNormalizationGroup::MergeFrom(const RtTpsProtoNormalizationGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  beamlist_.MergeFrom(from.beamlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_normalizationgroupuid()) {
      set_normalizationgroupuid(from.normalizationgroupuid());
    }
    if (from.has_normalizationgroupname()) {
      set_normalizationgroupname(from.normalizationgroupname());
    }
    if (from.has_techniquetype()) {
      set_techniquetype(from.techniquetype());
    }
    if (from.has_machineuid()) {
      set_machineuid(from.machineuid());
    }
    if (from.has_targetispoi()) {
      set_targetispoi(from.targetispoi());
    }
    if (from.has_doseperfraction()) {
      set_doseperfraction(from.doseperfraction());
    }
    if (from.has_fractioncount()) {
      set_fractioncount(from.fractioncount());
    }
    if (from.has_isaveragevoi()) {
      set_isaveragevoi(from.isaveragevoi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_poidosepercent()) {
      set_poidosepercent(from.poidosepercent());
    }
    if (from.has_voidoseatvolume()) {
      set_voidoseatvolume(from.voidoseatvolume());
    }
    if (from.has_voidosepercent()) {
      set_voidosepercent(from.voidosepercent());
    }
    if (from.has_radiationtype()) {
      set_radiationtype(from.radiationtype());
    }
    if (from.has_isautocalculate()) {
      set_isautocalculate(from.isautocalculate());
    }
    if (from.has_startslice()) {
      set_startslice(from.startslice());
    }
    if (from.has_endslice()) {
      set_endslice(from.endslice());
    }
    if (from.has_isjoined()) {
      set_isjoined(from.isjoined());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_edittype()) {
      set_edittype(from.edittype());
    }
    if (from.has_isapproved()) {
      set_isapproved(from.isapproved());
    }
    if (from.has_prescriptionuid()) {
      set_prescriptionuid(from.prescriptionuid());
    }
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
    if (from.has_normalizationpoiuid()) {
      set_normalizationpoiuid(from.normalizationpoiuid());
    }
    if (from.has_normalizationvoiuid()) {
      set_normalizationvoiuid(from.normalizationvoiuid());
    }
    if (from.has_dosegridstartx()) {
      set_dosegridstartx(from.dosegridstartx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_dosegridstarty()) {
      set_dosegridstarty(from.dosegridstarty());
    }
    if (from.has_dosegridstartz()) {
      set_dosegridstartz(from.dosegridstartz());
    }
    if (from.has_dosegridspacingx()) {
      set_dosegridspacingx(from.dosegridspacingx());
    }
    if (from.has_dosegridspacingy()) {
      set_dosegridspacingy(from.dosegridspacingy());
    }
    if (from.has_dosegridspacingz()) {
      set_dosegridspacingz(from.dosegridspacingz());
    }
    if (from.has_dosegridsizex()) {
      set_dosegridsizex(from.dosegridsizex());
    }
    if (from.has_dosegridsizey()) {
      set_dosegridsizey(from.dosegridsizey());
    }
    if (from.has_dosegridsizez()) {
      set_dosegridsizez(from.dosegridsizez());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_electronenergyfordrr()) {
      set_electronenergyfordrr(from.electronenergyfordrr());
    }
    if (from.has_ctthresholdminfordrr()) {
      set_ctthresholdminfordrr(from.ctthresholdminfordrr());
    }
    if (from.has_ctthresholdmaxfordrr()) {
      set_ctthresholdmaxfordrr(from.ctthresholdmaxfordrr());
    }
    if (from.has_ct2densityuidfordrr()) {
      set_ct2densityuidfordrr(from.ct2densityuidfordrr());
    }
    if (from.has_isgating()) {
      set_isgating(from.isgating());
    }
    if (from.has_binmode()) {
      set_binmode(from.binmode());
    }
    if (from.has_beamonrangestart()) {
      set_beamonrangestart(from.beamonrangestart());
    }
    if (from.has_beamonrangeend()) {
      set_beamonrangeend(from.beamonrangeend());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_isdosevalid()) {
      set_isdosevalid(from.isdosevalid());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoNormalizationGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoNormalizationGroup::CopyFrom(const RtTpsProtoNormalizationGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoNormalizationGroup::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < beamlist_size(); i++) {
    if (!this->beamlist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoNormalizationGroup::Swap(RtTpsProtoNormalizationGroup* other) {
  if (other != this) {
    std::swap(normalizationgroupuid_, other->normalizationgroupuid_);
    std::swap(normalizationgroupname_, other->normalizationgroupname_);
    std::swap(techniquetype_, other->techniquetype_);
    std::swap(machineuid_, other->machineuid_);
    std::swap(targetispoi_, other->targetispoi_);
    std::swap(doseperfraction_, other->doseperfraction_);
    std::swap(fractioncount_, other->fractioncount_);
    std::swap(isaveragevoi_, other->isaveragevoi_);
    std::swap(poidosepercent_, other->poidosepercent_);
    std::swap(voidoseatvolume_, other->voidoseatvolume_);
    std::swap(voidosepercent_, other->voidosepercent_);
    std::swap(radiationtype_, other->radiationtype_);
    std::swap(isautocalculate_, other->isautocalculate_);
    std::swap(startslice_, other->startslice_);
    std::swap(endslice_, other->endslice_);
    std::swap(isjoined_, other->isjoined_);
    std::swap(edittype_, other->edittype_);
    std::swap(isapproved_, other->isapproved_);
    std::swap(prescriptionuid_, other->prescriptionuid_);
    std::swap(planuid_, other->planuid_);
    std::swap(normalizationpoiuid_, other->normalizationpoiuid_);
    std::swap(normalizationvoiuid_, other->normalizationvoiuid_);
    beamlist_.Swap(&other->beamlist_);
    std::swap(dosegridstartx_, other->dosegridstartx_);
    std::swap(dosegridstarty_, other->dosegridstarty_);
    std::swap(dosegridstartz_, other->dosegridstartz_);
    std::swap(dosegridspacingx_, other->dosegridspacingx_);
    std::swap(dosegridspacingy_, other->dosegridspacingy_);
    std::swap(dosegridspacingz_, other->dosegridspacingz_);
    std::swap(dosegridsizex_, other->dosegridsizex_);
    std::swap(dosegridsizey_, other->dosegridsizey_);
    std::swap(dosegridsizez_, other->dosegridsizez_);
    std::swap(electronenergyfordrr_, other->electronenergyfordrr_);
    std::swap(ctthresholdminfordrr_, other->ctthresholdminfordrr_);
    std::swap(ctthresholdmaxfordrr_, other->ctthresholdmaxfordrr_);
    std::swap(ct2densityuidfordrr_, other->ct2densityuidfordrr_);
    std::swap(isgating_, other->isgating_);
    std::swap(binmode_, other->binmode_);
    std::swap(beamonrangestart_, other->beamonrangestart_);
    std::swap(beamonrangeend_, other->beamonrangeend_);
    std::swap(isdosevalid_, other->isdosevalid_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoNormalizationGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoNormalizationGroup_descriptor_;
  metadata.reflection = RtTpsProtoNormalizationGroup_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedNormalizationGroup::kNormalizationGroupListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedNormalizationGroup::RtTpsProtoRepeatedNormalizationGroup()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedNormalizationGroup::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedNormalizationGroup::RtTpsProtoRepeatedNormalizationGroup(const RtTpsProtoRepeatedNormalizationGroup& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedNormalizationGroup::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedNormalizationGroup::~RtTpsProtoRepeatedNormalizationGroup() {
  SharedDtor();
}

void RtTpsProtoRepeatedNormalizationGroup::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedNormalizationGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedNormalizationGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedNormalizationGroup_descriptor_;
}

const RtTpsProtoRepeatedNormalizationGroup& RtTpsProtoRepeatedNormalizationGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedNormalizationGroup* RtTpsProtoRepeatedNormalizationGroup::default_instance_ = NULL;

RtTpsProtoRepeatedNormalizationGroup* RtTpsProtoRepeatedNormalizationGroup::New() const {
  return new RtTpsProtoRepeatedNormalizationGroup;
}

void RtTpsProtoRepeatedNormalizationGroup::Clear() {
  normalizationgrouplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedNormalizationGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_normalizationGroupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_normalizationgrouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_normalizationGroupList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedNormalizationGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->normalizationgrouplist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedNormalizationGroup::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->normalizationgrouplist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedNormalizationGroup::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
  total_size += 1 * this->normalizationgrouplist_size();
  for (int i = 0; i < this->normalizationgrouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->normalizationgrouplist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedNormalizationGroup::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedNormalizationGroup* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedNormalizationGroup*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedNormalizationGroup::MergeFrom(const RtTpsProtoRepeatedNormalizationGroup& from) {
  GOOGLE_CHECK_NE(&from, this);
  normalizationgrouplist_.MergeFrom(from.normalizationgrouplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedNormalizationGroup::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedNormalizationGroup::CopyFrom(const RtTpsProtoRepeatedNormalizationGroup& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedNormalizationGroup::IsInitialized() const {
  
  for (int i = 0; i < normalizationgrouplist_size(); i++) {
    if (!this->normalizationgrouplist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedNormalizationGroup::Swap(RtTpsProtoRepeatedNormalizationGroup* other) {
  if (other != this) {
    normalizationgrouplist_.Swap(&other->normalizationgrouplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedNormalizationGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedNormalizationGroup_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedNormalizationGroup_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
