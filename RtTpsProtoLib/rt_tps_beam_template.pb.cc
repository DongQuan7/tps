// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_beam_template.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_BeamTemplate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_BeamTemplate_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_BeamTemplate_List_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_BeamTemplate_List_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fbeam_5ftemplate_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fbeam_5ftemplate_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_beam_template.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_BeamTemplate_descriptor_ = file->message_type(0);
  static const int RT_TPS_BeamTemplate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, templateuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, templatename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, templatedescription_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, simplebeam_),
  };
  RT_TPS_BeamTemplate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_BeamTemplate_descriptor_,
      RT_TPS_BeamTemplate::default_instance_,
      RT_TPS_BeamTemplate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_BeamTemplate));
  RT_TPS_BeamTemplate_List_descriptor_ = file->message_type(1);
  static const int RT_TPS_BeamTemplate_List_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate_List, beamtemplate_),
  };
  RT_TPS_BeamTemplate_List_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_BeamTemplate_List_descriptor_,
      RT_TPS_BeamTemplate_List::default_instance_,
      RT_TPS_BeamTemplate_List_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate_List, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_BeamTemplate_List, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_BeamTemplate_List));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fbeam_5ftemplate_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_BeamTemplate_descriptor_, &RT_TPS_BeamTemplate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_BeamTemplate_List_descriptor_, &RT_TPS_BeamTemplate_List::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fbeam_5ftemplate_2eproto() {
  delete RT_TPS_BeamTemplate::default_instance_;
  delete RT_TPS_BeamTemplate_reflection_;
  delete RT_TPS_BeamTemplate_List::default_instance_;
  delete RT_TPS_BeamTemplate_List_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fbeam_5ftemplate_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032rt_tps_beam_template.proto\022\ttps.proto\032"
    "\027rt_tps_simplebeam.proto\"\217\001\n\023RT_TPS_Beam"
    "Template\022\023\n\013templateUID\030\001 \001(\t\022\024\n\014templat"
    "eName\030\002 \001(\t\022\033\n\023templateDescription\030\003 \001(\t"
    "\0220\n\nsimpleBeam\030\004 \003(\0132\034.tps.proto.RT_TPS_"
    "SimpleBeam\"P\n\030RT_TPS_BeamTemplate_List\0224"
    "\n\014beamTemplate\030\001 \003(\0132\036.tps.proto.RT_TPS_"
    "BeamTemplate", 292);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_beam_template.proto", &protobuf_RegisterTypes);
  RT_TPS_BeamTemplate::default_instance_ = new RT_TPS_BeamTemplate();
  RT_TPS_BeamTemplate_List::default_instance_ = new RT_TPS_BeamTemplate_List();
  RT_TPS_BeamTemplate::default_instance_->InitAsDefaultInstance();
  RT_TPS_BeamTemplate_List::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fbeam_5ftemplate_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fbeam_5ftemplate_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fbeam_5ftemplate_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fbeam_5ftemplate_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fbeam_5ftemplate_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_BeamTemplate::kTemplateUIDFieldNumber;
const int RT_TPS_BeamTemplate::kTemplateNameFieldNumber;
const int RT_TPS_BeamTemplate::kTemplateDescriptionFieldNumber;
const int RT_TPS_BeamTemplate::kSimpleBeamFieldNumber;
#endif  // !_MSC_VER

RT_TPS_BeamTemplate::RT_TPS_BeamTemplate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_BeamTemplate::InitAsDefaultInstance() {
}

RT_TPS_BeamTemplate::RT_TPS_BeamTemplate(const RT_TPS_BeamTemplate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_BeamTemplate::SharedCtor() {
  _cached_size_ = 0;
  templateuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  templatedescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_BeamTemplate::~RT_TPS_BeamTemplate() {
  SharedDtor();
}

void RT_TPS_BeamTemplate::SharedDtor() {
  if (templateuid_ != &::google::protobuf::internal::kEmptyString) {
    delete templateuid_;
  }
  if (templatename_ != &::google::protobuf::internal::kEmptyString) {
    delete templatename_;
  }
  if (templatedescription_ != &::google::protobuf::internal::kEmptyString) {
    delete templatedescription_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_BeamTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_BeamTemplate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_BeamTemplate_descriptor_;
}

const RT_TPS_BeamTemplate& RT_TPS_BeamTemplate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fbeam_5ftemplate_2eproto();  return *default_instance_;
}

RT_TPS_BeamTemplate* RT_TPS_BeamTemplate::default_instance_ = NULL;

RT_TPS_BeamTemplate* RT_TPS_BeamTemplate::New() const {
  return new RT_TPS_BeamTemplate;
}

void RT_TPS_BeamTemplate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_templateuid()) {
      if (templateuid_ != &::google::protobuf::internal::kEmptyString) {
        templateuid_->clear();
      }
    }
    if (has_templatename()) {
      if (templatename_ != &::google::protobuf::internal::kEmptyString) {
        templatename_->clear();
      }
    }
    if (has_templatedescription()) {
      if (templatedescription_ != &::google::protobuf::internal::kEmptyString) {
        templatedescription_->clear();
      }
    }
  }
  simplebeam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_BeamTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string templateUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templateuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templateuid().data(), this->templateuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_templateName;
        break;
      }
      
      // optional string templateName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templateName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatename().data(), this->templatename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_templateDescription;
        break;
      }
      
      // optional string templateDescription = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_templateDescription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_templatedescription()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->templatedescription().data(), this->templatedescription().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_simpleBeam;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_SimpleBeam simpleBeam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_simpleBeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_simplebeam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_simpleBeam;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_BeamTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string templateUID = 1;
  if (has_templateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templateuid().data(), this->templateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->templateuid(), output);
  }
  
  // optional string templateName = 2;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->templatename(), output);
  }
  
  // optional string templateDescription = 3;
  if (has_templatedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatedescription().data(), this->templatedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->templatedescription(), output);
  }
  
  // repeated .tps.proto.RT_TPS_SimpleBeam simpleBeam = 4;
  for (int i = 0; i < this->simplebeam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->simplebeam(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_BeamTemplate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string templateUID = 1;
  if (has_templateuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templateuid().data(), this->templateuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->templateuid(), target);
  }
  
  // optional string templateName = 2;
  if (has_templatename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatename().data(), this->templatename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->templatename(), target);
  }
  
  // optional string templateDescription = 3;
  if (has_templatedescription()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->templatedescription().data(), this->templatedescription().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->templatedescription(), target);
  }
  
  // repeated .tps.proto.RT_TPS_SimpleBeam simpleBeam = 4;
  for (int i = 0; i < this->simplebeam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->simplebeam(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_BeamTemplate::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string templateUID = 1;
    if (has_templateuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templateuid());
    }
    
    // optional string templateName = 2;
    if (has_templatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatename());
    }
    
    // optional string templateDescription = 3;
    if (has_templatedescription()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->templatedescription());
    }
    
  }
  // repeated .tps.proto.RT_TPS_SimpleBeam simpleBeam = 4;
  total_size += 1 * this->simplebeam_size();
  for (int i = 0; i < this->simplebeam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->simplebeam(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_BeamTemplate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_BeamTemplate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_BeamTemplate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_BeamTemplate::MergeFrom(const RT_TPS_BeamTemplate& from) {
  GOOGLE_CHECK_NE(&from, this);
  simplebeam_.MergeFrom(from.simplebeam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_templateuid()) {
      set_templateuid(from.templateuid());
    }
    if (from.has_templatename()) {
      set_templatename(from.templatename());
    }
    if (from.has_templatedescription()) {
      set_templatedescription(from.templatedescription());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_BeamTemplate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_BeamTemplate::CopyFrom(const RT_TPS_BeamTemplate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_BeamTemplate::IsInitialized() const {
  
  for (int i = 0; i < simplebeam_size(); i++) {
    if (!this->simplebeam(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_BeamTemplate::Swap(RT_TPS_BeamTemplate* other) {
  if (other != this) {
    std::swap(templateuid_, other->templateuid_);
    std::swap(templatename_, other->templatename_);
    std::swap(templatedescription_, other->templatedescription_);
    simplebeam_.Swap(&other->simplebeam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_BeamTemplate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_BeamTemplate_descriptor_;
  metadata.reflection = RT_TPS_BeamTemplate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_BeamTemplate_List::kBeamTemplateFieldNumber;
#endif  // !_MSC_VER

RT_TPS_BeamTemplate_List::RT_TPS_BeamTemplate_List()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_BeamTemplate_List::InitAsDefaultInstance() {
}

RT_TPS_BeamTemplate_List::RT_TPS_BeamTemplate_List(const RT_TPS_BeamTemplate_List& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_BeamTemplate_List::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_BeamTemplate_List::~RT_TPS_BeamTemplate_List() {
  SharedDtor();
}

void RT_TPS_BeamTemplate_List::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_BeamTemplate_List::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_BeamTemplate_List::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_BeamTemplate_List_descriptor_;
}

const RT_TPS_BeamTemplate_List& RT_TPS_BeamTemplate_List::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fbeam_5ftemplate_2eproto();  return *default_instance_;
}

RT_TPS_BeamTemplate_List* RT_TPS_BeamTemplate_List::default_instance_ = NULL;

RT_TPS_BeamTemplate_List* RT_TPS_BeamTemplate_List::New() const {
  return new RT_TPS_BeamTemplate_List;
}

void RT_TPS_BeamTemplate_List::Clear() {
  beamtemplate_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_BeamTemplate_List::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RT_TPS_BeamTemplate beamTemplate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamTemplate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamtemplate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_beamTemplate;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_BeamTemplate_List::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RT_TPS_BeamTemplate beamTemplate = 1;
  for (int i = 0; i < this->beamtemplate_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->beamtemplate(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_BeamTemplate_List::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RT_TPS_BeamTemplate beamTemplate = 1;
  for (int i = 0; i < this->beamtemplate_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->beamtemplate(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_BeamTemplate_List::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RT_TPS_BeamTemplate beamTemplate = 1;
  total_size += 1 * this->beamtemplate_size();
  for (int i = 0; i < this->beamtemplate_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamtemplate(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_BeamTemplate_List::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_BeamTemplate_List* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_BeamTemplate_List*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_BeamTemplate_List::MergeFrom(const RT_TPS_BeamTemplate_List& from) {
  GOOGLE_CHECK_NE(&from, this);
  beamtemplate_.MergeFrom(from.beamtemplate_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_BeamTemplate_List::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_BeamTemplate_List::CopyFrom(const RT_TPS_BeamTemplate_List& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_BeamTemplate_List::IsInitialized() const {
  
  for (int i = 0; i < beamtemplate_size(); i++) {
    if (!this->beamtemplate(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_BeamTemplate_List::Swap(RT_TPS_BeamTemplate_List* other) {
  if (other != this) {
    beamtemplate_.Swap(&other->beamtemplate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_BeamTemplate_List::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_BeamTemplate_List_descriptor_;
  metadata.reflection = RT_TPS_BeamTemplate_List_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
