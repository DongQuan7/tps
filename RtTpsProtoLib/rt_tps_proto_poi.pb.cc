// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_poi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoPoi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPoi_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPoi_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedPoi_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoPoiDoseInPlan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoPoiDoseInPlan_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_poi.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoPoi_descriptor_ = file->message_type(0);
  static const int RtTpsProtoPoi_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, poiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, poiname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, poitype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, poicolor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, isvisible_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, locktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, xcoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, ycoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, zcoordinpat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, xcoordincol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, ycoordincol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, pointdepth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, seriesuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, poidoselist_),
  };
  RtTpsProtoPoi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPoi_descriptor_,
      RtTpsProtoPoi::default_instance_,
      RtTpsProtoPoi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPoi));
  RtTpsProtoRepeatedPoi_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedPoi_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPoi, poilist_),
  };
  RtTpsProtoRepeatedPoi_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedPoi_descriptor_,
      RtTpsProtoRepeatedPoi::default_instance_,
      RtTpsProtoRepeatedPoi_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPoi, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedPoi, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedPoi));
  RtTpsProtoPoiDoseInPlan_descriptor_ = file->message_type(2);
  static const int RtTpsProtoPoiDoseInPlan_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, poiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, planuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, dose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, dosecalcmethod_),
  };
  RtTpsProtoPoiDoseInPlan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoPoiDoseInPlan_descriptor_,
      RtTpsProtoPoiDoseInPlan::default_instance_,
      RtTpsProtoPoiDoseInPlan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoPoiDoseInPlan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoPoiDoseInPlan));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPoi_descriptor_, &RtTpsProtoPoi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedPoi_descriptor_, &RtTpsProtoRepeatedPoi::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoPoiDoseInPlan_descriptor_, &RtTpsProtoPoiDoseInPlan::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto() {
  delete RtTpsProtoPoi::default_instance_;
  delete RtTpsProtoPoi_reflection_;
  delete RtTpsProtoRepeatedPoi::default_instance_;
  delete RtTpsProtoRepeatedPoi_reflection_;
  delete RtTpsProtoPoiDoseInPlan::default_instance_;
  delete RtTpsProtoPoiDoseInPlan_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rt_tps_proto_poi.proto\022\ttps.proto\"\317\002\n\r"
    "RtTpsProtoPoi\022\016\n\006poiUID\030\001 \002(\t\022\017\n\007poiName"
    "\030\002 \001(\t\022\017\n\007poiType\030\003 \001(\005\022\020\n\010poiColor\030\004 \003("
    "\002\022\021\n\tisVisible\030\005 \001(\010\022\020\n\010lockType\030\006 \001(\005\022\023"
    "\n\013xCoordInPat\030\007 \001(\002\022\023\n\013yCoordInPat\030\010 \001(\002"
    "\022\023\n\013zCoordInPat\030\t \001(\002\022\014\n\004dose\030\n \001(\002\022\023\n\013x"
    "CoordInCol\030\013 \001(\002\022\023\n\013yCoordInCol\030\014 \001(\002\022\022\n"
    "\npointDepth\030\r \001(\002\022\021\n\tseriesuid\030\016 \001(\t\0227\n\013"
    "poiDoseList\030\017 \003(\0132\".tps.proto.RtTpsProto"
    "PoiDoseInPlan\"B\n\025RtTpsProtoRepeatedPoi\022)"
    "\n\007poiList\030\001 \003(\0132\030.tps.proto.RtTpsProtoPo"
    "i\"`\n\027RtTpsProtoPoiDoseInPlan\022\016\n\006poiuid\030\001"
    " \001(\t\022\017\n\007planUID\030\002 \001(\t\022\014\n\004dose\030\003 \001(\002\022\026\n\016d"
    "oseCalcMethod\030\004 \001(\005", 539);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_poi.proto", &protobuf_RegisterTypes);
  RtTpsProtoPoi::default_instance_ = new RtTpsProtoPoi();
  RtTpsProtoRepeatedPoi::default_instance_ = new RtTpsProtoRepeatedPoi();
  RtTpsProtoPoiDoseInPlan::default_instance_ = new RtTpsProtoPoiDoseInPlan();
  RtTpsProtoPoi::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedPoi::default_instance_->InitAsDefaultInstance();
  RtTpsProtoPoiDoseInPlan::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fpoi_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fpoi_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fpoi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPoi::kPoiUIDFieldNumber;
const int RtTpsProtoPoi::kPoiNameFieldNumber;
const int RtTpsProtoPoi::kPoiTypeFieldNumber;
const int RtTpsProtoPoi::kPoiColorFieldNumber;
const int RtTpsProtoPoi::kIsVisibleFieldNumber;
const int RtTpsProtoPoi::kLockTypeFieldNumber;
const int RtTpsProtoPoi::kXCoordInPatFieldNumber;
const int RtTpsProtoPoi::kYCoordInPatFieldNumber;
const int RtTpsProtoPoi::kZCoordInPatFieldNumber;
const int RtTpsProtoPoi::kDoseFieldNumber;
const int RtTpsProtoPoi::kXCoordInColFieldNumber;
const int RtTpsProtoPoi::kYCoordInColFieldNumber;
const int RtTpsProtoPoi::kPointDepthFieldNumber;
const int RtTpsProtoPoi::kSeriesuidFieldNumber;
const int RtTpsProtoPoi::kPoiDoseListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPoi::RtTpsProtoPoi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPoi::InitAsDefaultInstance() {
}

RtTpsProtoPoi::RtTpsProtoPoi(const RtTpsProtoPoi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPoi::SharedCtor() {
  _cached_size_ = 0;
  poiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  poitype_ = 0;
  isvisible_ = false;
  locktype_ = 0;
  xcoordinpat_ = 0;
  ycoordinpat_ = 0;
  zcoordinpat_ = 0;
  dose_ = 0;
  xcoordincol_ = 0;
  ycoordincol_ = 0;
  pointdepth_ = 0;
  seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPoi::~RtTpsProtoPoi() {
  SharedDtor();
}

void RtTpsProtoPoi::SharedDtor() {
  if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete poiuid_;
  }
  if (poiname_ != &::google::protobuf::internal::kEmptyString) {
    delete poiname_;
  }
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    delete seriesuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoPoi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPoi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPoi_descriptor_;
}

const RtTpsProtoPoi& RtTpsProtoPoi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();  return *default_instance_;
}

RtTpsProtoPoi* RtTpsProtoPoi::default_instance_ = NULL;

RtTpsProtoPoi* RtTpsProtoPoi::New() const {
  return new RtTpsProtoPoi;
}

void RtTpsProtoPoi::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poiuid()) {
      if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
        poiuid_->clear();
      }
    }
    if (has_poiname()) {
      if (poiname_ != &::google::protobuf::internal::kEmptyString) {
        poiname_->clear();
      }
    }
    poitype_ = 0;
    isvisible_ = false;
    locktype_ = 0;
    xcoordinpat_ = 0;
    ycoordinpat_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    zcoordinpat_ = 0;
    dose_ = 0;
    xcoordincol_ = 0;
    ycoordincol_ = 0;
    pointdepth_ = 0;
    if (has_seriesuid()) {
      if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
        seriesuid_->clear();
      }
    }
  }
  poicolor_.Clear();
  poidoselist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPoi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string poiUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poiuid().data(), this->poiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_poiName;
        break;
      }
      
      // optional string poiName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poiname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poiname().data(), this->poiname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_poiType;
        break;
      }
      
      // optional int32 poiType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_poiType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poitype_)));
          set_has_poitype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_poiColor;
        break;
      }
      
      // repeated float poiColor = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_poiColor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_poicolor())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_poicolor())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_poiColor;
        if (input->ExpectTag(40)) goto parse_isVisible;
        break;
      }
      
      // optional bool isVisible = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isVisible:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isvisible_)));
          set_has_isvisible();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lockType;
        break;
      }
      
      // optional int32 lockType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lockType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &locktype_)));
          set_has_locktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_xCoordInPat;
        break;
      }
      
      // optional float xCoordInPat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xcoordinpat_)));
          set_has_xcoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_yCoordInPat;
        break;
      }
      
      // optional float yCoordInPat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ycoordinpat_)));
          set_has_ycoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_zCoordInPat;
        break;
      }
      
      // optional float zCoordInPat = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_zCoordInPat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zcoordinpat_)));
          set_has_zcoordinpat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_dose;
        break;
      }
      
      // optional float dose = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_xCoordInCol;
        break;
      }
      
      // optional float xCoordInCol = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_xCoordInCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xcoordincol_)));
          set_has_xcoordincol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_yCoordInCol;
        break;
      }
      
      // optional float yCoordInCol = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_yCoordInCol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ycoordincol_)));
          set_has_ycoordincol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_pointDepth;
        break;
      }
      
      // optional float pointDepth = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pointDepth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pointdepth_)));
          set_has_pointdepth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_seriesuid;
        break;
      }
      
      // optional string seriesuid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seriesuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seriesuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seriesuid().data(), this->seriesuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_poiDoseList;
        break;
      }
      
      // repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiDoseList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poidoselist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_poiDoseList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPoi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string poiUID = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poiuid(), output);
  }
  
  // optional string poiName = 2;
  if (has_poiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiname().data(), this->poiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->poiname(), output);
  }
  
  // optional int32 poiType = 3;
  if (has_poitype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->poitype(), output);
  }
  
  // repeated float poiColor = 4;
  for (int i = 0; i < this->poicolor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->poicolor(i), output);
  }
  
  // optional bool isVisible = 5;
  if (has_isvisible()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isvisible(), output);
  }
  
  // optional int32 lockType = 6;
  if (has_locktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->locktype(), output);
  }
  
  // optional float xCoordInPat = 7;
  if (has_xcoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->xcoordinpat(), output);
  }
  
  // optional float yCoordInPat = 8;
  if (has_ycoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ycoordinpat(), output);
  }
  
  // optional float zCoordInPat = 9;
  if (has_zcoordinpat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->zcoordinpat(), output);
  }
  
  // optional float dose = 10;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->dose(), output);
  }
  
  // optional float xCoordInCol = 11;
  if (has_xcoordincol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->xcoordincol(), output);
  }
  
  // optional float yCoordInCol = 12;
  if (has_ycoordincol()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->ycoordincol(), output);
  }
  
  // optional float pointDepth = 13;
  if (has_pointdepth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pointdepth(), output);
  }
  
  // optional string seriesuid = 14;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->seriesuid(), output);
  }
  
  // repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
  for (int i = 0; i < this->poidoselist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->poidoselist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPoi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string poiUID = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poiuid(), target);
  }
  
  // optional string poiName = 2;
  if (has_poiname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiname().data(), this->poiname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->poiname(), target);
  }
  
  // optional int32 poiType = 3;
  if (has_poitype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->poitype(), target);
  }
  
  // repeated float poiColor = 4;
  for (int i = 0; i < this->poicolor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->poicolor(i), target);
  }
  
  // optional bool isVisible = 5;
  if (has_isvisible()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isvisible(), target);
  }
  
  // optional int32 lockType = 6;
  if (has_locktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->locktype(), target);
  }
  
  // optional float xCoordInPat = 7;
  if (has_xcoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->xcoordinpat(), target);
  }
  
  // optional float yCoordInPat = 8;
  if (has_ycoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->ycoordinpat(), target);
  }
  
  // optional float zCoordInPat = 9;
  if (has_zcoordinpat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->zcoordinpat(), target);
  }
  
  // optional float dose = 10;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->dose(), target);
  }
  
  // optional float xCoordInCol = 11;
  if (has_xcoordincol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->xcoordincol(), target);
  }
  
  // optional float yCoordInCol = 12;
  if (has_ycoordincol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->ycoordincol(), target);
  }
  
  // optional float pointDepth = 13;
  if (has_pointdepth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pointdepth(), target);
  }
  
  // optional string seriesuid = 14;
  if (has_seriesuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seriesuid().data(), this->seriesuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->seriesuid(), target);
  }
  
  // repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
  for (int i = 0; i < this->poidoselist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->poidoselist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPoi::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string poiUID = 1;
    if (has_poiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poiuid());
    }
    
    // optional string poiName = 2;
    if (has_poiname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poiname());
    }
    
    // optional int32 poiType = 3;
    if (has_poitype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->poitype());
    }
    
    // optional bool isVisible = 5;
    if (has_isvisible()) {
      total_size += 1 + 1;
    }
    
    // optional int32 lockType = 6;
    if (has_locktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->locktype());
    }
    
    // optional float xCoordInPat = 7;
    if (has_xcoordinpat()) {
      total_size += 1 + 4;
    }
    
    // optional float yCoordInPat = 8;
    if (has_ycoordinpat()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float zCoordInPat = 9;
    if (has_zcoordinpat()) {
      total_size += 1 + 4;
    }
    
    // optional float dose = 10;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
    // optional float xCoordInCol = 11;
    if (has_xcoordincol()) {
      total_size += 1 + 4;
    }
    
    // optional float yCoordInCol = 12;
    if (has_ycoordincol()) {
      total_size += 1 + 4;
    }
    
    // optional float pointDepth = 13;
    if (has_pointdepth()) {
      total_size += 1 + 4;
    }
    
    // optional string seriesuid = 14;
    if (has_seriesuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seriesuid());
    }
    
  }
  // repeated float poiColor = 4;
  {
    int data_size = 0;
    data_size = 4 * this->poicolor_size();
    total_size += 1 * this->poicolor_size() + data_size;
  }
  
  // repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
  total_size += 1 * this->poidoselist_size();
  for (int i = 0; i < this->poidoselist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poidoselist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPoi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPoi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPoi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPoi::MergeFrom(const RtTpsProtoPoi& from) {
  GOOGLE_CHECK_NE(&from, this);
  poicolor_.MergeFrom(from.poicolor_);
  poidoselist_.MergeFrom(from.poidoselist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poiuid()) {
      set_poiuid(from.poiuid());
    }
    if (from.has_poiname()) {
      set_poiname(from.poiname());
    }
    if (from.has_poitype()) {
      set_poitype(from.poitype());
    }
    if (from.has_isvisible()) {
      set_isvisible(from.isvisible());
    }
    if (from.has_locktype()) {
      set_locktype(from.locktype());
    }
    if (from.has_xcoordinpat()) {
      set_xcoordinpat(from.xcoordinpat());
    }
    if (from.has_ycoordinpat()) {
      set_ycoordinpat(from.ycoordinpat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_zcoordinpat()) {
      set_zcoordinpat(from.zcoordinpat());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
    if (from.has_xcoordincol()) {
      set_xcoordincol(from.xcoordincol());
    }
    if (from.has_ycoordincol()) {
      set_ycoordincol(from.ycoordincol());
    }
    if (from.has_pointdepth()) {
      set_pointdepth(from.pointdepth());
    }
    if (from.has_seriesuid()) {
      set_seriesuid(from.seriesuid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPoi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPoi::CopyFrom(const RtTpsProtoPoi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPoi::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoPoi::Swap(RtTpsProtoPoi* other) {
  if (other != this) {
    std::swap(poiuid_, other->poiuid_);
    std::swap(poiname_, other->poiname_);
    std::swap(poitype_, other->poitype_);
    poicolor_.Swap(&other->poicolor_);
    std::swap(isvisible_, other->isvisible_);
    std::swap(locktype_, other->locktype_);
    std::swap(xcoordinpat_, other->xcoordinpat_);
    std::swap(ycoordinpat_, other->ycoordinpat_);
    std::swap(zcoordinpat_, other->zcoordinpat_);
    std::swap(dose_, other->dose_);
    std::swap(xcoordincol_, other->xcoordincol_);
    std::swap(ycoordincol_, other->ycoordincol_);
    std::swap(pointdepth_, other->pointdepth_);
    std::swap(seriesuid_, other->seriesuid_);
    poidoselist_.Swap(&other->poidoselist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPoi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPoi_descriptor_;
  metadata.reflection = RtTpsProtoPoi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedPoi::kPoiListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedPoi::RtTpsProtoRepeatedPoi()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedPoi::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedPoi::RtTpsProtoRepeatedPoi(const RtTpsProtoRepeatedPoi& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPoi::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedPoi::~RtTpsProtoRepeatedPoi() {
  SharedDtor();
}

void RtTpsProtoRepeatedPoi::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedPoi::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedPoi::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedPoi_descriptor_;
}

const RtTpsProtoRepeatedPoi& RtTpsProtoRepeatedPoi::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedPoi* RtTpsProtoRepeatedPoi::default_instance_ = NULL;

RtTpsProtoRepeatedPoi* RtTpsProtoRepeatedPoi::New() const {
  return new RtTpsProtoRepeatedPoi;
}

void RtTpsProtoRepeatedPoi::Clear() {
  poilist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedPoi::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoPoi poiList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_poiList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poilist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_poiList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedPoi::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoPoi poiList = 1;
  for (int i = 0; i < this->poilist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poilist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedPoi::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoPoi poiList = 1;
  for (int i = 0; i < this->poilist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poilist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedPoi::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 1;
  total_size += 1 * this->poilist_size();
  for (int i = 0; i < this->poilist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poilist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedPoi::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedPoi* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedPoi*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedPoi::MergeFrom(const RtTpsProtoRepeatedPoi& from) {
  GOOGLE_CHECK_NE(&from, this);
  poilist_.MergeFrom(from.poilist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedPoi::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedPoi::CopyFrom(const RtTpsProtoRepeatedPoi& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedPoi::IsInitialized() const {
  
  for (int i = 0; i < poilist_size(); i++) {
    if (!this->poilist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedPoi::Swap(RtTpsProtoRepeatedPoi* other) {
  if (other != this) {
    poilist_.Swap(&other->poilist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedPoi::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedPoi_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedPoi_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoPoiDoseInPlan::kPoiuidFieldNumber;
const int RtTpsProtoPoiDoseInPlan::kPlanUIDFieldNumber;
const int RtTpsProtoPoiDoseInPlan::kDoseFieldNumber;
const int RtTpsProtoPoiDoseInPlan::kDoseCalcMethodFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoPoiDoseInPlan::RtTpsProtoPoiDoseInPlan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoPoiDoseInPlan::InitAsDefaultInstance() {
}

RtTpsProtoPoiDoseInPlan::RtTpsProtoPoiDoseInPlan(const RtTpsProtoPoiDoseInPlan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoPoiDoseInPlan::SharedCtor() {
  _cached_size_ = 0;
  poiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dose_ = 0;
  dosecalcmethod_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoPoiDoseInPlan::~RtTpsProtoPoiDoseInPlan() {
  SharedDtor();
}

void RtTpsProtoPoiDoseInPlan::SharedDtor() {
  if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete poiuid_;
  }
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    delete planuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoPoiDoseInPlan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoPoiDoseInPlan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoPoiDoseInPlan_descriptor_;
}

const RtTpsProtoPoiDoseInPlan& RtTpsProtoPoiDoseInPlan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();  return *default_instance_;
}

RtTpsProtoPoiDoseInPlan* RtTpsProtoPoiDoseInPlan::default_instance_ = NULL;

RtTpsProtoPoiDoseInPlan* RtTpsProtoPoiDoseInPlan::New() const {
  return new RtTpsProtoPoiDoseInPlan;
}

void RtTpsProtoPoiDoseInPlan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_poiuid()) {
      if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
        poiuid_->clear();
      }
    }
    if (has_planuid()) {
      if (planuid_ != &::google::protobuf::internal::kEmptyString) {
        planuid_->clear();
      }
    }
    dose_ = 0;
    dosecalcmethod_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoPoiDoseInPlan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string poiuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_poiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->poiuid().data(), this->poiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_planUID;
        break;
      }
      
      // optional string planUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_planUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_planuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->planuid().data(), this->planuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_dose;
        break;
      }
      
      // optional float dose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_dose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dose_)));
          set_has_dose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_doseCalcMethod;
        break;
      }
      
      // optional int32 doseCalcMethod = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doseCalcMethod:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dosecalcmethod_)));
          set_has_dosecalcmethod();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoPoiDoseInPlan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string poiuid = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->poiuid(), output);
  }
  
  // optional string planUID = 2;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->planuid(), output);
  }
  
  // optional float dose = 3;
  if (has_dose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->dose(), output);
  }
  
  // optional int32 doseCalcMethod = 4;
  if (has_dosecalcmethod()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dosecalcmethod(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoPoiDoseInPlan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string poiuid = 1;
  if (has_poiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->poiuid().data(), this->poiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->poiuid(), target);
  }
  
  // optional string planUID = 2;
  if (has_planuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->planuid().data(), this->planuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->planuid(), target);
  }
  
  // optional float dose = 3;
  if (has_dose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->dose(), target);
  }
  
  // optional int32 doseCalcMethod = 4;
  if (has_dosecalcmethod()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dosecalcmethod(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoPoiDoseInPlan::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string poiuid = 1;
    if (has_poiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->poiuid());
    }
    
    // optional string planUID = 2;
    if (has_planuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->planuid());
    }
    
    // optional float dose = 3;
    if (has_dose()) {
      total_size += 1 + 4;
    }
    
    // optional int32 doseCalcMethod = 4;
    if (has_dosecalcmethod()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dosecalcmethod());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoPoiDoseInPlan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoPoiDoseInPlan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoPoiDoseInPlan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoPoiDoseInPlan::MergeFrom(const RtTpsProtoPoiDoseInPlan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_poiuid()) {
      set_poiuid(from.poiuid());
    }
    if (from.has_planuid()) {
      set_planuid(from.planuid());
    }
    if (from.has_dose()) {
      set_dose(from.dose());
    }
    if (from.has_dosecalcmethod()) {
      set_dosecalcmethod(from.dosecalcmethod());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoPoiDoseInPlan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoPoiDoseInPlan::CopyFrom(const RtTpsProtoPoiDoseInPlan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoPoiDoseInPlan::IsInitialized() const {
  
  return true;
}

void RtTpsProtoPoiDoseInPlan::Swap(RtTpsProtoPoiDoseInPlan* other) {
  if (other != this) {
    std::swap(poiuid_, other->poiuid_);
    std::swap(planuid_, other->planuid_);
    std::swap(dose_, other->dose_);
    std::swap(dosecalcmethod_, other->dosecalcmethod_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoPoiDoseInPlan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoPoiDoseInPlan_descriptor_;
  metadata.reflection = RtTpsProtoPoiDoseInPlan_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
