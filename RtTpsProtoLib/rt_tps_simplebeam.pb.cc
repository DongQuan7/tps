// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_simplebeam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        namespace {

            const ::google::protobuf::Descriptor* RT_TPS_SimpleBeam_descriptor_ = NULL;
            const ::google::protobuf::internal::GeneratedMessageReflection*
                RT_TPS_SimpleBeam_reflection_ = NULL;

        }  // namespace


        void protobuf_AssignDesc_rt_5ftps_5fsimplebeam_2eproto() {
            protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();
            const ::google::protobuf::FileDescriptor* file =
                ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
                "rt_tps_simplebeam.proto");
            GOOGLE_CHECK(file != NULL);
            RT_TPS_SimpleBeam_descriptor_ = file->message_type(0);
            static const int RT_TPS_SimpleBeam_offsets_[5] = {
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, gantry_start_angle_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, gantry_arc_length_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, is_clockwise_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, collimator_angle_),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, couch_angle_),
            };
            RT_TPS_SimpleBeam_reflection_ =
                new ::google::protobuf::internal::GeneratedMessageReflection(
                RT_TPS_SimpleBeam_descriptor_,
                RT_TPS_SimpleBeam::default_instance_,
                RT_TPS_SimpleBeam_offsets_,
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, _has_bits_[0]),
                GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleBeam, _unknown_fields_),
                -1,
                ::google::protobuf::DescriptorPool::generated_pool(),
                ::google::protobuf::MessageFactory::generated_factory(),
                sizeof(RT_TPS_SimpleBeam));
        }

        namespace {

            GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
            inline void protobuf_AssignDescriptorsOnce() {
                ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                    &protobuf_AssignDesc_rt_5ftps_5fsimplebeam_2eproto);
            }

            void protobuf_RegisterTypes(const ::std::string&) {
                protobuf_AssignDescriptorsOnce();
                ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
                    RT_TPS_SimpleBeam_descriptor_, &RT_TPS_SimpleBeam::default_instance());
            }

        }  // namespace

        void protobuf_ShutdownFile_rt_5ftps_5fsimplebeam_2eproto() {
            delete RT_TPS_SimpleBeam::default_instance_;
            delete RT_TPS_SimpleBeam_reflection_;
        }

        void protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto() {
            static bool already_here = false;
            if (already_here) return;
            already_here = true;
            GOOGLE_PROTOBUF_VERIFY_VERSION;

            ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
                "\n\027rt_tps_simplebeam.proto\022\ttps.proto\"\217\001\n"
                "\021RT_TPS_SimpleBeam\022\032\n\022gantry_start_angle"
                "\030\001 \002(\002\022\031\n\021gantry_arc_length\030\002 \001(\002\022\024\n\014is_"
                "clockwise\030\003 \001(\010\022\030\n\020collimator_angle\030\004 \002("
                "\002\022\023\n\013couch_angle\030\005 \002(\002", 182);
            ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
                "rt_tps_simplebeam.proto", &protobuf_RegisterTypes);
            RT_TPS_SimpleBeam::default_instance_ = new RT_TPS_SimpleBeam();
            RT_TPS_SimpleBeam::default_instance_->InitAsDefaultInstance();
            ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fsimplebeam_2eproto);
        }

        // Force AddDescriptors() to be called at static initialization time.
        struct StaticDescriptorInitializer_rt_5ftps_5fsimplebeam_2eproto {
            StaticDescriptorInitializer_rt_5ftps_5fsimplebeam_2eproto() {
                protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();
            }
        } static_descriptor_initializer_rt_5ftps_5fsimplebeam_2eproto_;


        // ===================================================================

#ifndef _MSC_VER
        const int RT_TPS_SimpleBeam::kGantryStartAngleFieldNumber;
        const int RT_TPS_SimpleBeam::kGantryArcLengthFieldNumber;
        const int RT_TPS_SimpleBeam::kIsClockwiseFieldNumber;
        const int RT_TPS_SimpleBeam::kCollimatorAngleFieldNumber;
        const int RT_TPS_SimpleBeam::kCouchAngleFieldNumber;
#endif  // !_MSC_VER

        RT_TPS_SimpleBeam::RT_TPS_SimpleBeam()
            : ::google::protobuf::Message() {
                SharedCtor();
        }

        void RT_TPS_SimpleBeam::InitAsDefaultInstance() {
        }

        RT_TPS_SimpleBeam::RT_TPS_SimpleBeam(const RT_TPS_SimpleBeam& from)
            : ::google::protobuf::Message() {
                SharedCtor();
                MergeFrom(from);
        }

        void RT_TPS_SimpleBeam::SharedCtor() {
            _cached_size_ = 0;
            gantry_start_angle_ = 0;
            gantry_arc_length_ = 0;
            is_clockwise_ = false;
            collimator_angle_ = 0;
            couch_angle_ = 0;
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
        }

        RT_TPS_SimpleBeam::~RT_TPS_SimpleBeam() {
            SharedDtor();
        }

        void RT_TPS_SimpleBeam::SharedDtor() {
            if (this != default_instance_) {
            }
        }

        void RT_TPS_SimpleBeam::SetCachedSize(int size) const {
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
        }
        const ::google::protobuf::Descriptor* RT_TPS_SimpleBeam::descriptor() {
            protobuf_AssignDescriptorsOnce();
            return RT_TPS_SimpleBeam_descriptor_;
        }

        const RT_TPS_SimpleBeam& RT_TPS_SimpleBeam::default_instance() {
            if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();  return *default_instance_;
        }

        RT_TPS_SimpleBeam* RT_TPS_SimpleBeam::default_instance_ = NULL;

        RT_TPS_SimpleBeam* RT_TPS_SimpleBeam::New() const {
            return new RT_TPS_SimpleBeam;
        }

        void RT_TPS_SimpleBeam::Clear() {
            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                gantry_start_angle_ = 0;
                gantry_arc_length_ = 0;
                is_clockwise_ = false;
                collimator_angle_ = 0;
                couch_angle_ = 0;
            }
            ::memset(_has_bits_, 0, sizeof(_has_bits_));
            mutable_unknown_fields()->Clear();
        }

        bool RT_TPS_SimpleBeam::MergePartialFromCodedStream(
            ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
                ::google::protobuf::uint32 tag;
                while ((tag = input->ReadTag()) != 0) {
                    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
                        // required float gantry_start_angle = 1;
                    case 1: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                    input, &gantry_start_angle_)));
                                set_has_gantry_start_angle();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(21)) goto parse_gantry_arc_length;
                        break;
                            }

                            // optional float gantry_arc_length = 2;
                    case 2: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
parse_gantry_arc_length:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                    input, &gantry_arc_length_)));
                                set_has_gantry_arc_length();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(24)) goto parse_is_clockwise;
                        break;
                            }

                            // optional bool is_clockwise = 3;
                    case 3: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
parse_is_clockwise:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                                    input, &is_clockwise_)));
                                set_has_is_clockwise();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(37)) goto parse_collimator_angle;
                        break;
                            }

                            // required float collimator_angle = 4;
                    case 4: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
parse_collimator_angle:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                    input, &collimator_angle_)));
                                set_has_collimator_angle();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectTag(45)) goto parse_couch_angle;
                        break;
                            }

                            // required float couch_angle = 5;
                    case 5: {
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
parse_couch_angle:
                                DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                                    float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                                    input, &couch_angle_)));
                                set_has_couch_angle();
                        } else {
                            goto handle_uninterpreted;
                        }
                        if (input->ExpectAtEnd()) return true;
                        break;
                            }

                    default: {
handle_uninterpreted:
                        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
                            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
                                return true;
                        }
                        DO_(::google::protobuf::internal::WireFormat::SkipField(
                            input, tag, mutable_unknown_fields()));
                        break;
                             }
                    }
                }
                return true;
#undef DO_
        }

        void RT_TPS_SimpleBeam::SerializeWithCachedSizes(
            ::google::protobuf::io::CodedOutputStream* output) const {
                // required float gantry_start_angle = 1;
                if (has_gantry_start_angle()) {
                    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->gantry_start_angle(), output);
                }

                // optional float gantry_arc_length = 2;
                if (has_gantry_arc_length()) {
                    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gantry_arc_length(), output);
                }

                // optional bool is_clockwise = 3;
                if (has_is_clockwise()) {
                    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_clockwise(), output);
                }

                // required float collimator_angle = 4;
                if (has_collimator_angle()) {
                    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->collimator_angle(), output);
                }

                // required float couch_angle = 5;
                if (has_couch_angle()) {
                    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->couch_angle(), output);
                }

                if (!unknown_fields().empty()) {
                    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
                        unknown_fields(), output);
                }
        }

        ::google::protobuf::uint8* RT_TPS_SimpleBeam::SerializeWithCachedSizesToArray(
            ::google::protobuf::uint8* target) const {
                // required float gantry_start_angle = 1;
                if (has_gantry_start_angle()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->gantry_start_angle(), target);
                }

                // optional float gantry_arc_length = 2;
                if (has_gantry_arc_length()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gantry_arc_length(), target);
                }

                // optional bool is_clockwise = 3;
                if (has_is_clockwise()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_clockwise(), target);
                }

                // required float collimator_angle = 4;
                if (has_collimator_angle()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->collimator_angle(), target);
                }

                // required float couch_angle = 5;
                if (has_couch_angle()) {
                    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->couch_angle(), target);
                }

                if (!unknown_fields().empty()) {
                    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
                        unknown_fields(), target);
                }
                return target;
        }

        int RT_TPS_SimpleBeam::ByteSize() const {
            int total_size = 0;

            if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                // required float gantry_start_angle = 1;
                if (has_gantry_start_angle()) {
                    total_size += 1 + 4;
                }

                // optional float gantry_arc_length = 2;
                if (has_gantry_arc_length()) {
                    total_size += 1 + 4;
                }

                // optional bool is_clockwise = 3;
                if (has_is_clockwise()) {
                    total_size += 1 + 1;
                }

                // required float collimator_angle = 4;
                if (has_collimator_angle()) {
                    total_size += 1 + 4;
                }

                // required float couch_angle = 5;
                if (has_couch_angle()) {
                    total_size += 1 + 4;
                }

            }
            if (!unknown_fields().empty()) {
                total_size +=
                    ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
                    unknown_fields());
            }
            GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
            _cached_size_ = total_size;
            GOOGLE_SAFE_CONCURRENT_WRITES_END();
            return total_size;
        }

        void RT_TPS_SimpleBeam::MergeFrom(const ::google::protobuf::Message& from) {
            GOOGLE_CHECK_NE(&from, this);
            const RT_TPS_SimpleBeam* source =
                ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_SimpleBeam*>(
                &from);
            if (source == NULL) {
                ::google::protobuf::internal::ReflectionOps::Merge(from, this);
            } else {
                MergeFrom(*source);
            }
        }

        void RT_TPS_SimpleBeam::MergeFrom(const RT_TPS_SimpleBeam& from) {
            GOOGLE_CHECK_NE(&from, this);
            if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
                if (from.has_gantry_start_angle()) {
                    set_gantry_start_angle(from.gantry_start_angle());
                }
                if (from.has_gantry_arc_length()) {
                    set_gantry_arc_length(from.gantry_arc_length());
                }
                if (from.has_is_clockwise()) {
                    set_is_clockwise(from.is_clockwise());
                }
                if (from.has_collimator_angle()) {
                    set_collimator_angle(from.collimator_angle());
                }
                if (from.has_couch_angle()) {
                    set_couch_angle(from.couch_angle());
                }
            }
            mutable_unknown_fields()->MergeFrom(from.unknown_fields());
        }

        void RT_TPS_SimpleBeam::CopyFrom(const ::google::protobuf::Message& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        void RT_TPS_SimpleBeam::CopyFrom(const RT_TPS_SimpleBeam& from) {
            if (&from == this) return;
            Clear();
            MergeFrom(from);
        }

        bool RT_TPS_SimpleBeam::IsInitialized() const {
            if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;

            return true;
        }

        void RT_TPS_SimpleBeam::Swap(RT_TPS_SimpleBeam* other) {
            if (other != this) {
                std::swap(gantry_start_angle_, other->gantry_start_angle_);
                std::swap(gantry_arc_length_, other->gantry_arc_length_);
                std::swap(is_clockwise_, other->is_clockwise_);
                std::swap(collimator_angle_, other->collimator_angle_);
                std::swap(couch_angle_, other->couch_angle_);
                std::swap(_has_bits_[0], other->_has_bits_[0]);
                _unknown_fields_.Swap(&other->_unknown_fields_);
                std::swap(_cached_size_, other->_cached_size_);
            }
        }

        ::google::protobuf::Metadata RT_TPS_SimpleBeam::GetMetadata() const {
            protobuf_AssignDescriptorsOnce();
            ::google::protobuf::Metadata metadata;
            metadata.descriptor = RT_TPS_SimpleBeam_descriptor_;
            metadata.reflection = RT_TPS_SimpleBeam_reflection_;
            return metadata;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
