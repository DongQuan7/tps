// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_mouse_action.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoMouseAction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoMouseAction_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_mouse_action.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoMouseAction_descriptor_ = file->message_type(0);
  static const int RtTpsProtoMouseAction_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, windowtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, windowuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, previousaction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, height_),
  };
  RtTpsProtoMouseAction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoMouseAction_descriptor_,
      RtTpsProtoMouseAction::default_instance_,
      RtTpsProtoMouseAction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoMouseAction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoMouseAction));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoMouseAction_descriptor_, &RtTpsProtoMouseAction::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5fmouse_5faction_2eproto() {
  delete RtTpsProtoMouseAction::default_instance_;
  delete RtTpsProtoMouseAction_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037rt_tps_proto_mouse_action.proto\022\ttps.p"
    "roto\"\233\001\n\025RtTpsProtoMouseAction\022\022\n\nwindow"
    "Type\030\001 \002(\005\022\021\n\twindowUid\030\002 \002(\t\022\016\n\006action\030"
    "\003 \002(\005\022\026\n\016previousAction\030\004 \001(\005\022\t\n\001x\030\005 \002(\001"
    "\022\t\n\001y\030\006 \002(\001\022\r\n\005width\030\007 \001(\005\022\016\n\006height\030\010 \001"
    "(\005", 202);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_mouse_action.proto", &protobuf_RegisterTypes);
  RtTpsProtoMouseAction::default_instance_ = new RtTpsProtoMouseAction();
  RtTpsProtoMouseAction::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5fmouse_5faction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5fmouse_5faction_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5fmouse_5faction_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5fmouse_5faction_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoMouseAction::kWindowTypeFieldNumber;
const int RtTpsProtoMouseAction::kWindowUidFieldNumber;
const int RtTpsProtoMouseAction::kActionFieldNumber;
const int RtTpsProtoMouseAction::kPreviousActionFieldNumber;
const int RtTpsProtoMouseAction::kXFieldNumber;
const int RtTpsProtoMouseAction::kYFieldNumber;
const int RtTpsProtoMouseAction::kWidthFieldNumber;
const int RtTpsProtoMouseAction::kHeightFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoMouseAction::RtTpsProtoMouseAction()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoMouseAction::InitAsDefaultInstance() {
}

RtTpsProtoMouseAction::RtTpsProtoMouseAction(const RtTpsProtoMouseAction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoMouseAction::SharedCtor() {
  _cached_size_ = 0;
  windowtype_ = 0;
  windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  action_ = 0;
  previousaction_ = 0;
  x_ = 0;
  y_ = 0;
  width_ = 0;
  height_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoMouseAction::~RtTpsProtoMouseAction() {
  SharedDtor();
}

void RtTpsProtoMouseAction::SharedDtor() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    delete windowuid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoMouseAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoMouseAction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoMouseAction_descriptor_;
}

const RtTpsProtoMouseAction& RtTpsProtoMouseAction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();  return *default_instance_;
}

RtTpsProtoMouseAction* RtTpsProtoMouseAction::default_instance_ = NULL;

RtTpsProtoMouseAction* RtTpsProtoMouseAction::New() const {
  return new RtTpsProtoMouseAction;
}

void RtTpsProtoMouseAction::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    windowtype_ = 0;
    if (has_windowuid()) {
      if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
        windowuid_->clear();
      }
    }
    action_ = 0;
    previousaction_ = 0;
    x_ = 0;
    y_ = 0;
    width_ = 0;
    height_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoMouseAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 windowType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &windowtype_)));
          set_has_windowtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_windowUid;
        break;
      }
      
      // required string windowUid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_windowUid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_windowuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->windowuid().data(), this->windowuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }
      
      // required int32 action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_previousAction;
        break;
      }
      
      // optional int32 previousAction = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_previousAction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &previousaction_)));
          set_has_previousaction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_x;
        break;
      }
      
      // required double x = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_y;
        break;
      }
      
      // required double y = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_width;
        break;
      }
      
      // optional int32 width = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_height;
        break;
      }
      
      // optional int32 height = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoMouseAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 windowType = 1;
  if (has_windowtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->windowtype(), output);
  }
  
  // required string windowUid = 2;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->windowuid(), output);
  }
  
  // required int32 action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->action(), output);
  }
  
  // optional int32 previousAction = 4;
  if (has_previousaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->previousaction(), output);
  }
  
  // required double x = 5;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->x(), output);
  }
  
  // required double y = 6;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->y(), output);
  }
  
  // optional int32 width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->width(), output);
  }
  
  // optional int32 height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->height(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoMouseAction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 windowType = 1;
  if (has_windowtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->windowtype(), target);
  }
  
  // required string windowUid = 2;
  if (has_windowuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->windowuid().data(), this->windowuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->windowuid(), target);
  }
  
  // required int32 action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->action(), target);
  }
  
  // optional int32 previousAction = 4;
  if (has_previousaction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->previousaction(), target);
  }
  
  // required double x = 5;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->x(), target);
  }
  
  // required double y = 6;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->y(), target);
  }
  
  // optional int32 width = 7;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->width(), target);
  }
  
  // optional int32 height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->height(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoMouseAction::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 windowType = 1;
    if (has_windowtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->windowtype());
    }
    
    // required string windowUid = 2;
    if (has_windowuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->windowuid());
    }
    
    // required int32 action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->action());
    }
    
    // optional int32 previousAction = 4;
    if (has_previousaction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->previousaction());
    }
    
    // required double x = 5;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 6;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional int32 width = 7;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }
    
    // optional int32 height = 8;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->height());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoMouseAction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoMouseAction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoMouseAction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoMouseAction::MergeFrom(const RtTpsProtoMouseAction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_windowtype()) {
      set_windowtype(from.windowtype());
    }
    if (from.has_windowuid()) {
      set_windowuid(from.windowuid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_previousaction()) {
      set_previousaction(from.previousaction());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoMouseAction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoMouseAction::CopyFrom(const RtTpsProtoMouseAction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoMouseAction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000037) != 0x00000037) return false;
  
  return true;
}

void RtTpsProtoMouseAction::Swap(RtTpsProtoMouseAction* other) {
  if (other != this) {
    std::swap(windowtype_, other->windowtype_);
    std::swap(windowuid_, other->windowuid_);
    std::swap(action_, other->action_);
    std::swap(previousaction_, other->previousaction_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoMouseAction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoMouseAction_descriptor_;
  metadata.reflection = RtTpsProtoMouseAction_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
