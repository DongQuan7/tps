// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_dvhdata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_DVHData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_DVHData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fdvhdata_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_dvhdata.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_DVHData_descriptor_ = file->message_type(0);
  static const int RT_TPS_DVHData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, parentuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, voiuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, mindose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, maxdose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, meandose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, standarddeviation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, ingrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, cumulativepoint_),
  };
  RT_TPS_DVHData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_DVHData_descriptor_,
      RT_TPS_DVHData::default_instance_,
      RT_TPS_DVHData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_DVHData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_DVHData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fdvhdata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_DVHData_descriptor_, &RT_TPS_DVHData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fdvhdata_2eproto() {
  delete RT_TPS_DVHData::default_instance_;
  delete RT_TPS_DVHData_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fpoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024rt_tps_dvhdata.proto\022\ttps.proto\032\022rt_tp"
    "s_point.proto\"\374\001\n\016RT_TPS_DVHData\022\021\n\tpare"
    "ntuid\030\001 \002(\t\022\016\n\006voiuid\030\002 \002(\t\022\017\n\007minDose\030\003"
    " \001(\002\022\017\n\007maxDose\030\004 \001(\002\022\020\n\010meanDose\030\005 \001(\002\022"
    "\031\n\021standardDeviation\030\006 \001(\002\022\016\n\006inGrid\030\007 \001"
    "(\002\022\016\n\006volume\030\010 \001(\002\022&\n\005point\030\t \003(\0132\027.tps."
    "proto.RT_TPS_POINT\0220\n\017cumulativepoint\030\n "
    "\003(\0132\027.tps.proto.RT_TPS_POINT", 308);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_dvhdata.proto", &protobuf_RegisterTypes);
  RT_TPS_DVHData::default_instance_ = new RT_TPS_DVHData();
  RT_TPS_DVHData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fdvhdata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fdvhdata_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fdvhdata_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fdvhdata_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_DVHData::kParentuidFieldNumber;
const int RT_TPS_DVHData::kVoiuidFieldNumber;
const int RT_TPS_DVHData::kMinDoseFieldNumber;
const int RT_TPS_DVHData::kMaxDoseFieldNumber;
const int RT_TPS_DVHData::kMeanDoseFieldNumber;
const int RT_TPS_DVHData::kStandardDeviationFieldNumber;
const int RT_TPS_DVHData::kInGridFieldNumber;
const int RT_TPS_DVHData::kVolumeFieldNumber;
const int RT_TPS_DVHData::kPointFieldNumber;
const int RT_TPS_DVHData::kCumulativepointFieldNumber;
#endif  // !_MSC_VER

RT_TPS_DVHData::RT_TPS_DVHData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_DVHData::InitAsDefaultInstance() {
}

RT_TPS_DVHData::RT_TPS_DVHData(const RT_TPS_DVHData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_DVHData::SharedCtor() {
  _cached_size_ = 0;
  parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mindose_ = 0;
  maxdose_ = 0;
  meandose_ = 0;
  standarddeviation_ = 0;
  ingrid_ = 0;
  volume_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_DVHData::~RT_TPS_DVHData() {
  SharedDtor();
}

void RT_TPS_DVHData::SharedDtor() {
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    delete parentuid_;
  }
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    delete voiuid_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_DVHData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_DVHData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_DVHData_descriptor_;
}

const RT_TPS_DVHData& RT_TPS_DVHData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();  return *default_instance_;
}

RT_TPS_DVHData* RT_TPS_DVHData::default_instance_ = NULL;

RT_TPS_DVHData* RT_TPS_DVHData::New() const {
  return new RT_TPS_DVHData;
}

void RT_TPS_DVHData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parentuid()) {
      if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
        parentuid_->clear();
      }
    }
    if (has_voiuid()) {
      if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
        voiuid_->clear();
      }
    }
    mindose_ = 0;
    maxdose_ = 0;
    meandose_ = 0;
    standarddeviation_ = 0;
    ingrid_ = 0;
    volume_ = 0;
  }
  point_.Clear();
  cumulativepoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_DVHData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string parentuid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parentuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parentuid().data(), this->parentuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_voiuid;
        break;
      }
      
      // required string voiuid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_voiuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_voiuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->voiuid().data(), this->voiuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_minDose;
        break;
      }
      
      // optional float minDose = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_minDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mindose_)));
          set_has_mindose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_maxDose;
        break;
      }
      
      // optional float maxDose = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_maxDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &maxdose_)));
          set_has_maxdose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_meanDose;
        break;
      }
      
      // optional float meanDose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_meanDose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meandose_)));
          set_has_meandose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_standardDeviation;
        break;
      }
      
      // optional float standardDeviation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_standardDeviation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &standarddeviation_)));
          set_has_standarddeviation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_inGrid;
        break;
      }
      
      // optional float inGrid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_inGrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ingrid_)));
          set_has_ingrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_volume;
        break;
      }
      
      // optional float volume = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_point;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_POINT point = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_point;
        if (input->ExpectTag(82)) goto parse_cumulativepoint;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cumulativepoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cumulativepoint()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_cumulativepoint;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_DVHData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string parentuid = 1;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->parentuid(), output);
  }
  
  // required string voiuid = 2;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->voiuid(), output);
  }
  
  // optional float minDose = 3;
  if (has_mindose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->mindose(), output);
  }
  
  // optional float maxDose = 4;
  if (has_maxdose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->maxdose(), output);
  }
  
  // optional float meanDose = 5;
  if (has_meandose()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->meandose(), output);
  }
  
  // optional float standardDeviation = 6;
  if (has_standarddeviation()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->standarddeviation(), output);
  }
  
  // optional float inGrid = 7;
  if (has_ingrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ingrid(), output);
  }
  
  // optional float volume = 8;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->volume(), output);
  }
  
  // repeated .tps.proto.RT_TPS_POINT point = 9;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->point(i), output);
  }
  
  // repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
  for (int i = 0; i < this->cumulativepoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->cumulativepoint(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_DVHData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string parentuid = 1;
  if (has_parentuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parentuid().data(), this->parentuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parentuid(), target);
  }
  
  // required string voiuid = 2;
  if (has_voiuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->voiuid().data(), this->voiuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->voiuid(), target);
  }
  
  // optional float minDose = 3;
  if (has_mindose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->mindose(), target);
  }
  
  // optional float maxDose = 4;
  if (has_maxdose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->maxdose(), target);
  }
  
  // optional float meanDose = 5;
  if (has_meandose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->meandose(), target);
  }
  
  // optional float standardDeviation = 6;
  if (has_standarddeviation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->standarddeviation(), target);
  }
  
  // optional float inGrid = 7;
  if (has_ingrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->ingrid(), target);
  }
  
  // optional float volume = 8;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->volume(), target);
  }
  
  // repeated .tps.proto.RT_TPS_POINT point = 9;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->point(i), target);
  }
  
  // repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
  for (int i = 0; i < this->cumulativepoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->cumulativepoint(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_DVHData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string parentuid = 1;
    if (has_parentuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parentuid());
    }
    
    // required string voiuid = 2;
    if (has_voiuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->voiuid());
    }
    
    // optional float minDose = 3;
    if (has_mindose()) {
      total_size += 1 + 4;
    }
    
    // optional float maxDose = 4;
    if (has_maxdose()) {
      total_size += 1 + 4;
    }
    
    // optional float meanDose = 5;
    if (has_meandose()) {
      total_size += 1 + 4;
    }
    
    // optional float standardDeviation = 6;
    if (has_standarddeviation()) {
      total_size += 1 + 4;
    }
    
    // optional float inGrid = 7;
    if (has_ingrid()) {
      total_size += 1 + 4;
    }
    
    // optional float volume = 8;
    if (has_volume()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated .tps.proto.RT_TPS_POINT point = 9;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }
  
  // repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
  total_size += 1 * this->cumulativepoint_size();
  for (int i = 0; i < this->cumulativepoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cumulativepoint(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_DVHData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_DVHData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_DVHData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_DVHData::MergeFrom(const RT_TPS_DVHData& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  cumulativepoint_.MergeFrom(from.cumulativepoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parentuid()) {
      set_parentuid(from.parentuid());
    }
    if (from.has_voiuid()) {
      set_voiuid(from.voiuid());
    }
    if (from.has_mindose()) {
      set_mindose(from.mindose());
    }
    if (from.has_maxdose()) {
      set_maxdose(from.maxdose());
    }
    if (from.has_meandose()) {
      set_meandose(from.meandose());
    }
    if (from.has_standarddeviation()) {
      set_standarddeviation(from.standarddeviation());
    }
    if (from.has_ingrid()) {
      set_ingrid(from.ingrid());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_DVHData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_DVHData::CopyFrom(const RT_TPS_DVHData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_DVHData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < point_size(); i++) {
    if (!this->point(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cumulativepoint_size(); i++) {
    if (!this->cumulativepoint(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_DVHData::Swap(RT_TPS_DVHData* other) {
  if (other != this) {
    std::swap(parentuid_, other->parentuid_);
    std::swap(voiuid_, other->voiuid_);
    std::swap(mindose_, other->mindose_);
    std::swap(maxdose_, other->maxdose_);
    std::swap(meandose_, other->meandose_);
    std::swap(standarddeviation_, other->standarddeviation_);
    std::swap(ingrid_, other->ingrid_);
    std::swap(volume_, other->volume_);
    point_.Swap(&other->point_);
    cumulativepoint_.Swap(&other->cumulativepoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_DVHData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_DVHData_descriptor_;
  metadata.reflection = RT_TPS_DVHData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
