// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_ct2densitytable.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_CT2DensityTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_CT2DensityTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* RT_TPS_CT2DensityItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_CT2DensityItem_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fct2densitytable_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fct2densitytable_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_ct2densitytable.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_CT2DensityTable_descriptor_ = file->message_type(0);
  static const int RT_TPS_CT2DensityTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, tableuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, tablename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, tabledata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, isdefault_),
  };
  RT_TPS_CT2DensityTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_CT2DensityTable_descriptor_,
      RT_TPS_CT2DensityTable::default_instance_,
      RT_TPS_CT2DensityTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_CT2DensityTable));
  RT_TPS_CT2DensityItem_descriptor_ = file->message_type(1);
  static const int RT_TPS_CT2DensityItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityItem, ctvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityItem, massdensity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityItem, referenceelectrondensity_),
  };
  RT_TPS_CT2DensityItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_CT2DensityItem_descriptor_,
      RT_TPS_CT2DensityItem::default_instance_,
      RT_TPS_CT2DensityItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_CT2DensityItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_CT2DensityItem));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fct2densitytable_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_CT2DensityTable_descriptor_, &RT_TPS_CT2DensityTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_CT2DensityItem_descriptor_, &RT_TPS_CT2DensityItem::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fct2densitytable_2eproto() {
  delete RT_TPS_CT2DensityTable::default_instance_;
  delete RT_TPS_CT2DensityTable_reflection_;
  delete RT_TPS_CT2DensityItem::default_instance_;
  delete RT_TPS_CT2DensityItem_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fct2densitytable_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::tps::proto::protobuf_AddDesc_rt_5ftps_5fpoint_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rt_tps_ct2densitytable.proto\022\ttps.prot"
    "o\032\022rt_tps_point.proto\"\205\001\n\026RT_TPS_CT2Dens"
    "ityTable\022\020\n\010tableUid\030\001 \002(\t\022\021\n\ttableName\030"
    "\002 \001(\t\0223\n\ttableData\030\003 \003(\0132 .tps.proto.RT_"
    "TPS_CT2DensityItem\022\021\n\tisdefault\030\004 \001(\010\"_\n"
    "\025RT_TPS_CT2DensityItem\022\017\n\007ctValue\030\001 \002(\005\022"
    "\023\n\013massDensity\030\002 \002(\002\022 \n\030referenceElectro"
    "nDensity\030\003 \002(\002", 294);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_ct2densitytable.proto", &protobuf_RegisterTypes);
  RT_TPS_CT2DensityTable::default_instance_ = new RT_TPS_CT2DensityTable();
  RT_TPS_CT2DensityItem::default_instance_ = new RT_TPS_CT2DensityItem();
  RT_TPS_CT2DensityTable::default_instance_->InitAsDefaultInstance();
  RT_TPS_CT2DensityItem::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fct2densitytable_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fct2densitytable_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fct2densitytable_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fct2densitytable_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fct2densitytable_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_CT2DensityTable::kTableUidFieldNumber;
const int RT_TPS_CT2DensityTable::kTableNameFieldNumber;
const int RT_TPS_CT2DensityTable::kTableDataFieldNumber;
const int RT_TPS_CT2DensityTable::kIsdefaultFieldNumber;
#endif  // !_MSC_VER

RT_TPS_CT2DensityTable::RT_TPS_CT2DensityTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_CT2DensityTable::InitAsDefaultInstance() {
}

RT_TPS_CT2DensityTable::RT_TPS_CT2DensityTable(const RT_TPS_CT2DensityTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_CT2DensityTable::SharedCtor() {
  _cached_size_ = 0;
  tableuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tablename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isdefault_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_CT2DensityTable::~RT_TPS_CT2DensityTable() {
  SharedDtor();
}

void RT_TPS_CT2DensityTable::SharedDtor() {
  if (tableuid_ != &::google::protobuf::internal::kEmptyString) {
    delete tableuid_;
  }
  if (tablename_ != &::google::protobuf::internal::kEmptyString) {
    delete tablename_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_CT2DensityTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_CT2DensityTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_CT2DensityTable_descriptor_;
}

const RT_TPS_CT2DensityTable& RT_TPS_CT2DensityTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fct2densitytable_2eproto();  return *default_instance_;
}

RT_TPS_CT2DensityTable* RT_TPS_CT2DensityTable::default_instance_ = NULL;

RT_TPS_CT2DensityTable* RT_TPS_CT2DensityTable::New() const {
  return new RT_TPS_CT2DensityTable;
}

void RT_TPS_CT2DensityTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tableuid()) {
      if (tableuid_ != &::google::protobuf::internal::kEmptyString) {
        tableuid_->clear();
      }
    }
    if (has_tablename()) {
      if (tablename_ != &::google::protobuf::internal::kEmptyString) {
        tablename_->clear();
      }
    }
    isdefault_ = false;
  }
  tabledata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_CT2DensityTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string tableUid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tableuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tableuid().data(), this->tableuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tableName;
        break;
      }
      
      // optional string tableName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tablename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tablename().data(), this->tablename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tableData;
        break;
      }
      
      // repeated .tps.proto.RT_TPS_CT2DensityItem tableData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tableData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tabledata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tableData;
        if (input->ExpectTag(32)) goto parse_isdefault;
        break;
      }
      
      // optional bool isdefault = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdefault:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdefault_)));
          set_has_isdefault();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_CT2DensityTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string tableUid = 1;
  if (has_tableuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tableuid().data(), this->tableuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->tableuid(), output);
  }
  
  // optional string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->tablename(), output);
  }
  
  // repeated .tps.proto.RT_TPS_CT2DensityItem tableData = 3;
  for (int i = 0; i < this->tabledata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tabledata(i), output);
  }
  
  // optional bool isdefault = 4;
  if (has_isdefault()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isdefault(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_CT2DensityTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string tableUid = 1;
  if (has_tableuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tableuid().data(), this->tableuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->tableuid(), target);
  }
  
  // optional string tableName = 2;
  if (has_tablename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tablename().data(), this->tablename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->tablename(), target);
  }
  
  // repeated .tps.proto.RT_TPS_CT2DensityItem tableData = 3;
  for (int i = 0; i < this->tabledata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tabledata(i), target);
  }
  
  // optional bool isdefault = 4;
  if (has_isdefault()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isdefault(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_CT2DensityTable::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string tableUid = 1;
    if (has_tableuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tableuid());
    }
    
    // optional string tableName = 2;
    if (has_tablename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tablename());
    }
    
    // optional bool isdefault = 4;
    if (has_isdefault()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .tps.proto.RT_TPS_CT2DensityItem tableData = 3;
  total_size += 1 * this->tabledata_size();
  for (int i = 0; i < this->tabledata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tabledata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_CT2DensityTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_CT2DensityTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CT2DensityTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_CT2DensityTable::MergeFrom(const RT_TPS_CT2DensityTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  tabledata_.MergeFrom(from.tabledata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tableuid()) {
      set_tableuid(from.tableuid());
    }
    if (from.has_tablename()) {
      set_tablename(from.tablename());
    }
    if (from.has_isdefault()) {
      set_isdefault(from.isdefault());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_CT2DensityTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_CT2DensityTable::CopyFrom(const RT_TPS_CT2DensityTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_CT2DensityTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < tabledata_size(); i++) {
    if (!this->tabledata(i).IsInitialized()) return false;
  }
  return true;
}

void RT_TPS_CT2DensityTable::Swap(RT_TPS_CT2DensityTable* other) {
  if (other != this) {
    std::swap(tableuid_, other->tableuid_);
    std::swap(tablename_, other->tablename_);
    tabledata_.Swap(&other->tabledata_);
    std::swap(isdefault_, other->isdefault_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_CT2DensityTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_CT2DensityTable_descriptor_;
  metadata.reflection = RT_TPS_CT2DensityTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_CT2DensityItem::kCtValueFieldNumber;
const int RT_TPS_CT2DensityItem::kMassDensityFieldNumber;
const int RT_TPS_CT2DensityItem::kReferenceElectronDensityFieldNumber;
#endif  // !_MSC_VER

RT_TPS_CT2DensityItem::RT_TPS_CT2DensityItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_CT2DensityItem::InitAsDefaultInstance() {
}

RT_TPS_CT2DensityItem::RT_TPS_CT2DensityItem(const RT_TPS_CT2DensityItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_CT2DensityItem::SharedCtor() {
  _cached_size_ = 0;
  ctvalue_ = 0;
  massdensity_ = 0;
  referenceelectrondensity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_CT2DensityItem::~RT_TPS_CT2DensityItem() {
  SharedDtor();
}

void RT_TPS_CT2DensityItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RT_TPS_CT2DensityItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_CT2DensityItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_CT2DensityItem_descriptor_;
}

const RT_TPS_CT2DensityItem& RT_TPS_CT2DensityItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fct2densitytable_2eproto();  return *default_instance_;
}

RT_TPS_CT2DensityItem* RT_TPS_CT2DensityItem::default_instance_ = NULL;

RT_TPS_CT2DensityItem* RT_TPS_CT2DensityItem::New() const {
  return new RT_TPS_CT2DensityItem;
}

void RT_TPS_CT2DensityItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctvalue_ = 0;
    massdensity_ = 0;
    referenceelectrondensity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_CT2DensityItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ctValue = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctvalue_)));
          set_has_ctvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_massDensity;
        break;
      }
      
      // required float massDensity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_massDensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &massdensity_)));
          set_has_massdensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_referenceElectronDensity;
        break;
      }
      
      // required float referenceElectronDensity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_referenceElectronDensity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &referenceelectrondensity_)));
          set_has_referenceelectrondensity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_CT2DensityItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ctValue = 1;
  if (has_ctvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ctvalue(), output);
  }
  
  // required float massDensity = 2;
  if (has_massdensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->massdensity(), output);
  }
  
  // required float referenceElectronDensity = 3;
  if (has_referenceelectrondensity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->referenceelectrondensity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_CT2DensityItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ctValue = 1;
  if (has_ctvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ctvalue(), target);
  }
  
  // required float massDensity = 2;
  if (has_massdensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->massdensity(), target);
  }
  
  // required float referenceElectronDensity = 3;
  if (has_referenceelectrondensity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->referenceelectrondensity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_CT2DensityItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ctValue = 1;
    if (has_ctvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctvalue());
    }
    
    // required float massDensity = 2;
    if (has_massdensity()) {
      total_size += 1 + 4;
    }
    
    // required float referenceElectronDensity = 3;
    if (has_referenceelectrondensity()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_CT2DensityItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_CT2DensityItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_CT2DensityItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_CT2DensityItem::MergeFrom(const RT_TPS_CT2DensityItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctvalue()) {
      set_ctvalue(from.ctvalue());
    }
    if (from.has_massdensity()) {
      set_massdensity(from.massdensity());
    }
    if (from.has_referenceelectrondensity()) {
      set_referenceelectrondensity(from.referenceelectrondensity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_CT2DensityItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_CT2DensityItem::CopyFrom(const RT_TPS_CT2DensityItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_CT2DensityItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void RT_TPS_CT2DensityItem::Swap(RT_TPS_CT2DensityItem* other) {
  if (other != this) {
    std::swap(ctvalue_, other->ctvalue_);
    std::swap(massdensity_, other->massdensity_);
    std::swap(referenceelectrondensity_, other->referenceelectrondensity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_CT2DensityItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_CT2DensityItem_descriptor_;
  metadata.reflection = RT_TPS_CT2DensityItem_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
