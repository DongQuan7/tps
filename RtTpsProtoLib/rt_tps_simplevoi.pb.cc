// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_simplevoi.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RT_TPS_SimpleVOI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RT_TPS_SimpleVOI_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fsimplevoi_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_simplevoi.proto");
  GOOGLE_CHECK(file != NULL);
  RT_TPS_SimpleVOI_descriptor_ = file->message_type(0);
  static const int RT_TPS_SimpleVOI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, planningrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, subrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, color_),
  };
  RT_TPS_SimpleVOI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RT_TPS_SimpleVOI_descriptor_,
      RT_TPS_SimpleVOI::default_instance_,
      RT_TPS_SimpleVOI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RT_TPS_SimpleVOI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RT_TPS_SimpleVOI));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fsimplevoi_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RT_TPS_SimpleVOI_descriptor_, &RT_TPS_SimpleVOI::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fsimplevoi_2eproto() {
  delete RT_TPS_SimpleVOI::default_instance_;
  delete RT_TPS_SimpleVOI_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026rt_tps_simplevoi.proto\022\ttps.proto\"V\n\020R"
    "T_TPS_SimpleVOI\022\014\n\004name\030\001 \001(\t\022\024\n\014plannin"
    "gRole\030\002 \002(\005\022\017\n\007subrole\030\003 \002(\005\022\r\n\005color\030\004 "
    "\003(\002", 123);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_simplevoi.proto", &protobuf_RegisterTypes);
  RT_TPS_SimpleVOI::default_instance_ = new RT_TPS_SimpleVOI();
  RT_TPS_SimpleVOI::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fsimplevoi_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fsimplevoi_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fsimplevoi_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fsimplevoi_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RT_TPS_SimpleVOI::kNameFieldNumber;
const int RT_TPS_SimpleVOI::kPlanningRoleFieldNumber;
const int RT_TPS_SimpleVOI::kSubroleFieldNumber;
const int RT_TPS_SimpleVOI::kColorFieldNumber;
#endif  // !_MSC_VER

RT_TPS_SimpleVOI::RT_TPS_SimpleVOI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RT_TPS_SimpleVOI::InitAsDefaultInstance() {
}

RT_TPS_SimpleVOI::RT_TPS_SimpleVOI(const RT_TPS_SimpleVOI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RT_TPS_SimpleVOI::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  planningrole_ = 0;
  subrole_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RT_TPS_SimpleVOI::~RT_TPS_SimpleVOI() {
  SharedDtor();
}

void RT_TPS_SimpleVOI::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RT_TPS_SimpleVOI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RT_TPS_SimpleVOI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RT_TPS_SimpleVOI_descriptor_;
}

const RT_TPS_SimpleVOI& RT_TPS_SimpleVOI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto();  return *default_instance_;
}

RT_TPS_SimpleVOI* RT_TPS_SimpleVOI::default_instance_ = NULL;

RT_TPS_SimpleVOI* RT_TPS_SimpleVOI::New() const {
  return new RT_TPS_SimpleVOI;
}

void RT_TPS_SimpleVOI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    planningrole_ = 0;
    subrole_ = 0;
  }
  color_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RT_TPS_SimpleVOI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_planningRole;
        break;
      }
      
      // required int32 planningRole = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_planningRole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &planningrole_)));
          set_has_planningrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_subrole;
        break;
      }
      
      // required int32 subrole = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subrole:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subrole_)));
          set_has_subrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }
      
      // repeated float color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 37, input, this->mutable_color())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_color())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RT_TPS_SimpleVOI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 planningRole = 2;
  if (has_planningrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->planningrole(), output);
  }
  
  // required int32 subrole = 3;
  if (has_subrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->subrole(), output);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      4, this->color(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RT_TPS_SimpleVOI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 planningRole = 2;
  if (has_planningrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->planningrole(), target);
  }
  
  // required int32 subrole = 3;
  if (has_subrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->subrole(), target);
  }
  
  // repeated float color = 4;
  for (int i = 0; i < this->color_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(4, this->color(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RT_TPS_SimpleVOI::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 planningRole = 2;
    if (has_planningrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->planningrole());
    }
    
    // required int32 subrole = 3;
    if (has_subrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->subrole());
    }
    
  }
  // repeated float color = 4;
  {
    int data_size = 0;
    data_size = 4 * this->color_size();
    total_size += 1 * this->color_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RT_TPS_SimpleVOI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RT_TPS_SimpleVOI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RT_TPS_SimpleVOI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RT_TPS_SimpleVOI::MergeFrom(const RT_TPS_SimpleVOI& from) {
  GOOGLE_CHECK_NE(&from, this);
  color_.MergeFrom(from.color_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_planningrole()) {
      set_planningrole(from.planningrole());
    }
    if (from.has_subrole()) {
      set_subrole(from.subrole());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RT_TPS_SimpleVOI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RT_TPS_SimpleVOI::CopyFrom(const RT_TPS_SimpleVOI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RT_TPS_SimpleVOI::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  
  return true;
}

void RT_TPS_SimpleVOI::Swap(RT_TPS_SimpleVOI* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(planningrole_, other->planningrole_);
    std::swap(subrole_, other->subrole_);
    color_.Swap(&other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RT_TPS_SimpleVOI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RT_TPS_SimpleVOI_descriptor_;
  metadata.reflection = RT_TPS_SimpleVOI_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
