// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "rt_tps_proto_accessory.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RtTpsProtoAccessory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoAccessory_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedAccessory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedAccessory_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoCommissionUnitAccessoryPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoCommissionUnitAccessoryPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RtTpsProtoRepeatedCommissionUnitAccessoryPair_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_rt_5ftps_5fproto_5faccessory_2eproto() {
  protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "rt_tps_proto_accessory.proto");
  GOOGLE_CHECK(file != NULL);
  RtTpsProtoAccessory_descriptor_ = file->message_type(0);
  static const int RtTpsProtoAccessory_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, accessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, accessorytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, accessoryname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, wedgeangle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, wedgeorientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, leftjawmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, leftjawmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, rightjawmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, rightjawmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, topjawmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, topjawmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, bottomjawmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, bottomjawmax_),
  };
  RtTpsProtoAccessory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoAccessory_descriptor_,
      RtTpsProtoAccessory::default_instance_,
      RtTpsProtoAccessory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoAccessory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoAccessory));
  RtTpsProtoRepeatedAccessory_descriptor_ = file->message_type(1);
  static const int RtTpsProtoRepeatedAccessory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedAccessory, accessorylist_),
  };
  RtTpsProtoRepeatedAccessory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedAccessory_descriptor_,
      RtTpsProtoRepeatedAccessory::default_instance_,
      RtTpsProtoRepeatedAccessory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedAccessory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedAccessory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedAccessory));
  RtTpsProtoCommissionUnitAccessoryPair_descriptor_ = file->message_type(2);
  static const int RtTpsProtoCommissionUnitAccessoryPair_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionUnitAccessoryPair, accessoryuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionUnitAccessoryPair, commissionedunituid_),
  };
  RtTpsProtoCommissionUnitAccessoryPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoCommissionUnitAccessoryPair_descriptor_,
      RtTpsProtoCommissionUnitAccessoryPair::default_instance_,
      RtTpsProtoCommissionUnitAccessoryPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionUnitAccessoryPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoCommissionUnitAccessoryPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoCommissionUnitAccessoryPair));
  RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_ = file->message_type(3);
  static const int RtTpsProtoRepeatedCommissionUnitAccessoryPair_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionUnitAccessoryPair, commissionunitaccessorypair_),
  };
  RtTpsProtoRepeatedCommissionUnitAccessoryPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_,
      RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance_,
      RtTpsProtoRepeatedCommissionUnitAccessoryPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionUnitAccessoryPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RtTpsProtoRepeatedCommissionUnitAccessoryPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RtTpsProtoRepeatedCommissionUnitAccessoryPair));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_rt_5ftps_5fproto_5faccessory_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoAccessory_descriptor_, &RtTpsProtoAccessory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedAccessory_descriptor_, &RtTpsProtoRepeatedAccessory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoCommissionUnitAccessoryPair_descriptor_, &RtTpsProtoCommissionUnitAccessoryPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_, &RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_rt_5ftps_5fproto_5faccessory_2eproto() {
  delete RtTpsProtoAccessory::default_instance_;
  delete RtTpsProtoAccessory_reflection_;
  delete RtTpsProtoRepeatedAccessory::default_instance_;
  delete RtTpsProtoRepeatedAccessory_reflection_;
  delete RtTpsProtoCommissionUnitAccessoryPair::default_instance_;
  delete RtTpsProtoCommissionUnitAccessoryPair_reflection_;
  delete RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance_;
  delete RtTpsProtoRepeatedCommissionUnitAccessoryPair_reflection_;
}

void protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034rt_tps_proto_accessory.proto\022\ttps.prot"
    "o\"\253\002\n\023RtTpsProtoAccessory\022\024\n\014accessoryUI"
    "D\030\001 \002(\t\022\025\n\raccessoryType\030\002 \001(\005\022\025\n\raccess"
    "oryName\030\003 \001(\t\022\022\n\nwedgeAngle\030\004 \001(\001\022\030\n\020wed"
    "geOrientation\030\005 \001(\005\022\022\n\nleftJawMin\030\006 \001(\002\022"
    "\022\n\nleftJawMax\030\007 \001(\002\022\023\n\013rightJawMin\030\010 \001(\002"
    "\022\023\n\013rightJawMax\030\t \001(\002\022\021\n\ttopJawMin\030\n \001(\002"
    "\022\021\n\ttopJawMax\030\013 \001(\002\022\024\n\014bottomJawMin\030\014 \001("
    "\002\022\024\n\014bottomJawMax\030\r \001(\002\"T\n\033RtTpsProtoRep"
    "eatedAccessory\0225\n\raccessoryList\030\001 \003(\0132\036."
    "tps.proto.RtTpsProtoAccessory\"Z\n%RtTpsPr"
    "otoCommissionUnitAccessoryPair\022\024\n\014access"
    "oryUID\030\001 \002(\t\022\033\n\023commissionedunitUID\030\002 \002("
    "\t\"\206\001\n-RtTpsProtoRepeatedCommissionUnitAc"
    "cessoryPair\022U\n\033commissionUnitAccessoryPa"
    "ir\030\001 \003(\01320.tps.proto.RtTpsProtoCommissio"
    "nUnitAccessoryPair", 658);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "rt_tps_proto_accessory.proto", &protobuf_RegisterTypes);
  RtTpsProtoAccessory::default_instance_ = new RtTpsProtoAccessory();
  RtTpsProtoRepeatedAccessory::default_instance_ = new RtTpsProtoRepeatedAccessory();
  RtTpsProtoCommissionUnitAccessoryPair::default_instance_ = new RtTpsProtoCommissionUnitAccessoryPair();
  RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance_ = new RtTpsProtoRepeatedCommissionUnitAccessoryPair();
  RtTpsProtoAccessory::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedAccessory::default_instance_->InitAsDefaultInstance();
  RtTpsProtoCommissionUnitAccessoryPair::default_instance_->InitAsDefaultInstance();
  RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_rt_5ftps_5fproto_5faccessory_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_rt_5ftps_5fproto_5faccessory_2eproto {
  StaticDescriptorInitializer_rt_5ftps_5fproto_5faccessory_2eproto() {
    protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();
  }
} static_descriptor_initializer_rt_5ftps_5fproto_5faccessory_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoAccessory::kAccessoryUIDFieldNumber;
const int RtTpsProtoAccessory::kAccessoryTypeFieldNumber;
const int RtTpsProtoAccessory::kAccessoryNameFieldNumber;
const int RtTpsProtoAccessory::kWedgeAngleFieldNumber;
const int RtTpsProtoAccessory::kWedgeOrientationFieldNumber;
const int RtTpsProtoAccessory::kLeftJawMinFieldNumber;
const int RtTpsProtoAccessory::kLeftJawMaxFieldNumber;
const int RtTpsProtoAccessory::kRightJawMinFieldNumber;
const int RtTpsProtoAccessory::kRightJawMaxFieldNumber;
const int RtTpsProtoAccessory::kTopJawMinFieldNumber;
const int RtTpsProtoAccessory::kTopJawMaxFieldNumber;
const int RtTpsProtoAccessory::kBottomJawMinFieldNumber;
const int RtTpsProtoAccessory::kBottomJawMaxFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoAccessory::RtTpsProtoAccessory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoAccessory::InitAsDefaultInstance() {
}

RtTpsProtoAccessory::RtTpsProtoAccessory(const RtTpsProtoAccessory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoAccessory::SharedCtor() {
  _cached_size_ = 0;
  accessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accessorytype_ = 0;
  accessoryname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wedgeangle_ = 0;
  wedgeorientation_ = 0;
  leftjawmin_ = 0;
  leftjawmax_ = 0;
  rightjawmin_ = 0;
  rightjawmax_ = 0;
  topjawmin_ = 0;
  topjawmax_ = 0;
  bottomjawmin_ = 0;
  bottomjawmax_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoAccessory::~RtTpsProtoAccessory() {
  SharedDtor();
}

void RtTpsProtoAccessory::SharedDtor() {
  if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryuid_;
  }
  if (accessoryname_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryname_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoAccessory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoAccessory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoAccessory_descriptor_;
}

const RtTpsProtoAccessory& RtTpsProtoAccessory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();  return *default_instance_;
}

RtTpsProtoAccessory* RtTpsProtoAccessory::default_instance_ = NULL;

RtTpsProtoAccessory* RtTpsProtoAccessory::New() const {
  return new RtTpsProtoAccessory;
}

void RtTpsProtoAccessory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accessoryuid()) {
      if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accessoryuid_->clear();
      }
    }
    accessorytype_ = 0;
    if (has_accessoryname()) {
      if (accessoryname_ != &::google::protobuf::internal::kEmptyString) {
        accessoryname_->clear();
      }
    }
    wedgeangle_ = 0;
    wedgeorientation_ = 0;
    leftjawmin_ = 0;
    leftjawmax_ = 0;
    rightjawmin_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rightjawmax_ = 0;
    topjawmin_ = 0;
    topjawmax_ = 0;
    bottomjawmin_ = 0;
    bottomjawmax_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoAccessory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string accessoryUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryuid().data(), this->accessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accessoryType;
        break;
      }
      
      // optional int32 accessoryType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accessoryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accessorytype_)));
          set_has_accessorytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_accessoryName;
        break;
      }
      
      // optional string accessoryName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessoryName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryname().data(), this->accessoryname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_wedgeAngle;
        break;
      }
      
      // optional double wedgeAngle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wedgeAngle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wedgeangle_)));
          set_has_wedgeangle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_wedgeOrientation;
        break;
      }
      
      // optional int32 wedgeOrientation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wedgeOrientation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wedgeorientation_)));
          set_has_wedgeorientation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_leftJawMin;
        break;
      }
      
      // optional float leftJawMin = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftJawMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftjawmin_)));
          set_has_leftjawmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_leftJawMax;
        break;
      }
      
      // optional float leftJawMax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftJawMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftjawmax_)));
          set_has_leftjawmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_rightJawMin;
        break;
      }
      
      // optional float rightJawMin = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightJawMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightjawmin_)));
          set_has_rightjawmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_rightJawMax;
        break;
      }
      
      // optional float rightJawMax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightJawMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightjawmax_)));
          set_has_rightjawmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_topJawMin;
        break;
      }
      
      // optional float topJawMin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topJawMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topjawmin_)));
          set_has_topjawmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_topJawMax;
        break;
      }
      
      // optional float topJawMax = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_topJawMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &topjawmax_)));
          set_has_topjawmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_bottomJawMin;
        break;
      }
      
      // optional float bottomJawMin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottomJawMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottomjawmin_)));
          set_has_bottomjawmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_bottomJawMax;
        break;
      }
      
      // optional float bottomJawMax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_bottomJawMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bottomjawmax_)));
          set_has_bottomjawmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoAccessory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string accessoryUID = 1;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accessoryuid(), output);
  }
  
  // optional int32 accessoryType = 2;
  if (has_accessorytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->accessorytype(), output);
  }
  
  // optional string accessoryName = 3;
  if (has_accessoryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryname().data(), this->accessoryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->accessoryname(), output);
  }
  
  // optional double wedgeAngle = 4;
  if (has_wedgeangle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->wedgeangle(), output);
  }
  
  // optional int32 wedgeOrientation = 5;
  if (has_wedgeorientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->wedgeorientation(), output);
  }
  
  // optional float leftJawMin = 6;
  if (has_leftjawmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->leftjawmin(), output);
  }
  
  // optional float leftJawMax = 7;
  if (has_leftjawmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->leftjawmax(), output);
  }
  
  // optional float rightJawMin = 8;
  if (has_rightjawmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->rightjawmin(), output);
  }
  
  // optional float rightJawMax = 9;
  if (has_rightjawmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->rightjawmax(), output);
  }
  
  // optional float topJawMin = 10;
  if (has_topjawmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->topjawmin(), output);
  }
  
  // optional float topJawMax = 11;
  if (has_topjawmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->topjawmax(), output);
  }
  
  // optional float bottomJawMin = 12;
  if (has_bottomjawmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->bottomjawmin(), output);
  }
  
  // optional float bottomJawMax = 13;
  if (has_bottomjawmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->bottomjawmax(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoAccessory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string accessoryUID = 1;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accessoryuid(), target);
  }
  
  // optional int32 accessoryType = 2;
  if (has_accessorytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->accessorytype(), target);
  }
  
  // optional string accessoryName = 3;
  if (has_accessoryname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryname().data(), this->accessoryname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->accessoryname(), target);
  }
  
  // optional double wedgeAngle = 4;
  if (has_wedgeangle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->wedgeangle(), target);
  }
  
  // optional int32 wedgeOrientation = 5;
  if (has_wedgeorientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->wedgeorientation(), target);
  }
  
  // optional float leftJawMin = 6;
  if (has_leftjawmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->leftjawmin(), target);
  }
  
  // optional float leftJawMax = 7;
  if (has_leftjawmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->leftjawmax(), target);
  }
  
  // optional float rightJawMin = 8;
  if (has_rightjawmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->rightjawmin(), target);
  }
  
  // optional float rightJawMax = 9;
  if (has_rightjawmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->rightjawmax(), target);
  }
  
  // optional float topJawMin = 10;
  if (has_topjawmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->topjawmin(), target);
  }
  
  // optional float topJawMax = 11;
  if (has_topjawmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->topjawmax(), target);
  }
  
  // optional float bottomJawMin = 12;
  if (has_bottomjawmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->bottomjawmin(), target);
  }
  
  // optional float bottomJawMax = 13;
  if (has_bottomjawmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->bottomjawmax(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoAccessory::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string accessoryUID = 1;
    if (has_accessoryuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryuid());
    }
    
    // optional int32 accessoryType = 2;
    if (has_accessorytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accessorytype());
    }
    
    // optional string accessoryName = 3;
    if (has_accessoryname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryname());
    }
    
    // optional double wedgeAngle = 4;
    if (has_wedgeangle()) {
      total_size += 1 + 8;
    }
    
    // optional int32 wedgeOrientation = 5;
    if (has_wedgeorientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wedgeorientation());
    }
    
    // optional float leftJawMin = 6;
    if (has_leftjawmin()) {
      total_size += 1 + 4;
    }
    
    // optional float leftJawMax = 7;
    if (has_leftjawmax()) {
      total_size += 1 + 4;
    }
    
    // optional float rightJawMin = 8;
    if (has_rightjawmin()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float rightJawMax = 9;
    if (has_rightjawmax()) {
      total_size += 1 + 4;
    }
    
    // optional float topJawMin = 10;
    if (has_topjawmin()) {
      total_size += 1 + 4;
    }
    
    // optional float topJawMax = 11;
    if (has_topjawmax()) {
      total_size += 1 + 4;
    }
    
    // optional float bottomJawMin = 12;
    if (has_bottomjawmin()) {
      total_size += 1 + 4;
    }
    
    // optional float bottomJawMax = 13;
    if (has_bottomjawmax()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoAccessory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoAccessory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoAccessory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoAccessory::MergeFrom(const RtTpsProtoAccessory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accessoryuid()) {
      set_accessoryuid(from.accessoryuid());
    }
    if (from.has_accessorytype()) {
      set_accessorytype(from.accessorytype());
    }
    if (from.has_accessoryname()) {
      set_accessoryname(from.accessoryname());
    }
    if (from.has_wedgeangle()) {
      set_wedgeangle(from.wedgeangle());
    }
    if (from.has_wedgeorientation()) {
      set_wedgeorientation(from.wedgeorientation());
    }
    if (from.has_leftjawmin()) {
      set_leftjawmin(from.leftjawmin());
    }
    if (from.has_leftjawmax()) {
      set_leftjawmax(from.leftjawmax());
    }
    if (from.has_rightjawmin()) {
      set_rightjawmin(from.rightjawmin());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rightjawmax()) {
      set_rightjawmax(from.rightjawmax());
    }
    if (from.has_topjawmin()) {
      set_topjawmin(from.topjawmin());
    }
    if (from.has_topjawmax()) {
      set_topjawmax(from.topjawmax());
    }
    if (from.has_bottomjawmin()) {
      set_bottomjawmin(from.bottomjawmin());
    }
    if (from.has_bottomjawmax()) {
      set_bottomjawmax(from.bottomjawmax());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoAccessory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoAccessory::CopyFrom(const RtTpsProtoAccessory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoAccessory::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RtTpsProtoAccessory::Swap(RtTpsProtoAccessory* other) {
  if (other != this) {
    std::swap(accessoryuid_, other->accessoryuid_);
    std::swap(accessorytype_, other->accessorytype_);
    std::swap(accessoryname_, other->accessoryname_);
    std::swap(wedgeangle_, other->wedgeangle_);
    std::swap(wedgeorientation_, other->wedgeorientation_);
    std::swap(leftjawmin_, other->leftjawmin_);
    std::swap(leftjawmax_, other->leftjawmax_);
    std::swap(rightjawmin_, other->rightjawmin_);
    std::swap(rightjawmax_, other->rightjawmax_);
    std::swap(topjawmin_, other->topjawmin_);
    std::swap(topjawmax_, other->topjawmax_);
    std::swap(bottomjawmin_, other->bottomjawmin_);
    std::swap(bottomjawmax_, other->bottomjawmax_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoAccessory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoAccessory_descriptor_;
  metadata.reflection = RtTpsProtoAccessory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedAccessory::kAccessoryListFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedAccessory::RtTpsProtoRepeatedAccessory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedAccessory::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedAccessory::RtTpsProtoRepeatedAccessory(const RtTpsProtoRepeatedAccessory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedAccessory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedAccessory::~RtTpsProtoRepeatedAccessory() {
  SharedDtor();
}

void RtTpsProtoRepeatedAccessory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedAccessory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedAccessory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedAccessory_descriptor_;
}

const RtTpsProtoRepeatedAccessory& RtTpsProtoRepeatedAccessory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedAccessory* RtTpsProtoRepeatedAccessory::default_instance_ = NULL;

RtTpsProtoRepeatedAccessory* RtTpsProtoRepeatedAccessory::New() const {
  return new RtTpsProtoRepeatedAccessory;
}

void RtTpsProtoRepeatedAccessory::Clear() {
  accessorylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedAccessory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoAccessory accessoryList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_accessoryList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_accessorylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_accessoryList;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedAccessory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoAccessory accessoryList = 1;
  for (int i = 0; i < this->accessorylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accessorylist(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedAccessory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoAccessory accessoryList = 1;
  for (int i = 0; i < this->accessorylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->accessorylist(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedAccessory::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoAccessory accessoryList = 1;
  total_size += 1 * this->accessorylist_size();
  for (int i = 0; i < this->accessorylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->accessorylist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedAccessory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedAccessory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedAccessory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedAccessory::MergeFrom(const RtTpsProtoRepeatedAccessory& from) {
  GOOGLE_CHECK_NE(&from, this);
  accessorylist_.MergeFrom(from.accessorylist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedAccessory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedAccessory::CopyFrom(const RtTpsProtoRepeatedAccessory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedAccessory::IsInitialized() const {
  
  for (int i = 0; i < accessorylist_size(); i++) {
    if (!this->accessorylist(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedAccessory::Swap(RtTpsProtoRepeatedAccessory* other) {
  if (other != this) {
    accessorylist_.Swap(&other->accessorylist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedAccessory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedAccessory_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedAccessory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoCommissionUnitAccessoryPair::kAccessoryUIDFieldNumber;
const int RtTpsProtoCommissionUnitAccessoryPair::kCommissionedunitUIDFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoCommissionUnitAccessoryPair::RtTpsProtoCommissionUnitAccessoryPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoCommissionUnitAccessoryPair::InitAsDefaultInstance() {
}

RtTpsProtoCommissionUnitAccessoryPair::RtTpsProtoCommissionUnitAccessoryPair(const RtTpsProtoCommissionUnitAccessoryPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoCommissionUnitAccessoryPair::SharedCtor() {
  _cached_size_ = 0;
  accessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  commissionedunituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoCommissionUnitAccessoryPair::~RtTpsProtoCommissionUnitAccessoryPair() {
  SharedDtor();
}

void RtTpsProtoCommissionUnitAccessoryPair::SharedDtor() {
  if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    delete accessoryuid_;
  }
  if (commissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
    delete commissionedunituid_;
  }
  if (this != default_instance_) {
  }
}

void RtTpsProtoCommissionUnitAccessoryPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoCommissionUnitAccessoryPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoCommissionUnitAccessoryPair_descriptor_;
}

const RtTpsProtoCommissionUnitAccessoryPair& RtTpsProtoCommissionUnitAccessoryPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();  return *default_instance_;
}

RtTpsProtoCommissionUnitAccessoryPair* RtTpsProtoCommissionUnitAccessoryPair::default_instance_ = NULL;

RtTpsProtoCommissionUnitAccessoryPair* RtTpsProtoCommissionUnitAccessoryPair::New() const {
  return new RtTpsProtoCommissionUnitAccessoryPair;
}

void RtTpsProtoCommissionUnitAccessoryPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accessoryuid()) {
      if (accessoryuid_ != &::google::protobuf::internal::kEmptyString) {
        accessoryuid_->clear();
      }
    }
    if (has_commissionedunituid()) {
      if (commissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
        commissionedunituid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoCommissionUnitAccessoryPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string accessoryUID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_accessoryuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->accessoryuid().data(), this->accessoryuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_commissionedunitUID;
        break;
      }
      
      // required string commissionedunitUID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionedunitUID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_commissionedunituid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->commissionedunituid().data(), this->commissionedunituid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoCommissionUnitAccessoryPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string accessoryUID = 1;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->accessoryuid(), output);
  }
  
  // required string commissionedunitUID = 2;
  if (has_commissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionedunituid().data(), this->commissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->commissionedunituid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoCommissionUnitAccessoryPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string accessoryUID = 1;
  if (has_accessoryuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->accessoryuid().data(), this->accessoryuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->accessoryuid(), target);
  }
  
  // required string commissionedunitUID = 2;
  if (has_commissionedunituid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->commissionedunituid().data(), this->commissionedunituid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->commissionedunituid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoCommissionUnitAccessoryPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string accessoryUID = 1;
    if (has_accessoryuid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->accessoryuid());
    }
    
    // required string commissionedunitUID = 2;
    if (has_commissionedunituid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->commissionedunituid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoCommissionUnitAccessoryPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoCommissionUnitAccessoryPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoCommissionUnitAccessoryPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoCommissionUnitAccessoryPair::MergeFrom(const RtTpsProtoCommissionUnitAccessoryPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accessoryuid()) {
      set_accessoryuid(from.accessoryuid());
    }
    if (from.has_commissionedunituid()) {
      set_commissionedunituid(from.commissionedunituid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoCommissionUnitAccessoryPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoCommissionUnitAccessoryPair::CopyFrom(const RtTpsProtoCommissionUnitAccessoryPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoCommissionUnitAccessoryPair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RtTpsProtoCommissionUnitAccessoryPair::Swap(RtTpsProtoCommissionUnitAccessoryPair* other) {
  if (other != this) {
    std::swap(accessoryuid_, other->accessoryuid_);
    std::swap(commissionedunituid_, other->commissionedunituid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoCommissionUnitAccessoryPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoCommissionUnitAccessoryPair_descriptor_;
  metadata.reflection = RtTpsProtoCommissionUnitAccessoryPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RtTpsProtoRepeatedCommissionUnitAccessoryPair::kCommissionUnitAccessoryPairFieldNumber;
#endif  // !_MSC_VER

RtTpsProtoRepeatedCommissionUnitAccessoryPair::RtTpsProtoRepeatedCommissionUnitAccessoryPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::InitAsDefaultInstance() {
}

RtTpsProtoRepeatedCommissionUnitAccessoryPair::RtTpsProtoRepeatedCommissionUnitAccessoryPair(const RtTpsProtoRepeatedCommissionUnitAccessoryPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RtTpsProtoRepeatedCommissionUnitAccessoryPair::~RtTpsProtoRepeatedCommissionUnitAccessoryPair() {
  SharedDtor();
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RtTpsProtoRepeatedCommissionUnitAccessoryPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_;
}

const RtTpsProtoRepeatedCommissionUnitAccessoryPair& RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_rt_5ftps_5fproto_5faccessory_2eproto();  return *default_instance_;
}

RtTpsProtoRepeatedCommissionUnitAccessoryPair* RtTpsProtoRepeatedCommissionUnitAccessoryPair::default_instance_ = NULL;

RtTpsProtoRepeatedCommissionUnitAccessoryPair* RtTpsProtoRepeatedCommissionUnitAccessoryPair::New() const {
  return new RtTpsProtoRepeatedCommissionUnitAccessoryPair;
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::Clear() {
  commissionunitaccessorypair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RtTpsProtoRepeatedCommissionUnitAccessoryPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tps.proto.RtTpsProtoCommissionUnitAccessoryPair commissionUnitAccessoryPair = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_commissionUnitAccessoryPair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_commissionunitaccessorypair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_commissionUnitAccessoryPair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .tps.proto.RtTpsProtoCommissionUnitAccessoryPair commissionUnitAccessoryPair = 1;
  for (int i = 0; i < this->commissionunitaccessorypair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commissionunitaccessorypair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RtTpsProtoRepeatedCommissionUnitAccessoryPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .tps.proto.RtTpsProtoCommissionUnitAccessoryPair commissionUnitAccessoryPair = 1;
  for (int i = 0; i < this->commissionunitaccessorypair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commissionunitaccessorypair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RtTpsProtoRepeatedCommissionUnitAccessoryPair::ByteSize() const {
  int total_size = 0;
  
  // repeated .tps.proto.RtTpsProtoCommissionUnitAccessoryPair commissionUnitAccessoryPair = 1;
  total_size += 1 * this->commissionunitaccessorypair_size();
  for (int i = 0; i < this->commissionunitaccessorypair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->commissionunitaccessorypair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RtTpsProtoRepeatedCommissionUnitAccessoryPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RtTpsProtoRepeatedCommissionUnitAccessoryPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::MergeFrom(const RtTpsProtoRepeatedCommissionUnitAccessoryPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  commissionunitaccessorypair_.MergeFrom(from.commissionunitaccessorypair_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::CopyFrom(const RtTpsProtoRepeatedCommissionUnitAccessoryPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtTpsProtoRepeatedCommissionUnitAccessoryPair::IsInitialized() const {
  
  for (int i = 0; i < commissionunitaccessorypair_size(); i++) {
    if (!this->commissionunitaccessorypair(i).IsInitialized()) return false;
  }
  return true;
}

void RtTpsProtoRepeatedCommissionUnitAccessoryPair::Swap(RtTpsProtoRepeatedCommissionUnitAccessoryPair* other) {
  if (other != this) {
    commissionunitaccessorypair_.Swap(&other->commissionunitaccessorypair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RtTpsProtoRepeatedCommissionUnitAccessoryPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RtTpsProtoRepeatedCommissionUnitAccessoryPair_descriptor_;
  metadata.reflection = RtTpsProtoRepeatedCommissionUnitAccessoryPair_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

// @@protoc_insertion_point(global_scope)
