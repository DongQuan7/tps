//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_SITE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_SITE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum SITE_FIELD
{
    SITE_UID = 0,
    SITE_SITETEMPLATEUID,
    SITE_COURSEUID,
    SITE_NAME,
    SITE_DIAGNOSISTYPE,
    SITE_STAGE,
    SITE_STAGEDETAIL,
    SITE_SCANAREATYPE,
    SITE_TUMORLENGTH,
    SITE_TUMORWIDTH,
    SITE_TUMORHEIGHT,
    SITE_TUMORVOLUME,
    SITE_MARKER,
    SITE_SIMOPERATORUID,
    SITE_SIMULATIONNOTES,
    SITE_PATIENTPOSITIONTYPE,
    SITE_ARMSPOSITIONTYPE,
    SITE_LEGS,
    SITE_OTHER,
    SITE_COMMENTS,
    SITE_NEEDCREATEBEAM,
    SITE_NEEDCREATVOI,
    SITE_NEEDGATING,
    SITE_PLANNINGIMAGINGTYPE,
    SITE_NEEDPLANNINGIMAGEMRIT2,
    SITE_NEEDPLANNINGIMAGEMRIT1,
    SITE_NEEDPLANNINGIMAGEMRIDWI,
    SITE_NEEDPLANNINGIMAGEMRIOTHER,
    SITE_NEEDPLANNINGIMAGEMRIPI,
    SITE_PLANNINGIMAGEOPTION,
    SITE_NEEDSECONDARYCT,
    SITE_SECONDARYCTOPTION,
    SITE_NEEDSECONDARY4DCT,
    SITE_NEEDSIM,
    SITE_NEEDSECONDARYMR,
    SITE_SECONDARYMROPTION,
    SITE_NEEDSECONDARYPETCT,
    SITE_SECONDARYPETCTOPTION,
    SITE_IMMOBILIZATION,
    SITE_ISDEFAULT,
    SITE_SETUPPHOTOUID,
    SITE_SURFACERENDERINGPHOTOUID,
    SITE_OTHERPLANNINGIMAGEMRI,
    SITE_STARTPOSITION,
    SITE_PERCENT,
    SITE_SCANPICTURETYPE,
    SITE_CRC,
    SITE_UPDATETIME,
    SITE_FIELD_MAX
};

static const char* ENUM2STRING_SITE_FIELD[] =
{
    "UID",
    "SITETEMPLATEUID",
    "COURSEUID",
    "NAME",
    "DIAGNOSISTYPE",
    "STAGE",
    "STAGEDETAIL",
    "SCANAREATYPE",
    "TUMORLENGTH",
    "TUMORWIDTH",
    "TUMORHEIGHT",
    "TUMORVOLUME",
    "MARKER",
    "SIMOPERATORUID",
    "SIMULATIONNOTES",
    "PATIENTPOSITIONTYPE",
    "ARMSPOSITIONTYPE",
    "LEGS",
    "OTHER",
    "COMMENTS",
    "NEEDCREATEBEAM",
    "NEEDCREATVOI",
    "NEEDGATING",
    "PLANNINGIMAGINGTYPE",
    "NEEDPLANNINGIMAGEMRIT2",
    "NEEDPLANNINGIMAGEMRIT1",
    "NEEDPLANNINGIMAGEMRIDWI",
    "NEEDPLANNINGIMAGEMRIOTHER",
    "NEEDPLANNINGIMAGEMRIPI",
    "PLANNINGIMAGEOPTION",
    "NEEDSECONDARYCT",
    "SECONDARYCTOPTION",
    "NEEDSECONDARY4DCT",
    "NEEDSIM",
    "NEEDSECONDARYMR",
    "SECONDARYMROPTION",
    "NEEDSECONDARYPETCT",
    "SECONDARYPETCTOPTION",
    "IMMOBILIZATION",
    "ISDEFAULT",
    "SETUPPHOTOUID",
    "SURFACERENDERINGPHOTOUID",
    "OTHERPLANNINGIMAGEMRI",
    "STARTPOSITION",
    "PERCENT",
    "SCANPICTURETYPE",
    "CRC",
    "UPDATETIME",
    "SITE_FIELD_MAX"
};

static const char* ENUM2STRING_SITE_FIELD_NULL = "101000000000000000001110111110101110100100000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtSiteImp;

class RT_DB_EXPORT RtSite : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtSite(bool bGeneraterUid = false);

    ~RtSite();

    RtSite(const RtSite& site);

    RtSite& operator = (const RtSite& site);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*sitetemplateuid varchar
      record the related site template's uid*/
    std::string get_sitetemplateuid() const;
    void set_sitetemplateuid(const std::string& sitetemplateuid);

    /*courseuid varchar
      record the related course's uid*/
    std::string get_courseuid() const;
    void set_courseuid(const std::string& courseuid);

    /*name varchar
      record the site name*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*diagnosistype int
      record the diagnosis type*/
    int get_diagnosistype() const;
    void set_diagnosistype(const int& diagnosistype);

    /*stage varchar
      record the stage*/
    std::string get_stage() const;
    void set_stage(const std::string& stage);

    /*stagedetail varchar
      record the selected stage with detail*/
    std::string get_stagedetail() const;
    void set_stagedetail(const std::string& stagedetail);

    /*scanareatype int
      扫描病人部位类型*/
    int get_scanareatype() const;
    void set_scanareatype(const int& scanareatype);

    /*tumorlength float
      record the tumor length value*/
    float get_tumorlength() const;
    void set_tumorlength(const float& tumorlength);

    /*tumorwidth float
      record the tumor width value*/
    float get_tumorwidth() const;
    void set_tumorwidth(const float& tumorwidth);

    /*tumorheight float
      record the tumor height value*/
    float get_tumorheight() const;
    void set_tumorheight(const float& tumorheight);

    /*tumorvolume float
      record the tumor volume value*/
    float get_tumorvolume() const;
    void set_tumorvolume(const float& tumorvolume);

    /*marker int
      record the marker value*/
    int get_marker() const;
    void set_marker(const int& marker);

    /*simoperatoruid varchar
      record the sim operation uid*/
    std::string get_simoperatoruid() const;
    void set_simoperatoruid(const std::string& simoperatoruid);

    /*simulationnotes varchar
      simulattion order comments information*/
    std::string get_simulationnotes() const;
    void set_simulationnotes(const std::string& simulationnotes);

    /*patientpositiontype int
      record the patient position type*/
    int get_patientpositiontype() const;
    void set_patientpositiontype(const int& patientpositiontype);

    /*armspositiontype int
      record the patient arms position type*/
    int get_armspositiontype() const;
    void set_armspositiontype(const int& armspositiontype);

    /*legs varchar
      record the leg value*/
    std::string get_legs() const;
    void set_legs(const std::string& legs);

    /*other varchar
      record the other comment*/
    std::string get_other() const;
    void set_other(const std::string& other);

    /*comments varchar
      record the comment*/
    std::string get_comments() const;
    void set_comments(const std::string& comments);

    /*needcreatebeam tinyint
      record the status of need to create beam*/
    bool get_needcreatebeam() const;
    void set_needcreatebeam(const bool& needcreatebeam);

    /*needcreatvoi tinyint
      record the status of need to create voi*/
    bool get_needcreatvoi() const;
    void set_needcreatvoi(const bool& needcreatvoi);

    /*needgating tinyint
      record the status of need to gating*/
    bool get_needgating() const;
    void set_needgating(const bool& needgating);

    /*planningimagingtype int
      record the planning imaging type*/
    int get_planningimagingtype() const;
    void set_planningimagingtype(const int& planningimagingtype);

    /*needplanningimagemrit2 tinyint
      record the planning image mrit2*/
    bool get_needplanningimagemrit2() const;
    void set_needplanningimagemrit2(const bool& needplanningimagemrit2);

    /*needplanningimagemrit1 tinyint
      record the planning image mrit1*/
    bool get_needplanningimagemrit1() const;
    void set_needplanningimagemrit1(const bool& needplanningimagemrit1);

    /*needplanningimagemridwi tinyint
      record the planning image mridwi*/
    bool get_needplanningimagemridwi() const;
    void set_needplanningimagemridwi(const bool& needplanningimagemridwi);

    /*needplanningimagemriother tinyint
      record the planning image mriother*/
    bool get_needplanningimagemriother() const;
    void set_needplanningimagemriother(const bool& needplanningimagemriother);

    /*needplanningimagemripi tinyint
      record the planning image mripi*/
    bool get_needplanningimagemripi() const;
    void set_needplanningimagemripi(const bool& needplanningimagemripi);

    /*planningimageoption int
      record the planing image option*/
    int get_planningimageoption() const;
    void set_planningimageoption(const int& planningimageoption);

    /*needsecondaryct tinyint
      record the site is need secondary ct or not*/
    bool get_needsecondaryct() const;
    void set_needsecondaryct(const bool& needsecondaryct);

    /*secondaryctoption int
      record the site secondary ct option*/
    int get_secondaryctoption() const;
    void set_secondaryctoption(const int& secondaryctoption);

    /*needsecondary4dct tinyint
      record the site is need secondary 4d ct or not*/
    bool get_needsecondary4dct() const;
    void set_needsecondary4dct(const bool& needsecondary4dct);

    /*needsim tinyint
      record the site is need sim*/
    bool get_needsim() const;
    void set_needsim(const bool& needsim);

    /*needsecondarymr tinyint
      record the site is need secondary mr*/
    bool get_needsecondarymr() const;
    void set_needsecondarymr(const bool& needsecondarymr);

    /*secondarymroption int
      record the secondary mr option*/
    int get_secondarymroption() const;
    void set_secondarymroption(const int& secondarymroption);

    /*needsecondarypetct tinyint
      record the site is need sendary pet ct or not*/
    bool get_needsecondarypetct() const;
    void set_needsecondarypetct(const bool& needsecondarypetct);

    /*secondarypetctoption int
      record the secondary pet ct option*/
    int get_secondarypetctoption() const;
    void set_secondarypetctoption(const int& secondarypetctoption);

    /*immobilization varchar
      record the immobilization content*/
    std::string get_immobilization() const;
    void set_immobilization(const std::string& immobilization);

    /*isdefault tinyint
      record the site is default,one course only has a default site*/
    bool get_isdefault() const;
    void set_isdefault(const bool& isdefault);

    /*setupphotouid varchar
      record the site's setup photo uid*/
    std::string get_setupphotouid() const;
    void set_setupphotouid(const std::string& setupphotouid);

    /*surfacerenderingphotouid varchar
      record the surface rendering photo uid*/
    std::string get_surfacerenderingphotouid() const;
    void set_surfacerenderingphotouid(const std::string& surfacerenderingphotouid);

    /*otherplanningimagemri varchar
      record the other planning image mri*/
    std::string get_otherplanningimagemri() const;
    void set_otherplanningimagemri(const std::string& otherplanningimagemri);

    /*startposition double
      record the start position in scan picture*/
    double get_startposition() const;
    void set_startposition(const double& startposition);

    /*percent double
      record the percent in scan picture*/
    double get_percent() const;
    void set_percent(const double& percent);

    /*scanpicturetype int
      record scan picture type*/
    int get_scanpicturetype() const;
    void set_scanpicturetype(const int& scanpicturetype);

    /*crc varchar
      crc校验位*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtSiteImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtSiteImp
{

public:
    //default is false to improve performance
    RtSiteImp(bool bGeneraterUid = false);

    ~RtSiteImp();

    RtSiteImp(const RtSiteImp& site);

    RtSiteImp& operator = (const RtSiteImp& site);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //sitetemplateuid
    inline std::string get_sitetemplateuid() const { return m_sitetemplateuid;}
    inline void set_sitetemplateuid(const std::string& sitetemplateuid) { m_sitetemplateuid = sitetemplateuid;}

    //courseuid
    inline std::string get_courseuid() const { return m_courseuid;}
    inline void set_courseuid(const std::string& courseuid) { m_courseuid = courseuid;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //diagnosistype
    inline int get_diagnosistype() const { return m_diagnosistype;}
    inline void set_diagnosistype(const int& diagnosistype) { m_diagnosistype = diagnosistype;}

    //stage
    inline std::string get_stage() const { return m_stage;}
    inline void set_stage(const std::string& stage) { m_stage = stage;}

    //stagedetail
    inline std::string get_stagedetail() const { return m_stagedetail;}
    inline void set_stagedetail(const std::string& stagedetail) { m_stagedetail = stagedetail;}

    //scanareatype
    inline int get_scanareatype() const { return m_scanareatype;}
    inline void set_scanareatype(const int& scanareatype) { m_scanareatype = scanareatype;}

    //tumorlength
    inline float get_tumorlength() const { return m_tumorlength;}
    inline void set_tumorlength(const float& tumorlength) { m_tumorlength = tumorlength;}

    //tumorwidth
    inline float get_tumorwidth() const { return m_tumorwidth;}
    inline void set_tumorwidth(const float& tumorwidth) { m_tumorwidth = tumorwidth;}

    //tumorheight
    inline float get_tumorheight() const { return m_tumorheight;}
    inline void set_tumorheight(const float& tumorheight) { m_tumorheight = tumorheight;}

    //tumorvolume
    inline float get_tumorvolume() const { return m_tumorvolume;}
    inline void set_tumorvolume(const float& tumorvolume) { m_tumorvolume = tumorvolume;}

    //marker
    inline int get_marker() const { return m_marker;}
    inline void set_marker(const int& marker) { m_marker = marker;}

    //simoperatoruid
    inline std::string get_simoperatoruid() const { return m_simoperatoruid;}
    inline void set_simoperatoruid(const std::string& simoperatoruid) { m_simoperatoruid = simoperatoruid;}

    //simulationnotes
    inline std::string get_simulationnotes() const { return m_simulationnotes;}
    inline void set_simulationnotes(const std::string& simulationnotes) { m_simulationnotes = simulationnotes;}

    //patientpositiontype
    inline int get_patientpositiontype() const { return m_patientpositiontype;}
    inline void set_patientpositiontype(const int& patientpositiontype) { m_patientpositiontype = patientpositiontype;}

    //armspositiontype
    inline int get_armspositiontype() const { return m_armspositiontype;}
    inline void set_armspositiontype(const int& armspositiontype) { m_armspositiontype = armspositiontype;}

    //legs
    inline std::string get_legs() const { return m_legs;}
    inline void set_legs(const std::string& legs) { m_legs = legs;}

    //other
    inline std::string get_other() const { return m_other;}
    inline void set_other(const std::string& other) { m_other = other;}

    //comments
    inline std::string get_comments() const { return m_comments;}
    inline void set_comments(const std::string& comments) { m_comments = comments;}

    //needcreatebeam
    inline bool get_needcreatebeam() const { return m_needcreatebeam;}
    inline void set_needcreatebeam(const bool& needcreatebeam) { m_needcreatebeam = needcreatebeam;}

    //needcreatvoi
    inline bool get_needcreatvoi() const { return m_needcreatvoi;}
    inline void set_needcreatvoi(const bool& needcreatvoi) { m_needcreatvoi = needcreatvoi;}

    //needgating
    inline bool get_needgating() const { return m_needgating;}
    inline void set_needgating(const bool& needgating) { m_needgating = needgating;}

    //planningimagingtype
    inline int get_planningimagingtype() const { return m_planningimagingtype;}
    inline void set_planningimagingtype(const int& planningimagingtype) { m_planningimagingtype = planningimagingtype;}

    //needplanningimagemrit2
    inline bool get_needplanningimagemrit2() const { return m_needplanningimagemrit2;}
    inline void set_needplanningimagemrit2(const bool& needplanningimagemrit2) { m_needplanningimagemrit2 = needplanningimagemrit2;}

    //needplanningimagemrit1
    inline bool get_needplanningimagemrit1() const { return m_needplanningimagemrit1;}
    inline void set_needplanningimagemrit1(const bool& needplanningimagemrit1) { m_needplanningimagemrit1 = needplanningimagemrit1;}

    //needplanningimagemridwi
    inline bool get_needplanningimagemridwi() const { return m_needplanningimagemridwi;}
    inline void set_needplanningimagemridwi(const bool& needplanningimagemridwi) { m_needplanningimagemridwi = needplanningimagemridwi;}

    //needplanningimagemriother
    inline bool get_needplanningimagemriother() const { return m_needplanningimagemriother;}
    inline void set_needplanningimagemriother(const bool& needplanningimagemriother) { m_needplanningimagemriother = needplanningimagemriother;}

    //needplanningimagemripi
    inline bool get_needplanningimagemripi() const { return m_needplanningimagemripi;}
    inline void set_needplanningimagemripi(const bool& needplanningimagemripi) { m_needplanningimagemripi = needplanningimagemripi;}

    //planningimageoption
    inline int get_planningimageoption() const { return m_planningimageoption;}
    inline void set_planningimageoption(const int& planningimageoption) { m_planningimageoption = planningimageoption;}

    //needsecondaryct
    inline bool get_needsecondaryct() const { return m_needsecondaryct;}
    inline void set_needsecondaryct(const bool& needsecondaryct) { m_needsecondaryct = needsecondaryct;}

    //secondaryctoption
    inline int get_secondaryctoption() const { return m_secondaryctoption;}
    inline void set_secondaryctoption(const int& secondaryctoption) { m_secondaryctoption = secondaryctoption;}

    //needsecondary4dct
    inline bool get_needsecondary4dct() const { return m_needsecondary4dct;}
    inline void set_needsecondary4dct(const bool& needsecondary4dct) { m_needsecondary4dct = needsecondary4dct;}

    //needsim
    inline bool get_needsim() const { return m_needsim;}
    inline void set_needsim(const bool& needsim) { m_needsim = needsim;}

    //needsecondarymr
    inline bool get_needsecondarymr() const { return m_needsecondarymr;}
    inline void set_needsecondarymr(const bool& needsecondarymr) { m_needsecondarymr = needsecondarymr;}

    //secondarymroption
    inline int get_secondarymroption() const { return m_secondarymroption;}
    inline void set_secondarymroption(const int& secondarymroption) { m_secondarymroption = secondarymroption;}

    //needsecondarypetct
    inline bool get_needsecondarypetct() const { return m_needsecondarypetct;}
    inline void set_needsecondarypetct(const bool& needsecondarypetct) { m_needsecondarypetct = needsecondarypetct;}

    //secondarypetctoption
    inline int get_secondarypetctoption() const { return m_secondarypetctoption;}
    inline void set_secondarypetctoption(const int& secondarypetctoption) { m_secondarypetctoption = secondarypetctoption;}

    //immobilization
    inline std::string get_immobilization() const { return m_immobilization;}
    inline void set_immobilization(const std::string& immobilization) { m_immobilization = immobilization;}

    //isdefault
    inline bool get_isdefault() const { return m_isdefault;}
    inline void set_isdefault(const bool& isdefault) { m_isdefault = isdefault;}

    //setupphotouid
    inline std::string get_setupphotouid() const { return m_setupphotouid;}
    inline void set_setupphotouid(const std::string& setupphotouid) { m_setupphotouid = setupphotouid;}

    //surfacerenderingphotouid
    inline std::string get_surfacerenderingphotouid() const { return m_surfacerenderingphotouid;}
    inline void set_surfacerenderingphotouid(const std::string& surfacerenderingphotouid) { m_surfacerenderingphotouid = surfacerenderingphotouid;}

    //otherplanningimagemri
    inline std::string get_otherplanningimagemri() const { return m_otherplanningimagemri;}
    inline void set_otherplanningimagemri(const std::string& otherplanningimagemri) { m_otherplanningimagemri = otherplanningimagemri;}

    //startposition
    inline double get_startposition() const { return m_startposition;}
    inline void set_startposition(const double& startposition) { m_startposition = startposition;}

    //percent
    inline double get_percent() const { return m_percent;}
    inline void set_percent(const double& percent) { m_percent = percent;}

    //scanpicturetype
    inline int get_scanpicturetype() const { return m_scanpicturetype;}
    inline void set_scanpicturetype(const int& scanpicturetype) { m_scanpicturetype = scanpicturetype;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //48 parameters
    std::string						m_uid;
    std::string						m_sitetemplateuid;
    std::string						m_courseuid;
    std::string						m_name;
    int								m_diagnosistype;
    std::string						m_stage;
    std::string						m_stagedetail;
    int								m_scanareatype;
    float							m_tumorlength;
    float							m_tumorwidth;
    float							m_tumorheight;
    float							m_tumorvolume;
    int								m_marker;
    std::string						m_simoperatoruid;
    std::string						m_simulationnotes;
    int								m_patientpositiontype;
    int								m_armspositiontype;
    std::string						m_legs;
    std::string						m_other;
    std::string						m_comments;
    bool							m_needcreatebeam;
    bool							m_needcreatvoi;
    bool							m_needgating;
    int								m_planningimagingtype;
    bool							m_needplanningimagemrit2;
    bool							m_needplanningimagemrit1;
    bool							m_needplanningimagemridwi;
    bool							m_needplanningimagemriother;
    bool							m_needplanningimagemripi;
    int								m_planningimageoption;
    bool							m_needsecondaryct;
    int								m_secondaryctoption;
    bool							m_needsecondary4dct;
    bool							m_needsim;
    bool							m_needsecondarymr;
    int								m_secondarymroption;
    bool							m_needsecondarypetct;
    int								m_secondarypetctoption;
    std::string						m_immobilization;
    bool							m_isdefault;
    std::string						m_setupphotouid;
    std::string						m_surfacerenderingphotouid;
    std::string						m_otherplanningimagemri;
    double							m_startposition;
    double							m_percent;
    int								m_scanpicturetype;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif