//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_CONSTRAINTTEMPLATE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_CONSTRAINTTEMPLATE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum CONSTRAINTTEMPLATE_FIELD
{
    CONSTRAINTTEMPLATE_UID = 0,
    CONSTRAINTTEMPLATE_VOIUID,
    CONSTRAINTTEMPLATE_PROTOCOLTEMPLATEUID,
    CONSTRAINTTEMPLATE_DOSEVOLUME,
    CONSTRAINTTEMPLATE_NAME,
    CONSTRAINTTEMPLATE_MAXDVH,
    CONSTRAINTTEMPLATE_MINDVH,
    CONSTRAINTTEMPLATE_COMMENTS,
    CONSTRAINTTEMPLATE_INGRID,
    CONSTRAINTTEMPLATE_ISACHIEVED,
    CONSTRAINTTEMPLATE_DOSETYPE,
    CONSTRAINTTEMPLATE_DOSE,
    CONSTRAINTTEMPLATE_TENDENCYTYPE,
    CONSTRAINTTEMPLATE_UPDATETIME,
    CONSTRAINTTEMPLATE_FIELD_MAX
};

static const char* ENUM2STRING_CONSTRAINTTEMPLATE_FIELD[] =
{
    "UID",
    "VOIUID",
    "PROTOCOLTEMPLATEUID",
    "DOSEVOLUME",
    "NAME",
    "MAXDVH",
    "MINDVH",
    "COMMENTS",
    "INGRID",
    "ISACHIEVED",
    "DOSETYPE",
    "DOSE",
    "TENDENCYTYPE",
    "UPDATETIME",
    "CONSTRAINTTEMPLATE_FIELD_MAX"
};

static const char* ENUM2STRING_CONSTRAINTTEMPLATE_FIELD_NULL = "10100000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtConstrainttemplateImp;

class RT_DB_EXPORT RtConstrainttemplate : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtConstrainttemplate(bool bGeneraterUid = false);

    ~RtConstrainttemplate();

    RtConstrainttemplate(const RtConstrainttemplate& constrainttemplate);

    RtConstrainttemplate& operator = (const RtConstrainttemplate& constrainttemplate);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*voiuid varchar
      voi uid */
    std::string get_voiuid() const;
    void set_voiuid(const std::string& voiuid);

    /*protocoltemplateuid varchar
      FK protocoltemplate uid*/
    std::string get_protocoltemplateuid() const;
    void set_protocoltemplateuid(const std::string& protocoltemplateuid);

    /*dosevolume float
      record the volume's value*/
    float get_dosevolume() const;
    void set_dosevolume(const float& dosevolume);

    /*name varchar
      record the selected voi name*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*maxdvh varchar
      goal Sheet需要的字段*/
    std::string get_maxdvh() const;
    void set_maxdvh(const std::string& maxdvh);

    /*mindvh varchar
      goal Sheet需要的字段*/
    std::string get_mindvh() const;
    void set_mindvh(const std::string& mindvh);

    /*comments varchar
      goal Sheet需要的字段*/
    std::string get_comments() const;
    void set_comments(const std::string& comments);

    /*ingrid float
      goal Sheet需要的字段*/
    float get_ingrid() const;
    void set_ingrid(const float& ingrid);

    /*isachieved tinyint
      goal Sheet需要的字段*/
    bool get_isachieved() const;
    void set_isachieved(const bool& isachieved);

    /*dosetype int
      record the type of dose,like max,min,mean*/
    int get_dosetype() const;
    void set_dosetype(const int& dosetype);

    /*dose double
      record the dose value*/
    double get_dose() const;
    void set_dose(const double& dose);

    /*tendencytype int
      保存选择的Tendency值*/
    int get_tendencytype() const;
    void set_tendencytype(const int& tendencytype);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtConstrainttemplateImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtConstrainttemplateImp
{

public:
    //default is false to improve performance
    RtConstrainttemplateImp(bool bGeneraterUid = false);

    ~RtConstrainttemplateImp();

    RtConstrainttemplateImp(const RtConstrainttemplateImp& constrainttemplate);

    RtConstrainttemplateImp& operator = (const RtConstrainttemplateImp& constrainttemplate);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //voiuid
    inline std::string get_voiuid() const { return m_voiuid;}
    inline void set_voiuid(const std::string& voiuid) { m_voiuid = voiuid;}

    //protocoltemplateuid
    inline std::string get_protocoltemplateuid() const { return m_protocoltemplateuid;}
    inline void set_protocoltemplateuid(const std::string& protocoltemplateuid) { m_protocoltemplateuid = protocoltemplateuid;}

    //dosevolume
    inline float get_dosevolume() const { return m_dosevolume;}
    inline void set_dosevolume(const float& dosevolume) { m_dosevolume = dosevolume;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //maxdvh
    inline std::string get_maxdvh() const { return m_maxdvh;}
    inline void set_maxdvh(const std::string& maxdvh) { m_maxdvh = maxdvh;}

    //mindvh
    inline std::string get_mindvh() const { return m_mindvh;}
    inline void set_mindvh(const std::string& mindvh) { m_mindvh = mindvh;}

    //comments
    inline std::string get_comments() const { return m_comments;}
    inline void set_comments(const std::string& comments) { m_comments = comments;}

    //ingrid
    inline float get_ingrid() const { return m_ingrid;}
    inline void set_ingrid(const float& ingrid) { m_ingrid = ingrid;}

    //isachieved
    inline bool get_isachieved() const { return m_isachieved;}
    inline void set_isachieved(const bool& isachieved) { m_isachieved = isachieved;}

    //dosetype
    inline int get_dosetype() const { return m_dosetype;}
    inline void set_dosetype(const int& dosetype) { m_dosetype = dosetype;}

    //dose
    inline double get_dose() const { return m_dose;}
    inline void set_dose(const double& dose) { m_dose = dose;}

    //tendencytype
    inline int get_tendencytype() const { return m_tendencytype;}
    inline void set_tendencytype(const int& tendencytype) { m_tendencytype = tendencytype;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //14 parameters
    std::string						m_uid;
    std::string						m_voiuid;
    std::string						m_protocoltemplateuid;
    float							m_dosevolume;
    std::string						m_name;
    std::string						m_maxdvh;
    std::string						m_mindvh;
    std::string						m_comments;
    float							m_ingrid;
    bool							m_isachieved;
    int								m_dosetype;
    double							m_dose;
    int								m_tendencytype;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif