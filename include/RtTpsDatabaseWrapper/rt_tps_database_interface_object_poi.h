//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.9
///
///  \version 1.0
///  \date    6/22/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_POI_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_POI_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include <map>

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum TPSPOI_FIELD
{
    POI_UID = 0,
    POI_SERIESUID,
    POI_NAME,
    POI_COORDINATE3DX,
    POI_COORDINATE3DY,
    POI_COORDINATE3DZ,
    POI_TYPE,
    POI_RED,
    POI_GREEN,
    POI_BLUE,
    POI_ALPHA,
    POI_ISVISIBLE,
    POI_LOCKTYPE,
    POI_DOSECALCMETHOD,
    POI_ROINUMBERINDCM,
    POI_UPDATETIME,
    POI_FIELD_MAX
};

static const char* ENUM2STRING_POI_FIELD[] =
{
    "UID",
    "SERIESUID",
    "NAME",
    "COORDINATE3DX",
    "COORDINATE3DY",
    "COORDINATE3DZ",
    "TYPE",
    "RED",
    "GREEN",
    "BLUE",
    "ALPHA",
    "ISVISIBLE",
    "LOCKTYPE",
    "DOSECALCMETHOD",
    "ROINUMBERINDCM",
    "UPDATETIME",
    "POI_FIELD_MAX"
};

static const char* ENUM2STRING_POI_FIELD_NULL = "1000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtPoiImp;

class RT_DB_EXPORT RtPoi : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtPoi(bool bGeneraterUid = false);

    ~RtPoi();

    RtPoi(const RtPoi& poiex);

    RtPoi& operator = (const RtPoi& poiex);

    /*uid varchar
      poi uid*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*seriesuid varchar
      related tmsseries table uid*/
    std::string get_seriesuid() const;
    void set_seriesuid(const std::string& seriesuid);

    /*name varchar
      POI名称（感兴趣点）*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*coordinate3dx float
      Attribute For Serialize coordinate 3dx*/
    float get_coordinate3dx() const;
    void set_coordinate3dx(const float& coordinate3dx);

    /*coordinate3dy float
      Attribute For Serialize coordinate 3dy*/
    float get_coordinate3dy() const;
    void set_coordinate3dy(const float& coordinate3dy);

    /*coordinate3dz float
      Attribute For Serialize coordinate 3dz*/
    float get_coordinate3dz() const;
    void set_coordinate3dz(const float& coordinate3dz);

    /*type int
      POI_TYPE enum*/
    int get_type() const;
    void set_type(const int& type);

    /*red float
      RGB red*/
    float get_red() const;
    void set_red(const float& red);

    /*green float
      RGB green*/
    float get_green() const;
    void set_green(const float& green);

    /*blue float
      RGB blue*/
    float get_blue() const;
    void set_blue(const float& blue);

    /*alpha float
      RGB alpha*/
    float get_alpha() const;
    void set_alpha(const float& alpha);

    /*isvisible tinyint
      是否可见*/
    bool get_isvisible() const;
    void set_isvisible(const bool& isvisible);

    /*locktype int
      */
    int get_locktype() const;
    void set_locktype(const int& locktype);

    /*dosecalcmethod int
      */
    int get_dosecalcmethod() const;
    void set_dosecalcmethod(const int& dosecalcmethod);

    /*roinumberindcm int
      作为ROI导出到DICOM文件后的ROI Number,仅供导出时使用*/
    int get_roinumberindcm() const;
    void set_roinumberindcm(const int& roinumberindcm);

    /*updatetime timestamp
      */
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    //////////////////////////////////////////////////////////////////////////
    std::map<std::string, float> get_poidosemap() const;
    void set_poidosemap(std::map<std::string, float>& poi_dosemap);
    bool get_poidose(const std::string& beamuid, float& dose) const;
    void set_poidose(const std::string& beamuid, float poi_dose);

    std::map<std::string, RtDbDef::PoiDoseInfo> get_plandosemap() const;
    void set_plandosemap(std::map<std::string, RtDbDef::PoiDoseInfo>& poi_dosemap);
    float get_plandose(const std::string& planuid) const;
    RtDbDef::PoiDoseCaclMethod get_plancalcmethod(const std::string& planuid) const;
    void set_plandoseinfo(const std::string& planuid, float poi_dose, RtDbDef::PoiDoseCaclMethod poi_calcmethod = RtDbDef::Calculated);

private:
    RtPoiImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtPoiImp
{

public:
    //default is false to improve performance
    RtPoiImp(bool bGeneraterUid = false);

    ~RtPoiImp();

    RtPoiImp(const RtPoiImp& poi);

    RtPoiImp& operator = (const RtPoiImp& poi);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //seriesuid
    inline std::string get_seriesuid() const { return m_seriesuid;}
    inline void set_seriesuid(const std::string& seriesuid) { m_seriesuid = seriesuid;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //coordinate3dx
    inline float get_coordinate3dx() const { return m_coordinate3dx;}
    inline void set_coordinate3dx(const float& coordinate3dx) { m_coordinate3dx = coordinate3dx;}

    //coordinate3dy
    inline float get_coordinate3dy() const { return m_coordinate3dy;}
    inline void set_coordinate3dy(const float& coordinate3dy) { m_coordinate3dy = coordinate3dy;}

    //coordinate3dz
    inline float get_coordinate3dz() const { return m_coordinate3dz;}
    inline void set_coordinate3dz(const float& coordinate3dz) { m_coordinate3dz = coordinate3dz;}

    //type
    inline int get_type() const { return m_type;}
    inline void set_type(const int& type) { m_type = type;}

    //red
    inline float get_red() const { return m_red;}
    inline void set_red(const float& red) { m_red = red;}

    //green
    inline float get_green() const { return m_green;}
    inline void set_green(const float& green) { m_green = green;}

    //blue
    inline float get_blue() const { return m_blue;}
    inline void set_blue(const float& blue) { m_blue = blue;}

    //alpha
    inline float get_alpha() const { return m_alpha;}
    inline void set_alpha(const float& alpha) { m_alpha = alpha;}

    //isvisible
    inline bool get_isvisible() const { return m_isvisible;}
    inline void set_isvisible(const bool& isvisible) { m_isvisible = isvisible;}

    //locktype
    inline int get_locktype() const { return m_locktype;}
    inline void set_locktype(const int& locktype) { m_locktype = locktype;}

    //dosecalcmethod
    inline int get_dosecalcmethod() const { return m_dosecalcmethod;}
    inline void set_dosecalcmethod(const int& dosecalcmethod) { m_dosecalcmethod = dosecalcmethod;}

    //roinumberindcm
    inline int get_roinumberindcm() const { return m_roinumberindcm;}
    inline void set_roinumberindcm(const int& roinumberindcm) { m_roinumberindcm = roinumberindcm;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
    //////////////////////////////////////////////////////////////////////////
    inline std::map<std::string, float> get_poidosemap() const { return m_poi_dosemap;}
    inline void set_poidosemap(std::map<std::string, float>& poi_dosemap) { m_poi_dosemap = poi_dosemap;}
    inline bool get_poidose(const std::string& beamuid, float& dose) const
    {
        auto itr = m_poi_dosemap.find(beamuid);
        if (itr == m_poi_dosemap.end()) return false;
        dose = itr->second;
        return true;
    }
    inline void set_poidose(const std::string& beamuid, float poi_dose)
    {
        auto itr = m_poi_dosemap.find(beamuid);
        if (itr == m_poi_dosemap.end())
            m_poi_dosemap[beamuid] = poi_dose;
        else
            itr->second = poi_dose;
    }

    inline std::map<std::string, RtDbDef::PoiDoseInfo> get_plandosemap() const { return m_poi_plandosemap;}
    inline void set_plandosemap(std::map<std::string, RtDbDef::PoiDoseInfo>& poi_dosemap) { m_poi_plandosemap = poi_dosemap;}
    inline float get_plandose(const std::string& planuid) const
    {
        auto itr = m_poi_plandosemap.find(planuid);
        if (itr == m_poi_plandosemap.end()) return 0.f;
        return itr->second.dose;
    } 
    inline RtDbDef::PoiDoseCaclMethod get_plancalcmehtod(const std::string& planuid) const
    {
        auto itr = m_poi_plandosemap.find(planuid);
        if (itr == m_poi_plandosemap.end()) return RtDbDef::NotCalculated;
        return itr->second.doseCalcMethod;
    }
    inline void set_plandoseinfo(const std::string& planuid, float poi_dose, RtDbDef::PoiDoseCaclMethod poi_calcmethod = RtDbDef::Calculated)
    {
        auto itr = m_poi_plandosemap.find(planuid);
        if (itr == m_poi_plandosemap.end())
        {
            RtDbDef::PoiDoseInfo poiDoseInfo = {poi_calcmethod, poi_dose};
            m_poi_plandosemap[planuid] = poiDoseInfo;
        }
        else
        {
            itr->second.dose = poi_dose;
            itr->second.doseCalcMethod = poi_calcmethod;
        }
    }

private:    //16 parameters
    std::string						m_uid;
    std::string						m_seriesuid;
    std::string						m_name;
    float							m_coordinate3dx;
    float							m_coordinate3dy;
    float							m_coordinate3dz;
    int								m_type;
    float							m_red;
    float							m_green;
    float							m_blue;
    float							m_alpha;
    bool							m_isvisible;
    int								m_locktype;
    int								m_dosecalcmethod;
    int								m_roinumberindcm;
    DATETIME_BOOST					m_updatetime;

    ///////temp code
    std::map<std::string, float>    m_poi_dosemap;
    std::map<std::string, RtDbDef::PoiDoseInfo>    m_poi_plandosemap;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif
