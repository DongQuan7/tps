//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_TRAY_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_TRAY_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum TRAY_FIELD
{
    TRAY_UID = 0,
    TRAY_MACHINEUID,
    TRAY_TRAYID,
    TRAY_CODE,
    TRAY_UPDATETIME,
    TRAY_FIELD_MAX
};

static const char* ENUM2STRING_TRAY_FIELD[] =
{
    "UID",
    "MACHINEUID",
    "TRAYID",
    "CODE",
    "UPDATETIME",
    "TRAY_FIELD_MAX"
};

static const char* ENUM2STRING_TRAY_FIELD_NULL = "10001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtTrayImp;

class RT_DB_EXPORT RtTray : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtTray(bool bGeneraterUid = false);

    ~RtTray();

    RtTray(const RtTray& tray);

    RtTray& operator = (const RtTray& tray);

    /*uid varchar
      Tray UID*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*machineuid varchar
      FK machineuid*/
    std::string get_machineuid() const;
    void set_machineuid(const std::string& machineuid);

    /*trayid varchar
      Tray name
            Copy from Plunc Tray class*/
    std::string get_trayid() const;
    void set_trayid(const std::string& trayid);

    /*code varchar
      Tray code
            Copy from Plunc Tray class*/
    std::string get_code() const;
    void set_code(const std::string& code);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtTrayImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtTrayImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtTrayImp(bool bGeneraterUid = false);

    virtual ~RtTrayImp();

    RtTrayImp(const RtTrayImp& tray);

    RtTrayImp& operator = (const RtTrayImp& tray);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //machineuid
    inline std::string get_machineuid() const { return m_machineuid;}
    inline void set_machineuid(const std::string& machineuid) { m_machineuid = machineuid;}

    //trayid
    inline std::string get_trayid() const { return m_trayid;}
    inline void set_trayid(const std::string& trayid) { m_trayid = trayid;}

    //code
    inline std::string get_code() const { return m_code;}
    inline void set_code(const std::string& code) { m_code = code;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //5 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_machineuid);
		ar & BOOST_SERIALIZATION_NVP(m_trayid);
		ar & BOOST_SERIALIZATION_NVP(m_code);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_uid;
    std::string						m_machineuid;
    std::string						m_trayid;
    std::string						m_code;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif