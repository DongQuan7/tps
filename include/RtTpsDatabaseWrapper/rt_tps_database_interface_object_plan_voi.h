//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-8-15 14:37:11
///
///  \version 1.0
///  \date    9/2/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_PLAN_VOI_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_PLAN_VOI_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtPlan_voiImp;

class RT_DB_EXPORT RtPlan_voi
{
public:

    RtPlan_voi();

    ~RtPlan_voi();

    RtPlan_voi(const RtPlan_voi& plan_voi);

    RtPlan_voi& operator = (const RtPlan_voi& plan_voi);

    /*planuid varchar
      plan和voi对应关系表中，plan的UID*/
    std::string get_planuid() const;
    void set_planuid(const std::string& planuid);

    /*voiuid varchar
      plan和voi对应关系表中，voi的UID*/
    std::string get_voiuid() const;
    void set_voiuid(const std::string& voiuid);

    /*mindosecontribution float
      plan和voi对应关系表中，plan对voi的最小dose贡献率，单位是cGy*/
    float get_mindosecontribution() const;
    void set_mindosecontribution(const float& mindosecontribution);

    /*meandosecontribution float
      plan和voi对应关系表中，plan对voi的平均dose贡献率，单位是cGy*/
    float get_meandosecontribution() const;
    void set_meandosecontribution(const float& meandosecontribution);

    /*maxdosecontribution float
      plan和voi对应关系表中，plan对voi的最大dose贡献率，单位是cGy*/
    float get_maxdosecontribution() const;
    void set_maxdosecontribution(const float& maxdosecontribution);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*ingrid float
      表明某个voi在某个plan的dosegrid里的体积百分比*/
    float get_ingrid() const;
    void set_ingrid(const float& ingrid);


private:
    RtPlan_voiImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtPlan_voiImp
{

public:
    RtPlan_voiImp();

    ~RtPlan_voiImp();

    RtPlan_voiImp(const RtPlan_voiImp& plan_voi);

    RtPlan_voiImp& operator = (const RtPlan_voiImp& plan_voi);

    //planuid
    inline std::string get_planuid() const { return m_planuid;}
    inline void set_planuid(const std::string& planuid) { m_planuid = planuid;}

    //voiuid
    inline std::string get_voiuid() const { return m_voiuid;}
    inline void set_voiuid(const std::string& voiuid) { m_voiuid = voiuid;}

    //mindosecontribution
    inline float get_mindosecontribution() const { return m_mindosecontribution;}
    inline void set_mindosecontribution(const float& mindosecontribution) { m_mindosecontribution = mindosecontribution;}

    //meandosecontribution
    inline float get_meandosecontribution() const { return m_meandosecontribution;}
    inline void set_meandosecontribution(const float& meandosecontribution) { m_meandosecontribution = meandosecontribution;}

    //maxdosecontribution
    inline float get_maxdosecontribution() const { return m_maxdosecontribution;}
    inline void set_maxdosecontribution(const float& maxdosecontribution) { m_maxdosecontribution = maxdosecontribution;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //ingrid
    inline float get_ingrid() const { return m_ingrid;}
    inline void set_ingrid(const float& ingrid) { m_ingrid = ingrid;}

private:    //7 parameters
    std::string						m_planuid;
    std::string						m_voiuid;
    float							m_mindosecontribution;
    float							m_meandosecontribution;
    float							m_maxdosecontribution;
    DATETIME_BOOST					m_updatetime;
    float							m_ingrid;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif