//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.8
///
///  \version 1.0
///  \date    6/20/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_DELIVERYBEAMGROUP_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_DELIVERYBEAMGROUP_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum DELIVERYBEAMGROUP_FIELD
{
    DELIVERYBEAMGROUP_UID = 0,
    DELIVERYBEAMGROUP_SETUPUID,
    DELIVERYBEAMGROUP_MACHINEUID,
    DELIVERYBEAMGROUP_VOIUID,
    DELIVERYBEAMGROUP_SERIESUID,
    DELIVERYBEAMGROUP_SOPINSTANCEUID,
    DELIVERYBEAMGROUP_PRESCRIPTIONUID,
    DELIVERYBEAMGROUP_NORMALPOINTPOIUID,
    DELIVERYBEAMGROUP_REFERENCEDDELIVERYBEAMGROUPUID,
    DELIVERYBEAMGROUP_RELATEDNORMGROUPUID,
    DELIVERYBEAMGROUP_PLANTYPE,
    DELIVERYBEAMGROUP_NAME,
    DELIVERYBEAMGROUP_PLANLABEL,
    DELIVERYBEAMGROUP_PLANDATE,
    DELIVERYBEAMGROUP_PLANTIME,
    DELIVERYBEAMGROUP_FRACTION,
    DELIVERYBEAMGROUP_DOSEPERFRACTION,
    DELIVERYBEAMGROUP_ISCLOCKWISE,
    DELIVERYBEAMGROUP_RTPLANGEOMETRY,
    DELIVERYBEAMGROUP_STARTDATE,
    DELIVERYBEAMGROUP_ISMONDAYSELECTED,
    DELIVERYBEAMGROUP_ISTUESDAYSELECTED,
    DELIVERYBEAMGROUP_ISWEDNESDAYSELECTED,
    DELIVERYBEAMGROUP_ISTHURSDAYSELECTED,
    DELIVERYBEAMGROUP_ISFRIDAYSELECTED,
    DELIVERYBEAMGROUP_ISSATURDAYSELECTED,
    DELIVERYBEAMGROUP_ISSUNDAYSELECTED,
    DELIVERYBEAMGROUP_ISINCLUDEHOLIDAY,
    DELIVERYBEAMGROUP_TIMESPERDAY,
    DELIVERYBEAMGROUP_INTERVALHOUR,
    DELIVERYBEAMGROUP_ROTATIONTYPE,
    DELIVERYBEAMGROUP_ESTIMATEDTIME,
    DELIVERYBEAMGROUP_ISTOTALTIMEUSED,
    DELIVERYBEAMGROUP_TOTALTIME,
    DELIVERYBEAMGROUP_SOURCETYPE,
    DELIVERYBEAMGROUP_CRC,
    DELIVERYBEAMGROUP_ISGATING,
    DELIVERYBEAMGROUP_INACTIVE,
    DELIVERYBEAMGROUP_ISINTERVALOPTIONAL,
    DELIVERYBEAMGROUP_BINMODE,
    DELIVERYBEAMGROUP_BEAMONRANGESTART,
    DELIVERYBEAMGROUP_BEAMONRANGEEND,
    DELIVERYBEAMGROUP_DESCRIPTION,
    DELIVERYBEAMGROUP_ACTIVEINACTIVEREASON,
    DELIVERYBEAMGROUP_RADIATIONTYPE,
    DELIVERYBEAMGROUP_TOLERANCEUID,
    DELIVERYBEAMGROUP_ISQA,
    DELIVERYBEAMGROUP_UPDATETIME,
    DELIVERYBEAMGROUP_FIELD_MAX
};

static const char* ENUM2STRING_DELIVERYBEAMGROUP_FIELD[] =
{
    "UID",
    "SETUPUID",
    "MACHINEUID",
    "VOIUID",
    "SERIESUID",
    "SOPINSTANCEUID",
    "PRESCRIPTIONUID",
    "NORMALPOINTPOIUID",
    "REFERENCEDDELIVERYBEAMGROUPUID",
    "RELATEDNORMGROUPUID",
    "PLANTYPE",
    "NAME",
    "PLANLABEL",
    "PLANDATE",
    "PLANTIME",
    "FRACTION",
    "DOSEPERFRACTION",
    "ISCLOCKWISE",
    "RTPLANGEOMETRY",
    "STARTDATE",
    "ISMONDAYSELECTED",
    "ISTUESDAYSELECTED",
    "ISWEDNESDAYSELECTED",
    "ISTHURSDAYSELECTED",
    "ISFRIDAYSELECTED",
    "ISSATURDAYSELECTED",
    "ISSUNDAYSELECTED",
    "ISINCLUDEHOLIDAY",
    "TIMESPERDAY",
    "INTERVALHOUR",
    "ROTATIONTYPE",
    "ESTIMATEDTIME",
    "ISTOTALTIMEUSED",
    "TOTALTIME",
    "SOURCETYPE",
    "CRC",
    "ISGATING",
    "INACTIVE",
    "ISINTERVALOPTIONAL",
    "BINMODE",
    "BEAMONRANGESTART",
    "BEAMONRANGEEND",
    "DESCRIPTION",
    "ACTIVEINACTIVEREASON",
    "RADIATIONTYPE",
    "TOLERANCEUID",
    "ISQA",
    "UPDATETIME",
    "DELIVERYBEAMGROUP_FIELD_MAX"
};

static const char* ENUM2STRING_DELIVERYBEAMGROUP_FIELD_NULL = "100000000000000000000000000000000000000000000011";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtDeliverybeamgroupImp;

class RT_DB_EXPORT RtDeliverybeamgroup : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtDeliverybeamgroup(bool bGeneraterUid = false);

    ~RtDeliverybeamgroup();

    RtDeliverybeamgroup(const RtDeliverybeamgroup& deliverybeamgroup);

    RtDeliverybeamgroup& operator = (const RtDeliverybeamgroup& deliverybeamgroup);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*setupuid varchar
      fk related to setup table  uid*/
    std::string get_setupuid() const;
    void set_setupuid(const std::string& setupuid);

    /*machineuid varchar
      related machine.*/
    std::string get_machineuid() const;
    void set_machineuid(const std::string& machineuid);

    /*voiuid varchar
      一个VOI对应多个TMSDeliveryBeamGroup*/
    std::string get_voiuid() const;
    void set_voiuid(const std::string& voiuid);

    /*seriesuid varchar
      */
    std::string get_seriesuid() const;
    void set_seriesuid(const std::string& seriesuid);

    /*sopinstanceuid varchar
      qiuyang suggest  	可以去掉*/
    std::string get_sopinstanceuid() const;
    void set_sopinstanceuid(const std::string& sopinstanceuid);

    /*prescriptionuid varchar
      关联的处方UID*/
    std::string get_prescriptionuid() const;
    void set_prescriptionuid(const std::string& prescriptionuid);

    /*normalpointpoiuid varchar
      */
    std::string get_normalpointpoiuid() const;
    void set_normalpointpoiuid(const std::string& normalpointpoiuid);

    /*referenceddeliverybeamgroupuid varchar
      拆分过后的DG会有该字段，表示其原始DG的UID (BeamSchedule的EditGroup功能)*/
    std::string get_referenceddeliverybeamgroupuid() const;
    void set_referenceddeliverybeamgroupuid(const std::string& referenceddeliverybeamgroupuid);

    /*relatednormgroupuid varchar
      Related Normgroup UID*/
    std::string get_relatednormgroupuid() const;
    void set_relatednormgroupuid(const std::string& relatednormgroupuid);

    /*plantype int
      技术类型，建议改为Technical，再确认 qiuyang suggest*/
    int get_plantype() const;
    void set_plantype(const int& plantype);

    /*name varchar
      名称*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*planlabel varchar
      Lable*/
    std::string get_planlabel() const;
    void set_planlabel(const std::string& planlabel);

    /*plandate date
      Dicom tag*/
    DATE_BOOST get_plandate() const;
    void set_plandate(const DATE_BOOST& plandate);

    /*plantime time
      计划时间*/
    TIME_BOOST get_plantime() const;
    void set_plantime(const TIME_BOOST& plantime);

    /*fraction int
      治疗次数*/
    int get_fraction() const;
    void set_fraction(const int& fraction);

    /*doseperfraction double
      每次剂量*/
    double get_doseperfraction() const;
    void set_doseperfraction(const double& doseperfraction);

    /*isclockwise tinyint
      是否为顺时针*/
    bool get_isclockwise() const;
    void set_isclockwise(const bool& isclockwise);

    /*rtplangeometry int
      Enum PATIENT, TREATMENT_DEVICE*/
    int get_rtplangeometry() const;
    void set_rtplangeometry(const int& rtplangeometry);

    /*startdate date
      Schedule date in TMS UI*/
    DATE_BOOST get_startdate() const;
    void set_startdate(const DATE_BOOST& startdate);

    /*ismondayselected tinyint
      周一是否安排治疗该DG*/
    bool get_ismondayselected() const;
    void set_ismondayselected(const bool& ismondayselected);

    /*istuesdayselected tinyint
      周二是否安排治疗该DG*/
    bool get_istuesdayselected() const;
    void set_istuesdayselected(const bool& istuesdayselected);

    /*iswednesdayselected tinyint
      周三是否安排治疗该DG*/
    bool get_iswednesdayselected() const;
    void set_iswednesdayselected(const bool& iswednesdayselected);

    /*isthursdayselected tinyint
      周四是否安排治疗该DG*/
    bool get_isthursdayselected() const;
    void set_isthursdayselected(const bool& isthursdayselected);

    /*isfridayselected tinyint
      周五是否安排治疗该DG*/
    bool get_isfridayselected() const;
    void set_isfridayselected(const bool& isfridayselected);

    /*issaturdayselected tinyint
      周六是否安排治疗该DG*/
    bool get_issaturdayselected() const;
    void set_issaturdayselected(const bool& issaturdayselected);

    /*issundayselected tinyint
      周日是否安排治疗该DG*/
    bool get_issundayselected() const;
    void set_issundayselected(const bool& issundayselected);

    /*isincludeholiday tinyint
      节假日是否安排治疗该DG*/
    bool get_isincludeholiday() const;
    void set_isincludeholiday(const bool& isincludeholiday);

    /*timesperday int
      该DG一天治疗几次*/
    int get_timesperday() const;
    void set_timesperday(const int& timesperday);

    /*intervalhour float
      当timesperday > 1时， 一天内每次治疗之间需要满足的最小间隔时间*/
    float get_intervalhour() const;
    void set_intervalhour(const float& intervalhour);

    /*rotationtype int
      TABLEROT_ECCENTRIC or TABLEROT_ISOCENTRIC*/
    int get_rotationtype() const;
    void set_rotationtype(const int& rotationtype);

    /*estimatedtime time
      estimated duration per time*/
    TIME_BOOST get_estimatedtime() const;
    void set_estimatedtime(const TIME_BOOST& estimatedtime);

    /*istotaltimeused tinyint
      是否使用totaltime作为Calendar模块中的TreatmentSession预估时间*/
    bool get_istotaltimeused() const;
    void set_istotaltimeused(const bool& istotaltimeused);

    /*totaltime time
      DG的TreatmentSession每次治疗总预估时间*/
    TIME_BOOST get_totaltime() const;
    void set_totaltime(const TIME_BOOST& totaltime);

    /*sourcetype int
      Dg来源*/
    int get_sourcetype() const;
    void set_sourcetype(const int& sourcetype);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*isgating tinyint
      是否带门控*/
    bool get_isgating() const;
    void set_isgating(const bool& isgating);

    /*inactive tinyint
      是否激活*/
    bool get_inactive() const;
    void set_inactive(const bool& inactive);

    /*isintervaloptional tinyint
      Timesperday>1时，一天内TreatmentSession开始治疗时间间隔是否需要不小于intervalhour*/
    bool get_isintervaloptional() const;
    void set_isintervaloptional(const bool& isintervaloptional);

    /*binmode int
      门控参数*/
    int get_binmode() const;
    void set_binmode(const int& binmode);

    /*beamonrangestart double
      门控参数*/
    double get_beamonrangestart() const;
    void set_beamonrangestart(const double& beamonrangestart);

    /*beamonrangeend double
      门控参数*/
    double get_beamonrangeend() const;
    void set_beamonrangeend(const double& beamonrangeend);

    /*description varchar
      描述*/
    std::string get_description() const;
    void set_description(const std::string& description);

    /*activeinactivereason varchar
      切换DG激活状态的原因，可选*/
    std::string get_activeinactivereason() const;
    void set_activeinactivereason(const std::string& activeinactivereason);

    /*radiationtype int
      该DG使用光子或电该字段只在修改BeamMode参数时起到过滤作用,Import时，需要填写该字段 (以第一个beam为准);
            BeamDefinition创建DG时，该项必填;*/
    int get_radiationtype() const;
    void set_radiationtype(const int& radiationtype);

    /*toleranceuid varchar
      只有当toleranceuid不为空，且能够找到对应的tolerance对象，才表示DG所有的beam应该使用同一个tolerance;
            */
    std::string get_toleranceuid() const;
    void set_toleranceuid(const std::string& toleranceuid);

    /*isqa tinyint
      该beamgroup是否为QA Group*/
    bool get_isqa() const;
    void set_isqa(const bool& isqa);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtDeliverybeamgroupImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtDeliverybeamgroupImp
{

public:
    //default is false to improve performance
    RtDeliverybeamgroupImp(bool bGeneraterUid = false);

    ~RtDeliverybeamgroupImp();

    RtDeliverybeamgroupImp(const RtDeliverybeamgroupImp& deliverybeamgroup);

    RtDeliverybeamgroupImp& operator = (const RtDeliverybeamgroupImp& deliverybeamgroup);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //setupuid
    inline std::string get_setupuid() const { return m_setupuid;}
    inline void set_setupuid(const std::string& setupuid) { m_setupuid = setupuid;}

    //machineuid
    inline std::string get_machineuid() const { return m_machineuid;}
    inline void set_machineuid(const std::string& machineuid) { m_machineuid = machineuid;}

    //voiuid
    inline std::string get_voiuid() const { return m_voiuid;}
    inline void set_voiuid(const std::string& voiuid) { m_voiuid = voiuid;}

    //seriesuid
    inline std::string get_seriesuid() const { return m_seriesuid;}
    inline void set_seriesuid(const std::string& seriesuid) { m_seriesuid = seriesuid;}

    //sopinstanceuid
    inline std::string get_sopinstanceuid() const { return m_sopinstanceuid;}
    inline void set_sopinstanceuid(const std::string& sopinstanceuid) { m_sopinstanceuid = sopinstanceuid;}

    //prescriptionuid
    inline std::string get_prescriptionuid() const { return m_prescriptionuid;}
    inline void set_prescriptionuid(const std::string& prescriptionuid) { m_prescriptionuid = prescriptionuid;}

    //normalpointpoiuid
    inline std::string get_normalpointpoiuid() const { return m_normalpointpoiuid;}
    inline void set_normalpointpoiuid(const std::string& normalpointpoiuid) { m_normalpointpoiuid = normalpointpoiuid;}

    //referenceddeliverybeamgroupuid
    inline std::string get_referenceddeliverybeamgroupuid() const { return m_referenceddeliverybeamgroupuid;}
    inline void set_referenceddeliverybeamgroupuid(const std::string& referenceddeliverybeamgroupuid) { m_referenceddeliverybeamgroupuid = referenceddeliverybeamgroupuid;}

    //relatednormgroupuid
    inline std::string get_relatednormgroupuid() const { return m_relatednormgroupuid;}
    inline void set_relatednormgroupuid(const std::string& relatednormgroupuid) { m_relatednormgroupuid = relatednormgroupuid;}

    //plantype
    inline int get_plantype() const { return m_plantype;}
    inline void set_plantype(const int& plantype) { m_plantype = plantype;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //planlabel
    inline std::string get_planlabel() const { return m_planlabel;}
    inline void set_planlabel(const std::string& planlabel) { m_planlabel = planlabel;}

    //plandate
    inline DATE_BOOST get_plandate() const { return m_plandate;}
    inline void set_plandate(const DATE_BOOST& plandate) { m_plandate = plandate;}

    //plantime
    inline TIME_BOOST get_plantime() const { return m_plantime;}
    inline void set_plantime(const TIME_BOOST& plantime) { m_plantime = plantime;}

    //fraction
    inline int get_fraction() const { return m_fraction;}
    inline void set_fraction(const int& fraction) { m_fraction = fraction;}

    //doseperfraction
    inline double get_doseperfraction() const { return m_doseperfraction;}
    inline void set_doseperfraction(const double& doseperfraction) { m_doseperfraction = doseperfraction;}

    //isclockwise
    inline bool get_isclockwise() const { return m_isclockwise;}
    inline void set_isclockwise(const bool& isclockwise) { m_isclockwise = isclockwise;}

    //rtplangeometry
    inline int get_rtplangeometry() const { return m_rtplangeometry;}
    inline void set_rtplangeometry(const int& rtplangeometry) { m_rtplangeometry = rtplangeometry;}

    //startdate
    inline DATE_BOOST get_startdate() const { return m_startdate;}
    inline void set_startdate(const DATE_BOOST& startdate) { m_startdate = startdate;}

    //ismondayselected
    inline bool get_ismondayselected() const { return m_ismondayselected;}
    inline void set_ismondayselected(const bool& ismondayselected) { m_ismondayselected = ismondayselected;}

    //istuesdayselected
    inline bool get_istuesdayselected() const { return m_istuesdayselected;}
    inline void set_istuesdayselected(const bool& istuesdayselected) { m_istuesdayselected = istuesdayselected;}

    //iswednesdayselected
    inline bool get_iswednesdayselected() const { return m_iswednesdayselected;}
    inline void set_iswednesdayselected(const bool& iswednesdayselected) { m_iswednesdayselected = iswednesdayselected;}

    //isthursdayselected
    inline bool get_isthursdayselected() const { return m_isthursdayselected;}
    inline void set_isthursdayselected(const bool& isthursdayselected) { m_isthursdayselected = isthursdayselected;}

    //isfridayselected
    inline bool get_isfridayselected() const { return m_isfridayselected;}
    inline void set_isfridayselected(const bool& isfridayselected) { m_isfridayselected = isfridayselected;}

    //issaturdayselected
    inline bool get_issaturdayselected() const { return m_issaturdayselected;}
    inline void set_issaturdayselected(const bool& issaturdayselected) { m_issaturdayselected = issaturdayselected;}

    //issundayselected
    inline bool get_issundayselected() const { return m_issundayselected;}
    inline void set_issundayselected(const bool& issundayselected) { m_issundayselected = issundayselected;}

    //isincludeholiday
    inline bool get_isincludeholiday() const { return m_isincludeholiday;}
    inline void set_isincludeholiday(const bool& isincludeholiday) { m_isincludeholiday = isincludeholiday;}

    //timesperday
    inline int get_timesperday() const { return m_timesperday;}
    inline void set_timesperday(const int& timesperday) { m_timesperday = timesperday;}

    //intervalhour
    inline float get_intervalhour() const { return m_intervalhour;}
    inline void set_intervalhour(const float& intervalhour) { m_intervalhour = intervalhour;}

    //rotationtype
    inline int get_rotationtype() const { return m_rotationtype;}
    inline void set_rotationtype(const int& rotationtype) { m_rotationtype = rotationtype;}

    //estimatedtime
    inline TIME_BOOST get_estimatedtime() const { return m_estimatedtime;}
    inline void set_estimatedtime(const TIME_BOOST& estimatedtime) { m_estimatedtime = estimatedtime;}

    //istotaltimeused
    inline bool get_istotaltimeused() const { return m_istotaltimeused;}
    inline void set_istotaltimeused(const bool& istotaltimeused) { m_istotaltimeused = istotaltimeused;}

    //totaltime
    inline TIME_BOOST get_totaltime() const { return m_totaltime;}
    inline void set_totaltime(const TIME_BOOST& totaltime) { m_totaltime = totaltime;}

    //sourcetype
    inline int get_sourcetype() const { return m_sourcetype;}
    inline void set_sourcetype(const int& sourcetype) { m_sourcetype = sourcetype;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //isgating
    inline bool get_isgating() const { return m_isgating;}
    inline void set_isgating(const bool& isgating) { m_isgating = isgating;}

    //inactive
    inline bool get_inactive() const { return m_inactive;}
    inline void set_inactive(const bool& inactive) { m_inactive = inactive;}

    //isintervaloptional
    inline bool get_isintervaloptional() const { return m_isintervaloptional;}
    inline void set_isintervaloptional(const bool& isintervaloptional) { m_isintervaloptional = isintervaloptional;}

    //binmode
    inline int get_binmode() const { return m_binmode;}
    inline void set_binmode(const int& binmode) { m_binmode = binmode;}

    //beamonrangestart
    inline double get_beamonrangestart() const { return m_beamonrangestart;}
    inline void set_beamonrangestart(const double& beamonrangestart) { m_beamonrangestart = beamonrangestart;}

    //beamonrangeend
    inline double get_beamonrangeend() const { return m_beamonrangeend;}
    inline void set_beamonrangeend(const double& beamonrangeend) { m_beamonrangeend = beamonrangeend;}

    //description
    inline std::string get_description() const { return m_description;}
    inline void set_description(const std::string& description) { m_description = description;}

    //activeinactivereason
    inline std::string get_activeinactivereason() const { return m_activeinactivereason;}
    inline void set_activeinactivereason(const std::string& activeinactivereason) { m_activeinactivereason = activeinactivereason;}

    //radiationtype
    inline int get_radiationtype() const { return m_radiationtype;}
    inline void set_radiationtype(const int& radiationtype) { m_radiationtype = radiationtype;}

    //toleranceuid
    inline std::string get_toleranceuid() const { return m_toleranceuid;}
    inline void set_toleranceuid(const std::string& toleranceuid) { m_toleranceuid = toleranceuid;}

    //isqa
    inline bool get_isqa() const { return m_isqa;}
    inline void set_isqa(const bool& isqa) { m_isqa = isqa;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //48 parameters
    std::string						m_uid;
    std::string						m_setupuid;
    std::string						m_machineuid;
    std::string						m_voiuid;
    std::string						m_seriesuid;
    std::string						m_sopinstanceuid;
    std::string						m_prescriptionuid;
    std::string						m_normalpointpoiuid;
    std::string						m_referenceddeliverybeamgroupuid;
    std::string						m_relatednormgroupuid;
    int								m_plantype;
    std::string						m_name;
    std::string						m_planlabel;
    DATE_BOOST						m_plandate;
    TIME_BOOST						m_plantime;
    int								m_fraction;
    double							m_doseperfraction;
    bool							m_isclockwise;
    int								m_rtplangeometry;
    DATE_BOOST						m_startdate;
    bool							m_ismondayselected;
    bool							m_istuesdayselected;
    bool							m_iswednesdayselected;
    bool							m_isthursdayselected;
    bool							m_isfridayselected;
    bool							m_issaturdayselected;
    bool							m_issundayselected;
    bool							m_isincludeholiday;
    int								m_timesperday;
    float							m_intervalhour;
    int								m_rotationtype;
    TIME_BOOST						m_estimatedtime;
    bool							m_istotaltimeused;
    TIME_BOOST						m_totaltime;
    int								m_sourcetype;
    std::string						m_crc;
    bool							m_isgating;
    bool							m_inactive;
    bool							m_isintervaloptional;
    int								m_binmode;
    double							m_beamonrangestart;
    double							m_beamonrangeend;
    std::string						m_description;
    std::string						m_activeinactivereason;
    int								m_radiationtype;
    std::string						m_toleranceuid;
    bool							m_isqa;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif