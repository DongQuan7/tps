//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_TABLECONTOUR_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_TABLECONTOUR_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "RtTpsDatabaseWrapper/rt_tps_database_data.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum TABLECONTOUR_FIELD
{
    TABLECONTOUR_UID = 0,
    TABLECONTOUR_TABLENAME,
    TABLECONTOUR_SLICENUM,
    TABLECONTOUR_CONTOURID,
    TABLECONTOUR_POINTS,
    TABLECONTOUR_THICKNESS,
    TABLECONTOUR_TABLEUID,
    TABLECONTOUR_UPDATETIME,
    TABLECONTOUR_FIELD_MAX
};

static const char* ENUM2STRING_TABLECONTOUR_FIELD[] =
{
    "UID",
    "TABLENAME",
    "SLICENUM",
    "CONTOURID",
    "POINTS",
    "THICKNESS",
    "TABLEUID",
    "UPDATETIME",
    "TABLECONTOUR_FIELD_MAX"
};

static const char* ENUM2STRING_TABLECONTOUR_FIELD_NULL = "10000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtTablecontourImp;

class RT_DB_EXPORT RtTablecontour : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtTablecontour(bool bGeneraterUid = false);

    ~RtTablecontour();

    RtTablecontour(const RtTablecontour& tablecontour);

    RtTablecontour& operator = (const RtTablecontour& tablecontour);

    /*uid varchar
      主键
            */
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*tablename varchar
      table name*/
    std::string get_tablename() const;
    void set_tablename(const std::string& tablename);

    /*slicenum int
      该contour在原图像中所在的层数*/
    int get_slicenum() const;
    void set_slicenum(const int& slicenum);

    /*contourid int
      该contour在当前层的顺序*/
    int get_contourid() const;
    void set_contourid(const int& contourid);

    /*points varchar
      contour在原图像中patient坐标系下的点集
            */
    std::vector<db_Point3d> get_points() const;
    std::vector<db_Point3d> get_points();
    void set_points(const std::vector<db_Point3d>& vPoints);

    /*thickness double
      原图像中每一层的层厚*/
    double get_thickness() const;
    void set_thickness(const double& thickness);

    /*tableuid varchar
      tableuid标明哪些contour是属于一个table的*/
    std::string get_tableuid() const;
    void set_tableuid(const std::string& tableuid);

    /*updatetime timestamp
      数据戳用保证修改表数据时时最新表数据，有数据库自动填写*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtTablecontourImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtTablecontourImp
{

public:
    //default is false to improve performance
    RtTablecontourImp(bool bGeneraterUid = false);

    ~RtTablecontourImp();

    RtTablecontourImp(const RtTablecontourImp& tablecontour);

    RtTablecontourImp& operator = (const RtTablecontourImp& tablecontour);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //tablename
    inline std::string get_tablename() const { return m_tablename;}
    inline void set_tablename(const std::string& tablename) { m_tablename = tablename;}

    //slicenum
    inline int get_slicenum() const { return m_slicenum;}
    inline void set_slicenum(const int& slicenum) { m_slicenum = slicenum;}

    //contourid
    inline int get_contourid() const { return m_contourid;}
    inline void set_contourid(const int& contourid) { m_contourid = contourid;}

    //points
    inline std::vector<db_Point3d> get_points() const { return m_points;}
    inline std::vector<db_Point3d> get_points() { return m_points;}
    inline void set_points(const std::vector<db_Point3d>& vPoints) { m_points = vPoints;}

    //thickness
    inline double get_thickness() const { return m_thickness;}
    inline void set_thickness(const double& thickness) { m_thickness = thickness;}

    //tableuid
    inline std::string get_tableuid() const { return m_tableuid;}
    inline void set_tableuid(const std::string& tableuid) { m_tableuid = tableuid;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //8 parameters
    std::string						m_uid;
    std::string						m_tablename;
    int								m_slicenum;
    int								m_contourid;
    std::vector<db_Point3d>			m_points;
    double							m_thickness;
    std::string						m_tableuid;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif