//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_WEDGEFACTOR_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_WEDGEFACTOR_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum WEDGEFACTOR_FIELD
{
    WEDGEFACTOR_UID = 0,
    WEDGEFACTOR_COMMISSIONEDUNITUID,
    WEDGEFACTOR_WEDGEFACTORLIST,
    WEDGEFACTOR_CRC,
    WEDGEFACTOR_UPDATETIME,
    WEDGEFACTOR_FIELD_MAX
};

static const char* ENUM2STRING_WEDGEFACTOR_FIELD[] =
{
    "UID",
    "COMMISSIONEDUNITUID",
    "WEDGEFACTORLIST",
    "CRC",
    "UPDATETIME",
    "WEDGEFACTOR_FIELD_MAX"
};

static const char* ENUM2STRING_WEDGEFACTOR_FIELD_NULL = "10001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtWedgefactorImp;

class DBWedgeInfo
{
public:
    std::string m_sAccessoryUID;
    float m_fFieldSizeX;
    float m_fFieldSizeY;
    float m_fValue;
};

class RT_DB_EXPORT RtWedgefactor : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtWedgefactor(bool bGeneraterUid = false);

    ~RtWedgefactor();

    RtWedgefactor(const RtWedgefactor& wedgefactor);

    RtWedgefactor& operator = (const RtWedgefactor& wedgefactor);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*commissionedunituid varchar
      FK related to commissionedunit table uid*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*wedgefactorlist varchar
      wedge factor list file path*/
    std::string get_wedgefactorlist() const;
    void set_wedgefactorlist(const std::string& wedgefactorlist);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);
	
    std::vector<DBWedgeInfo*> GetWedgeFactorList() const;
    void SetWedgeFactorList(const std::vector<DBWedgeInfo*>& vWedgeFactorList);

private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtWedgefactorImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtWedgefactorImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtWedgefactorImp(bool bGeneraterUid = false);

    virtual ~RtWedgefactorImp();

    RtWedgefactorImp(const RtWedgefactorImp& wedgefactor);

    RtWedgefactorImp& operator = (const RtWedgefactorImp& wedgefactor);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //wedgefactorlist
    inline std::string get_wedgefactorlist() const { return m_wedgefactorlist;}
    inline void set_wedgefactorlist(const std::string& wedgefactorlist) { m_wedgefactorlist = wedgefactorlist;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
	
    std::vector<DBWedgeInfo*> GetWedgeFactorList() const;
    void SetWedgeFactorList(const std::vector<DBWedgeInfo*>& vWedgeFactorList);

private:    //5 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_wedgefactorlist);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_uid;
    std::string						m_commissionedunituid;
    std::string						m_wedgefactorlist;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
    std::vector<DBWedgeInfo*> m_vWedgeFactorList;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif