//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_MCPHOCOMMISSIONEDUNIT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_MCPHOCOMMISSIONEDUNIT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum MCPHOCOMMISSIONEDUNIT_FIELD
{
    MCPHOCOMMISSIONEDUNIT_UID = 0,
    MCPHOCOMMISSIONEDUNIT_COMMISSIONEDUNITUID,
    MCPHOCOMMISSIONEDUNIT_MCPHOXJAWUPPOSITION,
    MCPHOCOMMISSIONEDUNIT_MCPHOXJAWTHICKNESS,
    MCPHOCOMMISSIONEDUNIT_MCPHOYJAWUPPOSITION,
    MCPHOCOMMISSIONEDUNIT_MCPHOYJAWTHICKNESS,
    MCPHOCOMMISSIONEDUNIT_MCPHOMLCCENTERPOSITION,
    MCPHOCOMMISSIONEDUNIT_MCPHOMLCTHICKNESS,
    MCPHOCOMMISSIONEDUNIT_MCPHOMLCTGWIDTH,
    MCPHOCOMMISSIONEDUNIT_MCPHOMLCAIRGAPWIDTH,
    MCPHOCOMMISSIONEDUNIT_MCPHOMLLEAFENDRADIUS,
    MCPHOCOMMISSIONEDUNIT_MCPHOMUFACTOR,
    MCPHOCOMMISSIONEDUNIT_MCPHOLIST,
    MCPHOCOMMISSIONEDUNIT_PHSPDISTANCEFROMTARGET,
    MCPHOCOMMISSIONEDUNIT_MCPHONORM10X10,
    MCPHOCOMMISSIONEDUNIT_MCPHOABSCORRECTIONFACTOR,
    MCPHOCOMMISSIONEDUNIT_MCPHOENERGY,
    MCPHOCOMMISSIONEDUNIT_PHOFLULIST,
    MCPHOCOMMISSIONEDUNIT_ENEOFFAXISRADIUSVECLIST,
    MCPHOCOMMISSIONEDUNIT_ENEOFFAXISENERGYVEC,
    MCPHOCOMMISSIONEDUNIT_ENEOFFAXISVALUELIST,
    MCPHOCOMMISSIONEDUNIT_MCPHOON,
    MCPHOCOMMISSIONEDUNIT_MCPHODM,
    MCPHOCOMMISSIONEDUNIT_MCPHOC1,
    MCPHOCOMMISSIONEDUNIT_MCPHOC2,
    MCPHOCOMMISSIONEDUNIT_MCPHOC3,
    MCPHOCOMMISSIONEDUNIT_MCPHOFFS10,
    MCPHOCOMMISSIONEDUNIT_MCPHOK,
    MCPHOCOMMISSIONEDUNIT_MCPHOA,
    MCPHOCOMMISSIONEDUNIT_MCPHODF,
    MCPHOCOMMISSIONEDUNIT_MCPHOSF,
    MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPENUM,
    MCPHOCOMMISSIONEDUNIT_MLCLEAFYLEAFPOSLIST,
    MCPHOCOMMISSIONEDUNIT_MLCLEAFTHETALIST,
    MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPEIDXLIST,
    MCPHOCOMMISSIONEDUNIT_MEANLEAFORISHIFT,
    MCPHOCOMMISSIONEDUNIT_FRINGE,
    MCPHOCOMMISSIONEDUNIT_MCPHOLEAFMAPLIST,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM1,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM2,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM3,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM4,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM5,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM6,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM7,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM8,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM9,
    MCPHOCOMMISSIONEDUNIT_MCPHOPARAM10,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYSTART,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYEND,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYBIN,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYRESTART,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYSTART,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYEND,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYBIN,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYRESTART,
    MCPHOCOMMISSIONEDUNIT_MCELECTRONENERGY,
    MCPHOCOMMISSIONEDUNIT_MCCOMMIPARTICLENUMBER,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYLIST,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYWEIGHTLIST,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYLIST,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYWEIGHTLIST,
    MCPHOCOMMISSIONEDUNIT_MCELECENERGYLIST,
    MCPHOCOMMISSIONEDUNIT_MCELECWEIGHTLIST,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYFLATFILTERDIST,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYJAWDISTANCE,
    MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMAPRIMARY,
    MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMASECONDARY,
    MCPHOCOMMISSIONEDUNIT_MCPRIMARYSOFTENING,
    MCPHOCOMMISSIONEDUNIT_MCSOFTENINGTUNNINGF,
    MCPHOCOMMISSIONEDUNIT_MCSCATTERINGCOMPTON,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCETYPE,
    MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCEPARA,
    MCPHOCOMMISSIONEDUNIT_MCELECCORFIELDSIZE,
    MCPHOCOMMISSIONEDUNIT_MCPHOTONFLUENCE,
    MCPHOCOMMISSIONEDUNIT_MCRECTANGLESCACOR,
    MCPHOCOMMISSIONEDUNIT_MCLARGEFIELDTAILCOR,
    MCPHOCOMMISSIONEDUNIT_MCMLCLEAKAGE,
    MCPHOCOMMISSIONEDUNIT_MCGAUSSIANBLURSWITCH,
    MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAX,
    MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAY,
    MCPHOCOMMISSIONEDUNIT_CRC,
    MCPHOCOMMISSIONEDUNIT_UPDATETIME,
    MCPHOCOMMISSIONEDUNIT_MCJAWLEAKAGE,
    MCPHOCOMMISSIONEDUNIT_MCTONGUEWIDTH,
    MCPHOCOMMISSIONEDUNIT_MCGROOVEWIDTH,
    MCPHOCOMMISSIONEDUNIT_MCLEAFTIPWIDTH,
    MCPHOCOMMISSIONEDUNIT_MCTRANSMISSION,
    MCPHOCOMMISSIONEDUNIT_RESERVE,
    MCPHOCOMMISSIONEDUNIT_FIELD_MAX
};

static const char* ENUM2STRING_MCPHOCOMMISSIONEDUNIT_FIELD[] =
{
    "UID",
    "COMMISSIONEDUNITUID",
    "MCPHOXJAWUPPOSITION",
    "MCPHOXJAWTHICKNESS",
    "MCPHOYJAWUPPOSITION",
    "MCPHOYJAWTHICKNESS",
    "MCPHOMLCCENTERPOSITION",
    "MCPHOMLCTHICKNESS",
    "MCPHOMLCTGWIDTH",
    "MCPHOMLCAIRGAPWIDTH",
    "MCPHOMLLEAFENDRADIUS",
    "MCPHOMUFACTOR",
    "MCPHOLIST",
    "PHSPDISTANCEFROMTARGET",
    "MCPHONORM10X10",
    "MCPHOABSCORRECTIONFACTOR",
    "MCPHOENERGY",
    "PHOFLULIST",
    "ENEOFFAXISRADIUSVECLIST",
    "ENEOFFAXISENERGYVEC",
    "ENEOFFAXISVALUELIST",
    "MCPHOON",
    "MCPHODM",
    "MCPHOC1",
    "MCPHOC2",
    "MCPHOC3",
    "MCPHOFFS10",
    "MCPHOK",
    "MCPHOA",
    "MCPHODF",
    "MCPHOSF",
    "MLCLEAFSHAPENUM",
    "MLCLEAFYLEAFPOSLIST",
    "MLCLEAFTHETALIST",
    "MLCLEAFSHAPEIDXLIST",
    "MEANLEAFORISHIFT",
    "FRINGE",
    "MCPHOLEAFMAPLIST",
    "MCPHOPARAM1",
    "MCPHOPARAM2",
    "MCPHOPARAM3",
    "MCPHOPARAM4",
    "MCPHOPARAM5",
    "MCPHOPARAM6",
    "MCPHOPARAM7",
    "MCPHOPARAM8",
    "MCPHOPARAM9",
    "MCPHOPARAM10",
    "MCPRIMARYENERGYSTART",
    "MCPRIMARYENERGYEND",
    "MCPRIMARYENERGYBIN",
    "MCPRIMARYENERGYRESTART",
    "MCSECONDARYENERGYSTART",
    "MCSECONDARYENERGYEND",
    "MCSECONDARYENERGYBIN",
    "MCSECONDARYENERGYRESTART",
    "MCELECTRONENERGY",
    "MCCOMMIPARTICLENUMBER",
    "MCPRIMARYENERGYLIST",
    "MCPRIMARYWEIGHTLIST",
    "MCSECONDARYENERGYLIST",
    "MCSECONDARYWEIGHTLIST",
    "MCELECENERGYLIST",
    "MCELECWEIGHTLIST",
    "MCPRIMARYFLATFILTERDIST",
    "MCPRIMARYJAWDISTANCE",
    "MCSOURCESIGMAPRIMARY",
    "MCSOURCESIGMASECONDARY",
    "MCPRIMARYSOFTENING",
    "MCSOFTENINGTUNNINGF",
    "MCSCATTERINGCOMPTON",
    "MCSECONDARYSOURCETYPE",
    "MCSECONDARYSOURCEPARA",
    "MCELECCORFIELDSIZE",
    "MCPHOTONFLUENCE",
    "MCRECTANGLESCACOR",
    "MCLARGEFIELDTAILCOR",
    "MCMLCLEAKAGE",
    "MCGAUSSIANBLURSWITCH",
    "MCGAUSSIANSIGMAX",
    "MCGAUSSIANSIGMAY",
    "CRC",
    "UPDATETIME",
    "MCJAWLEAKAGE",
    "MCTONGUEWIDTH",
    "MCGROOVEWIDTH",
    "MCLEAFTIPWIDTH",
    "MCTRANSMISSION",
    "RESERVE",
    "MCPHOCOMMISSIONEDUNIT_FIELD_MAX"
};

static const char* ENUM2STRING_MCPHOCOMMISSIONEDUNIT_FIELD_NULL = "10000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtMcphocommissionedunitImp;

class McPhoAbsCorrectionFactor
{
public:
    //field size for absolute dose correction, square filed for this version.
    float m_fMcPhoAbsCorrectionFieldSize;
    float m_fMcPhoAbsCorrectionFactor;
};

class RT_DB_EXPORT RtMcphocommissionedunit : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtMcphocommissionedunit(bool bGeneraterUid = false);

    ~RtMcphocommissionedunit();

    RtMcphocommissionedunit(const RtMcphocommissionedunit& mcphocommissionedunit);

    RtMcphocommissionedunit& operator = (const RtMcphocommissionedunit& mcphocommissionedunit);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*commissionedunituid varchar
      说明：和commissionedUnit表关联，且一个commissionedUnit记录最多对应一个McPhoCommissionedUnit
            //for collimator setting
            */
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*mcphoxjawupposition float
       upper position of x jaw*/
    float get_mcphoxjawupposition() const;
    void set_mcphoxjawupposition(const float& mcphoxjawupposition);

    /*mcphoxjawthickness float
      height of x jaw*/
    float get_mcphoxjawthickness() const;
    void set_mcphoxjawthickness(const float& mcphoxjawthickness);

    /*mcphoyjawupposition float
      upper positin of y jaw*/
    float get_mcphoyjawupposition() const;
    void set_mcphoyjawupposition(const float& mcphoyjawupposition);

    /*mcphoyjawthickness float
      height of y jaw*/
    float get_mcphoyjawthickness() const;
    void set_mcphoyjawthickness(const float& mcphoyjawthickness);

    /*mcphomlccenterposition float
      position of center of MLC*/
    float get_mcphomlccenterposition() const;
    void set_mcphomlccenterposition(const float& mcphomlccenterposition);

    /*mcphomlcthickness float
      thickness of MLC*/
    float get_mcphomlcthickness() const;
    void set_mcphomlcthickness(const float& mcphomlcthickness);

    /*mcphomlctgwidth float
      Tongue-Groove width*/
    float get_mcphomlctgwidth() const;
    void set_mcphomlctgwidth(const float& mcphomlctgwidth);

    /*mcphomlcairgapwidth float
      width of air gap between two leafs*/
    float get_mcphomlcairgapwidth() const;
    void set_mcphomlcairgapwidth(const float& mcphomlcairgapwidth);

    /*mcphomlleafendradius float
      radius of MLC leaf end*/
    float get_mcphomlleafendradius() const;
    void set_mcphomlleafendradius(const float& mcphomlleafendradius);

    /*mcphomufactor float
       a correction factor of mu for PDD fitting*/
    float get_mcphomufactor() const;
    void set_mcphomufactor(const float& mcphomufactor);

    /*mcpholist varchar
      the file path for Monte-Carlo photon */
    std::string get_mcpholist() const;
    void set_mcpholist(const std::string& mcpholist);

    /*phspdistancefromtarget float
      distance of the compressed phase space file from start point of SAD in cm. Note all the information of compressed phase space data saved in one file except for distance.
            */
    float get_phspdistancefromtarget() const;
    void set_phspdistancefromtarget(const float& phspdistancefromtarget);

    /*mcphonorm10x10 float
       a factor insuring dose at normalization depth at normalization field size (mostly 10x10) be 1 MU.*/
    float get_mcphonorm10x10() const;
    void set_mcphonorm10x10(const float& mcphonorm10x10);

    /*mcphoabscorrectionfactor varchar
      absolute dose correction factor of corresponding field size说明：嵌套结构体*/
    std::string get_mcphoabscorrectionfactor() const;
    void set_mcphoabscorrectionfactor(const std::string& mcphoabscorrectionfactor);

    /*mcphoenergy varchar
      a string in UI with comma as seperator*/
    std::string get_mcphoenergy() const;
    void set_mcphoenergy(const std::string& mcphoenergy);

    /*phoflulist varchar
      easyoffaxisvec*/
    std::string get_phoflulist() const;
    void set_phoflulist(const std::string& phoflulist);

    /*eneoffaxisradiusveclist varchar
      eneoffaxisradiusvec file path*/
    std::string get_eneoffaxisradiusveclist() const;
    void set_eneoffaxisradiusveclist(const std::string& eneoffaxisradiusveclist);

    /*eneoffaxisenergyvec varchar
      eneoffaxisenergyvec*/
    std::string get_eneoffaxisenergyvec() const;
    void set_eneoffaxisenergyvec(const std::string& eneoffaxisenergyvec);

    /*eneoffaxisvaluelist varchar
      for eletron contanination correction*/
    std::string get_eneoffaxisvaluelist() const;
    void set_eneoffaxisvaluelist(const std::string& eneoffaxisvaluelist);

    /*mcphoon int
      is electron contamination on */
    int get_mcphoon() const;
    void set_mcphoon(const int& mcphoon);

    /*mcphodm float
      maximum depth of electron contamination*/
    float get_mcphodm() const;
    void set_mcphodm(const float& mcphodm);

    /*mcphoc1 float
      mcphoc1  depth of electron contamination*/
    float get_mcphoc1() const;
    void set_mcphoc1(const float& mcphoc1);

    /*mcphoc2 float
      mcphoc2 depth of electron contamination*/
    float get_mcphoc2() const;
    void set_mcphoc2(const float& mcphoc2);

    /*mcphoc3 float
      mcphoc3 depth of electron contamination*/
    float get_mcphoc3() const;
    void set_mcphoc3(const float& mcphoc3);

    /*mcphoffs10 float
      surface dose of field size 10x10*/
    float get_mcphoffs10() const;
    void set_mcphoffs10(const float& mcphoffs10);

    /*mcphok float
      depth factor f*/
    float get_mcphok() const;
    void set_mcphok(const float& mcphok);

    /*mcphoa float
      radius factor*/
    float get_mcphoa() const;
    void set_mcphoa(const float& mcphoa);

    /*mcphodf float
      ratio of linear variation area among maximum depth of electron contamination*/
    float get_mcphodf() const;
    void set_mcphodf(const float& mcphodf);

    /*mcphosf float
      for intersection line length matrix*/
    float get_mcphosf() const;
    void set_mcphosf(const float& mcphosf);

    /*mlcleafshapenum int
       number of MLC leaf shape*/
    int get_mlcleafshapenum() const;
    void set_mlcleafshapenum(const int& mlcleafshapenum);

    /*mlcleafyleafposlist varchar
      Sides position on MLC center plane for each leaf. Length =1+leafPairNum */
    std::string get_mlcleafyleafposlist() const;
    void set_mlcleafyleafposlist(const std::string& mlcleafyleafposlist);

    /*mlcleafthetalist varchar
       rotate angle relative to beam axis for each leaf. Length = 2*leafPairNum */
    std::string get_mlcleafthetalist() const;
    void set_mlcleafthetalist(const std::string& mlcleafthetalist);

    /*mlcleafshapeidxlist varchar
      leaf shape idx for each leaf. The value < m_iMlcLeafShapeNum. Length = 2*leafPairNum. */
    std::string get_mlcleafshapeidxlist() const;
    void set_mlcleafshapeidxlist(const std::string& mlcleafshapeidxlist);

    /*meanleaforishift float
      offset from postion defined to leaf origin
            */
    float get_meanleaforishift() const;
    void set_meanleaforishift(const float& meanleaforishift);

    /*fringe float
      fringe, algorithm of circum rectangular simplify*/
    float get_fringe() const;
    void set_fringe(const float& fringe);

    /*mcpholeafmaplist varchar
      说明：嵌套结构体mcpholeafmaplis filepath
            */
    std::string get_mcpholeafmaplist() const;
    void set_mcpholeafmaplist(const std::string& mcpholeafmaplist);

    /*mcphoparam1 varchar
      备用字段*/
    std::string get_mcphoparam1() const;
    void set_mcphoparam1(const std::string& mcphoparam1);

    /*mcphoparam2 varchar
      备用字段*/
    std::string get_mcphoparam2() const;
    void set_mcphoparam2(const std::string& mcphoparam2);

    /*mcphoparam3 varchar
      备用字段*/
    std::string get_mcphoparam3() const;
    void set_mcphoparam3(const std::string& mcphoparam3);

    /*mcphoparam4 varchar
      备用字段*/
    std::string get_mcphoparam4() const;
    void set_mcphoparam4(const std::string& mcphoparam4);

    /*mcphoparam5 varchar
      备用字段*/
    std::string get_mcphoparam5() const;
    void set_mcphoparam5(const std::string& mcphoparam5);

    /*mcphoparam6 varchar
      备用字段*/
    std::string get_mcphoparam6() const;
    void set_mcphoparam6(const std::string& mcphoparam6);

    /*mcphoparam7 varchar
      备用字段*/
    std::string get_mcphoparam7() const;
    void set_mcphoparam7(const std::string& mcphoparam7);

    /*mcphoparam8 varchar
      备用字段*/
    std::string get_mcphoparam8() const;
    void set_mcphoparam8(const std::string& mcphoparam8);

    /*mcphoparam9 varchar
      备用字段*/
    std::string get_mcphoparam9() const;
    void set_mcphoparam9(const std::string& mcphoparam9);

    /*mcphoparam10 varchar
      备用字段*/
    std::string get_mcphoparam10() const;
    void set_mcphoparam10(const std::string& mcphoparam10);

    /*mcprimaryenergystart float
      主源——起始能量*/
    float get_mcprimaryenergystart() const;
    void set_mcprimaryenergystart(const float& mcprimaryenergystart);

    /*mcprimaryenergyend float
      主源——截止能量*/
    float get_mcprimaryenergyend() const;
    void set_mcprimaryenergyend(const float& mcprimaryenergyend);

    /*mcprimaryenergybin int
      主源——能量分段数*/
    int get_mcprimaryenergybin() const;
    void set_mcprimaryenergybin(const int& mcprimaryenergybin);

    /*mcprimaryenergyrestart float
      主源——重启能量*/
    float get_mcprimaryenergyrestart() const;
    void set_mcprimaryenergyrestart(const float& mcprimaryenergyrestart);

    /*mcsecondaryenergystart float
      次级源——起始能量*/
    float get_mcsecondaryenergystart() const;
    void set_mcsecondaryenergystart(const float& mcsecondaryenergystart);

    /*mcsecondaryenergyend float
      次级源——截止能量*/
    float get_mcsecondaryenergyend() const;
    void set_mcsecondaryenergyend(const float& mcsecondaryenergyend);

    /*mcsecondaryenergybin int
      次级源——能量分段数*/
    int get_mcsecondaryenergybin() const;
    void set_mcsecondaryenergybin(const int& mcsecondaryenergybin);

    /*mcsecondaryenergyrestart float
      次级源——重启能量*/
    float get_mcsecondaryenergyrestart() const;
    void set_mcsecondaryenergyrestart(const float& mcsecondaryenergyrestart);

    /*mcelectronenergy float
      电子源——能量*/
    float get_mcelectronenergy() const;
    void set_mcelectronenergy(const float& mcelectronenergy);

    /*mccommiparticlenumber bigint
      模拟光子个数*/
    long long get_mccommiparticlenumber() const;
    void set_mccommiparticlenumber(const long long& mccommiparticlenumber);

    /*mcprimaryenergylist blob
      主源能谱能量*/
    std::string get_mcprimaryenergylist() const;
    void set_mcprimaryenergylist(const std::string& mcprimaryenergylist);

    /*mcprimaryweightlist blob
      主源能谱权重*/
    std::string get_mcprimaryweightlist() const;
    void set_mcprimaryweightlist(const std::string& mcprimaryweightlist);

    /*mcsecondaryenergylist blob
      次级源能谱能量*/
    std::string get_mcsecondaryenergylist() const;
    void set_mcsecondaryenergylist(const std::string& mcsecondaryenergylist);

    /*mcsecondaryweightlist blob
      次级源能谱权重*/
    std::string get_mcsecondaryweightlist() const;
    void set_mcsecondaryweightlist(const std::string& mcsecondaryweightlist);

    /*mcelecenergylist blob
      电子源能谱能量*/
    std::string get_mcelecenergylist() const;
    void set_mcelecenergylist(const std::string& mcelecenergylist);

    /*mcelecweightlist blob
      电子源能谱权重*/
    std::string get_mcelecweightlist() const;
    void set_mcelecweightlist(const std::string& mcelecweightlist);

    /*mcprimaryflatfilterdist float
      filter到主源的距离*/
    float get_mcprimaryflatfilterdist() const;
    void set_mcprimaryflatfilterdist(const float& mcprimaryflatfilterdist);

    /*mcprimaryjawdistance float
      Jaw到主源距离*/
    float get_mcprimaryjawdistance() const;
    void set_mcprimaryjawdistance(const float& mcprimaryjawdistance);

    /*mcsourcesigmaprimary float
      初级源束斑大小*/
    float get_mcsourcesigmaprimary() const;
    void set_mcsourcesigmaprimary(const float& mcsourcesigmaprimary);

    /*mcsourcesigmasecondary float
      次级源束斑大小*/
    float get_mcsourcesigmasecondary() const;
    void set_mcsourcesigmasecondary(const float& mcsourcesigmasecondary);

    /*mcprimarysoftening tinyint
      离轴软化开关*/
    bool get_mcprimarysoftening() const;
    void set_mcprimarysoftening(const bool& mcprimarysoftening);

    /*mcsofteningtunningf float
      离轴软化参数大小*/
    float get_mcsofteningtunningf() const;
    void set_mcsofteningtunningf(const float& mcsofteningtunningf);

    /*mcscatteringcompton tinyint
      filter康普顿散射开关*/
    bool get_mcscatteringcompton() const;
    void set_mcscatteringcompton(const bool& mcscatteringcompton);

    /*mcsecondarysourcetype int
      次级源分布类型*/
    int get_mcsecondarysourcetype() const;
    void set_mcsecondarysourcetype(const int& mcsecondarysourcetype);

    /*mcsecondarysourcepara blob
      次级源分布参数*/
    std::string get_mcsecondarysourcepara() const;
    void set_mcsecondarysourcepara(const std::string& mcsecondarysourcepara);

    /*mceleccorfieldsize blob
      电子污染修正—射野大小*/
    std::string get_mceleccorfieldsize() const;
    void set_mceleccorfieldsize(const std::string& mceleccorfieldsize);

    /*mcphotonfluence blob
      电子污染修正—修正系数*/
    std::string get_mcphotonfluence() const;
    void set_mcphotonfluence(const std::string& mcphotonfluence);

    /*mcrectanglescacor float
      非方野散射修正*/
    float get_mcrectanglescacor() const;
    void set_mcrectanglescacor(const float& mcrectanglescacor);

    /*mclargefieldtailcor float
      大野野外剂量修正*/
    float get_mclargefieldtailcor() const;
    void set_mclargefieldtailcor(const float& mclargefieldtailcor);

    /*mcmlcleakage float
      MLC漏射系数*/
    float get_mcmlcleakage() const;
    void set_mcmlcleakage(const float& mcmlcleakage);

    /*mcgaussianblurswitch tinyint
      高斯模糊开关*/
    bool get_mcgaussianblurswitch() const;
    void set_mcgaussianblurswitch(const bool& mcgaussianblurswitch);

    /*mcgaussiansigmax float
      高斯模糊—X方向系数*/
    float get_mcgaussiansigmax() const;
    void set_mcgaussiansigmax(const float& mcgaussiansigmax);

    /*mcgaussiansigmay float
      高斯模糊—Y方向系数*/
    float get_mcgaussiansigmay() const;
    void set_mcgaussiansigmay(const float& mcgaussiansigmay);

    /*crc varchar
      crc校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*mcjawleakage float
      Jaw漏射系数*/
    float get_mcjawleakage() const;
    void set_mcjawleakage(const float& mcjawleakage);

    /*mctonguewidth float
      Tongue宽度*/
    float get_mctonguewidth() const;
    void set_mctonguewidth(const float& mctonguewidth);

    /*mcgroovewidth float
      Groove宽度*/
    float get_mcgroovewidth() const;
    void set_mcgroovewidth(const float& mcgroovewidth);

    /*mcleaftipwidth float
      LeafTip宽度*/
    float get_mcleaftipwidth() const;
    void set_mcleaftipwidth(const float& mcleaftipwidth);

    /*mctransmission float
      Transmission系数*/
    float get_mctransmission() const;
    void set_mctransmission(const float& mctransmission);

    /*reserve varchar
      预留*/
    std::string get_reserve() const;
    void set_reserve(const std::string& reserve);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtMcphocommissionedunitImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtMcphocommissionedunitImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtMcphocommissionedunitImp(bool bGeneraterUid = false);

    virtual ~RtMcphocommissionedunitImp();

    RtMcphocommissionedunitImp(const RtMcphocommissionedunitImp& mcphocommissionedunit);

    RtMcphocommissionedunitImp& operator = (const RtMcphocommissionedunitImp& mcphocommissionedunit);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //mcphoxjawupposition
    inline float get_mcphoxjawupposition() const { return m_mcphoxjawupposition;}
    inline void set_mcphoxjawupposition(const float& mcphoxjawupposition) { m_mcphoxjawupposition = mcphoxjawupposition;}

    //mcphoxjawthickness
    inline float get_mcphoxjawthickness() const { return m_mcphoxjawthickness;}
    inline void set_mcphoxjawthickness(const float& mcphoxjawthickness) { m_mcphoxjawthickness = mcphoxjawthickness;}

    //mcphoyjawupposition
    inline float get_mcphoyjawupposition() const { return m_mcphoyjawupposition;}
    inline void set_mcphoyjawupposition(const float& mcphoyjawupposition) { m_mcphoyjawupposition = mcphoyjawupposition;}

    //mcphoyjawthickness
    inline float get_mcphoyjawthickness() const { return m_mcphoyjawthickness;}
    inline void set_mcphoyjawthickness(const float& mcphoyjawthickness) { m_mcphoyjawthickness = mcphoyjawthickness;}

    //mcphomlccenterposition
    inline float get_mcphomlccenterposition() const { return m_mcphomlccenterposition;}
    inline void set_mcphomlccenterposition(const float& mcphomlccenterposition) { m_mcphomlccenterposition = mcphomlccenterposition;}

    //mcphomlcthickness
    inline float get_mcphomlcthickness() const { return m_mcphomlcthickness;}
    inline void set_mcphomlcthickness(const float& mcphomlcthickness) { m_mcphomlcthickness = mcphomlcthickness;}

    //mcphomlctgwidth
    inline float get_mcphomlctgwidth() const { return m_mcphomlctgwidth;}
    inline void set_mcphomlctgwidth(const float& mcphomlctgwidth) { m_mcphomlctgwidth = mcphomlctgwidth;}

    //mcphomlcairgapwidth
    inline float get_mcphomlcairgapwidth() const { return m_mcphomlcairgapwidth;}
    inline void set_mcphomlcairgapwidth(const float& mcphomlcairgapwidth) { m_mcphomlcairgapwidth = mcphomlcairgapwidth;}

    //mcphomlleafendradius
    inline float get_mcphomlleafendradius() const { return m_mcphomlleafendradius;}
    inline void set_mcphomlleafendradius(const float& mcphomlleafendradius) { m_mcphomlleafendradius = mcphomlleafendradius;}

    //mcphomufactor
    inline float get_mcphomufactor() const { return m_mcphomufactor;}
    inline void set_mcphomufactor(const float& mcphomufactor) { m_mcphomufactor = mcphomufactor;}

    //mcpholist
    inline std::string get_mcpholist() const { return m_mcpholist;}
    inline void set_mcpholist(const std::string& mcpholist) { m_mcpholist = mcpholist;}

    //phspdistancefromtarget
    inline float get_phspdistancefromtarget() const { return m_phspdistancefromtarget;}
    inline void set_phspdistancefromtarget(const float& phspdistancefromtarget) { m_phspdistancefromtarget = phspdistancefromtarget;}

    //mcphonorm10x10
    inline float get_mcphonorm10x10() const { return m_mcphonorm10x10;}
    inline void set_mcphonorm10x10(const float& mcphonorm10x10) { m_mcphonorm10x10 = mcphonorm10x10;}

    //mcphoabscorrectionfactor
    inline std::string get_mcphoabscorrectionfactor() const { return m_mcphoabscorrectionfactor;}
    inline void set_mcphoabscorrectionfactor(const std::string& mcphoabscorrectionfactor) { m_mcphoabscorrectionfactor = mcphoabscorrectionfactor;}

    //mcphoenergy
    inline std::string get_mcphoenergy() const { return m_mcphoenergy;}
    inline void set_mcphoenergy(const std::string& mcphoenergy) { m_mcphoenergy = mcphoenergy;}

    //phoflulist
    inline std::string get_phoflulist() const { return m_phoflulist;}
    inline void set_phoflulist(const std::string& phoflulist) { m_phoflulist = phoflulist;}

    //eneoffaxisradiusveclist
    inline std::string get_eneoffaxisradiusveclist() const { return m_eneoffaxisradiusveclist;}
    inline void set_eneoffaxisradiusveclist(const std::string& eneoffaxisradiusveclist) { m_eneoffaxisradiusveclist = eneoffaxisradiusveclist;}

    //eneoffaxisenergyvec
    inline std::string get_eneoffaxisenergyvec() const { return m_eneoffaxisenergyvec;}
    inline void set_eneoffaxisenergyvec(const std::string& eneoffaxisenergyvec) { m_eneoffaxisenergyvec = eneoffaxisenergyvec;}

    //eneoffaxisvaluelist
    inline std::string get_eneoffaxisvaluelist() const { return m_eneoffaxisvaluelist;}
    inline void set_eneoffaxisvaluelist(const std::string& eneoffaxisvaluelist) { m_eneoffaxisvaluelist = eneoffaxisvaluelist;}

    //mcphoon
    inline int get_mcphoon() const { return m_mcphoon;}
    inline void set_mcphoon(const int& mcphoon) { m_mcphoon = mcphoon;}

    //mcphodm
    inline float get_mcphodm() const { return m_mcphodm;}
    inline void set_mcphodm(const float& mcphodm) { m_mcphodm = mcphodm;}

    //mcphoc1
    inline float get_mcphoc1() const { return m_mcphoc1;}
    inline void set_mcphoc1(const float& mcphoc1) { m_mcphoc1 = mcphoc1;}

    //mcphoc2
    inline float get_mcphoc2() const { return m_mcphoc2;}
    inline void set_mcphoc2(const float& mcphoc2) { m_mcphoc2 = mcphoc2;}

    //mcphoc3
    inline float get_mcphoc3() const { return m_mcphoc3;}
    inline void set_mcphoc3(const float& mcphoc3) { m_mcphoc3 = mcphoc3;}

    //mcphoffs10
    inline float get_mcphoffs10() const { return m_mcphoffs10;}
    inline void set_mcphoffs10(const float& mcphoffs10) { m_mcphoffs10 = mcphoffs10;}

    //mcphok
    inline float get_mcphok() const { return m_mcphok;}
    inline void set_mcphok(const float& mcphok) { m_mcphok = mcphok;}

    //mcphoa
    inline float get_mcphoa() const { return m_mcphoa;}
    inline void set_mcphoa(const float& mcphoa) { m_mcphoa = mcphoa;}

    //mcphodf
    inline float get_mcphodf() const { return m_mcphodf;}
    inline void set_mcphodf(const float& mcphodf) { m_mcphodf = mcphodf;}

    //mcphosf
    inline float get_mcphosf() const { return m_mcphosf;}
    inline void set_mcphosf(const float& mcphosf) { m_mcphosf = mcphosf;}

    //mlcleafshapenum
    inline int get_mlcleafshapenum() const { return m_mlcleafshapenum;}
    inline void set_mlcleafshapenum(const int& mlcleafshapenum) { m_mlcleafshapenum = mlcleafshapenum;}

    //mlcleafyleafposlist
    inline std::string get_mlcleafyleafposlist() const { return m_mlcleafyleafposlist;}
    inline void set_mlcleafyleafposlist(const std::string& mlcleafyleafposlist) { m_mlcleafyleafposlist = mlcleafyleafposlist;}

    //mlcleafthetalist
    inline std::string get_mlcleafthetalist() const { return m_mlcleafthetalist;}
    inline void set_mlcleafthetalist(const std::string& mlcleafthetalist) { m_mlcleafthetalist = mlcleafthetalist;}

    //mlcleafshapeidxlist
    inline std::string get_mlcleafshapeidxlist() const { return m_mlcleafshapeidxlist;}
    inline void set_mlcleafshapeidxlist(const std::string& mlcleafshapeidxlist) { m_mlcleafshapeidxlist = mlcleafshapeidxlist;}

    //meanleaforishift
    inline float get_meanleaforishift() const { return m_meanleaforishift;}
    inline void set_meanleaforishift(const float& meanleaforishift) { m_meanleaforishift = meanleaforishift;}

    //fringe
    inline float get_fringe() const { return m_fringe;}
    inline void set_fringe(const float& fringe) { m_fringe = fringe;}

    //mcpholeafmaplist
    inline std::string get_mcpholeafmaplist() const { return m_mcpholeafmaplist;}
    inline void set_mcpholeafmaplist(const std::string& mcpholeafmaplist) { m_mcpholeafmaplist = mcpholeafmaplist;}

    //mcphoparam1
    inline std::string get_mcphoparam1() const { return m_mcphoparam1;}
    inline void set_mcphoparam1(const std::string& mcphoparam1) { m_mcphoparam1 = mcphoparam1;}

    //mcphoparam2
    inline std::string get_mcphoparam2() const { return m_mcphoparam2;}
    inline void set_mcphoparam2(const std::string& mcphoparam2) { m_mcphoparam2 = mcphoparam2;}

    //mcphoparam3
    inline std::string get_mcphoparam3() const { return m_mcphoparam3;}
    inline void set_mcphoparam3(const std::string& mcphoparam3) { m_mcphoparam3 = mcphoparam3;}

    //mcphoparam4
    inline std::string get_mcphoparam4() const { return m_mcphoparam4;}
    inline void set_mcphoparam4(const std::string& mcphoparam4) { m_mcphoparam4 = mcphoparam4;}

    //mcphoparam5
    inline std::string get_mcphoparam5() const { return m_mcphoparam5;}
    inline void set_mcphoparam5(const std::string& mcphoparam5) { m_mcphoparam5 = mcphoparam5;}

    //mcphoparam6
    inline std::string get_mcphoparam6() const { return m_mcphoparam6;}
    inline void set_mcphoparam6(const std::string& mcphoparam6) { m_mcphoparam6 = mcphoparam6;}

    //mcphoparam7
    inline std::string get_mcphoparam7() const { return m_mcphoparam7;}
    inline void set_mcphoparam7(const std::string& mcphoparam7) { m_mcphoparam7 = mcphoparam7;}

    //mcphoparam8
    inline std::string get_mcphoparam8() const { return m_mcphoparam8;}
    inline void set_mcphoparam8(const std::string& mcphoparam8) { m_mcphoparam8 = mcphoparam8;}

    //mcphoparam9
    inline std::string get_mcphoparam9() const { return m_mcphoparam9;}
    inline void set_mcphoparam9(const std::string& mcphoparam9) { m_mcphoparam9 = mcphoparam9;}

    //mcphoparam10
    inline std::string get_mcphoparam10() const { return m_mcphoparam10;}
    inline void set_mcphoparam10(const std::string& mcphoparam10) { m_mcphoparam10 = mcphoparam10;}

    //mcprimaryenergystart
    inline float get_mcprimaryenergystart() const { return m_mcprimaryenergystart;}
    inline void set_mcprimaryenergystart(const float& mcprimaryenergystart) { m_mcprimaryenergystart = mcprimaryenergystart;}

    //mcprimaryenergyend
    inline float get_mcprimaryenergyend() const { return m_mcprimaryenergyend;}
    inline void set_mcprimaryenergyend(const float& mcprimaryenergyend) { m_mcprimaryenergyend = mcprimaryenergyend;}

    //mcprimaryenergybin
    inline int get_mcprimaryenergybin() const { return m_mcprimaryenergybin;}
    inline void set_mcprimaryenergybin(const int& mcprimaryenergybin) { m_mcprimaryenergybin = mcprimaryenergybin;}

    //mcprimaryenergyrestart
    inline float get_mcprimaryenergyrestart() const { return m_mcprimaryenergyrestart;}
    inline void set_mcprimaryenergyrestart(const float& mcprimaryenergyrestart) { m_mcprimaryenergyrestart = mcprimaryenergyrestart;}

    //mcsecondaryenergystart
    inline float get_mcsecondaryenergystart() const { return m_mcsecondaryenergystart;}
    inline void set_mcsecondaryenergystart(const float& mcsecondaryenergystart) { m_mcsecondaryenergystart = mcsecondaryenergystart;}

    //mcsecondaryenergyend
    inline float get_mcsecondaryenergyend() const { return m_mcsecondaryenergyend;}
    inline void set_mcsecondaryenergyend(const float& mcsecondaryenergyend) { m_mcsecondaryenergyend = mcsecondaryenergyend;}

    //mcsecondaryenergybin
    inline int get_mcsecondaryenergybin() const { return m_mcsecondaryenergybin;}
    inline void set_mcsecondaryenergybin(const int& mcsecondaryenergybin) { m_mcsecondaryenergybin = mcsecondaryenergybin;}

    //mcsecondaryenergyrestart
    inline float get_mcsecondaryenergyrestart() const { return m_mcsecondaryenergyrestart;}
    inline void set_mcsecondaryenergyrestart(const float& mcsecondaryenergyrestart) { m_mcsecondaryenergyrestart = mcsecondaryenergyrestart;}

    //mcelectronenergy
    inline float get_mcelectronenergy() const { return m_mcelectronenergy;}
    inline void set_mcelectronenergy(const float& mcelectronenergy) { m_mcelectronenergy = mcelectronenergy;}

    //mccommiparticlenumber
    inline long long get_mccommiparticlenumber() const { return m_mccommiparticlenumber;}
    inline void set_mccommiparticlenumber(const long long& mccommiparticlenumber) { m_mccommiparticlenumber = mccommiparticlenumber;}

    //mcprimaryenergylist
    inline std::string get_mcprimaryenergylist() const { return m_mcprimaryenergylist;}
    inline void set_mcprimaryenergylist(const std::string& mcprimaryenergylist) { m_mcprimaryenergylist = mcprimaryenergylist;}

    //mcprimaryweightlist
    inline std::string get_mcprimaryweightlist() const { return m_mcprimaryweightlist;}
    inline void set_mcprimaryweightlist(const std::string& mcprimaryweightlist) { m_mcprimaryweightlist = mcprimaryweightlist;}

    //mcsecondaryenergylist
    inline std::string get_mcsecondaryenergylist() const { return m_mcsecondaryenergylist;}
    inline void set_mcsecondaryenergylist(const std::string& mcsecondaryenergylist) { m_mcsecondaryenergylist = mcsecondaryenergylist;}

    //mcsecondaryweightlist
    inline std::string get_mcsecondaryweightlist() const { return m_mcsecondaryweightlist;}
    inline void set_mcsecondaryweightlist(const std::string& mcsecondaryweightlist) { m_mcsecondaryweightlist = mcsecondaryweightlist;}

    //mcelecenergylist
    inline std::string get_mcelecenergylist() const { return m_mcelecenergylist;}
    inline void set_mcelecenergylist(const std::string& mcelecenergylist) { m_mcelecenergylist = mcelecenergylist;}

    //mcelecweightlist
    inline std::string get_mcelecweightlist() const { return m_mcelecweightlist;}
    inline void set_mcelecweightlist(const std::string& mcelecweightlist) { m_mcelecweightlist = mcelecweightlist;}

    //mcprimaryflatfilterdist
    inline float get_mcprimaryflatfilterdist() const { return m_mcprimaryflatfilterdist;}
    inline void set_mcprimaryflatfilterdist(const float& mcprimaryflatfilterdist) { m_mcprimaryflatfilterdist = mcprimaryflatfilterdist;}

    //mcprimaryjawdistance
    inline float get_mcprimaryjawdistance() const { return m_mcprimaryjawdistance;}
    inline void set_mcprimaryjawdistance(const float& mcprimaryjawdistance) { m_mcprimaryjawdistance = mcprimaryjawdistance;}

    //mcsourcesigmaprimary
    inline float get_mcsourcesigmaprimary() const { return m_mcsourcesigmaprimary;}
    inline void set_mcsourcesigmaprimary(const float& mcsourcesigmaprimary) { m_mcsourcesigmaprimary = mcsourcesigmaprimary;}

    //mcsourcesigmasecondary
    inline float get_mcsourcesigmasecondary() const { return m_mcsourcesigmasecondary;}
    inline void set_mcsourcesigmasecondary(const float& mcsourcesigmasecondary) { m_mcsourcesigmasecondary = mcsourcesigmasecondary;}

    //mcprimarysoftening
    inline bool get_mcprimarysoftening() const { return m_mcprimarysoftening;}
    inline void set_mcprimarysoftening(const bool& mcprimarysoftening) { m_mcprimarysoftening = mcprimarysoftening;}

    //mcsofteningtunningf
    inline float get_mcsofteningtunningf() const { return m_mcsofteningtunningf;}
    inline void set_mcsofteningtunningf(const float& mcsofteningtunningf) { m_mcsofteningtunningf = mcsofteningtunningf;}

    //mcscatteringcompton
    inline bool get_mcscatteringcompton() const { return m_mcscatteringcompton;}
    inline void set_mcscatteringcompton(const bool& mcscatteringcompton) { m_mcscatteringcompton = mcscatteringcompton;}

    //mcsecondarysourcetype
    inline int get_mcsecondarysourcetype() const { return m_mcsecondarysourcetype;}
    inline void set_mcsecondarysourcetype(const int& mcsecondarysourcetype) { m_mcsecondarysourcetype = mcsecondarysourcetype;}

    //mcsecondarysourcepara
    inline std::string get_mcsecondarysourcepara() const { return m_mcsecondarysourcepara;}
    inline void set_mcsecondarysourcepara(const std::string& mcsecondarysourcepara) { m_mcsecondarysourcepara = mcsecondarysourcepara;}

    //mceleccorfieldsize
    inline std::string get_mceleccorfieldsize() const { return m_mceleccorfieldsize;}
    inline void set_mceleccorfieldsize(const std::string& mceleccorfieldsize) { m_mceleccorfieldsize = mceleccorfieldsize;}

    //mcphotonfluence
    inline std::string get_mcphotonfluence() const { return m_mcphotonfluence;}
    inline void set_mcphotonfluence(const std::string& mcphotonfluence) { m_mcphotonfluence = mcphotonfluence;}

    //mcrectanglescacor
    inline float get_mcrectanglescacor() const { return m_mcrectanglescacor;}
    inline void set_mcrectanglescacor(const float& mcrectanglescacor) { m_mcrectanglescacor = mcrectanglescacor;}

    //mclargefieldtailcor
    inline float get_mclargefieldtailcor() const { return m_mclargefieldtailcor;}
    inline void set_mclargefieldtailcor(const float& mclargefieldtailcor) { m_mclargefieldtailcor = mclargefieldtailcor;}

    //mcmlcleakage
    inline float get_mcmlcleakage() const { return m_mcmlcleakage;}
    inline void set_mcmlcleakage(const float& mcmlcleakage) { m_mcmlcleakage = mcmlcleakage;}

    //mcgaussianblurswitch
    inline bool get_mcgaussianblurswitch() const { return m_mcgaussianblurswitch;}
    inline void set_mcgaussianblurswitch(const bool& mcgaussianblurswitch) { m_mcgaussianblurswitch = mcgaussianblurswitch;}

    //mcgaussiansigmax
    inline float get_mcgaussiansigmax() const { return m_mcgaussiansigmax;}
    inline void set_mcgaussiansigmax(const float& mcgaussiansigmax) { m_mcgaussiansigmax = mcgaussiansigmax;}

    //mcgaussiansigmay
    inline float get_mcgaussiansigmay() const { return m_mcgaussiansigmay;}
    inline void set_mcgaussiansigmay(const float& mcgaussiansigmay) { m_mcgaussiansigmay = mcgaussiansigmay;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //mcjawleakage
    inline float get_mcjawleakage() const { return m_mcjawleakage;}
    inline void set_mcjawleakage(const float& mcjawleakage) { m_mcjawleakage = mcjawleakage;}

    //mctonguewidth
    inline float get_mctonguewidth() const { return m_mctonguewidth;}
    inline void set_mctonguewidth(const float& mctonguewidth) { m_mctonguewidth = mctonguewidth;}

    //mcgroovewidth
    inline float get_mcgroovewidth() const { return m_mcgroovewidth;}
    inline void set_mcgroovewidth(const float& mcgroovewidth) { m_mcgroovewidth = mcgroovewidth;}

    //mcleaftipwidth
    inline float get_mcleaftipwidth() const { return m_mcleaftipwidth;}
    inline void set_mcleaftipwidth(const float& mcleaftipwidth) { m_mcleaftipwidth = mcleaftipwidth;}

    //mctransmission
    inline float get_mctransmission() const { return m_mctransmission;}
    inline void set_mctransmission(const float& mctransmission) { m_mctransmission = mctransmission;}

    //reserve
    inline std::string get_reserve() const { return m_reserve;}
    inline void set_reserve(const std::string& reserve) { m_reserve = reserve;}

private:    //89 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoxjawupposition);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoxjawthickness);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoyjawupposition);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoyjawthickness);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomlccenterposition);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomlcthickness);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomlctgwidth);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomlcairgapwidth);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomlleafendradius);
		ar & BOOST_SERIALIZATION_NVP(m_mcphomufactor);
		ar & BOOST_SERIALIZATION_NVP(m_mcpholist);
		ar & BOOST_SERIALIZATION_NVP(m_phspdistancefromtarget);
		ar & BOOST_SERIALIZATION_NVP(m_mcphonorm10x10);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoabscorrectionfactor);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoenergy);
		ar & BOOST_SERIALIZATION_NVP(m_phoflulist);
		ar & BOOST_SERIALIZATION_NVP(m_eneoffaxisradiusveclist);
		ar & BOOST_SERIALIZATION_NVP(m_eneoffaxisenergyvec);
		ar & BOOST_SERIALIZATION_NVP(m_eneoffaxisvaluelist);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoon);
		ar & BOOST_SERIALIZATION_NVP(m_mcphodm);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoc1);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoc2);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoc3);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoffs10);
		ar & BOOST_SERIALIZATION_NVP(m_mcphok);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoa);
		ar & BOOST_SERIALIZATION_NVP(m_mcphodf);
		ar & BOOST_SERIALIZATION_NVP(m_mcphosf);
		ar & BOOST_SERIALIZATION_NVP(m_mlcleafshapenum);
		ar & BOOST_SERIALIZATION_NVP(m_mlcleafyleafposlist);
		ar & BOOST_SERIALIZATION_NVP(m_mlcleafthetalist);
		ar & BOOST_SERIALIZATION_NVP(m_mlcleafshapeidxlist);
		ar & BOOST_SERIALIZATION_NVP(m_meanleaforishift);
		ar & BOOST_SERIALIZATION_NVP(m_fringe);
		ar & BOOST_SERIALIZATION_NVP(m_mcpholeafmaplist);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam1);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam2);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam3);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam4);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam5);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam6);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam7);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam8);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam9);
		ar & BOOST_SERIALIZATION_NVP(m_mcphoparam10);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryenergystart);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryenergyend);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryenergybin);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryenergyrestart);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryenergystart);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryenergyend);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryenergybin);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryenergyrestart);
		ar & BOOST_SERIALIZATION_NVP(m_mcelectronenergy);
		ar & BOOST_SERIALIZATION_NVP(m_mccommiparticlenumber);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryenergylist);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryweightlist);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryenergylist);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondaryweightlist);
		ar & BOOST_SERIALIZATION_NVP(m_mcelecenergylist);
		ar & BOOST_SERIALIZATION_NVP(m_mcelecweightlist);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryflatfilterdist);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimaryjawdistance);
		ar & BOOST_SERIALIZATION_NVP(m_mcsourcesigmaprimary);
		ar & BOOST_SERIALIZATION_NVP(m_mcsourcesigmasecondary);
		ar & BOOST_SERIALIZATION_NVP(m_mcprimarysoftening);
		ar & BOOST_SERIALIZATION_NVP(m_mcsofteningtunningf);
		ar & BOOST_SERIALIZATION_NVP(m_mcscatteringcompton);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondarysourcetype);
		ar & BOOST_SERIALIZATION_NVP(m_mcsecondarysourcepara);
		ar & BOOST_SERIALIZATION_NVP(m_mceleccorfieldsize);
		ar & BOOST_SERIALIZATION_NVP(m_mcphotonfluence);
		ar & BOOST_SERIALIZATION_NVP(m_mcrectanglescacor);
		ar & BOOST_SERIALIZATION_NVP(m_mclargefieldtailcor);
		ar & BOOST_SERIALIZATION_NVP(m_mcmlcleakage);
		ar & BOOST_SERIALIZATION_NVP(m_mcgaussianblurswitch);
		ar & BOOST_SERIALIZATION_NVP(m_mcgaussiansigmax);
		ar & BOOST_SERIALIZATION_NVP(m_mcgaussiansigmay);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
		ar & BOOST_SERIALIZATION_NVP(m_mcjawleakage);
		ar & BOOST_SERIALIZATION_NVP(m_mctonguewidth);
		ar & BOOST_SERIALIZATION_NVP(m_mcgroovewidth);
		ar & BOOST_SERIALIZATION_NVP(m_mcleaftipwidth);
		ar & BOOST_SERIALIZATION_NVP(m_mctransmission);
		ar & BOOST_SERIALIZATION_NVP(m_reserve);
	}
    std::string						m_uid;
    std::string						m_commissionedunituid;
    float							m_mcphoxjawupposition;
    float							m_mcphoxjawthickness;
    float							m_mcphoyjawupposition;
    float							m_mcphoyjawthickness;
    float							m_mcphomlccenterposition;
    float							m_mcphomlcthickness;
    float							m_mcphomlctgwidth;
    float							m_mcphomlcairgapwidth;
    float							m_mcphomlleafendradius;
    float							m_mcphomufactor;
    std::string						m_mcpholist;
    float							m_phspdistancefromtarget;
    float							m_mcphonorm10x10;
    std::string						m_mcphoabscorrectionfactor;
    std::string						m_mcphoenergy;
    std::string						m_phoflulist;
    std::string						m_eneoffaxisradiusveclist;
    std::string						m_eneoffaxisenergyvec;
    std::string						m_eneoffaxisvaluelist;
    int								m_mcphoon;
    float							m_mcphodm;
    float							m_mcphoc1;
    float							m_mcphoc2;
    float							m_mcphoc3;
    float							m_mcphoffs10;
    float							m_mcphok;
    float							m_mcphoa;
    float							m_mcphodf;
    float							m_mcphosf;
    int								m_mlcleafshapenum;
    std::string						m_mlcleafyleafposlist;
    std::string						m_mlcleafthetalist;
    std::string						m_mlcleafshapeidxlist;
    float							m_meanleaforishift;
    float							m_fringe;
    std::string						m_mcpholeafmaplist;
    std::string						m_mcphoparam1;
    std::string						m_mcphoparam2;
    std::string						m_mcphoparam3;
    std::string						m_mcphoparam4;
    std::string						m_mcphoparam5;
    std::string						m_mcphoparam6;
    std::string						m_mcphoparam7;
    std::string						m_mcphoparam8;
    std::string						m_mcphoparam9;
    std::string						m_mcphoparam10;
    float							m_mcprimaryenergystart;
    float							m_mcprimaryenergyend;
    int								m_mcprimaryenergybin;
    float							m_mcprimaryenergyrestart;
    float							m_mcsecondaryenergystart;
    float							m_mcsecondaryenergyend;
    int								m_mcsecondaryenergybin;
    float							m_mcsecondaryenergyrestart;
    float							m_mcelectronenergy;
    long long						m_mccommiparticlenumber;
    std::string						m_mcprimaryenergylist;
    std::string						m_mcprimaryweightlist;
    std::string						m_mcsecondaryenergylist;
    std::string						m_mcsecondaryweightlist;
    std::string						m_mcelecenergylist;
    std::string						m_mcelecweightlist;
    float							m_mcprimaryflatfilterdist;
    float							m_mcprimaryjawdistance;
    float							m_mcsourcesigmaprimary;
    float							m_mcsourcesigmasecondary;
    bool							m_mcprimarysoftening;
    float							m_mcsofteningtunningf;
    bool							m_mcscatteringcompton;
    int								m_mcsecondarysourcetype;
    std::string						m_mcsecondarysourcepara;
    std::string						m_mceleccorfieldsize;
    std::string						m_mcphotonfluence;
    float							m_mcrectanglescacor;
    float							m_mclargefieldtailcor;
    float							m_mcmlcleakage;
    bool							m_mcgaussianblurswitch;
    float							m_mcgaussiansigmax;
    float							m_mcgaussiansigmay;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
    float							m_mcjawleakage;
    float							m_mctonguewidth;
    float							m_mcgroovewidth;
    float							m_mcleaftipwidth;
    float							m_mctransmission;
    std::string						m_reserve;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif