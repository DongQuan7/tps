//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2015
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016/1/26 10:42:55
///
///  \version 1.0
///  \date    1/27/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_BEAM_ACCESSORY_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_BEAM_ACCESSORY_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtBeam_accessoryImp;

class RT_DB_EXPORT RtBeam_accessory
{
public:

    RtBeam_accessory();

    ~RtBeam_accessory();

    RtBeam_accessory(const RtBeam_accessory& beam_accessory);

    RtBeam_accessory& operator = (const RtBeam_accessory& beam_accessory);

    /*beamuid varchar
      PK FK  related to beam table uid*/
    std::string get_beamuid() const;
    void set_beamuid(const std::string& beamuid);

    /*accessoryuid varchar
      PK FK related to accessory table uid*/
    std::string get_accessoryuid() const;
    void set_accessoryuid(const std::string& accessoryuid);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtBeam_accessoryImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtBeam_accessoryImp
{

public:
    RtBeam_accessoryImp();

    ~RtBeam_accessoryImp();

    RtBeam_accessoryImp(const RtBeam_accessoryImp& beam_accessory);

    RtBeam_accessoryImp& operator = (const RtBeam_accessoryImp& beam_accessory);

    //beamuid
    inline std::string get_beamuid() const { return m_beamuid;}
    inline void set_beamuid(const std::string& beamuid) { m_beamuid = beamuid;}

    //accessoryuid
    inline std::string get_accessoryuid() const { return m_accessoryuid;}
    inline void set_accessoryuid(const std::string& accessoryuid) { m_accessoryuid = accessoryuid;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //3 parameters
    std::string						m_beamuid;
    std::string						m_accessoryuid;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif