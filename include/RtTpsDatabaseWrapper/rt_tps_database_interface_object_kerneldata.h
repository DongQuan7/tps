//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELDATA_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELDATA_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum KERNELDATA_FIELD
{
    KERNELDATA_UID = 0,
    KERNELDATA_ENERGYOFBEAM,
    KERNELDATA_KERNELDATAID,
    KERNELDATA_KERNELDATA,
    KERNELDATA_KERNELDATALENGTH,
    KERNELDATA_CRC,
    KERNELDATA_UPDATETIME,
    KERNELDATA_FIELD_MAX
};

static const char* ENUM2STRING_KERNELDATA_FIELD[] =
{
    "UID",
    "ENERGYOFBEAM",
    "KERNELDATAID",
    "KERNELDATA",
    "KERNELDATALENGTH",
    "CRC",
    "UPDATETIME",
    "KERNELDATA_FIELD_MAX"
};

static const char* ENUM2STRING_KERNELDATA_FIELD_NULL = "1000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtKerneldataImp;

class RT_DB_EXPORT RtKerneldata : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtKerneldata(bool bGeneraterUid = false);

    ~RtKerneldata();

    RtKerneldata(const RtKerneldata& kerneldata);

    RtKerneldata& operator = (const RtKerneldata& kerneldata);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*energyofbeam int
      射线能量，以kev为单位*/
    int get_energyofbeam() const;
    void set_energyofbeam(const int& energyofbeam);

    /*kerneldataid int
      kerneldata的ID*/
    int get_kerneldataid() const;
    void set_kerneldataid(const int& kerneldataid);

    /*kerneldata varchar
      某个能量的KernelData的数据*/
    std::string get_kerneldata() const;
    void set_kerneldata(const std::string& kerneldata);

    /*kerneldatalength int
      某个能量的KernelData的数据长度*/
    int get_kerneldatalength() const;
    void set_kerneldatalength(const int& kerneldatalength);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    //////////////////////////////////////////////////////////////////////////
    std::vector<float> get_kerneldata_list() const;
    void set_kerneldata_list(const std::vector<float>& kernaldata);
private:
    RtKerneldataImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtKerneldataImp
{

public:
    //default is false to improve performance
    RtKerneldataImp(bool bGeneraterUid = false);

    ~RtKerneldataImp();

    RtKerneldataImp(const RtKerneldataImp& kerneldata);

    RtKerneldataImp& operator = (const RtKerneldataImp& kerneldata);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //energyofbeam
    inline int get_energyofbeam() const { return m_energyofbeam;}
    inline void set_energyofbeam(const int& energyofbeam) { m_energyofbeam = energyofbeam;}

    //kerneldataid
    inline int get_kerneldataid() const { return m_kerneldataid;}
    inline void set_kerneldataid(const int& kerneldataid) { m_kerneldataid = kerneldataid;}

    //kerneldata
    inline std::string get_kerneldata() const { return m_kerneldata;}
    inline void set_kerneldata(const std::string& kerneldata) { m_kerneldata = kerneldata;}

    //kerneldatalength
    inline int get_kerneldatalength() const { return m_kerneldatalength;}
    inline void set_kerneldatalength(const int& kerneldatalength) { m_kerneldatalength = kerneldatalength;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //////////////////////////////////////////////////////////////////////////
    inline std::vector<float> get_kerneldata_list() const { return m_vkerneldata;}
    inline void set_kerneldata_list(const std::vector<float>& kernaldata) { m_vkerneldata = kernaldata;}
private:    //7 parameters
    std::string						m_uid;
    int								m_energyofbeam;
    int								m_kerneldataid;
    std::string						m_kerneldata;
    int								m_kerneldatalength;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
	std::vector<float>              m_vkerneldata;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif