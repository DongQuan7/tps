//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_GOLDENSTT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_GOLDENSTT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum GOLDENSTT_FIELD
{
    GOLDENSTT_UID = 0,
    GOLDENSTT_ACCESSORYUID,
    GOLDENSTT_COMMISSIONEDUNITUID,
    GOLDENSTT_WEDGEFACTOR,
    GOLDENSTT_WEDGEANGLE,
    GOLDENSTT_FIXJAWPOS,
    GOLDENSTT_ACCUMULATEDMU,
    GOLDENSTT_CORRECTIONFACTORPENCILBEAM,
    GOLDENSTT_CORRECTIONFACTORCONVOLUTION,
    GOLDENSTT_CORRECTIONFACTORMONTECARLO,
    GOLDENSTT_MOVJAWPOS,
    GOLDENSTT_EXPPARA,
    GOLDENSTT_CRC,
    GOLDENSTT_UPDATETIME,
    GOLDENSTT_FIELD_MAX
};

static const char* ENUM2STRING_GOLDENSTT_FIELD[] =
{
    "UID",
    "ACCESSORYUID",
    "COMMISSIONEDUNITUID",
    "WEDGEFACTOR",
    "WEDGEANGLE",
    "FIXJAWPOS",
    "ACCUMULATEDMU",
    "CORRECTIONFACTORPENCILBEAM",
    "CORRECTIONFACTORCONVOLUTION",
    "CORRECTIONFACTORMONTECARLO",
    "MOVJAWPOS",
    "EXPPARA",
    "CRC",
    "UPDATETIME",
    "GOLDENSTT_FIELD_MAX"
};

static const char* ENUM2STRING_GOLDENSTT_FIELD_NULL = "10000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtGoldensttImp;

class RT_DB_EXPORT RtGoldenstt : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtGoldenstt(bool bGeneraterUid = false);

    ~RtGoldenstt();

    RtGoldenstt(const RtGoldenstt& goldenstt);

    RtGoldenstt& operator = (const RtGoldenstt& goldenstt);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*accessoryuid varchar
      AccessoryUID, the accessory includes informations about wedge angle and wedge field size */
    std::string get_accessoryuid() const;
    void set_accessoryuid(const std::string& accessoryuid);

    /*commissionedunituid varchar
      CommissionedUID, UID of commissioned unit*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*wedgefactor float
       dose ratio of with wedge and none wedge*/
    float get_wedgefactor() const;
    void set_wedgefactor(const float& wedgefactor);

    /*wedgeangle float
       wedge angle*/
    float get_wedgeangle() const;
    void set_wedgeangle(const float& wedgeangle);

    /*fixjawpos float
      position of fixed JAW*/
    float get_fixjawpos() const;
    void set_fixjawpos(const float& fixjawpos);

    /*accumulatedmu varchar
       accumulated MU list in STT*/
    std::string get_accumulatedmu() const;
    void set_accumulatedmu(const std::string& accumulatedmu);

    /*correctionfactorpencilbeam varchar
       correction factor for pencil beam*/
    std::string get_correctionfactorpencilbeam() const;
    void set_correctionfactorpencilbeam(const std::string& correctionfactorpencilbeam);

    /*correctionfactorconvolution varchar
       correction factor for convolution*/
    std::string get_correctionfactorconvolution() const;
    void set_correctionfactorconvolution(const std::string& correctionfactorconvolution);

    /*correctionfactormontecarlo varchar
      correction factor for Monte Carlo*/
    std::string get_correctionfactormontecarlo() const;
    void set_correctionfactormontecarlo(const std::string& correctionfactormontecarlo);

    /*movjawpos varchar
       position list of Moving JAW in STT*/
    std::string get_movjawpos() const;
    void set_movjawpos(const std::string& movjawpos);

    /*exppara varchar
      if Accumulated MU vs Moving Jaw position curve can be fitted by an exponential function,
             then these 3parameter will be used for interpolating*/
    std::string get_exppara() const;
    void set_exppara(const std::string& exppara);

    /*crc varchar
      crc*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtGoldensttImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtGoldensttImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtGoldensttImp(bool bGeneraterUid = false);

    virtual ~RtGoldensttImp();

    RtGoldensttImp(const RtGoldensttImp& goldenstt);

    RtGoldensttImp& operator = (const RtGoldensttImp& goldenstt);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //accessoryuid
    inline std::string get_accessoryuid() const { return m_accessoryuid;}
    inline void set_accessoryuid(const std::string& accessoryuid) { m_accessoryuid = accessoryuid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //wedgefactor
    inline float get_wedgefactor() const { return m_wedgefactor;}
    inline void set_wedgefactor(const float& wedgefactor) { m_wedgefactor = wedgefactor;}

    //wedgeangle
    inline float get_wedgeangle() const { return m_wedgeangle;}
    inline void set_wedgeangle(const float& wedgeangle) { m_wedgeangle = wedgeangle;}

    //fixjawpos
    inline float get_fixjawpos() const { return m_fixjawpos;}
    inline void set_fixjawpos(const float& fixjawpos) { m_fixjawpos = fixjawpos;}

    //accumulatedmu
    inline std::string get_accumulatedmu() const { return m_accumulatedmu;}
    inline void set_accumulatedmu(const std::string& accumulatedmu) { m_accumulatedmu = accumulatedmu;}

    //correctionfactorpencilbeam
    inline std::string get_correctionfactorpencilbeam() const { return m_correctionfactorpencilbeam;}
    inline void set_correctionfactorpencilbeam(const std::string& correctionfactorpencilbeam) { m_correctionfactorpencilbeam = correctionfactorpencilbeam;}

    //correctionfactorconvolution
    inline std::string get_correctionfactorconvolution() const { return m_correctionfactorconvolution;}
    inline void set_correctionfactorconvolution(const std::string& correctionfactorconvolution) { m_correctionfactorconvolution = correctionfactorconvolution;}

    //correctionfactormontecarlo
    inline std::string get_correctionfactormontecarlo() const { return m_correctionfactormontecarlo;}
    inline void set_correctionfactormontecarlo(const std::string& correctionfactormontecarlo) { m_correctionfactormontecarlo = correctionfactormontecarlo;}

    //movjawpos
    inline std::string get_movjawpos() const { return m_movjawpos;}
    inline void set_movjawpos(const std::string& movjawpos) { m_movjawpos = movjawpos;}

    //exppara
    inline std::string get_exppara() const { return m_exppara;}
    inline void set_exppara(const std::string& exppara) { m_exppara = exppara;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //14 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_accessoryuid);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_wedgefactor);
		ar & BOOST_SERIALIZATION_NVP(m_wedgeangle);
		ar & BOOST_SERIALIZATION_NVP(m_fixjawpos);
		ar & BOOST_SERIALIZATION_NVP(m_accumulatedmu);
		ar & BOOST_SERIALIZATION_NVP(m_correctionfactorpencilbeam);
		ar & BOOST_SERIALIZATION_NVP(m_correctionfactorconvolution);
		ar & BOOST_SERIALIZATION_NVP(m_correctionfactormontecarlo);
		ar & BOOST_SERIALIZATION_NVP(m_movjawpos);
		ar & BOOST_SERIALIZATION_NVP(m_exppara);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_uid;
    std::string						m_accessoryuid;
    std::string						m_commissionedunituid;
    float							m_wedgefactor;
    float							m_wedgeangle;
    float							m_fixjawpos;
    std::string						m_accumulatedmu;
    std::string						m_correctionfactorpencilbeam;
    std::string						m_correctionfactorconvolution;
    std::string						m_correctionfactormontecarlo;
    std::string						m_movjawpos;
    std::string						m_exppara;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif