//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_DOSELINE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_DOSELINE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum DOSELINE_FIELD
{
    DOSELINE_UID = 0,
    DOSELINE_PLANUID,
    DOSELINE_DOSERATIO,
    DOSELINE_ISVISIBLE,
    DOSELINE_RED,
    DOSELINE_GREEN,
    DOSELINE_BLUE,
    DOSELINE_ALPHA,
    DOSELINE_ISVISIBLE3D,
    DOSELINE_UPDATETIME,
    DOSELINE_FIELD_MAX
};

static const char* ENUM2STRING_DOSELINE_FIELD[] =
{
    "UID",
    "PLANUID",
    "DOSERATIO",
    "ISVISIBLE",
    "RED",
    "GREEN",
    "BLUE",
    "ALPHA",
    "ISVISIBLE3D",
    "UPDATETIME",
    "DOSELINE_FIELD_MAX"
};

static const char* ENUM2STRING_DOSELINE_FIELD_NULL = "1000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtDoselineImp;

class RT_DB_EXPORT RtDoseline : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtDoseline(bool bGeneraterUid = false);

    ~RtDoseline();

    RtDoseline(const RtDoseline& doseline);

    RtDoseline& operator = (const RtDoseline& doseline);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*planuid varchar
      fk link to plan*/
    std::string get_planuid() const;
    void set_planuid(const std::string& planuid);

    /*doseratio float
      dose ratio*/
    float get_doseratio() const;
    void set_doseratio(const float& doseratio);

    /*isvisible tinyint
      judge is or not visible*/
    bool get_isvisible() const;
    void set_isvisible(const bool& isvisible);

    /*red float
      RGB value red*/
    float get_red() const;
    void set_red(const float& red);

    /*green float
      RGB value green*/
    float get_green() const;
    void set_green(const float& green);

    /*blue float
      RGB value blue */
    float get_blue() const;
    void set_blue(const float& blue);

    /*alpha float
      RGB value alpha*/
    float get_alpha() const;
    void set_alpha(const float& alpha);

    /*isvisible3d tinyint
      表示doseline在3D窗口的可见性。*/
    bool get_isvisible3d() const;
    void set_isvisible3d(const bool& isvisible3d);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtDoselineImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtDoselineImp
{

public:
    //default is false to improve performance
    RtDoselineImp(bool bGeneraterUid = false);

    ~RtDoselineImp();

    RtDoselineImp(const RtDoselineImp& doseline);

    RtDoselineImp& operator = (const RtDoselineImp& doseline);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //planuid
    inline std::string get_planuid() const { return m_planuid;}
    inline void set_planuid(const std::string& planuid) { m_planuid = planuid;}

    //doseratio
    inline float get_doseratio() const { return m_doseratio;}
    inline void set_doseratio(const float& doseratio) { m_doseratio = doseratio;}

    //isvisible
    inline bool get_isvisible() const { return m_isvisible;}
    inline void set_isvisible(const bool& isvisible) { m_isvisible = isvisible;}

    //red
    inline float get_red() const { return m_red;}
    inline void set_red(const float& red) { m_red = red;}

    //green
    inline float get_green() const { return m_green;}
    inline void set_green(const float& green) { m_green = green;}

    //blue
    inline float get_blue() const { return m_blue;}
    inline void set_blue(const float& blue) { m_blue = blue;}

    //alpha
    inline float get_alpha() const { return m_alpha;}
    inline void set_alpha(const float& alpha) { m_alpha = alpha;}

    //isvisible3d
    inline bool get_isvisible3d() const { return m_isvisible3d;}
    inline void set_isvisible3d(const bool& isvisible3d) { m_isvisible3d = isvisible3d;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //10 parameters
    std::string						m_uid;
    std::string						m_planuid;
    float							m_doseratio;
    bool							m_isvisible;
    float							m_red;
    float							m_green;
    float							m_blue;
    float							m_alpha;
    bool							m_isvisible3d;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif