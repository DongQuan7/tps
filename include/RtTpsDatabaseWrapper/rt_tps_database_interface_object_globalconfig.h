//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_GLOBALCONFIG_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_GLOBALCONFIG_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum GLOBALCONFIG_FIELD
{
    GLOBALCONFIG_NAME = 0,
    GLOBALCONFIG_VALUEFILEPATH,
    GLOBALCONFIG_UPDATETIME,
    GLOBALCONFIG_FIELD_MAX
};

static const char* ENUM2STRING_GLOBALCONFIG_FIELD[] =
{
    "NAME",
    "VALUEFILEPATH",
    "UPDATETIME",
    "GLOBALCONFIG_FIELD_MAX"
};

static const char* ENUM2STRING_GLOBALCONFIG_FIELD_NULL = "101";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtGlobalconfigImp;

class RT_DB_EXPORT RtGlobalconfig : public RtDatabaseObject
{
public:

    RtGlobalconfig();

    ~RtGlobalconfig();

    RtGlobalconfig(const RtGlobalconfig& globalconfig);

    RtGlobalconfig& operator = (const RtGlobalconfig& globalconfig);

    /*name varchar
      Name is the key of the configuraiton key value pair.*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*valuefilepath varchar
      Value is the value of the configuraiton key value pair.*/
    std::string get_valuefilepath() const;
    void set_valuefilepath(const std::string& valuefilepath);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtGlobalconfigImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtGlobalconfigImp
{

public:
    RtGlobalconfigImp();

    ~RtGlobalconfigImp();

    RtGlobalconfigImp(const RtGlobalconfigImp& globalconfig);

    RtGlobalconfigImp& operator = (const RtGlobalconfigImp& globalconfig);

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //valuefilepath
    inline std::string get_valuefilepath() const { return m_valuefilepath;}
    inline void set_valuefilepath(const std::string& valuefilepath) { m_valuefilepath = valuefilepath;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //3 parameters
    std::string						m_name;
    std::string						m_valuefilepath;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif