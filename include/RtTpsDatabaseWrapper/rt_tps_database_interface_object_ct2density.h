//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_CT2DENSITY_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_CT2DENSITY_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include <map>

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum CT2DENSITY_FIELD
{
    CT2DENSITY_UID = 0,
    CT2DENSITY_TABLENAME,
    CT2DENSITY_CT2DENSITYVALUE,
    CT2DENSITY_ISDEFAULT,
    CT2DENSITY_UPDATETIME,
    CT2DENSITY_FIELD_MAX
};

static const char* ENUM2STRING_CT2DENSITY_FIELD[] =
{
    "UID",
    "TABLENAME",
    "CT2DENSITYVALUE",
    "ISDEFAULT",
    "UPDATETIME",
    "CT2DENSITY_FIELD_MAX"
};

static const char* ENUM2STRING_CT2DENSITY_FIELD_NULL = "10001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtCt2densityImp;

class RT_DB_EXPORT RtCt2density : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtCt2density(bool bGeneraterUid = false);

    ~RtCt2density();

    RtCt2density(const RtCt2density& ct2density);

    RtCt2density& operator = (const RtCt2density& ct2density);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*tablename varchar
      CT密度值对应关系表的名称*/
    std::string get_tablename() const;
    void set_tablename(const std::string& tablename);

    /*ct2densityvalue varchar
      CT密度值对应关系表序列化后存储成文件的路径*/
    const std::map<int, float>& get_ct2densitymap() const;
    void set_ct2densitymap(const std::map<int, float>& ct2densityMap);
    const float* get_ct2densitybuffer() const;

    // 电子密度 add by wzd 2017-03-30
    const std::map<int, float>& get_ct2referencedensitymap() const;
    void set_ct2referencedensitymap(const std::map<int, float>& ct2referencedensityMap);
    const float* get_ct2referencedensitybuffer() const;

    /*isdefault tinyint
      是不是默认的*/
    bool get_isdefault() const;
    void set_isdefault(const bool& isdefault);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtCt2densityImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtCt2densityImp
{

public:
    //default is false to improve performance
    RtCt2densityImp(bool bGeneraterUid = false);

    ~RtCt2densityImp();

    RtCt2densityImp(const RtCt2densityImp& ct2density);

    RtCt2densityImp& operator = (const RtCt2densityImp& ct2density);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //tablename
    inline std::string get_tablename() const { return m_tablename;}
    inline void set_tablename(const std::string& tablename) { m_tablename = tablename;}

    //ct2densityvalue
    inline std::map<int, float>& get_ct2densitymap() {return m_ct2densityMap;}
    inline const std::map<int, float>& get_ct2densitymap() const {return m_ct2densityMap;}
    inline void set_ct2densitymap(const std::map<int, float>& ct2densityMap) {m_ct2densityMap = ct2densityMap;}
    inline const float* get_ct2densitybuffer() const {return m_ct2densityBuffer;}

    //ct2referencedensityvalue
    inline std::map<int, float>& get_ct2referencedensitymap() {return m_ct2referencedensityMap;}
    inline const std::map<int, float>& get_ct2referencedensitymap() const {return m_ct2referencedensityMap;}
    inline void set_ct2referencedensitymap(const std::map<int, float>& ct2referencedensityMap) {m_ct2referencedensityMap = ct2referencedensityMap;}
    inline const float* get_ct2referencedensitybuffer() const {return m_ct2referencedensityBuffer;}

    //isdefault
    inline bool get_isdefault() const { return m_isdefault;}
    inline void set_isdefault(const bool& isdefault) { m_isdefault = isdefault;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //5 parameters
    std::string						m_uid;
    std::string						m_tablename;
    std::map<int, float>            m_ct2densityMap;//物理密度映射
    float                           m_ct2densityBuffer[6025];// 这里根据晓清的输入，是定长的数组, 6025指的是CTValue的范围，在前端viewmodel有定义最大值，最小值
    std::map<int, float>            m_ct2referencedensityMap;//电子密度映射
    float                           m_ct2referencedensityBuffer[6025];
    bool							m_isdefault;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif