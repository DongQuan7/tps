//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_BLOCK_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_BLOCK_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include <vector>
#include "RtTpsDatabaseWrapper/rt_tps_database_data.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum BLOCK_FIELD
{
    BLOCK_UID = 0,
    BLOCK_BEAMUID,
    BLOCK_TREATMENTBEAMUID,
    BLOCK_POINTS,
    BLOCK_TARGETVOIUID,
    BLOCK_TARGETMARGINX,
    BLOCK_TARGETMARGINY,
    BLOCK_AVOIDVOIUID,
    BLOCK_AVOIDMARGINX,
    BLOCK_AVOIDMARGINY,
    BLOCK_ISAUTOSHAPE,
    BLOCK_BLOCKNUMBER,
    BLOCK_BLOCKTYPE,
    BLOCK_BLOCKNAME,
    BLOCK_SOURCETOTRAYDISTANCE,
    BLOCK_BLOCKDIVERGENCE,
    BLOCK_BLOCKMOUNTINGPOSITION,
    BLOCK_MATERIALID,
    BLOCK_BLOCKTHICKNESS,
    BLOCK_UPDATETIME,
    BLOCK_FIELD_MAX
};

static const char* ENUM2STRING_BLOCK_FIELD[] =
{
    "UID",
    "BEAMUID",
    "TREATMENTBEAMUID",
    "POINTS",
    "TARGETVOIUID",
    "TARGETMARGINX",
    "TARGETMARGINY",
    "AVOIDVOIUID",
    "AVOIDMARGINX",
    "AVOIDMARGINY",
    "ISAUTOSHAPE",
    "BLOCKNUMBER",
    "BLOCKTYPE",
    "BLOCKNAME",
    "SOURCETOTRAYDISTANCE",
    "BLOCKDIVERGENCE",
    "BLOCKMOUNTINGPOSITION",
    "MATERIALID",
    "BLOCKTHICKNESS",
    "UPDATETIME",
    "BLOCK_FIELD_MAX"
};

static const char* ENUM2STRING_BLOCK_FIELD_NULL = "10000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtBlockImp;

class RT_DB_EXPORT RtBlock : public RtDatabaseObject
{
  friend class RtBeamImp;
  friend class RtDatabaseHelper;

protected:
    RtBlock(bool bGeneraterUid = false);

public:

    ~RtBlock();

    RtBlock(const RtBlock& block);

    RtBlock& operator = (const RtBlock& block);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*beamuid varchar
      Fk,关联beam表外键*/
    std::string get_beamuid() const;
    void set_beamuid(const std::string& beamuid);

    /*treatmentbeamuid varchar
      外键*/
    std::string get_treatmentbeamuid() const;
    void set_treatmentbeamuid(const std::string& treatmentbeamuid);

    /*points varchar
      2D点集合*/
    const std::vector<db_Point2f> get_points() const;
    std::vector<db_Point2f> get_points();
    void set_points(const std::vector<db_Point2f>& vPoints);

    /*targetvoiuid varchar
      适形靶区UID*/
    std::string get_targetvoiuid() const;
    void set_targetvoiuid(const std::string& targetvoiuid);

    /*targetmarginx float
      X方向靶区margin*/
    float get_targetmarginx() const;
    void set_targetmarginx(const float& targetmarginx);

    /*targetmarginy float
      Y方向靶区margin*/
    float get_targetmarginy() const;
    void set_targetmarginy(const float& targetmarginy);

    /*avoidvoiuid varchar
      要避开的voi*/
    std::string get_avoidvoiuid() const;
    void set_avoidvoiuid(const std::string& avoidvoiuid);

    /*avoidmarginx float
      避开voi x方向margin*/
    float get_avoidmarginx() const;
    void set_avoidmarginx(const float& avoidmarginx);

    /*avoidmarginy float
      避开voi y方向margin*/
    float get_avoidmarginy() const;
    void set_avoidmarginy(const float& avoidmarginy);

    /*isautoshape tinyint
      是否自动适形*/
    bool get_isautoshape() const;
    void set_isautoshape(const bool& isautoshape);

    /*blocknumber int
      (300A,00FC) Identification Number of the Block .*/
    int get_blocknumber() const;
    void set_blocknumber(const int& blocknumber);

    /*blocktype int
      block类型*/
    int get_blocktype() const;
    void set_blocktype(const int& blocktype);

    /*blockname varchar
      block名*/
    std::string get_blockname() const;
    void set_blockname(const std::string& blockname);

    /*sourcetotraydistance float
      源到block托盘的距离*/
    float get_sourcetotraydistance() const;
    void set_sourcetotraydistance(const float& sourcetotraydistance);

    /*blockdivergence int
      (300A,00FA) Indicates presence or otherwise of geometrical divergence*/
    int get_blockdivergence() const;
    void set_blockdivergence(const int& blockdivergence);

    /*blockmountingposition int
      枚举类型 BLOCK_MOUNTING_POSITION*/
    int get_blockmountingposition() const;
    void set_blockmountingposition(const int& blockmountingposition);

    /*materialid varchar
      (300A,00E1) User-supplied identifier for material used to manufacture block.*/
    std::string get_materialid() const;
    void set_materialid(const std::string& materialid);

    /*blockthickness float
      block的厚度*/
    float get_blockthickness() const;
    void set_blockthickness(const float& blockthickness);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtBlockImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtBlockImp
{

public:
    //default is false to improve performance
    RtBlockImp(bool bGeneraterUid = false);

    ~RtBlockImp();

    RtBlockImp(const RtBlockImp& block);

    RtBlockImp& operator = (const RtBlockImp& block);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //beamuid
    inline std::string get_beamuid() const { return m_beamuid;}
    inline void set_beamuid(const std::string& beamuid) { m_beamuid = beamuid;}

    //treatmentbeamuid
    inline std::string get_treatmentbeamuid() const { return m_treatmentbeamuid;}
    inline void set_treatmentbeamuid(const std::string& treatmentbeamuid) { m_treatmentbeamuid = treatmentbeamuid;}

    //points
    inline const std::vector<db_Point2f> get_points() const { return m_points;}
    inline std::vector<db_Point2f> get_points() { return m_points; }
    inline void set_points(const std::vector<db_Point2f>& vPoints) { m_points = vPoints; }

    //targetvoiuid
    inline std::string get_targetvoiuid() const { return m_targetvoiuid;}
    inline void set_targetvoiuid(const std::string& targetvoiuid) { m_targetvoiuid = targetvoiuid;}

    //targetmarginx
    inline float get_targetmarginx() const { return m_targetmarginx;}
    inline void set_targetmarginx(const float& targetmarginx) { m_targetmarginx = targetmarginx;}

    //targetmarginy
    inline float get_targetmarginy() const { return m_targetmarginy;}
    inline void set_targetmarginy(const float& targetmarginy) { m_targetmarginy = targetmarginy;}

    //avoidvoiuid
    inline std::string get_avoidvoiuid() const { return m_avoidvoiuid;}
    inline void set_avoidvoiuid(const std::string& avoidvoiuid) { m_avoidvoiuid = avoidvoiuid;}

    //avoidmarginx
    inline float get_avoidmarginx() const { return m_avoidmarginx;}
    inline void set_avoidmarginx(const float& avoidmarginx) { m_avoidmarginx = avoidmarginx;}

    //avoidmarginy
    inline float get_avoidmarginy() const { return m_avoidmarginy;}
    inline void set_avoidmarginy(const float& avoidmarginy) { m_avoidmarginy = avoidmarginy;}

    //isautoshape
    inline bool get_isautoshape() const { return m_isautoshape;}
    inline void set_isautoshape(const bool& isautoshape) { m_isautoshape = isautoshape;}

    //blocknumber
    inline int get_blocknumber() const { return m_blocknumber;}
    inline void set_blocknumber(const int& blocknumber) { m_blocknumber = blocknumber;}

    //blocktype
    inline int get_blocktype() const { return m_blocktype;}
    inline void set_blocktype(const int& blocktype) { m_blocktype = blocktype;}

    //blockname
    inline std::string get_blockname() const { return m_blockname;}
    inline void set_blockname(const std::string& blockname) { m_blockname = blockname;}

    //sourcetotraydistance
    inline float get_sourcetotraydistance() const { return m_sourcetotraydistance;}
    inline void set_sourcetotraydistance(const float& sourcetotraydistance) { m_sourcetotraydistance = sourcetotraydistance;}

    //blockdivergence
    inline int get_blockdivergence() const { return m_blockdivergence;}
    inline void set_blockdivergence(const int& blockdivergence) { m_blockdivergence = blockdivergence;}

    //blockmountingposition
    inline int get_blockmountingposition() const { return m_blockmountingposition;}
    inline void set_blockmountingposition(const int& blockmountingposition) { m_blockmountingposition = blockmountingposition;}

    //materialid
    inline std::string get_materialid() const { return m_materialid;}
    inline void set_materialid(const std::string& materialid) { m_materialid = materialid;}

    //blockthickness
    inline float get_blockthickness() const { return m_blockthickness;}
    inline void set_blockthickness(const float& blockthickness) { m_blockthickness = blockthickness;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //20 parameters
    std::string						m_uid;
    std::string						m_beamuid;
    std::string						m_treatmentbeamuid;
    std::vector<db_Point2f>         m_points;
    std::string						m_targetvoiuid;
    float							m_targetmarginx;
    float							m_targetmarginy;
    std::string						m_avoidvoiuid;
    float							m_avoidmarginx;
    float							m_avoidmarginy;
    bool							m_isautoshape;
    int								m_blocknumber;
    int								m_blocktype;
    std::string						m_blockname;
    float							m_sourcetotraydistance;
    int								m_blockdivergence;
    int								m_blockmountingposition;
    std::string						m_materialid;
    float							m_blockthickness;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif