//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_DRRSETTING_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_DRRSETTING_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum DRRSETTING_FIELD
{
    DRRSETTING_UID = 0,
    DRRSETTING_NORMALGROUPUID,
    DRRSETTING_ELECTRONENERGY,
    DRRSETTING_CT2DENSITYUID,
    DRRSETTING_CTTHRESHOLDMINVALUE,
    DRRSETTING_CTTHRESHOLDMAXVALUE,
    DRRSETTING_UPDATETIME,
    DRRSETTING_FIELD_MAX
};

static const char* ENUM2STRING_DRRSETTING_FIELD[] =
{
    "UID",
    "NORMALGROUPUID",
    "ELECTRONENERGY",
    "CT2DENSITYUID",
    "CTTHRESHOLDMINVALUE",
    "CTTHRESHOLDMAXVALUE",
    "UPDATETIME",
    "DRRSETTING_FIELD_MAX"
};

static const char* ENUM2STRING_DRRSETTING_FIELD_NULL = "1000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtDrrsettingImp;

class RT_DB_EXPORT RtDrrsetting : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtDrrsetting(bool bGeneraterUid = false);

    ~RtDrrsetting();

    RtDrrsetting(const RtDrrsetting& drrsetting);

    RtDrrsetting& operator = (const RtDrrsetting& drrsetting);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*normalgroupuid varchar
      Fk*/
    std::string get_normalgroupuid() const;
    void set_normalgroupuid(const std::string& normalgroupuid);

    /*electronenergy float
      the energy for generate DRR)
            */
    float get_electronenergy() const;
    void set_electronenergy(const float& electronenergy);

    /*ct2densityuid varchar
      ct2density uid*/
    std::string get_ct2densityuid() const;
    void set_ct2densityuid(const std::string& ct2densityuid);

    /*ctthresholdminvalue float
      CT Threshold 最小值*/
    float get_ctthresholdminvalue() const;
    void set_ctthresholdminvalue(const float& ctthresholdminvalue);

    /*ctthresholdmaxvalue float
      CT Threshold 最大值*/
    float get_ctthresholdmaxvalue() const;
    void set_ctthresholdmaxvalue(const float& ctthresholdmaxvalue);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtDrrsettingImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtDrrsettingImp
{

public:
    //default is false to improve performance
    RtDrrsettingImp(bool bGeneraterUid = false);

    ~RtDrrsettingImp();

    RtDrrsettingImp(const RtDrrsettingImp& drrsetting);

    RtDrrsettingImp& operator = (const RtDrrsettingImp& drrsetting);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //normalgroupuid
    inline std::string get_normalgroupuid() const { return m_normalgroupuid;}
    inline void set_normalgroupuid(const std::string& normalgroupuid) { m_normalgroupuid = normalgroupuid;}

    //electronenergy
    inline float get_electronenergy() const { return m_electronenergy;}
    inline void set_electronenergy(const float& electronenergy) { m_electronenergy = electronenergy;}

    //ct2densityuid
    inline std::string get_ct2densityuid() const { return m_ct2densityuid;}
    inline void set_ct2densityuid(const std::string& ct2densityuid) { m_ct2densityuid = ct2densityuid;}

    //ctthresholdminvalue
    inline float get_ctthresholdminvalue() const { return m_ctthresholdminvalue;}
    inline void set_ctthresholdminvalue(const float& ctthresholdminvalue) { m_ctthresholdminvalue = ctthresholdminvalue;}

    //ctthresholdmaxvalue
    inline float get_ctthresholdmaxvalue() const { return m_ctthresholdmaxvalue;}
    inline void set_ctthresholdmaxvalue(const float& ctthresholdmaxvalue) { m_ctthresholdmaxvalue = ctthresholdmaxvalue;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //7 parameters
    std::string						m_uid;
    std::string						m_normalgroupuid;
    float							m_electronenergy;
    std::string						m_ct2densityuid;
    float							m_ctthresholdminvalue;
    float							m_ctthresholdmaxvalue;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif