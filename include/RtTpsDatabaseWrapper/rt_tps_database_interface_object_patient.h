//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/24/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_PATIENT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_PATIENT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum PATIENT_FIELD
{
    PATIENT_UID = 0,
    PATIENT_PATIENTID,
    PATIENT_PATIENTBARCODE,
    PATIENT_CLINICALUID,
    PATIENT_ISSUEROFPATIENTID,
    PATIENT_ISINTERNAL,
    PATIENT_ATTDOCTORID,
    PATIENT_REFDOCTORNAME,
    PATIENT_FIRSTNAME,
    PATIENT_MIDDLENAME,
    PATIENT_NAMEPREFIX,
    PATIENT_NAMESUFFIX,
    PATIENT_LASTNAME,
    PATIENT_PHOTOFILEPATH,
    PATIENT_SSN,
    PATIENT_CARDID,
    PATIENT_PATIENTTYPE,
    PATIENT_WEIGHTUNIT,
    PATIENT_HEIGHTUNIT,
    PATIENT_HEIGHT,
    PATIENT_PHONE1,
    PATIENT_PHONE2,
    PATIENT_EMAILADDRESS,
    PATIENT_HOMEADDRESS,
    PATIENT_HOMEADDRESSPROVINCE,
    PATIENT_NATION,
    PATIENT_NATIONALITY,
    PATIENT_NATIVEPLACE,
    PATIENT_NATIVEPLACEPROVINCE,
    PATIENT_EMERGENCYCONTACTNAME,
    PATIENT_EMERGENCYCONTACTPHONE,
    PATIENT_OLDADMISSIONNO,
    PATIENT_INPATIENTAREA,
    PATIENT_ASSOCIATION,
    PATIENT_PATHOLOGYNO,
    PATIENT_HOSPITALCARDID,
    PATIENT_ROOMNO,
    PATIENT_BEDNO,
    PATIENT_DESCRIPTION,
    PATIENT_OTHERPATIENTNAMES,
    PATIENT_OTHERPATIENTIDS,
    PATIENT_PATIENTBIRTHDATE,
    PATIENT_PATIENTSEX,
    PATIENT_PATIENTCOMMENTS,
    PATIENT_PATIENTCARDTYPE,
    PATIENT_ETHNICGROUP,
    PATIENT_MILITARYRANK,
    PATIENT_PATIENTPROTECT,
    PATIENT_PATIENTCONFIRMSTATUS,
    PATIENT_PATIENTREJECTREASON,
    PATIENT_PATIENTCONFIRMDATETIME,
    PATIENT_EMERGENCY,
    PATIENT_PATIENTACCUMULATEDDAP,
    PATIENT_PATIENTACCUMULATEDDAPUNIT,
    PATIENT_VOICELANGUAGE,
    PATIENT_ALLERGIES,
    PATIENT_LASTMENSTRUALDATE,
    PATIENT_PATIENTSTATE,
    PATIENT_PATIENTRESERVED0,
    PATIENT_PATIENTRESERVED1,
    PATIENT_ISACTIVE,
    PATIENT_COUNTRY,
    PATIENT_PROVINCE,
    PATIENT_CITY,
    PATIENT_POSTCODE,
    PATIENT_ADDRESS,
    PATIENT_ORIGINALCOUNTRY,
    PATIENT_ORIGINALPROVINCE,
    PATIENT_ORIGINALCITY,
    PATIENT_ORIGINALPOSTCODE,
    PATIENT_ORIGINALADDRESS,
    PATIENT_EMAIL,
    PATIENT_TELEPHONE,
    PATIENT_COUNTRYCODE,
    PATIENT_AREACODE,
    PATIENT_MOBILE,
    PATIENT_EMERGENCYCONTACTFIRSTNAME,
    PATIENT_EMERGENCYCONTACTLASTNAME,
    PATIENT_EMERGENCYCONTACTRELATIONSHIP,
    PATIENT_EMERGENCYCONTACTCOUNTRY,
    PATIENT_EMERGENCYCONTACTPROVINCE,
    PATIENT_EMERGENCYCONTACTCITY,
    PATIENT_EMERGENCYCONTACTPOSTCODE,
    PATIENT_EMERGENCYCONTACTADDRESS,
    PATIENT_EMERGENCYCONTACTEMAIL,
    PATIENT_EMERGENCYCONTACTTELEPHONE,
    PATIENT_EMERGENCYCONTACTMOBILE,
    PATIENT_EMERGENCYCONTACTCOUNTRYCODE,
    PATIENT_EMERGENCYCONTACTAREACODE,
    PATIENT_CONTACTFIRSTNAME,
    PATIENT_CONTACTLASTNAME,
    PATIENT_CONTACTRELATIONSHIP,
    PATIENT_CONTACTCOUNTRY,
    PATIENT_CONTACTPROVINCE,
    PATIENT_CONTACTCITY,
    PATIENT_CONTACTPOSTCODE,
    PATIENT_CONTACTADDRESS,
    PATIENT_CONTACTEMAIL,
    PATIENT_CONTACTTELEPHONE,
    PATIENT_CONTACTMOBILE,
    PATIENT_CONTACTCOUNTRYCODE,
    PATIENT_CONTACTAREACODE,
    PATIENT_STATE,
    PATIENT_EMERGENCYSTATE,
    PATIENT_CONTACTSTATE,
    PATIENT_ORIGINALSTATE,
    PATIENT_WEIGHTHISTORY,
    PATIENT_CLINCALHISTORY,
    PATIENT_CRC,
    PATIENT_ISFROMHIS,
    PATIENT_OCCUPATION,
    PATIENT_PATIENTCARDPHOTOFILEPATH,
    PATIENT_REGISTERDATE,
    PATIENT_UPDATETIME,
    PATIENT_RISK,
    PATIENT_ENABLEWEIGHTLIMIT,
    PATIENT_WEIGHTUPLIMIT,
    PATIENT_WEIGHTDOWNLIMIT,
    PATIENT_RESTOREDATETIME,
    PATIENT_BACKUPDATETIME,
    PATIENT_FIELD_MAX
};

static const char* ENUM2STRING_PATIENT_FIELD[] =
{
    "UID",
    "PATIENTID",
    "PATIENTBARCODE",
    "CLINICALUID",
    "ISSUEROFPATIENTID",
    "ISINTERNAL",
    "ATTDOCTORID",
    "REFDOCTORNAME",
    "FIRSTNAME",
    "MIDDLENAME",
    "NAMEPREFIX",
    "NAMESUFFIX",
    "LASTNAME",
    "PHOTOFILEPATH",
    "SSN",
    "CARDID",
    "PATIENTTYPE",
    "WEIGHTUNIT",
    "HEIGHTUNIT",
    "HEIGHT",
    "PHONE1",
    "PHONE2",
    "EMAILADDRESS",
    "HOMEADDRESS",
    "HOMEADDRESSPROVINCE",
    "NATION",
    "NATIONALITY",
    "NATIVEPLACE",
    "NATIVEPLACEPROVINCE",
    "EMERGENCYCONTACTNAME",
    "EMERGENCYCONTACTPHONE",
    "OLDADMISSIONNO",
    "INPATIENTAREA",
    "ASSOCIATION",
    "PATHOLOGYNO",
    "HOSPITALCARDID",
    "ROOMNO",
    "BEDNO",
    "DESCRIPTION",
    "OTHERPATIENTNAMES",
    "OTHERPATIENTIDS",
    "PATIENTBIRTHDATE",
    "PATIENTSEX",
    "PATIENTCOMMENTS",
    "PATIENTCARDTYPE",
    "ETHNICGROUP",
    "MILITARYRANK",
    "PATIENTPROTECT",
    "PATIENTCONFIRMSTATUS",
    "PATIENTREJECTREASON",
    "PATIENTCONFIRMDATETIME",
    "EMERGENCY",
    "PATIENTACCUMULATEDDAP",
    "PATIENTACCUMULATEDDAPUNIT",
    "VOICELANGUAGE",
    "ALLERGIES",
    "LASTMENSTRUALDATE",
    "PATIENTSTATE",
    "PATIENTRESERVED0",
    "PATIENTRESERVED1",
    "ISACTIVE",
    "COUNTRY",
    "PROVINCE",
    "CITY",
    "POSTCODE",
    "ADDRESS",
    "ORIGINALCOUNTRY",
    "ORIGINALPROVINCE",
    "ORIGINALCITY",
    "ORIGINALPOSTCODE",
    "ORIGINALADDRESS",
    "EMAIL",
    "TELEPHONE",
    "COUNTRYCODE",
    "AREACODE",
    "MOBILE",
    "EMERGENCYCONTACTFIRSTNAME",
    "EMERGENCYCONTACTLASTNAME",
    "EMERGENCYCONTACTRELATIONSHIP",
    "EMERGENCYCONTACTCOUNTRY",
    "EMERGENCYCONTACTPROVINCE",
    "EMERGENCYCONTACTCITY",
    "EMERGENCYCONTACTPOSTCODE",
    "EMERGENCYCONTACTADDRESS",
    "EMERGENCYCONTACTEMAIL",
    "EMERGENCYCONTACTTELEPHONE",
    "EMERGENCYCONTACTMOBILE",
    "EMERGENCYCONTACTCOUNTRYCODE",
    "EMERGENCYCONTACTAREACODE",
    "CONTACTFIRSTNAME",
    "CONTACTLASTNAME",
    "CONTACTRELATIONSHIP",
    "CONTACTCOUNTRY",
    "CONTACTPROVINCE",
    "CONTACTCITY",
    "CONTACTPOSTCODE",
    "CONTACTADDRESS",
    "CONTACTEMAIL",
    "CONTACTTELEPHONE",
    "CONTACTMOBILE",
    "CONTACTCOUNTRYCODE",
    "CONTACTAREACODE",
    "STATE",
    "EMERGENCYSTATE",
    "CONTACTSTATE",
    "ORIGINALSTATE",
    "WEIGHTHISTORY",
    "CLINCALHISTORY",
    "CRC",
    "ISFROMHIS",
    "OCCUPATION",
    "PATIENTCARDPHOTOFILEPATH",
    "REGISTERDATE",
    "UPDATETIME",
    "RISK",
    "ENABLEWEIGHTLIMIT",
    "WEIGHTUPLIMIT",
    "WEIGHTDOWNLIMIT",
    "RESTOREDATETIME",
    "BACKUPDATETIME",
    "PATIENT_FIELD_MAX"
};

static const char* ENUM2STRING_PATIENT_FIELD_NULL = "111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtPatientImp;

class RT_DB_EXPORT RtPatient : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtPatient(bool bGeneraterUid = false);

    ~RtPatient();

    RtPatient(const RtPatient& patient);

    RtPatient& operator = (const RtPatient& patient);

    /*uid varchar
      (0061,0001),Patient UID ,Defined by MCSF .UI, The primary key*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*patientid varchar
      (0010,0020) Patient ID PatientID LO 1*/
    std::string get_patientid() const;
    void set_patientid(const std::string& patientid);

    /*patientbarcode int
      record the patient barcode*/
    int get_patientbarcode() const;
    void set_patientbarcode(const int& patientbarcode);

    /*clinicaluid varchar
      record the related clinical uid which is selected*/
    std::string get_clinicaluid() const;
    void set_clinicaluid(const std::string& clinicaluid);

    /*issuerofpatientid varchar
      (0010,0021) Issuer of Patient ID IssuerOfPatientID LO 1*/
    std::string get_issuerofpatientid() const;
    void set_issuerofpatientid(const std::string& issuerofpatientid);

    /*isinternal tinyint
      */
    bool get_isinternal() const;
    void set_isinternal(const bool& isinternal);

    /*attdoctorid varchar
      UID of attending physician*/
    std::string get_attdoctorid() const;
    void set_attdoctorid(const std::string& attdoctorid);

    /*refdoctorname varchar
      UID of attending physician*/
    std::string get_refdoctorname() const;
    void set_refdoctorname(const std::string& refdoctorname);

    /*firstname varchar
      Patient first name
            Patient info UI element*/
    std::string get_firstname() const;
    void set_firstname(const std::string& firstname);

    /*middlename varchar
      Patient middle name
            Patient info UI element*/
    std::string get_middlename() const;
    void set_middlename(const std::string& middlename);

    /*nameprefix varchar
      Patient last name
            Patient info UI element*/
    std::string get_nameprefix() const;
    void set_nameprefix(const std::string& nameprefix);

    /*namesuffix varchar
      Patient last name
            Patient info UI element*/
    std::string get_namesuffix() const;
    void set_namesuffix(const std::string& namesuffix);

    /*lastname varchar
      Patient last name
            Patient info UI element*/
    std::string get_lastname() const;
    void set_lastname(const std::string& lastname);

    /*photofilepath varchar
      record the patient photo's file path in service*/
    std::string get_photofilepath() const;
    void set_photofilepath(const std::string& photofilepath);

    /*ssn varchar
      Patient Social Security Card number
            Patient info UI element*/
    std::string get_ssn() const;
    void set_ssn(const std::string& ssn);

    /*cardid varchar
      Patient card ID.
            Patient info UI element*/
    std::string get_cardid() const;
    void set_cardid(const std::string& cardid);

    /*patienttype int
      In patient / out patient.*/
    int get_patienttype() const;
    void set_patienttype(const int& patienttype);

    /*weightunit int
      Patient height
            Patient info UI element*/
    int get_weightunit() const;
    void set_weightunit(const int& weightunit);

    /*heightunit int
      Patient height
            Patient info UI element*/
    int get_heightunit() const;
    void set_heightunit(const int& heightunit);

    /*height float
      Patient height
            Patient info UI element*/
    float get_height() const;
    void set_height(const float& height);

    /*phone1 varchar
      Patient first phone number
            Patient info UI element*/
    std::string get_phone1() const;
    void set_phone1(const std::string& phone1);

    /*phone2 varchar
      Patient second  phone number
            Patient info UI element*/
    std::string get_phone2() const;
    void set_phone2(const std::string& phone2);

    /*emailaddress varchar
      Patient email address
            Patient info UI element*/
    std::string get_emailaddress() const;
    void set_emailaddress(const std::string& emailaddress);

    /*homeaddress varchar
      Patient home address
            Patient info UI element*/
    std::string get_homeaddress() const;
    void set_homeaddress(const std::string& homeaddress);

    /*homeaddressprovince varchar
      The provice which patient's home located on
            Patient info UI element*/
    std::string get_homeaddressprovince() const;
    void set_homeaddressprovince(const std::string& homeaddressprovince);

    /*nation varchar
      Patient currently native place
            Patient info UI element*/
    std::string get_nation() const;
    void set_nation(const std::string& nation);

    /*nationality varchar
      Patient currently native place
            Patient info UI element*/
    std::string get_nationality() const;
    void set_nationality(const std::string& nationality);

    /*nativeplace varchar
      Patient currently native place
            Patient info UI element*/
    std::string get_nativeplace() const;
    void set_nativeplace(const std::string& nativeplace);

    /*nativeplaceprovince varchar
      The provice which patient currently stay
            Patient info UI element*/
    std::string get_nativeplaceprovince() const;
    void set_nativeplaceprovince(const std::string& nativeplaceprovince);

    /*emergencycontactname varchar
      People name for the patient emergency contact
            Patient info UI element*/
    std::string get_emergencycontactname() const;
    void set_emergencycontactname(const std::string& emergencycontactname);

    /*emergencycontactphone varchar
      Phone number  for the patient emergency contact
            Patient info UI element*/
    std::string get_emergencycontactphone() const;
    void set_emergencycontactphone(const std::string& emergencycontactphone);

    /*oldadmissionno varchar
      Patient old admission number
            Patient info UI element*/
    std::string get_oldadmissionno() const;
    void set_oldadmissionno(const std::string& oldadmissionno);

    /*inpatientarea varchar
      Hosptial area which patient stay
            Patient info UI element*/
    std::string get_inpatientarea() const;
    void set_inpatientarea(const std::string& inpatientarea);

    /*association varchar
      Patient info UI element*/
    std::string get_association() const;
    void set_association(const std::string& association);

    /*pathologyno varchar
      Pathology number
            Patient info UI element*/
    std::string get_pathologyno() const;
    void set_pathologyno(const std::string& pathologyno);

    /*hospitalcardid varchar
      Hospital card ID
            Patient info UI element*/
    std::string get_hospitalcardid() const;
    void set_hospitalcardid(const std::string& hospitalcardid);

    /*roomno varchar
      Room number which the patient live in
            Patient info UI element*/
    std::string get_roomno() const;
    void set_roomno(const std::string& roomno);

    /*bedno varchar
      Bed number which the patient live in
            Patient info UI element*/
    std::string get_bedno() const;
    void set_bedno(const std::string& bedno);

    /*description varchar
      Description
            Patient info UI element*/
    std::string get_description() const;
    void set_description(const std::string& description);

    /*otherpatientnames varchar
      (0010,1001) Other Patient Names OtherPatientNames PN 1-n,n=4*/
    std::string get_otherpatientnames() const;
    void set_otherpatientnames(const std::string& otherpatientnames);

    /*otherpatientids varchar
      (0010,1000) Other Patient IDs OtherPatientIDs LO 1-n,n=4*/
    std::string get_otherpatientids() const;
    void set_otherpatientids(const std::string& otherpatientids);

    /*patientbirthdate date
      (0010,0030) Patient Birth Date PatientBirthDate DA 1,8 bytes fixed,19930822 would represent August 22, 1993.*/
    DATE_BOOST get_patientbirthdate() const;
    void set_patientbirthdate(const DATE_BOOST& patientbirthdate);

    /*patientsex int
      (0010,0040) Patient Sex PatientSex CS 1*/
    int get_patientsex() const;
    void set_patientsex(const int& patientsex);

    /*patientcomments varchar
      (0010,4000) Patient Comments PatientComments LT 1,10240 max length*/
    std::string get_patientcomments() const;
    void set_patientcomments(const std::string& patientcomments);

    /*patientcardtype int
      (0010,0022) Type of Patient ID TypeOfPatientID CS 1,Normal, Emergency or Field Service,etc CS*/
    int get_patientcardtype() const;
    void set_patientcardtype(const int& patientcardtype);

    /*ethnicgroup varchar
      (0010,2160) Ethnic Group EthnicGroup SH 1*/
    std::string get_ethnicgroup() const;
    void set_ethnicgroup(const std::string& ethnicgroup);

    /*militaryrank varchar
      (0010,1080) Military Rank MilitaryRank LO 1,*/
    std::string get_militaryrank() const;
    void set_militaryrank(const std::string& militaryrank);

    /*patientprotect varchar
      PatientProtect*/
    std::string get_patientprotect() const;
    void set_patientprotect(const std::string& patientprotect);

    /*patientconfirmstatus int
      PatientConfirmStatus :0-Accepted, 1-Un-accepted, 2-Rejected,3-Deleted*/
    int get_patientconfirmstatus() const;
    void set_patientconfirmstatus(const int& patientconfirmstatus);

    /*patientrejectreason varchar
      PatientRejectReason*/
    std::string get_patientrejectreason() const;
    void set_patientrejectreason(const std::string& patientrejectreason);

    /*patientconfirmdatetime datetime
      PatientConfirmDatetime*/
    DATETIME_BOOST get_patientconfirmdatetime() const;
    void set_patientconfirmdatetime(const DATETIME_BOOST& patientconfirmdatetime);

    /*emergency tinyint
      Emergency*/
    bool get_emergency() const;
    void set_emergency(const bool& emergency);

    /*patientaccumulateddap varchar
      PatientAccumulatedDAP DS 1*/
    std::string get_patientaccumulateddap() const;
    void set_patientaccumulateddap(const std::string& patientaccumulateddap);

    /*patientaccumulateddapunit varchar
      PatientAccumulatedDAPUnit*/
    std::string get_patientaccumulateddapunit() const;
    void set_patientaccumulateddapunit(const std::string& patientaccumulateddapunit);

    /*voicelanguage varchar
      VoiceLanguage*/
    std::string get_voicelanguage() const;
    void set_voicelanguage(const std::string& voicelanguage);

    /*allergies varchar
      (0010,2110) Allergies Allergies LO 1-n n=8*/
    std::string get_allergies() const;
    void set_allergies(const std::string& allergies);

    /*lastmenstrualdate date
      (0010,21D0) Last Menstrual Date LastMenstrualDate DA 1*/
    DATE_BOOST get_lastmenstrualdate() const;
    void set_lastmenstrualdate(const DATE_BOOST& lastmenstrualdate);

    /*patientstate varchar
      (0038,0050) Special Needs SpecialNeeds LO 1*/
    std::string get_patientstate() const;
    void set_patientstate(const std::string& patientstate);

    /*patientreserved0 varchar
      Patient Reserved0*/
    std::string get_patientreserved0() const;
    void set_patientreserved0(const std::string& patientreserved0);

    /*patientreserved1 varchar
      Patient Reserved1*/
    std::string get_patientreserved1() const;
    void set_patientreserved1(const std::string& patientreserved1);

    /*isactive tinyint
      record this patient is inactive or not*/
    bool get_isactive() const;
    void set_isactive(const bool& isactive);

    /*country int
      record the address of country*/
    int get_country() const;
    void set_country(const int& country);

    /*province int
      record the address of province*/
    int get_province() const;
    void set_province(const int& province);

    /*city varchar
      record the address of city*/
    std::string get_city() const;
    void set_city(const std::string& city);

    /*postcode varchar
      record the address of postcode*/
    std::string get_postcode() const;
    void set_postcode(const std::string& postcode);

    /*address varchar
      record the address of address*/
    std::string get_address() const;
    void set_address(const std::string& address);

    /*originalcountry int
      record the address of originalcountry*/
    int get_originalcountry() const;
    void set_originalcountry(const int& originalcountry);

    /*originalprovince int
      record the address of originalprovince*/
    int get_originalprovince() const;
    void set_originalprovince(const int& originalprovince);

    /*originalcity varchar
      record the address of originalcity*/
    std::string get_originalcity() const;
    void set_originalcity(const std::string& originalcity);

    /*originalpostcode varchar
      record the address of originalpostcode*/
    std::string get_originalpostcode() const;
    void set_originalpostcode(const std::string& originalpostcode);

    /*originaladdress varchar
      record the address of originaladdress*/
    std::string get_originaladdress() const;
    void set_originaladdress(const std::string& originaladdress);

    /*email varchar
      record the address of email*/
    std::string get_email() const;
    void set_email(const std::string& email);

    /*telephone varchar
      record the address of telephone*/
    std::string get_telephone() const;
    void set_telephone(const std::string& telephone);

    /*countrycode varchar
      record the address of countrycode*/
    std::string get_countrycode() const;
    void set_countrycode(const std::string& countrycode);

    /*areacode varchar
      record the address of areacode*/
    std::string get_areacode() const;
    void set_areacode(const std::string& areacode);

    /*mobile varchar
      record the address of mobile*/
    std::string get_mobile() const;
    void set_mobile(const std::string& mobile);

    /*emergencycontactfirstname varchar
      record the address of emergencycontactfirstname*/
    std::string get_emergencycontactfirstname() const;
    void set_emergencycontactfirstname(const std::string& emergencycontactfirstname);

    /*emergencycontactlastname varchar
      record the address of emergencycontactlastname*/
    std::string get_emergencycontactlastname() const;
    void set_emergencycontactlastname(const std::string& emergencycontactlastname);

    /*emergencycontactrelationship int
      record the address of emergencycontactrelationship*/
    int get_emergencycontactrelationship() const;
    void set_emergencycontactrelationship(const int& emergencycontactrelationship);

    /*emergencycontactcountry int
      record the address of emergencycontactcountry*/
    int get_emergencycontactcountry() const;
    void set_emergencycontactcountry(const int& emergencycontactcountry);

    /*emergencycontactprovince int
      record the address of emergencycontactprovince*/
    int get_emergencycontactprovince() const;
    void set_emergencycontactprovince(const int& emergencycontactprovince);

    /*emergencycontactcity varchar
      record the address of emergencycontactcity*/
    std::string get_emergencycontactcity() const;
    void set_emergencycontactcity(const std::string& emergencycontactcity);

    /*emergencycontactpostcode varchar
      record the address of emergencycontactpostcode*/
    std::string get_emergencycontactpostcode() const;
    void set_emergencycontactpostcode(const std::string& emergencycontactpostcode);

    /*emergencycontactaddress varchar
      record the address of emergencycontactaddress*/
    std::string get_emergencycontactaddress() const;
    void set_emergencycontactaddress(const std::string& emergencycontactaddress);

    /*emergencycontactemail varchar
      record the address of emergencycontactemail*/
    std::string get_emergencycontactemail() const;
    void set_emergencycontactemail(const std::string& emergencycontactemail);

    /*emergencycontacttelephone varchar
      record the address of emergencycontacttelephone*/
    std::string get_emergencycontacttelephone() const;
    void set_emergencycontacttelephone(const std::string& emergencycontacttelephone);

    /*emergencycontactmobile varchar
      record the address of emergencycontactmobile*/
    std::string get_emergencycontactmobile() const;
    void set_emergencycontactmobile(const std::string& emergencycontactmobile);

    /*emergencycontactcountrycode varchar
      record the address of emergencycontactcountrycode*/
    std::string get_emergencycontactcountrycode() const;
    void set_emergencycontactcountrycode(const std::string& emergencycontactcountrycode);

    /*emergencycontactareacode varchar
      record the address of emergencycontactareacode*/
    std::string get_emergencycontactareacode() const;
    void set_emergencycontactareacode(const std::string& emergencycontactareacode);

    /*contactfirstname varchar
      record the address of contactfirstname*/
    std::string get_contactfirstname() const;
    void set_contactfirstname(const std::string& contactfirstname);

    /*contactlastname varchar
      record the address of contactlastname*/
    std::string get_contactlastname() const;
    void set_contactlastname(const std::string& contactlastname);

    /*contactrelationship int
      record the address of contactrelationship*/
    int get_contactrelationship() const;
    void set_contactrelationship(const int& contactrelationship);

    /*contactcountry int
      record the address of contactcountry*/
    int get_contactcountry() const;
    void set_contactcountry(const int& contactcountry);

    /*contactprovince int
      record the address of contactprovince*/
    int get_contactprovince() const;
    void set_contactprovince(const int& contactprovince);

    /*contactcity varchar
      record the address of contactcity*/
    std::string get_contactcity() const;
    void set_contactcity(const std::string& contactcity);

    /*contactpostcode varchar
      record the address of contactpostcode*/
    std::string get_contactpostcode() const;
    void set_contactpostcode(const std::string& contactpostcode);

    /*contactaddress varchar
      record the address of contactaddress*/
    std::string get_contactaddress() const;
    void set_contactaddress(const std::string& contactaddress);

    /*contactemail varchar
      record the address of contactemail*/
    std::string get_contactemail() const;
    void set_contactemail(const std::string& contactemail);

    /*contacttelephone varchar
      record the address of contacttelephone*/
    std::string get_contacttelephone() const;
    void set_contacttelephone(const std::string& contacttelephone);

    /*contactmobile varchar
      record the address of contactmobile*/
    std::string get_contactmobile() const;
    void set_contactmobile(const std::string& contactmobile);

    /*contactcountrycode varchar
      record the address of contactcountrycode*/
    std::string get_contactcountrycode() const;
    void set_contactcountrycode(const std::string& contactcountrycode);

    /*contactareacode varchar
      record the address of contactareacode*/
    std::string get_contactareacode() const;
    void set_contactareacode(const std::string& contactareacode);

    /*state varchar
      record the address of state*/
    std::string get_state() const;
    void set_state(const std::string& state);

    /*emergencystate varchar
      record the address of emergencystate*/
    std::string get_emergencystate() const;
    void set_emergencystate(const std::string& emergencystate);

    /*contactstate varchar
      record the address of contactstate*/
    std::string get_contactstate() const;
    void set_contactstate(const std::string& contactstate);

    /*originalstate varchar
      record the address of originalstate*/
    std::string get_originalstate() const;
    void set_originalstate(const std::string& originalstate);

    /*weighthistory varchar
      record the address of weighthistory*/
    std::string get_weighthistory() const;
    void set_weighthistory(const std::string& weighthistory);

    /*clincalhistory varchar
      record the address of clincalhistory*/
    std::string get_clincalhistory() const;
    void set_clincalhistory(const std::string& clincalhistory);

    /*crc varchar
      record the address of crc*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*isfromhis tinyint
      record the address of isfromhis*/
    bool get_isfromhis() const;
    void set_isfromhis(const bool& isfromhis);

    /*occupation int
      record the address of occupation*/
    int get_occupation() const;
    void set_occupation(const int& occupation);

    /*patientcardphotofilepath varchar
      record the address of patientcardphotofilepath*/
    std::string get_patientcardphotofilepath() const;
    void set_patientcardphotofilepath(const std::string& patientcardphotofilepath);

    /*registerdate datetime
      patient register date*/
    DATETIME_BOOST get_registerdate() const;
    void set_registerdate(const DATETIME_BOOST& registerdate);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*risk varchar
      */
    std::string get_risk() const;
    void set_risk(const std::string& risk);

    /*enableweightlimit tinyint
      启用体重限制*/
    bool get_enableweightlimit() const;
    void set_enableweightlimit(const bool& enableweightlimit);

    /*weightuplimit double
      体重上限*/
    double get_weightuplimit() const;
    void set_weightuplimit(const double& weightuplimit);

    /*weightdownlimit double
      体重下限*/
    double get_weightdownlimit() const;
    void set_weightdownlimit(const double& weightdownlimit);

    /*restoredatetime datetime
      被导入的病人数据创建时间*/
    DATETIME_BOOST get_restoredatetime() const;
    void set_restoredatetime(const DATETIME_BOOST& restoredatetime);

    /*backupdatetime datetime
      */
    DATETIME_BOOST get_backupdatetime() const;
    void set_backupdatetime(const DATETIME_BOOST& backupdatetime);


private:
    RtPatientImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtPatientImp
{

public:
    //default is false to improve performance
    RtPatientImp(bool bGeneraterUid = false);

    ~RtPatientImp();

    RtPatientImp(const RtPatientImp& patient);

    RtPatientImp& operator = (const RtPatientImp& patient);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //patientid
    inline std::string get_patientid() const { return m_patientid;}
    inline void set_patientid(const std::string& patientid) { m_patientid = patientid;}

    //patientbarcode
    inline int get_patientbarcode() const { return m_patientbarcode;}
    inline void set_patientbarcode(const int& patientbarcode) { m_patientbarcode = patientbarcode;}

    //clinicaluid
    inline std::string get_clinicaluid() const { return m_clinicaluid;}
    inline void set_clinicaluid(const std::string& clinicaluid) { m_clinicaluid = clinicaluid;}

    //issuerofpatientid
    inline std::string get_issuerofpatientid() const { return m_issuerofpatientid;}
    inline void set_issuerofpatientid(const std::string& issuerofpatientid) { m_issuerofpatientid = issuerofpatientid;}

    //isinternal
    inline bool get_isinternal() const { return m_isinternal;}
    inline void set_isinternal(const bool& isinternal) { m_isinternal = isinternal;}

    //attdoctorid
    inline std::string get_attdoctorid() const { return m_attdoctorid;}
    inline void set_attdoctorid(const std::string& attdoctorid) { m_attdoctorid = attdoctorid;}

    //refdoctorname
    inline std::string get_refdoctorname() const { return m_refdoctorname;}
    inline void set_refdoctorname(const std::string& refdoctorname) { m_refdoctorname = refdoctorname;}

    //firstname
    inline std::string get_firstname() const { return m_firstname;}
    inline void set_firstname(const std::string& firstname) { m_firstname = firstname;}

    //middlename
    inline std::string get_middlename() const { return m_middlename;}
    inline void set_middlename(const std::string& middlename) { m_middlename = middlename;}

    //nameprefix
    inline std::string get_nameprefix() const { return m_nameprefix;}
    inline void set_nameprefix(const std::string& nameprefix) { m_nameprefix = nameprefix;}

    //namesuffix
    inline std::string get_namesuffix() const { return m_namesuffix;}
    inline void set_namesuffix(const std::string& namesuffix) { m_namesuffix = namesuffix;}

    //lastname
    inline std::string get_lastname() const { return m_lastname;}
    inline void set_lastname(const std::string& lastname) { m_lastname = lastname;}

    //photofilepath
    inline std::string get_photofilepath() const { return m_photofilepath;}
    inline void set_photofilepath(const std::string& photofilepath) { m_photofilepath = photofilepath;}

    //ssn
    inline std::string get_ssn() const { return m_ssn;}
    inline void set_ssn(const std::string& ssn) { m_ssn = ssn;}

    //cardid
    inline std::string get_cardid() const { return m_cardid;}
    inline void set_cardid(const std::string& cardid) { m_cardid = cardid;}

    //patienttype
    inline int get_patienttype() const { return m_patienttype;}
    inline void set_patienttype(const int& patienttype) { m_patienttype = patienttype;}

    //weightunit
    inline int get_weightunit() const { return m_weightunit;}
    inline void set_weightunit(const int& weightunit) { m_weightunit = weightunit;}

    //heightunit
    inline int get_heightunit() const { return m_heightunit;}
    inline void set_heightunit(const int& heightunit) { m_heightunit = heightunit;}

    //height
    inline float get_height() const { return m_height;}
    inline void set_height(const float& height) { m_height = height;}

    //phone1
    inline std::string get_phone1() const { return m_phone1;}
    inline void set_phone1(const std::string& phone1) { m_phone1 = phone1;}

    //phone2
    inline std::string get_phone2() const { return m_phone2;}
    inline void set_phone2(const std::string& phone2) { m_phone2 = phone2;}

    //emailaddress
    inline std::string get_emailaddress() const { return m_emailaddress;}
    inline void set_emailaddress(const std::string& emailaddress) { m_emailaddress = emailaddress;}

    //homeaddress
    inline std::string get_homeaddress() const { return m_homeaddress;}
    inline void set_homeaddress(const std::string& homeaddress) { m_homeaddress = homeaddress;}

    //homeaddressprovince
    inline std::string get_homeaddressprovince() const { return m_homeaddressprovince;}
    inline void set_homeaddressprovince(const std::string& homeaddressprovince) { m_homeaddressprovince = homeaddressprovince;}

    //nation
    inline std::string get_nation() const { return m_nation;}
    inline void set_nation(const std::string& nation) { m_nation = nation;}

    //nationality
    inline std::string get_nationality() const { return m_nationality;}
    inline void set_nationality(const std::string& nationality) { m_nationality = nationality;}

    //nativeplace
    inline std::string get_nativeplace() const { return m_nativeplace;}
    inline void set_nativeplace(const std::string& nativeplace) { m_nativeplace = nativeplace;}

    //nativeplaceprovince
    inline std::string get_nativeplaceprovince() const { return m_nativeplaceprovince;}
    inline void set_nativeplaceprovince(const std::string& nativeplaceprovince) { m_nativeplaceprovince = nativeplaceprovince;}

    //emergencycontactname
    inline std::string get_emergencycontactname() const { return m_emergencycontactname;}
    inline void set_emergencycontactname(const std::string& emergencycontactname) { m_emergencycontactname = emergencycontactname;}

    //emergencycontactphone
    inline std::string get_emergencycontactphone() const { return m_emergencycontactphone;}
    inline void set_emergencycontactphone(const std::string& emergencycontactphone) { m_emergencycontactphone = emergencycontactphone;}

    //oldadmissionno
    inline std::string get_oldadmissionno() const { return m_oldadmissionno;}
    inline void set_oldadmissionno(const std::string& oldadmissionno) { m_oldadmissionno = oldadmissionno;}

    //inpatientarea
    inline std::string get_inpatientarea() const { return m_inpatientarea;}
    inline void set_inpatientarea(const std::string& inpatientarea) { m_inpatientarea = inpatientarea;}

    //association
    inline std::string get_association() const { return m_association;}
    inline void set_association(const std::string& association) { m_association = association;}

    //pathologyno
    inline std::string get_pathologyno() const { return m_pathologyno;}
    inline void set_pathologyno(const std::string& pathologyno) { m_pathologyno = pathologyno;}

    //hospitalcardid
    inline std::string get_hospitalcardid() const { return m_hospitalcardid;}
    inline void set_hospitalcardid(const std::string& hospitalcardid) { m_hospitalcardid = hospitalcardid;}

    //roomno
    inline std::string get_roomno() const { return m_roomno;}
    inline void set_roomno(const std::string& roomno) { m_roomno = roomno;}

    //bedno
    inline std::string get_bedno() const { return m_bedno;}
    inline void set_bedno(const std::string& bedno) { m_bedno = bedno;}

    //description
    inline std::string get_description() const { return m_description;}
    inline void set_description(const std::string& description) { m_description = description;}

    //otherpatientnames
    inline std::string get_otherpatientnames() const { return m_otherpatientnames;}
    inline void set_otherpatientnames(const std::string& otherpatientnames) { m_otherpatientnames = otherpatientnames;}

    //otherpatientids
    inline std::string get_otherpatientids() const { return m_otherpatientids;}
    inline void set_otherpatientids(const std::string& otherpatientids) { m_otherpatientids = otherpatientids;}

    //patientbirthdate
    inline DATE_BOOST get_patientbirthdate() const { return m_patientbirthdate;}
    inline void set_patientbirthdate(const DATE_BOOST& patientbirthdate) { m_patientbirthdate = patientbirthdate;}

    //patientsex
    inline int get_patientsex() const { return m_patientsex;}
    inline void set_patientsex(const int& patientsex) { m_patientsex = patientsex;}

    //patientcomments
    inline std::string get_patientcomments() const { return m_patientcomments;}
    inline void set_patientcomments(const std::string& patientcomments) { m_patientcomments = patientcomments;}

    //patientcardtype
    inline int get_patientcardtype() const { return m_patientcardtype;}
    inline void set_patientcardtype(const int& patientcardtype) { m_patientcardtype = patientcardtype;}

    //ethnicgroup
    inline std::string get_ethnicgroup() const { return m_ethnicgroup;}
    inline void set_ethnicgroup(const std::string& ethnicgroup) { m_ethnicgroup = ethnicgroup;}

    //militaryrank
    inline std::string get_militaryrank() const { return m_militaryrank;}
    inline void set_militaryrank(const std::string& militaryrank) { m_militaryrank = militaryrank;}

    //patientprotect
    inline std::string get_patientprotect() const { return m_patientprotect;}
    inline void set_patientprotect(const std::string& patientprotect) { m_patientprotect = patientprotect;}

    //patientconfirmstatus
    inline int get_patientconfirmstatus() const { return m_patientconfirmstatus;}
    inline void set_patientconfirmstatus(const int& patientconfirmstatus) { m_patientconfirmstatus = patientconfirmstatus;}

    //patientrejectreason
    inline std::string get_patientrejectreason() const { return m_patientrejectreason;}
    inline void set_patientrejectreason(const std::string& patientrejectreason) { m_patientrejectreason = patientrejectreason;}

    //patientconfirmdatetime
    inline DATETIME_BOOST get_patientconfirmdatetime() const { return m_patientconfirmdatetime;}
    inline void set_patientconfirmdatetime(const DATETIME_BOOST& patientconfirmdatetime) { m_patientconfirmdatetime = patientconfirmdatetime;}

    //emergency
    inline bool get_emergency() const { return m_emergency;}
    inline void set_emergency(const bool& emergency) { m_emergency = emergency;}

    //patientaccumulateddap
    inline std::string get_patientaccumulateddap() const { return m_patientaccumulateddap;}
    inline void set_patientaccumulateddap(const std::string& patientaccumulateddap) { m_patientaccumulateddap = patientaccumulateddap;}

    //patientaccumulateddapunit
    inline std::string get_patientaccumulateddapunit() const { return m_patientaccumulateddapunit;}
    inline void set_patientaccumulateddapunit(const std::string& patientaccumulateddapunit) { m_patientaccumulateddapunit = patientaccumulateddapunit;}

    //voicelanguage
    inline std::string get_voicelanguage() const { return m_voicelanguage;}
    inline void set_voicelanguage(const std::string& voicelanguage) { m_voicelanguage = voicelanguage;}

    //allergies
    inline std::string get_allergies() const { return m_allergies;}
    inline void set_allergies(const std::string& allergies) { m_allergies = allergies;}

    //lastmenstrualdate
    inline DATE_BOOST get_lastmenstrualdate() const { return m_lastmenstrualdate;}
    inline void set_lastmenstrualdate(const DATE_BOOST& lastmenstrualdate) { m_lastmenstrualdate = lastmenstrualdate;}

    //patientstate
    inline std::string get_patientstate() const { return m_patientstate;}
    inline void set_patientstate(const std::string& patientstate) { m_patientstate = patientstate;}

    //patientreserved0
    inline std::string get_patientreserved0() const { return m_patientreserved0;}
    inline void set_patientreserved0(const std::string& patientreserved0) { m_patientreserved0 = patientreserved0;}

    //patientreserved1
    inline std::string get_patientreserved1() const { return m_patientreserved1;}
    inline void set_patientreserved1(const std::string& patientreserved1) { m_patientreserved1 = patientreserved1;}

    //isactive
    inline bool get_isactive() const { return m_isactive;}
    inline void set_isactive(const bool& isactive) { m_isactive = isactive;}

    //country
    inline int get_country() const { return m_country;}
    inline void set_country(const int& country) { m_country = country;}

    //province
    inline int get_province() const { return m_province;}
    inline void set_province(const int& province) { m_province = province;}

    //city
    inline std::string get_city() const { return m_city;}
    inline void set_city(const std::string& city) { m_city = city;}

    //postcode
    inline std::string get_postcode() const { return m_postcode;}
    inline void set_postcode(const std::string& postcode) { m_postcode = postcode;}

    //address
    inline std::string get_address() const { return m_address;}
    inline void set_address(const std::string& address) { m_address = address;}

    //originalcountry
    inline int get_originalcountry() const { return m_originalcountry;}
    inline void set_originalcountry(const int& originalcountry) { m_originalcountry = originalcountry;}

    //originalprovince
    inline int get_originalprovince() const { return m_originalprovince;}
    inline void set_originalprovince(const int& originalprovince) { m_originalprovince = originalprovince;}

    //originalcity
    inline std::string get_originalcity() const { return m_originalcity;}
    inline void set_originalcity(const std::string& originalcity) { m_originalcity = originalcity;}

    //originalpostcode
    inline std::string get_originalpostcode() const { return m_originalpostcode;}
    inline void set_originalpostcode(const std::string& originalpostcode) { m_originalpostcode = originalpostcode;}

    //originaladdress
    inline std::string get_originaladdress() const { return m_originaladdress;}
    inline void set_originaladdress(const std::string& originaladdress) { m_originaladdress = originaladdress;}

    //email
    inline std::string get_email() const { return m_email;}
    inline void set_email(const std::string& email) { m_email = email;}

    //telephone
    inline std::string get_telephone() const { return m_telephone;}
    inline void set_telephone(const std::string& telephone) { m_telephone = telephone;}

    //countrycode
    inline std::string get_countrycode() const { return m_countrycode;}
    inline void set_countrycode(const std::string& countrycode) { m_countrycode = countrycode;}

    //areacode
    inline std::string get_areacode() const { return m_areacode;}
    inline void set_areacode(const std::string& areacode) { m_areacode = areacode;}

    //mobile
    inline std::string get_mobile() const { return m_mobile;}
    inline void set_mobile(const std::string& mobile) { m_mobile = mobile;}

    //emergencycontactfirstname
    inline std::string get_emergencycontactfirstname() const { return m_emergencycontactfirstname;}
    inline void set_emergencycontactfirstname(const std::string& emergencycontactfirstname) { m_emergencycontactfirstname = emergencycontactfirstname;}

    //emergencycontactlastname
    inline std::string get_emergencycontactlastname() const { return m_emergencycontactlastname;}
    inline void set_emergencycontactlastname(const std::string& emergencycontactlastname) { m_emergencycontactlastname = emergencycontactlastname;}

    //emergencycontactrelationship
    inline int get_emergencycontactrelationship() const { return m_emergencycontactrelationship;}
    inline void set_emergencycontactrelationship(const int& emergencycontactrelationship) { m_emergencycontactrelationship = emergencycontactrelationship;}

    //emergencycontactcountry
    inline int get_emergencycontactcountry() const { return m_emergencycontactcountry;}
    inline void set_emergencycontactcountry(const int& emergencycontactcountry) { m_emergencycontactcountry = emergencycontactcountry;}

    //emergencycontactprovince
    inline int get_emergencycontactprovince() const { return m_emergencycontactprovince;}
    inline void set_emergencycontactprovince(const int& emergencycontactprovince) { m_emergencycontactprovince = emergencycontactprovince;}

    //emergencycontactcity
    inline std::string get_emergencycontactcity() const { return m_emergencycontactcity;}
    inline void set_emergencycontactcity(const std::string& emergencycontactcity) { m_emergencycontactcity = emergencycontactcity;}

    //emergencycontactpostcode
    inline std::string get_emergencycontactpostcode() const { return m_emergencycontactpostcode;}
    inline void set_emergencycontactpostcode(const std::string& emergencycontactpostcode) { m_emergencycontactpostcode = emergencycontactpostcode;}

    //emergencycontactaddress
    inline std::string get_emergencycontactaddress() const { return m_emergencycontactaddress;}
    inline void set_emergencycontactaddress(const std::string& emergencycontactaddress) { m_emergencycontactaddress = emergencycontactaddress;}

    //emergencycontactemail
    inline std::string get_emergencycontactemail() const { return m_emergencycontactemail;}
    inline void set_emergencycontactemail(const std::string& emergencycontactemail) { m_emergencycontactemail = emergencycontactemail;}

    //emergencycontacttelephone
    inline std::string get_emergencycontacttelephone() const { return m_emergencycontacttelephone;}
    inline void set_emergencycontacttelephone(const std::string& emergencycontacttelephone) { m_emergencycontacttelephone = emergencycontacttelephone;}

    //emergencycontactmobile
    inline std::string get_emergencycontactmobile() const { return m_emergencycontactmobile;}
    inline void set_emergencycontactmobile(const std::string& emergencycontactmobile) { m_emergencycontactmobile = emergencycontactmobile;}

    //emergencycontactcountrycode
    inline std::string get_emergencycontactcountrycode() const { return m_emergencycontactcountrycode;}
    inline void set_emergencycontactcountrycode(const std::string& emergencycontactcountrycode) { m_emergencycontactcountrycode = emergencycontactcountrycode;}

    //emergencycontactareacode
    inline std::string get_emergencycontactareacode() const { return m_emergencycontactareacode;}
    inline void set_emergencycontactareacode(const std::string& emergencycontactareacode) { m_emergencycontactareacode = emergencycontactareacode;}

    //contactfirstname
    inline std::string get_contactfirstname() const { return m_contactfirstname;}
    inline void set_contactfirstname(const std::string& contactfirstname) { m_contactfirstname = contactfirstname;}

    //contactlastname
    inline std::string get_contactlastname() const { return m_contactlastname;}
    inline void set_contactlastname(const std::string& contactlastname) { m_contactlastname = contactlastname;}

    //contactrelationship
    inline int get_contactrelationship() const { return m_contactrelationship;}
    inline void set_contactrelationship(const int& contactrelationship) { m_contactrelationship = contactrelationship;}

    //contactcountry
    inline int get_contactcountry() const { return m_contactcountry;}
    inline void set_contactcountry(const int& contactcountry) { m_contactcountry = contactcountry;}

    //contactprovince
    inline int get_contactprovince() const { return m_contactprovince;}
    inline void set_contactprovince(const int& contactprovince) { m_contactprovince = contactprovince;}

    //contactcity
    inline std::string get_contactcity() const { return m_contactcity;}
    inline void set_contactcity(const std::string& contactcity) { m_contactcity = contactcity;}

    //contactpostcode
    inline std::string get_contactpostcode() const { return m_contactpostcode;}
    inline void set_contactpostcode(const std::string& contactpostcode) { m_contactpostcode = contactpostcode;}

    //contactaddress
    inline std::string get_contactaddress() const { return m_contactaddress;}
    inline void set_contactaddress(const std::string& contactaddress) { m_contactaddress = contactaddress;}

    //contactemail
    inline std::string get_contactemail() const { return m_contactemail;}
    inline void set_contactemail(const std::string& contactemail) { m_contactemail = contactemail;}

    //contacttelephone
    inline std::string get_contacttelephone() const { return m_contacttelephone;}
    inline void set_contacttelephone(const std::string& contacttelephone) { m_contacttelephone = contacttelephone;}

    //contactmobile
    inline std::string get_contactmobile() const { return m_contactmobile;}
    inline void set_contactmobile(const std::string& contactmobile) { m_contactmobile = contactmobile;}

    //contactcountrycode
    inline std::string get_contactcountrycode() const { return m_contactcountrycode;}
    inline void set_contactcountrycode(const std::string& contactcountrycode) { m_contactcountrycode = contactcountrycode;}

    //contactareacode
    inline std::string get_contactareacode() const { return m_contactareacode;}
    inline void set_contactareacode(const std::string& contactareacode) { m_contactareacode = contactareacode;}

    //state
    inline std::string get_state() const { return m_state;}
    inline void set_state(const std::string& state) { m_state = state;}

    //emergencystate
    inline std::string get_emergencystate() const { return m_emergencystate;}
    inline void set_emergencystate(const std::string& emergencystate) { m_emergencystate = emergencystate;}

    //contactstate
    inline std::string get_contactstate() const { return m_contactstate;}
    inline void set_contactstate(const std::string& contactstate) { m_contactstate = contactstate;}

    //originalstate
    inline std::string get_originalstate() const { return m_originalstate;}
    inline void set_originalstate(const std::string& originalstate) { m_originalstate = originalstate;}

    //weighthistory
    inline std::string get_weighthistory() const { return m_weighthistory;}
    inline void set_weighthistory(const std::string& weighthistory) { m_weighthistory = weighthistory;}

    //clincalhistory
    inline std::string get_clincalhistory() const { return m_clincalhistory;}
    inline void set_clincalhistory(const std::string& clincalhistory) { m_clincalhistory = clincalhistory;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //isfromhis
    inline bool get_isfromhis() const { return m_isfromhis;}
    inline void set_isfromhis(const bool& isfromhis) { m_isfromhis = isfromhis;}

    //occupation
    inline int get_occupation() const { return m_occupation;}
    inline void set_occupation(const int& occupation) { m_occupation = occupation;}

    //patientcardphotofilepath
    inline std::string get_patientcardphotofilepath() const { return m_patientcardphotofilepath;}
    inline void set_patientcardphotofilepath(const std::string& patientcardphotofilepath) { m_patientcardphotofilepath = patientcardphotofilepath;}

    //registerdate
    inline DATETIME_BOOST get_registerdate() const { return m_registerdate;}
    inline void set_registerdate(const DATETIME_BOOST& registerdate) { m_registerdate = registerdate;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //risk
    inline std::string get_risk() const { return m_risk;}
    inline void set_risk(const std::string& risk) { m_risk = risk;}

    //enableweightlimit
    inline bool get_enableweightlimit() const { return m_enableweightlimit;}
    inline void set_enableweightlimit(const bool& enableweightlimit) { m_enableweightlimit = enableweightlimit;}

    //weightuplimit
    inline double get_weightuplimit() const { return m_weightuplimit;}
    inline void set_weightuplimit(const double& weightuplimit) { m_weightuplimit = weightuplimit;}

    //weightdownlimit
    inline double get_weightdownlimit() const { return m_weightdownlimit;}
    inline void set_weightdownlimit(const double& weightdownlimit) { m_weightdownlimit = weightdownlimit;}

    //restoredatetime
    inline DATETIME_BOOST get_restoredatetime() const { return m_restoredatetime;}
    inline void set_restoredatetime(const DATETIME_BOOST& restoredatetime) { m_restoredatetime = restoredatetime;}

    //backupdatetime
    inline DATETIME_BOOST get_backupdatetime() const { return m_backupdatetime;}
    inline void set_backupdatetime(const DATETIME_BOOST& backupdatetime) { m_backupdatetime = backupdatetime;}

private:    //120 parameters
    std::string						m_uid;
    std::string						m_patientid;
    int								m_patientbarcode;
    std::string						m_clinicaluid;
    std::string						m_issuerofpatientid;
    bool							m_isinternal;
    std::string						m_attdoctorid;
    std::string						m_refdoctorname;
    std::string						m_firstname;
    std::string						m_middlename;
    std::string						m_nameprefix;
    std::string						m_namesuffix;
    std::string						m_lastname;
    std::string						m_photofilepath;
    std::string						m_ssn;
    std::string						m_cardid;
    int								m_patienttype;
    int								m_weightunit;
    int								m_heightunit;
    float							m_height;
    std::string						m_phone1;
    std::string						m_phone2;
    std::string						m_emailaddress;
    std::string						m_homeaddress;
    std::string						m_homeaddressprovince;
    std::string						m_nation;
    std::string						m_nationality;
    std::string						m_nativeplace;
    std::string						m_nativeplaceprovince;
    std::string						m_emergencycontactname;
    std::string						m_emergencycontactphone;
    std::string						m_oldadmissionno;
    std::string						m_inpatientarea;
    std::string						m_association;
    std::string						m_pathologyno;
    std::string						m_hospitalcardid;
    std::string						m_roomno;
    std::string						m_bedno;
    std::string						m_description;
    std::string						m_otherpatientnames;
    std::string						m_otherpatientids;
    DATE_BOOST						m_patientbirthdate;
    int								m_patientsex;
    std::string						m_patientcomments;
    int								m_patientcardtype;
    std::string						m_ethnicgroup;
    std::string						m_militaryrank;
    std::string						m_patientprotect;
    int								m_patientconfirmstatus;
    std::string						m_patientrejectreason;
    DATETIME_BOOST					m_patientconfirmdatetime;
    bool							m_emergency;
    std::string						m_patientaccumulateddap;
    std::string						m_patientaccumulateddapunit;
    std::string						m_voicelanguage;
    std::string						m_allergies;
    DATE_BOOST						m_lastmenstrualdate;
    std::string						m_patientstate;
    std::string						m_patientreserved0;
    std::string						m_patientreserved1;
    bool							m_isactive;
    int								m_country;
    int								m_province;
    std::string						m_city;
    std::string						m_postcode;
    std::string						m_address;
    int								m_originalcountry;
    int								m_originalprovince;
    std::string						m_originalcity;
    std::string						m_originalpostcode;
    std::string						m_originaladdress;
    std::string						m_email;
    std::string						m_telephone;
    std::string						m_countrycode;
    std::string						m_areacode;
    std::string						m_mobile;
    std::string						m_emergencycontactfirstname;
    std::string						m_emergencycontactlastname;
    int								m_emergencycontactrelationship;
    int								m_emergencycontactcountry;
    int								m_emergencycontactprovince;
    std::string						m_emergencycontactcity;
    std::string						m_emergencycontactpostcode;
    std::string						m_emergencycontactaddress;
    std::string						m_emergencycontactemail;
    std::string						m_emergencycontacttelephone;
    std::string						m_emergencycontactmobile;
    std::string						m_emergencycontactcountrycode;
    std::string						m_emergencycontactareacode;
    std::string						m_contactfirstname;
    std::string						m_contactlastname;
    int								m_contactrelationship;
    int								m_contactcountry;
    int								m_contactprovince;
    std::string						m_contactcity;
    std::string						m_contactpostcode;
    std::string						m_contactaddress;
    std::string						m_contactemail;
    std::string						m_contacttelephone;
    std::string						m_contactmobile;
    std::string						m_contactcountrycode;
    std::string						m_contactareacode;
    std::string						m_state;
    std::string						m_emergencystate;
    std::string						m_contactstate;
    std::string						m_originalstate;
    std::string						m_weighthistory;
    std::string						m_clincalhistory;
    std::string						m_crc;
    bool							m_isfromhis;
    int								m_occupation;
    std::string						m_patientcardphotofilepath;
    DATETIME_BOOST					m_registerdate;
    DATETIME_BOOST					m_updatetime;
    std::string						m_risk;
    bool							m_enableweightlimit;
    double							m_weightuplimit;
    double							m_weightdownlimit;
    DATETIME_BOOST					m_restoredatetime;
    DATETIME_BOOST					m_backupdatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif