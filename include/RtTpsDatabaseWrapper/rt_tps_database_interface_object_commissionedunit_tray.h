//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_COMMISSIONEDUNIT_TRAY_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_COMMISSIONEDUNIT_TRAY_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtCommissionedunit_trayImp;

class RT_DB_EXPORT RtCommissionedunit_tray
{
public:

    RtCommissionedunit_tray();

    ~RtCommissionedunit_tray();

    RtCommissionedunit_tray(const RtCommissionedunit_tray& commissionedunit_tray);

    RtCommissionedunit_tray& operator = (const RtCommissionedunit_tray& commissionedunit_tray);

    /*commissionedunituid varchar
      Tray UID*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*trayuid varchar
      PK， Fk tray uid*/
    std::string get_trayuid() const;
    void set_trayuid(const std::string& trayuid);

    /*trayfactor float
      tray factor*/
    float get_trayfactor() const;
    void set_trayfactor(const float& trayfactor);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtCommissionedunit_trayImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtCommissionedunit_trayImp
{

public:
    RT_DB_EXPORT RtCommissionedunit_trayImp();

    virtual ~RtCommissionedunit_trayImp();

    RtCommissionedunit_trayImp(const RtCommissionedunit_trayImp& commissionedunit_tray);

    RtCommissionedunit_trayImp& operator = (const RtCommissionedunit_trayImp& commissionedunit_tray);

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //trayuid
    inline std::string get_trayuid() const { return m_trayuid;}
    inline void set_trayuid(const std::string& trayuid) { m_trayuid = trayuid;}

    //trayfactor
    inline float get_trayfactor() const { return m_trayfactor;}
    inline void set_trayfactor(const float& trayfactor) { m_trayfactor = trayfactor;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //4 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_trayuid);
		ar & BOOST_SERIALIZATION_NVP(m_trayfactor);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_commissionedunituid;
    std::string						m_trayuid;
    float							m_trayfactor;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif