//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_APPROVERECORD_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_APPROVERECORD_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum APPROVERECORD_FIELD
{
    APPROVERECORD_UID = 0,
    APPROVERECORD_OBJECTUID,
    APPROVERECORD_OBJECTTYPE,
    APPROVERECORD_APPROVER,
    APPROVERECORD_APPROVEDATETIME,
    APPROVERECORD_ISAPPROVED,
    APPROVERECORD_CHANGESET,
    APPROVERECORD_UPDATETIME,
    APPROVERECORD_FIELD_MAX
};

static const char* ENUM2STRING_APPROVERECORD_FIELD[] =
{
    "UID",
    "OBJECTUID",
    "OBJECTTYPE",
    "APPROVER",
    "APPROVEDATETIME",
    "ISAPPROVED",
    "CHANGESET",
    "UPDATETIME",
    "APPROVERECORD_FIELD_MAX"
};

static const char* ENUM2STRING_APPROVERECORD_FIELD_NULL = "10000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtApproverecordImp;

class RT_DB_EXPORT RtApproverecord : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtApproverecord(bool bGeneraterUid = false);

    ~RtApproverecord();

    RtApproverecord(const RtApproverecord& approverecord);

    RtApproverecord& operator = (const RtApproverecord& approverecord);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*objectuid varchar
      approved-object uid */
    std::string get_objectuid() const;
    void set_objectuid(const std::string& objectuid);

    /*objecttype int
      object type*/
    int get_objecttype() const;
    void set_objecttype(const int& objecttype);

    /*approver varchar
      approved by who*/
    std::string get_approver() const;
    void set_approver(const std::string& approver);

    /*approvedatetime datetime
      approve datetime*/
    DATETIME_BOOST get_approvedatetime() const;
    void set_approvedatetime(const DATETIME_BOOST& approvedatetime);

    /*isapproved tinyint
      is approved or not*/
    bool get_isapproved() const;
    void set_isapproved(const bool& isapproved);

    /*changeset varchar
      serialized object*/
    std::string get_changeset() const;
    void set_changeset(const std::string& changeset);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtApproverecordImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtApproverecordImp
{

public:
    //default is false to improve performance
    RtApproverecordImp(bool bGeneraterUid = false);

    ~RtApproverecordImp();

    RtApproverecordImp(const RtApproverecordImp& approverecord);

    RtApproverecordImp& operator = (const RtApproverecordImp& approverecord);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //objectuid
    inline std::string get_objectuid() const { return m_objectuid;}
    inline void set_objectuid(const std::string& objectuid) { m_objectuid = objectuid;}

    //objecttype
    inline int get_objecttype() const { return m_objecttype;}
    inline void set_objecttype(const int& objecttype) { m_objecttype = objecttype;}

    //approver
    inline std::string get_approver() const { return m_approver;}
    inline void set_approver(const std::string& approver) { m_approver = approver;}

    //approvedatetime
    inline DATETIME_BOOST get_approvedatetime() const { return m_approvedatetime;}
    inline void set_approvedatetime(const DATETIME_BOOST& approvedatetime) { m_approvedatetime = approvedatetime;}

    //isapproved
    inline bool get_isapproved() const { return m_isapproved;}
    inline void set_isapproved(const bool& isapproved) { m_isapproved = isapproved;}

    //changeset
    inline std::string get_changeset() const { return m_changeset;}
    inline void set_changeset(const std::string& changeset) { m_changeset = changeset;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //8 parameters
    std::string						m_uid;
    std::string						m_objectuid;
    int								m_objecttype;
    std::string						m_approver;
    DATETIME_BOOST					m_approvedatetime;
    bool							m_isapproved;
    std::string						m_changeset;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif