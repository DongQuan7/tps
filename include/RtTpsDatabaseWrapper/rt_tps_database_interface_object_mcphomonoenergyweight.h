//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_MCPHOMONOENERGYWEIGHT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_MCPHOMONOENERGYWEIGHT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum MCPHOMONOENERGYWEIGHT_FIELD
{
    MCPHOMONOENERGYWEIGHT_UID = 0,
    MCPHOMONOENERGYWEIGHT_MCPHOCOMMISSIONEDUNITUID,
    MCPHOMONOENERGYWEIGHT_INJECTELECTRONENERGY,
    MCPHOMONOENERGYWEIGHT_INJECTELECTRONWEIGHT,
    MCPHOMONOENERGYWEIGHT_PHSPDISTANCEFROMTARGET,
    MCPHOMONOENERGYWEIGHT_FILEPATH,
    MCPHOMONOENERGYWEIGHT_PHSPFILEPATH,
    MCPHOMONOENERGYWEIGHT_CRC,
    MCPHOMONOENERGYWEIGHT_UPDATETIME,
    MCPHOMONOENERGYWEIGHT_FIELD_MAX
};

static const char* ENUM2STRING_MCPHOMONOENERGYWEIGHT_FIELD[] =
{
    "UID",
    "MCPHOCOMMISSIONEDUNITUID",
    "INJECTELECTRONENERGY",
    "INJECTELECTRONWEIGHT",
    "PHSPDISTANCEFROMTARGET",
    "FILEPATH",
    "PHSPFILEPATH",
    "CRC",
    "UPDATETIME",
    "MCPHOMONOENERGYWEIGHT_FIELD_MAX"
};

static const char* ENUM2STRING_MCPHOMONOENERGYWEIGHT_FIELD_NULL = "100000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtMcphomonoenergyweightImp;

class RT_DB_EXPORT RtMcphomonoenergyweight : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtMcphomonoenergyweight(bool bGeneraterUid = false);

    ~RtMcphomonoenergyweight();

    RtMcphomonoenergyweight(const RtMcphomonoenergyweight& mcphomonoenergyweight);

    RtMcphomonoenergyweight& operator = (const RtMcphomonoenergyweight& mcphomonoenergyweight);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*mcphocommissionedunituid varchar
      蒙卡剂量计算方法*/
    std::string get_mcphocommissionedunituid() const;
    void set_mcphocommissionedunituid(const std::string& mcphocommissionedunituid);

    /*injectelectronenergy float
      光子治疗模式下的能量档位*/
    float get_injectelectronenergy() const;
    void set_injectelectronenergy(const float& injectelectronenergy);

    /*injectelectronweight float
      光子治疗时的中电子的权重*/
    float get_injectelectronweight() const;
    void set_injectelectronweight(const float& injectelectronweight);

    /*phspdistancefromtarget float
      所给的相空间距离靶的垂直距离*/
    float get_phspdistancefromtarget() const;
    void set_phspdistancefromtarget(const float& phspdistancefromtarget);

    /*filepath varchar
      相空间文件的存取路径*/
    std::string get_filepath() const;
    void set_filepath(const std::string& filepath);

    /*phspfilepath varchar
      相空间文件的存取路径*/
    std::string get_phspfilepath() const;
    void set_phspfilepath(const std::string& phspfilepath);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtMcphomonoenergyweightImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtMcphomonoenergyweightImp
{

public:
    //default is false to improve performance
    RtMcphomonoenergyweightImp(bool bGeneraterUid = false);

    ~RtMcphomonoenergyweightImp();

    RtMcphomonoenergyweightImp(const RtMcphomonoenergyweightImp& mcphomonoenergyweight);

    RtMcphomonoenergyweightImp& operator = (const RtMcphomonoenergyweightImp& mcphomonoenergyweight);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //mcphocommissionedunituid
    inline std::string get_mcphocommissionedunituid() const { return m_mcphocommissionedunituid;}
    inline void set_mcphocommissionedunituid(const std::string& mcphocommissionedunituid) { m_mcphocommissionedunituid = mcphocommissionedunituid;}

    //injectelectronenergy
    inline float get_injectelectronenergy() const { return m_injectelectronenergy;}
    inline void set_injectelectronenergy(const float& injectelectronenergy) { m_injectelectronenergy = injectelectronenergy;}

    //injectelectronweight
    inline float get_injectelectronweight() const { return m_injectelectronweight;}
    inline void set_injectelectronweight(const float& injectelectronweight) { m_injectelectronweight = injectelectronweight;}

    //phspdistancefromtarget
    inline float get_phspdistancefromtarget() const { return m_phspdistancefromtarget;}
    inline void set_phspdistancefromtarget(const float& phspdistancefromtarget) { m_phspdistancefromtarget = phspdistancefromtarget;}

    //filepath
    inline std::string get_filepath() const { return m_filepath;}
    inline void set_filepath(const std::string& filepath) { m_filepath = filepath;}

    //phspfilepath
    inline std::string get_phspfilepath() const { return m_phspfilepath;}
    inline void set_phspfilepath(const std::string& phspfilepath) { m_phspfilepath = phspfilepath;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //9 parameters
    std::string						m_uid;
    std::string						m_mcphocommissionedunituid;
    float							m_injectelectronenergy;
    float							m_injectelectronweight;
    float							m_phspdistancefromtarget;
    std::string						m_filepath;
    std::string						m_phspfilepath;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif