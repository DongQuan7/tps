//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELWEIGHT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELWEIGHT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum KERNELWEIGHT_FIELD
{
    KERNELWEIGHT_UID = 0,
    KERNELWEIGHT_COMMISSIONEDUNITUID,
    KERNELWEIGHT_FIELDSIZE,
    KERNELWEIGHT_KERNELIDLIST,
    KERNELWEIGHT_KERNELWEIGHTLIST,
    KERNELWEIGHT_CRC,
    KERNELWEIGHT_UPDATETIME,
    KERNELWEIGHT_FIELD_MAX
};

static const char* ENUM2STRING_KERNELWEIGHT_FIELD[] =
{
    "UID",
    "COMMISSIONEDUNITUID",
    "FIELDSIZE",
    "KERNELIDLIST",
    "KERNELWEIGHTLIST",
    "CRC",
    "UPDATETIME",
    "KERNELWEIGHT_FIELD_MAX"
};

static const char* ENUM2STRING_KERNELWEIGHT_FIELD_NULL = "1000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtKernelweightImp;

class RT_DB_EXPORT RtKernelweight : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtKernelweight(bool bGeneraterUid = false);

    ~RtKernelweight();

    RtKernelweight(const RtKernelweight& kernelweight);

    RtKernelweight& operator = (const RtKernelweight& kernelweight);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*commissionedunituid varchar
      fk related to commissionedunit table uid*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*fieldsize float
      射野大小*/
    float get_fieldsize() const;
    void set_fieldsize(const float& fieldsize);

    /*kernelidlist varchar
      kerneldata的ID列表的文件路径*/
    std::string get_kernelidlist() const;
    void set_kernelidlist(const std::string& kernelidlist);

    /*kernelweightlist varchar
      不同能量的kernel所占比例的数据文件的文件路径*/
    std::string get_kernelweightlist() const;
    void set_kernelweightlist(const std::string& kernelweightlist);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    //////////////////////////////////////////////////////////////////////////
    std::vector<int> get_kernelid_list() const;
    void set_kernelid_list(const std::vector<int>& kernelid);

    std::vector<float> get_kernelweight_list() const;
    void set_kernelweight_list(const std::vector<float>& kernelweight);
private:
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
		ar & BOOST_SERIALIZATION_NVP(m_pImp);
	}
    RtKernelweightImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtKernelweightImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtKernelweightImp(bool bGeneraterUid = false);

    virtual ~RtKernelweightImp();

    RtKernelweightImp(const RtKernelweightImp& kernelweight);

    RtKernelweightImp& operator = (const RtKernelweightImp& kernelweight);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //fieldsize
    inline float get_fieldsize() const { return m_fieldsize;}
    inline void set_fieldsize(const float& fieldsize) { m_fieldsize = fieldsize;}

    //kernelidlist
    inline std::string get_kernelidlist() const { return m_kernelidlist;}
    inline void set_kernelidlist(const std::string& kernelidlist) { m_kernelidlist = kernelidlist;}

    //kernelweightlist
    inline std::string get_kernelweightlist() const { return m_kernelweightlist;}
    inline void set_kernelweightlist(const std::string& kernelweightlist) { m_kernelweightlist = kernelweightlist;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
	
    //////////////////////////////////////////////////////////////////////////
    inline std::vector<int> get_kernelid_list() const { return m_kernelid;}
    inline void set_kernelid_list(const std::vector<int>& kernelid) { m_kernelid = kernelid;}

    inline std::vector<float> get_kernelweight_list() const { return m_kernelweight;}
    inline void set_kernelweight_list(const std::vector<float>& kernelweight) { m_kernelweight = kernelweight;}
private:    //7 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_fieldsize);
		ar & BOOST_SERIALIZATION_NVP(m_kernelidlist);
		ar & BOOST_SERIALIZATION_NVP(m_kernelweightlist);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
		ar & BOOST_SERIALIZATION_NVP(m_kernelid);
		ar & BOOST_SERIALIZATION_NVP(m_kernelweight);
	}
    std::string						m_uid;
    std::string						m_commissionedunituid;
    float							m_fieldsize;
    std::string						m_kernelidlist;
    std::string						m_kernelweightlist;
    std::string						m_crc;
	DATETIME_BOOST					m_updatetime;
    //////////////////////////////////////////////////////////////////////////
    std::vector<int>                m_kernelid;
    std::vector<float>              m_kernelweight;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif