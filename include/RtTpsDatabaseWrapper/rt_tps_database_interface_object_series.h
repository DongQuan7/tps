//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_SERIES_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_SERIES_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum SERIES_FIELD
{
    SERIES_UID = 0,
    SERIES_SOPINSTANCEUID,
    SERIES_STUDYUID,
    SERIES_SERIESGROUPUID,
    SERIES_COURSEUID,
    SERIES_CT2DENSITYUID,
    SERIES_MODALITY,
    SERIES_RELATEDCBCTUID,
    SERIES_RELATEDFBCTUID,
    SERIES_SESSIONUID,
    SERIES_SERIESNAME,
    SERIES_SERIESPIXELDATAFILEPATH,
    SERIES_SERIESNUMBER,
    SERIES_IMAGELATERALITY,
    SERIES_SERIESDATE,
    SERIES_SERIESTIME,
    SERIES_PERFORMINGPHYSICIANNAME,
    SERIES_PROTOCOLNAME,
    SERIES_SERIESDESCRIPTION,
    SERIES_OPERATORSNAME,
    SERIES_BODYPARTEXAMINED,
    SERIES_PATIENTPOSITION,
    SERIES_MANUFACTURER,
    SERIES_INSTITUTIONNAME,
    SERIES_SMALLESTPIXELVALUEINSERIES,
    SERIES_LARGESTPIXELVALUEINSERIES,
    SERIES_LATERALITY,
    SERIES_PERFORMEDPROCEDURESTEPSTARTDATE,
    SERIES_PERFORMEDPROCEDURESTEPSTARTTIME,
    SERIES_PERFORMEDPROCEDURESTEPID,
    SERIES_PERFORMEDPROCEDURESTEPDESCRIPTION,
    SERIES_SERIESTYPE,
    SERIES_SOURCEISOTOPENAME,
    SERIES_RADIONUCLIDETOTALDOSE,
    SERIES_RADIOPHARMACEUTICALSTARTDATETIME,
    SERIES_RADIOPHARMACEUTICAL,
    SERIES_SERIESPRINTSTATUS,
    SERIES_SERIESSENDSTATUS,
    SERIES_SERIESSTOREDINDVD,
    SERIES_SERIESSTOREDINUSB,
    SERIES_SERIESPATIENTAGEGROUP,
    SERIES_SERIESPROTECT,
    SERIES_SERIESCONFIRMSTATUS,
    SERIES_SERIESREJECTREASON,
    SERIES_SERIESCONFIRMDATETIME,
    SERIES_RESOLUTION,
    SERIES_RECINCREMENT,
    SERIES_SCANTYPE,
    SERIES_PRESENTATIONINTENTTYPE,
    SERIES_SERIESSCANID,
    SERIES_SERIESAPRID,
    SERIES_SERIESAPRGROUPNAME,
    SERIES_SERIESAPRGROUPID,
    SERIES_SERIESISFAVOURITE,
    SERIES_ISFREECASSETTE,
    SERIES_SERIESEXAMPLEFIGUREPATH,
    SERIES_SERIESPSASID,
    SERIES_SERIESPATIENTTYPEID,
    SERIES_SERIESISSECONDCAPTURED,
    SERIES_SERIESISEXAMED,
    SERIES_RAWDATAACQUISITIONNUMBER,
    SERIES_RAWDATAACQUISITIONDATE,
    SERIES_RAWDATAACQUISITIONTIME,
    SERIES_RAWDATAINSTANCEUID,
    SERIES_RECONRESULT,
    SERIES_SERIESTHUMBNAIL,
    SERIES_SERIESCOMMENTS,
    SERIES_PROTOCOLID,
    SERIES_PROCEDURENAME,
    SERIES_PROTOCOLLINK,
    SERIES_IMAGETYPE,
    SERIES_SERIESRESERVED0,
    SERIES_SERIESRESERVED1,
    SERIES_PATIENTNAME,
    SERIES_MANUFACTURERMODELNAME,
    SERIES_ACQUISITIONTIME,
    SERIES_FRAMEOFREFERENCEUID,
    SERIES_ISPHANTOM,
    SERIES_TABLETOPPOSITION,
    SERIES_PHASE,
    SERIES_ISMAINPHASE,
    SERIES_RELATEDWAVEDATAFILEPATH,
    SERIES_ISSELECTED,
    SERIES_GATINGTYPE,
    SERIES_BINSCOPE,
    SERIES_CURRENTBININFO,
    SERIES_RESPIRATORYTYPE,
    SERIES_BREATHRATE,
    SERIES_BINMODE,
    SERIES_TOTALBINNUMBER,
    SERIES_BINIMAGETOTALNUMBER,
    SERIES_ISQA,
    SERIES_CONVOLUTIONKERNAL,
    SERIES_UPDATETIME,
    SERIES_FIELD_MAX
};

static const char* ENUM2STRING_SERIES_FIELD[] =
{
    "UID",
    "SOPINSTANCEUID",
    "STUDYUID",
    "SERIESGROUPUID",
    "COURSEUID",
    "CT2DENSITYUID",
    "MODALITY",
    "RELATEDCBCTUID",
    "RELATEDFBCTUID",
    "SESSIONUID",
    "SERIESNAME",
    "SERIESPIXELDATAFILEPATH",
    "SERIESNUMBER",
    "IMAGELATERALITY",
    "SERIESDATE",
    "SERIESTIME",
    "PERFORMINGPHYSICIANNAME",
    "PROTOCOLNAME",
    "SERIESDESCRIPTION",
    "OPERATORSNAME",
    "BODYPARTEXAMINED",
    "PATIENTPOSITION",
    "MANUFACTURER",
    "INSTITUTIONNAME",
    "SMALLESTPIXELVALUEINSERIES",
    "LARGESTPIXELVALUEINSERIES",
    "LATERALITY",
    "PERFORMEDPROCEDURESTEPSTARTDATE",
    "PERFORMEDPROCEDURESTEPSTARTTIME",
    "PERFORMEDPROCEDURESTEPID",
    "PERFORMEDPROCEDURESTEPDESCRIPTION",
    "SERIESTYPE",
    "SOURCEISOTOPENAME",
    "RADIONUCLIDETOTALDOSE",
    "RADIOPHARMACEUTICALSTARTDATETIME",
    "RADIOPHARMACEUTICAL",
    "SERIESPRINTSTATUS",
    "SERIESSENDSTATUS",
    "SERIESSTOREDINDVD",
    "SERIESSTOREDINUSB",
    "SERIESPATIENTAGEGROUP",
    "SERIESPROTECT",
    "SERIESCONFIRMSTATUS",
    "SERIESREJECTREASON",
    "SERIESCONFIRMDATETIME",
    "RESOLUTION",
    "RECINCREMENT",
    "SCANTYPE",
    "PRESENTATIONINTENTTYPE",
    "SERIESSCANID",
    "SERIESAPRID",
    "SERIESAPRGROUPNAME",
    "SERIESAPRGROUPID",
    "SERIESISFAVOURITE",
    "ISFREECASSETTE",
    "SERIESEXAMPLEFIGUREPATH",
    "SERIESPSASID",
    "SERIESPATIENTTYPEID",
    "SERIESISSECONDCAPTURED",
    "SERIESISEXAMED",
    "RAWDATAACQUISITIONNUMBER",
    "RAWDATAACQUISITIONDATE",
    "RAWDATAACQUISITIONTIME",
    "RAWDATAINSTANCEUID",
    "RECONRESULT",
    "SERIESTHUMBNAIL",
    "SERIESCOMMENTS",
    "PROTOCOLID",
    "PROCEDURENAME",
    "PROTOCOLLINK",
    "IMAGETYPE",
    "SERIESRESERVED0",
    "SERIESRESERVED1",
    "PATIENTNAME",
    "MANUFACTURERMODELNAME",
    "ACQUISITIONTIME",
    "FRAMEOFREFERENCEUID",
    "ISPHANTOM",
    "TABLETOPPOSITION",
    "PHASE",
    "ISMAINPHASE",
    "RELATEDWAVEDATAFILEPATH",
    "ISSELECTED",
    "GATINGTYPE",
    "BINSCOPE",
    "CURRENTBININFO",
    "RESPIRATORYTYPE",
    "BREATHRATE",
    "BINMODE",
    "TOTALBINNUMBER",
    "BINIMAGETOTALNUMBER",
    "ISQA",
    "CONVOLUTIONKERNAL",
    "UPDATETIME",
    "SERIES_FIELD_MAX"
};

static const char* ENUM2STRING_SERIES_FIELD_NULL = "1000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtSeriesImp;
class RtImage3DHeader;

class RT_DB_EXPORT RtSeries : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtSeries(bool bGeneraterUid = false);

    ~RtSeries();

    RtSeries(const RtSeries& series);

    RtSeries& operator = (const RtSeries& series);

    /*uid varchar
      (0020,000E) Series Instance UID SeriesInstanceUID UI, The primary key*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*sopinstanceuid varchar
      Import模块用于存放导入series的sopInstanceUID*/
    std::string get_sopinstanceuid() const;
    void set_sopinstanceuid(const std::string& sopinstanceuid);

    /*studyuid varchar
      Fk link to StudyTable*/
    std::string get_studyuid() const;
    void set_studyuid(const std::string& studyuid);

    /*seriesgroupuid varchar
      数据哪个series group,目前只有TPS使用*/
    std::string get_seriesgroupuid() const;
    void set_seriesgroupuid(const std::string& seriesgroupuid);

    /*courseuid varchar
      related course uid*/
    std::string get_courseuid() const;
    void set_courseuid(const std::string& courseuid);

    /*ct2densityuid varchar
      related to ct2density uid*/
    std::string get_ct2densityuid() const;
    void set_ct2densityuid(const std::string& ct2densityuid);

    /*modality varchar
      (0008,0060) Modality Modality CS 1,Type of equipment that originally acquired the data used to create the images associated with this Modality Performed Procedure Step.  See C.7.3.1.1.1 for Defined Terms.*/
    std::string get_modality() const;
    void set_modality(const std::string& modality);

    /*relatedcbctuid varchar
      related cbct uid*/
    std::string get_relatedcbctuid() const;
    void set_relatedcbctuid(const std::string& relatedcbctuid);

    /*relatedfbctuid varchar
      related fbct uid*/
    std::string get_relatedfbctuid() const;
    void set_relatedfbctuid(const std::string& relatedfbctuid);

    /*sessionuid varchar
      related to treatmentsession table uid*/
    std::string get_sessionuid() const;
    void set_sessionuid(const std::string& sessionuid);

    /*seriesname varchar
      */
    std::string get_seriesname() const;
    void set_seriesname(const std::string& seriesname);

    /*seriespixeldatafilepath varchar
      最早用来存放Image3D文件， 目前Image3D已拆分成两部分， Header的信息存数据库， PixelData的信息存放在Series表中的seriespixeldatafilepath字段*/
    std::string get_seriespixeldatafilepath() const;
    void set_seriespixeldatafilepath(const std::string& seriespixeldatafilepath);

    /*seriesnumber int
      (0020,0011) DICOM Series Number  A number that identifies this Series. IS 1.*/
    int get_seriesnumber() const;
    void set_seriesnumber(const int& seriesnumber);

    /*imagelaterality varchar
      (0020,0062) Image Laterality ImageLaterality CS 1,Laterality of object imaged (as described in Anatomic Region Sequence (0008,2218)) examined. Enumerated Values: R = right eye L = left eye B = both left and right eye Shall be consistent with any laterality information contained in Primary Anatomic Structure Modifier Sequence (0008,2230), if present.*/
    std::string get_imagelaterality() const;
    void set_imagelaterality(const std::string& imagelaterality);

    /*seriesdate date
      (0008,0021) Series Date SeriesDate DA 1, 8 bytes fixed*/
    DATE_BOOST get_seriesdate() const;
    void set_seriesdate(const DATE_BOOST& seriesdate);

    /*seriestime time
      (0008,0031) Series Time SeriesTime TM 1, 16 bytes maximum,Time the Series started.*/
    TIME_BOOST get_seriestime() const;
    void set_seriestime(const TIME_BOOST& seriestime);

    /*performingphysicianname varchar
      (0008,1050) Performing Physician Name PerformingPhysicianName PN 1-n n=4. Name of the physicians administering the Series.Examples: John Doe Doe^John [One family name;  one given name; no middle name, prefix, or suffix. Delimiters have been omitted for the  three trailing null components.]*/
    std::string get_performingphysicianname() const;
    void set_performingphysicianname(const std::string& performingphysicianname);

    /*protocolname varchar
      (0018,1030) Protocol Name ProtocolName LO 1.user-defined description of the conditions under which the series was performed*/
    std::string get_protocolname() const;
    void set_protocolname(const std::string& protocolname);

    /*seriesdescription varchar
      (0008,103E) Series Description SeriesDescription LO 1*/
    std::string get_seriesdescription() const;
    void set_seriesdescription(const std::string& seriesdescription);

    /*operatorsname varchar
      (0008,1070) Operators Name OperatorsName PN 1-n n=4.  technologist supporting the Series.*/
    std::string get_operatorsname() const;
    void set_operatorsname(const std::string& operatorsname);

    /*bodypartexamined varchar
      (0018,0015) Body Part Examined BodyPartExamined CS 1, DICOM Body Part Examined  Text description of the part of the body examined. Defined Terms: SKULL, CSPINE, TSPINE, LSPINE, SSPINE, COCCYX, CHEST, CLAVICLE, BREAST, ABDOMEN, PELVIS, HIP, SHOULDER, ELBOW, KNEE, ANKLE, HAND, FOOT, EXTREMITY, HEAD, HEAR, NECK, LEG, ARM, JAW*/
    std::string get_bodypartexamined() const;
    void set_bodypartexamined(const std::string& bodypartexamined);

    /*patientposition varchar
      (0018,5100) Patient Position PatientPosition CS 1,Patient position descriptor relative to the equipment. Required for CT, MR and NM images. See C.7.3.1.1.2. for Defined Terms and further explanation.*/
    std::string get_patientposition() const;
    void set_patientposition(const std::string& patientposition);

    /*manufacturer varchar
      (0008,0070) Manufacturer Manufacturer LO 1*/
    std::string get_manufacturer() const;
    void set_manufacturer(const std::string& manufacturer);

    /*institutionname varchar
      (0008,0080) Institution Name InstitutionName LO 1*/
    std::string get_institutionname() const;
    void set_institutionname(const std::string& institutionname);

    /*smallestpixelvalueinseries int
      (0028,0108) Smallest Pixel Value in Series SmallestPixelValueInSeries US or SS 1.*/
    int get_smallestpixelvalueinseries() const;
    void set_smallestpixelvalueinseries(const int& smallestpixelvalueinseries);

    /*largestpixelvalueinseries int
      (0028,0109) Largest Pixel Value in Series LargestPixelValueInSeries US or SS 1*/
    int get_largestpixelvalueinseries() const;
    void set_largestpixelvalueinseries(const int& largestpixelvalueinseries);

    /*laterality varchar
      (0020,0060) Laterality Laterality CS 1*/
    std::string get_laterality() const;
    void set_laterality(const std::string& laterality);

    /*performedprocedurestepstartdate date
      (0040,0244) Performed Procedure Step Start Date PerformedProcedureStepStartDate DA 1*/
    DATE_BOOST get_performedprocedurestepstartdate() const;
    void set_performedprocedurestepstartdate(const DATE_BOOST& performedprocedurestepstartdate);

    /*performedprocedurestepstarttime time
      (0040,0245) Performed Procedure Step Start Time PerformedProcedureStepStartTime TM 1*/
    TIME_BOOST get_performedprocedurestepstarttime() const;
    void set_performedprocedurestepstarttime(const TIME_BOOST& performedprocedurestepstarttime);

    /*performedprocedurestepid varchar
      (0040,0253) Performed Procedure Step ID PerformedProcedureStepID SH 1*/
    std::string get_performedprocedurestepid() const;
    void set_performedprocedurestepid(const std::string& performedprocedurestepid);

    /*performedprocedurestepdescription varchar
      (0040,0254) Performed Procedure Step Description  PerformedProcedureStepDescription LO 1*/
    std::string get_performedprocedurestepdescription() const;
    void set_performedprocedurestepdescription(const std::string& performedprocedurestepdescription);

    /*seriestype varchar
      (0054,1000) Series Type SeriesType CS 2,  A multi-valued indicator of the type of             Series. See C.8.9.1.1.4 for explanation.  Value 1 Enumerated Values:  STATIC             DYNAMIC  GATED WHOLE BODY  Value 2 Enumerated Values: IMAGE             REPROJECTION*/
    std::string get_seriestype() const;
    void set_seriestype(const std::string& seriestype);

    /*sourceisotopename varchar
      (300A,0226) Source Isotope Name SourceIsotopeName LO 1*/
    std::string get_sourceisotopename() const;
    void set_sourceisotopename(const std::string& sourceisotopename);

    /*radionuclidetotaldose varchar
      (0018,1074) Radionuclide Total Dose RadionuclideTotalDose DS 1,The radiopharmaceutical dose administered to the patient measured in Becquerels (Bq) at the Radiopharmaceutical Start Time (0018,1072). Note: In other IODs, such as the NM IOD,  this same attribute is specified in MegaBecquerels (MBq).*/
    std::string get_radionuclidetotaldose() const;
    void set_radionuclidetotaldose(const std::string& radionuclidetotaldose);

    /*radiopharmaceuticalstartdatetime datetime
      (0018,1078) Radiopharmaceutical Start DateTime RadiopharmaceuticalStartDateTime DT 1*/
    DATETIME_BOOST get_radiopharmaceuticalstartdatetime() const;
    void set_radiopharmaceuticalstartdatetime(const DATETIME_BOOST& radiopharmaceuticalstartdatetime);

    /*radiopharmaceutical varchar
      (0018,0031) Radiopharmaceutical Radiopharmaceutical LO 1*/
    std::string get_radiopharmaceutical() const;
    void set_radiopharmaceutical(const std::string& radiopharmaceutical);

    /*seriesprintstatus varchar
      PrintStatus,0 Unprinted,1  total  printed ,2 partly printed*/
    std::string get_seriesprintstatus() const;
    void set_seriesprintstatus(const std::string& seriesprintstatus);

    /*seriessendstatus varchar
      SeriesSendStatus,0  unsent,1  total sent,2  partly sent*/
    std::string get_seriessendstatus() const;
    void set_seriessendstatus(const std::string& seriessendstatus);

    /*seriesstoredindvd varchar
      SeriesStoredInDVD,0  Un-stored In DVD,1  Stored In DVD, 2  partly Stored In DVD*/
    std::string get_seriesstoredindvd() const;
    void set_seriesstoredindvd(const std::string& seriesstoredindvd);

    /*seriesstoredinusb varchar
      SeriesStoredInUSB,0  Un-stored In USB,1  Stored In USB,2 partly Stored In USB*/
    std::string get_seriesstoredinusb() const;
    void set_seriesstoredinusb(const std::string& seriesstoredinusb);

    /*seriespatientagegroup varchar
      The age group of this patient,Infant, Children ,Adult */
    std::string get_seriespatientagegroup() const;
    void set_seriespatientagegroup(const std::string& seriespatientagegroup);

    /*seriesprotect varchar
      SeriesProtect*/
    std::string get_seriesprotect() const;
    void set_seriesprotect(const std::string& seriesprotect);

    /*seriesconfirmstatus int
      SeriesConfirmStatus:0-Accepted, 1-Un-accepted, 2-Rejected,3-Deleted*/
    int get_seriesconfirmstatus() const;
    void set_seriesconfirmstatus(const int& seriesconfirmstatus);

    /*seriesrejectreason varchar
      SeriesRejectReason*/
    std::string get_seriesrejectreason() const;
    void set_seriesrejectreason(const std::string& seriesrejectreason);

    /*seriesconfirmdatetime datetime
      SeriesConfirmDatetime*/
    DATETIME_BOOST get_seriesconfirmdatetime() const;
    void set_seriesconfirmdatetime(const DATETIME_BOOST& seriesconfirmdatetime);

    /*resolution varchar
      Resolution*/
    std::string get_resolution() const;
    void set_resolution(const std::string& resolution);

    /*recincrement varchar
      RecIncrement*/
    std::string get_recincrement() const;
    void set_recincrement(const std::string& recincrement);

    /*scantype varchar
      ScanType*/
    std::string get_scantype() const;
    void set_scantype(const std::string& scantype);

    /*presentationintenttype varchar
      (0008,0068) Presentation Intent Type PresentationIntentType CS 1,Identifies the intent of the images that are contained within this Series. Enumerated Values: FOR PRESENTATION FOR PROCESSING See C.8.11.1.1.1 for further explanation.*/
    std::string get_presentationintenttype() const;
    void set_presentationintenttype(const std::string& presentationintenttype);

    /*seriesscanid varchar
      (0069, 0311) PRIVATE_DCM_TAG_SERIES_ScanID SH Signify the Scan*/
    std::string get_seriesscanid() const;
    void set_seriesscanid(const std::string& seriesscanid);

    /*seriesaprid varchar
      (0069, 0312) PRIVATE_DCM_TAG_SERIES_APRID SH Signify the APR*/
    std::string get_seriesaprid() const;
    void set_seriesaprid(const std::string& seriesaprid);

    /*seriesaprgroupname varchar
      (0069, 0314) PRIVATE_DCM_TAG_SERIES_APRGroupName SH The name of the APR group*/
    std::string get_seriesaprgroupname() const;
    void set_seriesaprgroupname(const std::string& seriesaprgroupname);

    /*seriesaprgroupid varchar
      (0069, 0315) PRIVATE_DCM_TAG_SERIES_APRGroupId SH The identify of the APR group*/
    std::string get_seriesaprgroupid() const;
    void set_seriesaprgroupid(const std::string& seriesaprgroupid);

    /*seriesisfavourite varchar
      (0069, 0313) PRIVATE_DCM_TAG_SERIES_IsFavourite SH, Is the APR a favourite one.*/
    std::string get_seriesisfavourite() const;
    void set_seriesisfavourite(const std::string& seriesisfavourite);

    /*isfreecassette int
      flag indicate whether the image is acquired by free cassette 0:Not free cassette 1:Free cassette*/
    int get_isfreecassette() const;
    void set_isfreecassette(const int& isfreecassette);

    /*seriesexamplefigurepath varchar
      (0069, 0316) PRIVATE_DCM_TAG_SERIES_ExampleFigurePath ST , The path of the Example figure of the APR*/
    std::string get_seriesexamplefigurepath() const;
    void set_seriesexamplefigurepath(const std::string& seriesexamplefigurepath);

    /*seriespsasid varchar
      (0069, 0317) PRIVATE_DCM_TAG_SERIES_PSASId SH Patient size and Aquisiton system combination id*/
    std::string get_seriespsasid() const;
    void set_seriespsasid(const std::string& seriespsasid);

    /*seriespatienttypeid varchar
      (0069, 0318) PRIVATE_DCM_TAG_SERIES_PatientTypeId SH The age group of this patient*/
    std::string get_seriespatienttypeid() const;
    void set_seriespatienttypeid(const std::string& seriespatienttypeid);

    /*seriesissecondcaptured int
      (0069, 0319) PRIVATE_DCM_TAG_SERIES_IsSecondCaptured SL Is the series saved as from another series 0:NO 1:YES*/
    int get_seriesissecondcaptured() const;
    void set_seriesissecondcaptured(const int& seriesissecondcaptured);

    /*seriesisexamed int
      (0069, 0320)  PRIVATE_DCM_TAG_SERIES_IsExamed SL flag indicate whether the series is examed or not.0 symbol not examed, 1 examed.*/
    int get_seriesisexamed() const;
    void set_seriesisexamed(const int& seriesisexamed);

    /*rawdataacquisitionnumber int
      RawDataAcquisitionNumber*/
    int get_rawdataacquisitionnumber() const;
    void set_rawdataacquisitionnumber(const int& rawdataacquisitionnumber);

    /*rawdataacquisitiondate date
      RawDataAcquisitionDate*/
    DATE_BOOST get_rawdataacquisitiondate() const;
    void set_rawdataacquisitiondate(const DATE_BOOST& rawdataacquisitiondate);

    /*rawdataacquisitiontime time
      RawDataAcquisitionTime*/
    TIME_BOOST get_rawdataacquisitiontime() const;
    void set_rawdataacquisitiontime(const TIME_BOOST& rawdataacquisitiontime);

    /*rawdatainstanceuid varchar
      RawDataInstanceUID*/
    std::string get_rawdatainstanceuid() const;
    void set_rawdatainstanceuid(const std::string& rawdatainstanceuid);

    /*reconresult int
      ReconResult 0-None recon 1-Inprogress 2-Completed 3-Failed*/
    int get_reconresult() const;
    void set_reconresult(const int& reconresult);

    /*seriesthumbnail blob
      SeriesThumbnailFilePath*/
    std::string get_seriesthumbnail() const;
    void set_seriesthumbnail(const std::string& seriesthumbnail);

    /*seriescomments varchar
      SeriesComments*/
    std::string get_seriescomments() const;
    void set_seriescomments(const std::string& seriescomments);

    /*protocolid varchar
      ProtocolID*/
    std::string get_protocolid() const;
    void set_protocolid(const std::string& protocolid);

    /*procedurename varchar
      ProcedureName*/
    std::string get_procedurename() const;
    void set_procedurename(const std::string& procedurename);

    /*protocollink varchar
      ProtocolLink*/
    std::string get_protocollink() const;
    void set_protocollink(const std::string& protocollink);

    /*imagetype int
      (0008,0008) Image Type ImageType CS 2-n.  n=8,Image identification characteristics. See C.7.6.1.1.2 for Defined Terms and further explanation.*/
    int get_imagetype() const;
    void set_imagetype(const int& imagetype);

    /*seriesreserved0 varchar
      SeriesReserved0*/
    std::string get_seriesreserved0() const;
    void set_seriesreserved0(const std::string& seriesreserved0);

    /*seriesreserved1 varchar
      SeriesReserved1*/
    std::string get_seriesreserved1() const;
    void set_seriesreserved1(const std::string& seriesreserved1);

    /*patientname varchar
      在创建水箱文件的功能中用来存在水箱的名字/add xi.chen*/
    std::string get_patientname() const;
    void set_patientname(const std::string& patientname);

    /*manufacturermodelname varchar
      Add for 4D CT*/
    std::string get_manufacturermodelname() const;
    void set_manufacturermodelname(const std::string& manufacturermodelname);

    /*acquisitiontime datetime
      Add for 4D CT*/
    DATETIME_BOOST get_acquisitiontime() const;
    void set_acquisitiontime(const DATETIME_BOOST& acquisitiontime);

    /*frameofreferenceuid varchar
      Add for 4D CT*/
    std::string get_frameofreferenceuid() const;
    void set_frameofreferenceuid(const std::string& frameofreferenceuid);

    /*isphantom tinyint
      是否是Phantom序列*/
    bool get_isphantom() const;
    void set_isphantom(const bool& isphantom);

    /*tabletopposition float
      在series是中保存tabletop在image中的位置*/
    float get_tabletopposition() const;
    void set_tabletopposition(const float& tabletopposition);

    /*phase int
      4DCT需要*/
    int get_phase() const;
    void set_phase(const int& phase);

    /*ismainphase tinyint
      用来标示该series是4DCT组中的主序列。*/
    bool get_ismainphase() const;
    void set_ismainphase(const bool& ismainphase);

    /*relatedwavedatafilepath varchar
      与VSM相关/baoqin add*/
    std::string get_relatedwavedatafilepath() const;
    void set_relatedwavedatafilepath(const std::string& relatedwavedatafilepath);

    /*isselected tinyint
      为DEFAULT CBCT相关/baoqin add*/
    bool get_isselected() const;
    void set_isselected(const bool& isselected);

    /*gatingtype int
      门控私有Tag*/
    int get_gatingtype() const;
    void set_gatingtype(const int& gatingtype);

    /*binscope int
      门控私有Tag*/
    int get_binscope() const;
    void set_binscope(const int& binscope);

    /*currentbininfo varchar
      门控私有Tag*/
    std::string get_currentbininfo() const;
    void set_currentbininfo(const std::string& currentbininfo);

    /*respiratorytype int
      门控私有Tag*/
    int get_respiratorytype() const;
    void set_respiratorytype(const int& respiratorytype);

    /*breathrate float
      门控私有Tag*/
    float get_breathrate() const;
    void set_breathrate(const float& breathrate);

    /*binmode int
      门控私有Tag*/
    int get_binmode() const;
    void set_binmode(const int& binmode);

    /*totalbinnumber int
      门控私有Tag*/
    int get_totalbinnumber() const;
    void set_totalbinnumber(const int& totalbinnumber);

    /*binimagetotalnumber int
      门控私有Tag*/
    int get_binimagetotalnumber() const;
    void set_binimagetotalnumber(const int& binimagetotalnumber);

    /*isqa tinyint
      用来表示该序列被QAPlan使用。*/
    bool get_isqa() const;
    void set_isqa(const bool& isqa);

    /*convolutionkernal varchar
      ReconKernal  有"edge enhancing","edge preserving", "smoothing" 三个值 的可能*/
    std::string get_convolutionkernal() const;
    void set_convolutionkernal(const std::string& convolutionkernal);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    //////////////////////////////////////////////////////////////////////////
    RtImage3DHeader* get_header();
    const RtImage3DHeader* get_header() const;

    char* get_imagedata(unsigned long* ulSize) const;
    void set_imagedata(char* imagedata, unsigned long ulSize);

    std::string get_slicethickness() const;
    void set_slicethickness(const std::string& slicethickness);
    
    std::string get_studyid() const;
    void set_studyid(const std::string& studyid);
    
    std::string get_studydescription() const;
    void set_studydescription(const std::string& studydescription);
    
    std::string get_patientid() const;
    void set_patientid(const std::string& patientid);
    
    std::string get_patientbirthdate() const;
    void set_patientbirthdate(const std::string& patientbirthdate);
    
    std::string get_patientage() const;
    void set_patientage(const std::string& patientage);
    
    std::string get_patientsex() const;
    void set_patientsex(const std::string& patientsex);

    std::string get_patientuid() const;
    void set_patientuid(const std::string& patientuid);

private:
    RtSeriesImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtSeriesImp
{

public:
    //default is false to improve performance
    RtSeriesImp(bool bGeneraterUid = false);

    ~RtSeriesImp();

    RtSeriesImp(const RtSeriesImp& series);

    RtSeriesImp& operator = (const RtSeriesImp& series);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //sopinstanceuid
    inline std::string get_sopinstanceuid() const { return m_sopinstanceuid;}
    inline void set_sopinstanceuid(const std::string& sopinstanceuid) { m_sopinstanceuid = sopinstanceuid;}

    //studyuid
    inline std::string get_studyuid() const { return m_studyuid;}
    inline void set_studyuid(const std::string& studyuid) { m_studyuid = studyuid;}

    //seriesgroupuid
    inline std::string get_seriesgroupuid() const { return m_seriesgroupuid;}
    inline void set_seriesgroupuid(const std::string& seriesgroupuid) { m_seriesgroupuid = seriesgroupuid;}

    //courseuid
    inline std::string get_courseuid() const { return m_courseuid;}
    inline void set_courseuid(const std::string& courseuid) { m_courseuid = courseuid;}

    //ct2densityuid
    inline std::string get_ct2densityuid() const { return m_ct2densityuid;}
    inline void set_ct2densityuid(const std::string& ct2densityuid) { m_ct2densityuid = ct2densityuid;}

    //modality
    inline std::string get_modality() const { return m_modality;}
    inline void set_modality(const std::string& modality) { m_modality = modality;}

    //relatedcbctuid
    inline std::string get_relatedcbctuid() const { return m_relatedcbctuid;}
    inline void set_relatedcbctuid(const std::string& relatedcbctuid) { m_relatedcbctuid = relatedcbctuid;}

    //relatedfbctuid
    inline std::string get_relatedfbctuid() const { return m_relatedfbctuid;}
    inline void set_relatedfbctuid(const std::string& relatedfbctuid) { m_relatedfbctuid = relatedfbctuid;}

    //sessionuid
    inline std::string get_sessionuid() const { return m_sessionuid;}
    inline void set_sessionuid(const std::string& sessionuid) { m_sessionuid = sessionuid;}

    //seriesname
    inline std::string get_seriesname() const { return m_seriesname;}
    inline void set_seriesname(const std::string& seriesname) { m_seriesname = seriesname;}

    //seriespixeldatafilepath
    inline std::string get_seriespixeldatafilepath() const { return m_seriespixeldatafilepath;}
    inline void set_seriespixeldatafilepath(const std::string& seriespixeldatafilepath) { m_seriespixeldatafilepath = seriespixeldatafilepath;}

    //seriesnumber
    inline int get_seriesnumber() const { return m_seriesnumber;}
    inline void set_seriesnumber(const int& seriesnumber) { m_seriesnumber = seriesnumber;}

    //imagelaterality
    inline std::string get_imagelaterality() const { return m_imagelaterality;}
    inline void set_imagelaterality(const std::string& imagelaterality) { m_imagelaterality = imagelaterality;}

    //seriesdate
    inline DATE_BOOST get_seriesdate() const { return m_seriesdate;}
    inline void set_seriesdate(const DATE_BOOST& seriesdate) { m_seriesdate = seriesdate;}

    //seriestime
    inline TIME_BOOST get_seriestime() const { return m_seriestime;}
    inline void set_seriestime(const TIME_BOOST& seriestime) { m_seriestime = seriestime;}

    //performingphysicianname
    inline std::string get_performingphysicianname() const { return m_performingphysicianname;}
    inline void set_performingphysicianname(const std::string& performingphysicianname) { m_performingphysicianname = performingphysicianname;}

    //protocolname
    inline std::string get_protocolname() const { return m_protocolname;}
    inline void set_protocolname(const std::string& protocolname) { m_protocolname = protocolname;}

    //seriesdescription
    inline std::string get_seriesdescription() const { return m_seriesdescription;}
    inline void set_seriesdescription(const std::string& seriesdescription) { m_seriesdescription = seriesdescription;}

    //operatorsname
    inline std::string get_operatorsname() const { return m_operatorsname;}
    inline void set_operatorsname(const std::string& operatorsname) { m_operatorsname = operatorsname;}

    //bodypartexamined
    inline std::string get_bodypartexamined() const { return m_bodypartexamined;}
    inline void set_bodypartexamined(const std::string& bodypartexamined) { m_bodypartexamined = bodypartexamined;}

    //patientposition
    inline std::string get_patientposition() const { return m_patientposition;}
    inline void set_patientposition(const std::string& patientposition) { m_patientposition = patientposition;}

    //manufacturer
    inline std::string get_manufacturer() const { return m_manufacturer;}
    inline void set_manufacturer(const std::string& manufacturer) { m_manufacturer = manufacturer;}

    //institutionname
    inline std::string get_institutionname() const { return m_institutionname;}
    inline void set_institutionname(const std::string& institutionname) { m_institutionname = institutionname;}

    //smallestpixelvalueinseries
    inline int get_smallestpixelvalueinseries() const { return m_smallestpixelvalueinseries;}
    inline void set_smallestpixelvalueinseries(const int& smallestpixelvalueinseries) { m_smallestpixelvalueinseries = smallestpixelvalueinseries;}

    //largestpixelvalueinseries
    inline int get_largestpixelvalueinseries() const { return m_largestpixelvalueinseries;}
    inline void set_largestpixelvalueinseries(const int& largestpixelvalueinseries) { m_largestpixelvalueinseries = largestpixelvalueinseries;}

    //laterality
    inline std::string get_laterality() const { return m_laterality;}
    inline void set_laterality(const std::string& laterality) { m_laterality = laterality;}

    //performedprocedurestepstartdate
    inline DATE_BOOST get_performedprocedurestepstartdate() const { return m_performedprocedurestepstartdate;}
    inline void set_performedprocedurestepstartdate(const DATE_BOOST& performedprocedurestepstartdate) { m_performedprocedurestepstartdate = performedprocedurestepstartdate;}

    //performedprocedurestepstarttime
    inline TIME_BOOST get_performedprocedurestepstarttime() const { return m_performedprocedurestepstarttime;}
    inline void set_performedprocedurestepstarttime(const TIME_BOOST& performedprocedurestepstarttime) { m_performedprocedurestepstarttime = performedprocedurestepstarttime;}

    //performedprocedurestepid
    inline std::string get_performedprocedurestepid() const { return m_performedprocedurestepid;}
    inline void set_performedprocedurestepid(const std::string& performedprocedurestepid) { m_performedprocedurestepid = performedprocedurestepid;}

    //performedprocedurestepdescription
    inline std::string get_performedprocedurestepdescription() const { return m_performedprocedurestepdescription;}
    inline void set_performedprocedurestepdescription(const std::string& performedprocedurestepdescription) { m_performedprocedurestepdescription = performedprocedurestepdescription;}

    //seriestype
    inline std::string get_seriestype() const { return m_seriestype;}
    inline void set_seriestype(const std::string& seriestype) { m_seriestype = seriestype;}

    //sourceisotopename
    inline std::string get_sourceisotopename() const { return m_sourceisotopename;}
    inline void set_sourceisotopename(const std::string& sourceisotopename) { m_sourceisotopename = sourceisotopename;}

    //radionuclidetotaldose
    inline std::string get_radionuclidetotaldose() const { return m_radionuclidetotaldose;}
    inline void set_radionuclidetotaldose(const std::string& radionuclidetotaldose) { m_radionuclidetotaldose = radionuclidetotaldose;}

    //radiopharmaceuticalstartdatetime
    inline DATETIME_BOOST get_radiopharmaceuticalstartdatetime() const { return m_radiopharmaceuticalstartdatetime;}
    inline void set_radiopharmaceuticalstartdatetime(const DATETIME_BOOST& radiopharmaceuticalstartdatetime) { m_radiopharmaceuticalstartdatetime = radiopharmaceuticalstartdatetime;}

    //radiopharmaceutical
    inline std::string get_radiopharmaceutical() const { return m_radiopharmaceutical;}
    inline void set_radiopharmaceutical(const std::string& radiopharmaceutical) { m_radiopharmaceutical = radiopharmaceutical;}

    //seriesprintstatus
    inline std::string get_seriesprintstatus() const { return m_seriesprintstatus;}
    inline void set_seriesprintstatus(const std::string& seriesprintstatus) { m_seriesprintstatus = seriesprintstatus;}

    //seriessendstatus
    inline std::string get_seriessendstatus() const { return m_seriessendstatus;}
    inline void set_seriessendstatus(const std::string& seriessendstatus) { m_seriessendstatus = seriessendstatus;}

    //seriesstoredindvd
    inline std::string get_seriesstoredindvd() const { return m_seriesstoredindvd;}
    inline void set_seriesstoredindvd(const std::string& seriesstoredindvd) { m_seriesstoredindvd = seriesstoredindvd;}

    //seriesstoredinusb
    inline std::string get_seriesstoredinusb() const { return m_seriesstoredinusb;}
    inline void set_seriesstoredinusb(const std::string& seriesstoredinusb) { m_seriesstoredinusb = seriesstoredinusb;}

    //seriespatientagegroup
    inline std::string get_seriespatientagegroup() const { return m_seriespatientagegroup;}
    inline void set_seriespatientagegroup(const std::string& seriespatientagegroup) { m_seriespatientagegroup = seriespatientagegroup;}

    //seriesprotect
    inline std::string get_seriesprotect() const { return m_seriesprotect;}
    inline void set_seriesprotect(const std::string& seriesprotect) { m_seriesprotect = seriesprotect;}

    //seriesconfirmstatus
    inline int get_seriesconfirmstatus() const { return m_seriesconfirmstatus;}
    inline void set_seriesconfirmstatus(const int& seriesconfirmstatus) { m_seriesconfirmstatus = seriesconfirmstatus;}

    //seriesrejectreason
    inline std::string get_seriesrejectreason() const { return m_seriesrejectreason;}
    inline void set_seriesrejectreason(const std::string& seriesrejectreason) { m_seriesrejectreason = seriesrejectreason;}

    //seriesconfirmdatetime
    inline DATETIME_BOOST get_seriesconfirmdatetime() const { return m_seriesconfirmdatetime;}
    inline void set_seriesconfirmdatetime(const DATETIME_BOOST& seriesconfirmdatetime) { m_seriesconfirmdatetime = seriesconfirmdatetime;}

    //resolution
    inline std::string get_resolution() const { return m_resolution;}
    inline void set_resolution(const std::string& resolution) { m_resolution = resolution;}

    //recincrement
    inline std::string get_recincrement() const { return m_recincrement;}
    inline void set_recincrement(const std::string& recincrement) { m_recincrement = recincrement;}

    //scantype
    inline std::string get_scantype() const { return m_scantype;}
    inline void set_scantype(const std::string& scantype) { m_scantype = scantype;}

    //presentationintenttype
    inline std::string get_presentationintenttype() const { return m_presentationintenttype;}
    inline void set_presentationintenttype(const std::string& presentationintenttype) { m_presentationintenttype = presentationintenttype;}

    //seriesscanid
    inline std::string get_seriesscanid() const { return m_seriesscanid;}
    inline void set_seriesscanid(const std::string& seriesscanid) { m_seriesscanid = seriesscanid;}

    //seriesaprid
    inline std::string get_seriesaprid() const { return m_seriesaprid;}
    inline void set_seriesaprid(const std::string& seriesaprid) { m_seriesaprid = seriesaprid;}

    //seriesaprgroupname
    inline std::string get_seriesaprgroupname() const { return m_seriesaprgroupname;}
    inline void set_seriesaprgroupname(const std::string& seriesaprgroupname) { m_seriesaprgroupname = seriesaprgroupname;}

    //seriesaprgroupid
    inline std::string get_seriesaprgroupid() const { return m_seriesaprgroupid;}
    inline void set_seriesaprgroupid(const std::string& seriesaprgroupid) { m_seriesaprgroupid = seriesaprgroupid;}

    //seriesisfavourite
    inline std::string get_seriesisfavourite() const { return m_seriesisfavourite;}
    inline void set_seriesisfavourite(const std::string& seriesisfavourite) { m_seriesisfavourite = seriesisfavourite;}

    //isfreecassette
    inline int get_isfreecassette() const { return m_isfreecassette;}
    inline void set_isfreecassette(const int& isfreecassette) { m_isfreecassette = isfreecassette;}

    //seriesexamplefigurepath
    inline std::string get_seriesexamplefigurepath() const { return m_seriesexamplefigurepath;}
    inline void set_seriesexamplefigurepath(const std::string& seriesexamplefigurepath) { m_seriesexamplefigurepath = seriesexamplefigurepath;}

    //seriespsasid
    inline std::string get_seriespsasid() const { return m_seriespsasid;}
    inline void set_seriespsasid(const std::string& seriespsasid) { m_seriespsasid = seriespsasid;}

    //seriespatienttypeid
    inline std::string get_seriespatienttypeid() const { return m_seriespatienttypeid;}
    inline void set_seriespatienttypeid(const std::string& seriespatienttypeid) { m_seriespatienttypeid = seriespatienttypeid;}

    //seriesissecondcaptured
    inline int get_seriesissecondcaptured() const { return m_seriesissecondcaptured;}
    inline void set_seriesissecondcaptured(const int& seriesissecondcaptured) { m_seriesissecondcaptured = seriesissecondcaptured;}

    //seriesisexamed
    inline int get_seriesisexamed() const { return m_seriesisexamed;}
    inline void set_seriesisexamed(const int& seriesisexamed) { m_seriesisexamed = seriesisexamed;}

    //rawdataacquisitionnumber
    inline int get_rawdataacquisitionnumber() const { return m_rawdataacquisitionnumber;}
    inline void set_rawdataacquisitionnumber(const int& rawdataacquisitionnumber) { m_rawdataacquisitionnumber = rawdataacquisitionnumber;}

    //rawdataacquisitiondate
    inline DATE_BOOST get_rawdataacquisitiondate() const { return m_rawdataacquisitiondate;}
    inline void set_rawdataacquisitiondate(const DATE_BOOST& rawdataacquisitiondate) { m_rawdataacquisitiondate = rawdataacquisitiondate;}

    //rawdataacquisitiontime
    inline TIME_BOOST get_rawdataacquisitiontime() const { return m_rawdataacquisitiontime;}
    inline void set_rawdataacquisitiontime(const TIME_BOOST& rawdataacquisitiontime) { m_rawdataacquisitiontime = rawdataacquisitiontime;}

    //rawdatainstanceuid
    inline std::string get_rawdatainstanceuid() const { return m_rawdatainstanceuid;}
    inline void set_rawdatainstanceuid(const std::string& rawdatainstanceuid) { m_rawdatainstanceuid = rawdatainstanceuid;}

    //reconresult
    inline int get_reconresult() const { return m_reconresult;}
    inline void set_reconresult(const int& reconresult) { m_reconresult = reconresult;}

    //seriesthumbnail
    inline std::string get_seriesthumbnail() const { return m_seriesthumbnail;}
    inline void set_seriesthumbnail(const std::string& seriesthumbnail) { m_seriesthumbnail = seriesthumbnail;}

    //seriescomments
    inline std::string get_seriescomments() const { return m_seriescomments;}
    inline void set_seriescomments(const std::string& seriescomments) { m_seriescomments = seriescomments;}

    //protocolid
    inline std::string get_protocolid() const { return m_protocolid;}
    inline void set_protocolid(const std::string& protocolid) { m_protocolid = protocolid;}

    //procedurename
    inline std::string get_procedurename() const { return m_procedurename;}
    inline void set_procedurename(const std::string& procedurename) { m_procedurename = procedurename;}

    //protocollink
    inline std::string get_protocollink() const { return m_protocollink;}
    inline void set_protocollink(const std::string& protocollink) { m_protocollink = protocollink;}

    //imagetype
    inline int get_imagetype() const { return m_imagetype;}
    inline void set_imagetype(const int& imagetype) { m_imagetype = imagetype;}

    //seriesreserved0
    inline std::string get_seriesreserved0() const { return m_seriesreserved0;}
    inline void set_seriesreserved0(const std::string& seriesreserved0) { m_seriesreserved0 = seriesreserved0;}

    //seriesreserved1
    inline std::string get_seriesreserved1() const { return m_seriesreserved1;}
    inline void set_seriesreserved1(const std::string& seriesreserved1) { m_seriesreserved1 = seriesreserved1;}

    //patientname
    inline std::string get_patientname() const { return m_patientname;}
    inline void set_patientname(const std::string& patientname) { m_patientname = patientname;}

    //manufacturermodelname
    inline std::string get_manufacturermodelname() const { return m_manufacturermodelname;}
    inline void set_manufacturermodelname(const std::string& manufacturermodelname) { m_manufacturermodelname = manufacturermodelname;}

    //acquisitiontime
    inline DATETIME_BOOST get_acquisitiontime() const { return m_acquisitiontime;}
    inline void set_acquisitiontime(const DATETIME_BOOST& acquisitiontime) { m_acquisitiontime = acquisitiontime;}

    //frameofreferenceuid
    inline std::string get_frameofreferenceuid() const { return m_frameofreferenceuid;}
    inline void set_frameofreferenceuid(const std::string& frameofreferenceuid) { m_frameofreferenceuid = frameofreferenceuid;}

    //isphantom
    inline bool get_isphantom() const { return m_isphantom;}
    inline void set_isphantom(const bool& isphantom) { m_isphantom = isphantom;}

    //tabletopposition
    inline float get_tabletopposition() const { return m_tabletopposition;}
    inline void set_tabletopposition(const float& tabletopposition) { m_tabletopposition = tabletopposition;}

    //phase
    inline int get_phase() const { return m_phase;}
    inline void set_phase(const int& phase) { m_phase = phase;}

    //ismainphase
    inline bool get_ismainphase() const { return m_ismainphase;}
    inline void set_ismainphase(const bool& ismainphase) { m_ismainphase = ismainphase;}

    //relatedwavedatafilepath
    inline std::string get_relatedwavedatafilepath() const { return m_relatedwavedatafilepath;}
    inline void set_relatedwavedatafilepath(const std::string& relatedwavedatafilepath) { m_relatedwavedatafilepath = relatedwavedatafilepath;}

    //isselected
    inline bool get_isselected() const { return m_isselected;}
    inline void set_isselected(const bool& isselected) { m_isselected = isselected;}

    //gatingtype
    inline int get_gatingtype() const { return m_gatingtype;}
    inline void set_gatingtype(const int& gatingtype) { m_gatingtype = gatingtype;}

    //binscope
    inline int get_binscope() const { return m_binscope;}
    inline void set_binscope(const int& binscope) { m_binscope = binscope;}

    //currentbininfo
    inline std::string get_currentbininfo() const { return m_currentbininfo;}
    inline void set_currentbininfo(const std::string& currentbininfo) { m_currentbininfo = currentbininfo;}

    //respiratorytype
    inline int get_respiratorytype() const { return m_respiratorytype;}
    inline void set_respiratorytype(const int& respiratorytype) { m_respiratorytype = respiratorytype;}

    //breathrate
    inline float get_breathrate() const { return m_breathrate;}
    inline void set_breathrate(const float& breathrate) { m_breathrate = breathrate;}

    //binmode
    inline int get_binmode() const { return m_binmode;}
    inline void set_binmode(const int& binmode) { m_binmode = binmode;}

    //totalbinnumber
    inline int get_totalbinnumber() const { return m_totalbinnumber;}
    inline void set_totalbinnumber(const int& totalbinnumber) { m_totalbinnumber = totalbinnumber;}

    //binimagetotalnumber
    inline int get_binimagetotalnumber() const { return m_binimagetotalnumber;}
    inline void set_binimagetotalnumber(const int& binimagetotalnumber) { m_binimagetotalnumber = binimagetotalnumber;}

    //isqa
    inline bool get_isqa() const { return m_isqa;}
    inline void set_isqa(const bool& isqa) { m_isqa = isqa;}

    //convolutionkernal
    inline std::string get_convolutionkernal() const { return m_convolutionkernal;}
    inline void set_convolutionkernal(const std::string& convolutionkernal) { m_convolutionkernal = convolutionkernal;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //////////////////////////////////////////////////////////////////////////
    inline RtImage3DHeader* get_header() { return m_header;}
    inline const RtImage3DHeader* get_header() const { return m_header;}

    inline char* get_imagedata(unsigned long* ulSize) const { *ulSize=m_imagesize; return m_imagedata;}
    inline void set_imagedata(char* imagedata, unsigned long ulSize) 
    {
        if (nullptr != imagedata && imagedata != m_imagedata && ulSize>0)
        {
            DEL_ARRAY(m_imagedata);
            m_imagedata = new char[ulSize];
            memcpy(m_imagedata, imagedata, ulSize * sizeof(char));
            m_imagesize = ulSize;
        }
    }

    inline std::string get_slicethickness() const { return m_slicethickness;}
    inline void set_slicethickness(const std::string& slicethickness) { m_slicethickness = slicethickness;}
    
    inline std::string get_studyid() const { return m_studyid;}
    inline void set_studyid(const std::string& studyid) { m_studyid = studyid;}
    
    inline std::string get_studydescription() const { return m_studydescription;}
    inline void set_studydescription(const std::string& studydescription) { m_studydescription = studydescription;}
    
    inline std::string get_patientid() const { return m_patientid;}
    inline void set_patientid(const std::string& patientid) { m_patientid = patientid;}
    
    inline std::string get_patientbirthdate() const { return m_patientbirthdate;}
    inline void set_patientbirthdate(const std::string& patientbirthdate) { m_patientbirthdate = patientbirthdate;}
    
    inline std::string get_patientage() const { return m_patientage;}
    inline void set_patientage(const std::string& patientage) { m_patientage = patientage;}
    
    inline std::string get_patientsex() const { return m_patientsex;}
    inline void set_patientsex(const std::string& patientsex) { m_patientsex = patientsex;}

    inline std::string get_patientuid() const { return m_patientuid;}
    inline void set_patientuid(const std::string& patientuid) { m_patientuid = patientuid;}

private:    //94 parameters
    std::string						m_uid;
    std::string						m_sopinstanceuid;
    std::string						m_studyuid;
    std::string						m_seriesgroupuid;
    std::string						m_courseuid;
    std::string						m_ct2densityuid;
    std::string						m_modality;
    std::string						m_relatedcbctuid;
    std::string						m_relatedfbctuid;
    std::string						m_sessionuid;
    std::string						m_seriesname;
    std::string						m_seriespixeldatafilepath;
    int								m_seriesnumber;
    std::string						m_imagelaterality;
    DATE_BOOST						m_seriesdate;
    TIME_BOOST						m_seriestime;
    std::string						m_performingphysicianname;
    std::string						m_protocolname;
    std::string						m_seriesdescription;
    std::string						m_operatorsname;
    std::string						m_bodypartexamined;
    std::string						m_patientposition;
    std::string						m_manufacturer;
    std::string						m_institutionname;
    int								m_smallestpixelvalueinseries;
    int								m_largestpixelvalueinseries;
    std::string						m_laterality;
    DATE_BOOST						m_performedprocedurestepstartdate;
    TIME_BOOST						m_performedprocedurestepstarttime;
    std::string						m_performedprocedurestepid;
    std::string						m_performedprocedurestepdescription;
    std::string						m_seriestype;
    std::string						m_sourceisotopename;
    std::string						m_radionuclidetotaldose;
    DATETIME_BOOST					m_radiopharmaceuticalstartdatetime;
    std::string						m_radiopharmaceutical;
    std::string						m_seriesprintstatus;
    std::string						m_seriessendstatus;
    std::string						m_seriesstoredindvd;
    std::string						m_seriesstoredinusb;
    std::string						m_seriespatientagegroup;
    std::string						m_seriesprotect;
    int								m_seriesconfirmstatus;
    std::string						m_seriesrejectreason;
    DATETIME_BOOST					m_seriesconfirmdatetime;
    std::string						m_resolution;
    std::string						m_recincrement;
    std::string						m_scantype;
    std::string						m_presentationintenttype;
    std::string						m_seriesscanid;
    std::string						m_seriesaprid;
    std::string						m_seriesaprgroupname;
    std::string						m_seriesaprgroupid;
    std::string						m_seriesisfavourite;
    int								m_isfreecassette;
    std::string						m_seriesexamplefigurepath;
    std::string						m_seriespsasid;
    std::string						m_seriespatienttypeid;
    int								m_seriesissecondcaptured;
    int								m_seriesisexamed;
    int								m_rawdataacquisitionnumber;
    DATE_BOOST						m_rawdataacquisitiondate;
    TIME_BOOST						m_rawdataacquisitiontime;
    std::string						m_rawdatainstanceuid;
    int								m_reconresult;
    std::string						m_seriesthumbnail;
    std::string						m_seriescomments;
    std::string						m_protocolid;
    std::string						m_procedurename;
    std::string						m_protocollink;
    int								m_imagetype;
    std::string						m_seriesreserved0;
    std::string						m_seriesreserved1;
    std::string						m_patientname;
    std::string						m_manufacturermodelname;
    DATETIME_BOOST					m_acquisitiontime;
    std::string						m_frameofreferenceuid;
    bool							m_isphantom;
    float							m_tabletopposition;
    int								m_phase;
    bool							m_ismainphase;
    std::string						m_relatedwavedatafilepath;
    bool							m_isselected;
    int								m_gatingtype;
    int								m_binscope;
    std::string						m_currentbininfo;
    int								m_respiratorytype;
    float							m_breathrate;
    int								m_binmode;
    int								m_totalbinnumber;
    int								m_binimagetotalnumber;
    bool							m_isqa;
    std::string						m_convolutionkernal;
    DATETIME_BOOST					m_updatetime;
    //////////////////////////////////////////////////////////////////////////
    RtImage3DHeader*                m_header;
    char*                           m_imagedata;// Pointer to ImagePixelData
    unsigned long                   m_imagesize;
    //from the requirement document of Dicom_Tag_of_ImageSet.pdf
    std::string                     m_slicethickness;
    std::string                     m_studyid;
    std::string                     m_studydescription;
    std::string                     m_patientid;
    std::string                     m_patientbirthdate;
    std::string                     m_patientage;
    std::string                     m_patientsex;
    std::string                     m_patientuid;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif
