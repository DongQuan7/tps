//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_EQUIPMENT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_EQUIPMENT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum EQUIPMENT_FIELD
{
    EQUIPMENT_UID = 0,
    EQUIPMENT_MANUFACTURER,
    EQUIPMENT_INSTITUTIONNAME,
    EQUIPMENT_INSTITUTIONADDRESS,
    EQUIPMENT_STATIONNAME,
    EQUIPMENT_INSTITUTIONALEEPARTMENTNAME,
    EQUIPMENT_MANUFACTURERMODELNAME,
    EQUIPMENT_DEVICESERIALNUMBER,
    EQUIPMENT_GANTRYID,
    EQUIPMENT_SPATIALRESOLUTION,
    EQUIPMENT_DATEOFLASTCALIBRATION,
    EQUIPMENT_TIMEOFLASTCALIBRATION,
    EQUIPMENT_PIXELPADDINGVALUE,
    EQUIPMENT_SOFTWAREVERSION,
    EQUIPMENT_FIELD_MAX
};

static const char* ENUM2STRING_EQUIPMENT_FIELD[] =
{
    "UID",
    "MANUFACTURER",
    "INSTITUTIONNAME",
    "INSTITUTIONADDRESS",
    "STATIONNAME",
    "INSTITUTIONALEEPARTMENTNAME",
    "MANUFACTURERMODELNAME",
    "DEVICESERIALNUMBER",
    "GANTRYID",
    "SPATIALRESOLUTION",
    "DATEOFLASTCALIBRATION",
    "TIMEOFLASTCALIBRATION",
    "PIXELPADDINGVALUE",
    "SOFTWAREVERSION",
    "EQUIPMENT_FIELD_MAX"
};

static const char* ENUM2STRING_EQUIPMENT_FIELD_NULL = "10000000000000";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtEquipmentImp;

class RT_DB_EXPORT RtEquipment : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtEquipment(bool bGeneraterUid = false);

    ~RtEquipment();

    RtEquipment(const RtEquipment& equipment);

    RtEquipment& operator = (const RtEquipment& equipment);

    /*uid varchar
      主键*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*manufacturer varchar
      00080070
            Manufacturer of the equipment that produced the composite instances.*/
    std::string get_manufacturer() const;
    void set_manufacturer(const std::string& manufacturer);

    /*institutionname varchar
      0008:0080
            Institution where the equipment that produced the composite instances is located.*/
    std::string get_institutionname() const;
    void set_institutionname(const std::string& institutionname);

    /*Institutionaddress varchar
      00080081
            Mailing address of the institution where the equipment that produced the composite instances is located.*/
    std::string get_Institutionaddress() const;
    void set_Institutionaddress(const std::string& Institutionaddress);

    /*stationname varchar
      00081010
            User defined name identifying the machine that produced the composite instances.*/
    std::string get_stationname() const;
    void set_stationname(const std::string& stationname);

    /*institutionaleepartmentname varchar
      00081040
            Department in the institution where the equipment that produced the composite instances is located.*/
    std::string get_institutionaleepartmentname() const;
    void set_institutionaleepartmentname(const std::string& institutionaleepartmentname);

    /*manufacturermodelname varchar
      00181090
            Manufacturer's model name of the equipment that produced the composite instances.*/
    std::string get_manufacturermodelname() const;
    void set_manufacturermodelname(const std::string& manufacturermodelname);

    /*deviceserialnumber varchar
      00181000
            Manufacturer's serial number of the equipment that produced the composite instances. Note: 	This identifier corresponds to the device that actually created the images, such as a CR plate reader or a CT console, and may not be sufficient to identify all of the equipment in the imaging chain, such as the generator or gantry or plate.*/
    std::string get_deviceserialnumber() const;
    void set_deviceserialnumber(const std::string& deviceserialnumber);

    /*gantryid varchar
      00181008
            Identifier of the gantry or positioner.*/
    std::string get_gantryid() const;
    void set_gantryid(const std::string& gantryid);

    /*spatialresolution double
      00181050
            The inherent limiting resolution in mm of the acquisition equipment for high contrast objects for the data gathering and reconstruction technique chosen. If variable across the images of the series, the value at the image center.*/
    double get_spatialresolution() const;
    void set_spatialresolution(const double& spatialresolution);

    /*dateoflastcalibration date
      00181200
            Date when the image acquisition device calibration was last changed in any way. Multiple entries may be used for additional calibrations at other times. See C.7.5.1.1.1 for further explanation.*/
    DATE_BOOST get_dateoflastcalibration() const;
    void set_dateoflastcalibration(const DATE_BOOST& dateoflastcalibration);

    /*timeoflastcalibration time
      00181201
            Time when the image acquisition device calibration was last changed in any way. Multiple entries may be used. See C.7.5.1.1.1 for further explanation.*/
    TIME_BOOST get_timeoflastcalibration() const;
    void set_timeoflastcalibration(const TIME_BOOST& timeoflastcalibration);

    /*pixelpaddingvalue int
      00280120
            Single pixel value or one limit (inclusive) of a range of pixel values used in animage to pad to rectangular format or to signal background that may be suppressed. See C.7.5.1.1.2 for further explanation. Required if Pixel Padding Range Limit (0028,0121) is present. May be present otherwise. Note:	The Value Representation of this Attribute is determined by the value of Pixel Representation (0028,0103).*/
    int get_pixelpaddingvalue() const;
    void set_pixelpaddingvalue(const int& pixelpaddingvalue);

    /*softwareversion varchar
      tps software version*/
    std::string get_softwareversion() const;
    void set_softwareversion(const std::string& softwareversion);


private:
    RtEquipmentImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtEquipmentImp
{

public:
    //default is false to improve performance
    RtEquipmentImp(bool bGeneraterUid = false);

    ~RtEquipmentImp();

    RtEquipmentImp(const RtEquipmentImp& equipment);

    RtEquipmentImp& operator = (const RtEquipmentImp& equipment);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //manufacturer
    inline std::string get_manufacturer() const { return m_manufacturer;}
    inline void set_manufacturer(const std::string& manufacturer) { m_manufacturer = manufacturer;}

    //institutionname
    inline std::string get_institutionname() const { return m_institutionname;}
    inline void set_institutionname(const std::string& institutionname) { m_institutionname = institutionname;}

    //Institutionaddress
    inline std::string get_Institutionaddress() const { return m_Institutionaddress;}
    inline void set_Institutionaddress(const std::string& Institutionaddress) { m_Institutionaddress = Institutionaddress;}

    //stationname
    inline std::string get_stationname() const { return m_stationname;}
    inline void set_stationname(const std::string& stationname) { m_stationname = stationname;}

    //institutionaleepartmentname
    inline std::string get_institutionaleepartmentname() const { return m_institutionaleepartmentname;}
    inline void set_institutionaleepartmentname(const std::string& institutionaleepartmentname) { m_institutionaleepartmentname = institutionaleepartmentname;}

    //manufacturermodelname
    inline std::string get_manufacturermodelname() const { return m_manufacturermodelname;}
    inline void set_manufacturermodelname(const std::string& manufacturermodelname) { m_manufacturermodelname = manufacturermodelname;}

    //deviceserialnumber
    inline std::string get_deviceserialnumber() const { return m_deviceserialnumber;}
    inline void set_deviceserialnumber(const std::string& deviceserialnumber) { m_deviceserialnumber = deviceserialnumber;}

    //gantryid
    inline std::string get_gantryid() const { return m_gantryid;}
    inline void set_gantryid(const std::string& gantryid) { m_gantryid = gantryid;}

    //spatialresolution
    inline double get_spatialresolution() const { return m_spatialresolution;}
    inline void set_spatialresolution(const double& spatialresolution) { m_spatialresolution = spatialresolution;}

    //dateoflastcalibration
    inline DATE_BOOST get_dateoflastcalibration() const { return m_dateoflastcalibration;}
    inline void set_dateoflastcalibration(const DATE_BOOST& dateoflastcalibration) { m_dateoflastcalibration = dateoflastcalibration;}

    //timeoflastcalibration
    inline TIME_BOOST get_timeoflastcalibration() const { return m_timeoflastcalibration;}
    inline void set_timeoflastcalibration(const TIME_BOOST& timeoflastcalibration) { m_timeoflastcalibration = timeoflastcalibration;}

    //pixelpaddingvalue
    inline int get_pixelpaddingvalue() const { return m_pixelpaddingvalue;}
    inline void set_pixelpaddingvalue(const int& pixelpaddingvalue) { m_pixelpaddingvalue = pixelpaddingvalue;}

    //softwareversion
    inline std::string get_softwareversion() const { return m_softwareversion;}
    inline void set_softwareversion(const std::string& softwareversion) { m_softwareversion = softwareversion;}

private:    //14 parameters
    std::string						m_uid;
    std::string						m_manufacturer;
    std::string						m_institutionname;
    std::string						m_Institutionaddress;
    std::string						m_stationname;
    std::string						m_institutionaleepartmentname;
    std::string						m_manufacturermodelname;
    std::string						m_deviceserialnumber;
    std::string						m_gantryid;
    double							m_spatialresolution;
    DATE_BOOST						m_dateoflastcalibration;
    TIME_BOOST						m_timeoflastcalibration;
    int								m_pixelpaddingvalue;
    std::string						m_softwareversion;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif