//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_TEMPLATE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_TEMPLATE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum TEMPLATE_FIELD
{
    TEMPLATE_UID = 0,
    TEMPLATE_NAME,
    TEMPLATE_VALUE,
    TEMPLATE_DATATYPE,
    TEMPLATE_UPDATETIME,
    TEMPLATE_FIELD_MAX
};

static const char* ENUM2STRING_TEMPLATE_FIELD[] =
{
    "UID",
    "NAME",
    "VALUE",
    "DATATYPE",
    "UPDATETIME",
    "TEMPLATE_FIELD_MAX"
};

static const char* ENUM2STRING_TEMPLATE_FIELD_NULL = "10011";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtTemplateImp;

class RT_DB_EXPORT RtTemplate : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtTemplate(bool bGeneraterUid = false);

    ~RtTemplate();

    RtTemplate(const RtTemplate& temp);

    RtTemplate& operator = (const RtTemplate& temp);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*name varchar
      Name is the key of the configuraiton key value pair.*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*value varchar
      Value is the value of the configuraiton key value pair.*/
    std::string get_value() const;
    void set_value(const std::string& value);

    /*datatype int
      data type*/
    int get_datatype() const;
    void set_datatype(const int& datatype);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtTemplateImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtTemplateImp
{

public:
    //default is false to improve performance
    RtTemplateImp(bool bGeneraterUid = false);

    ~RtTemplateImp();

    RtTemplateImp(const RtTemplateImp& temp);

    RtTemplateImp& operator = (const RtTemplateImp& temp);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //value
    inline std::string get_value() const { return m_value;}
    inline void set_value(const std::string& value) { m_value = value;}

    //datatype
    inline int get_datatype() const { return m_datatype;}
    inline void set_datatype(const int& datatype) { m_datatype = datatype;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //5 parameters
    std::string						m_uid;
    std::string						m_name;
    std::string						m_value;
    int								m_datatype;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif