//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_RTIMAGE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_RTIMAGE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum RTIMAGE_FIELD
{
    RTIMAGE_UID = 0,
    RTIMAGE_SOPINSTANCEUID,
    RTIMAGE_COURSEUID,
    RTIMAGE_ISOCENTERUID,
    RTIMAGE_SERIESUID,
    RTIMAGE_DRRSETTINGUID,
    RTIMAGE_PLANUID,
    RTIMAGE_BEAMUID,
    RTIMAGE_TREATMENTBEAMUID,
    RTIMAGE_SESSIONUID,
    RTIMAGE_FBCTUID,
    RTIMAGE_IMAGEBEAMUID,
    RTIMAGE_PORTIMAGEBEAMUID,
    RTIMAGE_SAMPLESPERPIXEL,
    RTIMAGE_PHOTOMETRICINTERPRETATION,
    RTIMAGE_BITSALLOCATED,
    RTIMAGE_BITSSTORED,
    RTIMAGE_HIGHBIT,
    RTIMAGE_PIXELREPRESENTATION,
    RTIMAGE_NAME,
    RTIMAGE_RTIMAGELABEL,
    RTIMAGE_DESCRIPTION,
    RTIMAGE_IMAGETYPE,
    RTIMAGE_CONVERSIONTYPE,
    RTIMAGE_RTIMAGEPLANE,
    RTIMAGE_XRIMAGERECEPTORANGLE,
    RTIMAGE_FIRSTIMAGEPLANEPIXELSPACING,
    RTIMAGE_SECONDIMAGEPLANEPIXELSPACING,
    RTIMAGE_FIRSTRTIMAGEPOSITION,
    RTIMAGE_SECONDRTIMAGEPOSITION,
    RTIMAGE_MACHINENAME,
    RTIMAGE_PRIMARYDOSIMETERUNIT,
    RTIMAGE_SAD,
    RTIMAGE_SSD,
    RTIMAGE_SID,
    RTIMAGE_ROWS,
    RTIMAGE_COLUMNS,
    RTIMAGE_FRAME,
    RTIMAGE_PIXELDATA,
    RTIMAGE_XIMAGEXORIENTATION,
    RTIMAGE_YIMAGEXORIENTATION,
    RTIMAGE_ZIMAGEXORIENTATION,
    RTIMAGE_XIMAGEYORIENTATION,
    RTIMAGE_YIMAGEYORIENTATION,
    RTIMAGE_ZIMAGEYORIENTATION,
    RTIMAGE_ANGLE,
    RTIMAGE_WINDOWWIDTH,
    RTIMAGE_WINDOWCENTER,
    RTIMAGE_ACQUISITIONDATETIME,
    RTIMAGE_RESCALEINTERCEPT,
    RTIMAGE_RESCALESLOPE,
    RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONX,
    RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONY,
    RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONZ,
    RTIMAGE_ISSELECTED,
    RTIMAGE_COLLIMATORANGLE,
    RTIMAGE_UPDATETIME,
    RTIMAGE_PATIENTNAME,
    RTIMAGE_PATIENTID,
    RTIMAGE_PATIENTSEX,
    RTIMAGE_PATIENTBIRTHDATE,
    RTIMAGE_PATIENTAGE,
    RTIMAGE_DICOMIMAGETYPE,
    RTIMAGE_PATIENTPOSITION,
    RTIMAGE_FIELD_MAX
};

static const char* ENUM2STRING_RTIMAGE_FIELD[] =
{
    "UID",
    "SOPINSTANCEUID",
    "COURSEUID",
    "ISOCENTERUID",
    "SERIESUID",
    "DRRSETTINGUID",
    "PLANUID",
    "BEAMUID",
    "TREATMENTBEAMUID",
    "SESSIONUID",
    "FBCTUID",
    "IMAGEBEAMUID",
    "PORTIMAGEBEAMUID",
    "SAMPLESPERPIXEL",
    "PHOTOMETRICINTERPRETATION",
    "BITSALLOCATED",
    "BITSSTORED",
    "HIGHBIT",
    "PIXELREPRESENTATION",
    "NAME",
    "RTIMAGELABEL",
    "DESCRIPTION",
    "IMAGETYPE",
    "CONVERSIONTYPE",
    "RTIMAGEPLANE",
    "XRIMAGERECEPTORANGLE",
    "FIRSTIMAGEPLANEPIXELSPACING",
    "SECONDIMAGEPLANEPIXELSPACING",
    "FIRSTRTIMAGEPOSITION",
    "SECONDRTIMAGEPOSITION",
    "MACHINENAME",
    "PRIMARYDOSIMETERUNIT",
    "SAD",
    "SSD",
    "SID",
    "ROWS",
    "COLUMNS",
    "FRAME",
    "PIXELDATA",
    "XIMAGEXORIENTATION",
    "YIMAGEXORIENTATION",
    "ZIMAGEXORIENTATION",
    "XIMAGEYORIENTATION",
    "YIMAGEYORIENTATION",
    "ZIMAGEYORIENTATION",
    "ANGLE",
    "WINDOWWIDTH",
    "WINDOWCENTER",
    "ACQUISITIONDATETIME",
    "RESCALEINTERCEPT",
    "RESCALESLOPE",
    "XRAYIMAGERECEPTORTRANSLATIONX",
    "XRAYIMAGERECEPTORTRANSLATIONY",
    "XRAYIMAGERECEPTORTRANSLATIONZ",
    "ISSELECTED",
    "COLLIMATORANGLE",
    "UPDATETIME",
    "PATIENTNAME",
    "PATIENTID",
    "PATIENTSEX",
    "PATIENTBIRTHDATE",
    "PATIENTAGE",
    "DICOMIMAGETYPE",
    "PATIENTPOSITION",
    "RTIMAGE_FIELD_MAX"
};

static const char* ENUM2STRING_RTIMAGE_FIELD_NULL = "1000000000000000000000000000000000000000000000000000000010000000";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtRtimageImp;

class RT_DB_EXPORT RtRtimage : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtRtimage(bool bGeneraterUid = false);

    ~RtRtimage();

    RtRtimage(const RtRtimage& rtimage);

    RtRtimage& operator = (const RtRtimage& rtimage);

    /*uid varchar
      */
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*sopinstanceuid varchar
      RT Image Dicom Instance UID*/
    std::string get_sopinstanceuid() const;
    void set_sopinstanceuid(const std::string& sopinstanceuid);

    /*courseuid varchar
      关联的CouseUID*/
    std::string get_courseuid() const;
    void set_courseuid(const std::string& courseuid);

    /*isocenteruid varchar
      关联的等中心点UID*/
    std::string get_isocenteruid() const;
    void set_isocenteruid(const std::string& isocenteruid);

    /*seriesuid varchar
      关联的序列UID*/
    std::string get_seriesuid() const;
    void set_seriesuid(const std::string& seriesuid);

    /*drrsettinguid varchar
      关联的DrrSetting UID*/
    std::string get_drrsettinguid() const;
    void set_drrsettinguid(const std::string& drrsettinguid);

    /*planuid varchar
      关联的PlanUID*/
    std::string get_planuid() const;
    void set_planuid(const std::string& planuid);

    /*beamuid varchar
      关联的BeamUID*/
    std::string get_beamuid() const;
    void set_beamuid(const std::string& beamuid);

    /*treatmentbeamuid varchar
      关联的treatmentUID*/
    std::string get_treatmentbeamuid() const;
    void set_treatmentbeamuid(const std::string& treatmentbeamuid);

    /*sessionuid varchar
      关联的sessionuid,再确认是谁使用.*/
    std::string get_sessionuid() const;
    void set_sessionuid(const std::string& sessionuid);

    /*fbctuid varchar
      关联的Fbct uid*/
    std::string get_fbctuid() const;
    void set_fbctuid(const std::string& fbctuid);

    /*imagebeamuid varchar
      关联的image beam uid*/
    std::string get_imagebeamuid() const;
    void set_imagebeamuid(const std::string& imagebeamuid);

    /*portimagebeamuid varchar
      关联的Portimage beam uid*/
    std::string get_portimagebeamuid() const;
    void set_portimagebeamuid(const std::string& portimagebeamuid);

    /*samplesperpixel int
      00280002 Number of samples (planes) in this image. See C.8.8.2.6.1 for specialization.*/
    int get_samplesperpixel() const;
    void set_samplesperpixel(const int& samplesperpixel);

    /*photometricinterpretation varchar
      00280004 Specifies the intended interpretation of the pixel data. See C.8.8.2.6.2 for specialization.*/
    std::string get_photometricinterpretation() const;
    void set_photometricinterpretation(const std::string& photometricinterpretation);

    /*bitsallocated int
      00280100 Number of bits allocated for each pixel sample. Each sample shall have the same number of bits allocated. See C.8.8.2.6.3 for specialization.*/
    int get_bitsallocated() const;
    void set_bitsallocated(const int& bitsallocated);

    /*bitsstored int
      00280101 Number of bits stored for each pixel sample. Each sample shall have the same number of bits stored. See C.8.8.2.6.4 for specialization.*/
    int get_bitsstored() const;
    void set_bitsstored(const int& bitsstored);

    /*highbit int
      00280102 Most significant bit for each pixel sample. Each sample shall have the same high bit. See C.8.8.2.6.5 for specialization.*/
    int get_highbit() const;
    void set_highbit(const int& highbit);

    /*pixelrepresentation varchar
      00280103 Data representation of the pixel samples. Each sample shall have the same pixel representation. See C.8.8.2.6.6 for specialization.*/
    std::string get_pixelrepresentation() const;
    void set_pixelrepresentation(const std::string& pixelrepresentation);

    /*name varchar
      image name.*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*rtimagelabel varchar
      image label*/
    std::string get_rtimagelabel() const;
    void set_rtimagelabel(const std::string& rtimagelabel);

    /*description varchar
      image description.*/
    std::string get_description() const;
    void set_description(const std::string& description);

    /*imagetype int
      00080008 Image identification characteristics (see Section C.7.6.1.1.2). RT  Images shall use one of the following Defined Terms for Value 3: DRR = digitally  reconstructed radiograph PORTAL = digital portal image or portal film image  SIMULATOR = conventional simulator image RADIOGRAPH = radiographic image  BLANK = image pixels set to background value FLUENCE = fluence map */
    int get_imagetype() const;
    void set_imagetype(const int& imagetype);

    /*conversiontype int
      00080064 Describes the kind of image conversion. Defined Terms:  DV = Digitized Video DI = Digital Interface DF = Digitized Film WSD = Workstation*/
    int get_conversiontype() const;
    void set_conversiontype(const int& conversiontype);

    /*rtimageplane int
      3002000C Describes whether or not image plane is normal to beam axis. Enumerated Values: NORMAL = image plane normal to beam axis NON_NORMAL = image plane non-normal to beam axis*/
    int get_rtimageplane() const;
    void set_rtimageplane(const int& rtimageplane);

    /*xrimagereceptorangle double
      3002000E X-Ray Image Receptor Angle i.e. orientation of IEC X-RAY IMAGE RECEPTOR coordinate system with respect to IEC GANTRY coordinate system (degrees). See C.8.8.2.2.*/
    double get_xrimagereceptorangle() const;
    void set_xrimagereceptorangle(const double& xrimagereceptorangle);

    /*firstimageplanepixelspacing float
      30020011 Physical distance (in mm) between the center of each image pixel, specified by a numeric pair - adjacent row spacing (delimiter) adjacent column spacing. See C.8.8.2.3 and 10.7.1.3 for further explanation.*/
    float get_firstimageplanepixelspacing() const;
    void set_firstimageplanepixelspacing(const float& firstimageplanepixelspacing);

    /*secondimageplanepixelspacing float
      DicomTAG*/
    float get_secondimageplanepixelspacing() const;
    void set_secondimageplanepixelspacing(const float& secondimageplanepixelspacing);

    /*firstrtimageposition float
      30020012 The x and y coordinates (in mm) of the upper left hand corner of the image, in the IEC X-RAY IMAGE RECEPTOR coordinate system. This is the center of the first pixel transmitted. See C.8.8.2.7.*/
    float get_firstrtimageposition() const;
    void set_firstrtimageposition(const float& firstrtimageposition);

    /*secondrtimageposition float
      30020012 The x and y coordinates (in mm) of the upper left hand corner of the image, in the IEC X-RAY IMAGE RECEPTOR coordinate system. This is the center of the first pixel transmitted. See C.8.8.2.7.*/
    float get_secondrtimageposition() const;
    void set_secondrtimageposition(const float& secondrtimageposition);

    /*machinename varchar
      30020020 User-defined name identifying radiation machine used in acquiring or computing image (i.e. name of conventional simulator, electron accelerator, X-Ray device, or machine modeled when calculating DRR).*/
    std::string get_machinename() const;
    void set_machinename(const std::string& machinename);

    /*primarydosimeterunit varchar
      300A00B3 Measurement unit of machine dosimeter. Enumerated Values: MU = Monitor Unit MINUTE = minute*/
    std::string get_primarydosimeterunit() const;
    void set_primarydosimeterunit(const std::string& primarydosimeterunit);

    /*sad float
      30020022 Radiation source to Gantry rotation axis distance of radiation machine used in acquiring or computing image (mm).*/
    float get_sad() const;
    void set_sad(const float& sad);

    /*ssd float
      30020024 Source to patient surface distance (in mm) of radiation machine used in acquiring or computing image.*/
    float get_ssd() const;
    void set_ssd(const float& ssd);

    /*sid float
      30020026 Distance from radiation machine source to image plane (in mm) along radiation beam axis. See C.8.8.2.3.*/
    float get_sid() const;
    void set_sid(const float& sid);

    /*rows int
      DicomTAG*/
    int get_rows() const;
    void set_rows(const int& rows);

    /*columns int
      DicomTAG*/
    int get_columns() const;
    void set_columns(const int& columns);

    /*frame int
      DicomTAG*/
    int get_frame() const;
    void set_frame(const int& frame);

    /*pixeldata mediumblob
      PixelData 存储路径*/
    //PixelDataBuffer unsigned long lLen = m_iRows * m_iColumns * m_iFrame * m_iBitsAllocated/8 * m_iSamplePerPixel;
    void set_pixel_data_buffer(char* pBuffer, unsigned long lLen);
    char* get_pixel_data_buffer(unsigned long* lLen) const;

    /*ximagexorientation float
      DicomTAG*/
    float get_ximagexorientation() const;
    void set_ximagexorientation(const float& ximagexorientation);

    /*yimagexorientation float
      DicomTAG*/
    float get_yimagexorientation() const;
    void set_yimagexorientation(const float& yimagexorientation);

    /*zimagexorientation float
      DicomTAG*/
    float get_zimagexorientation() const;
    void set_zimagexorientation(const float& zimagexorientation);

    /*ximageyorientation float
      DicomTAG*/
    float get_ximageyorientation() const;
    void set_ximageyorientation(const float& ximageyorientation);

    /*yimageyorientation float
      DicomTAG*/
    float get_yimageyorientation() const;
    void set_yimageyorientation(const float& yimageyorientation);

    /*zimageyorientation float
      DicomTAG*/
    float get_zimageyorientation() const;
    void set_zimageyorientation(const float& zimageyorientation);

    /*angle float
      DicomTAG机架角度*/
    float get_angle() const;
    void set_angle(const float& angle);

    /*windowwidth double
      window width*/
    double get_windowwidth() const;
    void set_windowwidth(const double& windowwidth);

    /*windowcenter double
      window center*/
    double get_windowcenter() const;
    void set_windowcenter(const double& windowcenter);

    /*acquisitiondatetime datetime
      acquisition datetime*/
    DATETIME_BOOST get_acquisitiondatetime() const;
    void set_acquisitiondatetime(const DATETIME_BOOST& acquisitiondatetime);

    /*rescaleintercept double
      DicomTAG*/
    double get_rescaleintercept() const;
    void set_rescaleintercept(const double& rescaleintercept);

    /*rescaleslope double
      DicomTAG*/
    double get_rescaleslope() const;
    void set_rescaleslope(const double& rescaleslope);

    /*xrayimagereceptortranslationx float
      Position in (x,y,z) coordinates of origin of IEC X-RAY IMAGE RECEPTOR System in the IEC GANTRY coordinate system (mm)
            */
    float get_xrayimagereceptortranslationx() const;
    void set_xrayimagereceptortranslationx(const float& xrayimagereceptortranslationx);

    /*xrayimagereceptortranslationy float
      Position in (x,y,z) coordinates of origin of IEC X-RAY IMAGE RECEPTOR System in the IEC GANTRY coordinate system (mm)
            */
    float get_xrayimagereceptortranslationy() const;
    void set_xrayimagereceptortranslationy(const float& xrayimagereceptortranslationy);

    /*xrayimagereceptortranslationz float
      Position in (x,y,z) coordinates of origin of IEC X-RAY IMAGE RECEPTOR System in the IEC GANTRY coordinate system (mm)
            */
    float get_xrayimagereceptortranslationz() const;
    void set_xrayimagereceptortranslationz(const float& xrayimagereceptortranslationz);

    /*isselected tinyint
      是否被选中*/
    bool get_isselected() const;
    void set_isselected(const bool& isselected);

    /*collimatorangle double
      准直器角度*/
    double get_collimatorangle() const;
    void set_collimatorangle(const double& collimatorangle);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*patientname varchar
      The patient's name of this RT image*/
    std::string get_patientname() const;
    void set_patientname(const std::string& patientname);

    /*patientid varchar
      The patient's ID*/
    std::string get_patientid() const;
    void set_patientid(const std::string& patientid);

    /*patientsex int
      */
    int get_patientsex() const;
    void set_patientsex(const int& patientsex);

    /*patientbirthdate datetime
      The patient's birthdate*/
    DATETIME_BOOST get_patientbirthdate() const;
    void set_patientbirthdate(const DATETIME_BOOST& patientbirthdate);

    /*patientage int
      The patients age*/
    int get_patientage() const;
    void set_patientage(const int& patientage);

    /*dicomimagetype varchar
      The DICOM image type information of this RT image.(it's differenct from the existing 'imagetype' which we defined ourselves)*/
    std::string get_dicomimagetype() const;
    void set_dicomimagetype(const std::string& dicomimagetype);

    /*patientposition int
      patientposition: The patient position information from DICOM.*/
    int get_patientposition() const;
    void set_patientposition(const int& patientposition);


private:
    RtRtimageImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtRtimageImp
{

public:
    //default is false to improve performance
    RtRtimageImp(bool bGeneraterUid = false);

    ~RtRtimageImp();

    RtRtimageImp(const RtRtimageImp& rtimage);

    RtRtimageImp& operator = (const RtRtimageImp& rtimage);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //sopinstanceuid
    inline std::string get_sopinstanceuid() const { return m_sopinstanceuid;}
    inline void set_sopinstanceuid(const std::string& sopinstanceuid) { m_sopinstanceuid = sopinstanceuid;}

    //courseuid
    inline std::string get_courseuid() const { return m_courseuid;}
    inline void set_courseuid(const std::string& courseuid) { m_courseuid = courseuid;}

    //isocenteruid
    inline std::string get_isocenteruid() const { return m_isocenteruid;}
    inline void set_isocenteruid(const std::string& isocenteruid) { m_isocenteruid = isocenteruid;}

    //seriesuid
    inline std::string get_seriesuid() const { return m_seriesuid;}
    inline void set_seriesuid(const std::string& seriesuid) { m_seriesuid = seriesuid;}

    //drrsettinguid
    inline std::string get_drrsettinguid() const { return m_drrsettinguid;}
    inline void set_drrsettinguid(const std::string& drrsettinguid) { m_drrsettinguid = drrsettinguid;}

    //planuid
    inline std::string get_planuid() const { return m_planuid;}
    inline void set_planuid(const std::string& planuid) { m_planuid = planuid;}

    //beamuid
    inline std::string get_beamuid() const { return m_beamuid;}
    inline void set_beamuid(const std::string& beamuid) { m_beamuid = beamuid;}

    //treatmentbeamuid
    inline std::string get_treatmentbeamuid() const { return m_treatmentbeamuid;}
    inline void set_treatmentbeamuid(const std::string& treatmentbeamuid) { m_treatmentbeamuid = treatmentbeamuid;}

    //sessionuid
    inline std::string get_sessionuid() const { return m_sessionuid;}
    inline void set_sessionuid(const std::string& sessionuid) { m_sessionuid = sessionuid;}

    //fbctuid
    inline std::string get_fbctuid() const { return m_fbctuid;}
    inline void set_fbctuid(const std::string& fbctuid) { m_fbctuid = fbctuid;}

    //imagebeamuid
    inline std::string get_imagebeamuid() const { return m_imagebeamuid;}
    inline void set_imagebeamuid(const std::string& imagebeamuid) { m_imagebeamuid = imagebeamuid;}

    //portimagebeamuid
    inline std::string get_portimagebeamuid() const { return m_portimagebeamuid;}
    inline void set_portimagebeamuid(const std::string& portimagebeamuid) { m_portimagebeamuid = portimagebeamuid;}

    //samplesperpixel
    inline int get_samplesperpixel() const { return m_samplesperpixel;}
    inline void set_samplesperpixel(const int& samplesperpixel) { m_samplesperpixel = samplesperpixel;}

    //photometricinterpretation
    inline std::string get_photometricinterpretation() const { return m_photometricinterpretation;}
    inline void set_photometricinterpretation(const std::string& photometricinterpretation) { m_photometricinterpretation = photometricinterpretation;}

    //bitsallocated
    inline int get_bitsallocated() const { return m_bitsallocated;}
    inline void set_bitsallocated(const int& bitsallocated) { m_bitsallocated = bitsallocated;}

    //bitsstored
    inline int get_bitsstored() const { return m_bitsstored;}
    inline void set_bitsstored(const int& bitsstored) { m_bitsstored = bitsstored;}

    //highbit
    inline int get_highbit() const { return m_highbit;}
    inline void set_highbit(const int& highbit) { m_highbit = highbit;}

    //pixelrepresentation
    inline std::string get_pixelrepresentation() const { return m_pixelrepresentation;}
    inline void set_pixelrepresentation(const std::string& pixelrepresentation) { m_pixelrepresentation = pixelrepresentation;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //rtimagelabel
    inline std::string get_rtimagelabel() const { return m_rtimagelabel;}
    inline void set_rtimagelabel(const std::string& rtimagelabel) { m_rtimagelabel = rtimagelabel;}

    //description
    inline std::string get_description() const { return m_description;}
    inline void set_description(const std::string& description) { m_description = description;}

    //imagetype
    inline int get_imagetype() const { return m_imagetype;}
    inline void set_imagetype(const int& imagetype) { m_imagetype = imagetype;}

    //conversiontype
    inline int get_conversiontype() const { return m_conversiontype;}
    inline void set_conversiontype(const int& conversiontype) { m_conversiontype = conversiontype;}

    //rtimageplane
    inline int get_rtimageplane() const { return m_rtimageplane;}
    inline void set_rtimageplane(const int& rtimageplane) { m_rtimageplane = rtimageplane;}

    //xrimagereceptorangle
    inline double get_xrimagereceptorangle() const { return m_xrimagereceptorangle;}
    inline void set_xrimagereceptorangle(const double& xrimagereceptorangle) { m_xrimagereceptorangle = xrimagereceptorangle;}

    //firstimageplanepixelspacing
    inline float get_firstimageplanepixelspacing() const { return m_firstimageplanepixelspacing;}
    inline void set_firstimageplanepixelspacing(const float& firstimageplanepixelspacing) { m_firstimageplanepixelspacing = firstimageplanepixelspacing;}

    //secondimageplanepixelspacing
    inline float get_secondimageplanepixelspacing() const { return m_secondimageplanepixelspacing;}
    inline void set_secondimageplanepixelspacing(const float& secondimageplanepixelspacing) { m_secondimageplanepixelspacing = secondimageplanepixelspacing;}

    //firstrtimageposition
    inline float get_firstrtimageposition() const { return m_firstrtimageposition;}
    inline void set_firstrtimageposition(const float& firstrtimageposition) { m_firstrtimageposition = firstrtimageposition;}

    //secondrtimageposition
    inline float get_secondrtimageposition() const { return m_secondrtimageposition;}
    inline void set_secondrtimageposition(const float& secondrtimageposition) { m_secondrtimageposition = secondrtimageposition;}

    //machinename
    inline std::string get_machinename() const { return m_machinename;}
    inline void set_machinename(const std::string& machinename) { m_machinename = machinename;}

    //primarydosimeterunit
    inline std::string get_primarydosimeterunit() const { return m_primarydosimeterunit;}
    inline void set_primarydosimeterunit(const std::string& primarydosimeterunit) { m_primarydosimeterunit = primarydosimeterunit;}

    //sad
    inline float get_sad() const { return m_sad;}
    inline void set_sad(const float& sad) { m_sad = sad;}

    //ssd
    inline float get_ssd() const { return m_ssd;}
    inline void set_ssd(const float& ssd) { m_ssd = ssd;}

    //sid
    inline float get_sid() const { return m_sid;}
    inline void set_sid(const float& sid) { m_sid = sid;}

    //rows
    inline int get_rows() const { return m_rows;}
    inline void set_rows(const int& rows) { m_rows = rows;}

    //columns
    inline int get_columns() const { return m_columns;}
    inline void set_columns(const int& columns) { m_columns = columns;}

    //frame
    inline int get_frame() const { return m_frame;}
    inline void set_frame(const int& frame) { m_frame = frame;}

    //pixeldata
    //PixelDataBuffer unsigned long lLen = m_iRows * m_iColumns * m_iFrame * m_iBitsAllocated/8 * m_iSamplePerPixel;
    void set_pixel_data_buffer(char* pBuffer, unsigned long lLen);
    char* get_pixel_data_buffer(unsigned long* lLen) const;

    //ximagexorientation
    inline float get_ximagexorientation() const { return m_ximagexorientation;}
    inline void set_ximagexorientation(const float& ximagexorientation) { m_ximagexorientation = ximagexorientation;}

    //yimagexorientation
    inline float get_yimagexorientation() const { return m_yimagexorientation;}
    inline void set_yimagexorientation(const float& yimagexorientation) { m_yimagexorientation = yimagexorientation;}

    //zimagexorientation
    inline float get_zimagexorientation() const { return m_zimagexorientation;}
    inline void set_zimagexorientation(const float& zimagexorientation) { m_zimagexorientation = zimagexorientation;}

    //ximageyorientation
    inline float get_ximageyorientation() const { return m_ximageyorientation;}
    inline void set_ximageyorientation(const float& ximageyorientation) { m_ximageyorientation = ximageyorientation;}

    //yimageyorientation
    inline float get_yimageyorientation() const { return m_yimageyorientation;}
    inline void set_yimageyorientation(const float& yimageyorientation) { m_yimageyorientation = yimageyorientation;}

    //zimageyorientation
    inline float get_zimageyorientation() const { return m_zimageyorientation;}
    inline void set_zimageyorientation(const float& zimageyorientation) { m_zimageyorientation = zimageyorientation;}

    //angle
    inline float get_angle() const { return m_angle;}
    inline void set_angle(const float& angle) { m_angle = angle;}

    //windowwidth
    inline double get_windowwidth() const { return m_windowwidth;}
    inline void set_windowwidth(const double& windowwidth) { m_windowwidth = windowwidth;}

    //windowcenter
    inline double get_windowcenter() const { return m_windowcenter;}
    inline void set_windowcenter(const double& windowcenter) { m_windowcenter = windowcenter;}

    //acquisitiondatetime
    inline DATETIME_BOOST get_acquisitiondatetime() const { return m_acquisitiondatetime;}
    inline void set_acquisitiondatetime(const DATETIME_BOOST& acquisitiondatetime) { m_acquisitiondatetime = acquisitiondatetime;}

    //rescaleintercept
    inline double get_rescaleintercept() const { return m_rescaleintercept;}
    inline void set_rescaleintercept(const double& rescaleintercept) { m_rescaleintercept = rescaleintercept;}

    //rescaleslope
    inline double get_rescaleslope() const { return m_rescaleslope;}
    inline void set_rescaleslope(const double& rescaleslope) { m_rescaleslope = rescaleslope;}

    //xrayimagereceptortranslationx
    inline float get_xrayimagereceptortranslationx() const { return m_xrayimagereceptortranslationx;}
    inline void set_xrayimagereceptortranslationx(const float& xrayimagereceptortranslationx) { m_xrayimagereceptortranslationx = xrayimagereceptortranslationx;}

    //xrayimagereceptortranslationy
    inline float get_xrayimagereceptortranslationy() const { return m_xrayimagereceptortranslationy;}
    inline void set_xrayimagereceptortranslationy(const float& xrayimagereceptortranslationy) { m_xrayimagereceptortranslationy = xrayimagereceptortranslationy;}

    //xrayimagereceptortranslationz
    inline float get_xrayimagereceptortranslationz() const { return m_xrayimagereceptortranslationz;}
    inline void set_xrayimagereceptortranslationz(const float& xrayimagereceptortranslationz) { m_xrayimagereceptortranslationz = xrayimagereceptortranslationz;}

    //isselected
    inline bool get_isselected() const { return m_isselected;}
    inline void set_isselected(const bool& isselected) { m_isselected = isselected;}

    //collimatorangle
    inline double get_collimatorangle() const { return m_collimatorangle;}
    inline void set_collimatorangle(const double& collimatorangle) { m_collimatorangle = collimatorangle;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //patientname
    inline std::string get_patientname() const { return m_patientname;}
    inline void set_patientname(const std::string& patientname) { m_patientname = patientname;}

    //patientid
    inline std::string get_patientid() const { return m_patientid;}
    inline void set_patientid(const std::string& patientid) { m_patientid = patientid;}

    //patientsex
    inline int get_patientsex() const { return m_patientsex;}
    inline void set_patientsex(const int& patientsex) { m_patientsex = patientsex;}

    //patientbirthdate
    inline DATETIME_BOOST get_patientbirthdate() const { return m_patientbirthdate;}
    inline void set_patientbirthdate(const DATETIME_BOOST& patientbirthdate) { m_patientbirthdate = patientbirthdate;}

    //patientage
    inline int get_patientage() const { return m_patientage;}
    inline void set_patientage(const int& patientage) { m_patientage = patientage;}

    //dicomimagetype
    inline std::string get_dicomimagetype() const { return m_dicomimagetype;}
    inline void set_dicomimagetype(const std::string& dicomimagetype) { m_dicomimagetype = dicomimagetype;}

    //patientposition
    inline int get_patientposition() const { return m_patientposition;}
    inline void set_patientposition(const int& patientposition) { m_patientposition = patientposition;}

private:    //64 parameters
    std::string						m_uid;
    std::string						m_sopinstanceuid;
    std::string						m_courseuid;
    std::string						m_isocenteruid;
    std::string						m_seriesuid;
    std::string						m_drrsettinguid;
    std::string						m_planuid;
    std::string						m_beamuid;
    std::string						m_treatmentbeamuid;
    std::string						m_sessionuid;
    std::string						m_fbctuid;
    std::string						m_imagebeamuid;
    std::string						m_portimagebeamuid;
    int								m_samplesperpixel;
    std::string						m_photometricinterpretation;
    int								m_bitsallocated;
    int								m_bitsstored;
    int								m_highbit;
    std::string						m_pixelrepresentation;
    std::string						m_name;
    std::string						m_rtimagelabel;
    std::string						m_description;
    int								m_imagetype;
    int								m_conversiontype;
    int								m_rtimageplane;
    double							m_xrimagereceptorangle;
    float							m_firstimageplanepixelspacing;
    float							m_secondimageplanepixelspacing;
    float							m_firstrtimageposition;
    float							m_secondrtimageposition;
    std::string						m_machinename;
    std::string						m_primarydosimeterunit;
    float							m_sad;
    float							m_ssd;
    float							m_sid;
    int								m_rows;
    int								m_columns;
    int								m_frame;
    char*						m_pixeldata;
    float							m_ximagexorientation;
    float							m_yimagexorientation;
    float							m_zimagexorientation;
    float							m_ximageyorientation;
    float							m_yimageyorientation;
    float							m_zimageyorientation;
    float							m_angle;
    double							m_windowwidth;
    double							m_windowcenter;
    DATETIME_BOOST					m_acquisitiondatetime;
    double							m_rescaleintercept;
    double							m_rescaleslope;
    float							m_xrayimagereceptortranslationx;
    float							m_xrayimagereceptortranslationy;
    float							m_xrayimagereceptortranslationz;
    bool							m_isselected;
    double							m_collimatorangle;
    DATETIME_BOOST					m_updatetime;
    std::string						m_patientname;
    std::string						m_patientid;
    int								m_patientsex;
    DATETIME_BOOST					m_patientbirthdate;
    int								m_patientage;
    std::string						m_dicomimagetype;
    int								m_patientposition;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif