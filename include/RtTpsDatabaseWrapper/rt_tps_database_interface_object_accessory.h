//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_ACCESSORY_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_ACCESSORY_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum ACCESSORY_FIELD
{
    ACCESSORY_UID = 0,
    ACCESSORY_MACHINEUID,
    ACCESSORY_NAME,
    ACCESSORY_CODE,
    ACCESSORY_ACCESSORYTYPE,
    ACCESSORY_WEDGEORIENTATION,
    ACCESSORY_INDEPENDENT_JAW1,
    ACCESSORY_MIN1_JAW1,
    ACCESSORY_MAX1_JAW1,
    ACCESSORY_MIN2_JAW1,
    ACCESSORY_MAX2_JAW1,
    ACCESSORY_MINW_JAW1,
    ACCESSORY_MAXW_JAW1,
    ACCESSORY_SDD_JAW1,
    ACCESSORY_NAME1_JAW1,
    ACCESSORY_NAME2_JAW1,
    ACCESSORY_MIN1_JAW2,
    ACCESSORY_MAX1_JAW2,
    ACCESSORY_MIN2_JAW2,
    ACCESSORY_MAX2_JAW2,
    ACCESSORY_MINW_JAW2,
    ACCESSORY_MAXW_JAW2,
    ACCESSORY_SDD_JAW2,
    ACCESSORY_NAME1_JAW2,
    ACCESSORY_NAME2_JAW2,
    ACCESSORY_FILTERTOBEAM,
    ACCESSORY_BEAMTOFILTER,
    ACCESSORY_WEDGEANGLE,
    ACCESSORY_DATATYPE,
    ACCESSORY_CRC,
    ACCESSORY_UPDATETIME,
    ACCESSORY_FIELD_MAX
};

static const char* ENUM2STRING_ACCESSORY_FIELD[] =
{
    "UID",
    "MACHINEUID",
    "NAME",
    "CODE",
    "ACCESSORYTYPE",
    "WEDGEORIENTATION",
    "INDEPENDENT_JAW1",
    "MIN1_JAW1",
    "MAX1_JAW1",
    "MIN2_JAW1",
    "MAX2_JAW1",
    "MINW_JAW1",
    "MAXW_JAW1",
    "SDD_JAW1",
    "NAME1_JAW1",
    "NAME2_JAW1",
    "MIN1_JAW2",
    "MAX1_JAW2",
    "MIN2_JAW2",
    "MAX2_JAW2",
    "MINW_JAW2",
    "MAXW_JAW2",
    "SDD_JAW2",
    "NAME1_JAW2",
    "NAME2_JAW2",
    "FILTERTOBEAM",
    "BEAMTOFILTER",
    "WEDGEANGLE",
    "DATATYPE",
    "CRC",
    "UPDATETIME",
    "ACCESSORY_FIELD_MAX"
};

static const char* ENUM2STRING_ACCESSORY_FIELD_NULL = "1000000000000000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtAccessoryImp;

class RT_DB_EXPORT RtAccessory : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtAccessory(bool bGeneraterUid = false);

    ~RtAccessory();

    RtAccessory(const RtAccessory& accessory);

    RtAccessory& operator = (const RtAccessory& accessory);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*machineuid varchar
      MachineUnit uid which the accessory related to*/
    std::string get_machineuid() const;
    void set_machineuid(const std::string& machineuid);

    /*name varchar
      Accessory name*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*code varchar
      An identifier for the accessory intended to*/
    std::string get_code() const;
    void set_code(const std::string& code);

    /*accessorytype int
      ACCESSORY_UNKNOWN_TYPE = -1,    
                ACCESSORY_PHYSICALWEDGE = 1,
                ACCESSORY_PHYSICALBOLUS,
                ACCESSORY_CUSTOMBOLUS,//Added on 20131229
                ACCESSORY_BLOCK,//RT-PH Add
                ACCESSORY_TRAY,//RT-PH Add
                ACCESSORY_IDEALCOMPENSATOR,//RT-PH Add
                ACCESSORY_Cone,*/
    int get_accessorytype() const;
    void set_accessorytype(const int& accessorytype);

    /*wedgeorientation int
      Where is the pointy end? One of above
            Copy from Plunc's FILTER class*/
    int get_wedgeorientation() const;
    void set_wedgeorientation(const int& wedgeorientation);

    /*independent_jaw1 int
      0:symmetric 
            1:independent 
            2:MLC 
            3:MLC-non divergent*/
    int get_independent_jaw1() const;
    void set_independent_jaw1(const int& independent_jaw1);

    /*min1_jaw1 float
      leftmost or bottommost travel
            Copy from Plunc's Jaw class*/
    float get_min1_jaw1() const;
    void set_min1_jaw1(const float& min1_jaw1);

    /*max1_jaw1 float
      rightmost or topmost travel
            Copy from Plunc's Jaw class*/
    float get_max1_jaw1() const;
    void set_max1_jaw1(const float& max1_jaw1);

    /*min2_jaw1 float
      leftmost or bottommost travel
            Copy from Plunc's Jaw class*/
    float get_min2_jaw1() const;
    void set_min2_jaw1(const float& min2_jaw1);

    /*max2_jaw1 float
      rightmost or topmost travel
            Copy from Plunc's Jaw class*/
    float get_max2_jaw1() const;
    void set_max2_jaw1(const float& max2_jaw1);

    /*minw_jaw1 float
      start of jaw orthogonal to jaw travel dir
            Copy from Plunc's Jaw class*/
    float get_minw_jaw1() const;
    void set_minw_jaw1(const float& minw_jaw1);

    /*maxw_jaw1 float
      end of jaw
            Copy from Plunc's Jaw class*/
    float get_maxw_jaw1() const;
    void set_maxw_jaw1(const float& maxw_jaw1);

    /*sdd_jaw1 float
      primary source to jaw (diaphram) distance
            Copy from Plunc's Jaw class*/
    float get_sdd_jaw1() const;
    void set_sdd_jaw1(const float& sdd_jaw1);

    /*name1_jaw1 varchar
      Copy from Plunc's Jaw class*/
    std::string get_name1_jaw1() const;
    void set_name1_jaw1(const std::string& name1_jaw1);

    /*name2_jaw1 varchar
      Copy from Plunc's Jaw class*/
    std::string get_name2_jaw1() const;
    void set_name2_jaw1(const std::string& name2_jaw1);

    /*min1_jaw2 float
      leftmost or bottommost travel
            Copy from Plunc's Jaw class*/
    float get_min1_jaw2() const;
    void set_min1_jaw2(const float& min1_jaw2);

    /*max1_jaw2 float
      rightmost or topmost travel
            Copy from Plunc's Jaw class*/
    float get_max1_jaw2() const;
    void set_max1_jaw2(const float& max1_jaw2);

    /*min2_jaw2 float
      leftmost or bottommost travel
            Copy from Plunc's Jaw class*/
    float get_min2_jaw2() const;
    void set_min2_jaw2(const float& min2_jaw2);

    /*max2_jaw2 float
      rightmost or topmost travel
            Copy from Plunc's Jaw class*/
    float get_max2_jaw2() const;
    void set_max2_jaw2(const float& max2_jaw2);

    /*minw_jaw2 float
      start of jaw orthogonal to jaw travel dir
            Copy from Plunc's Jaw class*/
    float get_minw_jaw2() const;
    void set_minw_jaw2(const float& minw_jaw2);

    /*maxw_jaw2 float
      end of jaw
            Copy from Plunc's Jaw class*/
    float get_maxw_jaw2() const;
    void set_maxw_jaw2(const float& maxw_jaw2);

    /*sdd_jaw2 float
      primary source to jaw (diaphram) distance
            Copy from Plunc's Jaw class*/
    float get_sdd_jaw2() const;
    void set_sdd_jaw2(const float& sdd_jaw2);

    /*name1_jaw2 varchar
      Copy from Plunc's Jaw class*/
    std::string get_name1_jaw2() const;
    void set_name1_jaw2(const std::string& name1_jaw2);

    /*name2_jaw2 varchar
      Copy from Plunc's Jaw class*/
    std::string get_name2_jaw2() const;
    void set_name2_jaw2(const std::string& name2_jaw2);

    /*filtertobeam varchar
      Transformation matrix from filter to beam*/
    std::string get_filtertobeam() const;
    void set_filtertobeam(const std::string& filtertobeam);

    /*beamtofilter varchar
      Transformation matrix from beam to filter*/
    std::string get_beamtofilter() const;
    void set_beamtofilter(const std::string& beamtofilter);

    /*wedgeangle float
      angel of wedge.*/
    float get_wedgeangle() const;
    void set_wedgeangle(const float& wedgeangle);

    /*datatype int
      data type*/
    int get_datatype() const;
    void set_datatype(const int& datatype);

    /*crc varchar
      crc 校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtAccessoryImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtAccessoryImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtAccessoryImp(bool bGeneraterUid = false);

    virtual ~RtAccessoryImp();

    RtAccessoryImp(const RtAccessoryImp& accessory);

    RtAccessoryImp& operator = (const RtAccessoryImp& accessory);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //machineuid
    inline std::string get_machineuid() const { return m_machineuid;}
    inline void set_machineuid(const std::string& machineuid) { m_machineuid = machineuid;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //code
    inline std::string get_code() const { return m_code;}
    inline void set_code(const std::string& code) { m_code = code;}

    //accessorytype
    inline int get_accessorytype() const { return m_accessorytype;}
    inline void set_accessorytype(const int& accessorytype) { m_accessorytype = accessorytype;}

    //wedgeorientation
    inline int get_wedgeorientation() const { return m_wedgeorientation;}
    inline void set_wedgeorientation(const int& wedgeorientation) { m_wedgeorientation = wedgeorientation;}

    //independent_jaw1
    inline int get_independent_jaw1() const { return m_independent_jaw1;}
    inline void set_independent_jaw1(const int& independent_jaw1) { m_independent_jaw1 = independent_jaw1;}

    //min1_jaw1
    inline float get_min1_jaw1() const { return m_min1_jaw1;}
    inline void set_min1_jaw1(const float& min1_jaw1) { m_min1_jaw1 = min1_jaw1;}

    //max1_jaw1
    inline float get_max1_jaw1() const { return m_max1_jaw1;}
    inline void set_max1_jaw1(const float& max1_jaw1) { m_max1_jaw1 = max1_jaw1;}

    //min2_jaw1
    inline float get_min2_jaw1() const { return m_min2_jaw1;}
    inline void set_min2_jaw1(const float& min2_jaw1) { m_min2_jaw1 = min2_jaw1;}

    //max2_jaw1
    inline float get_max2_jaw1() const { return m_max2_jaw1;}
    inline void set_max2_jaw1(const float& max2_jaw1) { m_max2_jaw1 = max2_jaw1;}

    //minw_jaw1
    inline float get_minw_jaw1() const { return m_minw_jaw1;}
    inline void set_minw_jaw1(const float& minw_jaw1) { m_minw_jaw1 = minw_jaw1;}

    //maxw_jaw1
    inline float get_maxw_jaw1() const { return m_maxw_jaw1;}
    inline void set_maxw_jaw1(const float& maxw_jaw1) { m_maxw_jaw1 = maxw_jaw1;}

    //sdd_jaw1
    inline float get_sdd_jaw1() const { return m_sdd_jaw1;}
    inline void set_sdd_jaw1(const float& sdd_jaw1) { m_sdd_jaw1 = sdd_jaw1;}

    //name1_jaw1
    inline std::string get_name1_jaw1() const { return m_name1_jaw1;}
    inline void set_name1_jaw1(const std::string& name1_jaw1) { m_name1_jaw1 = name1_jaw1;}

    //name2_jaw1
    inline std::string get_name2_jaw1() const { return m_name2_jaw1;}
    inline void set_name2_jaw1(const std::string& name2_jaw1) { m_name2_jaw1 = name2_jaw1;}

    //min1_jaw2
    inline float get_min1_jaw2() const { return m_min1_jaw2;}
    inline void set_min1_jaw2(const float& min1_jaw2) { m_min1_jaw2 = min1_jaw2;}

    //max1_jaw2
    inline float get_max1_jaw2() const { return m_max1_jaw2;}
    inline void set_max1_jaw2(const float& max1_jaw2) { m_max1_jaw2 = max1_jaw2;}

    //min2_jaw2
    inline float get_min2_jaw2() const { return m_min2_jaw2;}
    inline void set_min2_jaw2(const float& min2_jaw2) { m_min2_jaw2 = min2_jaw2;}

    //max2_jaw2
    inline float get_max2_jaw2() const { return m_max2_jaw2;}
    inline void set_max2_jaw2(const float& max2_jaw2) { m_max2_jaw2 = max2_jaw2;}

    //minw_jaw2
    inline float get_minw_jaw2() const { return m_minw_jaw2;}
    inline void set_minw_jaw2(const float& minw_jaw2) { m_minw_jaw2 = minw_jaw2;}

    //maxw_jaw2
    inline float get_maxw_jaw2() const { return m_maxw_jaw2;}
    inline void set_maxw_jaw2(const float& maxw_jaw2) { m_maxw_jaw2 = maxw_jaw2;}

    //sdd_jaw2
    inline float get_sdd_jaw2() const { return m_sdd_jaw2;}
    inline void set_sdd_jaw2(const float& sdd_jaw2) { m_sdd_jaw2 = sdd_jaw2;}

    //name1_jaw2
    inline std::string get_name1_jaw2() const { return m_name1_jaw2;}
    inline void set_name1_jaw2(const std::string& name1_jaw2) { m_name1_jaw2 = name1_jaw2;}

    //name2_jaw2
    inline std::string get_name2_jaw2() const { return m_name2_jaw2;}
    inline void set_name2_jaw2(const std::string& name2_jaw2) { m_name2_jaw2 = name2_jaw2;}

    //filtertobeam
    inline std::string get_filtertobeam() const { return m_filtertobeam;}
    inline void set_filtertobeam(const std::string& filtertobeam) { m_filtertobeam = filtertobeam;}

    //beamtofilter
    inline std::string get_beamtofilter() const { return m_beamtofilter;}
    inline void set_beamtofilter(const std::string& beamtofilter) { m_beamtofilter = beamtofilter;}

    //wedgeangle
    inline float get_wedgeangle() const { return m_wedgeangle;}
    inline void set_wedgeangle(const float& wedgeangle) { m_wedgeangle = wedgeangle;}

    //datatype
    inline int get_datatype() const { return m_datatype;}
    inline void set_datatype(const int& datatype) { m_datatype = datatype;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //31 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_machineuid);
		ar & BOOST_SERIALIZATION_NVP(m_name);
		ar & BOOST_SERIALIZATION_NVP(m_code);
		ar & BOOST_SERIALIZATION_NVP(m_accessorytype);
		ar & BOOST_SERIALIZATION_NVP(m_wedgeorientation);
		ar & BOOST_SERIALIZATION_NVP(m_independent_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_min1_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_max1_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_min2_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_max2_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_minw_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_maxw_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_sdd_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_name1_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_name2_jaw1);
		ar & BOOST_SERIALIZATION_NVP(m_min1_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_max1_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_min2_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_max2_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_minw_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_maxw_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_sdd_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_name1_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_name2_jaw2);
		ar & BOOST_SERIALIZATION_NVP(m_filtertobeam);
		ar & BOOST_SERIALIZATION_NVP(m_beamtofilter);
		ar & BOOST_SERIALIZATION_NVP(m_wedgeangle);
		ar & BOOST_SERIALIZATION_NVP(m_datatype);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_uid;
    std::string						m_machineuid;
    std::string						m_name;
    std::string						m_code;
    int								m_accessorytype;
    int								m_wedgeorientation;
    int								m_independent_jaw1;
    float							m_min1_jaw1;
    float							m_max1_jaw1;
    float							m_min2_jaw1;
    float							m_max2_jaw1;
    float							m_minw_jaw1;
    float							m_maxw_jaw1;
    float							m_sdd_jaw1;
    std::string						m_name1_jaw1;
    std::string						m_name2_jaw1;
    float							m_min1_jaw2;
    float							m_max1_jaw2;
    float							m_min2_jaw2;
    float							m_max2_jaw2;
    float							m_minw_jaw2;
    float							m_maxw_jaw2;
    float							m_sdd_jaw2;
    std::string						m_name1_jaw2;
    std::string						m_name2_jaw2;
    std::string						m_filtertobeam;
    std::string						m_beamtofilter;
    float							m_wedgeangle;
    int								m_datatype;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif