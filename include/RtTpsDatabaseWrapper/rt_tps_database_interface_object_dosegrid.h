//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_DOSEGRID_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_DOSEGRID_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum DOSEGRID_FIELD
{
    DOSEGRID_UID = 0,
    DOSEGRID_PLANUID,
    DOSEGRID_NORMGROUPUID,
    DOSEGRID_BEAMUID,
    DOSEGRID_XCOORDINATE3DSTART,
    DOSEGRID_YCOORDINATE3DSTART,
    DOSEGRID_ZCOORDINATE3DSTART,
    DOSEGRID_XCOORDINATE3DINC,
    DOSEGRID_YCOORDINATE3DINC,
    DOSEGRID_ZCOORDINATE3DINC,
    DOSEGRID_XCOUNT,
    DOSEGRID_YCOUNT,
    DOSEGRID_ZCOUNT,
    DOSEGRID_MAX,
    DOSEGRID_MIN,
    DOSEGRID_ACCURACY,
    DOSEGRID_DOSEGRIDFILEPATH,
    DOSEGRID_DOSEUNIT,
    DOSEGRID_DOSESUMMATIONTYPE,
    DOSEGRID_BITSALLOCATED,
    DOSEGRID_BITSSTORED,
    DOSEGRID_HIGHBITS,
    DOSEGRID_SOPINSTANCEUID,
    DOSEGRID_GRID_TO_PAT_T,
    DOSEGRID_ISDOSEVALID,
    DOSEGRID_UPDATETIME,
    DOSEGRID_FIELD_MAX
};

static const char* ENUM2STRING_DOSEGRID_FIELD[] =
{
    "UID",
    "PLANUID",
    "NORMGROUPUID",
    "BEAMUID",
    "XCOORDINATE3DSTART",
    "YCOORDINATE3DSTART",
    "ZCOORDINATE3DSTART",
    "XCOORDINATE3DINC",
    "YCOORDINATE3DINC",
    "ZCOORDINATE3DINC",
    "XCOUNT",
    "YCOUNT",
    "ZCOUNT",
    "MAX",
    "MIN",
    "ACCURACY",
    "DOSEGRIDFILEPATH",
    "DOSEUNIT",
    "DOSESUMMATIONTYPE",
    "BITSALLOCATED",
    "BITSSTORED",
    "HIGHBITS",
    "SOPINSTANCEUID",
    "GRID_TO_PAT_T",
    "ISDOSEVALID",
    "UPDATETIME",
    "DOSEGRID_FIELD_MAX"
};

static const char* ENUM2STRING_DOSEGRID_FIELD_NULL = "10000000000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtDosegridImp;

class RT_DB_EXPORT RtDosegrid : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtDosegrid(bool bGeneraterUid = false);

    ~RtDosegrid();

    RtDosegrid(const RtDosegrid& dosegrid);

    RtDosegrid& operator = (const RtDosegrid& dosegrid);

    /*uid varchar
      主键*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*planuid varchar
      fk related to plan table uid*/
    std::string get_planuid() const;
    void set_planuid(const std::string& planuid);

    /*normgroupuid varchar
      fk related to normgroup table uid*/
    std::string get_normgroupuid() const;
    void set_normgroupuid(const std::string& normgroupuid);

    /*beamuid varchar
      fk related to beam table uid*/
    std::string get_beamuid() const;
    void set_beamuid(const std::string& beamuid);

    /*xcoordinate3dstart float
      剂量网格起始点X坐标*/
    float get_xcoordinate3dstart() const;
    void set_xcoordinate3dstart(const float& xcoordinate3dstart);

    /*ycoordinate3dstart float
      剂量网格起始点Y坐标*/
    float get_ycoordinate3dstart() const;
    void set_ycoordinate3dstart(const float& ycoordinate3dstart);

    /*zcoordinate3dstart float
      剂量网格起始点Z坐标*/
    float get_zcoordinate3dstart() const;
    void set_zcoordinate3dstart(const float& zcoordinate3dstart);

    /*xcoordinate3dinc float
      剂量网格X方向单位增量（mm）*/
    float get_xcoordinate3dinc() const;
    void set_xcoordinate3dinc(const float& xcoordinate3dinc);

    /*ycoordinate3dinc float
      剂量网格Y方向单位增量（mm）*/
    float get_ycoordinate3dinc() const;
    void set_ycoordinate3dinc(const float& ycoordinate3dinc);

    /*zcoordinate3dinc float
      剂量网格Z方向单位增量（mm）*/
    float get_zcoordinate3dinc() const;
    void set_zcoordinate3dinc(const float& zcoordinate3dinc);

    /*xcount int
      剂量网格X方向单位数目*/
    int get_xcount() const;
    void set_xcount(const int& xcount);

    /*ycount int
      剂量网格Y方向单位数目*/
    int get_ycount() const;
    void set_ycount(const int& ycount);

    /*zcount int
      剂量网格Z方向单位数目*/
    int get_zcount() const;
    void set_zcount(const int& zcount);

    /*max float
      最大剂量值*/
    float get_max() const;
    void set_max(const float& max);

    /*min float
      最小剂量值*/
    float get_min() const;
    void set_min(const float& min);

    /*accuracy double
      剂量精度*/
    double get_accuracy() const;
    void set_accuracy(const double& accuracy);

    /*dosegridfilepath varchar
      dosegrid  value filepath*/
    std::string get_dosegridfilepath() const;
    void set_dosegridfilepath(const std::string& dosegridfilepath);
	
    /*dosegridvalue longblob
      dosegrid value */
    const float* get_dosegrid_buffer() const;
    float* get_dosegrid_buffer();
    void clear_dosegrid_buffer();
    float* create_dosegrid_buffer();

    /*doseunit int
      剂量单位*/
    int get_doseunit() const;
    void set_doseunit(const int& doseunit);

    /*dosesummationtype int
      (3004,000A) DoseSummationType*/
    int get_dosesummationtype() const;
    void set_dosesummationtype(const int& dosesummationtype);

    /*bitsallocated int
      (0028,0100) BitsAllocated
            */
    int get_bitsallocated() const;
    void set_bitsallocated(const int& bitsallocated);

    /*bitsstored int
      (0028,0101) BitsStored*/
    int get_bitsstored() const;
    void set_bitsstored(const int& bitsstored);

    /*highbits int
      (0028,0102) HighBit*/
    int get_highbits() const;
    void set_highbits(const int& highbits);

    /*sopinstanceuid varchar
      sopInstanceUid Dicom实例*/
    std::string get_sopinstanceuid() const;
    void set_sopinstanceuid(const std::string& sopinstanceuid);

    /*grid_to_pat_t varchar
      剂量网格坐标系向病人坐标系转换矩阵*/
    const float* get_grid_to_pat_t() const;
    void set_grid_to_pat_t(const float* grid_to_pat_t);

    /*isdosevalid tinyint
      剂量网格是否有效标志位，完成剂量计算后置为真*/
    bool get_isdosevalid() const;
    void set_isdosevalid(const bool& isdosevalid);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtDosegridImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtDosegridImp
{

public:
    //default is false to improve performance
    RtDosegridImp(bool bGeneraterUid = false);

    ~RtDosegridImp();

    RtDosegridImp(const RtDosegridImp& dosegrid);

    RtDosegridImp& operator = (const RtDosegridImp& dosegrid);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //planuid
    inline std::string get_planuid() const { return m_planuid;}
    inline void set_planuid(const std::string& planuid) { m_planuid = planuid;}

    //normgroupuid
    inline std::string get_normgroupuid() const { return m_normgroupuid;}
    inline void set_normgroupuid(const std::string& normgroupuid) { m_normgroupuid = normgroupuid;}

    //beamuid
    inline std::string get_beamuid() const { return m_beamuid;}
    inline void set_beamuid(const std::string& beamuid) { m_beamuid = beamuid;}

    //xcoordinate3dstart
    inline float get_xcoordinate3dstart() const { return m_xcoordinate3dstart;}
    inline void set_xcoordinate3dstart(const float& xcoordinate3dstart) { m_xcoordinate3dstart = xcoordinate3dstart;}

    //ycoordinate3dstart
    inline float get_ycoordinate3dstart() const { return m_ycoordinate3dstart;}
    inline void set_ycoordinate3dstart(const float& ycoordinate3dstart) { m_ycoordinate3dstart = ycoordinate3dstart;}

    //zcoordinate3dstart
    inline float get_zcoordinate3dstart() const { return m_zcoordinate3dstart;}
    inline void set_zcoordinate3dstart(const float& zcoordinate3dstart) { m_zcoordinate3dstart = zcoordinate3dstart;}

    //xcoordinate3dinc
    inline float get_xcoordinate3dinc() const { return m_xcoordinate3dinc;}
    inline void set_xcoordinate3dinc(const float& xcoordinate3dinc) { m_xcoordinate3dinc = xcoordinate3dinc;}

    //ycoordinate3dinc
    inline float get_ycoordinate3dinc() const { return m_ycoordinate3dinc;}
    inline void set_ycoordinate3dinc(const float& ycoordinate3dinc) { m_ycoordinate3dinc = ycoordinate3dinc;}

    //zcoordinate3dinc
    inline float get_zcoordinate3dinc() const { return m_zcoordinate3dinc;}
    inline void set_zcoordinate3dinc(const float& zcoordinate3dinc) { m_zcoordinate3dinc = zcoordinate3dinc;}

    //xcount
    inline int get_xcount() const { return m_xcount;}
    inline void set_xcount(const int& xcount) { m_xcount = xcount;}

    //ycount
    inline int get_ycount() const { return m_ycount;}
    inline void set_ycount(const int& ycount) { m_ycount = ycount;}

    //zcount
    inline int get_zcount() const { return m_zcount;}
    inline void set_zcount(const int& zcount) { m_zcount = zcount;}

    //max
    inline float get_max() const { return m_max;}
    inline void set_max(const float& max) { m_max = max;}

    //min
    inline float get_min() const { return m_min;}
    inline void set_min(const float& min) { m_min = min;}

    //accuracy
    inline double get_accuracy() const { return m_accuracy;}
    inline void set_accuracy(const double& accuracy) { m_accuracy = accuracy;}

    //dosegridfilepath
    inline std::string get_dosegridfilepath() const { return m_dosegridfilepath;}
    inline void set_dosegridfilepath(const std::string& dosegridfilepath) { m_dosegridfilepath = dosegridfilepath;}
	
    //dosegridvalue
    inline const float* get_dosegrid_buffer() const {return m_dosegridvalue;}
    inline float* get_dosegrid_buffer() {return m_dosegridvalue;}
    inline void clear_dosegrid_buffer()
    {
        const int iSize = m_xcount * m_ycount * m_zcount;
        if (iSize>0 && m_dosegridvalue != nullptr) 
            memset(m_dosegridvalue, 0, sizeof(float) * iSize);

    }
    inline float* create_dosegrid_buffer()
    {
        if(nullptr != m_dosegridvalue)
        {
            delete[] m_dosegridvalue; 
            m_dosegridvalue = nullptr;
        }
        const int iSize = m_xcount * m_ycount * m_zcount;
        if (iSize>0) 
        {
            m_dosegridvalue = new float[iSize];
            memset(m_dosegridvalue, 0, sizeof(float) * iSize);
        }

        return m_dosegridvalue;
    }

    //doseunit
    inline int get_doseunit() const { return m_doseunit;}
    inline void set_doseunit(const int& doseunit) { m_doseunit = doseunit;}

    //dosesummationtype
    inline int get_dosesummationtype() const { return m_dosesummationtype;}
    inline void set_dosesummationtype(const int& dosesummationtype) { m_dosesummationtype = dosesummationtype;}

    //bitsallocated
    inline int get_bitsallocated() const { return m_bitsallocated;}
    inline void set_bitsallocated(const int& bitsallocated) { m_bitsallocated = bitsallocated;}

    //bitsstored
    inline int get_bitsstored() const { return m_bitsstored;}
    inline void set_bitsstored(const int& bitsstored) { m_bitsstored = bitsstored;}

    //highbits
    inline int get_highbits() const { return m_highbits;}
    inline void set_highbits(const int& highbits) { m_highbits = highbits;}

    //sopinstanceuid
    inline std::string get_sopinstanceuid() const { return m_sopinstanceuid;}
    inline void set_sopinstanceuid(const std::string& sopinstanceuid) { m_sopinstanceuid = sopinstanceuid;}

    //grid_to_pat_t
    inline const float* get_grid_to_pat_t() const { return m_grid_to_pat_t;}
    inline void set_grid_to_pat_t(const float* grid_to_pat_t) { memcpy(m_grid_to_pat_t, grid_to_pat_t, sizeof(float)*16);}

    //isdosevalid
    inline bool get_isdosevalid() const { return m_isdosevalid;}
    inline void set_isdosevalid(const bool& isdosevalid) { m_isdosevalid = isdosevalid;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //26 parameters
    std::string						m_uid;
    std::string						m_planuid;
    std::string						m_normgroupuid;
    std::string						m_beamuid;
    float							m_xcoordinate3dstart;
    float							m_ycoordinate3dstart;
    float							m_zcoordinate3dstart;
    float							m_xcoordinate3dinc;
    float							m_ycoordinate3dinc;
    float							m_zcoordinate3dinc;
    int								m_xcount;
    int								m_ycount;
    int								m_zcount;
    float							m_max;
    float							m_min;
    double							m_accuracy;
	std::string						m_dosegridfilepath;
    float*                          m_dosegridvalue;
    int								m_doseunit;
    int								m_dosesummationtype;
    int								m_bitsallocated;
    int								m_bitsstored;
    int								m_highbits;
    std::string						m_sopinstanceuid;
    float                           m_grid_to_pat_t[16];
    bool							m_isdosevalid;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif