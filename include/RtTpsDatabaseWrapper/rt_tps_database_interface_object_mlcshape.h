//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_MLCSHAPE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_MLCSHAPE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "RtTpsDatabaseWrapper/rt_tps_database_data.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum MLCSHAPE_FIELD
{
    MLCSHAPE_UID = 0,
    MLCSHAPE_SEGMENTUID,
    MLCSHAPE_MLCDIRECTIONTYPE,
    MLCSHAPE_XUPPERJAWPOS,
    MLCSHAPE_XLOWERJAWPOS,
    MLCSHAPE_YUPPERJAWPOS,
    MLCSHAPE_YLOWERJAWPOS,
    MLCSHAPE_ACCURACY,
    MLCSHAPE_LEAFPOSITIONS,
    MLCSHAPE_ISSTARTMLCSHAPE,
    MLCSHAPE_UPDATETIME,
    MLCSHAPE_JAWXISSYMMETRY,
    MLCSHAPE_JAWYISSYMMETRY,
    MLCSHAPE_FIELD_MAX
};

static const char* ENUM2STRING_MLCSHAPE_FIELD[] =
{
    "UID",
    "SEGMENTUID",
    "MLCDIRECTIONTYPE",
    "XUPPERJAWPOS",
    "XLOWERJAWPOS",
    "YUPPERJAWPOS",
    "YLOWERJAWPOS",
    "ACCURACY",
    "LEAFPOSITIONS",
    "ISSTARTMLCSHAPE",
    "UPDATETIME",
    "JAWXISSYMMETRY",
    "JAWYISSYMMETRY",
    "MLCSHAPE_FIELD_MAX"
};

static const char* ENUM2STRING_MLCSHAPE_FIELD_NULL = "1000000000100";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtMlcshapeImp;

class RT_DB_EXPORT RtMlcshape : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtMlcshape(bool bGeneraterUid = false);

    ~RtMlcshape();

    RtMlcshape(const RtMlcshape& mlcshape);

    RtMlcshape& operator = (const RtMlcshape& mlcshape);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*segmentuid varchar
      This mlcshape info belong to which segment*/
    std::string get_segmentuid() const;
    void set_segmentuid(const std::string& segmentuid);

    /*mlcdirectiontype int
      MLCX_DIRECTION
            MLCY_DIRECTION,*/
    int get_mlcdirectiontype() const;
    void set_mlcdirectiontype(const int& mlcdirectiontype);

    /*xupperjawpos double
      Jaw positive position on X direction*/
    double get_xupperjawpos() const;
    void set_xupperjawpos(const double& xupperjawpos);

    /*xlowerjawpos double
      Jaw negtive  position on X direction*/
    double get_xlowerjawpos() const;
    void set_xlowerjawpos(const double& xlowerjawpos);

    /*yupperjawpos double
      Jaw positive position on Y direction*/
    double get_yupperjawpos() const;
    void set_yupperjawpos(const double& yupperjawpos);

    /*ylowerjawpos double
      Jaw negtive  position on Y direction*/
    double get_ylowerjawpos() const;
    void set_ylowerjawpos(const double& ylowerjawpos);

    /*accuracy int
      Accrancy info.No useful currently*/
    int get_accuracy() const;
    void set_accuracy(const int& accuracy);

    /*leafpositions varchar
      Leaf position information*/
    //dLeafLowerPos dLeafUpperPos
    //std::vector<db_Point2d> get_leafpositions() const;
    //std::vector<db_Point2d> get_leafpositions();
    //void set_leafpositions(const std::vector<db_Point2d>& vLeafPos);

    /*isstartmlcshape tinyint
      If this mlcshape is init state*/
    bool get_isstartmlcshape() const;
    void set_isstartmlcshape(const bool& isstartmlcshape);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*jawxissymmetry tinyint
          JAW_X = 1,
                JAW_Y,
            JAW_X_Y,
            JAW_ASYMX,
            JAW_ASYMX_ASYMY,
            JAW_ASYMY,
            JAW_X_ASYMY,
            JAW_Y_ASYMX*/
    bool get_jawxissymmetry() const;
    void set_jawxissymmetry(const bool& jawxissymmetry);

    /*jawyissymmetry tinyint
      是否Y对称*/
    bool get_jawyissymmetry() const;
    void set_jawyissymmetry(const bool& jawyissymmetry);

#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_mlcshape_ex.h"

private:
    RtMlcshapeImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtMlcshapeImp
{

public:
    //default is false to improve performance
    RtMlcshapeImp(bool bGeneraterUid = false);

    ~RtMlcshapeImp();

    RtMlcshapeImp(const RtMlcshapeImp& mlcshape);

    RtMlcshapeImp& operator = (const RtMlcshapeImp& mlcshape);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //segmentuid
    inline std::string get_segmentuid() const { return m_segmentuid;}
    inline void set_segmentuid(const std::string& segmentuid) { m_segmentuid = segmentuid;}

    //mlcdirectiontype
    inline int get_mlcdirectiontype() const { return m_mlcdirectiontype;}
    inline void set_mlcdirectiontype(const int& mlcdirectiontype) { m_mlcdirectiontype = mlcdirectiontype;}

    //xupperjawpos
    inline double get_xupperjawpos() const { return m_xupperjawpos;}
    inline void set_xupperjawpos(const double& xupperjawpos) { m_xupperjawpos = xupperjawpos;}

    //xlowerjawpos
    inline double get_xlowerjawpos() const { return m_xlowerjawpos;}
    inline void set_xlowerjawpos(const double& xlowerjawpos) { m_xlowerjawpos = xlowerjawpos;}

    //yupperjawpos
    inline double get_yupperjawpos() const { return m_yupperjawpos;}
    inline void set_yupperjawpos(const double& yupperjawpos) { m_yupperjawpos = yupperjawpos;}

    //ylowerjawpos
    inline double get_ylowerjawpos() const { return m_ylowerjawpos;}
    inline void set_ylowerjawpos(const double& ylowerjawpos) { m_ylowerjawpos = ylowerjawpos;}

    //accuracy
    inline int get_accuracy() const { return m_accuracy;}
    inline void set_accuracy(const int& accuracy) { m_accuracy = accuracy;}

    //leafpositions
    //dLeafLowerPos dLeafUpperPos
    inline std::vector<db_Point2d> get_leafpositions() const { return m_leafpositions;}
    inline std::vector<db_Point2d> get_leafpositions() { return m_leafpositions;}
    inline void set_leafpositions(const std::vector<db_Point2d>& vLeafPos) { m_leafpositions = vLeafPos;}

    //isstartmlcshape
    inline bool get_isstartmlcshape() const { return m_isstartmlcshape;}
    inline void set_isstartmlcshape(const bool& isstartmlcshape) { m_isstartmlcshape = isstartmlcshape;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //jawxissymmetry
    inline bool get_jawxissymmetry() const { return m_jawxissymmetry;}
    inline void set_jawxissymmetry(const bool& jawxissymmetry) { m_jawxissymmetry = jawxissymmetry;}

    //jawyissymmetry
    inline bool get_jawyissymmetry() const { return m_jawyissymmetry;}
    inline void set_jawyissymmetry(const bool& jawyissymmetry) { m_jawyissymmetry = jawyissymmetry;}

private:    //13 parameters
    std::string						m_uid;
    std::string						m_segmentuid;
    int								m_mlcdirectiontype;
    double							m_xupperjawpos;
    double							m_xlowerjawpos;
    double							m_yupperjawpos;
    double							m_ylowerjawpos;
    int								m_accuracy;
    std::vector<db_Point2d>			m_leafpositions;//dLeafLowerPos dLeafUpperPos
    bool							m_isstartmlcshape;
    DATETIME_BOOST					m_updatetime;
    bool							m_jawxissymmetry;
    bool							m_jawyissymmetry;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif