//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_TCP_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_TCP_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum TCP_FIELD
{
    TCP_UID = 0,
    TCP_SITETEMPLATEUID,
    TCP_NAME,
    TCP_BIOMODEL,
    TCP_D50,
    TCP_GAMMA,
    TCP_ALPHA,
    TCP_E,
    TCP_M,
    TCP_N,
    TCP_UPDATETIME,
    TCP_FIELD_MAX
};

static const char* ENUM2STRING_TCP_FIELD[] =
{
    "UID",
    "SITETEMPLATEUID",
    "NAME",
    "BIOMODEL",
    "D50",
    "GAMMA",
    "ALPHA",
    "E",
    "M",
    "N",
    "UPDATETIME",
    "TCP_FIELD_MAX"
};

static const char* ENUM2STRING_TCP_FIELD_NULL = "10000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtTcpImp;

class RT_DB_EXPORT RtTcp : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtTcp(bool bGeneraterUid = false);

    ~RtTcp();

    RtTcp(const RtTcp& tcp);

    RtTcp& operator = (const RtTcp& tcp);

    /*uid varchar
      每条tcp的uid*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*sitetemplateuid varchar
      该条tcp记录所属的site的uid*/
    std::string get_sitetemplateuid() const;
    void set_sitetemplateuid(const std::string& sitetemplateuid);

    /*name varchar
      器官名称*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*biomodel varchar
      生物模型*/
    std::string get_biomodel() const;
    void set_biomodel(const std::string& biomodel);

    /*d50 double
      计算TCP所需的参数*/
    double get_d50() const;
    void set_d50(const double& d50);

    /*gamma float
      计算TCP所需的参数*/
    float get_gamma() const;
    void set_gamma(const float& gamma);

    /*alpha float
      计算TCP所需的参数*/
    float get_alpha() const;
    void set_alpha(const float& alpha);

    /*e float
      计算TCP所需的参数*/
    float get_e() const;
    void set_e(const float& e);

    /*m float
      计算TCP所需的参数*/
    float get_m() const;
    void set_m(const float& m);

    /*n float
      计算TCP所需的参数*/
    float get_n() const;
    void set_n(const float& n);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtTcpImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtTcpImp
{

public:
    //default is false to improve performance
    RtTcpImp(bool bGeneraterUid = false);

    ~RtTcpImp();

    RtTcpImp(const RtTcpImp& tcp);

    RtTcpImp& operator = (const RtTcpImp& tcp);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //sitetemplateuid
    inline std::string get_sitetemplateuid() const { return m_sitetemplateuid;}
    inline void set_sitetemplateuid(const std::string& sitetemplateuid) { m_sitetemplateuid = sitetemplateuid;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //biomodel
    inline std::string get_biomodel() const { return m_biomodel;}
    inline void set_biomodel(const std::string& biomodel) { m_biomodel = biomodel;}

    //d50
    inline double get_d50() const { return m_d50;}
    inline void set_d50(const double& d50) { m_d50 = d50;}

    //gamma
    inline float get_gamma() const { return m_gamma;}
    inline void set_gamma(const float& gamma) { m_gamma = gamma;}

    //alpha
    inline float get_alpha() const { return m_alpha;}
    inline void set_alpha(const float& alpha) { m_alpha = alpha;}

    //e
    inline float get_e() const { return m_e;}
    inline void set_e(const float& e) { m_e = e;}

    //m
    inline float get_m() const { return m_m;}
    inline void set_m(const float& m) { m_m = m;}

    //n
    inline float get_n() const { return m_n;}
    inline void set_n(const float& n) { m_n = n;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //11 parameters
    std::string						m_uid;
    std::string						m_sitetemplateuid;
    std::string						m_name;
    std::string						m_biomodel;
    double							m_d50;
    float							m_gamma;
    float							m_alpha;
    float							m_e;
    float							m_m;
    float							m_n;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif