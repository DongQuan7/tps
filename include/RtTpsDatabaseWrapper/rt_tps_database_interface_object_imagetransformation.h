//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_IMAGETRANSFORMATION_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_IMAGETRANSFORMATION_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum IMAGETRANSFORMATION_FIELD
{
    IMAGETRANSFORMATION_UID = 0,
    IMAGETRANSFORMATION_ORIGINALSERIESUID,
    IMAGETRANSFORMATION_TRANSFOMATIONSERIESUID,
    IMAGETRANSFORMATION_REGISTRATIONMATRIX,
    IMAGETRANSFORMATION_DESCRIPTION,
    IMAGETRANSFORMATION_REGISTRATIONMETHOD,
    IMAGETRANSFORMATION_UPDATETIME,
    IMAGETRANSFORMATION_FIELD_MAX
};

static const char* ENUM2STRING_IMAGETRANSFORMATION_FIELD[] =
{
    "UID",
    "ORIGINALSERIESUID",
    "TRANSFOMATIONSERIESUID",
    "REGISTRATIONMATRIX",
    "DESCRIPTION",
    "REGISTRATIONMETHOD",
    "UPDATETIME",
    "IMAGETRANSFORMATION_FIELD_MAX"
};

static const char* ENUM2STRING_IMAGETRANSFORMATION_FIELD_NULL = "1110001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtImagetransformationImp;

class RT_DB_EXPORT RtImagetransformation : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtImagetransformation(bool bGeneraterUid = false);

    ~RtImagetransformation();

    RtImagetransformation(const RtImagetransformation& imagetransformation);

    RtImagetransformation& operator = (const RtImagetransformation& imagetransformation);

    /*uid varchar
      */
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*originalseriesuid varchar
      原始序列id 主键*/
    std::string get_originalseriesuid() const;
    void set_originalseriesuid(const std::string& originalseriesuid);

    /*transfomationseriesuid varchar
      transfomation series uid PK*/
    std::string get_transfomationseriesuid() const;
    void set_transfomationseriesuid(const std::string& transfomationseriesuid);

    /*registrationmatrix varchar
      注册矩阵*/
    const float* get_registrationmatrix() const;
    void set_registrationmatrix(const float* registrationmatrix);

    /*description varchar
      用于保存用户在批准融合时输入的description add jie,wang_RT*/
    std::string get_description() const;
    void set_description(const std::string& description);

    /*registrationmethod int
      */
    int get_registrationmethod() const;
    void set_registrationmethod(const int& registrationmethod);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtImagetransformationImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtImagetransformationImp
{

public:
    //default is false to improve performance
    RtImagetransformationImp(bool bGeneraterUid = false);

    ~RtImagetransformationImp();

    RtImagetransformationImp(const RtImagetransformationImp& imagetransformation);

    RtImagetransformationImp& operator = (const RtImagetransformationImp& imagetransformation);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //originalseriesuid
    inline std::string get_originalseriesuid() const { return m_originalseriesuid;}
    inline void set_originalseriesuid(const std::string& originalseriesuid) { m_originalseriesuid = originalseriesuid;}

    //transfomationseriesuid
    inline std::string get_transfomationseriesuid() const { return m_transfomationseriesuid;}
    inline void set_transfomationseriesuid(const std::string& transfomationseriesuid) { m_transfomationseriesuid = transfomationseriesuid;}

    //registrationmatrix
    inline const float* get_registrationmatrix() const { return m_registrationmatrix;}
    inline void set_registrationmatrix(const float* registrationmatrix)                              { memcpy(m_registrationmatrix, registrationmatrix, sizeof(float)*16);}

    //description
    inline std::string get_description() const { return m_description;}
    inline void set_description(const std::string& description) { m_description = description;}

    //registrationmethod
    inline int get_registrationmethod() const { return m_registrationmethod;}
    inline void set_registrationmethod(const int& registrationmethod) { m_registrationmethod = registrationmethod;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //7 parameters
    std::string						m_uid;
    std::string						m_originalseriesuid;
    std::string						m_transfomationseriesuid;
    float                           m_registrationmatrix[16];
    std::string						m_description;
    int								m_registrationmethod;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif