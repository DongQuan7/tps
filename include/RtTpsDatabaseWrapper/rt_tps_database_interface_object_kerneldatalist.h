//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELDATALIST_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_KERNELDATALIST_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum KERNELDATALIST_FIELD
{
    KERNELDATALIST_UID = 0,
    KERNELDATALIST_NUMOFPHI,
    KERNELDATALIST_PHIDATA,
    KERNELDATALIST_NUMOFR,
    KERNELDATALIST_RDATA,
    KERNELDATALIST_CRC,
    KERNELDATALIST_UPDATETIME,
    KERNELDATALIST_FIELD_MAX
};

static const char* ENUM2STRING_KERNELDATALIST_FIELD[] =
{
    "UID",
    "NUMOFPHI",
    "PHIDATA",
    "NUMOFR",
    "RDATA",
    "CRC",
    "UPDATETIME",
    "KERNELDATALIST_FIELD_MAX"
};

static const char* ENUM2STRING_KERNELDATALIST_FIELD_NULL = "1000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtKerneldatalistImp;

class RT_DB_EXPORT RtKerneldatalist : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtKerneldatalist(bool bGeneraterUid = false);

    ~RtKerneldatalist();

    RtKerneldatalist(const RtKerneldatalist& kerneldatalist);

    RtKerneldatalist& operator = (const RtKerneldatalist& kerneldatalist);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*numofphi int
      PHI数据的数目*/
    int get_numofphi() const;
    void set_numofphi(const int& numofphi);

    /*phidata varchar
      PHI数据*/
    std::string get_phidata() const;
    void set_phidata(const std::string& phidata);

    /*numofr int
      R数据的数目*/
    int get_numofr() const;
    void set_numofr(const int& numofr);

    /*rdata varchar
      R数据*/
    std::string get_rdata() const;
    void set_rdata(const std::string& rdata);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtKerneldatalistImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtKerneldatalistImp
{

public:
    //default is false to improve performance
    RtKerneldatalistImp(bool bGeneraterUid = false);

    ~RtKerneldatalistImp();

    RtKerneldatalistImp(const RtKerneldatalistImp& kerneldatalist);

    RtKerneldatalistImp& operator = (const RtKerneldatalistImp& kerneldatalist);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //numofphi
    inline int get_numofphi() const { return m_numofphi;}
    inline void set_numofphi(const int& numofphi) { m_numofphi = numofphi;}

    //phidata
    inline std::string get_phidata() const { return m_phidata;}
    inline void set_phidata(const std::string& phidata) { m_phidata = phidata;}

    //numofr
    inline int get_numofr() const { return m_numofr;}
    inline void set_numofr(const int& numofr) { m_numofr = numofr;}

    //rdata
    inline std::string get_rdata() const { return m_rdata;}
    inline void set_rdata(const std::string& rdata) { m_rdata = rdata;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //7 parameters
    std::string						m_uid;
    int								m_numofphi;
    std::string						m_phidata;
    int								m_numofr;
    std::string						m_rdata;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif