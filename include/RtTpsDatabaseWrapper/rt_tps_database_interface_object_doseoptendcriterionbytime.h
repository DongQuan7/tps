//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_DOSEOPTENDCRITERIONBYTIME_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_DOSEOPTENDCRITERIONBYTIME_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum DOSEOPTENDCRITERIONBYTIME_FIELD
{
    DOSEOPTENDCRITERIONBYTIME_UID = 0,
    DOSEOPTENDCRITERIONBYTIME_OPTENDCRITERIONTYPE,
    DOSEOPTENDCRITERIONBYTIME_RUNTIME,
    DOSEOPTENDCRITERIONBYTIME_UPDATETIME,
    DOSEOPTENDCRITERIONBYTIME_FIELD_MAX
};

static const char* ENUM2STRING_DOSEOPTENDCRITERIONBYTIME_FIELD[] =
{
    "UID",
    "OPTENDCRITERIONTYPE",
    "RUNTIME",
    "UPDATETIME",
    "DOSEOPTENDCRITERIONBYTIME_FIELD_MAX"
};

static const char* ENUM2STRING_DOSEOPTENDCRITERIONBYTIME_FIELD_NULL = "1001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtDoseoptendcriterionbytimeImp;

class RT_DB_EXPORT RtDoseoptendcriterionbytime : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtDoseoptendcriterionbytime(bool bGeneraterUid = false);

    ~RtDoseoptendcriterionbytime();

    RtDoseoptendcriterionbytime(const RtDoseoptendcriterionbytime& doseoptendcriterionbytime);

    RtDoseoptendcriterionbytime& operator = (const RtDoseoptendcriterionbytime& doseoptendcriterionbytime);

    /*uid varchar
      PK*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*optendcriteriontype int
      opt end criterion type 
            OPTENDCRITERIONTYPE_UNKNOW_TYPE=-1,
            BY_TIME = 1,
            BY_ITERATION =2*/
    int get_optendcriteriontype() const;
    void set_optendcriteriontype(const int& optendcriteriontype);

    /*runtime float
      run time value*/
    float get_runtime() const;
    void set_runtime(const float& runtime);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);


private:
    RtDoseoptendcriterionbytimeImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtDoseoptendcriterionbytimeImp
{

public:
    //default is false to improve performance
    RtDoseoptendcriterionbytimeImp(bool bGeneraterUid = false);

    ~RtDoseoptendcriterionbytimeImp();

    RtDoseoptendcriterionbytimeImp(const RtDoseoptendcriterionbytimeImp& doseoptendcriterionbytime);

    RtDoseoptendcriterionbytimeImp& operator = (const RtDoseoptendcriterionbytimeImp& doseoptendcriterionbytime);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //optendcriteriontype
    inline int get_optendcriteriontype() const { return m_optendcriteriontype;}
    inline void set_optendcriteriontype(const int& optendcriteriontype) { m_optendcriteriontype = optendcriteriontype;}

    //runtime
    inline float get_runtime() const { return m_runtime;}
    inline void set_runtime(const float& runtime) { m_runtime = runtime;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

private:    //4 parameters
    std::string						m_uid;
    int								m_optendcriteriontype;
    float							m_runtime;
    DATETIME_BOOST					m_updatetime;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif