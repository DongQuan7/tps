//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_COMMISSIONEDUNIT_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_COMMISSIONEDUNIT_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"
#include <vector>
#include <map>

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum COMMISSIONEDUNIT_FIELD
{
    COMMISSIONEDUNIT_UID = 0,
    COMMISSIONEDUNIT_MACHINEUID,
    COMMISSIONEDUNIT_KERNELDATALISTUID,
    COMMISSIONEDUNIT_ENERGY,
    COMMISSIONEDUNIT_RADIATIONTYPE,
    COMMISSIONEDUNIT_MAXIMUMDOSERATE_MUPERMINUTE,
    COMMISSIONEDUNIT_DOSERATE,
    COMMISSIONEDUNIT_CALIBRATIONDATE,
    COMMISSIONEDUNIT_DECAYCONSTANT,
    COMMISSIONEDUNIT_CAL_DIST,
    COMMISSIONEDUNIT_CAL_DEPTH,
    COMMISSIONEDUNIT_ENDEFFECT,
    COMMISSIONEDUNIT_TIMEUNITS,
    COMMISSIONEDUNIT_SCXCOUNT,
    COMMISSIONEDUNIT_SCYCOUNT,
    COMMISSIONEDUNIT_SCXPOSITIONS,
    COMMISSIONEDUNIT_SCYPOSITIONS,
    COMMISSIONEDUNIT_SC,
    COMMISSIONEDUNIT_TYPE,
    COMMISSIONEDUNIT_VERSION,
    COMMISSIONEDUNIT_TRAN,
    COMMISSIONEDUNIT_FLATNESSDEPTHCOUNT,
    COMMISSIONEDUNIT_FLATNESSRADIUSCOUNT,
    COMMISSIONEDUNIT_FLATNESSDEPTHVEC,
    COMMISSIONEDUNIT_FLATNESSRADIUSVEC,
    COMMISSIONEDUNIT_DEPTHCOUNT,
    COMMISSIONEDUNIT_RADIUSCOUNT,
    COMMISSIONEDUNIT_DEPTHVEC,
    COMMISSIONEDUNIT_RADIUSVEC,
    COMMISSIONEDUNIT_SAR,
    COMMISSIONEDUNIT_TAR0DEPTHCOUNT,
    COMMISSIONEDUNIT_TAR0_DEPTH_VEC,
    COMMISSIONEDUNIT_FLATNESS,
    COMMISSIONEDUNIT_TAR0,
    COMMISSIONEDUNIT_SP,
    COMMISSIONEDUNIT_SP0,
    COMMISSIONEDUNIT_SP_PRIME,
    COMMISSIONEDUNIT_HIDDEN,
    COMMISSIONEDUNIT_NAME,
    COMMISSIONEDUNIT_DMAX,
    COMMISSIONEDUNIT_SAD,
    COMMISSIONEDUNIT_PSD,
    COMMISSIONEDUNIT_SRCDIAM1,
    COMMISSIONEDUNIT_SRCDIAM2,
    COMMISSIONEDUNIT_SRCDIAM3,
    COMMISSIONEDUNIT_SRCRATIO1,
    COMMISSIONEDUNIT_SRCRATIO3,
    COMMISSIONEDUNIT_EEQDIAM,
    COMMISSIONEDUNIT_XJAWCOUNT,
    COMMISSIONEDUNIT_YJAWCOUNT,
    COMMISSIONEDUNIT_XJAWTYPE,
    COMMISSIONEDUNIT_YJAWTYPE,
    COMMISSIONEDUNIT_XSDD,
    COMMISSIONEDUNIT_YSDD,
    COMMISSIONEDUNIT_GANTRYSENSE,
    COMMISSIONEDUNIT_GANTRYOFFSET,
    COMMISSIONEDUNIT_TABLESENSE,
    COMMISSIONEDUNIT_TABLEOFFSET,
    COMMISSIONEDUNIT_COLLIMATORSENSE,
    COMMISSIONEDUNIT_COLLIMATOROFFSET,
    COMMISSIONEDUNIT_REFERENCEFLUENCE,
    COMMISSIONEDUNIT_REFERENCEDOSE,
    COMMISSIONEDUNIT_DIAM1,
    COMMISSIONEDUNIT_DIAM2,
    COMMISSIONEDUNIT_RATIO1,
    COMMISSIONEDUNIT_TRANSMISSION,
    COMMISSIONEDUNIT_MU,
    COMMISSIONEDUNIT_DMU_DX,
    COMMISSIONEDUNIT_DMU_DR,
    COMMISSIONEDUNIT_OFFAXISDATAX,
    COMMISSIONEDUNIT_OFFAXISDATAY,
    COMMISSIONEDUNIT_MUDATAX,
    COMMISSIONEDUNIT_MUDATAY,
    COMMISSIONEDUNIT_DMUDATAY,
    COMMISSIONEDUNIT_OUTPUTMUY,
    COMMISSIONEDUNIT_SRC_D,
    COMMISSIONEDUNIT_SRC_ATTEN,
    COMMISSIONEDUNIT_NORM_10X10,
    COMMISSIONEDUNIT_ION,
    COMMISSIONEDUNIT_DM,
    COMMISSIONEDUNIT_C1,
    COMMISSIONEDUNIT_C2,
    COMMISSIONEDUNIT_C3,
    COMMISSIONEDUNIT_FFS10,
    COMMISSIONEDUNIT_K,
    COMMISSIONEDUNIT_A,
    COMMISSIONEDUNIT_DF,
    COMMISSIONEDUNIT_SF,
    COMMISSIONEDUNIT_ALLOWCONTINUOUSDOSERATE,
    COMMISSIONEDUNIT_DISCRETEDOSERATE,
    COMMISSIONEDUNIT_COMMISSIONUNITNAME,
    COMMISSIONEDUNIT_ISFLATTENED,
    COMMISSIONEDUNIT_ISCONVOLUTIONSUPPORT,
    COMMISSIONEDUNIT_ISPENCILEBEAMSUPPORT,
    COMMISSIONEDUNIT_ISMONTECARLOSUPPORT,
    COMMISSIONEDUNIT_AVAILABLEPHOTONPLANTYPE,
    COMMISSIONEDUNIT_AVAILABLEELECTRONPLANTYPE,
    COMMISSIONEDUNIT_DATATEMPLATETYPENAME,
    COMMISSIONEDUNIT_CALIBRATIONFSX,
    COMMISSIONEDUNIT_CALIBRATIONFSY,
    COMMISSIONEDUNIT_SSD,
    COMMISSIONEDUNIT_PHANTOMSIZELATERAL,
    COMMISSIONEDUNIT_PHANTOMSIZEDEPTH,
    COMMISSIONEDUNIT_VIEWCUSTOMIZEDEPTH,
    COMMISSIONEDUNIT_BLOCKTRAYPENUMBRA,
    COMMISSIONEDUNIT_BLOCKATTENFACTOR,
    COMMISSIONEDUNIT_VIEWHALFPROFILE,
    COMMISSIONEDUNIT_CONVDATASTRUCT_SDD1,
    COMMISSIONEDUNIT_CONVDATASTRUCT_SDD2,
    COMMISSIONEDUNIT_CONVDATASTRUCT_PSD,
    COMMISSIONEDUNIT_COMMISSIONEDUNIT_DMAX,
    COMMISSIONEDUNIT_DATATYPE,
    COMMISSIONEDUNIT_NORMALIZEDDOSE,
    COMMISSIONEDUNIT_XJAWFACTOR,
    COMMISSIONEDUNIT_YJAWFACTOR,
    COMMISSIONEDUNIT_MLCFACTOR,
    COMMISSIONEDUNIT_DDMUDR,
    COMMISSIONEDUNIT_DEFAULTDOSERATEINDEX,
    COMMISSIONEDUNIT_CALCMODE,
    COMMISSIONEDUNIT_UPDATETIME,
    COMMISSIONEDUNIT_CCTONGUEWIDTH,
    COMMISSIONEDUNIT_CCGROOVEWIDTH,
    COMMISSIONEDUNIT_CCLEAFTIPWIDTH,
    COMMISSIONEDUNIT_RESERVECC,
    COMMISSIONEDUNIT_PBTONGUEWIDTH,
    COMMISSIONEDUNIT_PBGROOVEWIDTH,
    COMMISSIONEDUNIT_PBLEAFTIPWIDTH,
    COMMISSIONEDUNIT_RESERVEPB,
    COMMISSIONEDUNIT_CCTRANSMISSION,
    COMMISSIONEDUNIT_PBTRANSMISSION,
    COMMISSIONEDUNIT_MINDOSERATE_MUPERMIN,
    COMMISSIONEDUNIT_FIELD_MAX
};

static const char* ENUM2STRING_COMMISSIONEDUNIT_FIELD[] =
{
    "UID",
    "MACHINEUID",
    "KERNELDATALISTUID",
    "ENERGY",
    "RADIATIONTYPE",
    "MAXIMUMDOSERATE_MUPERMINUTE",
    "DOSERATE",
    "CALIBRATIONDATE",
    "DECAYCONSTANT",
    "CAL_DIST",
    "CAL_DEPTH",
    "ENDEFFECT",
    "TIMEUNITS",
    "SCXCOUNT",
    "SCYCOUNT",
    "SCXPOSITIONS",
    "SCYPOSITIONS",
    "SC",
    "TYPE",
    "VERSION",
    "TRAN",
    "FLATNESSDEPTHCOUNT",
    "FLATNESSRADIUSCOUNT",
    "FLATNESSDEPTHVEC",
    "FLATNESSRADIUSVEC",
    "DEPTHCOUNT",
    "RADIUSCOUNT",
    "DEPTHVEC",
    "RADIUSVEC",
    "SAR",
    "TAR0DEPTHCOUNT",
    "TAR0_DEPTH_VEC",
    "FLATNESS",
    "TAR0",
    "SP",
    "SP0",
    "SP_PRIME",
    "HIDDEN",
    "NAME",
    "DMAX",
    "SAD",
    "PSD",
    "SRCDIAM1",
    "SRCDIAM2",
    "SRCDIAM3",
    "SRCRATIO1",
    "SRCRATIO3",
    "EEQDIAM",
    "XJAWCOUNT",
    "YJAWCOUNT",
    "XJAWTYPE",
    "YJAWTYPE",
    "XSDD",
    "YSDD",
    "GANTRYSENSE",
    "GANTRYOFFSET",
    "TABLESENSE",
    "TABLEOFFSET",
    "COLLIMATORSENSE",
    "COLLIMATOROFFSET",
    "REFERENCEFLUENCE",
    "REFERENCEDOSE",
    "DIAM1",
    "DIAM2",
    "RATIO1",
    "TRANSMISSION",
    "MU",
    "DMU_DX",
    "DMU_DR",
    "OFFAXISDATAX",
    "OFFAXISDATAY",
    "MUDATAX",
    "MUDATAY",
    "DMUDATAY",
    "OUTPUTMUY",
    "SRC_D",
    "SRC_ATTEN",
    "NORM_10X10",
    "ION",
    "DM",
    "C1",
    "C2",
    "C3",
    "FFS10",
    "K",
    "A",
    "DF",
    "SF",
    "ALLOWCONTINUOUSDOSERATE",
    "DISCRETEDOSERATE",
    "COMMISSIONUNITNAME",
    "ISFLATTENED",
    "ISCONVOLUTIONSUPPORT",
    "ISPENCILEBEAMSUPPORT",
    "ISMONTECARLOSUPPORT",
    "AVAILABLEPHOTONPLANTYPE",
    "AVAILABLEELECTRONPLANTYPE",
    "DATATEMPLATETYPENAME",
    "CALIBRATIONFSX",
    "CALIBRATIONFSY",
    "SSD",
    "PHANTOMSIZELATERAL",
    "PHANTOMSIZEDEPTH",
    "VIEWCUSTOMIZEDEPTH",
    "BLOCKTRAYPENUMBRA",
    "BLOCKATTENFACTOR",
    "VIEWHALFPROFILE",
    "CONVDATASTRUCT_SDD1",
    "CONVDATASTRUCT_SDD2",
    "CONVDATASTRUCT_PSD",
    "COMMISSIONEDUNIT_DMAX",
    "DATATYPE",
    "NORMALIZEDDOSE",
    "XJAWFACTOR",
    "YJAWFACTOR",
    "MLCFACTOR",
    "DDMUDR",
    "DEFAULTDOSERATEINDEX",
    "CALCMODE",
    "UPDATETIME",
    "CCTONGUEWIDTH",
    "CCGROOVEWIDTH",
    "CCLEAFTIPWIDTH",
    "RESERVECC",
    "PBTONGUEWIDTH",
    "PBGROOVEWIDTH",
    "PBLEAFTIPWIDTH",
    "RESERVEPB",
    "CCTRANSMISSION",
    "PBTRANSMISSION",
    "MINDOSERATE_MUPERMIN",
    "COMMISSIONEDUNIT_FIELD_MAX"
};

static const char* ENUM2STRING_COMMISSIONEDUNIT_FIELD_NULL = "10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtCommissionedunitImp;

class RT_DB_EXPORT RtCommissionedunit : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtCommissionedunit(bool bGeneraterUid = false);

    ~RtCommissionedunit();

    RtCommissionedunit(const RtCommissionedunit& commissionedunit);

    RtCommissionedunit& operator = (const RtCommissionedunit& commissionedunit);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*machineuid varchar
      Related machine.*/
    std::string get_machineuid() const;
    void set_machineuid(const std::string& machineuid);

    /*kerneldatalistuid varchar
      fk related kerneldatalist uid,Add on 20140509 to identify one KernelDataList object*/
    std::string get_kerneldatalistuid() const;
    void set_kerneldatalistuid(const std::string& kerneldatalistuid);

    /*energy float
      射线能量，以Mev为单位*/
    float get_energy() const;
    void set_energy(const float& energy);

    /*radiationtype int
      射线种类， 电子，光子*/
    int get_radiationtype() const;
    void set_radiationtype(const int& radiationtype);

    /*maximumdoserate_muperminute float
      // Add on 20140613 by Jingjie.zhou*/
    float get_maximumdoserate_muperminute() const;
    void set_maximumdoserate_muperminute(const float& maximumdoserate_muperminute);

    /*doserate float
      calibrated dose rate at cal_dis and cal_depth
            copy from plunc TIME_CALC_PARAMETERS class*/
    float get_doserate() const;
    void set_doserate(const float& doserate);

    /*calibrationdate date
      copy from plunc TIME_CALC_PARAMETERS class*/
    DATE_BOOST get_calibrationdate() const;
    void set_calibrationdate(const DATE_BOOST& calibrationdate);

    /*decayconstant float
      inverse days
            copy from plunc TIME_CALC_PARAMETERS class*/
    float get_decayconstant() const;
    void set_decayconstant(const float& decayconstant);

    /*cal_dist float
      SSD + depth for calibration
            copy from plunc TIME_CALC_PARAMETERS class*/
    float get_cal_dist() const;
    void set_cal_dist(const float& cal_dist);

    /*cal_depth float
      depth of calibration; negative if "in air"
            copy from plunc TIME_CALC_PARAMETERS class*/
    float get_cal_depth() const;
    void set_cal_depth(const float& cal_depth);

    /*endeffect float
      actual time = set time + end_effect
            copy from plunc TIME_CALC_PARAMETERS class*/
    float get_endeffect() const;
    void set_endeffect(const float& endeffect);

    /*timeunits int
      one of MU, ENGLISH, DECIMAL
            copy from plunc TIME_CALC_PARAMETERS class*/
    int get_timeunits() const;
    void set_timeunits(const int& timeunits);

    /*scxcount int
      number of positions in x
            copy from plunc TIME_CALC_PARAMETERS class*/
    int get_scxcount() const;
    void set_scxcount(const int& scxcount);

    /*scycount int
      number of positions in y
            copy from plunc TIME_CALC_PARAMETERS class*/
    int get_scycount() const;
    void set_scycount(const int& scycount);

    /*scxpositions varchar
      float type array,length = 25 
            copy from plunc TIME_CALC_PARAMETERS class*/
    std::string get_scxpositions() const;
    void set_scxpositions(const std::string& scxpositions);

    /*scypositions varchar
      float type array,length = 25 
            copy from plunc TIME_CALC_PARAMETERS class*/
    std::string get_scypositions() const;
    void set_scypositions(const std::string& scypositions);

    /*sc blob
      float type array,length = 25*25
            copy from plunc TIME_CALC_PARAMETERS class*/
    std::string get_sc() const;
    void set_sc(const std::string& sc);

    /*type int
      one of TAR, TPR, TMR 
            Copy from plunc SAR_TABLE class*/
    int get_type() const;
    void set_type(const int& type);

    /*version int
      Version Number
            Copy from plunc SAR_TABLE class*/
    int get_version() const;
    void set_version(const int& version);

    /*tran float
      collimator transmission factor
            Copy from plunc SAR_TABLE class*/
    float get_tran() const;
    void set_tran(const float& tran);

    /*flatnessdepthcount int
      Copy from plunc SAR_TABLE class*/
    int get_flatnessdepthcount() const;
    void set_flatnessdepthcount(const int& flatnessdepthcount);

    /*flatnessradiuscount int
      Copy from plunc SAR_TABLE class*/
    int get_flatnessradiuscount() const;
    void set_flatnessradiuscount(const int& flatnessradiuscount);

    /*flatnessdepthvec varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_flatnessdepthvec() const;
    void set_flatnessdepthvec(const std::string& flatnessdepthvec);

    /*flatnessradiusvec varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_flatnessradiusvec() const;
    void set_flatnessradiusvec(const std::string& flatnessradiusvec);

    /*depthcount int
      Copy from plunc SAR_TABLE class*/
    int get_depthcount() const;
    void set_depthcount(const int& depthcount);

    /*radiuscount int
      Copy from plunc SAR_TABLE class*/
    int get_radiuscount() const;
    void set_radiuscount(const int& radiuscount);

    /*depthvec varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_depthvec() const;
    void set_depthvec(const std::string& depthvec);

    /*radiusvec varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_radiusvec() const;
    void set_radiusvec(const std::string& radiusvec);

    /*sar blob
      Copy from plunc SAR_TABLE class*/
    std::string get_sar() const;
    void set_sar(const std::string& sar);

    /*tar0depthcount int
      Copy from plunc SAR_TABLE class*/
    int get_tar0depthcount() const;
    void set_tar0depthcount(const int& tar0depthcount);

    /*tar0_depth_vec varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_tar0_depth_vec() const;
    void set_tar0_depth_vec(const std::string& tar0_depth_vec);

    /*flatness blob
      One to MAX_FLATNESS_DEPTHS flatness profiles may be included here.
            The radius vector is at machine SAD and the flatness profiles are
            assumed to be depth scaled accordingly.
            Copy from plunc SAR_TABLE class*/
    std::string get_flatness() const;
    void set_flatness(const std::string& flatness);

    /*tar0 varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_tar0() const;
    void set_tar0(const std::string& tar0);

    /*sp varchar
      This is a Phantom Scatter Factor (in principle the same as Khan's
            Sp) which is intended to correct for the change in scatter dose to
            the reference depth as a function of irradiated phantom area.  We do
            a Clarkson-type summation to determine the Sp for any given point.
            This table uses the same radii as the SAR table.  It is ignored for
            SAR/TAR calculations.
            assumed to be depth scaled accordingly.
            Copy from plunc SAR_TABLE class*/
    std::string get_sp() const;
    void set_sp(const std::string& sp);

    /*sp0 float
      As delivered the Sp table is not suitable for
            the kind of Clarkson summation we intend to do with it,
            primarily because Sp(0) != 0.0  so what we do is to subtract
            the Sp(0) value from the table and thus build an integratable
            table stored here.  Then we just do a Clarkson-type integration
            and then add back the Sp0.
            Copy from plunc SAR_TABLE class*/
    float get_sp0() const;
    void set_sp0(const float& sp0);

    /*sp_prime varchar
      Copy from plunc SAR_TABLE class*/
    std::string get_sp_prime() const;
    void set_sp_prime(const std::string& sp_prime);

    /*hidden int
      copy from plunc UNIT class*/
    int get_hidden() const;
    void set_hidden(const int& hidden);

    /*name varchar
      copy from plunc UNIT class*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*dmax float
      the nominal depth of maximum dose
            copy from plunc UNIT class*/
    float get_dmax() const;
    void set_dmax(const float& dmax);

    /*sad float
      Source to Axis Distance
            copy from plunc UNIT class*/
    float get_sad() const;
    void set_sad(const float& sad);

    /*psd float
      Primary src to Secondary src Distance
            copy from plunc UNIT class*/
    float get_psd() const;
    void set_psd(const float& psd);

    /*srcdiam1 float
      for penumbra calculations, primary
            copy from plunc UNIT class*/
    float get_srcdiam1() const;
    void set_srcdiam1(const float& srcdiam1);

    /*srcdiam2 float
      for penumbra calculations, secondary
            copy from plunc UNIT class*/
    float get_srcdiam2() const;
    void set_srcdiam2(const float& srcdiam2);

    /*srcdiam3 float
      for penumbra calculations, transition
            copy from plunc UNIT class*/
    float get_srcdiam3() const;
    void set_srcdiam3(const float& srcdiam3);

    /*srcratio1 float
      fraction of source due to 1&3
            copy from plunc UNIT class*/
    float get_srcratio1() const;
    void set_srcratio1(const float& srcratio1);

    /*srcratio3 float
      fraction of 1&3 due to 3
            copy from plunc UNIT class*/
    float get_srcratio3() const;
    void set_srcratio3(const float& srcratio3);

    /*eeqdiam float
      electronic equilibrium blurring diameter
            copy from plunc UNIT class*/
    float get_eeqdiam() const;
    void set_eeqdiam(const float& eeqdiam);

    /*xjawcount int
      x jaw count
            copy from plunc UNIT class*/
    int get_xjawcount() const;
    void set_xjawcount(const int& xjawcount);

    /*yjawcount int
      y jaw count
            copy from plunc UNIT class*/
    int get_yjawcount() const;
    void set_yjawcount(const int& yjawcount);

    /*xjawtype int
      DOUBLE_DIVERGENT, etc
            copy from plunc UNIT class*/
    int get_xjawtype() const;
    void set_xjawtype(const int& xjawtype);

    /*yjawtype int
      DOUBLE_DIVERGENT, etc
            copy from plunc UNIT class*/
    int get_yjawtype() const;
    void set_yjawtype(const int& yjawtype);

    /*xsdd float
      x jaw到靶距离*/
    float get_xsdd() const;
    void set_xsdd(const float& xsdd);

    /*ysdd float
      y jaw到靶距离*/
    float get_ysdd() const;
    void set_ysdd(const float& ysdd);

    /*gantrysense int
      +1 => +angle=ccw ; -1 => +angle=cw rotation
            copy from plunc UNIT class*/
    int get_gantrysense() const;
    void set_gantrysense(const int& gantrysense);

    /*gantryoffset float
      currently unused
            copy from plunc UNIT class*/
    float get_gantryoffset() const;
    void set_gantryoffset(const float& gantryoffset);

    /*tablesense int
      copy from plunc UNIT class*/
    int get_tablesense() const;
    void set_tablesense(const int& tablesense);

    /*tableoffset float
      copy from plunc UNIT class*/
    float get_tableoffset() const;
    void set_tableoffset(const float& tableoffset);

    /*collimatorsense int
      copy from plunc UNIT class*/
    int get_collimatorsense() const;
    void set_collimatorsense(const int& collimatorsense);

    /*collimatoroffset float
      copy from plunc UNIT class*/
    float get_collimatoroffset() const;
    void set_collimatoroffset(const float& collimatoroffset);

    /*referencefluence float
      归一化通量*/
    float get_referencefluence() const;
    void set_referencefluence(const float& referencefluence);

    /*referencedose float
      归一化剂量*/
    float get_referencedose() const;
    void set_referencedose(const float& referencedose);

    /*diam1 float
      初级源直径*/
    float get_diam1() const;
    void set_diam1(const float& diam1);

    /*diam2 float
      次级源直径*/
    float get_diam2() const;
    void set_diam2(const float& diam2);

    /*ratio1 float
      初级源比例*/
    float get_ratio1() const;
    void set_ratio1(const float& ratio1);

    /*transmission float
      透射率*/
    float get_transmission() const;
    void set_transmission(const float& transmission);

    /*mu float
      最小射野时的射线硬度参数*/
    float get_mu() const;
    void set_mu(const float& mu);

    /*dmu_dx float
      最小射野时射线随深度衰减的参数 越小表征射线越硬，即高能量的射线越多*/
    float get_dmu_dx() const;
    void set_dmu_dx(const float& dmu_dx);

    /*dmu_dr float
      最小射野时射线随半径衰减的参数*/
    float get_dmu_dr() const;
    void set_dmu_dr(const float& dmu_dr);

    /*offaxisdatax varchar
      离轴x数据*/
    std::string get_offaxisdatax() const;
    void set_offaxisdatax(const std::string& offaxisdatax);

    /*offaxisdatay varchar
      离轴y数据*/
    std::string get_offaxisdatay() const;
    void set_offaxisdatay(const std::string& offaxisdatay);

    /*mudatax varchar
      不同射野的射野大小数据*/
    std::string get_mudatax() const;
    void set_mudatax(const std::string& mudatax);

    /*mudatay varchar
      不同射野的射野对应的硬度修正参数数据*/
    std::string get_mudatay() const;
    void set_mudatay(const std::string& mudatay);

    /*dmudatay varchar
      不同射野的DMUY数据*/
    std::string get_dmudatay() const;
    void set_dmudatay(const std::string& dmudatay);

    /*outputmuy blob
      不同射野的输出因子数据*/
    std::string get_outputmuy() const;
    void set_outputmuy(const std::string& outputmuy);

    /*src_d float
      源随深度变化衰减规律的最大深度*/
    float get_src_d() const;
    void set_src_d(const float& src_d);

    /*src_atten float
      初级源与次级源相关参数*/
    float get_src_atten() const;
    void set_src_atten(const float& src_atten);

    /*norm_10x10 float
      归一化参数*/
    float get_norm_10x10() const;
    void set_norm_10x10(const float& norm_10x10);

    /*ion int
      电子污染开关*/
    int get_ion() const;
    void set_ion(const int& ion);

    /*dm float
      电子污染公式参数*/
    float get_dm() const;
    void set_dm(const float& dm);

    /*c1 float
      电子污染公式参数*/
    float get_c1() const;
    void set_c1(const float& c1);

    /*c2 float
      电子污染公式参数*/
    float get_c2() const;
    void set_c2(const float& c2);

    /*c3 float
      电子污染公式参数*/
    float get_c3() const;
    void set_c3(const float& c3);

    /*ffs10 float
      电子污染公式参数*/
    float get_ffs10() const;
    void set_ffs10(const float& ffs10);

    /*k float
      电子污染公式参数*/
    float get_k() const;
    void set_k(const float& k);

    /*a float
      电子污染公式参数*/
    float get_a() const;
    void set_a(const float& a);

    /*df float
      电子污染公式参数*/
    float get_df() const;
    void set_df(const float& df);

    /*sf float
      电子污染公式参数*/
    float get_sf() const;
    void set_sf(const float& sf);

    /*allowcontinuousdoserate tinyint
      allow continuous dose rate*/
    bool get_allowcontinuousdoserate() const;
    void set_allowcontinuousdoserate(const bool& allowcontinuousdoserate);

    /*discretedoserate varchar
      discrete dose rate*/
    std::vector<float> get_discretedoserate() const;
    void set_discretedoserate(const std::vector<float>& discretedoserate);

    /*commissionunitname varchar
      commissionID名*/
    std::string get_commissionunitname() const;
    void set_commissionunitname(const std::string& commissionunitname);

    /*isflattened tinyint
      flat 为true＿FFF为false*/
    bool get_isflattened() const;
    void set_isflattened(const bool& isflattened);

    /*isconvolutionsupport tinyint
      是否支持convolution算法*/
    bool get_isconvolutionsupport() const;
    void set_isconvolutionsupport(const bool& isconvolutionsupport);

    /*ispencilebeamsupport tinyint
      是否支持pencilbeam算法*/
    bool get_ispencilebeamsupport() const;
    void set_ispencilebeamsupport(const bool& ispencilebeamsupport);

    /*ismontecarlosupport tinyint
      是否支持montecarlo算法*/
    bool get_ismontecarlosupport() const;
    void set_ismontecarlosupport(const bool& ismontecarlosupport);

    /*availablephotonplantype varchar
      可选光子类型*/
    std::string get_availablephotonplantype() const;
    void set_availablephotonplantype(const std::string& availablephotonplantype);

    /*availableelectronplantype varchar
      可选电子类型*/
    std::string get_availableelectronplantype() const;
    void set_availableelectronplantype(const std::string& availableelectronplantype);

    /*datatemplatetypename varchar
      "default"表示空白模板，"varian6MV","electa9MV"...*/
    std::string get_datatemplatetypename() const;
    void set_datatemplatetypename(const std::string& datatemplatetypename);

    /*calibrationfsx float
      x方向校准*/
    float get_calibrationfsx() const;
    void set_calibrationfsx(const float& calibrationfsx);

    /*calibrationfsy float
      y方向校准*/
    float get_calibrationfsy() const;
    void set_calibrationfsy(const float& calibrationfsy);

    /*ssd float
      源皮距离*/
    float get_ssd() const;
    void set_ssd(const float& ssd);

    /*phantomsizelateral float
      phantom size lateral*/
    float get_phantomsizelateral() const;
    void set_phantomsizelateral(const float& phantomsizelateral);

    /*phantomsizedepth float
      phantom size depth*/
    float get_phantomsizedepth() const;
    void set_phantomsizedepth(const float& phantomsizedepth);

    /*viewcustomizedepth float
      view customize depth add shanghe.chen*/
    float get_viewcustomizedepth() const;
    void set_viewcustomizedepth(const float& viewcustomizedepth);

    /*blocktraypenumbra float
      block的类型*/
    float get_blocktraypenumbra() const;
    void set_blocktraypenumbra(const float& blocktraypenumbra);

    /*blockattenfactor float
      block的衰减系数*/
    float get_blockattenfactor() const;
    void set_blockattenfactor(const float& blockattenfactor);

    /*viewhalfprofile tinyint
      view half profile add liu linqi*/
    bool get_viewhalfprofile() const;
    void set_viewhalfprofile(const bool& viewhalfprofile);

    /*convdatastruct_sdd1 float
      convolution使用的XSDD*/
    float get_convdatastruct_sdd1() const;
    void set_convdatastruct_sdd1(const float& convdatastruct_sdd1);

    /*convdatastruct_sdd2 float
      convolution使用的YSDD*/
    float get_convdatastruct_sdd2() const;
    void set_convdatastruct_sdd2(const float& convdatastruct_sdd2);

    /*convdatastruct_psd float
      convolution的PSD参数*/
    float get_convdatastruct_psd() const;
    void set_convdatastruct_psd(const float& convdatastruct_psd);

    /*commissionedunit_dmax float
      dmax点深度*/
    float get_commissionedunit_dmax() const;
    void set_commissionedunit_dmax(const float& commissionedunit_dmax);

    /*datatype int
      数据类型*/
    int get_datatype() const;
    void set_datatype(const int& datatype);

    /*normalizeddose float
      该字段意义为当前commissioned unit对应的一整套测量曲线中10x10射野在归一化深度处的剂量大小*/
    float get_normalizeddose() const;
    void set_normalizeddose(const float& normalizeddose);

    /*xjawfactor float
      x jaw 透射因子*/
    float get_xjawfactor() const;
    void set_xjawfactor(const float& xjawfactor);

    /*yjawfactor float
      y jaw 透射因子*/
    float get_yjawfactor() const;
    void set_yjawfactor(const float& yjawfactor);

    /*mlcfactor float
      mlc透射因子*/
    float get_mlcfactor() const;
    void set_mlcfactor(const float& mlcfactor);

    /*ddmudr varchar
      convolution不同射野的DDMUDR参数数据*/
    std::string get_ddmudr() const;
    void set_ddmudr(const std::string& ddmudr);

    /*defaultdoserateindex int
      需要标识用户具体选择哪个DoseRate.*/
    int get_defaultdoserateindex() const;
    void set_defaultdoserateindex(const int& defaultdoserateindex);

    /*calcmode tinyint
      计算模式*/
    bool get_calcmode() const;
    void set_calcmode(const bool& calcmode);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    /*cctonguewidth float
      Tongue宽度*/
    float get_cctonguewidth() const;
    void set_cctonguewidth(const float& cctonguewidth);

    /*ccgroovewidth float
      Groove宽度*/
    float get_ccgroovewidth() const;
    void set_ccgroovewidth(const float& ccgroovewidth);

    /*ccleaftipwidth float
      LeafTip宽度*/
    float get_ccleaftipwidth() const;
    void set_ccleaftipwidth(const float& ccleaftipwidth);

    /*reservecc varchar
      预留*/
    std::string get_reservecc() const;
    void set_reservecc(const std::string& reservecc);

    /*pbtonguewidth float
      Tongue宽度*/
    float get_pbtonguewidth() const;
    void set_pbtonguewidth(const float& pbtonguewidth);

    /*pbgroovewidth float
      Groove宽度*/
    float get_pbgroovewidth() const;
    void set_pbgroovewidth(const float& pbgroovewidth);

    /*pbleaftipwidth float
      LeafTip宽度*/
    float get_pbleaftipwidth() const;
    void set_pbleaftipwidth(const float& pbleaftipwidth);

    /*reservepb varchar
      预留*/
    std::string get_reservepb() const;
    void set_reservepb(const std::string& reservepb);

    /*cctransmission float
      Transmission系数*/
    float get_cctransmission() const;
    void set_cctransmission(const float& cctransmission);

    /*pbtransmission float
      Transmission系数*/
    float get_pbtransmission() const;
    void set_pbtransmission(const float& pbtransmission);

    /*mindoserate_mupermin float
      最小剂量率*/
    float get_mindoserate_mupermin() const;
    void set_mindoserate_mupermin(const float& mindoserate_mupermin);

    //////////////////////////////////////////////////////////////////////////
    const std::map<std::string, float>& get_discrete_trayfactor() const;
    void set_discrete_trayfactor(std::map<std::string, float>& mapTrayfactors);

private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtCommissionedunitImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtCommissionedunitImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtCommissionedunitImp(bool bGeneraterUid = false);

    virtual ~RtCommissionedunitImp();

    RtCommissionedunitImp(const RtCommissionedunitImp& commissionedunit);

    RtCommissionedunitImp& operator = (const RtCommissionedunitImp& commissionedunit);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //machineuid
    inline std::string get_machineuid() const { return m_machineuid;}
    inline void set_machineuid(const std::string& machineuid) { m_machineuid = machineuid;}

    //kerneldatalistuid
    inline std::string get_kerneldatalistuid() const { return m_kerneldatalistuid;}
    inline void set_kerneldatalistuid(const std::string& kerneldatalistuid) { m_kerneldatalistuid = kerneldatalistuid;}

    //energy
    inline float get_energy() const { return m_energy;}
    inline void set_energy(const float& energy) { m_energy = energy;}

    //radiationtype
    inline int get_radiationtype() const { return m_radiationtype;}
    inline void set_radiationtype(const int& radiationtype) { m_radiationtype = radiationtype;}

    //maximumdoserate_muperminute
    inline float get_maximumdoserate_muperminute() const { return m_maximumdoserate_muperminute;}
    inline void set_maximumdoserate_muperminute(const float& maximumdoserate_muperminute) { m_maximumdoserate_muperminute = maximumdoserate_muperminute;}

    //doserate
    inline float get_doserate() const { return m_doserate;}
    inline void set_doserate(const float& doserate) { m_doserate = doserate;}

    //calibrationdate
    inline DATE_BOOST get_calibrationdate() const { return m_calibrationdate;}
    inline void set_calibrationdate(const DATE_BOOST& calibrationdate) { m_calibrationdate = calibrationdate;}

    //decayconstant
    inline float get_decayconstant() const { return m_decayconstant;}
    inline void set_decayconstant(const float& decayconstant) { m_decayconstant = decayconstant;}

    //cal_dist
    inline float get_cal_dist() const { return m_cal_dist;}
    inline void set_cal_dist(const float& cal_dist) { m_cal_dist = cal_dist;}

    //cal_depth
    inline float get_cal_depth() const { return m_cal_depth;}
    inline void set_cal_depth(const float& cal_depth) { m_cal_depth = cal_depth;}

    //endeffect
    inline float get_endeffect() const { return m_endeffect;}
    inline void set_endeffect(const float& endeffect) { m_endeffect = endeffect;}

    //timeunits
    inline int get_timeunits() const { return m_timeunits;}
    inline void set_timeunits(const int& timeunits) { m_timeunits = timeunits;}

    //scxcount
    inline int get_scxcount() const { return m_scxcount;}
    inline void set_scxcount(const int& scxcount) { m_scxcount = scxcount;}

    //scycount
    inline int get_scycount() const { return m_scycount;}
    inline void set_scycount(const int& scycount) { m_scycount = scycount;}

    //scxpositions
    inline std::string get_scxpositions() const { return m_scxpositions;}
    inline void set_scxpositions(const std::string& scxpositions) { m_scxpositions = scxpositions;}

    //scypositions
    inline std::string get_scypositions() const { return m_scypositions;}
    inline void set_scypositions(const std::string& scypositions) { m_scypositions = scypositions;}

    //sc
    inline std::string get_sc() const { return m_sc;}
    inline void set_sc(const std::string& sc) { m_sc = sc;}

    //type
    inline int get_type() const { return m_type;}
    inline void set_type(const int& type) { m_type = type;}

    //version
    inline int get_version() const { return m_version;}
    inline void set_version(const int& version) { m_version = version;}

    //tran
    inline float get_tran() const { return m_tran;}
    inline void set_tran(const float& tran) { m_tran = tran;}

    //flatnessdepthcount
    inline int get_flatnessdepthcount() const { return m_flatnessdepthcount;}
    inline void set_flatnessdepthcount(const int& flatnessdepthcount) { m_flatnessdepthcount = flatnessdepthcount;}

    //flatnessradiuscount
    inline int get_flatnessradiuscount() const { return m_flatnessradiuscount;}
    inline void set_flatnessradiuscount(const int& flatnessradiuscount) { m_flatnessradiuscount = flatnessradiuscount;}

    //flatnessdepthvec
    inline std::string get_flatnessdepthvec() const { return m_flatnessdepthvec;}
    inline void set_flatnessdepthvec(const std::string& flatnessdepthvec) { m_flatnessdepthvec = flatnessdepthvec;}

    //flatnessradiusvec
    inline std::string get_flatnessradiusvec() const { return m_flatnessradiusvec;}
    inline void set_flatnessradiusvec(const std::string& flatnessradiusvec) { m_flatnessradiusvec = flatnessradiusvec;}

    //depthcount
    inline int get_depthcount() const { return m_depthcount;}
    inline void set_depthcount(const int& depthcount) { m_depthcount = depthcount;}

    //radiuscount
    inline int get_radiuscount() const { return m_radiuscount;}
    inline void set_radiuscount(const int& radiuscount) { m_radiuscount = radiuscount;}

    //depthvec
    inline std::string get_depthvec() const { return m_depthvec;}
    inline void set_depthvec(const std::string& depthvec) { m_depthvec = depthvec;}

    //radiusvec
    inline std::string get_radiusvec() const { return m_radiusvec;}
    inline void set_radiusvec(const std::string& radiusvec) { m_radiusvec = radiusvec;}

    //sar
    inline std::string get_sar() const { return m_sar;}
    inline void set_sar(const std::string& sar) { m_sar = sar;}

    //tar0depthcount
    inline int get_tar0depthcount() const { return m_tar0depthcount;}
    inline void set_tar0depthcount(const int& tar0depthcount) { m_tar0depthcount = tar0depthcount;}

    //tar0_depth_vec
    inline std::string get_tar0_depth_vec() const { return m_tar0_depth_vec;}
    inline void set_tar0_depth_vec(const std::string& tar0_depth_vec) { m_tar0_depth_vec = tar0_depth_vec;}

    //flatness
    inline std::string get_flatness() const { return m_flatness;}
    inline void set_flatness(const std::string& flatness) { m_flatness = flatness;}

    //tar0
    inline std::string get_tar0() const { return m_tar0;}
    inline void set_tar0(const std::string& tar0) { m_tar0 = tar0;}

    //sp
    inline std::string get_sp() const { return m_sp;}
    inline void set_sp(const std::string& sp) { m_sp = sp;}

    //sp0
    inline float get_sp0() const { return m_sp0;}
    inline void set_sp0(const float& sp0) { m_sp0 = sp0;}

    //sp_prime
    inline std::string get_sp_prime() const { return m_sp_prime;}
    inline void set_sp_prime(const std::string& sp_prime) { m_sp_prime = sp_prime;}

    //hidden
    inline int get_hidden() const { return m_hidden;}
    inline void set_hidden(const int& hidden) { m_hidden = hidden;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //dmax
    inline float get_dmax() const { return m_dmax;}
    inline void set_dmax(const float& dmax) { m_dmax = dmax;}

    //sad
    inline float get_sad() const { return m_sad;}
    inline void set_sad(const float& sad) { m_sad = sad;}

    //psd
    inline float get_psd() const { return m_psd;}
    inline void set_psd(const float& psd) { m_psd = psd;}

    //srcdiam1
    inline float get_srcdiam1() const { return m_srcdiam1;}
    inline void set_srcdiam1(const float& srcdiam1) { m_srcdiam1 = srcdiam1;}

    //srcdiam2
    inline float get_srcdiam2() const { return m_srcdiam2;}
    inline void set_srcdiam2(const float& srcdiam2) { m_srcdiam2 = srcdiam2;}

    //srcdiam3
    inline float get_srcdiam3() const { return m_srcdiam3;}
    inline void set_srcdiam3(const float& srcdiam3) { m_srcdiam3 = srcdiam3;}

    //srcratio1
    inline float get_srcratio1() const { return m_srcratio1;}
    inline void set_srcratio1(const float& srcratio1) { m_srcratio1 = srcratio1;}

    //srcratio3
    inline float get_srcratio3() const { return m_srcratio3;}
    inline void set_srcratio3(const float& srcratio3) { m_srcratio3 = srcratio3;}

    //eeqdiam
    inline float get_eeqdiam() const { return m_eeqdiam;}
    inline void set_eeqdiam(const float& eeqdiam) { m_eeqdiam = eeqdiam;}

    //xjawcount
    inline int get_xjawcount() const { return m_xjawcount;}
    inline void set_xjawcount(const int& xjawcount) { m_xjawcount = xjawcount;}

    //yjawcount
    inline int get_yjawcount() const { return m_yjawcount;}
    inline void set_yjawcount(const int& yjawcount) { m_yjawcount = yjawcount;}

    //xjawtype
    inline int get_xjawtype() const { return m_xjawtype;}
    inline void set_xjawtype(const int& xjawtype) { m_xjawtype = xjawtype;}

    //yjawtype
    inline int get_yjawtype() const { return m_yjawtype;}
    inline void set_yjawtype(const int& yjawtype) { m_yjawtype = yjawtype;}

    //xsdd
    inline float get_xsdd() const { return m_xsdd;}
    inline void set_xsdd(const float& xsdd) { m_xsdd = xsdd;}

    //ysdd
    inline float get_ysdd() const { return m_ysdd;}
    inline void set_ysdd(const float& ysdd) { m_ysdd = ysdd;}

    //gantrysense
    inline int get_gantrysense() const { return m_gantrysense;}
    inline void set_gantrysense(const int& gantrysense) { m_gantrysense = gantrysense;}

    //gantryoffset
    inline float get_gantryoffset() const { return m_gantryoffset;}
    inline void set_gantryoffset(const float& gantryoffset) { m_gantryoffset = gantryoffset;}

    //tablesense
    inline int get_tablesense() const { return m_tablesense;}
    inline void set_tablesense(const int& tablesense) { m_tablesense = tablesense;}

    //tableoffset
    inline float get_tableoffset() const { return m_tableoffset;}
    inline void set_tableoffset(const float& tableoffset) { m_tableoffset = tableoffset;}

    //collimatorsense
    inline int get_collimatorsense() const { return m_collimatorsense;}
    inline void set_collimatorsense(const int& collimatorsense) { m_collimatorsense = collimatorsense;}

    //collimatoroffset
    inline float get_collimatoroffset() const { return m_collimatoroffset;}
    inline void set_collimatoroffset(const float& collimatoroffset) { m_collimatoroffset = collimatoroffset;}

    //referencefluence
    inline float get_referencefluence() const { return m_referencefluence;}
    inline void set_referencefluence(const float& referencefluence) { m_referencefluence = referencefluence;}

    //referencedose
    inline float get_referencedose() const { return m_referencedose;}
    inline void set_referencedose(const float& referencedose) { m_referencedose = referencedose;}

    //diam1
    inline float get_diam1() const { return m_diam1;}
    inline void set_diam1(const float& diam1) { m_diam1 = diam1;}

    //diam2
    inline float get_diam2() const { return m_diam2;}
    inline void set_diam2(const float& diam2) { m_diam2 = diam2;}

    //ratio1
    inline float get_ratio1() const { return m_ratio1;}
    inline void set_ratio1(const float& ratio1) { m_ratio1 = ratio1;}

    //transmission
    inline float get_transmission() const { return m_transmission;}
    inline void set_transmission(const float& transmission) { m_transmission = transmission;}

    //mu
    inline float get_mu() const { return m_mu;}
    inline void set_mu(const float& mu) { m_mu = mu;}

    //dmu_dx
    inline float get_dmu_dx() const { return m_dmu_dx;}
    inline void set_dmu_dx(const float& dmu_dx) { m_dmu_dx = dmu_dx;}

    //dmu_dr
    inline float get_dmu_dr() const { return m_dmu_dr;}
    inline void set_dmu_dr(const float& dmu_dr) { m_dmu_dr = dmu_dr;}

    //offaxisdatax
    inline std::string get_offaxisdatax() const { return m_offaxisdatax;}
    inline void set_offaxisdatax(const std::string& offaxisdatax) { m_offaxisdatax = offaxisdatax;}

    //offaxisdatay
    inline std::string get_offaxisdatay() const { return m_offaxisdatay;}
    inline void set_offaxisdatay(const std::string& offaxisdatay) { m_offaxisdatay = offaxisdatay;}

    //mudatax
    inline std::string get_mudatax() const { return m_mudatax;}
    inline void set_mudatax(const std::string& mudatax) { m_mudatax = mudatax;}

    //mudatay
    inline std::string get_mudatay() const { return m_mudatay;}
    inline void set_mudatay(const std::string& mudatay) { m_mudatay = mudatay;}

    //dmudatay
    inline std::string get_dmudatay() const { return m_dmudatay;}
    inline void set_dmudatay(const std::string& dmudatay) { m_dmudatay = dmudatay;}

    //outputmuy
    inline std::string get_outputmuy() const { return m_outputmuy;}
    inline void set_outputmuy(const std::string& outputmuy) { m_outputmuy = outputmuy;}

    //src_d
    inline float get_src_d() const { return m_src_d;}
    inline void set_src_d(const float& src_d) { m_src_d = src_d;}

    //src_atten
    inline float get_src_atten() const { return m_src_atten;}
    inline void set_src_atten(const float& src_atten) { m_src_atten = src_atten;}

    //norm_10x10
    inline float get_norm_10x10() const { return m_norm_10x10;}
    inline void set_norm_10x10(const float& norm_10x10) { m_norm_10x10 = norm_10x10;}

    //ion
    inline int get_ion() const { return m_ion;}
    inline void set_ion(const int& ion) { m_ion = ion;}

    //dm
    inline float get_dm() const { return m_dm;}
    inline void set_dm(const float& dm) { m_dm = dm;}

    //c1
    inline float get_c1() const { return m_c1;}
    inline void set_c1(const float& c1) { m_c1 = c1;}

    //c2
    inline float get_c2() const { return m_c2;}
    inline void set_c2(const float& c2) { m_c2 = c2;}

    //c3
    inline float get_c3() const { return m_c3;}
    inline void set_c3(const float& c3) { m_c3 = c3;}

    //ffs10
    inline float get_ffs10() const { return m_ffs10;}
    inline void set_ffs10(const float& ffs10) { m_ffs10 = ffs10;}

    //k
    inline float get_k() const { return m_k;}
    inline void set_k(const float& k) { m_k = k;}

    //a
    inline float get_a() const { return m_a;}
    inline void set_a(const float& a) { m_a = a;}

    //df
    inline float get_df() const { return m_df;}
    inline void set_df(const float& df) { m_df = df;}

    //sf
    inline float get_sf() const { return m_sf;}
    inline void set_sf(const float& sf) { m_sf = sf;}

    //allowcontinuousdoserate
    inline bool get_allowcontinuousdoserate() const { return m_allowcontinuousdoserate;}
    inline void set_allowcontinuousdoserate(const bool& allowcontinuousdoserate) { m_allowcontinuousdoserate = allowcontinuousdoserate;}

    //discretedoserate
    inline std::vector<float> get_discretedoserate() const { return m_discretedoserate;}
    inline void set_discretedoserate(const std::vector<float>& discretedoserate) { m_discretedoserate = discretedoserate;}

    //commissionunitname
    inline std::string get_commissionunitname() const { return m_commissionunitname;}
    inline void set_commissionunitname(const std::string& commissionunitname) { m_commissionunitname = commissionunitname;}

    //isflattened
    inline bool get_isflattened() const { return m_isflattened;}
    inline void set_isflattened(const bool& isflattened) { m_isflattened = isflattened;}

    //isconvolutionsupport
    inline bool get_isconvolutionsupport() const { return m_isconvolutionsupport;}
    inline void set_isconvolutionsupport(const bool& isconvolutionsupport) { m_isconvolutionsupport = isconvolutionsupport;}

    //ispencilebeamsupport
    inline bool get_ispencilebeamsupport() const { return m_ispencilebeamsupport;}
    inline void set_ispencilebeamsupport(const bool& ispencilebeamsupport) { m_ispencilebeamsupport = ispencilebeamsupport;}

    //ismontecarlosupport
    inline bool get_ismontecarlosupport() const { return m_ismontecarlosupport;}
    inline void set_ismontecarlosupport(const bool& ismontecarlosupport) { m_ismontecarlosupport = ismontecarlosupport;}

    //availablephotonplantype
    inline std::string get_availablephotonplantype() const { return m_availablephotonplantype;}
    inline void set_availablephotonplantype(const std::string& availablephotonplantype) { m_availablephotonplantype = availablephotonplantype;}

    //availableelectronplantype
    inline std::string get_availableelectronplantype() const { return m_availableelectronplantype;}
    inline void set_availableelectronplantype(const std::string& availableelectronplantype) { m_availableelectronplantype = availableelectronplantype;}

    //datatemplatetypename
    inline std::string get_datatemplatetypename() const { return m_datatemplatetypename;}
    inline void set_datatemplatetypename(const std::string& datatemplatetypename) { m_datatemplatetypename = datatemplatetypename;}

    //calibrationfsx
    inline float get_calibrationfsx() const { return m_calibrationfsx;}
    inline void set_calibrationfsx(const float& calibrationfsx) { m_calibrationfsx = calibrationfsx;}

    //calibrationfsy
    inline float get_calibrationfsy() const { return m_calibrationfsy;}
    inline void set_calibrationfsy(const float& calibrationfsy) { m_calibrationfsy = calibrationfsy;}

    //ssd
    inline float get_ssd() const { return m_ssd;}
    inline void set_ssd(const float& ssd) { m_ssd = ssd;}

    //phantomsizelateral
    inline float get_phantomsizelateral() const { return m_phantomsizelateral;}
    inline void set_phantomsizelateral(const float& phantomsizelateral) { m_phantomsizelateral = phantomsizelateral;}

    //phantomsizedepth
    inline float get_phantomsizedepth() const { return m_phantomsizedepth;}
    inline void set_phantomsizedepth(const float& phantomsizedepth) { m_phantomsizedepth = phantomsizedepth;}

    //viewcustomizedepth
    inline float get_viewcustomizedepth() const { return m_viewcustomizedepth;}
    inline void set_viewcustomizedepth(const float& viewcustomizedepth) { m_viewcustomizedepth = viewcustomizedepth;}

    //blocktraypenumbra
    inline float get_blocktraypenumbra() const { return m_blocktraypenumbra;}
    inline void set_blocktraypenumbra(const float& blocktraypenumbra) { m_blocktraypenumbra = blocktraypenumbra;}

    //blockattenfactor
    inline float get_blockattenfactor() const { return m_blockattenfactor;}
    inline void set_blockattenfactor(const float& blockattenfactor) { m_blockattenfactor = blockattenfactor;}

    //viewhalfprofile
    inline bool get_viewhalfprofile() const { return m_viewhalfprofile;}
    inline void set_viewhalfprofile(const bool& viewhalfprofile) { m_viewhalfprofile = viewhalfprofile;}

    //convdatastruct_sdd1
    inline float get_convdatastruct_sdd1() const { return m_convdatastruct_sdd1;}
    inline void set_convdatastruct_sdd1(const float& convdatastruct_sdd1) { m_convdatastruct_sdd1 = convdatastruct_sdd1;}

    //convdatastruct_sdd2
    inline float get_convdatastruct_sdd2() const { return m_convdatastruct_sdd2;}
    inline void set_convdatastruct_sdd2(const float& convdatastruct_sdd2) { m_convdatastruct_sdd2 = convdatastruct_sdd2;}

    //convdatastruct_psd
    inline float get_convdatastruct_psd() const { return m_convdatastruct_psd;}
    inline void set_convdatastruct_psd(const float& convdatastruct_psd) { m_convdatastruct_psd = convdatastruct_psd;}

    //commissionedunit_dmax
    inline float get_commissionedunit_dmax() const { return m_commissionedunit_dmax;}
    inline void set_commissionedunit_dmax(const float& commissionedunit_dmax) { m_commissionedunit_dmax = commissionedunit_dmax;}

    //datatype
    inline int get_datatype() const { return m_datatype;}
    inline void set_datatype(const int& datatype) { m_datatype = datatype;}

    //normalizeddose
    inline float get_normalizeddose() const { return m_normalizeddose;}
    inline void set_normalizeddose(const float& normalizeddose) { m_normalizeddose = normalizeddose;}

    //xjawfactor
    inline float get_xjawfactor() const { return m_xjawfactor;}
    inline void set_xjawfactor(const float& xjawfactor) { m_xjawfactor = xjawfactor;}

    //yjawfactor
    inline float get_yjawfactor() const { return m_yjawfactor;}
    inline void set_yjawfactor(const float& yjawfactor) { m_yjawfactor = yjawfactor;}

    //mlcfactor
    inline float get_mlcfactor() const { return m_mlcfactor;}
    inline void set_mlcfactor(const float& mlcfactor) { m_mlcfactor = mlcfactor;}

    //ddmudr
    inline std::string get_ddmudr() const { return m_ddmudr;}
    inline void set_ddmudr(const std::string& ddmudr) { m_ddmudr = ddmudr;}

    //defaultdoserateindex
    inline int get_defaultdoserateindex() const { return m_defaultdoserateindex;}
    inline void set_defaultdoserateindex(const int& defaultdoserateindex) { m_defaultdoserateindex = defaultdoserateindex;}

    //calcmode
    inline bool get_calcmode() const { return m_calcmode;}
    inline void set_calcmode(const bool& calcmode) { m_calcmode = calcmode;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}

    //cctonguewidth
    inline float get_cctonguewidth() const { return m_cctonguewidth;}
    inline void set_cctonguewidth(const float& cctonguewidth) { m_cctonguewidth = cctonguewidth;}

    //ccgroovewidth
    inline float get_ccgroovewidth() const { return m_ccgroovewidth;}
    inline void set_ccgroovewidth(const float& ccgroovewidth) { m_ccgroovewidth = ccgroovewidth;}

    //ccleaftipwidth
    inline float get_ccleaftipwidth() const { return m_ccleaftipwidth;}
    inline void set_ccleaftipwidth(const float& ccleaftipwidth) { m_ccleaftipwidth = ccleaftipwidth;}

    //reservecc
    inline std::string get_reservecc() const { return m_reservecc;}
    inline void set_reservecc(const std::string& reservecc) { m_reservecc = reservecc;}

    //pbtonguewidth
    inline float get_pbtonguewidth() const { return m_pbtonguewidth;}
    inline void set_pbtonguewidth(const float& pbtonguewidth) { m_pbtonguewidth = pbtonguewidth;}

    //pbgroovewidth
    inline float get_pbgroovewidth() const { return m_pbgroovewidth;}
    inline void set_pbgroovewidth(const float& pbgroovewidth) { m_pbgroovewidth = pbgroovewidth;}

    //pbleaftipwidth
    inline float get_pbleaftipwidth() const { return m_pbleaftipwidth;}
    inline void set_pbleaftipwidth(const float& pbleaftipwidth) { m_pbleaftipwidth = pbleaftipwidth;}

    //reservepb
    inline std::string get_reservepb() const { return m_reservepb;}
    inline void set_reservepb(const std::string& reservepb) { m_reservepb = reservepb;}

    //cctransmission
    inline float get_cctransmission() const { return m_cctransmission;}
    inline void set_cctransmission(const float& cctransmission) { m_cctransmission = cctransmission;}

    //pbtransmission
    inline float get_pbtransmission() const { return m_pbtransmission;}
    inline void set_pbtransmission(const float& pbtransmission) { m_pbtransmission = pbtransmission;}

    //mindoserate_mupermin
    inline float get_mindoserate_mupermin() const { return m_mindoserate_mupermin;}
    inline void set_mindoserate_mupermin(const float& mindoserate_mupermin) { m_mindoserate_mupermin = mindoserate_mupermin;}
    //////////////////////////////////////////////////////////////////////////
    inline const std::map<std::string, float>& get_discrete_trayfactor() const { return m_map_trayfactors; }
    inline void set_discrete_trayfactor(std::map<std::string, float>& mapTrayfactors) { m_map_trayfactors = mapTrayfactors; }

private:    //131 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_machineuid);
		ar & BOOST_SERIALIZATION_NVP(m_kerneldatalistuid);
		ar & BOOST_SERIALIZATION_NVP(m_energy);
		ar & BOOST_SERIALIZATION_NVP(m_radiationtype);
		ar & BOOST_SERIALIZATION_NVP(m_maximumdoserate_muperminute);
		ar & BOOST_SERIALIZATION_NVP(m_doserate);
		ar & BOOST_SERIALIZATION_NVP(m_calibrationdate);
		ar & BOOST_SERIALIZATION_NVP(m_decayconstant);
		ar & BOOST_SERIALIZATION_NVP(m_cal_dist);
		ar & BOOST_SERIALIZATION_NVP(m_cal_depth);
		ar & BOOST_SERIALIZATION_NVP(m_endeffect);
		ar & BOOST_SERIALIZATION_NVP(m_timeunits);
		ar & BOOST_SERIALIZATION_NVP(m_scxcount);
		ar & BOOST_SERIALIZATION_NVP(m_scycount);
		ar & BOOST_SERIALIZATION_NVP(m_scxpositions);
		ar & BOOST_SERIALIZATION_NVP(m_scypositions);
		ar & BOOST_SERIALIZATION_NVP(m_sc);
		ar & BOOST_SERIALIZATION_NVP(m_type);
		ar & BOOST_SERIALIZATION_NVP(m_version);
		ar & BOOST_SERIALIZATION_NVP(m_tran);
		ar & BOOST_SERIALIZATION_NVP(m_flatnessdepthcount);
		ar & BOOST_SERIALIZATION_NVP(m_flatnessradiuscount);
		ar & BOOST_SERIALIZATION_NVP(m_flatnessdepthvec);
		ar & BOOST_SERIALIZATION_NVP(m_flatnessradiusvec);
		ar & BOOST_SERIALIZATION_NVP(m_depthcount);
		ar & BOOST_SERIALIZATION_NVP(m_radiuscount);
		ar & BOOST_SERIALIZATION_NVP(m_depthvec);
		ar & BOOST_SERIALIZATION_NVP(m_radiusvec);
		ar & BOOST_SERIALIZATION_NVP(m_sar);
		ar & BOOST_SERIALIZATION_NVP(m_tar0depthcount);
		ar & BOOST_SERIALIZATION_NVP(m_tar0_depth_vec);
		ar & BOOST_SERIALIZATION_NVP(m_flatness);
		ar & BOOST_SERIALIZATION_NVP(m_tar0);
		ar & BOOST_SERIALIZATION_NVP(m_sp);
		ar & BOOST_SERIALIZATION_NVP(m_sp0);
		ar & BOOST_SERIALIZATION_NVP(m_sp_prime);
		ar & BOOST_SERIALIZATION_NVP(m_hidden);
		ar & BOOST_SERIALIZATION_NVP(m_name);
		ar & BOOST_SERIALIZATION_NVP(m_dmax);
		ar & BOOST_SERIALIZATION_NVP(m_sad);
		ar & BOOST_SERIALIZATION_NVP(m_psd);
		ar & BOOST_SERIALIZATION_NVP(m_srcdiam1);
		ar & BOOST_SERIALIZATION_NVP(m_srcdiam2);
		ar & BOOST_SERIALIZATION_NVP(m_srcdiam3);
		ar & BOOST_SERIALIZATION_NVP(m_srcratio1);
		ar & BOOST_SERIALIZATION_NVP(m_srcratio3);
		ar & BOOST_SERIALIZATION_NVP(m_eeqdiam);
		ar & BOOST_SERIALIZATION_NVP(m_xjawcount);
		ar & BOOST_SERIALIZATION_NVP(m_yjawcount);
		ar & BOOST_SERIALIZATION_NVP(m_xjawtype);
		ar & BOOST_SERIALIZATION_NVP(m_yjawtype);
		ar & BOOST_SERIALIZATION_NVP(m_xsdd);
		ar & BOOST_SERIALIZATION_NVP(m_ysdd);
		ar & BOOST_SERIALIZATION_NVP(m_gantrysense);
		ar & BOOST_SERIALIZATION_NVP(m_gantryoffset);
		ar & BOOST_SERIALIZATION_NVP(m_tablesense);
		ar & BOOST_SERIALIZATION_NVP(m_tableoffset);
		ar & BOOST_SERIALIZATION_NVP(m_collimatorsense);
		ar & BOOST_SERIALIZATION_NVP(m_collimatoroffset);
		ar & BOOST_SERIALIZATION_NVP(m_referencefluence);
		ar & BOOST_SERIALIZATION_NVP(m_referencedose);
		ar & BOOST_SERIALIZATION_NVP(m_diam1);
		ar & BOOST_SERIALIZATION_NVP(m_diam2);
		ar & BOOST_SERIALIZATION_NVP(m_ratio1);
		ar & BOOST_SERIALIZATION_NVP(m_transmission);
		ar & BOOST_SERIALIZATION_NVP(m_mu);
		ar & BOOST_SERIALIZATION_NVP(m_dmu_dx);
		ar & BOOST_SERIALIZATION_NVP(m_dmu_dr);
		ar & BOOST_SERIALIZATION_NVP(m_offaxisdatax);
		ar & BOOST_SERIALIZATION_NVP(m_offaxisdatay);
		ar & BOOST_SERIALIZATION_NVP(m_mudatax);
		ar & BOOST_SERIALIZATION_NVP(m_mudatay);
		ar & BOOST_SERIALIZATION_NVP(m_dmudatay);
		ar & BOOST_SERIALIZATION_NVP(m_outputmuy);
		ar & BOOST_SERIALIZATION_NVP(m_src_d);
		ar & BOOST_SERIALIZATION_NVP(m_src_atten);
		ar & BOOST_SERIALIZATION_NVP(m_norm_10x10);
		ar & BOOST_SERIALIZATION_NVP(m_ion);
		ar & BOOST_SERIALIZATION_NVP(m_dm);
		ar & BOOST_SERIALIZATION_NVP(m_c1);
		ar & BOOST_SERIALIZATION_NVP(m_c2);
		ar & BOOST_SERIALIZATION_NVP(m_c3);
		ar & BOOST_SERIALIZATION_NVP(m_ffs10);
		ar & BOOST_SERIALIZATION_NVP(m_k);
		ar & BOOST_SERIALIZATION_NVP(m_a);
		ar & BOOST_SERIALIZATION_NVP(m_df);
		ar & BOOST_SERIALIZATION_NVP(m_sf);
		ar & BOOST_SERIALIZATION_NVP(m_allowcontinuousdoserate);
		ar & BOOST_SERIALIZATION_NVP(m_discretedoserate);
		ar & BOOST_SERIALIZATION_NVP(m_commissionunitname);
		ar & BOOST_SERIALIZATION_NVP(m_isflattened);
		ar & BOOST_SERIALIZATION_NVP(m_isconvolutionsupport);
		ar & BOOST_SERIALIZATION_NVP(m_ispencilebeamsupport);
		ar & BOOST_SERIALIZATION_NVP(m_ismontecarlosupport);
		ar & BOOST_SERIALIZATION_NVP(m_availablephotonplantype);
		ar & BOOST_SERIALIZATION_NVP(m_availableelectronplantype);
		ar & BOOST_SERIALIZATION_NVP(m_datatemplatetypename);
		ar & BOOST_SERIALIZATION_NVP(m_calibrationfsx);
		ar & BOOST_SERIALIZATION_NVP(m_calibrationfsy);
		ar & BOOST_SERIALIZATION_NVP(m_ssd);
		ar & BOOST_SERIALIZATION_NVP(m_phantomsizelateral);
		ar & BOOST_SERIALIZATION_NVP(m_phantomsizedepth);
		ar & BOOST_SERIALIZATION_NVP(m_viewcustomizedepth);
		ar & BOOST_SERIALIZATION_NVP(m_blocktraypenumbra);
		ar & BOOST_SERIALIZATION_NVP(m_blockattenfactor);
		ar & BOOST_SERIALIZATION_NVP(m_viewhalfprofile);
		ar & BOOST_SERIALIZATION_NVP(m_convdatastruct_sdd1);
		ar & BOOST_SERIALIZATION_NVP(m_convdatastruct_sdd2);
		ar & BOOST_SERIALIZATION_NVP(m_convdatastruct_psd);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunit_dmax);
		ar & BOOST_SERIALIZATION_NVP(m_datatype);
		ar & BOOST_SERIALIZATION_NVP(m_normalizeddose);
		ar & BOOST_SERIALIZATION_NVP(m_xjawfactor);
		ar & BOOST_SERIALIZATION_NVP(m_yjawfactor);
		ar & BOOST_SERIALIZATION_NVP(m_mlcfactor);
		ar & BOOST_SERIALIZATION_NVP(m_ddmudr);
		ar & BOOST_SERIALIZATION_NVP(m_defaultdoserateindex);
		ar & BOOST_SERIALIZATION_NVP(m_calcmode);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
		ar & BOOST_SERIALIZATION_NVP(m_cctonguewidth);
		ar & BOOST_SERIALIZATION_NVP(m_ccgroovewidth);
		ar & BOOST_SERIALIZATION_NVP(m_ccleaftipwidth);
		ar & BOOST_SERIALIZATION_NVP(m_reservecc);
		ar & BOOST_SERIALIZATION_NVP(m_pbtonguewidth);
		ar & BOOST_SERIALIZATION_NVP(m_pbgroovewidth);
		ar & BOOST_SERIALIZATION_NVP(m_pbleaftipwidth);
		ar & BOOST_SERIALIZATION_NVP(m_reservepb);
		ar & BOOST_SERIALIZATION_NVP(m_cctransmission);
		ar & BOOST_SERIALIZATION_NVP(m_pbtransmission);
		ar & BOOST_SERIALIZATION_NVP(m_mindoserate_mupermin);
	}
    std::string						m_uid;
    std::string						m_machineuid;
    std::string						m_kerneldatalistuid;
    float							m_energy;
    int								m_radiationtype;
    float							m_maximumdoserate_muperminute;
    float							m_doserate;
    DATE_BOOST						m_calibrationdate;
    float							m_decayconstant;
    float							m_cal_dist;
    float							m_cal_depth;
    float							m_endeffect;
    int								m_timeunits;
    int								m_scxcount;
    int								m_scycount;
    std::string						m_scxpositions;
    std::string						m_scypositions;
    std::string						m_sc;
    int								m_type;
    int								m_version;
    float							m_tran;
    int								m_flatnessdepthcount;
    int								m_flatnessradiuscount;
    std::string						m_flatnessdepthvec;
    std::string						m_flatnessradiusvec;
    int								m_depthcount;
    int								m_radiuscount;
    std::string						m_depthvec;
    std::string						m_radiusvec;
    std::string						m_sar;
    int								m_tar0depthcount;
    std::string						m_tar0_depth_vec;
    std::string						m_flatness;
    std::string						m_tar0;
    std::string						m_sp;
    float							m_sp0;
    std::string						m_sp_prime;
    int								m_hidden;
    std::string						m_name;
    float							m_dmax;
    float							m_sad;
    float							m_psd;
    float							m_srcdiam1;
    float							m_srcdiam2;
    float							m_srcdiam3;
    float							m_srcratio1;
    float							m_srcratio3;
    float							m_eeqdiam;
    int								m_xjawcount;
    int								m_yjawcount;
    int								m_xjawtype;
    int								m_yjawtype;
    float							m_xsdd;
    float							m_ysdd;
    int								m_gantrysense;
    float							m_gantryoffset;
    int								m_tablesense;
    float							m_tableoffset;
    int								m_collimatorsense;
    float							m_collimatoroffset;
    float							m_referencefluence;
    float							m_referencedose;
    float							m_diam1;
    float							m_diam2;
    float							m_ratio1;
    float							m_transmission;
    float							m_mu;
    float							m_dmu_dx;
    float							m_dmu_dr;
    std::string						m_offaxisdatax;
    std::string						m_offaxisdatay;
    std::string						m_mudatax;
    std::string						m_mudatay;
    std::string						m_dmudatay;
    std::string						m_outputmuy;
    float							m_src_d;
    float							m_src_atten;
    float							m_norm_10x10;
    int								m_ion;
    float							m_dm;
    float							m_c1;
    float							m_c2;
    float							m_c3;
    float							m_ffs10;
    float							m_k;
    float							m_a;
    float							m_df;
    float							m_sf;
    bool							m_allowcontinuousdoserate;
    std::vector<float>						m_discretedoserate;
    std::string						m_commissionunitname;
    bool							m_isflattened;
    bool							m_isconvolutionsupport;
    bool							m_ispencilebeamsupport;
    bool							m_ismontecarlosupport;
    std::string						m_availablephotonplantype;
    std::string						m_availableelectronplantype;
    std::string						m_datatemplatetypename;
    float							m_calibrationfsx;
    float							m_calibrationfsy;
    float							m_ssd;
    float							m_phantomsizelateral;
    float							m_phantomsizedepth;
    float							m_viewcustomizedepth;
    float							m_blocktraypenumbra;
    float							m_blockattenfactor;
    bool							m_viewhalfprofile;
    float							m_convdatastruct_sdd1;
    float							m_convdatastruct_sdd2;
    float							m_convdatastruct_psd;
    float							m_commissionedunit_dmax;
    int								m_datatype;
    float							m_normalizeddose;
    float							m_xjawfactor;
    float							m_yjawfactor;
    float							m_mlcfactor;
    std::string						m_ddmudr;
    int								m_defaultdoserateindex;
    bool							m_calcmode;
    DATETIME_BOOST					m_updatetime;
    float							m_cctonguewidth;
    float							m_ccgroovewidth;
    float							m_ccleaftipwidth;
    std::string						m_reservecc;
    float							m_pbtonguewidth;
    float							m_pbgroovewidth;
    float							m_pbleaftipwidth;
    std::string						m_reservepb;
    float							m_cctransmission;
    float							m_pbtransmission;
    float							m_mindoserate_mupermin;
    //////////////////////////////////////////////////////////////////////////
    std::map<std::string, float>    m_map_trayfactors;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif