//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.12
///
///  \version 1.0
///  \date    8/15/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_BEAM_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_BEAM_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum BEAM_FIELD
{
    BEAM_UID = 0,
    BEAM_COMMISSIONEDUNITUID,
    BEAM_NORMGROUPUID,
    BEAM_ISOCENTERPOIUID,
    BEAM_TOLERANCEUID,
    BEAM_APPLICATORUID,
    BEAM_BOLUSVOIUID,
    BEAM_TRAYUID,
    BEAM_DESCRIPTION,
    BEAM_NAME,
    BEAM_BEAMTYPE,
    BEAM_BEAMDELIVERYTYPE,
    BEAM_BEAMNUMBER,
    BEAM_BEAMMU,
    BEAM_BEAMMODE,
    BEAM_RED,
    BEAM_GREEN,
    BEAM_BLUE,
    BEAM_ALPHA,
    BEAM_BEAMWEIGHT,
    BEAM_FINALCUMULATIVEMETERSETWEIGHT,
    BEAM_ISVISIBLE,
    BEAM_PROTOCAL,
    BEAM_NORMPOINTBEAMDOSE,
    BEAM_BOLUSTHICKNESS,
    BEAM_ISJOINCALC,
    BEAM_ISJOINOPT,
    BEAM_TPSVERNO,
    BEAM_TMSVERNO,
    BEAM_APERTURETYPE,
    BEAM_DOSERATE,
    BEAM_RELATEDRTIMAGEUID,
    BEAM_PHYSICALWEDGEUID,
    BEAM_ISAUTOCREATED,
    BEAM_VIRTUALWEDGEUID,
    BEAM_MLCEDITTYPE,
    BEAM_TARGETVOIUID,
    BEAM_TARGETMARGINX,
    BEAM_TARGETMARGINY,
    BEAM_AVOIDVOIUID,
    BEAM_AVOIDMARGINX,
    BEAM_AVOIDMARGINY,
    BEAM_ISAUTOSHAPE,
    BEAM_JAWTYPE,
    BEAM_JAWMARGINX,
    BEAM_JAWMARGINY,
    BEAM_DOSEALGORITHMTYPE,
    BEAM_UPDATETIME,
    BEAM_FIELD_MAX
};

static const char* ENUM2STRING_BEAM_FIELD[] =
{
    "UID",
    "COMMISSIONEDUNITUID",
    "NORMGROUPUID",
    "ISOCENTERPOIUID",
    "TOLERANCEUID",
    "APPLICATORUID",
    "BOLUSVOIUID",
    "TRAYUID",
    "DESCRIPTION",
    "NAME",
    "BEAMTYPE",
    "BEAMDELIVERYTYPE",
    "BEAMNUMBER",
    "BEAMMU",
    "BEAMMODE",
    "RED",
    "GREEN",
    "BLUE",
    "ALPHA",
    "BEAMWEIGHT",
    "FINALCUMULATIVEMETERSETWEIGHT",
    "ISVISIBLE",
    "PROTOCAL",
    "NORMPOINTBEAMDOSE",
    "BOLUSTHICKNESS",
    "ISJOINCALC",
    "ISJOINOPT",
    "TPSVERNO",
    "TMSVERNO",
    "APERTURETYPE",
    "DOSERATE",
    "RELATEDRTIMAGEUID",
    "PHYSICALWEDGEUID",
    "ISAUTOCREATED",
    "VIRTUALWEDGEUID",
    "MLCEDITTYPE",
    "TARGETVOIUID",
    "TARGETMARGINX",
    "TARGETMARGINY",
    "AVOIDVOIUID",
    "AVOIDMARGINX",
    "AVOIDMARGINY",
    "ISAUTOSHAPE",
    "JAWTYPE",
    "JAWMARGINX",
    "JAWMARGINY",
    "DOSEALGORITHMTYPE",
    "UPDATETIME",
    "BEAM_FIELD_MAX"
};

static const char* ENUM2STRING_BEAM_FIELD_NULL = "100000000000000000000000000000000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtBeamImp;
class RtBeamsegment;
class RtBlock;
class RtDosegrid;
class RtVoi;
class RtApplicator;

class RT_DB_EXPORT RtBeam : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtBeam(bool bGeneraterUid = false);

    ~RtBeam();

    RtBeam(const RtBeam& beam);

    RtBeam& operator = (const RtBeam& beam);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*commissionedunituid varchar
      Related CommissionedUnit UID*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*normgroupuid varchar
      Belong to which normgroup*/
    std::string get_normgroupuid() const;
    void set_normgroupuid(const std::string& normgroupuid);

    /*isocenterpoiuid varchar
      Related Isocenter UID (tpspoi)*/
    std::string get_isocenterpoiuid() const;
    void set_isocenterpoiuid(const std::string& isocenterpoiuid);

    /*toleranceuid varchar
      Tolerance setting UID*/
    std::string get_toleranceuid() const;
    void set_toleranceuid(const std::string& toleranceuid);

    /*applicatoruid varchar
      related applicator uid*/
    std::string get_applicatoruid() const;
    void set_applicatoruid(const std::string& applicatoruid);

    /*bolusvoiuid varchar
      Related Bolus UID*/
    std::string get_bolusvoiuid() const;
    void set_bolusvoiuid(const std::string& bolusvoiuid);

    /*trayuid varchar
      tray uid*/
    std::string get_trayuid() const;
    void set_trayuid(const std::string& trayuid);

    /*description varchar
      (300A00C3):User-defined description for Beam. See Note 1.*/
    std::string get_description() const;
    void set_description(const std::string& description);

    /*name varchar
      (300A00C2):User-defined name for Beam. See Note 1.*/
    std::string get_name() const;
    void set_name(const std::string& name);

    /*beamtype int
      STATICIMRT/DYNAMICIMRT/BURST_ARC/VMAT*/
    int get_beamtype() const;
    void set_beamtype(const int& beamtype);

    /*beamdeliverytype int
      TREATMENT_BEAM/DRR_IMAGE_BEAM/CBCT_IMAGE_BEAM/EPID_IMAGE_BEAM/FBCT_IMAGE_BEAM/PORT_PRE_TREATMENT_BEAM/PORT_POST_TREATMENT_BEAM/PORT_DURING_TREATMENT_BEAM/QA_3D_IMAGE_BEAM/CROSSHAIR_QA_IMAGE_BEAM/QA_2D_IMAGE_BEAM*/
    int get_beamdeliverytype() const;
    void set_beamdeliverytype(const int& beamdeliverytype);

    /*beamnumber int
      (300A00C0):
            Identification number of the Beam. The value of Beam Number (300A,00C0) shall be unique within the RT Plan in which it is created. See Note 1.*/
    int get_beamnumber() const;
    void set_beamnumber(const int& beamnumber);

    /*beammu double
      Energy value*/
    double get_beammu() const;
    void set_beammu(const double& beammu);

    /*beammode varchar
      example:6M+.Come from commission unit*/
    std::string get_beammode() const;
    void set_beammode(const std::string& beammode);

    /*red float
      Color attribute in TPS UI*/
    float get_red() const;
    void set_red(const float& red);

    /*green float
      Color attribute in TPS UI*/
    float get_green() const;
    void set_green(const float& green);

    /*blue float
      Color attribute in TPS UI*/
    float get_blue() const;
    void set_blue(const float& blue);

    /*alpha float
      Color attribute in TPS UI*/
    float get_alpha() const;
    void set_alpha(const float& alpha);

    /*beamweight float
      use  to create a easyplan*/
    float get_beamweight() const;
    void set_beamweight(const float& beamweight);

    /*finalcumulativemetersetweight float
      Value of Cumulative Meterset Weight (300A,0134) for final Control Point in Control Point Sequence (300A,0111). Required if Cumulative Meterset Weight is non-null in Control Points specified within Control Point Sequence (300A,0111). See C.8.8.14.1.*/
    float get_finalcumulativemetersetweight() const;
    void set_finalcumulativemetersetweight(const float& finalcumulativemetersetweight);

    /*isvisible tinyint
      TPS UI attribute*/
    bool get_isvisible() const;
    void set_isvisible(const bool& isvisible);

    /*protocal int
      协议*/
    int get_protocal() const;
    void set_protocal(const int& protocal);

    /*normpointbeamdose float
      cGy/MU, dose contribution from the beam to its norm point, used to calculate beam MU.*/
    float get_normpointbeamdose() const;
    void set_normpointbeamdose(const float& normpointbeamdose);

    /*bolusthickness float
      Thickness of bolus*/
    float get_bolusthickness() const;
    void set_bolusthickness(const float& bolusthickness);

    /*isjoincalc tinyint
      TPS app attribute*/
    bool get_isjoincalc() const;
    void set_isjoincalc(const bool& isjoincalc);

    /*isjoinopt tinyint
      //Add on 20150326 by chen.xi*/
    bool get_isjoinopt() const;
    void set_isjoinopt(const bool& isjoinopt);

    /*ssd float
      Distance between radiation source and skin*/
    //need to be deleted
    float get_ssd() const;
    void set_ssd(const float& ssd);

    /*tpsverno int
      tps verno*/
    int get_tpsverno() const;
    void set_tpsverno(const int& tpsverno);

    /*tmsverno int
      tms verno*/
    int get_tmsverno() const;
    void set_tmsverno(const int& tmsverno);

    /*aperturetype int
      Aperture类型，枚举值
            Mlc = 0,
            JawOnly = 1,
            Applicator = 2,
             Block = 3,*/
    int get_aperturetype() const;
    void set_aperturetype(const int& aperturetype);

    /*doserate float
      剂量率Add on 20150716 by xiaoqing*/
    float get_doserate() const;
    void set_doserate(const float& doserate);

    /*relatedrtimageuid varchar
      only used for the beam which belongs to EZ plan(easy plan)*/
    std::string get_relatedrtimageuid() const;
    void set_relatedrtimageuid(const std::string& relatedrtimageuid);

    /*physicalwedgeuid varchar
      physical wedge uid 使用模块 TPS，ALG， 导入导出
            TDA应该也是需要的*/
    std::string get_physicalwedgeuid() const;
    void set_physicalwedgeuid(const std::string& physicalwedgeuid);

    /*isautocreated tinyint
      (是否自动创建Beam Description)
            */
    bool get_isautocreated() const;
    void set_isautocreated(const bool& isautocreated);

    /*virtualwedgeuid varchar
      virtual wedge uid 使用模块 TPS，ALG， 导入导出
            TDA应该也是需要的*/
    std::string get_virtualwedgeuid() const;
    void set_virtualwedgeuid(const std::string& virtualwedgeuid);

    /*mlcedittype int
      mlc的类型*/
    int get_mlcedittype() const;
    void set_mlcedittype(const int& mlcedittype);

    /*targetvoiuid varchar
      目标VOI Uid*/
    std::string get_targetvoiuid() const;
    void set_targetvoiuid(const std::string& targetvoiuid);

    /*targetmarginx float
      目标VOI x方向扩展范围*/
    float get_targetmarginx() const;
    void set_targetmarginx(const float& targetmarginx);

    /*targetmarginy float
      目标VOI y方向扩展范围*/
    float get_targetmarginy() const;
    void set_targetmarginy(const float& targetmarginy);

    /*avoidvoiuid varchar
      回避VOI Uid*/
    std::string get_avoidvoiuid() const;
    void set_avoidvoiuid(const std::string& avoidvoiuid);

    /*avoidmarginx float
      回避VOI x方向扩展范围*/
    float get_avoidmarginx() const;
    void set_avoidmarginx(const float& avoidmarginx);

    /*avoidmarginy float
      回避VOI y方向扩展范围*/
    float get_avoidmarginy() const;
    void set_avoidmarginy(const float& avoidmarginy);

    /*isautoshape tinyint
      是否自动适形*/
    bool get_isautoshape() const;
    void set_isautoshape(const bool& isautoshape);

    /*jawtype int
      jaw类型*/
    int get_jawtype() const;
    void set_jawtype(const int& jawtype);

    /*jawmarginx float
      Jaw在x方向扩展范围*/
    float get_jawmarginx() const;
    void set_jawmarginx(const float& jawmarginx);

    /*jawmarginy float
      Jaw在y方向扩展范围*/
    float get_jawmarginy() const;
    void set_jawmarginy(const float& jawmarginy);

    /*dosealgorithmtype int
      应该是计算dose的方法，再确认 suggest cao qiuyang*/
    int get_dosealgorithmtype() const;
    void set_dosealgorithmtype(const int& dosealgorithmtype);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);

    //////////////////////////////////////////////////////////////////////////
    //manually NOT from database columns!
    std::vector<RtBeamsegment*> get_beamsegments() const;
    void set_beamsegments(std::vector<RtBeamsegment*> beamsegments);

    RtDosegrid* get_dosegrid();
    RtDosegrid* get_dosegrid() const;

    void create_aperture_block();
    void remove_aperture_block();
    //Should NOT delete the pointer outside!
    RtBlock* get_aperture_block() const;
    
    void create_shield_block();
    void remove_shield_block();
    //Should NOT delete the pointer outside!
    RtBlock* get_shield_block() const;

private:
    RtBeamImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtBeamImp
{

public:
    //default is false to improve performance
    RtBeamImp(bool bGeneraterUid = false);

    ~RtBeamImp();

    RtBeamImp(const RtBeamImp& beam);

    RtBeamImp& operator = (const RtBeamImp& beam);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //normgroupuid
    inline std::string get_normgroupuid() const { return m_normgroupuid;}
    inline void set_normgroupuid(const std::string& normgroupuid) { m_normgroupuid = normgroupuid;}

    //isocenterpoiuid
    inline std::string get_isocenterpoiuid() const { return m_isocenterpoiuid;}
    inline void set_isocenterpoiuid(const std::string& isocenterpoiuid) { m_isocenterpoiuid = isocenterpoiuid;}

    //toleranceuid
    inline std::string get_toleranceuid() const { return m_toleranceuid;}
    inline void set_toleranceuid(const std::string& toleranceuid) { m_toleranceuid = toleranceuid;}

    //applicatoruid
    inline std::string get_applicatoruid() const { return m_applicatoruid;}
    inline void set_applicatoruid(const std::string& applicatoruid) { m_applicatoruid = applicatoruid;}

    //bolusvoiuid
    inline std::string get_bolusvoiuid() const { return m_bolusvoiuid;}
    inline void set_bolusvoiuid(const std::string& bolusvoiuid) { m_bolusvoiuid = bolusvoiuid;}

    //trayuid
    inline std::string get_trayuid() const { return m_trayuid;}
    inline void set_trayuid(const std::string& trayuid) { m_trayuid = trayuid;}

    //description
    inline std::string get_description() const { return m_description;}
    inline void set_description(const std::string& description) { m_description = description;}

    //name
    inline std::string get_name() const { return m_name;}
    inline void set_name(const std::string& name) { m_name = name;}

    //beamtype
    inline int get_beamtype() const { return m_beamtype;}
    inline void set_beamtype(const int& beamtype) { m_beamtype = beamtype;}

    //beamdeliverytype
    inline int get_beamdeliverytype() const { return m_beamdeliverytype;}
    inline void set_beamdeliverytype(const int& beamdeliverytype) { m_beamdeliverytype = beamdeliverytype;}

    //beamnumber
    inline int get_beamnumber() const { return m_beamnumber;}
    inline void set_beamnumber(const int& beamnumber) { m_beamnumber = beamnumber;}

    //beammu
    inline double get_beammu() const { return m_beammu;}
    inline void set_beammu(const double& beammu) { m_beammu = beammu;}

    //beammode
    inline std::string get_beammode() const { return m_beammode;}
    inline void set_beammode(const std::string& beammode) { m_beammode = beammode;}

    //red
    inline float get_red() const { return m_red;}
    inline void set_red(const float& red) { m_red = red;}

    //green
    inline float get_green() const { return m_green;}
    inline void set_green(const float& green) { m_green = green;}

    //blue
    inline float get_blue() const { return m_blue;}
    inline void set_blue(const float& blue) { m_blue = blue;}

    //alpha
    inline float get_alpha() const { return m_alpha;}
    inline void set_alpha(const float& alpha) { m_alpha = alpha;}

    //beamweight
    inline float get_beamweight() const { return m_beamweight;}
    inline void set_beamweight(const float& beamweight) { m_beamweight = beamweight;}

    //finalcumulativemetersetweight
    inline float get_finalcumulativemetersetweight() const { return m_finalcumulativemetersetweight;}
    inline void set_finalcumulativemetersetweight(const float& finalcumulativemetersetweight) { m_finalcumulativemetersetweight = finalcumulativemetersetweight;}

    //isvisible
    inline bool get_isvisible() const { return m_isvisible;}
    inline void set_isvisible(const bool& isvisible) { m_isvisible = isvisible;}

    //protocal
    inline int get_protocal() const { return m_protocal;}
    inline void set_protocal(const int& protocal) { m_protocal = protocal;}

    //normpointbeamdose
    inline float get_normpointbeamdose() const { return m_normpointbeamdose;}
    inline void set_normpointbeamdose(const float& normpointbeamdose) { m_normpointbeamdose = normpointbeamdose;}

    //bolusthickness
    inline float get_bolusthickness() const { return m_bolusthickness;}
    inline void set_bolusthickness(const float& bolusthickness) { m_bolusthickness = bolusthickness;}

    //isjoincalc
    inline bool get_isjoincalc() const { return m_isjoincalc;}
    inline void set_isjoincalc(const bool& isjoincalc) { m_isjoincalc = isjoincalc;}

    //isjoinopt
    inline bool get_isjoinopt() const { return m_isjoinopt;}
    inline void set_isjoinopt(const bool& isjoinopt) { m_isjoinopt = isjoinopt;}

    //ssd
    //need to be deleted
    inline float get_ssd() const { return m_ssd;}
    inline void set_ssd(const float& ssd) { m_ssd = ssd;}

    //tpsverno
    inline int get_tpsverno() const { return m_tpsverno;}
    inline void set_tpsverno(const int& tpsverno) { m_tpsverno = tpsverno;}

    //tmsverno
    inline int get_tmsverno() const { return m_tmsverno;}
    inline void set_tmsverno(const int& tmsverno) { m_tmsverno = tmsverno;}

    //aperturetype
    inline int get_aperturetype() const { return m_aperturetype;}
    inline void set_aperturetype(const int& aperturetype) { m_aperturetype = aperturetype;}

    //doserate
    inline float get_doserate() const { return m_doserate;}
    inline void set_doserate(const float& doserate) { m_doserate = doserate;}

    //relatedrtimageuid
    inline std::string get_relatedrtimageuid() const { return m_relatedrtimageuid;}
    inline void set_relatedrtimageuid(const std::string& relatedrtimageuid) { m_relatedrtimageuid = relatedrtimageuid;}

    //physicalwedgeuid
    inline std::string get_physicalwedgeuid() const { return m_physicalwedgeuid;}
    inline void set_physicalwedgeuid(const std::string& physicalwedgeuid) { m_physicalwedgeuid = physicalwedgeuid;}

    //isautocreated
    inline bool get_isautocreated() const { return m_isautocreated;}
    inline void set_isautocreated(const bool& isautocreated) { m_isautocreated = isautocreated;}

    //virtualwedgeuid
    inline std::string get_virtualwedgeuid() const { return m_virtualwedgeuid;}
    inline void set_virtualwedgeuid(const std::string& virtualwedgeuid) { m_virtualwedgeuid = virtualwedgeuid;}

    //mlcedittype
    inline int get_mlcedittype() const { return m_mlcedittype;}
    inline void set_mlcedittype(const int& mlcedittype) { m_mlcedittype = mlcedittype;}

    //targetvoiuid
    inline std::string get_targetvoiuid() const { return m_targetvoiuid;}
    inline void set_targetvoiuid(const std::string& targetvoiuid) { m_targetvoiuid = targetvoiuid;}

    //targetmarginx
    inline float get_targetmarginx() const { return m_targetmarginx;}
    inline void set_targetmarginx(const float& targetmarginx) { m_targetmarginx = targetmarginx;}

    //targetmarginy
    inline float get_targetmarginy() const { return m_targetmarginy;}
    inline void set_targetmarginy(const float& targetmarginy) { m_targetmarginy = targetmarginy;}

    //avoidvoiuid
    inline std::string get_avoidvoiuid() const { return m_avoidvoiuid;}
    inline void set_avoidvoiuid(const std::string& avoidvoiuid) { m_avoidvoiuid = avoidvoiuid;}

    //avoidmarginx
    inline float get_avoidmarginx() const { return m_avoidmarginx;}
    inline void set_avoidmarginx(const float& avoidmarginx) { m_avoidmarginx = avoidmarginx;}

    //avoidmarginy
    inline float get_avoidmarginy() const { return m_avoidmarginy;}
    inline void set_avoidmarginy(const float& avoidmarginy) { m_avoidmarginy = avoidmarginy;}

    //isautoshape
    inline bool get_isautoshape() const { return m_isautoshape;}
    inline void set_isautoshape(const bool& isautoshape) { m_isautoshape = isautoshape;}

    //jawtype
    inline int get_jawtype() const { return m_jawtype;}
    inline void set_jawtype(const int& jawtype) { m_jawtype = jawtype;}

    //jawmarginx
    inline float get_jawmarginx() const { return m_jawmarginx;}
    inline void set_jawmarginx(const float& jawmarginx) { m_jawmarginx = jawmarginx;}

    //jawmarginy
    inline float get_jawmarginy() const { return m_jawmarginy;}
    inline void set_jawmarginy(const float& jawmarginy) { m_jawmarginy = jawmarginy;}

    //dosealgorithmtype
    inline int get_dosealgorithmtype() const { return m_dosealgorithmtype;}
    inline void set_dosealgorithmtype(const int& dosealgorithmtype) { m_dosealgorithmtype = dosealgorithmtype;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
    //////////////////////////////////////////////////////////////////////////
    //manually NOT from database columns!
    inline std::vector<RtBeamsegment*> get_beamsegments() const { return m_beamsegments;}
    inline void set_beamsegments(std::vector<RtBeamsegment*> beamsegments);

    RtDosegrid* get_dosegrid();
    RtDosegrid* get_dosegrid() const;

    void create_aperture_block();
    void remove_aperture_block();
    RtBlock* get_aperture_block() const;

    void create_shield_block();
    void remove_shield_block();
    RtBlock* get_shield_block() const;

private:    //48 parameters
    std::string						m_uid;
    std::string						m_commissionedunituid;
    std::string						m_normgroupuid;
    std::string						m_isocenterpoiuid;
    std::string						m_toleranceuid;
    std::string						m_applicatoruid;
    std::string						m_bolusvoiuid;
    std::string						m_trayuid;
    std::string						m_description;
    std::string						m_name;
    int								m_beamtype;
    int								m_beamdeliverytype;
    int								m_beamnumber;
    double							m_beammu;
    std::string						m_beammode;
    float							m_red;
    float							m_green;
    float							m_blue;
    float							m_alpha;
    float							m_beamweight;
    float							m_finalcumulativemetersetweight;
    bool							m_isvisible;
    int								m_protocal;
    float							m_normpointbeamdose;
    float							m_bolusthickness;
    bool							m_isjoincalc;
    bool							m_isjoinopt;
    float							m_ssd; //need to be deleted
    int								m_tpsverno;
    int								m_tmsverno;
    int								m_aperturetype;
    float							m_doserate;
    std::string						m_relatedrtimageuid;
    std::string						m_physicalwedgeuid;
    bool							m_isautocreated;
    std::string						m_virtualwedgeuid;
    int								m_mlcedittype;
    std::string						m_targetvoiuid;
    float							m_targetmarginx;
    float							m_targetmarginy;
    std::string						m_avoidvoiuid;
    float							m_avoidmarginx;
    float							m_avoidmarginy;
    bool							m_isautoshape;
    int								m_jawtype;
    float							m_jawmarginx;
    float							m_jawmarginy;
    int								m_dosealgorithmtype;
    DATETIME_BOOST					m_updatetime;
    //////////////////////////////////////////////////////////////////////////
    std::vector<RtBeamsegment*>     m_beamsegments;
    RtBlock*                        m_aperture_block;
    RtBlock*                        m_shield_block;
    RtDosegrid*                     m_dosegrid;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif