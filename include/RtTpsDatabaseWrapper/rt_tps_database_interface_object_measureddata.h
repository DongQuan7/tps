//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/26/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_MEASUREDDATA_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_MEASUREDDATA_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "rt_tps_database_interface_object_measuredprofile.h"
#include <map>
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"
#include "boost/archive/xml_iarchive.hpp"
#include "boost/archive/xml_oarchive.hpp"
#include "boost/date_time/posix_time/time_serialize.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum MEASUREDDATA_FIELD
{
    MEASUREDDATA_UID = 0,
    MEASUREDDATA_COMMISSIONEDUNITUID,
    MEASUREDDATA_OUTPUTINWATERLIST,
    MEASUREDDATA_OUTPUTINAIRLIST,
    MEASUREDDATA_PHANTOMAGLE,
    MEASUREDDATA_SCPDEPTH,
    MEASUREDDATA_WEDGEFACTORDEPTH,
    MEASUREDDATA_CRC,
    MEASUREDDATA_UPDATETIME,
    MEASUREDDATA_FIELD_MAX
};

static const char* ENUM2STRING_MEASUREDDATA_FIELD[] =
{
    "UID",
    "COMMISSIONEDUNITUID",
    "OUTPUTINWATERLIST",
    "OUTPUTINAIRLIST",
    "PHANTOMAGLE",
    "SCPDEPTH",
    "WEDGEFACTORDEPTH",
    "CRC",
    "UPDATETIME",
    "MEASUREDDATA_FIELD_MAX"
};

static const char* ENUM2STRING_MEASUREDDATA_FIELD_NULL = "100000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtMeasureddataImp;

class RT_DB_EXPORT RtMeasureddata : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtMeasureddata(bool bGeneraterUid = false);

    ~RtMeasureddata();

    RtMeasureddata(const RtMeasureddata& measureddata);

    RtMeasureddata& operator = (const RtMeasureddata& measureddata);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*commissionedunituid varchar
      fk related to commissionedunit table uid*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*outputinwaterlist varchar
      水中输出因子*/
    std::string get_outputinwaterlist() const;
    void set_outputinwaterlist(const std::string& outputinwaterlist);

    /*outputinairlist varchar
      空气中输出因子*/
    std::string get_outputinairlist() const;
    void set_outputinairlist(const std::string& outputinairlist);

    /*phantomagle float
      水箱摆放角度*/
    float get_phantomagle() const;
    void set_phantomagle(const float& phantomagle);

    /*scpdepth float
      输出因子测量深度*/
    float get_scpdepth() const;
    void set_scpdepth(const float& scpdepth);

    /*wedgefactordepth float
      楔形因子测量深度*/
    float get_wedgefactordepth() const;
    void set_wedgefactordepth(const float& wedgefactordepth);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);
	
    std::map<FieldSize, float> GetOutputInWaterList() const;
    void SetOutputInWaterList(const std::map<FieldSize, float>& vOutputInWaterList);


private:
    friend class boost::serialization::access;
    template<class Archive>
    void serialize( Archive &ar,const unsigned int version) {
  	  version;
	  ar & BOOST_SERIALIZATION_BASE_OBJECT_NVP(RtDatabaseObject);
  	  ar & BOOST_SERIALIZATION_NVP(m_pImp);
    }
    RtMeasureddataImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtMeasureddataImp
{

public:
    //default is false to improve performance
    RT_DB_EXPORT RtMeasureddataImp(bool bGeneraterUid = false);

    virtual ~RtMeasureddataImp();

    RtMeasureddataImp(const RtMeasureddataImp& measureddata);

    RtMeasureddataImp& operator = (const RtMeasureddataImp& measureddata);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //outputinwaterlist
    inline std::string get_outputinwaterlist() const { return m_outputinwaterlist;}
    inline void set_outputinwaterlist(const std::string& outputinwaterlist) { m_outputinwaterlist = outputinwaterlist;}

    //outputinairlist
    inline std::string get_outputinairlist() const { return m_outputinairlist;}
    inline void set_outputinairlist(const std::string& outputinairlist) { m_outputinairlist = outputinairlist;}

    //phantomagle
    inline float get_phantomagle() const { return m_phantomagle;}
    inline void set_phantomagle(const float& phantomagle) { m_phantomagle = phantomagle;}

    //scpdepth
    inline float get_scpdepth() const { return m_scpdepth;}
    inline void set_scpdepth(const float& scpdepth) { m_scpdepth = scpdepth;}

    //wedgefactordepth
    inline float get_wedgefactordepth() const { return m_wedgefactordepth;}
    inline void set_wedgefactordepth(const float& wedgefactordepth) { m_wedgefactordepth = wedgefactordepth;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
	
    std::map<FieldSize, float> GetOutputInWaterList() const{
        return m_vOutputInWaterList;}
    ////////////////////////////////////////////
    ///  \brief      SetOutputInWaterList
    ////////////////////////////////////////////
    void SetOutputInWaterList(const std::map<FieldSize, float>& vOutputInWaterList){
        m_vOutputInWaterList = vOutputInWaterList;}

private:    //9 parameters
	friend class boost::serialization::access;
	template<class Archive>
	void serialize(Archive &ar, const unsigned int version) {
		version;
		ar & BOOST_SERIALIZATION_NVP(m_uid);
		ar & BOOST_SERIALIZATION_NVP(m_commissionedunituid);
		ar & BOOST_SERIALIZATION_NVP(m_outputinwaterlist);
		ar & BOOST_SERIALIZATION_NVP(m_outputinairlist);
		ar & BOOST_SERIALIZATION_NVP(m_phantomagle);
		ar & BOOST_SERIALIZATION_NVP(m_scpdepth);
		ar & BOOST_SERIALIZATION_NVP(m_wedgefactordepth);
		ar & BOOST_SERIALIZATION_NVP(m_crc);
		ar & BOOST_SERIALIZATION_NVP(m_updatetime);
	}
    std::string						m_uid;
    std::string						m_commissionedunituid;
    std::string						m_outputinwaterlist;
    std::string						m_outputinairlist;
    float							m_phantomagle;
    float							m_scpdepth;
    float							m_wedgefactordepth;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
    std::map<FieldSize, float> m_vOutputInWaterList;
};

RT_TPS_DATABASE_END_NAMESPACE
#endif