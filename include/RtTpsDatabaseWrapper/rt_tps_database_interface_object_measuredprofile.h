//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_INTERFACE_OBJECT_MEASUREDPROFILE_H_
#define RT_TPS_DATABASE_INTERFACE_OBJECT_MEASUREDPROFILE_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_base.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

enum MEASUREDPROFILE_FIELD
{
    MEASUREDPROFILE_UID = 0,
    MEASUREDPROFILE_ACCESSORYUID,
    MEASUREDPROFILE_COMMISSIONEDUNITUID,
    MEASUREDPROFILE_APPLICATORUID,
    MEASUREDPROFILE_FIELDTYPE,
    MEASUREDPROFILE_WEDGEANGLE,
    MEASUREDPROFILE_CURVETYPE,
    MEASUREDPROFILE_FIELDSIZEX,
    MEASUREDPROFILE_FIELDSIZEY,
    MEASUREDPROFILE_DEPTH,
    MEASUREDPROFILE_OFFSETX,
    MEASUREDPROFILE_OFFSETY,
    MEASUREDPROFILE_POINTNUM,
    MEASUREDPROFILE_MEAPOINTDOSELIST,
    MEASUREDPROFILE_CALCPOINTDOSELIST,
    MEASUREDPROFILE_VIEWSTATUS,
    MEASUREDPROFILE_VIEWDISPLAY,
    MEASUREDPROFILE_DATETYPE,
    MEASUREDPROFILE_CURVERESULTANALYSELIST,
    MEASUREDPROFILE_CRC,
    MEASUREDPROFILE_UPDATETIME,
    MEASUREDPROFILE_FIELD_MAX
};

static const char* ENUM2STRING_MEASUREDPROFILE_FIELD[] =
{
    "UID",
    "ACCESSORYUID",
    "COMMISSIONEDUNITUID",
    "APPLICATORUID",
    "FIELDTYPE",
    "WEDGEANGLE",
    "CURVETYPE",
    "FIELDSIZEX",
    "FIELDSIZEY",
    "DEPTH",
    "OFFSETX",
    "OFFSETY",
    "POINTNUM",
    "MEAPOINTDOSELIST",
    "CALCPOINTDOSELIST",
    "VIEWSTATUS",
    "VIEWDISPLAY",
    "DATETYPE",
    "CURVERESULTANALYSELIST",
    "CRC",
    "UPDATETIME",
    "MEASUREDPROFILE_FIELD_MAX"
};

static const char* ENUM2STRING_MEASUREDPROFILE_FIELD_NULL = "100000000000000000001";

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

class RtMeasuredprofileImp;

class PointDose
{
public:
    float m_fX;
    float m_fY;
    float m_fZ;
    float m_fDose;
};

class CurveResultAnalyse
{
public:
    std::string m_sName;
    float  m_fAverageError;
    float  m_fMaxError;
    float  m_fErrorLimit;
    float  m_fFailurePoits;
};

 struct FieldSize
{
    float m_fFieldSizeX;
    float m_fFieldSizeY;
    bool operator <(const FieldSize& other) const
    {
        if (m_fFieldSizeX < other.m_fFieldSizeX) 
        {
            return true;
        }
        else if (m_fFieldSizeX == other.m_fFieldSizeX)
        {
            return m_fFieldSizeY < other.m_fFieldSizeY;
        }
        return false;
    }

    bool operator ==(const FieldSize& other)
    {
        if (m_fFieldSizeX == other.m_fFieldSizeX || m_fFieldSizeX == other.m_fFieldSizeX) 
        {
            return true;
        }
        return false;
    }
};

class RT_DB_EXPORT RtMeasuredprofile : public RtDatabaseObject
{
public:

    //default is false to improve performance
    RtMeasuredprofile(bool bGeneraterUid = false);

    ~RtMeasuredprofile();

    RtMeasuredprofile(const RtMeasuredprofile& measuredprofile);

    RtMeasuredprofile& operator = (const RtMeasuredprofile& measuredprofile);

    /*uid varchar
      pk*/
    std::string get_uid() const;
    void set_uid(const std::string& uid);

    /*accessoryuid varchar
      楔形块ID,龚飞：在界面选AccessoryUID*/
    std::string get_accessoryuid() const;
    void set_accessoryuid(const std::string& accessoryuid);

    /*commissionedunituid varchar
      fk related to commissionedunit table uid*/
    std::string get_commissionedunituid() const;
    void set_commissionedunituid(const std::string& commissionedunituid);

    /*applicatoruid varchar
      fk related to applicator */
    std::string get_applicatoruid() const;
    void set_applicatoruid(const std::string& applicatoruid);

    /*fieldtype int
      射野类型,开野还是楔形野*/
    int get_fieldtype() const;
    void set_fieldtype(const int& fieldtype);

    /*wedgeangle float
      wedge angle*/
    float get_wedgeangle() const;
    void set_wedgeangle(const float& wedgeangle);

    /*curvetype int
      曲线类型  SCN*/
    int get_curvetype() const;
    void set_curvetype(const int& curvetype);

    /*fieldsizex float
      名义射野,不限定为方野*/
    float get_fieldsizex() const;
    void set_fieldsizex(const float& fieldsizex);

    /*fieldsizey float
      名义射野,不限定为方野*/
    float get_fieldsizey() const;
    void set_fieldsizey(const float& fieldsizey);

    /*depth float
      测量深度*/
    float get_depth() const;
    void set_depth(const float& depth);

    /*offsetx float
      X方向应再加上的位移量，龚飞：偏心野界面暂不添加。但数据结构要能支持
            */
    float get_offsetx() const;
    void set_offsetx(const float& offsetx);

    /*offsety float
      Z方向应再加上的位移量*/
    float get_offsety() const;
    void set_offsety(const float& offsety);

    /*pointnum int
      测量点个数 PTS*/
    int get_pointnum() const;
    void set_pointnum(const int& pointnum);

    /*meapointdoselist blob
      mea point doselis tfilepath*/
    std::string get_meapointdoselist() const;
    void set_meapointdoselist(const std::string& meapointdoselist);

    /*calcpointdoselist blob
      calc point doselis tfilepath*/
    std::string get_calcpointdoselist() const;
    void set_calcpointdoselist(const std::string& calcpointdoselist);

    /*viewstatus int
      view status*/
    int get_viewstatus() const;
    void set_viewstatus(const int& viewstatus);

    /*viewdisplay tinyint
      view display*/
    bool get_viewdisplay() const;
    void set_viewdisplay(const bool& viewdisplay);

    /*datetype int
      datetype*/
    int get_datetype() const;
    void set_datetype(const int& datetype);

    /*curveresultanalyselist blob
      curveresultanalyse file path*/
    std::string get_curveresultanalyselist() const;
    void set_curveresultanalyselist(const std::string& curveresultanalyselist);

    /*crc varchar
      校验*/
    std::string get_crc() const;
    void set_crc(const std::string& crc);

    /*updatetime timestamp
      时间戳*/
    DATETIME_BOOST get_updatetime() const;
    void set_updatetime(const DATETIME_BOOST& updatetime);
	
    std::vector<PointDose*> GetMeaPointDoseList() const;
    void SetMeaPointDoseList(const std::vector<PointDose*>& vMeaPointDoseList);

    std::vector<PointDose*> GetCalcPointDoseList() const;
    void SetCalcPointDoseList(const std::vector<PointDose*>& vCalcPointDoseList);

    std::vector<CurveResultAnalyse*> GetCurveResultAnalyse() const;
    void SetCurveResultAnalyse(const std::vector<CurveResultAnalyse*>& vCurveResultAnalyse);

private:
    RtMeasuredprofileImp*                   m_pImp;
};


//////////////////////////////////////////////////////////////////////////
//for imp

class RtMeasuredprofileImp
{

public:
    //default is false to improve performance
    RtMeasuredprofileImp(bool bGeneraterUid = false);

    ~RtMeasuredprofileImp();

    RtMeasuredprofileImp(const RtMeasuredprofileImp& measuredprofile);

    RtMeasuredprofileImp& operator = (const RtMeasuredprofileImp& measuredprofile);

    //uid
    inline std::string get_uid() const { return m_uid;}
    inline void set_uid(const std::string& uid) { m_uid = uid;}

    //accessoryuid
    inline std::string get_accessoryuid() const { return m_accessoryuid;}
    inline void set_accessoryuid(const std::string& accessoryuid) { m_accessoryuid = accessoryuid;}

    //commissionedunituid
    inline std::string get_commissionedunituid() const { return m_commissionedunituid;}
    inline void set_commissionedunituid(const std::string& commissionedunituid) { m_commissionedunituid = commissionedunituid;}

    //applicatoruid
    inline std::string get_applicatoruid() const { return m_applicatoruid;}
    inline void set_applicatoruid(const std::string& applicatoruid) { m_applicatoruid = applicatoruid;}

    //fieldtype
    inline int get_fieldtype() const { return m_fieldtype;}
    inline void set_fieldtype(const int& fieldtype) { m_fieldtype = fieldtype;}

    //wedgeangle
    inline float get_wedgeangle() const { return m_wedgeangle;}
    inline void set_wedgeangle(const float& wedgeangle) { m_wedgeangle = wedgeangle;}

    //curvetype
    inline int get_curvetype() const { return m_curvetype;}
    inline void set_curvetype(const int& curvetype) { m_curvetype = curvetype;}

    //fieldsizex
    inline float get_fieldsizex() const { return m_fieldsizex;}
    inline void set_fieldsizex(const float& fieldsizex) { m_fieldsizex = fieldsizex;}

    //fieldsizey
    inline float get_fieldsizey() const { return m_fieldsizey;}
    inline void set_fieldsizey(const float& fieldsizey) { m_fieldsizey = fieldsizey;}

    //depth
    inline float get_depth() const { return m_depth;}
    inline void set_depth(const float& depth) { m_depth = depth;}

    //offsetx
    inline float get_offsetx() const { return m_offsetx;}
    inline void set_offsetx(const float& offsetx) { m_offsetx = offsetx;}

    //offsety
    inline float get_offsety() const { return m_offsety;}
    inline void set_offsety(const float& offsety) { m_offsety = offsety;}

    //pointnum
    inline int get_pointnum() const { return m_pointnum;}
    inline void set_pointnum(const int& pointnum) { m_pointnum = pointnum;}

    //meapointdoselist
    inline std::string get_meapointdoselist() const { return m_meapointdoselist;}
    inline void set_meapointdoselist(const std::string& meapointdoselist) { m_meapointdoselist = meapointdoselist;}

    //calcpointdoselist
    inline std::string get_calcpointdoselist() const { return m_calcpointdoselist;}
    inline void set_calcpointdoselist(const std::string& calcpointdoselist) { m_calcpointdoselist = calcpointdoselist;}

    //viewstatus
    inline int get_viewstatus() const { return m_viewstatus;}
    inline void set_viewstatus(const int& viewstatus) { m_viewstatus = viewstatus;}

    //viewdisplay
    inline bool get_viewdisplay() const { return m_viewdisplay;}
    inline void set_viewdisplay(const bool& viewdisplay) { m_viewdisplay = viewdisplay;}

    //datetype
    inline int get_datetype() const { return m_datetype;}
    inline void set_datetype(const int& datetype) { m_datetype = datetype;}

    //curveresultanalyselist
    inline std::string get_curveresultanalyselist() const { return m_curveresultanalyselist;}
    inline void set_curveresultanalyselist(const std::string& curveresultanalyselist) { m_curveresultanalyselist = curveresultanalyselist;}

    //crc
    inline std::string get_crc() const { return m_crc;}
    inline void set_crc(const std::string& crc) { m_crc = crc;}

    //updatetime
    inline DATETIME_BOOST get_updatetime() const { return m_updatetime;}
    inline void set_updatetime(const DATETIME_BOOST& updatetime) { m_updatetime = updatetime;}
	
    std::vector<PointDose*> GetMeaPointDoseList() const;
    void SetMeaPointDoseList(const std::vector<PointDose*>& vMeaPointDoseList);

    std::vector<PointDose*> GetCalcPointDoseList() const;
    void SetCalcPointDoseList(const std::vector<PointDose*>& vCalcPointDoseList);

    std::vector<CurveResultAnalyse*> GetCurveResultAnalyse() const;
    void SetCurveResultAnalyse(const std::vector<CurveResultAnalyse*>& vCurveResultAnalyse);

private:    //21 parameters
    std::string						m_uid;
    std::string						m_accessoryuid;
    std::string						m_commissionedunituid;
    std::string						m_applicatoruid;
    int								m_fieldtype;
    float							m_wedgeangle;
    int								m_curvetype;
    float							m_fieldsizex;
    float							m_fieldsizey;
    float							m_depth;
    float							m_offsetx;
    float							m_offsety;
    int								m_pointnum;
    std::string						m_meapointdoselist;
    std::string						m_calcpointdoselist;
    int								m_viewstatus;
    bool							m_viewdisplay;
    int								m_datetype;
    std::string						m_curveresultanalyselist;
    std::string						m_crc;
    DATETIME_BOOST					m_updatetime;
    std::vector<PointDose*> m_vMeaPointDoseList;
    std::vector<PointDose*> m_vCalcPointDoseList;
    std::vector<CurveResultAnalyse*> m_vCurveResultAnalyse;

};

RT_TPS_DATABASE_END_NAMESPACE
#endif