// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_ms_importfromgsstfile.proto

#ifndef PROTOBUF_rt_5fms_5fimportfromgsstfile_2eproto__INCLUDED
#define PROTOBUF_rt_5fms_5fimportfromgsstfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto();
void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto();

class RT_MS_ImportGSTTFromFile;
class RT_MS_VirtualWedgeFactorField;
class RT_MS_VirtualWedgeFactor;
class RT_MS_VirtualWedgeFactorList;

// ===================================================================

class RT_MS_ImportGSTTFromFile : public ::google::protobuf::Message {
 public:
  RT_MS_ImportGSTTFromFile();
  virtual ~RT_MS_ImportGSTTFromFile();
  
  RT_MS_ImportGSTTFromFile(const RT_MS_ImportGSTTFromFile& from);
  
  inline RT_MS_ImportGSTTFromFile& operator=(const RT_MS_ImportGSTTFromFile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_ImportGSTTFromFile& default_instance();
  
  void Swap(RT_MS_ImportGSTTFromFile* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_ImportGSTTFromFile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_ImportGSTTFromFile& from);
  void MergeFrom(const RT_MS_ImportGSTTFromFile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string sAccessoryUID = 1;
  inline bool has_saccessoryuid() const;
  inline void clear_saccessoryuid();
  static const int kSAccessoryUIDFieldNumber = 1;
  inline const ::std::string& saccessoryuid() const;
  inline void set_saccessoryuid(const ::std::string& value);
  inline void set_saccessoryuid(const char* value);
  inline void set_saccessoryuid(const char* value, size_t size);
  inline ::std::string* mutable_saccessoryuid();
  inline ::std::string* release_saccessoryuid();
  
  // optional string sCommissionedunitUID = 2;
  inline bool has_scommissionedunituid() const;
  inline void clear_scommissionedunituid();
  static const int kSCommissionedunitUIDFieldNumber = 2;
  inline const ::std::string& scommissionedunituid() const;
  inline void set_scommissionedunituid(const ::std::string& value);
  inline void set_scommissionedunituid(const char* value);
  inline void set_scommissionedunituid(const char* value, size_t size);
  inline ::std::string* mutable_scommissionedunituid();
  inline ::std::string* release_scommissionedunituid();
  
  // optional string sGSTTFileName = 3;
  inline bool has_sgsttfilename() const;
  inline void clear_sgsttfilename();
  static const int kSGSTTFileNameFieldNumber = 3;
  inline const ::std::string& sgsttfilename() const;
  inline void set_sgsttfilename(const ::std::string& value);
  inline void set_sgsttfilename(const char* value);
  inline void set_sgsttfilename(const char* value, size_t size);
  inline ::std::string* mutable_sgsttfilename();
  inline ::std::string* release_sgsttfilename();
  
  // optional float wedgefactor = 4;
  inline bool has_wedgefactor() const;
  inline void clear_wedgefactor();
  static const int kWedgefactorFieldNumber = 4;
  inline float wedgefactor() const;
  inline void set_wedgefactor(float value);
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
  inline int virtualwedgefactorlist_size() const;
  inline void clear_virtualwedgefactorlist();
  static const int kVirtualWedgeFactorListFieldNumber = 5;
  inline const ::ms::proto::RT_MS_VirtualWedgeFactorField& virtualwedgefactorlist(int index) const;
  inline ::ms::proto::RT_MS_VirtualWedgeFactorField* mutable_virtualwedgefactorlist(int index);
  inline ::ms::proto::RT_MS_VirtualWedgeFactorField* add_virtualwedgefactorlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >&
      virtualwedgefactorlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >*
      mutable_virtualwedgefactorlist();
  
  // optional int32 orientationType = 6;
  inline bool has_orientationtype() const;
  inline void clear_orientationtype();
  static const int kOrientationTypeFieldNumber = 6;
  inline ::google::protobuf::int32 orientationtype() const;
  inline void set_orientationtype(::google::protobuf::int32 value);
  
  // optional string goldenUID = 7;
  inline bool has_goldenuid() const;
  inline void clear_goldenuid();
  static const int kGoldenUIDFieldNumber = 7;
  inline const ::std::string& goldenuid() const;
  inline void set_goldenuid(const ::std::string& value);
  inline void set_goldenuid(const char* value);
  inline void set_goldenuid(const char* value, size_t size);
  inline ::std::string* mutable_goldenuid();
  inline ::std::string* release_goldenuid();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_ImportGSTTFromFile)
 private:
  inline void set_has_saccessoryuid();
  inline void clear_has_saccessoryuid();
  inline void set_has_scommissionedunituid();
  inline void clear_has_scommissionedunituid();
  inline void set_has_sgsttfilename();
  inline void clear_has_sgsttfilename();
  inline void set_has_wedgefactor();
  inline void clear_has_wedgefactor();
  inline void set_has_orientationtype();
  inline void clear_has_orientationtype();
  inline void set_has_goldenuid();
  inline void clear_has_goldenuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* saccessoryuid_;
  ::std::string* scommissionedunituid_;
  ::std::string* sgsttfilename_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField > virtualwedgefactorlist_;
  float wedgefactor_;
  ::google::protobuf::int32 orientationtype_;
  ::std::string* goldenuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_ImportGSTTFromFile* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_VirtualWedgeFactorField : public ::google::protobuf::Message {
 public:
  RT_MS_VirtualWedgeFactorField();
  virtual ~RT_MS_VirtualWedgeFactorField();
  
  RT_MS_VirtualWedgeFactorField(const RT_MS_VirtualWedgeFactorField& from);
  
  inline RT_MS_VirtualWedgeFactorField& operator=(const RT_MS_VirtualWedgeFactorField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_VirtualWedgeFactorField& default_instance();
  
  void Swap(RT_MS_VirtualWedgeFactorField* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_VirtualWedgeFactorField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_VirtualWedgeFactorField& from);
  void MergeFrom(const RT_MS_VirtualWedgeFactorField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float collimatorX1Position = 1;
  inline bool has_collimatorx1position() const;
  inline void clear_collimatorx1position();
  static const int kCollimatorX1PositionFieldNumber = 1;
  inline float collimatorx1position() const;
  inline void set_collimatorx1position(float value);
  
  // optional float collimatorX2Position = 2;
  inline bool has_collimatorx2position() const;
  inline void clear_collimatorx2position();
  static const int kCollimatorX2PositionFieldNumber = 2;
  inline float collimatorx2position() const;
  inline void set_collimatorx2position(float value);
  
  // optional float relativeMU = 3;
  inline bool has_relativemu() const;
  inline void clear_relativemu();
  static const int kRelativeMUFieldNumber = 3;
  inline float relativemu() const;
  inline void set_relativemu(float value);
  
  // optional float correctionFactor = 4;
  inline bool has_correctionfactor() const;
  inline void clear_correctionfactor();
  static const int kCorrectionFactorFieldNumber = 4;
  inline float correctionfactor() const;
  inline void set_correctionfactor(float value);
  
  // optional float convolutionFactor = 5;
  inline bool has_convolutionfactor() const;
  inline void clear_convolutionfactor();
  static const int kConvolutionFactorFieldNumber = 5;
  inline float convolutionfactor() const;
  inline void set_convolutionfactor(float value);
  
  // optional float monteCarloFactor = 6;
  inline bool has_montecarlofactor() const;
  inline void clear_montecarlofactor();
  static const int kMonteCarloFactorFieldNumber = 6;
  inline float montecarlofactor() const;
  inline void set_montecarlofactor(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_VirtualWedgeFactorField)
 private:
  inline void set_has_collimatorx1position();
  inline void clear_has_collimatorx1position();
  inline void set_has_collimatorx2position();
  inline void clear_has_collimatorx2position();
  inline void set_has_relativemu();
  inline void clear_has_relativemu();
  inline void set_has_correctionfactor();
  inline void clear_has_correctionfactor();
  inline void set_has_convolutionfactor();
  inline void clear_has_convolutionfactor();
  inline void set_has_montecarlofactor();
  inline void clear_has_montecarlofactor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float collimatorx1position_;
  float collimatorx2position_;
  float relativemu_;
  float correctionfactor_;
  float convolutionfactor_;
  float montecarlofactor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_VirtualWedgeFactorField* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_VirtualWedgeFactor : public ::google::protobuf::Message {
 public:
  RT_MS_VirtualWedgeFactor();
  virtual ~RT_MS_VirtualWedgeFactor();
  
  RT_MS_VirtualWedgeFactor(const RT_MS_VirtualWedgeFactor& from);
  
  inline RT_MS_VirtualWedgeFactor& operator=(const RT_MS_VirtualWedgeFactor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_VirtualWedgeFactor& default_instance();
  
  void Swap(RT_MS_VirtualWedgeFactor* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_VirtualWedgeFactor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_VirtualWedgeFactor& from);
  void MergeFrom(const RT_MS_VirtualWedgeFactor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string accesssoryUID = 1;
  inline bool has_accesssoryuid() const;
  inline void clear_accesssoryuid();
  static const int kAccesssoryUIDFieldNumber = 1;
  inline const ::std::string& accesssoryuid() const;
  inline void set_accesssoryuid(const ::std::string& value);
  inline void set_accesssoryuid(const char* value);
  inline void set_accesssoryuid(const char* value, size_t size);
  inline ::std::string* mutable_accesssoryuid();
  inline ::std::string* release_accesssoryuid();
  
  // optional float wedgefactor = 2;
  inline bool has_wedgefactor() const;
  inline void clear_wedgefactor();
  static const int kWedgefactorFieldNumber = 2;
  inline float wedgefactor() const;
  inline void set_wedgefactor(float value);
  
  // optional string commmissionUID = 3;
  inline bool has_commmissionuid() const;
  inline void clear_commmissionuid();
  static const int kCommmissionUIDFieldNumber = 3;
  inline const ::std::string& commmissionuid() const;
  inline void set_commmissionuid(const ::std::string& value);
  inline void set_commmissionuid(const char* value);
  inline void set_commmissionuid(const char* value, size_t size);
  inline ::std::string* mutable_commmissionuid();
  inline ::std::string* release_commmissionuid();
  
  // repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
  inline int virtualwedgefactorlist_size() const;
  inline void clear_virtualwedgefactorlist();
  static const int kVirtualWedgeFactorListFieldNumber = 4;
  inline const ::ms::proto::RT_MS_VirtualWedgeFactorField& virtualwedgefactorlist(int index) const;
  inline ::ms::proto::RT_MS_VirtualWedgeFactorField* mutable_virtualwedgefactorlist(int index);
  inline ::ms::proto::RT_MS_VirtualWedgeFactorField* add_virtualwedgefactorlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >&
      virtualwedgefactorlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >*
      mutable_virtualwedgefactorlist();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_VirtualWedgeFactor)
 private:
  inline void set_has_accesssoryuid();
  inline void clear_has_accesssoryuid();
  inline void set_has_wedgefactor();
  inline void clear_has_wedgefactor();
  inline void set_has_commmissionuid();
  inline void clear_has_commmissionuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* accesssoryuid_;
  ::std::string* commmissionuid_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField > virtualwedgefactorlist_;
  float wedgefactor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_VirtualWedgeFactor* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_VirtualWedgeFactorList : public ::google::protobuf::Message {
 public:
  RT_MS_VirtualWedgeFactorList();
  virtual ~RT_MS_VirtualWedgeFactorList();
  
  RT_MS_VirtualWedgeFactorList(const RT_MS_VirtualWedgeFactorList& from);
  
  inline RT_MS_VirtualWedgeFactorList& operator=(const RT_MS_VirtualWedgeFactorList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_VirtualWedgeFactorList& default_instance();
  
  void Swap(RT_MS_VirtualWedgeFactorList* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_VirtualWedgeFactorList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_VirtualWedgeFactorList& from);
  void MergeFrom(const RT_MS_VirtualWedgeFactorList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
  inline int virtualfactorlist_size() const;
  inline void clear_virtualfactorlist();
  static const int kVirtualFactorListFieldNumber = 1;
  inline const ::ms::proto::RT_MS_ImportGSTTFromFile& virtualfactorlist(int index) const;
  inline ::ms::proto::RT_MS_ImportGSTTFromFile* mutable_virtualfactorlist(int index);
  inline ::ms::proto::RT_MS_ImportGSTTFromFile* add_virtualfactorlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportGSTTFromFile >&
      virtualfactorlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportGSTTFromFile >*
      mutable_virtualfactorlist();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_VirtualWedgeFactorList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportGSTTFromFile > virtualfactorlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fimportfromgsstfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fimportfromgsstfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_VirtualWedgeFactorList* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_ImportGSTTFromFile

// optional string sAccessoryUID = 1;
inline bool RT_MS_ImportGSTTFromFile::has_saccessoryuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_saccessoryuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_saccessoryuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_ImportGSTTFromFile::clear_saccessoryuid() {
  if (saccessoryuid_ != &::google::protobuf::internal::kEmptyString) {
    saccessoryuid_->clear();
  }
  clear_has_saccessoryuid();
}
inline const ::std::string& RT_MS_ImportGSTTFromFile::saccessoryuid() const {
  return *saccessoryuid_;
}
inline void RT_MS_ImportGSTTFromFile::set_saccessoryuid(const ::std::string& value) {
  set_has_saccessoryuid();
  if (saccessoryuid_ == &::google::protobuf::internal::kEmptyString) {
    saccessoryuid_ = new ::std::string;
  }
  saccessoryuid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_saccessoryuid(const char* value) {
  set_has_saccessoryuid();
  if (saccessoryuid_ == &::google::protobuf::internal::kEmptyString) {
    saccessoryuid_ = new ::std::string;
  }
  saccessoryuid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_saccessoryuid(const char* value, size_t size) {
  set_has_saccessoryuid();
  if (saccessoryuid_ == &::google::protobuf::internal::kEmptyString) {
    saccessoryuid_ = new ::std::string;
  }
  saccessoryuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportGSTTFromFile::mutable_saccessoryuid() {
  set_has_saccessoryuid();
  if (saccessoryuid_ == &::google::protobuf::internal::kEmptyString) {
    saccessoryuid_ = new ::std::string;
  }
  return saccessoryuid_;
}
inline ::std::string* RT_MS_ImportGSTTFromFile::release_saccessoryuid() {
  clear_has_saccessoryuid();
  if (saccessoryuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = saccessoryuid_;
    saccessoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sCommissionedunitUID = 2;
inline bool RT_MS_ImportGSTTFromFile::has_scommissionedunituid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_scommissionedunituid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_scommissionedunituid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_ImportGSTTFromFile::clear_scommissionedunituid() {
  if (scommissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
    scommissionedunituid_->clear();
  }
  clear_has_scommissionedunituid();
}
inline const ::std::string& RT_MS_ImportGSTTFromFile::scommissionedunituid() const {
  return *scommissionedunituid_;
}
inline void RT_MS_ImportGSTTFromFile::set_scommissionedunituid(const ::std::string& value) {
  set_has_scommissionedunituid();
  if (scommissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    scommissionedunituid_ = new ::std::string;
  }
  scommissionedunituid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_scommissionedunituid(const char* value) {
  set_has_scommissionedunituid();
  if (scommissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    scommissionedunituid_ = new ::std::string;
  }
  scommissionedunituid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_scommissionedunituid(const char* value, size_t size) {
  set_has_scommissionedunituid();
  if (scommissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    scommissionedunituid_ = new ::std::string;
  }
  scommissionedunituid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportGSTTFromFile::mutable_scommissionedunituid() {
  set_has_scommissionedunituid();
  if (scommissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    scommissionedunituid_ = new ::std::string;
  }
  return scommissionedunituid_;
}
inline ::std::string* RT_MS_ImportGSTTFromFile::release_scommissionedunituid() {
  clear_has_scommissionedunituid();
  if (scommissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = scommissionedunituid_;
    scommissionedunituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string sGSTTFileName = 3;
inline bool RT_MS_ImportGSTTFromFile::has_sgsttfilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_sgsttfilename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_sgsttfilename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_ImportGSTTFromFile::clear_sgsttfilename() {
  if (sgsttfilename_ != &::google::protobuf::internal::kEmptyString) {
    sgsttfilename_->clear();
  }
  clear_has_sgsttfilename();
}
inline const ::std::string& RT_MS_ImportGSTTFromFile::sgsttfilename() const {
  return *sgsttfilename_;
}
inline void RT_MS_ImportGSTTFromFile::set_sgsttfilename(const ::std::string& value) {
  set_has_sgsttfilename();
  if (sgsttfilename_ == &::google::protobuf::internal::kEmptyString) {
    sgsttfilename_ = new ::std::string;
  }
  sgsttfilename_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_sgsttfilename(const char* value) {
  set_has_sgsttfilename();
  if (sgsttfilename_ == &::google::protobuf::internal::kEmptyString) {
    sgsttfilename_ = new ::std::string;
  }
  sgsttfilename_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_sgsttfilename(const char* value, size_t size) {
  set_has_sgsttfilename();
  if (sgsttfilename_ == &::google::protobuf::internal::kEmptyString) {
    sgsttfilename_ = new ::std::string;
  }
  sgsttfilename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportGSTTFromFile::mutable_sgsttfilename() {
  set_has_sgsttfilename();
  if (sgsttfilename_ == &::google::protobuf::internal::kEmptyString) {
    sgsttfilename_ = new ::std::string;
  }
  return sgsttfilename_;
}
inline ::std::string* RT_MS_ImportGSTTFromFile::release_sgsttfilename() {
  clear_has_sgsttfilename();
  if (sgsttfilename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sgsttfilename_;
    sgsttfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float wedgefactor = 4;
inline bool RT_MS_ImportGSTTFromFile::has_wedgefactor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_wedgefactor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_wedgefactor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_ImportGSTTFromFile::clear_wedgefactor() {
  wedgefactor_ = 0;
  clear_has_wedgefactor();
}
inline float RT_MS_ImportGSTTFromFile::wedgefactor() const {
  return wedgefactor_;
}
inline void RT_MS_ImportGSTTFromFile::set_wedgefactor(float value) {
  set_has_wedgefactor();
  wedgefactor_ = value;
}

// repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 5;
inline int RT_MS_ImportGSTTFromFile::virtualwedgefactorlist_size() const {
  return virtualwedgefactorlist_.size();
}
inline void RT_MS_ImportGSTTFromFile::clear_virtualwedgefactorlist() {
  virtualwedgefactorlist_.Clear();
}
inline const ::ms::proto::RT_MS_VirtualWedgeFactorField& RT_MS_ImportGSTTFromFile::virtualwedgefactorlist(int index) const {
  return virtualwedgefactorlist_.Get(index);
}
inline ::ms::proto::RT_MS_VirtualWedgeFactorField* RT_MS_ImportGSTTFromFile::mutable_virtualwedgefactorlist(int index) {
  return virtualwedgefactorlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_VirtualWedgeFactorField* RT_MS_ImportGSTTFromFile::add_virtualwedgefactorlist() {
  return virtualwedgefactorlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >&
RT_MS_ImportGSTTFromFile::virtualwedgefactorlist() const {
  return virtualwedgefactorlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >*
RT_MS_ImportGSTTFromFile::mutable_virtualwedgefactorlist() {
  return &virtualwedgefactorlist_;
}

// optional int32 orientationType = 6;
inline bool RT_MS_ImportGSTTFromFile::has_orientationtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_orientationtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_orientationtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_ImportGSTTFromFile::clear_orientationtype() {
  orientationtype_ = 0;
  clear_has_orientationtype();
}
inline ::google::protobuf::int32 RT_MS_ImportGSTTFromFile::orientationtype() const {
  return orientationtype_;
}
inline void RT_MS_ImportGSTTFromFile::set_orientationtype(::google::protobuf::int32 value) {
  set_has_orientationtype();
  orientationtype_ = value;
}

// optional string goldenUID = 7;
inline bool RT_MS_ImportGSTTFromFile::has_goldenuid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_ImportGSTTFromFile::set_has_goldenuid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_ImportGSTTFromFile::clear_has_goldenuid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_ImportGSTTFromFile::clear_goldenuid() {
  if (goldenuid_ != &::google::protobuf::internal::kEmptyString) {
    goldenuid_->clear();
  }
  clear_has_goldenuid();
}
inline const ::std::string& RT_MS_ImportGSTTFromFile::goldenuid() const {
  return *goldenuid_;
}
inline void RT_MS_ImportGSTTFromFile::set_goldenuid(const ::std::string& value) {
  set_has_goldenuid();
  if (goldenuid_ == &::google::protobuf::internal::kEmptyString) {
    goldenuid_ = new ::std::string;
  }
  goldenuid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_goldenuid(const char* value) {
  set_has_goldenuid();
  if (goldenuid_ == &::google::protobuf::internal::kEmptyString) {
    goldenuid_ = new ::std::string;
  }
  goldenuid_->assign(value);
}
inline void RT_MS_ImportGSTTFromFile::set_goldenuid(const char* value, size_t size) {
  set_has_goldenuid();
  if (goldenuid_ == &::google::protobuf::internal::kEmptyString) {
    goldenuid_ = new ::std::string;
  }
  goldenuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportGSTTFromFile::mutable_goldenuid() {
  set_has_goldenuid();
  if (goldenuid_ == &::google::protobuf::internal::kEmptyString) {
    goldenuid_ = new ::std::string;
  }
  return goldenuid_;
}
inline ::std::string* RT_MS_ImportGSTTFromFile::release_goldenuid() {
  clear_has_goldenuid();
  if (goldenuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = goldenuid_;
    goldenuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RT_MS_VirtualWedgeFactorField

// optional float collimatorX1Position = 1;
inline bool RT_MS_VirtualWedgeFactorField::has_collimatorx1position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_collimatorx1position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_collimatorx1position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_collimatorx1position() {
  collimatorx1position_ = 0;
  clear_has_collimatorx1position();
}
inline float RT_MS_VirtualWedgeFactorField::collimatorx1position() const {
  return collimatorx1position_;
}
inline void RT_MS_VirtualWedgeFactorField::set_collimatorx1position(float value) {
  set_has_collimatorx1position();
  collimatorx1position_ = value;
}

// optional float collimatorX2Position = 2;
inline bool RT_MS_VirtualWedgeFactorField::has_collimatorx2position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_collimatorx2position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_collimatorx2position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_collimatorx2position() {
  collimatorx2position_ = 0;
  clear_has_collimatorx2position();
}
inline float RT_MS_VirtualWedgeFactorField::collimatorx2position() const {
  return collimatorx2position_;
}
inline void RT_MS_VirtualWedgeFactorField::set_collimatorx2position(float value) {
  set_has_collimatorx2position();
  collimatorx2position_ = value;
}

// optional float relativeMU = 3;
inline bool RT_MS_VirtualWedgeFactorField::has_relativemu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_relativemu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_relativemu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_relativemu() {
  relativemu_ = 0;
  clear_has_relativemu();
}
inline float RT_MS_VirtualWedgeFactorField::relativemu() const {
  return relativemu_;
}
inline void RT_MS_VirtualWedgeFactorField::set_relativemu(float value) {
  set_has_relativemu();
  relativemu_ = value;
}

// optional float correctionFactor = 4;
inline bool RT_MS_VirtualWedgeFactorField::has_correctionfactor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_correctionfactor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_correctionfactor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_correctionfactor() {
  correctionfactor_ = 0;
  clear_has_correctionfactor();
}
inline float RT_MS_VirtualWedgeFactorField::correctionfactor() const {
  return correctionfactor_;
}
inline void RT_MS_VirtualWedgeFactorField::set_correctionfactor(float value) {
  set_has_correctionfactor();
  correctionfactor_ = value;
}

// optional float convolutionFactor = 5;
inline bool RT_MS_VirtualWedgeFactorField::has_convolutionfactor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_convolutionfactor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_convolutionfactor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_convolutionfactor() {
  convolutionfactor_ = 0;
  clear_has_convolutionfactor();
}
inline float RT_MS_VirtualWedgeFactorField::convolutionfactor() const {
  return convolutionfactor_;
}
inline void RT_MS_VirtualWedgeFactorField::set_convolutionfactor(float value) {
  set_has_convolutionfactor();
  convolutionfactor_ = value;
}

// optional float monteCarloFactor = 6;
inline bool RT_MS_VirtualWedgeFactorField::has_montecarlofactor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_VirtualWedgeFactorField::set_has_montecarlofactor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_has_montecarlofactor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_VirtualWedgeFactorField::clear_montecarlofactor() {
  montecarlofactor_ = 0;
  clear_has_montecarlofactor();
}
inline float RT_MS_VirtualWedgeFactorField::montecarlofactor() const {
  return montecarlofactor_;
}
inline void RT_MS_VirtualWedgeFactorField::set_montecarlofactor(float value) {
  set_has_montecarlofactor();
  montecarlofactor_ = value;
}

// -------------------------------------------------------------------

// RT_MS_VirtualWedgeFactor

// optional string accesssoryUID = 1;
inline bool RT_MS_VirtualWedgeFactor::has_accesssoryuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_VirtualWedgeFactor::set_has_accesssoryuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_VirtualWedgeFactor::clear_has_accesssoryuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_VirtualWedgeFactor::clear_accesssoryuid() {
  if (accesssoryuid_ != &::google::protobuf::internal::kEmptyString) {
    accesssoryuid_->clear();
  }
  clear_has_accesssoryuid();
}
inline const ::std::string& RT_MS_VirtualWedgeFactor::accesssoryuid() const {
  return *accesssoryuid_;
}
inline void RT_MS_VirtualWedgeFactor::set_accesssoryuid(const ::std::string& value) {
  set_has_accesssoryuid();
  if (accesssoryuid_ == &::google::protobuf::internal::kEmptyString) {
    accesssoryuid_ = new ::std::string;
  }
  accesssoryuid_->assign(value);
}
inline void RT_MS_VirtualWedgeFactor::set_accesssoryuid(const char* value) {
  set_has_accesssoryuid();
  if (accesssoryuid_ == &::google::protobuf::internal::kEmptyString) {
    accesssoryuid_ = new ::std::string;
  }
  accesssoryuid_->assign(value);
}
inline void RT_MS_VirtualWedgeFactor::set_accesssoryuid(const char* value, size_t size) {
  set_has_accesssoryuid();
  if (accesssoryuid_ == &::google::protobuf::internal::kEmptyString) {
    accesssoryuid_ = new ::std::string;
  }
  accesssoryuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_VirtualWedgeFactor::mutable_accesssoryuid() {
  set_has_accesssoryuid();
  if (accesssoryuid_ == &::google::protobuf::internal::kEmptyString) {
    accesssoryuid_ = new ::std::string;
  }
  return accesssoryuid_;
}
inline ::std::string* RT_MS_VirtualWedgeFactor::release_accesssoryuid() {
  clear_has_accesssoryuid();
  if (accesssoryuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = accesssoryuid_;
    accesssoryuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float wedgefactor = 2;
inline bool RT_MS_VirtualWedgeFactor::has_wedgefactor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_VirtualWedgeFactor::set_has_wedgefactor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_VirtualWedgeFactor::clear_has_wedgefactor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_VirtualWedgeFactor::clear_wedgefactor() {
  wedgefactor_ = 0;
  clear_has_wedgefactor();
}
inline float RT_MS_VirtualWedgeFactor::wedgefactor() const {
  return wedgefactor_;
}
inline void RT_MS_VirtualWedgeFactor::set_wedgefactor(float value) {
  set_has_wedgefactor();
  wedgefactor_ = value;
}

// optional string commmissionUID = 3;
inline bool RT_MS_VirtualWedgeFactor::has_commmissionuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_VirtualWedgeFactor::set_has_commmissionuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_VirtualWedgeFactor::clear_has_commmissionuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_VirtualWedgeFactor::clear_commmissionuid() {
  if (commmissionuid_ != &::google::protobuf::internal::kEmptyString) {
    commmissionuid_->clear();
  }
  clear_has_commmissionuid();
}
inline const ::std::string& RT_MS_VirtualWedgeFactor::commmissionuid() const {
  return *commmissionuid_;
}
inline void RT_MS_VirtualWedgeFactor::set_commmissionuid(const ::std::string& value) {
  set_has_commmissionuid();
  if (commmissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commmissionuid_ = new ::std::string;
  }
  commmissionuid_->assign(value);
}
inline void RT_MS_VirtualWedgeFactor::set_commmissionuid(const char* value) {
  set_has_commmissionuid();
  if (commmissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commmissionuid_ = new ::std::string;
  }
  commmissionuid_->assign(value);
}
inline void RT_MS_VirtualWedgeFactor::set_commmissionuid(const char* value, size_t size) {
  set_has_commmissionuid();
  if (commmissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commmissionuid_ = new ::std::string;
  }
  commmissionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_VirtualWedgeFactor::mutable_commmissionuid() {
  set_has_commmissionuid();
  if (commmissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commmissionuid_ = new ::std::string;
  }
  return commmissionuid_;
}
inline ::std::string* RT_MS_VirtualWedgeFactor::release_commmissionuid() {
  clear_has_commmissionuid();
  if (commmissionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commmissionuid_;
    commmissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ms.proto.RT_MS_VirtualWedgeFactorField virtualWedgeFactorList = 4;
inline int RT_MS_VirtualWedgeFactor::virtualwedgefactorlist_size() const {
  return virtualwedgefactorlist_.size();
}
inline void RT_MS_VirtualWedgeFactor::clear_virtualwedgefactorlist() {
  virtualwedgefactorlist_.Clear();
}
inline const ::ms::proto::RT_MS_VirtualWedgeFactorField& RT_MS_VirtualWedgeFactor::virtualwedgefactorlist(int index) const {
  return virtualwedgefactorlist_.Get(index);
}
inline ::ms::proto::RT_MS_VirtualWedgeFactorField* RT_MS_VirtualWedgeFactor::mutable_virtualwedgefactorlist(int index) {
  return virtualwedgefactorlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_VirtualWedgeFactorField* RT_MS_VirtualWedgeFactor::add_virtualwedgefactorlist() {
  return virtualwedgefactorlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >&
RT_MS_VirtualWedgeFactor::virtualwedgefactorlist() const {
  return virtualwedgefactorlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_VirtualWedgeFactorField >*
RT_MS_VirtualWedgeFactor::mutable_virtualwedgefactorlist() {
  return &virtualwedgefactorlist_;
}

// -------------------------------------------------------------------

// RT_MS_VirtualWedgeFactorList

// repeated .ms.proto.RT_MS_ImportGSTTFromFile virtualFactorList = 1;
inline int RT_MS_VirtualWedgeFactorList::virtualfactorlist_size() const {
  return virtualfactorlist_.size();
}
inline void RT_MS_VirtualWedgeFactorList::clear_virtualfactorlist() {
  virtualfactorlist_.Clear();
}
inline const ::ms::proto::RT_MS_ImportGSTTFromFile& RT_MS_VirtualWedgeFactorList::virtualfactorlist(int index) const {
  return virtualfactorlist_.Get(index);
}
inline ::ms::proto::RT_MS_ImportGSTTFromFile* RT_MS_VirtualWedgeFactorList::mutable_virtualfactorlist(int index) {
  return virtualfactorlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_ImportGSTTFromFile* RT_MS_VirtualWedgeFactorList::add_virtualfactorlist() {
  return virtualfactorlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportGSTTFromFile >&
RT_MS_VirtualWedgeFactorList::virtualfactorlist() const {
  return virtualfactorlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportGSTTFromFile >*
RT_MS_VirtualWedgeFactorList::mutable_virtualfactorlist() {
  return &virtualfactorlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5fms_5fimportfromgsstfile_2eproto__INCLUDED
