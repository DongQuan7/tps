// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_voi.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fvoi_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fvoi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_2eproto();

class RtTpsProtoVoi;
class RtTpsProtoRepeatedVoi;

// ===================================================================

class RtTpsProtoVoi : public ::google::protobuf::Message {
 public:
  RtTpsProtoVoi();
  virtual ~RtTpsProtoVoi();
  
  RtTpsProtoVoi(const RtTpsProtoVoi& from);
  
  inline RtTpsProtoVoi& operator=(const RtTpsProtoVoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoVoi& default_instance();
  
  void Swap(RtTpsProtoVoi* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoVoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoVoi& from);
  void MergeFrom(const RtTpsProtoVoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string voiuid = 1;
  inline bool has_voiuid() const;
  inline void clear_voiuid();
  static const int kVoiuidFieldNumber = 1;
  inline const ::std::string& voiuid() const;
  inline void set_voiuid(const ::std::string& value);
  inline void set_voiuid(const char* value);
  inline void set_voiuid(const char* value, size_t size);
  inline ::std::string* mutable_voiuid();
  inline ::std::string* release_voiuid();
  
  // required string seriesuid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesuidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required string voiname = 3;
  inline bool has_voiname() const;
  inline void clear_voiname();
  static const int kVoinameFieldNumber = 3;
  inline const ::std::string& voiname() const;
  inline void set_voiname(const ::std::string& value);
  inline void set_voiname(const char* value);
  inline void set_voiname(const char* value, size_t size);
  inline ::std::string* mutable_voiname();
  inline ::std::string* release_voiname();
  
  // optional int32 planningrole = 4;
  inline bool has_planningrole() const;
  inline void clear_planningrole();
  static const int kPlanningroleFieldNumber = 4;
  inline ::google::protobuf::int32 planningrole() const;
  inline void set_planningrole(::google::protobuf::int32 value);
  
  // repeated float voicolor = 5;
  inline int voicolor_size() const;
  inline void clear_voicolor();
  static const int kVoicolorFieldNumber = 5;
  inline float voicolor(int index) const;
  inline void set_voicolor(int index, float value);
  inline void add_voicolor(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      voicolor() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_voicolor();
  
  // optional bool isvisible = 6;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsvisibleFieldNumber = 6;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);
  
  // optional bool islocked = 7;
  inline bool has_islocked() const;
  inline void clear_islocked();
  static const int kIslockedFieldNumber = 7;
  inline bool islocked() const;
  inline void set_islocked(bool value);
  
  // optional float averagedensity = 8;
  inline bool has_averagedensity() const;
  inline void clear_averagedensity();
  static const int kAveragedensityFieldNumber = 8;
  inline float averagedensity() const;
  inline void set_averagedensity(float value);
  
  // optional float maxdensity = 9;
  inline bool has_maxdensity() const;
  inline void clear_maxdensity();
  static const int kMaxdensityFieldNumber = 9;
  inline float maxdensity() const;
  inline void set_maxdensity(float value);
  
  // optional float mindensity = 10;
  inline bool has_mindensity() const;
  inline void clear_mindensity();
  static const int kMindensityFieldNumber = 10;
  inline float mindensity() const;
  inline void set_mindensity(float value);
  
  // optional float volume = 11;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 11;
  inline float volume() const;
  inline void set_volume(float value);
  
  // optional float surfacearea = 12;
  inline bool has_surfacearea() const;
  inline void clear_surfacearea();
  static const int kSurfaceareaFieldNumber = 12;
  inline float surfacearea() const;
  inline void set_surfacearea(float value);
  
  // optional float centroidx = 13;
  inline bool has_centroidx() const;
  inline void clear_centroidx();
  static const int kCentroidxFieldNumber = 13;
  inline float centroidx() const;
  inline void set_centroidx(float value);
  
  // optional float centroidy = 14;
  inline bool has_centroidy() const;
  inline void clear_centroidy();
  static const int kCentroidyFieldNumber = 14;
  inline float centroidy() const;
  inline void set_centroidy(float value);
  
  // optional float centroidz = 15;
  inline bool has_centroidz() const;
  inline void clear_centroidz();
  static const int kCentroidzFieldNumber = 15;
  inline float centroidz() const;
  inline void set_centroidz(float value);
  
  // repeated int32 slices = 16;
  inline int slices_size() const;
  inline void clear_slices();
  static const int kSlicesFieldNumber = 16;
  inline ::google::protobuf::int32 slices(int index) const;
  inline void set_slices(int index, ::google::protobuf::int32 value);
  inline void add_slices(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      slices() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_slices();
  
  // optional float minDose = 17;
  inline bool has_mindose() const;
  inline void clear_mindose();
  static const int kMinDoseFieldNumber = 17;
  inline float mindose() const;
  inline void set_mindose(float value);
  
  // optional float maxDose = 18;
  inline bool has_maxdose() const;
  inline void clear_maxdose();
  static const int kMaxDoseFieldNumber = 18;
  inline float maxdose() const;
  inline void set_maxdose(float value);
  
  // optional float meanDose = 19;
  inline bool has_meandose() const;
  inline void clear_meandose();
  static const int kMeanDoseFieldNumber = 19;
  inline float meandose() const;
  inline void set_meandose(float value);
  
  // optional float standard_deviation = 20;
  inline bool has_standard_deviation() const;
  inline void clear_standard_deviation();
  static const int kStandardDeviationFieldNumber = 20;
  inline float standard_deviation() const;
  inline void set_standard_deviation(float value);
  
  // optional bool isshaded = 21;
  inline bool has_isshaded() const;
  inline void clear_isshaded();
  static const int kIsshadedFieldNumber = 21;
  inline bool isshaded() const;
  inline void set_isshaded(bool value);
  
  // optional int32 subrole = 22;
  inline bool has_subrole() const;
  inline void clear_subrole();
  static const int kSubroleFieldNumber = 22;
  inline ::google::protobuf::int32 subrole() const;
  inline void set_subrole(::google::protobuf::int32 value);
  
  // optional int32 isapproved = 23;
  inline bool has_isapproved() const;
  inline void clear_isapproved();
  static const int kIsapprovedFieldNumber = 23;
  inline ::google::protobuf::int32 isapproved() const;
  inline void set_isapproved(::google::protobuf::int32 value);
  
  // optional int32 locktype = 24;
  inline bool has_locktype() const;
  inline void clear_locktype();
  static const int kLocktypeFieldNumber = 24;
  inline ::google::protobuf::int32 locktype() const;
  inline void set_locktype(::google::protobuf::int32 value);
  
  // optional float ingrid = 25;
  inline bool has_ingrid() const;
  inline void clear_ingrid();
  static const int kIngridFieldNumber = 25;
  inline float ingrid() const;
  inline void set_ingrid(float value);
  
  // optional float tcpntcp = 26;
  inline bool has_tcpntcp() const;
  inline void clear_tcpntcp();
  static const int kTcpntcpFieldNumber = 26;
  inline float tcpntcp() const;
  inline void set_tcpntcp(float value);
  
  // optional string description = 27;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 27;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // optional bool isoverride = 28;
  inline bool has_isoverride() const;
  inline void clear_isoverride();
  static const int kIsoverrideFieldNumber = 28;
  inline bool isoverride() const;
  inline void set_isoverride(bool value);
  
  // optional float overridemassdensity = 29;
  inline bool has_overridemassdensity() const;
  inline void clear_overridemassdensity();
  static const int kOverridemassdensityFieldNumber = 29;
  inline float overridemassdensity() const;
  inline void set_overridemassdensity(float value);
  
  // optional float overridereferenceelectrondensity = 30;
  inline bool has_overridereferenceelectrondensity() const;
  inline void clear_overridereferenceelectrondensity();
  static const int kOverridereferenceelectrondensityFieldNumber = 30;
  inline float overridereferenceelectrondensity() const;
  inline void set_overridereferenceelectrondensity(float value);
  
  // optional int32 organType = 31;
  inline bool has_organtype() const;
  inline void clear_organtype();
  static const int kOrganTypeFieldNumber = 31;
  inline ::google::protobuf::int32 organtype() const;
  inline void set_organtype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoVoi)
 private:
  inline void set_has_voiuid();
  inline void clear_has_voiuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_voiname();
  inline void clear_has_voiname();
  inline void set_has_planningrole();
  inline void clear_has_planningrole();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_islocked();
  inline void clear_has_islocked();
  inline void set_has_averagedensity();
  inline void clear_has_averagedensity();
  inline void set_has_maxdensity();
  inline void clear_has_maxdensity();
  inline void set_has_mindensity();
  inline void clear_has_mindensity();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_surfacearea();
  inline void clear_has_surfacearea();
  inline void set_has_centroidx();
  inline void clear_has_centroidx();
  inline void set_has_centroidy();
  inline void clear_has_centroidy();
  inline void set_has_centroidz();
  inline void clear_has_centroidz();
  inline void set_has_mindose();
  inline void clear_has_mindose();
  inline void set_has_maxdose();
  inline void clear_has_maxdose();
  inline void set_has_meandose();
  inline void clear_has_meandose();
  inline void set_has_standard_deviation();
  inline void clear_has_standard_deviation();
  inline void set_has_isshaded();
  inline void clear_has_isshaded();
  inline void set_has_subrole();
  inline void clear_has_subrole();
  inline void set_has_isapproved();
  inline void clear_has_isapproved();
  inline void set_has_locktype();
  inline void clear_has_locktype();
  inline void set_has_ingrid();
  inline void clear_has_ingrid();
  inline void set_has_tcpntcp();
  inline void clear_has_tcpntcp();
  inline void set_has_description();
  inline void clear_has_description();
  inline void set_has_isoverride();
  inline void clear_has_isoverride();
  inline void set_has_overridemassdensity();
  inline void clear_has_overridemassdensity();
  inline void set_has_overridereferenceelectrondensity();
  inline void clear_has_overridereferenceelectrondensity();
  inline void set_has_organtype();
  inline void clear_has_organtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* voiuid_;
  ::std::string* seriesuid_;
  ::std::string* voiname_;
  ::google::protobuf::RepeatedField< float > voicolor_;
  ::google::protobuf::int32 planningrole_;
  float averagedensity_;
  float maxdensity_;
  float mindensity_;
  float volume_;
  float surfacearea_;
  float centroidx_;
  float centroidy_;
  float centroidz_;
  bool isvisible_;
  bool islocked_;
  bool isshaded_;
  bool isoverride_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > slices_;
  float mindose_;
  float maxdose_;
  float meandose_;
  float standard_deviation_;
  ::google::protobuf::int32 subrole_;
  ::google::protobuf::int32 isapproved_;
  ::google::protobuf::int32 locktype_;
  float ingrid_;
  ::std::string* description_;
  float tcpntcp_;
  float overridemassdensity_;
  float overridereferenceelectrondensity_;
  ::google::protobuf::int32 organtype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(31 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoVoi* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedVoi : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedVoi();
  virtual ~RtTpsProtoRepeatedVoi();
  
  RtTpsProtoRepeatedVoi(const RtTpsProtoRepeatedVoi& from);
  
  inline RtTpsProtoRepeatedVoi& operator=(const RtTpsProtoRepeatedVoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedVoi& default_instance();
  
  void Swap(RtTpsProtoRepeatedVoi* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedVoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedVoi& from);
  void MergeFrom(const RtTpsProtoRepeatedVoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoVoi voilist = 1;
  inline int voilist_size() const;
  inline void clear_voilist();
  static const int kVoilistFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoVoi& voilist(int index) const;
  inline ::tps::proto::RtTpsProtoVoi* mutable_voilist(int index);
  inline ::tps::proto::RtTpsProtoVoi* add_voilist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoVoi >&
      voilist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoVoi >*
      mutable_voilist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedVoi)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoVoi > voilist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedVoi* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoVoi

// required string voiuid = 1;
inline bool RtTpsProtoVoi::has_voiuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoVoi::set_has_voiuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoVoi::clear_has_voiuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoVoi::clear_voiuid() {
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    voiuid_->clear();
  }
  clear_has_voiuid();
}
inline const ::std::string& RtTpsProtoVoi::voiuid() const {
  return *voiuid_;
}
inline void RtTpsProtoVoi::set_voiuid(const ::std::string& value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RtTpsProtoVoi::set_voiuid(const char* value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RtTpsProtoVoi::set_voiuid(const char* value, size_t size) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoi::mutable_voiuid() {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  return voiuid_;
}
inline ::std::string* RtTpsProtoVoi::release_voiuid() {
  clear_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiuid_;
    voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesuid = 2;
inline bool RtTpsProtoVoi::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoVoi::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoVoi::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoVoi::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RtTpsProtoVoi::seriesuid() const {
  return *seriesuid_;
}
inline void RtTpsProtoVoi::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoVoi::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoVoi::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoi::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RtTpsProtoVoi::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string voiname = 3;
inline bool RtTpsProtoVoi::has_voiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoVoi::set_has_voiname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoVoi::clear_has_voiname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoVoi::clear_voiname() {
  if (voiname_ != &::google::protobuf::internal::kEmptyString) {
    voiname_->clear();
  }
  clear_has_voiname();
}
inline const ::std::string& RtTpsProtoVoi::voiname() const {
  return *voiname_;
}
inline void RtTpsProtoVoi::set_voiname(const ::std::string& value) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(value);
}
inline void RtTpsProtoVoi::set_voiname(const char* value) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(value);
}
inline void RtTpsProtoVoi::set_voiname(const char* value, size_t size) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoi::mutable_voiname() {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  return voiname_;
}
inline ::std::string* RtTpsProtoVoi::release_voiname() {
  clear_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiname_;
    voiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 planningrole = 4;
inline bool RtTpsProtoVoi::has_planningrole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoVoi::set_has_planningrole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoVoi::clear_has_planningrole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoVoi::clear_planningrole() {
  planningrole_ = 0;
  clear_has_planningrole();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::planningrole() const {
  return planningrole_;
}
inline void RtTpsProtoVoi::set_planningrole(::google::protobuf::int32 value) {
  set_has_planningrole();
  planningrole_ = value;
}

// repeated float voicolor = 5;
inline int RtTpsProtoVoi::voicolor_size() const {
  return voicolor_.size();
}
inline void RtTpsProtoVoi::clear_voicolor() {
  voicolor_.Clear();
}
inline float RtTpsProtoVoi::voicolor(int index) const {
  return voicolor_.Get(index);
}
inline void RtTpsProtoVoi::set_voicolor(int index, float value) {
  voicolor_.Set(index, value);
}
inline void RtTpsProtoVoi::add_voicolor(float value) {
  voicolor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RtTpsProtoVoi::voicolor() const {
  return voicolor_;
}
inline ::google::protobuf::RepeatedField< float >*
RtTpsProtoVoi::mutable_voicolor() {
  return &voicolor_;
}

// optional bool isvisible = 6;
inline bool RtTpsProtoVoi::has_isvisible() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoVoi::set_has_isvisible() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoVoi::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoVoi::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool RtTpsProtoVoi::isvisible() const {
  return isvisible_;
}
inline void RtTpsProtoVoi::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// optional bool islocked = 7;
inline bool RtTpsProtoVoi::has_islocked() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoVoi::set_has_islocked() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoVoi::clear_has_islocked() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoVoi::clear_islocked() {
  islocked_ = false;
  clear_has_islocked();
}
inline bool RtTpsProtoVoi::islocked() const {
  return islocked_;
}
inline void RtTpsProtoVoi::set_islocked(bool value) {
  set_has_islocked();
  islocked_ = value;
}

// optional float averagedensity = 8;
inline bool RtTpsProtoVoi::has_averagedensity() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoVoi::set_has_averagedensity() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoVoi::clear_has_averagedensity() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoVoi::clear_averagedensity() {
  averagedensity_ = 0;
  clear_has_averagedensity();
}
inline float RtTpsProtoVoi::averagedensity() const {
  return averagedensity_;
}
inline void RtTpsProtoVoi::set_averagedensity(float value) {
  set_has_averagedensity();
  averagedensity_ = value;
}

// optional float maxdensity = 9;
inline bool RtTpsProtoVoi::has_maxdensity() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoVoi::set_has_maxdensity() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoVoi::clear_has_maxdensity() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoVoi::clear_maxdensity() {
  maxdensity_ = 0;
  clear_has_maxdensity();
}
inline float RtTpsProtoVoi::maxdensity() const {
  return maxdensity_;
}
inline void RtTpsProtoVoi::set_maxdensity(float value) {
  set_has_maxdensity();
  maxdensity_ = value;
}

// optional float mindensity = 10;
inline bool RtTpsProtoVoi::has_mindensity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoVoi::set_has_mindensity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoVoi::clear_has_mindensity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoVoi::clear_mindensity() {
  mindensity_ = 0;
  clear_has_mindensity();
}
inline float RtTpsProtoVoi::mindensity() const {
  return mindensity_;
}
inline void RtTpsProtoVoi::set_mindensity(float value) {
  set_has_mindensity();
  mindensity_ = value;
}

// optional float volume = 11;
inline bool RtTpsProtoVoi::has_volume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoVoi::set_has_volume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoVoi::clear_has_volume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoVoi::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline float RtTpsProtoVoi::volume() const {
  return volume_;
}
inline void RtTpsProtoVoi::set_volume(float value) {
  set_has_volume();
  volume_ = value;
}

// optional float surfacearea = 12;
inline bool RtTpsProtoVoi::has_surfacearea() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoVoi::set_has_surfacearea() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoVoi::clear_has_surfacearea() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoVoi::clear_surfacearea() {
  surfacearea_ = 0;
  clear_has_surfacearea();
}
inline float RtTpsProtoVoi::surfacearea() const {
  return surfacearea_;
}
inline void RtTpsProtoVoi::set_surfacearea(float value) {
  set_has_surfacearea();
  surfacearea_ = value;
}

// optional float centroidx = 13;
inline bool RtTpsProtoVoi::has_centroidx() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoVoi::set_has_centroidx() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoVoi::clear_has_centroidx() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoVoi::clear_centroidx() {
  centroidx_ = 0;
  clear_has_centroidx();
}
inline float RtTpsProtoVoi::centroidx() const {
  return centroidx_;
}
inline void RtTpsProtoVoi::set_centroidx(float value) {
  set_has_centroidx();
  centroidx_ = value;
}

// optional float centroidy = 14;
inline bool RtTpsProtoVoi::has_centroidy() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoVoi::set_has_centroidy() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoVoi::clear_has_centroidy() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoVoi::clear_centroidy() {
  centroidy_ = 0;
  clear_has_centroidy();
}
inline float RtTpsProtoVoi::centroidy() const {
  return centroidy_;
}
inline void RtTpsProtoVoi::set_centroidy(float value) {
  set_has_centroidy();
  centroidy_ = value;
}

// optional float centroidz = 15;
inline bool RtTpsProtoVoi::has_centroidz() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RtTpsProtoVoi::set_has_centroidz() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RtTpsProtoVoi::clear_has_centroidz() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RtTpsProtoVoi::clear_centroidz() {
  centroidz_ = 0;
  clear_has_centroidz();
}
inline float RtTpsProtoVoi::centroidz() const {
  return centroidz_;
}
inline void RtTpsProtoVoi::set_centroidz(float value) {
  set_has_centroidz();
  centroidz_ = value;
}

// repeated int32 slices = 16;
inline int RtTpsProtoVoi::slices_size() const {
  return slices_.size();
}
inline void RtTpsProtoVoi::clear_slices() {
  slices_.Clear();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::slices(int index) const {
  return slices_.Get(index);
}
inline void RtTpsProtoVoi::set_slices(int index, ::google::protobuf::int32 value) {
  slices_.Set(index, value);
}
inline void RtTpsProtoVoi::add_slices(::google::protobuf::int32 value) {
  slices_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RtTpsProtoVoi::slices() const {
  return slices_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RtTpsProtoVoi::mutable_slices() {
  return &slices_;
}

// optional float minDose = 17;
inline bool RtTpsProtoVoi::has_mindose() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RtTpsProtoVoi::set_has_mindose() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RtTpsProtoVoi::clear_has_mindose() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RtTpsProtoVoi::clear_mindose() {
  mindose_ = 0;
  clear_has_mindose();
}
inline float RtTpsProtoVoi::mindose() const {
  return mindose_;
}
inline void RtTpsProtoVoi::set_mindose(float value) {
  set_has_mindose();
  mindose_ = value;
}

// optional float maxDose = 18;
inline bool RtTpsProtoVoi::has_maxdose() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RtTpsProtoVoi::set_has_maxdose() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RtTpsProtoVoi::clear_has_maxdose() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RtTpsProtoVoi::clear_maxdose() {
  maxdose_ = 0;
  clear_has_maxdose();
}
inline float RtTpsProtoVoi::maxdose() const {
  return maxdose_;
}
inline void RtTpsProtoVoi::set_maxdose(float value) {
  set_has_maxdose();
  maxdose_ = value;
}

// optional float meanDose = 19;
inline bool RtTpsProtoVoi::has_meandose() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RtTpsProtoVoi::set_has_meandose() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RtTpsProtoVoi::clear_has_meandose() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RtTpsProtoVoi::clear_meandose() {
  meandose_ = 0;
  clear_has_meandose();
}
inline float RtTpsProtoVoi::meandose() const {
  return meandose_;
}
inline void RtTpsProtoVoi::set_meandose(float value) {
  set_has_meandose();
  meandose_ = value;
}

// optional float standard_deviation = 20;
inline bool RtTpsProtoVoi::has_standard_deviation() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RtTpsProtoVoi::set_has_standard_deviation() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RtTpsProtoVoi::clear_has_standard_deviation() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RtTpsProtoVoi::clear_standard_deviation() {
  standard_deviation_ = 0;
  clear_has_standard_deviation();
}
inline float RtTpsProtoVoi::standard_deviation() const {
  return standard_deviation_;
}
inline void RtTpsProtoVoi::set_standard_deviation(float value) {
  set_has_standard_deviation();
  standard_deviation_ = value;
}

// optional bool isshaded = 21;
inline bool RtTpsProtoVoi::has_isshaded() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RtTpsProtoVoi::set_has_isshaded() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RtTpsProtoVoi::clear_has_isshaded() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RtTpsProtoVoi::clear_isshaded() {
  isshaded_ = false;
  clear_has_isshaded();
}
inline bool RtTpsProtoVoi::isshaded() const {
  return isshaded_;
}
inline void RtTpsProtoVoi::set_isshaded(bool value) {
  set_has_isshaded();
  isshaded_ = value;
}

// optional int32 subrole = 22;
inline bool RtTpsProtoVoi::has_subrole() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RtTpsProtoVoi::set_has_subrole() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RtTpsProtoVoi::clear_has_subrole() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RtTpsProtoVoi::clear_subrole() {
  subrole_ = 0;
  clear_has_subrole();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::subrole() const {
  return subrole_;
}
inline void RtTpsProtoVoi::set_subrole(::google::protobuf::int32 value) {
  set_has_subrole();
  subrole_ = value;
}

// optional int32 isapproved = 23;
inline bool RtTpsProtoVoi::has_isapproved() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RtTpsProtoVoi::set_has_isapproved() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RtTpsProtoVoi::clear_has_isapproved() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RtTpsProtoVoi::clear_isapproved() {
  isapproved_ = 0;
  clear_has_isapproved();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::isapproved() const {
  return isapproved_;
}
inline void RtTpsProtoVoi::set_isapproved(::google::protobuf::int32 value) {
  set_has_isapproved();
  isapproved_ = value;
}

// optional int32 locktype = 24;
inline bool RtTpsProtoVoi::has_locktype() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RtTpsProtoVoi::set_has_locktype() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RtTpsProtoVoi::clear_has_locktype() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RtTpsProtoVoi::clear_locktype() {
  locktype_ = 0;
  clear_has_locktype();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::locktype() const {
  return locktype_;
}
inline void RtTpsProtoVoi::set_locktype(::google::protobuf::int32 value) {
  set_has_locktype();
  locktype_ = value;
}

// optional float ingrid = 25;
inline bool RtTpsProtoVoi::has_ingrid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_ingrid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RtTpsProtoVoi::clear_has_ingrid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RtTpsProtoVoi::clear_ingrid() {
  ingrid_ = 0;
  clear_has_ingrid();
}
inline float RtTpsProtoVoi::ingrid() const {
  return ingrid_;
}
inline void RtTpsProtoVoi::set_ingrid(float value) {
  set_has_ingrid();
  ingrid_ = value;
}

// optional float tcpntcp = 26;
inline bool RtTpsProtoVoi::has_tcpntcp() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_tcpntcp() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RtTpsProtoVoi::clear_has_tcpntcp() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RtTpsProtoVoi::clear_tcpntcp() {
  tcpntcp_ = 0;
  clear_has_tcpntcp();
}
inline float RtTpsProtoVoi::tcpntcp() const {
  return tcpntcp_;
}
inline void RtTpsProtoVoi::set_tcpntcp(float value) {
  set_has_tcpntcp();
  tcpntcp_ = value;
}

// optional string description = 27;
inline bool RtTpsProtoVoi::has_description() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_description() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RtTpsProtoVoi::clear_has_description() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RtTpsProtoVoi::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& RtTpsProtoVoi::description() const {
  return *description_;
}
inline void RtTpsProtoVoi::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RtTpsProtoVoi::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RtTpsProtoVoi::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoi::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* RtTpsProtoVoi::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isoverride = 28;
inline bool RtTpsProtoVoi::has_isoverride() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_isoverride() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RtTpsProtoVoi::clear_has_isoverride() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RtTpsProtoVoi::clear_isoverride() {
  isoverride_ = false;
  clear_has_isoverride();
}
inline bool RtTpsProtoVoi::isoverride() const {
  return isoverride_;
}
inline void RtTpsProtoVoi::set_isoverride(bool value) {
  set_has_isoverride();
  isoverride_ = value;
}

// optional float overridemassdensity = 29;
inline bool RtTpsProtoVoi::has_overridemassdensity() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_overridemassdensity() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RtTpsProtoVoi::clear_has_overridemassdensity() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RtTpsProtoVoi::clear_overridemassdensity() {
  overridemassdensity_ = 0;
  clear_has_overridemassdensity();
}
inline float RtTpsProtoVoi::overridemassdensity() const {
  return overridemassdensity_;
}
inline void RtTpsProtoVoi::set_overridemassdensity(float value) {
  set_has_overridemassdensity();
  overridemassdensity_ = value;
}

// optional float overridereferenceelectrondensity = 30;
inline bool RtTpsProtoVoi::has_overridereferenceelectrondensity() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_overridereferenceelectrondensity() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RtTpsProtoVoi::clear_has_overridereferenceelectrondensity() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RtTpsProtoVoi::clear_overridereferenceelectrondensity() {
  overridereferenceelectrondensity_ = 0;
  clear_has_overridereferenceelectrondensity();
}
inline float RtTpsProtoVoi::overridereferenceelectrondensity() const {
  return overridereferenceelectrondensity_;
}
inline void RtTpsProtoVoi::set_overridereferenceelectrondensity(float value) {
  set_has_overridereferenceelectrondensity();
  overridereferenceelectrondensity_ = value;
}

// optional int32 organType = 31;
inline bool RtTpsProtoVoi::has_organtype() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RtTpsProtoVoi::set_has_organtype() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RtTpsProtoVoi::clear_has_organtype() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RtTpsProtoVoi::clear_organtype() {
  organtype_ = 0;
  clear_has_organtype();
}
inline ::google::protobuf::int32 RtTpsProtoVoi::organtype() const {
  return organtype_;
}
inline void RtTpsProtoVoi::set_organtype(::google::protobuf::int32 value) {
  set_has_organtype();
  organtype_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedVoi

// repeated .tps.proto.RtTpsProtoVoi voilist = 1;
inline int RtTpsProtoRepeatedVoi::voilist_size() const {
  return voilist_.size();
}
inline void RtTpsProtoRepeatedVoi::clear_voilist() {
  voilist_.Clear();
}
inline const ::tps::proto::RtTpsProtoVoi& RtTpsProtoRepeatedVoi::voilist(int index) const {
  return voilist_.Get(index);
}
inline ::tps::proto::RtTpsProtoVoi* RtTpsProtoRepeatedVoi::mutable_voilist(int index) {
  return voilist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoVoi* RtTpsProtoRepeatedVoi::add_voilist() {
  return voilist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoVoi >&
RtTpsProtoRepeatedVoi::voilist() const {
  return voilist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoVoi >*
RtTpsProtoRepeatedVoi::mutable_voilist() {
  return &voilist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fvoi_2eproto__INCLUDED
