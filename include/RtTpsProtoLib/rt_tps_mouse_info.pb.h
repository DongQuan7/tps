// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_mouse_info.proto

#ifndef PROTOBUF_rt_5ftps_5fmouse_5finfo_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fmouse_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        // Internal implementation detail -- do not call these.
        void  protobuf_AddDesc_rt_5ftps_5fmouse_5finfo_2eproto();
        void protobuf_AssignDesc_rt_5ftps_5fmouse_5finfo_2eproto();
        void protobuf_ShutdownFile_rt_5ftps_5fmouse_5finfo_2eproto();

        class RT_TPS_MOUSE_INFO;

        // ===================================================================

        class RT_TPS_MOUSE_INFO : public ::google::protobuf::Message {
        public:
            RT_TPS_MOUSE_INFO();
            virtual ~RT_TPS_MOUSE_INFO();

            RT_TPS_MOUSE_INFO(const RT_TPS_MOUSE_INFO& from);

            inline RT_TPS_MOUSE_INFO& operator=(const RT_TPS_MOUSE_INFO& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const RT_TPS_MOUSE_INFO& default_instance();

            void Swap(RT_TPS_MOUSE_INFO* other);

            // implements Message ----------------------------------------------

            RT_TPS_MOUSE_INFO* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const RT_TPS_MOUSE_INFO& from);
            void MergeFrom(const RT_TPS_MOUSE_INFO& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required double x = 1;
            inline bool has_x() const;
            inline void clear_x();
            static const int kXFieldNumber = 1;
            inline double x() const;
            inline void set_x(double value);

            // required double y = 2;
            inline bool has_y() const;
            inline void clear_y();
            static const int kYFieldNumber = 2;
            inline double y() const;
            inline void set_y(double value);

            // required int32 mouseActionType = 3;
            inline bool has_mouseactiontype() const;
            inline void clear_mouseactiontype();
            static const int kMouseActionTypeFieldNumber = 3;
            inline ::google::protobuf::int32 mouseactiontype() const;
            inline void set_mouseactiontype(::google::protobuf::int32 value);

            // required int32 viewerControlID = 4;
            inline bool has_viewercontrolid() const;
            inline void clear_viewercontrolid();
            static const int kViewerControlIDFieldNumber = 4;
            inline ::google::protobuf::int32 viewercontrolid() const;
            inline void set_viewercontrolid(::google::protobuf::int32 value);

            // required int32 cellID = 5;
            inline bool has_cellid() const;
            inline void clear_cellid();
            static const int kCellIDFieldNumber = 5;
            inline ::google::protobuf::int32 cellid() const;
            inline void set_cellid(::google::protobuf::int32 value);

            // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_MOUSE_INFO)
        private:
            inline void set_has_x();
            inline void clear_has_x();
            inline void set_has_y();
            inline void clear_has_y();
            inline void set_has_mouseactiontype();
            inline void clear_has_mouseactiontype();
            inline void set_has_viewercontrolid();
            inline void clear_has_viewercontrolid();
            inline void set_has_cellid();
            inline void clear_has_cellid();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            double x_;
            double y_;
            ::google::protobuf::int32 mouseactiontype_;
            ::google::protobuf::int32 viewercontrolid_;
            ::google::protobuf::int32 cellid_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

            friend void  protobuf_AddDesc_rt_5ftps_5fmouse_5finfo_2eproto();
            friend void protobuf_AssignDesc_rt_5ftps_5fmouse_5finfo_2eproto();
            friend void protobuf_ShutdownFile_rt_5ftps_5fmouse_5finfo_2eproto();

            void InitAsDefaultInstance();
            static RT_TPS_MOUSE_INFO* default_instance_;
        };
        // ===================================================================


        // ===================================================================

        // RT_TPS_MOUSE_INFO

        // required double x = 1;
        inline bool RT_TPS_MOUSE_INFO::has_x() const {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        inline void RT_TPS_MOUSE_INFO::set_has_x() {
            _has_bits_[0] |= 0x00000001u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_has_x() {
            _has_bits_[0] &= ~0x00000001u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_x() {
            x_ = 0;
            clear_has_x();
        }
        inline double RT_TPS_MOUSE_INFO::x() const {
            return x_;
        }
        inline void RT_TPS_MOUSE_INFO::set_x(double value) {
            set_has_x();
            x_ = value;
        }

        // required double y = 2;
        inline bool RT_TPS_MOUSE_INFO::has_y() const {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        inline void RT_TPS_MOUSE_INFO::set_has_y() {
            _has_bits_[0] |= 0x00000002u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_has_y() {
            _has_bits_[0] &= ~0x00000002u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_y() {
            y_ = 0;
            clear_has_y();
        }
        inline double RT_TPS_MOUSE_INFO::y() const {
            return y_;
        }
        inline void RT_TPS_MOUSE_INFO::set_y(double value) {
            set_has_y();
            y_ = value;
        }

        // required int32 mouseActionType = 3;
        inline bool RT_TPS_MOUSE_INFO::has_mouseactiontype() const {
            return (_has_bits_[0] & 0x00000004u) != 0;
        }
        inline void RT_TPS_MOUSE_INFO::set_has_mouseactiontype() {
            _has_bits_[0] |= 0x00000004u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_has_mouseactiontype() {
            _has_bits_[0] &= ~0x00000004u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_mouseactiontype() {
            mouseactiontype_ = 0;
            clear_has_mouseactiontype();
        }
        inline ::google::protobuf::int32 RT_TPS_MOUSE_INFO::mouseactiontype() const {
            return mouseactiontype_;
        }
        inline void RT_TPS_MOUSE_INFO::set_mouseactiontype(::google::protobuf::int32 value) {
            set_has_mouseactiontype();
            mouseactiontype_ = value;
        }

        // required int32 viewerControlID = 4;
        inline bool RT_TPS_MOUSE_INFO::has_viewercontrolid() const {
            return (_has_bits_[0] & 0x00000008u) != 0;
        }
        inline void RT_TPS_MOUSE_INFO::set_has_viewercontrolid() {
            _has_bits_[0] |= 0x00000008u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_has_viewercontrolid() {
            _has_bits_[0] &= ~0x00000008u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_viewercontrolid() {
            viewercontrolid_ = 0;
            clear_has_viewercontrolid();
        }
        inline ::google::protobuf::int32 RT_TPS_MOUSE_INFO::viewercontrolid() const {
            return viewercontrolid_;
        }
        inline void RT_TPS_MOUSE_INFO::set_viewercontrolid(::google::protobuf::int32 value) {
            set_has_viewercontrolid();
            viewercontrolid_ = value;
        }

        // required int32 cellID = 5;
        inline bool RT_TPS_MOUSE_INFO::has_cellid() const {
            return (_has_bits_[0] & 0x00000010u) != 0;
        }
        inline void RT_TPS_MOUSE_INFO::set_has_cellid() {
            _has_bits_[0] |= 0x00000010u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_has_cellid() {
            _has_bits_[0] &= ~0x00000010u;
        }
        inline void RT_TPS_MOUSE_INFO::clear_cellid() {
            cellid_ = 0;
            clear_has_cellid();
        }
        inline ::google::protobuf::int32 RT_TPS_MOUSE_INFO::cellid() const {
            return cellid_;
        }
        inline void RT_TPS_MOUSE_INFO::set_cellid(::google::protobuf::int32 value) {
            set_has_cellid();
            cellid_ = value;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fmouse_5finfo_2eproto__INCLUDED
