// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_beamssd.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fbeamssd_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fbeamssd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeamssd_2eproto();

class RtTpsProtoBeamSSD;
class RtTpsProtoSegmentSSD;

// ===================================================================

class RtTpsProtoBeamSSD : public ::google::protobuf::Message {
 public:
  RtTpsProtoBeamSSD();
  virtual ~RtTpsProtoBeamSSD();
  
  RtTpsProtoBeamSSD(const RtTpsProtoBeamSSD& from);
  
  inline RtTpsProtoBeamSSD& operator=(const RtTpsProtoBeamSSD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoBeamSSD& default_instance();
  
  void Swap(RtTpsProtoBeamSSD* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoBeamSSD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoBeamSSD& from);
  void MergeFrom(const RtTpsProtoBeamSSD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float SsdRangeMin = 1;
  inline bool has_ssdrangemin() const;
  inline void clear_ssdrangemin();
  static const int kSsdRangeMinFieldNumber = 1;
  inline float ssdrangemin() const;
  inline void set_ssdrangemin(float value);
  
  // optional float SsdRangeMax = 2;
  inline bool has_ssdrangemax() const;
  inline void clear_ssdrangemax();
  static const int kSsdRangeMaxFieldNumber = 2;
  inline float ssdrangemax() const;
  inline void set_ssdrangemax(float value);
  
  // optional float Originalx = 3;
  inline bool has_originalx() const;
  inline void clear_originalx();
  static const int kOriginalxFieldNumber = 3;
  inline float originalx() const;
  inline void set_originalx(float value);
  
  // optional float Originaly = 4;
  inline bool has_originaly() const;
  inline void clear_originaly();
  static const int kOriginalyFieldNumber = 4;
  inline float originaly() const;
  inline void set_originaly(float value);
  
  // optional float Originalz = 5;
  inline bool has_originalz() const;
  inline void clear_originalz();
  static const int kOriginalzFieldNumber = 5;
  inline float originalz() const;
  inline void set_originalz(float value);
  
  // repeated .tps.proto.RtTpsProtoSegmentSSD segmentssd_list = 6;
  inline int segmentssd_list_size() const;
  inline void clear_segmentssd_list();
  static const int kSegmentssdListFieldNumber = 6;
  inline const ::tps::proto::RtTpsProtoSegmentSSD& segmentssd_list(int index) const;
  inline ::tps::proto::RtTpsProtoSegmentSSD* mutable_segmentssd_list(int index);
  inline ::tps::proto::RtTpsProtoSegmentSSD* add_segmentssd_list();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegmentSSD >&
      segmentssd_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegmentSSD >*
      mutable_segmentssd_list();
  
  // optional float Ssd = 7;
  inline bool has_ssd() const;
  inline void clear_ssd();
  static const int kSsdFieldNumber = 7;
  inline float ssd() const;
  inline void set_ssd(float value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoBeamSSD)
 private:
  inline void set_has_ssdrangemin();
  inline void clear_has_ssdrangemin();
  inline void set_has_ssdrangemax();
  inline void clear_has_ssdrangemax();
  inline void set_has_originalx();
  inline void clear_has_originalx();
  inline void set_has_originaly();
  inline void clear_has_originaly();
  inline void set_has_originalz();
  inline void clear_has_originalz();
  inline void set_has_ssd();
  inline void clear_has_ssd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float ssdrangemin_;
  float ssdrangemax_;
  float originalx_;
  float originaly_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegmentSSD > segmentssd_list_;
  float originalz_;
  float ssd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeamssd_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoBeamSSD* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoSegmentSSD : public ::google::protobuf::Message {
 public:
  RtTpsProtoSegmentSSD();
  virtual ~RtTpsProtoSegmentSSD();
  
  RtTpsProtoSegmentSSD(const RtTpsProtoSegmentSSD& from);
  
  inline RtTpsProtoSegmentSSD& operator=(const RtTpsProtoSegmentSSD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoSegmentSSD& default_instance();
  
  void Swap(RtTpsProtoSegmentSSD* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoSegmentSSD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoSegmentSSD& from);
  void MergeFrom(const RtTpsProtoSegmentSSD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float StartSSD = 1;
  inline bool has_startssd() const;
  inline void clear_startssd();
  static const int kStartSSDFieldNumber = 1;
  inline float startssd() const;
  inline void set_startssd(float value);
  
  // optional float EndSSD = 2;
  inline bool has_endssd() const;
  inline void clear_endssd();
  static const int kEndSSDFieldNumber = 2;
  inline float endssd() const;
  inline void set_endssd(float value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoSegmentSSD)
 private:
  inline void set_has_startssd();
  inline void clear_has_startssd();
  inline void set_has_endssd();
  inline void clear_has_endssd();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float startssd_;
  float endssd_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeamssd_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeamssd_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoSegmentSSD* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoBeamSSD

// optional float SsdRangeMin = 1;
inline bool RtTpsProtoBeamSSD::has_ssdrangemin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_ssdrangemin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoBeamSSD::clear_has_ssdrangemin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoBeamSSD::clear_ssdrangemin() {
  ssdrangemin_ = 0;
  clear_has_ssdrangemin();
}
inline float RtTpsProtoBeamSSD::ssdrangemin() const {
  return ssdrangemin_;
}
inline void RtTpsProtoBeamSSD::set_ssdrangemin(float value) {
  set_has_ssdrangemin();
  ssdrangemin_ = value;
}

// optional float SsdRangeMax = 2;
inline bool RtTpsProtoBeamSSD::has_ssdrangemax() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_ssdrangemax() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoBeamSSD::clear_has_ssdrangemax() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoBeamSSD::clear_ssdrangemax() {
  ssdrangemax_ = 0;
  clear_has_ssdrangemax();
}
inline float RtTpsProtoBeamSSD::ssdrangemax() const {
  return ssdrangemax_;
}
inline void RtTpsProtoBeamSSD::set_ssdrangemax(float value) {
  set_has_ssdrangemax();
  ssdrangemax_ = value;
}

// optional float Originalx = 3;
inline bool RtTpsProtoBeamSSD::has_originalx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_originalx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoBeamSSD::clear_has_originalx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoBeamSSD::clear_originalx() {
  originalx_ = 0;
  clear_has_originalx();
}
inline float RtTpsProtoBeamSSD::originalx() const {
  return originalx_;
}
inline void RtTpsProtoBeamSSD::set_originalx(float value) {
  set_has_originalx();
  originalx_ = value;
}

// optional float Originaly = 4;
inline bool RtTpsProtoBeamSSD::has_originaly() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_originaly() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoBeamSSD::clear_has_originaly() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoBeamSSD::clear_originaly() {
  originaly_ = 0;
  clear_has_originaly();
}
inline float RtTpsProtoBeamSSD::originaly() const {
  return originaly_;
}
inline void RtTpsProtoBeamSSD::set_originaly(float value) {
  set_has_originaly();
  originaly_ = value;
}

// optional float Originalz = 5;
inline bool RtTpsProtoBeamSSD::has_originalz() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_originalz() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoBeamSSD::clear_has_originalz() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoBeamSSD::clear_originalz() {
  originalz_ = 0;
  clear_has_originalz();
}
inline float RtTpsProtoBeamSSD::originalz() const {
  return originalz_;
}
inline void RtTpsProtoBeamSSD::set_originalz(float value) {
  set_has_originalz();
  originalz_ = value;
}

// repeated .tps.proto.RtTpsProtoSegmentSSD segmentssd_list = 6;
inline int RtTpsProtoBeamSSD::segmentssd_list_size() const {
  return segmentssd_list_.size();
}
inline void RtTpsProtoBeamSSD::clear_segmentssd_list() {
  segmentssd_list_.Clear();
}
inline const ::tps::proto::RtTpsProtoSegmentSSD& RtTpsProtoBeamSSD::segmentssd_list(int index) const {
  return segmentssd_list_.Get(index);
}
inline ::tps::proto::RtTpsProtoSegmentSSD* RtTpsProtoBeamSSD::mutable_segmentssd_list(int index) {
  return segmentssd_list_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoSegmentSSD* RtTpsProtoBeamSSD::add_segmentssd_list() {
  return segmentssd_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegmentSSD >&
RtTpsProtoBeamSSD::segmentssd_list() const {
  return segmentssd_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegmentSSD >*
RtTpsProtoBeamSSD::mutable_segmentssd_list() {
  return &segmentssd_list_;
}

// optional float Ssd = 7;
inline bool RtTpsProtoBeamSSD::has_ssd() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoBeamSSD::set_has_ssd() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoBeamSSD::clear_has_ssd() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoBeamSSD::clear_ssd() {
  ssd_ = 0;
  clear_has_ssd();
}
inline float RtTpsProtoBeamSSD::ssd() const {
  return ssd_;
}
inline void RtTpsProtoBeamSSD::set_ssd(float value) {
  set_has_ssd();
  ssd_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoSegmentSSD

// optional float StartSSD = 1;
inline bool RtTpsProtoSegmentSSD::has_startssd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoSegmentSSD::set_has_startssd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoSegmentSSD::clear_has_startssd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoSegmentSSD::clear_startssd() {
  startssd_ = 0;
  clear_has_startssd();
}
inline float RtTpsProtoSegmentSSD::startssd() const {
  return startssd_;
}
inline void RtTpsProtoSegmentSSD::set_startssd(float value) {
  set_has_startssd();
  startssd_ = value;
}

// optional float EndSSD = 2;
inline bool RtTpsProtoSegmentSSD::has_endssd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoSegmentSSD::set_has_endssd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoSegmentSSD::clear_has_endssd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoSegmentSSD::clear_endssd() {
  endssd_ = 0;
  clear_has_endssd();
}
inline float RtTpsProtoSegmentSSD::endssd() const {
  return endssd_;
}
inline void RtTpsProtoSegmentSSD::set_endssd(float value) {
  set_has_endssd();
  endssd_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fbeamssd_2eproto__INCLUDED
