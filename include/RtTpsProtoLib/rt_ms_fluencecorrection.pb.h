// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_ms_fluencecorrection.proto

#ifndef PROTOBUF_rt_5fms_5ffluencecorrection_2eproto__INCLUDED
#define PROTOBUF_rt_5fms_5ffluencecorrection_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto();
void protobuf_AssignDesc_rt_5fms_5ffluencecorrection_2eproto();
void protobuf_ShutdownFile_rt_5fms_5ffluencecorrection_2eproto();

class RT_MS_FluenceCorrection;

// ===================================================================

class RT_MS_FluenceCorrection : public ::google::protobuf::Message {
 public:
  RT_MS_FluenceCorrection();
  virtual ~RT_MS_FluenceCorrection();
  
  RT_MS_FluenceCorrection(const RT_MS_FluenceCorrection& from);
  
  inline RT_MS_FluenceCorrection& operator=(const RT_MS_FluenceCorrection& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_FluenceCorrection& default_instance();
  
  void Swap(RT_MS_FluenceCorrection* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_FluenceCorrection* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_FluenceCorrection& from);
  void MergeFrom(const RT_MS_FluenceCorrection& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string commissionUID = 1;
  inline bool has_commissionuid() const;
  inline void clear_commissionuid();
  static const int kCommissionUIDFieldNumber = 1;
  inline const ::std::string& commissionuid() const;
  inline void set_commissionuid(const ::std::string& value);
  inline void set_commissionuid(const char* value);
  inline void set_commissionuid(const char* value, size_t size);
  inline ::std::string* mutable_commissionuid();
  inline ::std::string* release_commissionuid();
  
  // optional string measureUID = 2;
  inline bool has_measureuid() const;
  inline void clear_measureuid();
  static const int kMeasureUIDFieldNumber = 2;
  inline const ::std::string& measureuid() const;
  inline void set_measureuid(const ::std::string& value);
  inline void set_measureuid(const char* value);
  inline void set_measureuid(const char* value, size_t size);
  inline ::std::string* mutable_measureuid();
  inline ::std::string* release_measureuid();
  
  // repeated float energy = 3;
  inline int energy_size() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 3;
  inline float energy(int index) const;
  inline void set_energy(int index, float value);
  inline void add_energy(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      energy() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_energy();
  
  // optional float depth = 4;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 4;
  inline float depth() const;
  inline void set_depth(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_FluenceCorrection)
 private:
  inline void set_has_commissionuid();
  inline void clear_has_commissionuid();
  inline void set_has_measureuid();
  inline void clear_has_measureuid();
  inline void set_has_depth();
  inline void clear_has_depth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* commissionuid_;
  ::std::string* measureuid_;
  ::google::protobuf::RepeatedField< float > energy_;
  float depth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5ffluencecorrection_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5ffluencecorrection_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5ffluencecorrection_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_FluenceCorrection* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_FluenceCorrection

// optional string commissionUID = 1;
inline bool RT_MS_FluenceCorrection::has_commissionuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_FluenceCorrection::set_has_commissionuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_FluenceCorrection::clear_has_commissionuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_FluenceCorrection::clear_commissionuid() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    commissionuid_->clear();
  }
  clear_has_commissionuid();
}
inline const ::std::string& RT_MS_FluenceCorrection::commissionuid() const {
  return *commissionuid_;
}
inline void RT_MS_FluenceCorrection::set_commissionuid(const ::std::string& value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_FluenceCorrection::set_commissionuid(const char* value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_FluenceCorrection::set_commissionuid(const char* value, size_t size) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_FluenceCorrection::mutable_commissionuid() {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  return commissionuid_;
}
inline ::std::string* RT_MS_FluenceCorrection::release_commissionuid() {
  clear_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commissionuid_;
    commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string measureUID = 2;
inline bool RT_MS_FluenceCorrection::has_measureuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_FluenceCorrection::set_has_measureuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_FluenceCorrection::clear_has_measureuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_FluenceCorrection::clear_measureuid() {
  if (measureuid_ != &::google::protobuf::internal::kEmptyString) {
    measureuid_->clear();
  }
  clear_has_measureuid();
}
inline const ::std::string& RT_MS_FluenceCorrection::measureuid() const {
  return *measureuid_;
}
inline void RT_MS_FluenceCorrection::set_measureuid(const ::std::string& value) {
  set_has_measureuid();
  if (measureuid_ == &::google::protobuf::internal::kEmptyString) {
    measureuid_ = new ::std::string;
  }
  measureuid_->assign(value);
}
inline void RT_MS_FluenceCorrection::set_measureuid(const char* value) {
  set_has_measureuid();
  if (measureuid_ == &::google::protobuf::internal::kEmptyString) {
    measureuid_ = new ::std::string;
  }
  measureuid_->assign(value);
}
inline void RT_MS_FluenceCorrection::set_measureuid(const char* value, size_t size) {
  set_has_measureuid();
  if (measureuid_ == &::google::protobuf::internal::kEmptyString) {
    measureuid_ = new ::std::string;
  }
  measureuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_FluenceCorrection::mutable_measureuid() {
  set_has_measureuid();
  if (measureuid_ == &::google::protobuf::internal::kEmptyString) {
    measureuid_ = new ::std::string;
  }
  return measureuid_;
}
inline ::std::string* RT_MS_FluenceCorrection::release_measureuid() {
  clear_has_measureuid();
  if (measureuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = measureuid_;
    measureuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated float energy = 3;
inline int RT_MS_FluenceCorrection::energy_size() const {
  return energy_.size();
}
inline void RT_MS_FluenceCorrection::clear_energy() {
  energy_.Clear();
}
inline float RT_MS_FluenceCorrection::energy(int index) const {
  return energy_.Get(index);
}
inline void RT_MS_FluenceCorrection::set_energy(int index, float value) {
  energy_.Set(index, value);
}
inline void RT_MS_FluenceCorrection::add_energy(float value) {
  energy_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RT_MS_FluenceCorrection::energy() const {
  return energy_;
}
inline ::google::protobuf::RepeatedField< float >*
RT_MS_FluenceCorrection::mutable_energy() {
  return &energy_;
}

// optional float depth = 4;
inline bool RT_MS_FluenceCorrection::has_depth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_FluenceCorrection::set_has_depth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_FluenceCorrection::clear_has_depth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_FluenceCorrection::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline float RT_MS_FluenceCorrection::depth() const {
  return depth_;
}
inline void RT_MS_FluenceCorrection::set_depth(float value) {
  set_has_depth();
  depth_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5fms_5ffluencecorrection_2eproto__INCLUDED
