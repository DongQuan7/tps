// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_mouse_action.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fmouse_5faction_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fmouse_5faction_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fmouse_5faction_2eproto();

class RtTpsProtoMouseAction;

// ===================================================================

class RtTpsProtoMouseAction : public ::google::protobuf::Message {
 public:
  RtTpsProtoMouseAction();
  virtual ~RtTpsProtoMouseAction();
  
  RtTpsProtoMouseAction(const RtTpsProtoMouseAction& from);
  
  inline RtTpsProtoMouseAction& operator=(const RtTpsProtoMouseAction& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoMouseAction& default_instance();
  
  void Swap(RtTpsProtoMouseAction* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoMouseAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoMouseAction& from);
  void MergeFrom(const RtTpsProtoMouseAction& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 windowType = 1;
  inline bool has_windowtype() const;
  inline void clear_windowtype();
  static const int kWindowTypeFieldNumber = 1;
  inline ::google::protobuf::int32 windowtype() const;
  inline void set_windowtype(::google::protobuf::int32 value);
  
  // required string windowUid = 2;
  inline bool has_windowuid() const;
  inline void clear_windowuid();
  static const int kWindowUidFieldNumber = 2;
  inline const ::std::string& windowuid() const;
  inline void set_windowuid(const ::std::string& value);
  inline void set_windowuid(const char* value);
  inline void set_windowuid(const char* value, size_t size);
  inline ::std::string* mutable_windowuid();
  inline ::std::string* release_windowuid();
  
  // required int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);
  
  // optional int32 previousAction = 4;
  inline bool has_previousaction() const;
  inline void clear_previousaction();
  static const int kPreviousActionFieldNumber = 4;
  inline ::google::protobuf::int32 previousaction() const;
  inline void set_previousaction(::google::protobuf::int32 value);
  
  // required double x = 5;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 5;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 6;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 6;
  inline double y() const;
  inline void set_y(double value);
  
  // optional int32 width = 7;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 7;
  inline ::google::protobuf::int32 width() const;
  inline void set_width(::google::protobuf::int32 value);
  
  // optional int32 height = 8;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 8;
  inline ::google::protobuf::int32 height() const;
  inline void set_height(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoMouseAction)
 private:
  inline void set_has_windowtype();
  inline void clear_has_windowtype();
  inline void set_has_windowuid();
  inline void clear_has_windowuid();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_previousaction();
  inline void clear_has_previousaction();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* windowuid_;
  ::google::protobuf::int32 windowtype_;
  ::google::protobuf::int32 action_;
  double x_;
  ::google::protobuf::int32 previousaction_;
  ::google::protobuf::int32 width_;
  double y_;
  ::google::protobuf::int32 height_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fmouse_5faction_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoMouseAction* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoMouseAction

// required int32 windowType = 1;
inline bool RtTpsProtoMouseAction::has_windowtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_windowtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoMouseAction::clear_has_windowtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoMouseAction::clear_windowtype() {
  windowtype_ = 0;
  clear_has_windowtype();
}
inline ::google::protobuf::int32 RtTpsProtoMouseAction::windowtype() const {
  return windowtype_;
}
inline void RtTpsProtoMouseAction::set_windowtype(::google::protobuf::int32 value) {
  set_has_windowtype();
  windowtype_ = value;
}

// required string windowUid = 2;
inline bool RtTpsProtoMouseAction::has_windowuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_windowuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoMouseAction::clear_has_windowuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoMouseAction::clear_windowuid() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    windowuid_->clear();
  }
  clear_has_windowuid();
}
inline const ::std::string& RtTpsProtoMouseAction::windowuid() const {
  return *windowuid_;
}
inline void RtTpsProtoMouseAction::set_windowuid(const ::std::string& value) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(value);
}
inline void RtTpsProtoMouseAction::set_windowuid(const char* value) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(value);
}
inline void RtTpsProtoMouseAction::set_windowuid(const char* value, size_t size) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoMouseAction::mutable_windowuid() {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  return windowuid_;
}
inline ::std::string* RtTpsProtoMouseAction::release_windowuid() {
  clear_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = windowuid_;
    windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 action = 3;
inline bool RtTpsProtoMouseAction::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoMouseAction::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoMouseAction::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 RtTpsProtoMouseAction::action() const {
  return action_;
}
inline void RtTpsProtoMouseAction::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// optional int32 previousAction = 4;
inline bool RtTpsProtoMouseAction::has_previousaction() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_previousaction() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoMouseAction::clear_has_previousaction() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoMouseAction::clear_previousaction() {
  previousaction_ = 0;
  clear_has_previousaction();
}
inline ::google::protobuf::int32 RtTpsProtoMouseAction::previousaction() const {
  return previousaction_;
}
inline void RtTpsProtoMouseAction::set_previousaction(::google::protobuf::int32 value) {
  set_has_previousaction();
  previousaction_ = value;
}

// required double x = 5;
inline bool RtTpsProtoMouseAction::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoMouseAction::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoMouseAction::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RtTpsProtoMouseAction::x() const {
  return x_;
}
inline void RtTpsProtoMouseAction::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 6;
inline bool RtTpsProtoMouseAction::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoMouseAction::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoMouseAction::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RtTpsProtoMouseAction::y() const {
  return y_;
}
inline void RtTpsProtoMouseAction::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional int32 width = 7;
inline bool RtTpsProtoMouseAction::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoMouseAction::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoMouseAction::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 RtTpsProtoMouseAction::width() const {
  return width_;
}
inline void RtTpsProtoMouseAction::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
}

// optional int32 height = 8;
inline bool RtTpsProtoMouseAction::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoMouseAction::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoMouseAction::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoMouseAction::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline ::google::protobuf::int32 RtTpsProtoMouseAction::height() const {
  return height_;
}
inline void RtTpsProtoMouseAction::set_height(::google::protobuf::int32 value) {
  set_has_height();
  height_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fmouse_5faction_2eproto__INCLUDED
