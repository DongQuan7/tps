// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_ms_electroncontamination.proto

#ifndef PROTOBUF_rt_5fms_5felectroncontamination_2eproto__INCLUDED
#define PROTOBUF_rt_5fms_5felectroncontamination_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto();
void protobuf_AssignDesc_rt_5fms_5felectroncontamination_2eproto();
void protobuf_ShutdownFile_rt_5fms_5felectroncontamination_2eproto();

class RT_MS_ElectronContamination;

// ===================================================================

class RT_MS_ElectronContamination : public ::google::protobuf::Message {
 public:
  RT_MS_ElectronContamination();
  virtual ~RT_MS_ElectronContamination();
  
  RT_MS_ElectronContamination(const RT_MS_ElectronContamination& from);
  
  inline RT_MS_ElectronContamination& operator=(const RT_MS_ElectronContamination& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_ElectronContamination& default_instance();
  
  void Swap(RT_MS_ElectronContamination* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_ElectronContamination* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_ElectronContamination& from);
  void MergeFrom(const RT_MS_ElectronContamination& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool electronContaminationFlag = 1;
  inline bool has_electroncontaminationflag() const;
  inline void clear_electroncontaminationflag();
  static const int kElectronContaminationFlagFieldNumber = 1;
  inline bool electroncontaminationflag() const;
  inline void set_electroncontaminationflag(bool value);
  
  // optional float electronMaxDepth = 2;
  inline bool has_electronmaxdepth() const;
  inline void clear_electronmaxdepth();
  static const int kElectronMaxDepthFieldNumber = 2;
  inline float electronmaxdepth() const;
  inline void set_electronmaxdepth(float value);
  
  // optional float surfaceDose = 3;
  inline bool has_surfacedose() const;
  inline void clear_surfacedose();
  static const int kSurfaceDoseFieldNumber = 3;
  inline float surfacedose() const;
  inline void set_surfacedose(float value);
  
  // optional float depthCoefficientK = 4;
  inline bool has_depthcoefficientk() const;
  inline void clear_depthcoefficientk();
  static const int kDepthCoefficientKFieldNumber = 4;
  inline float depthcoefficientk() const;
  inline void set_depthcoefficientk(float value);
  
  // optional float offaxisCoefficientA = 5;
  inline bool has_offaxiscoefficienta() const;
  inline void clear_offaxiscoefficienta();
  static const int kOffaxisCoefficientAFieldNumber = 5;
  inline float offaxiscoefficienta() const;
  inline void set_offaxiscoefficienta(float value);
  
  // optional float df = 6;
  inline bool has_df() const;
  inline void clear_df();
  static const int kDfFieldNumber = 6;
  inline float df() const;
  inline void set_df(float value);
  
  // optional float sf = 7;
  inline bool has_sf() const;
  inline void clear_sf();
  static const int kSfFieldNumber = 7;
  inline float sf() const;
  inline void set_sf(float value);
  
  // optional float cOne = 8;
  inline bool has_cone() const;
  inline void clear_cone();
  static const int kCOneFieldNumber = 8;
  inline float cone() const;
  inline void set_cone(float value);
  
  // optional float cTwo = 9;
  inline bool has_ctwo() const;
  inline void clear_ctwo();
  static const int kCTwoFieldNumber = 9;
  inline float ctwo() const;
  inline void set_ctwo(float value);
  
  // optional float cThree = 10;
  inline bool has_cthree() const;
  inline void clear_cthree();
  static const int kCThreeFieldNumber = 10;
  inline float cthree() const;
  inline void set_cthree(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_ElectronContamination)
 private:
  inline void set_has_electroncontaminationflag();
  inline void clear_has_electroncontaminationflag();
  inline void set_has_electronmaxdepth();
  inline void clear_has_electronmaxdepth();
  inline void set_has_surfacedose();
  inline void clear_has_surfacedose();
  inline void set_has_depthcoefficientk();
  inline void clear_has_depthcoefficientk();
  inline void set_has_offaxiscoefficienta();
  inline void clear_has_offaxiscoefficienta();
  inline void set_has_df();
  inline void clear_has_df();
  inline void set_has_sf();
  inline void clear_has_sf();
  inline void set_has_cone();
  inline void clear_has_cone();
  inline void set_has_ctwo();
  inline void clear_has_ctwo();
  inline void set_has_cthree();
  inline void clear_has_cthree();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool electroncontaminationflag_;
  float electronmaxdepth_;
  float surfacedose_;
  float depthcoefficientk_;
  float offaxiscoefficienta_;
  float df_;
  float sf_;
  float cone_;
  float ctwo_;
  float cthree_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5felectroncontamination_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5felectroncontamination_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5felectroncontamination_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_ElectronContamination* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_ElectronContamination

// optional bool electronContaminationFlag = 1;
inline bool RT_MS_ElectronContamination::has_electroncontaminationflag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_electroncontaminationflag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_ElectronContamination::clear_has_electroncontaminationflag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_ElectronContamination::clear_electroncontaminationflag() {
  electroncontaminationflag_ = false;
  clear_has_electroncontaminationflag();
}
inline bool RT_MS_ElectronContamination::electroncontaminationflag() const {
  return electroncontaminationflag_;
}
inline void RT_MS_ElectronContamination::set_electroncontaminationflag(bool value) {
  set_has_electroncontaminationflag();
  electroncontaminationflag_ = value;
}

// optional float electronMaxDepth = 2;
inline bool RT_MS_ElectronContamination::has_electronmaxdepth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_electronmaxdepth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_ElectronContamination::clear_has_electronmaxdepth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_ElectronContamination::clear_electronmaxdepth() {
  electronmaxdepth_ = 0;
  clear_has_electronmaxdepth();
}
inline float RT_MS_ElectronContamination::electronmaxdepth() const {
  return electronmaxdepth_;
}
inline void RT_MS_ElectronContamination::set_electronmaxdepth(float value) {
  set_has_electronmaxdepth();
  electronmaxdepth_ = value;
}

// optional float surfaceDose = 3;
inline bool RT_MS_ElectronContamination::has_surfacedose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_surfacedose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_ElectronContamination::clear_has_surfacedose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_ElectronContamination::clear_surfacedose() {
  surfacedose_ = 0;
  clear_has_surfacedose();
}
inline float RT_MS_ElectronContamination::surfacedose() const {
  return surfacedose_;
}
inline void RT_MS_ElectronContamination::set_surfacedose(float value) {
  set_has_surfacedose();
  surfacedose_ = value;
}

// optional float depthCoefficientK = 4;
inline bool RT_MS_ElectronContamination::has_depthcoefficientk() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_depthcoefficientk() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_ElectronContamination::clear_has_depthcoefficientk() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_ElectronContamination::clear_depthcoefficientk() {
  depthcoefficientk_ = 0;
  clear_has_depthcoefficientk();
}
inline float RT_MS_ElectronContamination::depthcoefficientk() const {
  return depthcoefficientk_;
}
inline void RT_MS_ElectronContamination::set_depthcoefficientk(float value) {
  set_has_depthcoefficientk();
  depthcoefficientk_ = value;
}

// optional float offaxisCoefficientA = 5;
inline bool RT_MS_ElectronContamination::has_offaxiscoefficienta() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_offaxiscoefficienta() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_ElectronContamination::clear_has_offaxiscoefficienta() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_ElectronContamination::clear_offaxiscoefficienta() {
  offaxiscoefficienta_ = 0;
  clear_has_offaxiscoefficienta();
}
inline float RT_MS_ElectronContamination::offaxiscoefficienta() const {
  return offaxiscoefficienta_;
}
inline void RT_MS_ElectronContamination::set_offaxiscoefficienta(float value) {
  set_has_offaxiscoefficienta();
  offaxiscoefficienta_ = value;
}

// optional float df = 6;
inline bool RT_MS_ElectronContamination::has_df() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_df() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_ElectronContamination::clear_has_df() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_ElectronContamination::clear_df() {
  df_ = 0;
  clear_has_df();
}
inline float RT_MS_ElectronContamination::df() const {
  return df_;
}
inline void RT_MS_ElectronContamination::set_df(float value) {
  set_has_df();
  df_ = value;
}

// optional float sf = 7;
inline bool RT_MS_ElectronContamination::has_sf() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_sf() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_ElectronContamination::clear_has_sf() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_ElectronContamination::clear_sf() {
  sf_ = 0;
  clear_has_sf();
}
inline float RT_MS_ElectronContamination::sf() const {
  return sf_;
}
inline void RT_MS_ElectronContamination::set_sf(float value) {
  set_has_sf();
  sf_ = value;
}

// optional float cOne = 8;
inline bool RT_MS_ElectronContamination::has_cone() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_cone() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_MS_ElectronContamination::clear_has_cone() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_MS_ElectronContamination::clear_cone() {
  cone_ = 0;
  clear_has_cone();
}
inline float RT_MS_ElectronContamination::cone() const {
  return cone_;
}
inline void RT_MS_ElectronContamination::set_cone(float value) {
  set_has_cone();
  cone_ = value;
}

// optional float cTwo = 9;
inline bool RT_MS_ElectronContamination::has_ctwo() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_ctwo() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_MS_ElectronContamination::clear_has_ctwo() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_MS_ElectronContamination::clear_ctwo() {
  ctwo_ = 0;
  clear_has_ctwo();
}
inline float RT_MS_ElectronContamination::ctwo() const {
  return ctwo_;
}
inline void RT_MS_ElectronContamination::set_ctwo(float value) {
  set_has_ctwo();
  ctwo_ = value;
}

// optional float cThree = 10;
inline bool RT_MS_ElectronContamination::has_cthree() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_MS_ElectronContamination::set_has_cthree() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_MS_ElectronContamination::clear_has_cthree() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_MS_ElectronContamination::clear_cthree() {
  cthree_ = 0;
  clear_has_cthree();
}
inline float RT_MS_ElectronContamination::cthree() const {
  return cthree_;
}
inline void RT_MS_ElectronContamination::set_cthree(float value) {
  set_has_cthree();
  cthree_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5fms_5felectroncontamination_2eproto__INCLUDED
