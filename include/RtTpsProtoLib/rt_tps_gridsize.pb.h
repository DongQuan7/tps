// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_gridsize.proto

#ifndef PROTOBUF_rt_5ftps_5fgridsize_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fgridsize_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fgridsize_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fgridsize_2eproto();

class RT_TPS_GridSize;

// ===================================================================

class RT_TPS_GridSize : public ::google::protobuf::Message {
 public:
  RT_TPS_GridSize();
  virtual ~RT_TPS_GridSize();
  
  RT_TPS_GridSize(const RT_TPS_GridSize& from);
  
  inline RT_TPS_GridSize& operator=(const RT_TPS_GridSize& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_GridSize& default_instance();
  
  void Swap(RT_TPS_GridSize* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_GridSize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_GridSize& from);
  void MergeFrom(const RT_TPS_GridSize& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // required string plan_uid = 4;
  inline bool has_plan_uid() const;
  inline void clear_plan_uid();
  static const int kPlanUidFieldNumber = 4;
  inline const ::std::string& plan_uid() const;
  inline void set_plan_uid(const ::std::string& value);
  inline void set_plan_uid(const char* value);
  inline void set_plan_uid(const char* value, size_t size);
  inline ::std::string* mutable_plan_uid();
  inline ::std::string* release_plan_uid();
  
  // optional bool is_show_gridboundary = 5;
  inline bool has_is_show_gridboundary() const;
  inline void clear_is_show_gridboundary();
  static const int kIsShowGridboundaryFieldNumber = 5;
  inline bool is_show_gridboundary() const;
  inline void set_is_show_gridboundary(bool value);
  
  // optional string normgroup_uid = 6;
  inline bool has_normgroup_uid() const;
  inline void clear_normgroup_uid();
  static const int kNormgroupUidFieldNumber = 6;
  inline const ::std::string& normgroup_uid() const;
  inline void set_normgroup_uid(const ::std::string& value);
  inline void set_normgroup_uid(const char* value);
  inline void set_normgroup_uid(const char* value, size_t size);
  inline ::std::string* mutable_normgroup_uid();
  inline ::std::string* release_normgroup_uid();
  
  // optional float startX = 7;
  inline bool has_startx() const;
  inline void clear_startx();
  static const int kStartXFieldNumber = 7;
  inline float startx() const;
  inline void set_startx(float value);
  
  // optional float startY = 8;
  inline bool has_starty() const;
  inline void clear_starty();
  static const int kStartYFieldNumber = 8;
  inline float starty() const;
  inline void set_starty(float value);
  
  // optional float startZ = 9;
  inline bool has_startz() const;
  inline void clear_startz();
  static const int kStartZFieldNumber = 9;
  inline float startz() const;
  inline void set_startz(float value);
  
  // optional float sizeX = 10;
  inline bool has_sizex() const;
  inline void clear_sizex();
  static const int kSizeXFieldNumber = 10;
  inline float sizex() const;
  inline void set_sizex(float value);
  
  // optional float sizeY = 11;
  inline bool has_sizey() const;
  inline void clear_sizey();
  static const int kSizeYFieldNumber = 11;
  inline float sizey() const;
  inline void set_sizey(float value);
  
  // optional float sizeZ = 12;
  inline bool has_sizez() const;
  inline void clear_sizez();
  static const int kSizeZFieldNumber = 12;
  inline float sizez() const;
  inline void set_sizez(float value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_GridSize)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_plan_uid();
  inline void clear_has_plan_uid();
  inline void set_has_is_show_gridboundary();
  inline void clear_has_is_show_gridboundary();
  inline void set_has_normgroup_uid();
  inline void clear_has_normgroup_uid();
  inline void set_has_startx();
  inline void clear_has_startx();
  inline void set_has_starty();
  inline void clear_has_starty();
  inline void set_has_startz();
  inline void clear_has_startz();
  inline void set_has_sizex();
  inline void clear_has_sizex();
  inline void set_has_sizey();
  inline void clear_has_sizey();
  inline void set_has_sizez();
  inline void clear_has_sizez();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  ::std::string* plan_uid_;
  float z_;
  bool is_show_gridboundary_;
  ::std::string* normgroup_uid_;
  float startx_;
  float starty_;
  float startz_;
  float sizex_;
  float sizey_;
  float sizez_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgridsize_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgridsize_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgridsize_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_GridSize* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_GridSize

// required float x = 1;
inline bool RT_TPS_GridSize::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_GridSize::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_GridSize::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_GridSize::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float RT_TPS_GridSize::x() const {
  return x_;
}
inline void RT_TPS_GridSize::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool RT_TPS_GridSize::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_GridSize::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_GridSize::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_GridSize::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float RT_TPS_GridSize::y() const {
  return y_;
}
inline void RT_TPS_GridSize::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool RT_TPS_GridSize::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_GridSize::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_GridSize::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_GridSize::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float RT_TPS_GridSize::z() const {
  return z_;
}
inline void RT_TPS_GridSize::set_z(float value) {
  set_has_z();
  z_ = value;
}

// required string plan_uid = 4;
inline bool RT_TPS_GridSize::has_plan_uid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_GridSize::set_has_plan_uid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_GridSize::clear_has_plan_uid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_GridSize::clear_plan_uid() {
  if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
    plan_uid_->clear();
  }
  clear_has_plan_uid();
}
inline const ::std::string& RT_TPS_GridSize::plan_uid() const {
  return *plan_uid_;
}
inline void RT_TPS_GridSize::set_plan_uid(const ::std::string& value) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(value);
}
inline void RT_TPS_GridSize::set_plan_uid(const char* value) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(value);
}
inline void RT_TPS_GridSize::set_plan_uid(const char* value, size_t size) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_GridSize::mutable_plan_uid() {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  return plan_uid_;
}
inline ::std::string* RT_TPS_GridSize::release_plan_uid() {
  clear_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plan_uid_;
    plan_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_show_gridboundary = 5;
inline bool RT_TPS_GridSize::has_is_show_gridboundary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_GridSize::set_has_is_show_gridboundary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_GridSize::clear_has_is_show_gridboundary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_GridSize::clear_is_show_gridboundary() {
  is_show_gridboundary_ = false;
  clear_has_is_show_gridboundary();
}
inline bool RT_TPS_GridSize::is_show_gridboundary() const {
  return is_show_gridboundary_;
}
inline void RT_TPS_GridSize::set_is_show_gridboundary(bool value) {
  set_has_is_show_gridboundary();
  is_show_gridboundary_ = value;
}

// optional string normgroup_uid = 6;
inline bool RT_TPS_GridSize::has_normgroup_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_GridSize::set_has_normgroup_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_GridSize::clear_has_normgroup_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_GridSize::clear_normgroup_uid() {
  if (normgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
    normgroup_uid_->clear();
  }
  clear_has_normgroup_uid();
}
inline const ::std::string& RT_TPS_GridSize::normgroup_uid() const {
  return *normgroup_uid_;
}
inline void RT_TPS_GridSize::set_normgroup_uid(const ::std::string& value) {
  set_has_normgroup_uid();
  if (normgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normgroup_uid_ = new ::std::string;
  }
  normgroup_uid_->assign(value);
}
inline void RT_TPS_GridSize::set_normgroup_uid(const char* value) {
  set_has_normgroup_uid();
  if (normgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normgroup_uid_ = new ::std::string;
  }
  normgroup_uid_->assign(value);
}
inline void RT_TPS_GridSize::set_normgroup_uid(const char* value, size_t size) {
  set_has_normgroup_uid();
  if (normgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normgroup_uid_ = new ::std::string;
  }
  normgroup_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_GridSize::mutable_normgroup_uid() {
  set_has_normgroup_uid();
  if (normgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normgroup_uid_ = new ::std::string;
  }
  return normgroup_uid_;
}
inline ::std::string* RT_TPS_GridSize::release_normgroup_uid() {
  clear_has_normgroup_uid();
  if (normgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normgroup_uid_;
    normgroup_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float startX = 7;
inline bool RT_TPS_GridSize::has_startx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_GridSize::set_has_startx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_GridSize::clear_has_startx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_GridSize::clear_startx() {
  startx_ = 0;
  clear_has_startx();
}
inline float RT_TPS_GridSize::startx() const {
  return startx_;
}
inline void RT_TPS_GridSize::set_startx(float value) {
  set_has_startx();
  startx_ = value;
}

// optional float startY = 8;
inline bool RT_TPS_GridSize::has_starty() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_GridSize::set_has_starty() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_GridSize::clear_has_starty() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_GridSize::clear_starty() {
  starty_ = 0;
  clear_has_starty();
}
inline float RT_TPS_GridSize::starty() const {
  return starty_;
}
inline void RT_TPS_GridSize::set_starty(float value) {
  set_has_starty();
  starty_ = value;
}

// optional float startZ = 9;
inline bool RT_TPS_GridSize::has_startz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_GridSize::set_has_startz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_GridSize::clear_has_startz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_GridSize::clear_startz() {
  startz_ = 0;
  clear_has_startz();
}
inline float RT_TPS_GridSize::startz() const {
  return startz_;
}
inline void RT_TPS_GridSize::set_startz(float value) {
  set_has_startz();
  startz_ = value;
}

// optional float sizeX = 10;
inline bool RT_TPS_GridSize::has_sizex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_GridSize::set_has_sizex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_GridSize::clear_has_sizex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_GridSize::clear_sizex() {
  sizex_ = 0;
  clear_has_sizex();
}
inline float RT_TPS_GridSize::sizex() const {
  return sizex_;
}
inline void RT_TPS_GridSize::set_sizex(float value) {
  set_has_sizex();
  sizex_ = value;
}

// optional float sizeY = 11;
inline bool RT_TPS_GridSize::has_sizey() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_GridSize::set_has_sizey() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_GridSize::clear_has_sizey() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_GridSize::clear_sizey() {
  sizey_ = 0;
  clear_has_sizey();
}
inline float RT_TPS_GridSize::sizey() const {
  return sizey_;
}
inline void RT_TPS_GridSize::set_sizey(float value) {
  set_has_sizey();
  sizey_ = value;
}

// optional float sizeZ = 12;
inline bool RT_TPS_GridSize::has_sizez() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_TPS_GridSize::set_has_sizez() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_TPS_GridSize::clear_has_sizez() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_TPS_GridSize::clear_sizez() {
  sizez_ = 0;
  clear_has_sizez();
}
inline float RT_TPS_GridSize::sizez() const {
  return sizez_;
}
inline void RT_TPS_GridSize::set_sizez(float value) {
  set_has_sizez();
  sizez_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fgridsize_2eproto__INCLUDED
