// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_bolus.proto

#ifndef PROTOBUF_rt_5ftps_5fbolus_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fbolus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fbolus_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fbolus_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fbolus_2eproto();

class RtTpsBolus;

// ===================================================================

class RtTpsBolus : public ::google::protobuf::Message {
 public:
  RtTpsBolus();
  virtual ~RtTpsBolus();
  
  RtTpsBolus(const RtTpsBolus& from);
  
  inline RtTpsBolus& operator=(const RtTpsBolus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsBolus& default_instance();
  
  void Swap(RtTpsBolus* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsBolus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsBolus& from);
  void MergeFrom(const RtTpsBolus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string bolusuid = 1;
  inline bool has_bolusuid() const;
  inline void clear_bolusuid();
  static const int kBolusuidFieldNumber = 1;
  inline const ::std::string& bolusuid() const;
  inline void set_bolusuid(const ::std::string& value);
  inline void set_bolusuid(const char* value);
  inline void set_bolusuid(const char* value, size_t size);
  inline ::std::string* mutable_bolusuid();
  inline ::std::string* release_bolusuid();
  
  // required string seriesuid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesuidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required string bolusname = 3;
  inline bool has_bolusname() const;
  inline void clear_bolusname();
  static const int kBolusnameFieldNumber = 3;
  inline const ::std::string& bolusname() const;
  inline void set_bolusname(const ::std::string& value);
  inline void set_bolusname(const char* value);
  inline void set_bolusname(const char* value, size_t size);
  inline ::std::string* mutable_bolusname();
  inline ::std::string* release_bolusname();
  
  // optional int32 planningrole = 4;
  inline bool has_planningrole() const;
  inline void clear_planningrole();
  static const int kPlanningroleFieldNumber = 4;
  inline ::google::protobuf::int32 planningrole() const;
  inline void set_planningrole(::google::protobuf::int32 value);
  
  // optional string beam_uid = 5;
  inline bool has_beam_uid() const;
  inline void clear_beam_uid();
  static const int kBeamUidFieldNumber = 5;
  inline const ::std::string& beam_uid() const;
  inline void set_beam_uid(const ::std::string& value);
  inline void set_beam_uid(const char* value);
  inline void set_beam_uid(const char* value, size_t size);
  inline ::std::string* mutable_beam_uid();
  inline ::std::string* release_beam_uid();
  
  // optional float bolus_thickness = 6;
  inline bool has_bolus_thickness() const;
  inline void clear_bolus_thickness();
  static const int kBolusThicknessFieldNumber = 6;
  inline float bolus_thickness() const;
  inline void set_bolus_thickness(float value);
  
  // optional float mass_density = 7;
  inline bool has_mass_density() const;
  inline void clear_mass_density();
  static const int kMassDensityFieldNumber = 7;
  inline float mass_density() const;
  inline void set_mass_density(float value);
  
  // optional float reference_electron_density = 8;
  inline bool has_reference_electron_density() const;
  inline void clear_reference_electron_density();
  static const int kReferenceElectronDensityFieldNumber = 8;
  inline float reference_electron_density() const;
  inline void set_reference_electron_density(float value);
  
  // optional bool margin_uniformed = 9;
  inline bool has_margin_uniformed() const;
  inline void clear_margin_uniformed();
  static const int kMarginUniformedFieldNumber = 9;
  inline bool margin_uniformed() const;
  inline void set_margin_uniformed(bool value);
  
  // optional float margin_x1 = 10;
  inline bool has_margin_x1() const;
  inline void clear_margin_x1();
  static const int kMarginX1FieldNumber = 10;
  inline float margin_x1() const;
  inline void set_margin_x1(float value);
  
  // optional float margin_x2 = 11;
  inline bool has_margin_x2() const;
  inline void clear_margin_x2();
  static const int kMarginX2FieldNumber = 11;
  inline float margin_x2() const;
  inline void set_margin_x2(float value);
  
  // optional float margin_y1 = 12;
  inline bool has_margin_y1() const;
  inline void clear_margin_y1();
  static const int kMarginY1FieldNumber = 12;
  inline float margin_y1() const;
  inline void set_margin_y1(float value);
  
  // optional float margin_y2 = 13;
  inline bool has_margin_y2() const;
  inline void clear_margin_y2();
  static const int kMarginY2FieldNumber = 13;
  inline float margin_y2() const;
  inline void set_margin_y2(float value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsBolus)
 private:
  inline void set_has_bolusuid();
  inline void clear_has_bolusuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_bolusname();
  inline void clear_has_bolusname();
  inline void set_has_planningrole();
  inline void clear_has_planningrole();
  inline void set_has_beam_uid();
  inline void clear_has_beam_uid();
  inline void set_has_bolus_thickness();
  inline void clear_has_bolus_thickness();
  inline void set_has_mass_density();
  inline void clear_has_mass_density();
  inline void set_has_reference_electron_density();
  inline void clear_has_reference_electron_density();
  inline void set_has_margin_uniformed();
  inline void clear_has_margin_uniformed();
  inline void set_has_margin_x1();
  inline void clear_has_margin_x1();
  inline void set_has_margin_x2();
  inline void clear_has_margin_x2();
  inline void set_has_margin_y1();
  inline void clear_has_margin_y1();
  inline void set_has_margin_y2();
  inline void clear_has_margin_y2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* bolusuid_;
  ::std::string* seriesuid_;
  ::std::string* bolusname_;
  ::std::string* beam_uid_;
  ::google::protobuf::int32 planningrole_;
  float bolus_thickness_;
  float mass_density_;
  float reference_electron_density_;
  bool margin_uniformed_;
  float margin_x1_;
  float margin_x2_;
  float margin_y1_;
  float margin_y2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fbolus_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fbolus_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fbolus_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsBolus* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsBolus

// required string bolusuid = 1;
inline bool RtTpsBolus::has_bolusuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsBolus::set_has_bolusuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsBolus::clear_has_bolusuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsBolus::clear_bolusuid() {
  if (bolusuid_ != &::google::protobuf::internal::kEmptyString) {
    bolusuid_->clear();
  }
  clear_has_bolusuid();
}
inline const ::std::string& RtTpsBolus::bolusuid() const {
  return *bolusuid_;
}
inline void RtTpsBolus::set_bolusuid(const ::std::string& value) {
  set_has_bolusuid();
  if (bolusuid_ == &::google::protobuf::internal::kEmptyString) {
    bolusuid_ = new ::std::string;
  }
  bolusuid_->assign(value);
}
inline void RtTpsBolus::set_bolusuid(const char* value) {
  set_has_bolusuid();
  if (bolusuid_ == &::google::protobuf::internal::kEmptyString) {
    bolusuid_ = new ::std::string;
  }
  bolusuid_->assign(value);
}
inline void RtTpsBolus::set_bolusuid(const char* value, size_t size) {
  set_has_bolusuid();
  if (bolusuid_ == &::google::protobuf::internal::kEmptyString) {
    bolusuid_ = new ::std::string;
  }
  bolusuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsBolus::mutable_bolusuid() {
  set_has_bolusuid();
  if (bolusuid_ == &::google::protobuf::internal::kEmptyString) {
    bolusuid_ = new ::std::string;
  }
  return bolusuid_;
}
inline ::std::string* RtTpsBolus::release_bolusuid() {
  clear_has_bolusuid();
  if (bolusuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bolusuid_;
    bolusuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesuid = 2;
inline bool RtTpsBolus::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsBolus::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsBolus::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsBolus::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RtTpsBolus::seriesuid() const {
  return *seriesuid_;
}
inline void RtTpsBolus::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsBolus::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsBolus::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsBolus::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RtTpsBolus::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string bolusname = 3;
inline bool RtTpsBolus::has_bolusname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsBolus::set_has_bolusname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsBolus::clear_has_bolusname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsBolus::clear_bolusname() {
  if (bolusname_ != &::google::protobuf::internal::kEmptyString) {
    bolusname_->clear();
  }
  clear_has_bolusname();
}
inline const ::std::string& RtTpsBolus::bolusname() const {
  return *bolusname_;
}
inline void RtTpsBolus::set_bolusname(const ::std::string& value) {
  set_has_bolusname();
  if (bolusname_ == &::google::protobuf::internal::kEmptyString) {
    bolusname_ = new ::std::string;
  }
  bolusname_->assign(value);
}
inline void RtTpsBolus::set_bolusname(const char* value) {
  set_has_bolusname();
  if (bolusname_ == &::google::protobuf::internal::kEmptyString) {
    bolusname_ = new ::std::string;
  }
  bolusname_->assign(value);
}
inline void RtTpsBolus::set_bolusname(const char* value, size_t size) {
  set_has_bolusname();
  if (bolusname_ == &::google::protobuf::internal::kEmptyString) {
    bolusname_ = new ::std::string;
  }
  bolusname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsBolus::mutable_bolusname() {
  set_has_bolusname();
  if (bolusname_ == &::google::protobuf::internal::kEmptyString) {
    bolusname_ = new ::std::string;
  }
  return bolusname_;
}
inline ::std::string* RtTpsBolus::release_bolusname() {
  clear_has_bolusname();
  if (bolusname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bolusname_;
    bolusname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 planningrole = 4;
inline bool RtTpsBolus::has_planningrole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsBolus::set_has_planningrole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsBolus::clear_has_planningrole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsBolus::clear_planningrole() {
  planningrole_ = 0;
  clear_has_planningrole();
}
inline ::google::protobuf::int32 RtTpsBolus::planningrole() const {
  return planningrole_;
}
inline void RtTpsBolus::set_planningrole(::google::protobuf::int32 value) {
  set_has_planningrole();
  planningrole_ = value;
}

// optional string beam_uid = 5;
inline bool RtTpsBolus::has_beam_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsBolus::set_has_beam_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsBolus::clear_has_beam_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsBolus::clear_beam_uid() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    beam_uid_->clear();
  }
  clear_has_beam_uid();
}
inline const ::std::string& RtTpsBolus::beam_uid() const {
  return *beam_uid_;
}
inline void RtTpsBolus::set_beam_uid(const ::std::string& value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsBolus::set_beam_uid(const char* value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsBolus::set_beam_uid(const char* value, size_t size) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsBolus::mutable_beam_uid() {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  return beam_uid_;
}
inline ::std::string* RtTpsBolus::release_beam_uid() {
  clear_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_uid_;
    beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float bolus_thickness = 6;
inline bool RtTpsBolus::has_bolus_thickness() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsBolus::set_has_bolus_thickness() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsBolus::clear_has_bolus_thickness() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsBolus::clear_bolus_thickness() {
  bolus_thickness_ = 0;
  clear_has_bolus_thickness();
}
inline float RtTpsBolus::bolus_thickness() const {
  return bolus_thickness_;
}
inline void RtTpsBolus::set_bolus_thickness(float value) {
  set_has_bolus_thickness();
  bolus_thickness_ = value;
}

// optional float mass_density = 7;
inline bool RtTpsBolus::has_mass_density() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsBolus::set_has_mass_density() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsBolus::clear_has_mass_density() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsBolus::clear_mass_density() {
  mass_density_ = 0;
  clear_has_mass_density();
}
inline float RtTpsBolus::mass_density() const {
  return mass_density_;
}
inline void RtTpsBolus::set_mass_density(float value) {
  set_has_mass_density();
  mass_density_ = value;
}

// optional float reference_electron_density = 8;
inline bool RtTpsBolus::has_reference_electron_density() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsBolus::set_has_reference_electron_density() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsBolus::clear_has_reference_electron_density() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsBolus::clear_reference_electron_density() {
  reference_electron_density_ = 0;
  clear_has_reference_electron_density();
}
inline float RtTpsBolus::reference_electron_density() const {
  return reference_electron_density_;
}
inline void RtTpsBolus::set_reference_electron_density(float value) {
  set_has_reference_electron_density();
  reference_electron_density_ = value;
}

// optional bool margin_uniformed = 9;
inline bool RtTpsBolus::has_margin_uniformed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsBolus::set_has_margin_uniformed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsBolus::clear_has_margin_uniformed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsBolus::clear_margin_uniformed() {
  margin_uniformed_ = false;
  clear_has_margin_uniformed();
}
inline bool RtTpsBolus::margin_uniformed() const {
  return margin_uniformed_;
}
inline void RtTpsBolus::set_margin_uniformed(bool value) {
  set_has_margin_uniformed();
  margin_uniformed_ = value;
}

// optional float margin_x1 = 10;
inline bool RtTpsBolus::has_margin_x1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsBolus::set_has_margin_x1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsBolus::clear_has_margin_x1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsBolus::clear_margin_x1() {
  margin_x1_ = 0;
  clear_has_margin_x1();
}
inline float RtTpsBolus::margin_x1() const {
  return margin_x1_;
}
inline void RtTpsBolus::set_margin_x1(float value) {
  set_has_margin_x1();
  margin_x1_ = value;
}

// optional float margin_x2 = 11;
inline bool RtTpsBolus::has_margin_x2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsBolus::set_has_margin_x2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsBolus::clear_has_margin_x2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsBolus::clear_margin_x2() {
  margin_x2_ = 0;
  clear_has_margin_x2();
}
inline float RtTpsBolus::margin_x2() const {
  return margin_x2_;
}
inline void RtTpsBolus::set_margin_x2(float value) {
  set_has_margin_x2();
  margin_x2_ = value;
}

// optional float margin_y1 = 12;
inline bool RtTpsBolus::has_margin_y1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsBolus::set_has_margin_y1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsBolus::clear_has_margin_y1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsBolus::clear_margin_y1() {
  margin_y1_ = 0;
  clear_has_margin_y1();
}
inline float RtTpsBolus::margin_y1() const {
  return margin_y1_;
}
inline void RtTpsBolus::set_margin_y1(float value) {
  set_has_margin_y1();
  margin_y1_ = value;
}

// optional float margin_y2 = 13;
inline bool RtTpsBolus::has_margin_y2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsBolus::set_has_margin_y2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsBolus::clear_has_margin_y2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsBolus::clear_margin_y2() {
  margin_y2_ = 0;
  clear_has_margin_y2();
}
inline float RtTpsBolus::margin_y2() const {
  return margin_y2_;
}
inline void RtTpsBolus::set_margin_y2(float value) {
  set_has_margin_y2();
  margin_y2_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fbolus_2eproto__INCLUDED
