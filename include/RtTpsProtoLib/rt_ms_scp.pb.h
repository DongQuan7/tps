// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_scp.proto

#ifndef PROTOBUF_rt_5ftps_5fscp_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fscp_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fscp_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fscp_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fscp_2eproto();

class RT_MS_SCPInfoList;
class RT_MS_SCPInfo;

// ===================================================================

class RT_MS_SCPInfoList : public ::google::protobuf::Message {
 public:
  RT_MS_SCPInfoList();
  virtual ~RT_MS_SCPInfoList();
  
  RT_MS_SCPInfoList(const RT_MS_SCPInfoList& from);
  
  inline RT_MS_SCPInfoList& operator=(const RT_MS_SCPInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_SCPInfoList& default_instance();
  
  void Swap(RT_MS_SCPInfoList* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_SCPInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_SCPInfoList& from);
  void MergeFrom(const RT_MS_SCPInfoList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
  inline int scpinfo_size() const;
  inline void clear_scpinfo();
  static const int kScpInfoFieldNumber = 2;
  inline const ::ms::proto::RT_MS_SCPInfo& scpinfo(int index) const;
  inline ::ms::proto::RT_MS_SCPInfo* mutable_scpinfo(int index);
  inline ::ms::proto::RT_MS_SCPInfo* add_scpinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_SCPInfo >&
      scpinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_SCPInfo >*
      mutable_scpinfo();
  
  // optional float scpdepth = 3;
  inline bool has_scpdepth() const;
  inline void clear_scpdepth();
  static const int kScpdepthFieldNumber = 3;
  inline float scpdepth() const;
  inline void set_scpdepth(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_SCPInfoList)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_scpdepth();
  inline void clear_has_scpdepth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_SCPInfo > scpinfo_;
  float scpdepth_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fscp_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fscp_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fscp_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_SCPInfoList* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_SCPInfo : public ::google::protobuf::Message {
 public:
  RT_MS_SCPInfo();
  virtual ~RT_MS_SCPInfo();
  
  RT_MS_SCPInfo(const RT_MS_SCPInfo& from);
  
  inline RT_MS_SCPInfo& operator=(const RT_MS_SCPInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_SCPInfo& default_instance();
  
  void Swap(RT_MS_SCPInfo* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_SCPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_SCPInfo& from);
  void MergeFrom(const RT_MS_SCPInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // optional string parentuid = 2;
  inline bool has_parentuid() const;
  inline void clear_parentuid();
  static const int kParentuidFieldNumber = 2;
  inline const ::std::string& parentuid() const;
  inline void set_parentuid(const ::std::string& value);
  inline void set_parentuid(const char* value);
  inline void set_parentuid(const char* value, size_t size);
  inline ::std::string* mutable_parentuid();
  inline ::std::string* release_parentuid();
  
  // optional float fieldSizeX = 3;
  inline bool has_fieldsizex() const;
  inline void clear_fieldsizex();
  static const int kFieldSizeXFieldNumber = 3;
  inline float fieldsizex() const;
  inline void set_fieldsizex(float value);
  
  // optional float fieldSizeY = 4;
  inline bool has_fieldsizey() const;
  inline void clear_fieldsizey();
  static const int kFieldSizeYFieldNumber = 4;
  inline float fieldsizey() const;
  inline void set_fieldsizey(float value);
  
  // optional float scp = 5;
  inline bool has_scp() const;
  inline void clear_scp();
  static const int kScpFieldNumber = 5;
  inline float scp() const;
  inline void set_scp(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_SCPInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_parentuid();
  inline void clear_has_parentuid();
  inline void set_has_fieldsizex();
  inline void clear_has_fieldsizex();
  inline void set_has_fieldsizey();
  inline void clear_has_fieldsizey();
  inline void set_has_scp();
  inline void clear_has_scp();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* parentuid_;
  float fieldsizex_;
  float fieldsizey_;
  float scp_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fscp_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fscp_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fscp_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_SCPInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_SCPInfoList

// optional string uid = 1;
inline bool RT_MS_SCPInfoList::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_SCPInfoList::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_SCPInfoList::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_SCPInfoList::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RT_MS_SCPInfoList::uid() const {
  return *uid_;
}
inline void RT_MS_SCPInfoList::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_SCPInfoList::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_SCPInfoList::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_SCPInfoList::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RT_MS_SCPInfoList::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ms.proto.RT_MS_SCPInfo scpInfo = 2;
inline int RT_MS_SCPInfoList::scpinfo_size() const {
  return scpinfo_.size();
}
inline void RT_MS_SCPInfoList::clear_scpinfo() {
  scpinfo_.Clear();
}
inline const ::ms::proto::RT_MS_SCPInfo& RT_MS_SCPInfoList::scpinfo(int index) const {
  return scpinfo_.Get(index);
}
inline ::ms::proto::RT_MS_SCPInfo* RT_MS_SCPInfoList::mutable_scpinfo(int index) {
  return scpinfo_.Mutable(index);
}
inline ::ms::proto::RT_MS_SCPInfo* RT_MS_SCPInfoList::add_scpinfo() {
  return scpinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_SCPInfo >&
RT_MS_SCPInfoList::scpinfo() const {
  return scpinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_SCPInfo >*
RT_MS_SCPInfoList::mutable_scpinfo() {
  return &scpinfo_;
}

// optional float scpdepth = 3;
inline bool RT_MS_SCPInfoList::has_scpdepth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_SCPInfoList::set_has_scpdepth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_SCPInfoList::clear_has_scpdepth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_SCPInfoList::clear_scpdepth() {
  scpdepth_ = 0;
  clear_has_scpdepth();
}
inline float RT_MS_SCPInfoList::scpdepth() const {
  return scpdepth_;
}
inline void RT_MS_SCPInfoList::set_scpdepth(float value) {
  set_has_scpdepth();
  scpdepth_ = value;
}

// -------------------------------------------------------------------

// RT_MS_SCPInfo

// optional string uid = 1;
inline bool RT_MS_SCPInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_SCPInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_SCPInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_SCPInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RT_MS_SCPInfo::uid() const {
  return *uid_;
}
inline void RT_MS_SCPInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_SCPInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_SCPInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_SCPInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RT_MS_SCPInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string parentuid = 2;
inline bool RT_MS_SCPInfo::has_parentuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_SCPInfo::set_has_parentuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_SCPInfo::clear_has_parentuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_SCPInfo::clear_parentuid() {
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    parentuid_->clear();
  }
  clear_has_parentuid();
}
inline const ::std::string& RT_MS_SCPInfo::parentuid() const {
  return *parentuid_;
}
inline void RT_MS_SCPInfo::set_parentuid(const ::std::string& value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_MS_SCPInfo::set_parentuid(const char* value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_MS_SCPInfo::set_parentuid(const char* value, size_t size) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_SCPInfo::mutable_parentuid() {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  return parentuid_;
}
inline ::std::string* RT_MS_SCPInfo::release_parentuid() {
  clear_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentuid_;
    parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float fieldSizeX = 3;
inline bool RT_MS_SCPInfo::has_fieldsizex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_SCPInfo::set_has_fieldsizex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_SCPInfo::clear_has_fieldsizex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_SCPInfo::clear_fieldsizex() {
  fieldsizex_ = 0;
  clear_has_fieldsizex();
}
inline float RT_MS_SCPInfo::fieldsizex() const {
  return fieldsizex_;
}
inline void RT_MS_SCPInfo::set_fieldsizex(float value) {
  set_has_fieldsizex();
  fieldsizex_ = value;
}

// optional float fieldSizeY = 4;
inline bool RT_MS_SCPInfo::has_fieldsizey() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_SCPInfo::set_has_fieldsizey() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_SCPInfo::clear_has_fieldsizey() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_SCPInfo::clear_fieldsizey() {
  fieldsizey_ = 0;
  clear_has_fieldsizey();
}
inline float RT_MS_SCPInfo::fieldsizey() const {
  return fieldsizey_;
}
inline void RT_MS_SCPInfo::set_fieldsizey(float value) {
  set_has_fieldsizey();
  fieldsizey_ = value;
}

// optional float scp = 5;
inline bool RT_MS_SCPInfo::has_scp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_SCPInfo::set_has_scp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_SCPInfo::clear_has_scp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_SCPInfo::clear_scp() {
  scp_ = 0;
  clear_has_scp();
}
inline float RT_MS_SCPInfo::scp() const {
  return scp_;
}
inline void RT_MS_SCPInfo::set_scp(float value) {
  set_has_scp();
  scp_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fscp_2eproto__INCLUDED
