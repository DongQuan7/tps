// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_constraint.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fconstraint_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fconstraint_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fconstraint_2eproto();

class RtTpsProtoConstraint;
class RtTpsProtoRepeatedConstraint;

// ===================================================================

class RtTpsProtoConstraint : public ::google::protobuf::Message {
 public:
  RtTpsProtoConstraint();
  virtual ~RtTpsProtoConstraint();
  
  RtTpsProtoConstraint(const RtTpsProtoConstraint& from);
  
  inline RtTpsProtoConstraint& operator=(const RtTpsProtoConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoConstraint& default_instance();
  
  void Swap(RtTpsProtoConstraint* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoConstraint& from);
  void MergeFrom(const RtTpsProtoConstraint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string constraintUID = 1;
  inline bool has_constraintuid() const;
  inline void clear_constraintuid();
  static const int kConstraintUIDFieldNumber = 1;
  inline const ::std::string& constraintuid() const;
  inline void set_constraintuid(const ::std::string& value);
  inline void set_constraintuid(const char* value);
  inline void set_constraintuid(const char* value, size_t size);
  inline ::std::string* mutable_constraintuid();
  inline ::std::string* release_constraintuid();
  
  // optional string constraintName = 2;
  inline bool has_constraintname() const;
  inline void clear_constraintname();
  static const int kConstraintNameFieldNumber = 2;
  inline const ::std::string& constraintname() const;
  inline void set_constraintname(const ::std::string& value);
  inline void set_constraintname(const char* value);
  inline void set_constraintname(const char* value, size_t size);
  inline ::std::string* mutable_constraintname();
  inline ::std::string* release_constraintname();
  
  // optional int32 doseType = 3;
  inline bool has_dosetype() const;
  inline void clear_dosetype();
  static const int kDoseTypeFieldNumber = 3;
  inline ::google::protobuf::int32 dosetype() const;
  inline void set_dosetype(::google::protobuf::int32 value);
  
  // optional float dose = 4;
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 4;
  inline float dose() const;
  inline void set_dose(float value);
  
  // optional float doseVolume = 5;
  inline bool has_dosevolume() const;
  inline void clear_dosevolume();
  static const int kDoseVolumeFieldNumber = 5;
  inline float dosevolume() const;
  inline void set_dosevolume(float value);
  
  // optional string comments = 6;
  inline bool has_comments() const;
  inline void clear_comments();
  static const int kCommentsFieldNumber = 6;
  inline const ::std::string& comments() const;
  inline void set_comments(const ::std::string& value);
  inline void set_comments(const char* value);
  inline void set_comments(const char* value, size_t size);
  inline ::std::string* mutable_comments();
  inline ::std::string* release_comments();
  
  // optional bool isAchieved = 7;
  inline bool has_isachieved() const;
  inline void clear_isachieved();
  static const int kIsAchievedFieldNumber = 7;
  inline bool isachieved() const;
  inline void set_isachieved(bool value);
  
  // optional int32 ConstraintPlanningRole = 8;
  inline bool has_constraintplanningrole() const;
  inline void clear_constraintplanningrole();
  static const int kConstraintPlanningRoleFieldNumber = 8;
  inline ::google::protobuf::int32 constraintplanningrole() const;
  inline void set_constraintplanningrole(::google::protobuf::int32 value);
  
  // optional int32 ConstraintBiologicalRole = 9;
  inline bool has_constraintbiologicalrole() const;
  inline void clear_constraintbiologicalrole();
  static const int kConstraintBiologicalRoleFieldNumber = 9;
  inline ::google::protobuf::int32 constraintbiologicalrole() const;
  inline void set_constraintbiologicalrole(::google::protobuf::int32 value);
  
  // optional int32 Tendency = 10;
  inline bool has_tendency() const;
  inline void clear_tendency();
  static const int kTendencyFieldNumber = 10;
  inline ::google::protobuf::int32 tendency() const;
  inline void set_tendency(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoConstraint)
 private:
  inline void set_has_constraintuid();
  inline void clear_has_constraintuid();
  inline void set_has_constraintname();
  inline void clear_has_constraintname();
  inline void set_has_dosetype();
  inline void clear_has_dosetype();
  inline void set_has_dose();
  inline void clear_has_dose();
  inline void set_has_dosevolume();
  inline void clear_has_dosevolume();
  inline void set_has_comments();
  inline void clear_has_comments();
  inline void set_has_isachieved();
  inline void clear_has_isachieved();
  inline void set_has_constraintplanningrole();
  inline void clear_has_constraintplanningrole();
  inline void set_has_constraintbiologicalrole();
  inline void clear_has_constraintbiologicalrole();
  inline void set_has_tendency();
  inline void clear_has_tendency();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* constraintuid_;
  ::std::string* constraintname_;
  ::google::protobuf::int32 dosetype_;
  float dose_;
  ::std::string* comments_;
  float dosevolume_;
  bool isachieved_;
  ::google::protobuf::int32 constraintplanningrole_;
  ::google::protobuf::int32 constraintbiologicalrole_;
  ::google::protobuf::int32 tendency_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fconstraint_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoConstraint* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedConstraint : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedConstraint();
  virtual ~RtTpsProtoRepeatedConstraint();
  
  RtTpsProtoRepeatedConstraint(const RtTpsProtoRepeatedConstraint& from);
  
  inline RtTpsProtoRepeatedConstraint& operator=(const RtTpsProtoRepeatedConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedConstraint& default_instance();
  
  void Swap(RtTpsProtoRepeatedConstraint* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedConstraint& from);
  void MergeFrom(const RtTpsProtoRepeatedConstraint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoConstraint constraintList = 1;
  inline int constraintlist_size() const;
  inline void clear_constraintlist();
  static const int kConstraintListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoConstraint& constraintlist(int index) const;
  inline ::tps::proto::RtTpsProtoConstraint* mutable_constraintlist(int index);
  inline ::tps::proto::RtTpsProtoConstraint* add_constraintlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >&
      constraintlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >*
      mutable_constraintlist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedConstraint)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint > constraintlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fconstraint_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fconstraint_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedConstraint* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoConstraint

// required string constraintUID = 1;
inline bool RtTpsProtoConstraint::has_constraintuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoConstraint::set_has_constraintuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoConstraint::clear_has_constraintuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoConstraint::clear_constraintuid() {
  if (constraintuid_ != &::google::protobuf::internal::kEmptyString) {
    constraintuid_->clear();
  }
  clear_has_constraintuid();
}
inline const ::std::string& RtTpsProtoConstraint::constraintuid() const {
  return *constraintuid_;
}
inline void RtTpsProtoConstraint::set_constraintuid(const ::std::string& value) {
  set_has_constraintuid();
  if (constraintuid_ == &::google::protobuf::internal::kEmptyString) {
    constraintuid_ = new ::std::string;
  }
  constraintuid_->assign(value);
}
inline void RtTpsProtoConstraint::set_constraintuid(const char* value) {
  set_has_constraintuid();
  if (constraintuid_ == &::google::protobuf::internal::kEmptyString) {
    constraintuid_ = new ::std::string;
  }
  constraintuid_->assign(value);
}
inline void RtTpsProtoConstraint::set_constraintuid(const char* value, size_t size) {
  set_has_constraintuid();
  if (constraintuid_ == &::google::protobuf::internal::kEmptyString) {
    constraintuid_ = new ::std::string;
  }
  constraintuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoConstraint::mutable_constraintuid() {
  set_has_constraintuid();
  if (constraintuid_ == &::google::protobuf::internal::kEmptyString) {
    constraintuid_ = new ::std::string;
  }
  return constraintuid_;
}
inline ::std::string* RtTpsProtoConstraint::release_constraintuid() {
  clear_has_constraintuid();
  if (constraintuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = constraintuid_;
    constraintuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string constraintName = 2;
inline bool RtTpsProtoConstraint::has_constraintname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoConstraint::set_has_constraintname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoConstraint::clear_has_constraintname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoConstraint::clear_constraintname() {
  if (constraintname_ != &::google::protobuf::internal::kEmptyString) {
    constraintname_->clear();
  }
  clear_has_constraintname();
}
inline const ::std::string& RtTpsProtoConstraint::constraintname() const {
  return *constraintname_;
}
inline void RtTpsProtoConstraint::set_constraintname(const ::std::string& value) {
  set_has_constraintname();
  if (constraintname_ == &::google::protobuf::internal::kEmptyString) {
    constraintname_ = new ::std::string;
  }
  constraintname_->assign(value);
}
inline void RtTpsProtoConstraint::set_constraintname(const char* value) {
  set_has_constraintname();
  if (constraintname_ == &::google::protobuf::internal::kEmptyString) {
    constraintname_ = new ::std::string;
  }
  constraintname_->assign(value);
}
inline void RtTpsProtoConstraint::set_constraintname(const char* value, size_t size) {
  set_has_constraintname();
  if (constraintname_ == &::google::protobuf::internal::kEmptyString) {
    constraintname_ = new ::std::string;
  }
  constraintname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoConstraint::mutable_constraintname() {
  set_has_constraintname();
  if (constraintname_ == &::google::protobuf::internal::kEmptyString) {
    constraintname_ = new ::std::string;
  }
  return constraintname_;
}
inline ::std::string* RtTpsProtoConstraint::release_constraintname() {
  clear_has_constraintname();
  if (constraintname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = constraintname_;
    constraintname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 doseType = 3;
inline bool RtTpsProtoConstraint::has_dosetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoConstraint::set_has_dosetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoConstraint::clear_has_dosetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoConstraint::clear_dosetype() {
  dosetype_ = 0;
  clear_has_dosetype();
}
inline ::google::protobuf::int32 RtTpsProtoConstraint::dosetype() const {
  return dosetype_;
}
inline void RtTpsProtoConstraint::set_dosetype(::google::protobuf::int32 value) {
  set_has_dosetype();
  dosetype_ = value;
}

// optional float dose = 4;
inline bool RtTpsProtoConstraint::has_dose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoConstraint::set_has_dose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoConstraint::clear_has_dose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoConstraint::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline float RtTpsProtoConstraint::dose() const {
  return dose_;
}
inline void RtTpsProtoConstraint::set_dose(float value) {
  set_has_dose();
  dose_ = value;
}

// optional float doseVolume = 5;
inline bool RtTpsProtoConstraint::has_dosevolume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoConstraint::set_has_dosevolume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoConstraint::clear_has_dosevolume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoConstraint::clear_dosevolume() {
  dosevolume_ = 0;
  clear_has_dosevolume();
}
inline float RtTpsProtoConstraint::dosevolume() const {
  return dosevolume_;
}
inline void RtTpsProtoConstraint::set_dosevolume(float value) {
  set_has_dosevolume();
  dosevolume_ = value;
}

// optional string comments = 6;
inline bool RtTpsProtoConstraint::has_comments() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoConstraint::set_has_comments() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoConstraint::clear_has_comments() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoConstraint::clear_comments() {
  if (comments_ != &::google::protobuf::internal::kEmptyString) {
    comments_->clear();
  }
  clear_has_comments();
}
inline const ::std::string& RtTpsProtoConstraint::comments() const {
  return *comments_;
}
inline void RtTpsProtoConstraint::set_comments(const ::std::string& value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void RtTpsProtoConstraint::set_comments(const char* value) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(value);
}
inline void RtTpsProtoConstraint::set_comments(const char* value, size_t size) {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  comments_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoConstraint::mutable_comments() {
  set_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    comments_ = new ::std::string;
  }
  return comments_;
}
inline ::std::string* RtTpsProtoConstraint::release_comments() {
  clear_has_comments();
  if (comments_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = comments_;
    comments_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isAchieved = 7;
inline bool RtTpsProtoConstraint::has_isachieved() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoConstraint::set_has_isachieved() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoConstraint::clear_has_isachieved() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoConstraint::clear_isachieved() {
  isachieved_ = false;
  clear_has_isachieved();
}
inline bool RtTpsProtoConstraint::isachieved() const {
  return isachieved_;
}
inline void RtTpsProtoConstraint::set_isachieved(bool value) {
  set_has_isachieved();
  isachieved_ = value;
}

// optional int32 ConstraintPlanningRole = 8;
inline bool RtTpsProtoConstraint::has_constraintplanningrole() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoConstraint::set_has_constraintplanningrole() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoConstraint::clear_has_constraintplanningrole() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoConstraint::clear_constraintplanningrole() {
  constraintplanningrole_ = 0;
  clear_has_constraintplanningrole();
}
inline ::google::protobuf::int32 RtTpsProtoConstraint::constraintplanningrole() const {
  return constraintplanningrole_;
}
inline void RtTpsProtoConstraint::set_constraintplanningrole(::google::protobuf::int32 value) {
  set_has_constraintplanningrole();
  constraintplanningrole_ = value;
}

// optional int32 ConstraintBiologicalRole = 9;
inline bool RtTpsProtoConstraint::has_constraintbiologicalrole() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoConstraint::set_has_constraintbiologicalrole() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoConstraint::clear_has_constraintbiologicalrole() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoConstraint::clear_constraintbiologicalrole() {
  constraintbiologicalrole_ = 0;
  clear_has_constraintbiologicalrole();
}
inline ::google::protobuf::int32 RtTpsProtoConstraint::constraintbiologicalrole() const {
  return constraintbiologicalrole_;
}
inline void RtTpsProtoConstraint::set_constraintbiologicalrole(::google::protobuf::int32 value) {
  set_has_constraintbiologicalrole();
  constraintbiologicalrole_ = value;
}

// optional int32 Tendency = 10;
inline bool RtTpsProtoConstraint::has_tendency() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoConstraint::set_has_tendency() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoConstraint::clear_has_tendency() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoConstraint::clear_tendency() {
  tendency_ = 0;
  clear_has_tendency();
}
inline ::google::protobuf::int32 RtTpsProtoConstraint::tendency() const {
  return tendency_;
}
inline void RtTpsProtoConstraint::set_tendency(::google::protobuf::int32 value) {
  set_has_tendency();
  tendency_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedConstraint

// repeated .tps.proto.RtTpsProtoConstraint constraintList = 1;
inline int RtTpsProtoRepeatedConstraint::constraintlist_size() const {
  return constraintlist_.size();
}
inline void RtTpsProtoRepeatedConstraint::clear_constraintlist() {
  constraintlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoConstraint& RtTpsProtoRepeatedConstraint::constraintlist(int index) const {
  return constraintlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoConstraint* RtTpsProtoRepeatedConstraint::mutable_constraintlist(int index) {
  return constraintlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoConstraint* RtTpsProtoRepeatedConstraint::add_constraintlist() {
  return constraintlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >&
RtTpsProtoRepeatedConstraint::constraintlist() const {
  return constraintlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >*
RtTpsProtoRepeatedConstraint::mutable_constraintlist() {
  return &constraintlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fconstraint_2eproto__INCLUDED
