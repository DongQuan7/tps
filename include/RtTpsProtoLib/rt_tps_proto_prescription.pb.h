// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_prescription.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fprescription_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fprescription_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rt_tps_proto_constraint.pb.h"
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fprescription_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fprescription_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fprescription_2eproto();

class RtTpsProtoPrescription;
class RtTpsProtoRepeatedPrescription;

// ===================================================================

class RtTpsProtoPrescription : public ::google::protobuf::Message {
 public:
  RtTpsProtoPrescription();
  virtual ~RtTpsProtoPrescription();
  
  RtTpsProtoPrescription(const RtTpsProtoPrescription& from);
  
  inline RtTpsProtoPrescription& operator=(const RtTpsProtoPrescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoPrescription& default_instance();
  
  void Swap(RtTpsProtoPrescription* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoPrescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoPrescription& from);
  void MergeFrom(const RtTpsProtoPrescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string prescriptionUID = 1;
  inline bool has_prescriptionuid() const;
  inline void clear_prescriptionuid();
  static const int kPrescriptionUIDFieldNumber = 1;
  inline const ::std::string& prescriptionuid() const;
  inline void set_prescriptionuid(const ::std::string& value);
  inline void set_prescriptionuid(const char* value);
  inline void set_prescriptionuid(const char* value, size_t size);
  inline ::std::string* mutable_prescriptionuid();
  inline ::std::string* release_prescriptionuid();
  
  // optional string prescriptionName = 2;
  inline bool has_prescriptionname() const;
  inline void clear_prescriptionname();
  static const int kPrescriptionNameFieldNumber = 2;
  inline const ::std::string& prescriptionname() const;
  inline void set_prescriptionname(const ::std::string& value);
  inline void set_prescriptionname(const char* value);
  inline void set_prescriptionname(const char* value, size_t size);
  inline ::std::string* mutable_prescriptionname();
  inline ::std::string* release_prescriptionname();
  
  // optional float dosePerFraction = 3;
  inline bool has_doseperfraction() const;
  inline void clear_doseperfraction();
  static const int kDosePerFractionFieldNumber = 3;
  inline float doseperfraction() const;
  inline void set_doseperfraction(float value);
  
  // optional int32 fractionsNumber = 4;
  inline bool has_fractionsnumber() const;
  inline void clear_fractionsnumber();
  static const int kFractionsNumberFieldNumber = 4;
  inline ::google::protobuf::int32 fractionsnumber() const;
  inline void set_fractionsnumber(::google::protobuf::int32 value);
  
  // optional string courseUID = 5;
  inline bool has_courseuid() const;
  inline void clear_courseuid();
  static const int kCourseUIDFieldNumber = 5;
  inline const ::std::string& courseuid() const;
  inline void set_courseuid(const ::std::string& value);
  inline void set_courseuid(const char* value);
  inline void set_courseuid(const char* value, size_t size);
  inline ::std::string* mutable_courseuid();
  inline ::std::string* release_courseuid();
  
  // repeated .tps.proto.RtTpsProtoConstraint constraintList = 6;
  inline int constraintlist_size() const;
  inline void clear_constraintlist();
  static const int kConstraintListFieldNumber = 6;
  inline const ::tps::proto::RtTpsProtoConstraint& constraintlist(int index) const;
  inline ::tps::proto::RtTpsProtoConstraint* mutable_constraintlist(int index);
  inline ::tps::proto::RtTpsProtoConstraint* add_constraintlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >&
      constraintlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >*
      mutable_constraintlist();
  
  // optional bool isgating = 7;
  inline bool has_isgating() const;
  inline void clear_isgating();
  static const int kIsgatingFieldNumber = 7;
  inline bool isgating() const;
  inline void set_isgating(bool value);
  
  // optional string siteUID = 8;
  inline bool has_siteuid() const;
  inline void clear_siteuid();
  static const int kSiteUIDFieldNumber = 8;
  inline const ::std::string& siteuid() const;
  inline void set_siteuid(const ::std::string& value);
  inline void set_siteuid(const char* value);
  inline void set_siteuid(const char* value, size_t size);
  inline ::std::string* mutable_siteuid();
  inline ::std::string* release_siteuid();
  
  // optional int32 binMode = 9;
  inline bool has_binmode() const;
  inline void clear_binmode();
  static const int kBinModeFieldNumber = 9;
  inline ::google::protobuf::int32 binmode() const;
  inline void set_binmode(::google::protobuf::int32 value);
  
  // optional double beamOnRangeStart = 10;
  inline bool has_beamonrangestart() const;
  inline void clear_beamonrangestart();
  static const int kBeamOnRangeStartFieldNumber = 10;
  inline double beamonrangestart() const;
  inline void set_beamonrangestart(double value);
  
  // optional double beamOnRangeEnd = 11;
  inline bool has_beamonrangeend() const;
  inline void clear_beamonrangeend();
  static const int kBeamOnRangeEndFieldNumber = 11;
  inline double beamonrangeend() const;
  inline void set_beamonrangeend(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoPrescription)
 private:
  inline void set_has_prescriptionuid();
  inline void clear_has_prescriptionuid();
  inline void set_has_prescriptionname();
  inline void clear_has_prescriptionname();
  inline void set_has_doseperfraction();
  inline void clear_has_doseperfraction();
  inline void set_has_fractionsnumber();
  inline void clear_has_fractionsnumber();
  inline void set_has_courseuid();
  inline void clear_has_courseuid();
  inline void set_has_isgating();
  inline void clear_has_isgating();
  inline void set_has_siteuid();
  inline void clear_has_siteuid();
  inline void set_has_binmode();
  inline void clear_has_binmode();
  inline void set_has_beamonrangestart();
  inline void clear_has_beamonrangestart();
  inline void set_has_beamonrangeend();
  inline void clear_has_beamonrangeend();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* prescriptionuid_;
  ::std::string* prescriptionname_;
  float doseperfraction_;
  ::google::protobuf::int32 fractionsnumber_;
  ::std::string* courseuid_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint > constraintlist_;
  ::std::string* siteuid_;
  bool isgating_;
  ::google::protobuf::int32 binmode_;
  double beamonrangestart_;
  double beamonrangeend_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fprescription_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fprescription_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fprescription_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoPrescription* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedPrescription : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedPrescription();
  virtual ~RtTpsProtoRepeatedPrescription();
  
  RtTpsProtoRepeatedPrescription(const RtTpsProtoRepeatedPrescription& from);
  
  inline RtTpsProtoRepeatedPrescription& operator=(const RtTpsProtoRepeatedPrescription& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedPrescription& default_instance();
  
  void Swap(RtTpsProtoRepeatedPrescription* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedPrescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedPrescription& from);
  void MergeFrom(const RtTpsProtoRepeatedPrescription& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoPrescription prescriptionList = 1;
  inline int prescriptionlist_size() const;
  inline void clear_prescriptionlist();
  static const int kPrescriptionListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoPrescription& prescriptionlist(int index) const;
  inline ::tps::proto::RtTpsProtoPrescription* mutable_prescriptionlist(int index);
  inline ::tps::proto::RtTpsProtoPrescription* add_prescriptionlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPrescription >&
      prescriptionlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPrescription >*
      mutable_prescriptionlist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedPrescription)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPrescription > prescriptionlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fprescription_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fprescription_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fprescription_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedPrescription* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoPrescription

// optional string prescriptionUID = 1;
inline bool RtTpsProtoPrescription::has_prescriptionuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoPrescription::set_has_prescriptionuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoPrescription::clear_has_prescriptionuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoPrescription::clear_prescriptionuid() {
  if (prescriptionuid_ != &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_->clear();
  }
  clear_has_prescriptionuid();
}
inline const ::std::string& RtTpsProtoPrescription::prescriptionuid() const {
  return *prescriptionuid_;
}
inline void RtTpsProtoPrescription::set_prescriptionuid(const ::std::string& value) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_prescriptionuid(const char* value) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_prescriptionuid(const char* value, size_t size) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPrescription::mutable_prescriptionuid() {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  return prescriptionuid_;
}
inline ::std::string* RtTpsProtoPrescription::release_prescriptionuid() {
  clear_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prescriptionuid_;
    prescriptionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string prescriptionName = 2;
inline bool RtTpsProtoPrescription::has_prescriptionname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoPrescription::set_has_prescriptionname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoPrescription::clear_has_prescriptionname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoPrescription::clear_prescriptionname() {
  if (prescriptionname_ != &::google::protobuf::internal::kEmptyString) {
    prescriptionname_->clear();
  }
  clear_has_prescriptionname();
}
inline const ::std::string& RtTpsProtoPrescription::prescriptionname() const {
  return *prescriptionname_;
}
inline void RtTpsProtoPrescription::set_prescriptionname(const ::std::string& value) {
  set_has_prescriptionname();
  if (prescriptionname_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionname_ = new ::std::string;
  }
  prescriptionname_->assign(value);
}
inline void RtTpsProtoPrescription::set_prescriptionname(const char* value) {
  set_has_prescriptionname();
  if (prescriptionname_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionname_ = new ::std::string;
  }
  prescriptionname_->assign(value);
}
inline void RtTpsProtoPrescription::set_prescriptionname(const char* value, size_t size) {
  set_has_prescriptionname();
  if (prescriptionname_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionname_ = new ::std::string;
  }
  prescriptionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPrescription::mutable_prescriptionname() {
  set_has_prescriptionname();
  if (prescriptionname_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionname_ = new ::std::string;
  }
  return prescriptionname_;
}
inline ::std::string* RtTpsProtoPrescription::release_prescriptionname() {
  clear_has_prescriptionname();
  if (prescriptionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prescriptionname_;
    prescriptionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float dosePerFraction = 3;
inline bool RtTpsProtoPrescription::has_doseperfraction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoPrescription::set_has_doseperfraction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoPrescription::clear_has_doseperfraction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoPrescription::clear_doseperfraction() {
  doseperfraction_ = 0;
  clear_has_doseperfraction();
}
inline float RtTpsProtoPrescription::doseperfraction() const {
  return doseperfraction_;
}
inline void RtTpsProtoPrescription::set_doseperfraction(float value) {
  set_has_doseperfraction();
  doseperfraction_ = value;
}

// optional int32 fractionsNumber = 4;
inline bool RtTpsProtoPrescription::has_fractionsnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoPrescription::set_has_fractionsnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoPrescription::clear_has_fractionsnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoPrescription::clear_fractionsnumber() {
  fractionsnumber_ = 0;
  clear_has_fractionsnumber();
}
inline ::google::protobuf::int32 RtTpsProtoPrescription::fractionsnumber() const {
  return fractionsnumber_;
}
inline void RtTpsProtoPrescription::set_fractionsnumber(::google::protobuf::int32 value) {
  set_has_fractionsnumber();
  fractionsnumber_ = value;
}

// optional string courseUID = 5;
inline bool RtTpsProtoPrescription::has_courseuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoPrescription::set_has_courseuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoPrescription::clear_has_courseuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoPrescription::clear_courseuid() {
  if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
    courseuid_->clear();
  }
  clear_has_courseuid();
}
inline const ::std::string& RtTpsProtoPrescription::courseuid() const {
  return *courseuid_;
}
inline void RtTpsProtoPrescription::set_courseuid(const ::std::string& value) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_courseuid(const char* value) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_courseuid(const char* value, size_t size) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPrescription::mutable_courseuid() {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  return courseuid_;
}
inline ::std::string* RtTpsProtoPrescription::release_courseuid() {
  clear_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = courseuid_;
    courseuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tps.proto.RtTpsProtoConstraint constraintList = 6;
inline int RtTpsProtoPrescription::constraintlist_size() const {
  return constraintlist_.size();
}
inline void RtTpsProtoPrescription::clear_constraintlist() {
  constraintlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoConstraint& RtTpsProtoPrescription::constraintlist(int index) const {
  return constraintlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoConstraint* RtTpsProtoPrescription::mutable_constraintlist(int index) {
  return constraintlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoConstraint* RtTpsProtoPrescription::add_constraintlist() {
  return constraintlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >&
RtTpsProtoPrescription::constraintlist() const {
  return constraintlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoConstraint >*
RtTpsProtoPrescription::mutable_constraintlist() {
  return &constraintlist_;
}

// optional bool isgating = 7;
inline bool RtTpsProtoPrescription::has_isgating() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoPrescription::set_has_isgating() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoPrescription::clear_has_isgating() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoPrescription::clear_isgating() {
  isgating_ = false;
  clear_has_isgating();
}
inline bool RtTpsProtoPrescription::isgating() const {
  return isgating_;
}
inline void RtTpsProtoPrescription::set_isgating(bool value) {
  set_has_isgating();
  isgating_ = value;
}

// optional string siteUID = 8;
inline bool RtTpsProtoPrescription::has_siteuid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoPrescription::set_has_siteuid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoPrescription::clear_has_siteuid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoPrescription::clear_siteuid() {
  if (siteuid_ != &::google::protobuf::internal::kEmptyString) {
    siteuid_->clear();
  }
  clear_has_siteuid();
}
inline const ::std::string& RtTpsProtoPrescription::siteuid() const {
  return *siteuid_;
}
inline void RtTpsProtoPrescription::set_siteuid(const ::std::string& value) {
  set_has_siteuid();
  if (siteuid_ == &::google::protobuf::internal::kEmptyString) {
    siteuid_ = new ::std::string;
  }
  siteuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_siteuid(const char* value) {
  set_has_siteuid();
  if (siteuid_ == &::google::protobuf::internal::kEmptyString) {
    siteuid_ = new ::std::string;
  }
  siteuid_->assign(value);
}
inline void RtTpsProtoPrescription::set_siteuid(const char* value, size_t size) {
  set_has_siteuid();
  if (siteuid_ == &::google::protobuf::internal::kEmptyString) {
    siteuid_ = new ::std::string;
  }
  siteuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPrescription::mutable_siteuid() {
  set_has_siteuid();
  if (siteuid_ == &::google::protobuf::internal::kEmptyString) {
    siteuid_ = new ::std::string;
  }
  return siteuid_;
}
inline ::std::string* RtTpsProtoPrescription::release_siteuid() {
  clear_has_siteuid();
  if (siteuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = siteuid_;
    siteuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 binMode = 9;
inline bool RtTpsProtoPrescription::has_binmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoPrescription::set_has_binmode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoPrescription::clear_has_binmode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoPrescription::clear_binmode() {
  binmode_ = 0;
  clear_has_binmode();
}
inline ::google::protobuf::int32 RtTpsProtoPrescription::binmode() const {
  return binmode_;
}
inline void RtTpsProtoPrescription::set_binmode(::google::protobuf::int32 value) {
  set_has_binmode();
  binmode_ = value;
}

// optional double beamOnRangeStart = 10;
inline bool RtTpsProtoPrescription::has_beamonrangestart() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoPrescription::set_has_beamonrangestart() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoPrescription::clear_has_beamonrangestart() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoPrescription::clear_beamonrangestart() {
  beamonrangestart_ = 0;
  clear_has_beamonrangestart();
}
inline double RtTpsProtoPrescription::beamonrangestart() const {
  return beamonrangestart_;
}
inline void RtTpsProtoPrescription::set_beamonrangestart(double value) {
  set_has_beamonrangestart();
  beamonrangestart_ = value;
}

// optional double beamOnRangeEnd = 11;
inline bool RtTpsProtoPrescription::has_beamonrangeend() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoPrescription::set_has_beamonrangeend() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoPrescription::clear_has_beamonrangeend() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoPrescription::clear_beamonrangeend() {
  beamonrangeend_ = 0;
  clear_has_beamonrangeend();
}
inline double RtTpsProtoPrescription::beamonrangeend() const {
  return beamonrangeend_;
}
inline void RtTpsProtoPrescription::set_beamonrangeend(double value) {
  set_has_beamonrangeend();
  beamonrangeend_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedPrescription

// repeated .tps.proto.RtTpsProtoPrescription prescriptionList = 1;
inline int RtTpsProtoRepeatedPrescription::prescriptionlist_size() const {
  return prescriptionlist_.size();
}
inline void RtTpsProtoRepeatedPrescription::clear_prescriptionlist() {
  prescriptionlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoPrescription& RtTpsProtoRepeatedPrescription::prescriptionlist(int index) const {
  return prescriptionlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoPrescription* RtTpsProtoRepeatedPrescription::mutable_prescriptionlist(int index) {
  return prescriptionlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoPrescription* RtTpsProtoRepeatedPrescription::add_prescriptionlist() {
  return prescriptionlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPrescription >&
RtTpsProtoRepeatedPrescription::prescriptionlist() const {
  return prescriptionlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPrescription >*
RtTpsProtoRepeatedPrescription::mutable_prescriptionlist() {
  return &prescriptionlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fprescription_2eproto__INCLUDED
