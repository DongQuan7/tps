// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_doseline.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fdoseline_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fdoseline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoseline_2eproto();

class RtTpsProtoDoseLine;
class RtTpsProtoRepeatedDoseLine;

// ===================================================================

class RtTpsProtoDoseLine : public ::google::protobuf::Message {
 public:
  RtTpsProtoDoseLine();
  virtual ~RtTpsProtoDoseLine();
  
  RtTpsProtoDoseLine(const RtTpsProtoDoseLine& from);
  
  inline RtTpsProtoDoseLine& operator=(const RtTpsProtoDoseLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoDoseLine& default_instance();
  
  void Swap(RtTpsProtoDoseLine* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoDoseLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoDoseLine& from);
  void MergeFrom(const RtTpsProtoDoseLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string doseLineUID = 1;
  inline bool has_doselineuid() const;
  inline void clear_doselineuid();
  static const int kDoseLineUIDFieldNumber = 1;
  inline const ::std::string& doselineuid() const;
  inline void set_doselineuid(const ::std::string& value);
  inline void set_doselineuid(const char* value);
  inline void set_doselineuid(const char* value, size_t size);
  inline ::std::string* mutable_doselineuid();
  inline ::std::string* release_doselineuid();
  
  // optional float doseRatio = 2;
  inline bool has_doseratio() const;
  inline void clear_doseratio();
  static const int kDoseRatioFieldNumber = 2;
  inline float doseratio() const;
  inline void set_doseratio(float value);
  
  // repeated float doseLineColor = 3;
  inline int doselinecolor_size() const;
  inline void clear_doselinecolor();
  static const int kDoseLineColorFieldNumber = 3;
  inline float doselinecolor(int index) const;
  inline void set_doselinecolor(int index, float value);
  inline void add_doselinecolor(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      doselinecolor() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_doselinecolor();
  
  // optional bool isVisible = 4;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 4;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);
  
  // optional bool isVisible3D = 5;
  inline bool has_isvisible3d() const;
  inline void clear_isvisible3d();
  static const int kIsVisible3DFieldNumber = 5;
  inline bool isvisible3d() const;
  inline void set_isvisible3d(bool value);
  
  // optional string planUID = 6;
  inline bool has_planuid() const;
  inline void clear_planuid();
  static const int kPlanUIDFieldNumber = 6;
  inline const ::std::string& planuid() const;
  inline void set_planuid(const ::std::string& value);
  inline void set_planuid(const char* value);
  inline void set_planuid(const char* value, size_t size);
  inline ::std::string* mutable_planuid();
  inline ::std::string* release_planuid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoDoseLine)
 private:
  inline void set_has_doselineuid();
  inline void clear_has_doselineuid();
  inline void set_has_doseratio();
  inline void clear_has_doseratio();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_isvisible3d();
  inline void clear_has_isvisible3d();
  inline void set_has_planuid();
  inline void clear_has_planuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* doselineuid_;
  ::google::protobuf::RepeatedField< float > doselinecolor_;
  float doseratio_;
  bool isvisible_;
  bool isvisible3d_;
  ::std::string* planuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoseline_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoDoseLine* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedDoseLine : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedDoseLine();
  virtual ~RtTpsProtoRepeatedDoseLine();
  
  RtTpsProtoRepeatedDoseLine(const RtTpsProtoRepeatedDoseLine& from);
  
  inline RtTpsProtoRepeatedDoseLine& operator=(const RtTpsProtoRepeatedDoseLine& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedDoseLine& default_instance();
  
  void Swap(RtTpsProtoRepeatedDoseLine* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedDoseLine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedDoseLine& from);
  void MergeFrom(const RtTpsProtoRepeatedDoseLine& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
  inline int doselinelist_size() const;
  inline void clear_doselinelist();
  static const int kDoseLineListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoDoseLine& doselinelist(int index) const;
  inline ::tps::proto::RtTpsProtoDoseLine* mutable_doselinelist(int index);
  inline ::tps::proto::RtTpsProtoDoseLine* add_doselinelist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoDoseLine >&
      doselinelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoDoseLine >*
      mutable_doselinelist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedDoseLine)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoDoseLine > doselinelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fdoseline_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fdoseline_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedDoseLine* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoDoseLine

// required string doseLineUID = 1;
inline bool RtTpsProtoDoseLine::has_doselineuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoDoseLine::set_has_doselineuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoDoseLine::clear_has_doselineuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoDoseLine::clear_doselineuid() {
  if (doselineuid_ != &::google::protobuf::internal::kEmptyString) {
    doselineuid_->clear();
  }
  clear_has_doselineuid();
}
inline const ::std::string& RtTpsProtoDoseLine::doselineuid() const {
  return *doselineuid_;
}
inline void RtTpsProtoDoseLine::set_doselineuid(const ::std::string& value) {
  set_has_doselineuid();
  if (doselineuid_ == &::google::protobuf::internal::kEmptyString) {
    doselineuid_ = new ::std::string;
  }
  doselineuid_->assign(value);
}
inline void RtTpsProtoDoseLine::set_doselineuid(const char* value) {
  set_has_doselineuid();
  if (doselineuid_ == &::google::protobuf::internal::kEmptyString) {
    doselineuid_ = new ::std::string;
  }
  doselineuid_->assign(value);
}
inline void RtTpsProtoDoseLine::set_doselineuid(const char* value, size_t size) {
  set_has_doselineuid();
  if (doselineuid_ == &::google::protobuf::internal::kEmptyString) {
    doselineuid_ = new ::std::string;
  }
  doselineuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoDoseLine::mutable_doselineuid() {
  set_has_doselineuid();
  if (doselineuid_ == &::google::protobuf::internal::kEmptyString) {
    doselineuid_ = new ::std::string;
  }
  return doselineuid_;
}
inline ::std::string* RtTpsProtoDoseLine::release_doselineuid() {
  clear_has_doselineuid();
  if (doselineuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = doselineuid_;
    doselineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float doseRatio = 2;
inline bool RtTpsProtoDoseLine::has_doseratio() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoDoseLine::set_has_doseratio() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoDoseLine::clear_has_doseratio() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoDoseLine::clear_doseratio() {
  doseratio_ = 0;
  clear_has_doseratio();
}
inline float RtTpsProtoDoseLine::doseratio() const {
  return doseratio_;
}
inline void RtTpsProtoDoseLine::set_doseratio(float value) {
  set_has_doseratio();
  doseratio_ = value;
}

// repeated float doseLineColor = 3;
inline int RtTpsProtoDoseLine::doselinecolor_size() const {
  return doselinecolor_.size();
}
inline void RtTpsProtoDoseLine::clear_doselinecolor() {
  doselinecolor_.Clear();
}
inline float RtTpsProtoDoseLine::doselinecolor(int index) const {
  return doselinecolor_.Get(index);
}
inline void RtTpsProtoDoseLine::set_doselinecolor(int index, float value) {
  doselinecolor_.Set(index, value);
}
inline void RtTpsProtoDoseLine::add_doselinecolor(float value) {
  doselinecolor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RtTpsProtoDoseLine::doselinecolor() const {
  return doselinecolor_;
}
inline ::google::protobuf::RepeatedField< float >*
RtTpsProtoDoseLine::mutable_doselinecolor() {
  return &doselinecolor_;
}

// optional bool isVisible = 4;
inline bool RtTpsProtoDoseLine::has_isvisible() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoDoseLine::set_has_isvisible() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoDoseLine::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoDoseLine::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool RtTpsProtoDoseLine::isvisible() const {
  return isvisible_;
}
inline void RtTpsProtoDoseLine::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// optional bool isVisible3D = 5;
inline bool RtTpsProtoDoseLine::has_isvisible3d() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoDoseLine::set_has_isvisible3d() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoDoseLine::clear_has_isvisible3d() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoDoseLine::clear_isvisible3d() {
  isvisible3d_ = false;
  clear_has_isvisible3d();
}
inline bool RtTpsProtoDoseLine::isvisible3d() const {
  return isvisible3d_;
}
inline void RtTpsProtoDoseLine::set_isvisible3d(bool value) {
  set_has_isvisible3d();
  isvisible3d_ = value;
}

// optional string planUID = 6;
inline bool RtTpsProtoDoseLine::has_planuid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoDoseLine::set_has_planuid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoDoseLine::clear_has_planuid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoDoseLine::clear_planuid() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    planuid_->clear();
  }
  clear_has_planuid();
}
inline const ::std::string& RtTpsProtoDoseLine::planuid() const {
  return *planuid_;
}
inline void RtTpsProtoDoseLine::set_planuid(const ::std::string& value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoDoseLine::set_planuid(const char* value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoDoseLine::set_planuid(const char* value, size_t size) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoDoseLine::mutable_planuid() {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  return planuid_;
}
inline ::std::string* RtTpsProtoDoseLine::release_planuid() {
  clear_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planuid_;
    planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedDoseLine

// repeated .tps.proto.RtTpsProtoDoseLine doseLineList = 1;
inline int RtTpsProtoRepeatedDoseLine::doselinelist_size() const {
  return doselinelist_.size();
}
inline void RtTpsProtoRepeatedDoseLine::clear_doselinelist() {
  doselinelist_.Clear();
}
inline const ::tps::proto::RtTpsProtoDoseLine& RtTpsProtoRepeatedDoseLine::doselinelist(int index) const {
  return doselinelist_.Get(index);
}
inline ::tps::proto::RtTpsProtoDoseLine* RtTpsProtoRepeatedDoseLine::mutable_doselinelist(int index) {
  return doselinelist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoDoseLine* RtTpsProtoRepeatedDoseLine::add_doselinelist() {
  return doselinelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoDoseLine >&
RtTpsProtoRepeatedDoseLine::doselinelist() const {
  return doselinelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoDoseLine >*
RtTpsProtoRepeatedDoseLine::mutable_doselinelist() {
  return &doselinelist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fdoseline_2eproto__INCLUDED
