// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_approverecord.proto

#ifndef PROTOBUF_rt_5ftps_5fapproverecord_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fapproverecord_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fapproverecord_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fapproverecord_2eproto();

class RtTpsApproveRecord;
class RtTpsRepeatedApproveRecord;

// ===================================================================

class RtTpsApproveRecord : public ::google::protobuf::Message {
 public:
  RtTpsApproveRecord();
  virtual ~RtTpsApproveRecord();
  
  RtTpsApproveRecord(const RtTpsApproveRecord& from);
  
  inline RtTpsApproveRecord& operator=(const RtTpsApproveRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsApproveRecord& default_instance();
  
  void Swap(RtTpsApproveRecord* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsApproveRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsApproveRecord& from);
  void MergeFrom(const RtTpsApproveRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // required string object_uid = 2;
  inline bool has_object_uid() const;
  inline void clear_object_uid();
  static const int kObjectUidFieldNumber = 2;
  inline const ::std::string& object_uid() const;
  inline void set_object_uid(const ::std::string& value);
  inline void set_object_uid(const char* value);
  inline void set_object_uid(const char* value, size_t size);
  inline ::std::string* mutable_object_uid();
  inline ::std::string* release_object_uid();
  
  // required int32 objetc_type = 3;
  inline bool has_objetc_type() const;
  inline void clear_objetc_type();
  static const int kObjetcTypeFieldNumber = 3;
  inline ::google::protobuf::int32 objetc_type() const;
  inline void set_objetc_type(::google::protobuf::int32 value);
  
  // required string approver = 4;
  inline bool has_approver() const;
  inline void clear_approver();
  static const int kApproverFieldNumber = 4;
  inline const ::std::string& approver() const;
  inline void set_approver(const ::std::string& value);
  inline void set_approver(const char* value);
  inline void set_approver(const char* value, size_t size);
  inline ::std::string* mutable_approver();
  inline ::std::string* release_approver();
  
  // required string approve_datetime = 5;
  inline bool has_approve_datetime() const;
  inline void clear_approve_datetime();
  static const int kApproveDatetimeFieldNumber = 5;
  inline const ::std::string& approve_datetime() const;
  inline void set_approve_datetime(const ::std::string& value);
  inline void set_approve_datetime(const char* value);
  inline void set_approve_datetime(const char* value, size_t size);
  inline ::std::string* mutable_approve_datetime();
  inline ::std::string* release_approve_datetime();
  
  // optional bool isApprove = 6;
  inline bool has_isapprove() const;
  inline void clear_isapprove();
  static const int kIsApproveFieldNumber = 6;
  inline bool isapprove() const;
  inline void set_isapprove(bool value);
  
  // optional string changeset = 7;
  inline bool has_changeset() const;
  inline void clear_changeset();
  static const int kChangesetFieldNumber = 7;
  inline const ::std::string& changeset() const;
  inline void set_changeset(const ::std::string& value);
  inline void set_changeset(const char* value);
  inline void set_changeset(const char* value, size_t size);
  inline ::std::string* mutable_changeset();
  inline ::std::string* release_changeset();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsApproveRecord)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_object_uid();
  inline void clear_has_object_uid();
  inline void set_has_objetc_type();
  inline void clear_has_objetc_type();
  inline void set_has_approver();
  inline void clear_has_approver();
  inline void set_has_approve_datetime();
  inline void clear_has_approve_datetime();
  inline void set_has_isapprove();
  inline void clear_has_isapprove();
  inline void set_has_changeset();
  inline void clear_has_changeset();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* object_uid_;
  ::std::string* approver_;
  ::google::protobuf::int32 objetc_type_;
  bool isapprove_;
  ::std::string* approve_datetime_;
  ::std::string* changeset_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fapproverecord_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fapproverecord_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsApproveRecord* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsRepeatedApproveRecord : public ::google::protobuf::Message {
 public:
  RtTpsRepeatedApproveRecord();
  virtual ~RtTpsRepeatedApproveRecord();
  
  RtTpsRepeatedApproveRecord(const RtTpsRepeatedApproveRecord& from);
  
  inline RtTpsRepeatedApproveRecord& operator=(const RtTpsRepeatedApproveRecord& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsRepeatedApproveRecord& default_instance();
  
  void Swap(RtTpsRepeatedApproveRecord* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsRepeatedApproveRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsRepeatedApproveRecord& from);
  void MergeFrom(const RtTpsRepeatedApproveRecord& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
  inline int approverecordlist_size() const;
  inline void clear_approverecordlist();
  static const int kApproverecordlistFieldNumber = 1;
  inline const ::tps::proto::RtTpsApproveRecord& approverecordlist(int index) const;
  inline ::tps::proto::RtTpsApproveRecord* mutable_approverecordlist(int index);
  inline ::tps::proto::RtTpsApproveRecord* add_approverecordlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsApproveRecord >&
      approverecordlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsApproveRecord >*
      mutable_approverecordlist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsRepeatedApproveRecord)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsApproveRecord > approverecordlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fapproverecord_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fapproverecord_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fapproverecord_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsRepeatedApproveRecord* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsApproveRecord

// required string uid = 1;
inline bool RtTpsApproveRecord::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsApproveRecord::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsApproveRecord::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsApproveRecord::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RtTpsApproveRecord::uid() const {
  return *uid_;
}
inline void RtTpsApproveRecord::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RtTpsApproveRecord::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RtTpsApproveRecord::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsApproveRecord::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RtTpsApproveRecord::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string object_uid = 2;
inline bool RtTpsApproveRecord::has_object_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsApproveRecord::set_has_object_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsApproveRecord::clear_has_object_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsApproveRecord::clear_object_uid() {
  if (object_uid_ != &::google::protobuf::internal::kEmptyString) {
    object_uid_->clear();
  }
  clear_has_object_uid();
}
inline const ::std::string& RtTpsApproveRecord::object_uid() const {
  return *object_uid_;
}
inline void RtTpsApproveRecord::set_object_uid(const ::std::string& value) {
  set_has_object_uid();
  if (object_uid_ == &::google::protobuf::internal::kEmptyString) {
    object_uid_ = new ::std::string;
  }
  object_uid_->assign(value);
}
inline void RtTpsApproveRecord::set_object_uid(const char* value) {
  set_has_object_uid();
  if (object_uid_ == &::google::protobuf::internal::kEmptyString) {
    object_uid_ = new ::std::string;
  }
  object_uid_->assign(value);
}
inline void RtTpsApproveRecord::set_object_uid(const char* value, size_t size) {
  set_has_object_uid();
  if (object_uid_ == &::google::protobuf::internal::kEmptyString) {
    object_uid_ = new ::std::string;
  }
  object_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsApproveRecord::mutable_object_uid() {
  set_has_object_uid();
  if (object_uid_ == &::google::protobuf::internal::kEmptyString) {
    object_uid_ = new ::std::string;
  }
  return object_uid_;
}
inline ::std::string* RtTpsApproveRecord::release_object_uid() {
  clear_has_object_uid();
  if (object_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = object_uid_;
    object_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 objetc_type = 3;
inline bool RtTpsApproveRecord::has_objetc_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsApproveRecord::set_has_objetc_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsApproveRecord::clear_has_objetc_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsApproveRecord::clear_objetc_type() {
  objetc_type_ = 0;
  clear_has_objetc_type();
}
inline ::google::protobuf::int32 RtTpsApproveRecord::objetc_type() const {
  return objetc_type_;
}
inline void RtTpsApproveRecord::set_objetc_type(::google::protobuf::int32 value) {
  set_has_objetc_type();
  objetc_type_ = value;
}

// required string approver = 4;
inline bool RtTpsApproveRecord::has_approver() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsApproveRecord::set_has_approver() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsApproveRecord::clear_has_approver() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsApproveRecord::clear_approver() {
  if (approver_ != &::google::protobuf::internal::kEmptyString) {
    approver_->clear();
  }
  clear_has_approver();
}
inline const ::std::string& RtTpsApproveRecord::approver() const {
  return *approver_;
}
inline void RtTpsApproveRecord::set_approver(const ::std::string& value) {
  set_has_approver();
  if (approver_ == &::google::protobuf::internal::kEmptyString) {
    approver_ = new ::std::string;
  }
  approver_->assign(value);
}
inline void RtTpsApproveRecord::set_approver(const char* value) {
  set_has_approver();
  if (approver_ == &::google::protobuf::internal::kEmptyString) {
    approver_ = new ::std::string;
  }
  approver_->assign(value);
}
inline void RtTpsApproveRecord::set_approver(const char* value, size_t size) {
  set_has_approver();
  if (approver_ == &::google::protobuf::internal::kEmptyString) {
    approver_ = new ::std::string;
  }
  approver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsApproveRecord::mutable_approver() {
  set_has_approver();
  if (approver_ == &::google::protobuf::internal::kEmptyString) {
    approver_ = new ::std::string;
  }
  return approver_;
}
inline ::std::string* RtTpsApproveRecord::release_approver() {
  clear_has_approver();
  if (approver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = approver_;
    approver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string approve_datetime = 5;
inline bool RtTpsApproveRecord::has_approve_datetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsApproveRecord::set_has_approve_datetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsApproveRecord::clear_has_approve_datetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsApproveRecord::clear_approve_datetime() {
  if (approve_datetime_ != &::google::protobuf::internal::kEmptyString) {
    approve_datetime_->clear();
  }
  clear_has_approve_datetime();
}
inline const ::std::string& RtTpsApproveRecord::approve_datetime() const {
  return *approve_datetime_;
}
inline void RtTpsApproveRecord::set_approve_datetime(const ::std::string& value) {
  set_has_approve_datetime();
  if (approve_datetime_ == &::google::protobuf::internal::kEmptyString) {
    approve_datetime_ = new ::std::string;
  }
  approve_datetime_->assign(value);
}
inline void RtTpsApproveRecord::set_approve_datetime(const char* value) {
  set_has_approve_datetime();
  if (approve_datetime_ == &::google::protobuf::internal::kEmptyString) {
    approve_datetime_ = new ::std::string;
  }
  approve_datetime_->assign(value);
}
inline void RtTpsApproveRecord::set_approve_datetime(const char* value, size_t size) {
  set_has_approve_datetime();
  if (approve_datetime_ == &::google::protobuf::internal::kEmptyString) {
    approve_datetime_ = new ::std::string;
  }
  approve_datetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsApproveRecord::mutable_approve_datetime() {
  set_has_approve_datetime();
  if (approve_datetime_ == &::google::protobuf::internal::kEmptyString) {
    approve_datetime_ = new ::std::string;
  }
  return approve_datetime_;
}
inline ::std::string* RtTpsApproveRecord::release_approve_datetime() {
  clear_has_approve_datetime();
  if (approve_datetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = approve_datetime_;
    approve_datetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isApprove = 6;
inline bool RtTpsApproveRecord::has_isapprove() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsApproveRecord::set_has_isapprove() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsApproveRecord::clear_has_isapprove() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsApproveRecord::clear_isapprove() {
  isapprove_ = false;
  clear_has_isapprove();
}
inline bool RtTpsApproveRecord::isapprove() const {
  return isapprove_;
}
inline void RtTpsApproveRecord::set_isapprove(bool value) {
  set_has_isapprove();
  isapprove_ = value;
}

// optional string changeset = 7;
inline bool RtTpsApproveRecord::has_changeset() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsApproveRecord::set_has_changeset() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsApproveRecord::clear_has_changeset() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsApproveRecord::clear_changeset() {
  if (changeset_ != &::google::protobuf::internal::kEmptyString) {
    changeset_->clear();
  }
  clear_has_changeset();
}
inline const ::std::string& RtTpsApproveRecord::changeset() const {
  return *changeset_;
}
inline void RtTpsApproveRecord::set_changeset(const ::std::string& value) {
  set_has_changeset();
  if (changeset_ == &::google::protobuf::internal::kEmptyString) {
    changeset_ = new ::std::string;
  }
  changeset_->assign(value);
}
inline void RtTpsApproveRecord::set_changeset(const char* value) {
  set_has_changeset();
  if (changeset_ == &::google::protobuf::internal::kEmptyString) {
    changeset_ = new ::std::string;
  }
  changeset_->assign(value);
}
inline void RtTpsApproveRecord::set_changeset(const char* value, size_t size) {
  set_has_changeset();
  if (changeset_ == &::google::protobuf::internal::kEmptyString) {
    changeset_ = new ::std::string;
  }
  changeset_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsApproveRecord::mutable_changeset() {
  set_has_changeset();
  if (changeset_ == &::google::protobuf::internal::kEmptyString) {
    changeset_ = new ::std::string;
  }
  return changeset_;
}
inline ::std::string* RtTpsApproveRecord::release_changeset() {
  clear_has_changeset();
  if (changeset_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = changeset_;
    changeset_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RtTpsRepeatedApproveRecord

// repeated .tps.proto.RtTpsApproveRecord approverecordlist = 1;
inline int RtTpsRepeatedApproveRecord::approverecordlist_size() const {
  return approverecordlist_.size();
}
inline void RtTpsRepeatedApproveRecord::clear_approverecordlist() {
  approverecordlist_.Clear();
}
inline const ::tps::proto::RtTpsApproveRecord& RtTpsRepeatedApproveRecord::approverecordlist(int index) const {
  return approverecordlist_.Get(index);
}
inline ::tps::proto::RtTpsApproveRecord* RtTpsRepeatedApproveRecord::mutable_approverecordlist(int index) {
  return approverecordlist_.Mutable(index);
}
inline ::tps::proto::RtTpsApproveRecord* RtTpsRepeatedApproveRecord::add_approverecordlist() {
  return approverecordlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsApproveRecord >&
RtTpsRepeatedApproveRecord::approverecordlist() const {
  return approverecordlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsApproveRecord >*
RtTpsRepeatedApproveRecord::mutable_approverecordlist() {
  return &approverecordlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fapproverecord_2eproto__INCLUDED
