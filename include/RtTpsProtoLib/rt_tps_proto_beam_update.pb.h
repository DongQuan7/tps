// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_beam_update.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();

class RtTpsProtoBeamUpdate;

// ===================================================================

class RtTpsProtoBeamUpdate : public ::google::protobuf::Message {
 public:
  RtTpsProtoBeamUpdate();
  virtual ~RtTpsProtoBeamUpdate();
  
  RtTpsProtoBeamUpdate(const RtTpsProtoBeamUpdate& from);
  
  inline RtTpsProtoBeamUpdate& operator=(const RtTpsProtoBeamUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoBeamUpdate& default_instance();
  
  void Swap(RtTpsProtoBeamUpdate* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoBeamUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoBeamUpdate& from);
  void MergeFrom(const RtTpsProtoBeamUpdate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string beam_uid = 1;
  inline bool has_beam_uid() const;
  inline void clear_beam_uid();
  static const int kBeamUidFieldNumber = 1;
  inline const ::std::string& beam_uid() const;
  inline void set_beam_uid(const ::std::string& value);
  inline void set_beam_uid(const char* value);
  inline void set_beam_uid(const char* value, size_t size);
  inline ::std::string* mutable_beam_uid();
  inline ::std::string* release_beam_uid();
  
  // optional bool isVisible = 2;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 2;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);
  
  // optional string beam_name = 3;
  inline bool has_beam_name() const;
  inline void clear_beam_name();
  static const int kBeamNameFieldNumber = 3;
  inline const ::std::string& beam_name() const;
  inline void set_beam_name(const ::std::string& value);
  inline void set_beam_name(const char* value);
  inline void set_beam_name(const char* value, size_t size);
  inline ::std::string* mutable_beam_name();
  inline ::std::string* release_beam_name();
  
  // optional string beam_description = 4;
  inline bool has_beam_description() const;
  inline void clear_beam_description();
  static const int kBeamDescriptionFieldNumber = 4;
  inline const ::std::string& beam_description() const;
  inline void set_beam_description(const ::std::string& value);
  inline void set_beam_description(const char* value);
  inline void set_beam_description(const char* value, size_t size);
  inline ::std::string* mutable_beam_description();
  inline ::std::string* release_beam_description();
  
  // optional bool isAutoCreatedDescription = 5;
  inline bool has_isautocreateddescription() const;
  inline void clear_isautocreateddescription();
  static const int kIsAutoCreatedDescriptionFieldNumber = 5;
  inline bool isautocreateddescription() const;
  inline void set_isautocreateddescription(bool value);
  
  // optional bool isAutoTrackingShape = 6;
  inline bool has_isautotrackingshape() const;
  inline void clear_isautotrackingshape();
  static const int kIsAutoTrackingShapeFieldNumber = 6;
  inline bool isautotrackingshape() const;
  inline void set_isautotrackingshape(bool value);
  
  // optional bool isShieldingBlockAutoTrackingShape = 7;
  inline bool has_isshieldingblockautotrackingshape() const;
  inline void clear_isshieldingblockautotrackingshape();
  static const int kIsShieldingBlockAutoTrackingShapeFieldNumber = 7;
  inline bool isshieldingblockautotrackingshape() const;
  inline void set_isshieldingblockautotrackingshape(bool value);
  
  // optional float dose_rate = 8;
  inline bool has_dose_rate() const;
  inline void clear_dose_rate();
  static const int kDoseRateFieldNumber = 8;
  inline float dose_rate() const;
  inline void set_dose_rate(float value);
  
  // optional bool isJoined = 9;
  inline bool has_isjoined() const;
  inline void clear_isjoined();
  static const int kIsJoinedFieldNumber = 9;
  inline bool isjoined() const;
  inline void set_isjoined(bool value);
  
  // optional int32 algorithm_type = 10;
  inline bool has_algorithm_type() const;
  inline void clear_algorithm_type();
  static const int kAlgorithmTypeFieldNumber = 10;
  inline ::google::protobuf::int32 algorithm_type() const;
  inline void set_algorithm_type(::google::protobuf::int32 value);
  
  // optional bool isJawFollow = 11;
  inline bool has_isjawfollow() const;
  inline void clear_isjawfollow();
  static const int kIsJawFollowFieldNumber = 11;
  inline bool isjawfollow() const;
  inline void set_isjawfollow(bool value);
  
  // optional float beam_mu = 12;
  inline bool has_beam_mu() const;
  inline void clear_beam_mu();
  static const int kBeamMuFieldNumber = 12;
  inline float beam_mu() const;
  inline void set_beam_mu(float value);
  
  // optional float beam_weight = 13;
  inline bool has_beam_weight() const;
  inline void clear_beam_weight();
  static const int kBeamWeightFieldNumber = 13;
  inline float beam_weight() const;
  inline void set_beam_weight(float value);
  
  // optional string commission_uid = 14;
  inline bool has_commission_uid() const;
  inline void clear_commission_uid();
  static const int kCommissionUidFieldNumber = 14;
  inline const ::std::string& commission_uid() const;
  inline void set_commission_uid(const ::std::string& value);
  inline void set_commission_uid(const char* value);
  inline void set_commission_uid(const char* value, size_t size);
  inline ::std::string* mutable_commission_uid();
  inline ::std::string* release_commission_uid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoBeamUpdate)
 private:
  inline void set_has_beam_uid();
  inline void clear_has_beam_uid();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_beam_name();
  inline void clear_has_beam_name();
  inline void set_has_beam_description();
  inline void clear_has_beam_description();
  inline void set_has_isautocreateddescription();
  inline void clear_has_isautocreateddescription();
  inline void set_has_isautotrackingshape();
  inline void clear_has_isautotrackingshape();
  inline void set_has_isshieldingblockautotrackingshape();
  inline void clear_has_isshieldingblockautotrackingshape();
  inline void set_has_dose_rate();
  inline void clear_has_dose_rate();
  inline void set_has_isjoined();
  inline void clear_has_isjoined();
  inline void set_has_algorithm_type();
  inline void clear_has_algorithm_type();
  inline void set_has_isjawfollow();
  inline void clear_has_isjawfollow();
  inline void set_has_beam_mu();
  inline void clear_has_beam_mu();
  inline void set_has_beam_weight();
  inline void clear_has_beam_weight();
  inline void set_has_commission_uid();
  inline void clear_has_commission_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* beam_uid_;
  ::std::string* beam_name_;
  ::std::string* beam_description_;
  bool isvisible_;
  bool isautocreateddescription_;
  bool isautotrackingshape_;
  bool isshieldingblockautotrackingshape_;
  float dose_rate_;
  ::google::protobuf::int32 algorithm_type_;
  bool isjoined_;
  bool isjawfollow_;
  float beam_mu_;
  float beam_weight_;
  ::std::string* commission_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoBeamUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoBeamUpdate

// required string beam_uid = 1;
inline bool RtTpsProtoBeamUpdate::has_beam_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_beam_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoBeamUpdate::clear_has_beam_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoBeamUpdate::clear_beam_uid() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    beam_uid_->clear();
  }
  clear_has_beam_uid();
}
inline const ::std::string& RtTpsProtoBeamUpdate::beam_uid() const {
  return *beam_uid_;
}
inline void RtTpsProtoBeamUpdate::set_beam_uid(const ::std::string& value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_uid(const char* value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_uid(const char* value, size_t size) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamUpdate::mutable_beam_uid() {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  return beam_uid_;
}
inline ::std::string* RtTpsProtoBeamUpdate::release_beam_uid() {
  clear_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_uid_;
    beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isVisible = 2;
inline bool RtTpsProtoBeamUpdate::has_isvisible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isvisible() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoBeamUpdate::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool RtTpsProtoBeamUpdate::isvisible() const {
  return isvisible_;
}
inline void RtTpsProtoBeamUpdate::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// optional string beam_name = 3;
inline bool RtTpsProtoBeamUpdate::has_beam_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_beam_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoBeamUpdate::clear_has_beam_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoBeamUpdate::clear_beam_name() {
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    beam_name_->clear();
  }
  clear_has_beam_name();
}
inline const ::std::string& RtTpsProtoBeamUpdate::beam_name() const {
  return *beam_name_;
}
inline void RtTpsProtoBeamUpdate::set_beam_name(const ::std::string& value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_name(const char* value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_name(const char* value, size_t size) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamUpdate::mutable_beam_name() {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  return beam_name_;
}
inline ::std::string* RtTpsProtoBeamUpdate::release_beam_name() {
  clear_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_name_;
    beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string beam_description = 4;
inline bool RtTpsProtoBeamUpdate::has_beam_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_beam_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoBeamUpdate::clear_has_beam_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoBeamUpdate::clear_beam_description() {
  if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
    beam_description_->clear();
  }
  clear_has_beam_description();
}
inline const ::std::string& RtTpsProtoBeamUpdate::beam_description() const {
  return *beam_description_;
}
inline void RtTpsProtoBeamUpdate::set_beam_description(const ::std::string& value) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_description(const char* value) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_beam_description(const char* value, size_t size) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamUpdate::mutable_beam_description() {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  return beam_description_;
}
inline ::std::string* RtTpsProtoBeamUpdate::release_beam_description() {
  clear_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_description_;
    beam_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isAutoCreatedDescription = 5;
inline bool RtTpsProtoBeamUpdate::has_isautocreateddescription() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isautocreateddescription() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isautocreateddescription() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoBeamUpdate::clear_isautocreateddescription() {
  isautocreateddescription_ = false;
  clear_has_isautocreateddescription();
}
inline bool RtTpsProtoBeamUpdate::isautocreateddescription() const {
  return isautocreateddescription_;
}
inline void RtTpsProtoBeamUpdate::set_isautocreateddescription(bool value) {
  set_has_isautocreateddescription();
  isautocreateddescription_ = value;
}

// optional bool isAutoTrackingShape = 6;
inline bool RtTpsProtoBeamUpdate::has_isautotrackingshape() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isautotrackingshape() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isautotrackingshape() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoBeamUpdate::clear_isautotrackingshape() {
  isautotrackingshape_ = false;
  clear_has_isautotrackingshape();
}
inline bool RtTpsProtoBeamUpdate::isautotrackingshape() const {
  return isautotrackingshape_;
}
inline void RtTpsProtoBeamUpdate::set_isautotrackingshape(bool value) {
  set_has_isautotrackingshape();
  isautotrackingshape_ = value;
}

// optional bool isShieldingBlockAutoTrackingShape = 7;
inline bool RtTpsProtoBeamUpdate::has_isshieldingblockautotrackingshape() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isshieldingblockautotrackingshape() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isshieldingblockautotrackingshape() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoBeamUpdate::clear_isshieldingblockautotrackingshape() {
  isshieldingblockautotrackingshape_ = false;
  clear_has_isshieldingblockautotrackingshape();
}
inline bool RtTpsProtoBeamUpdate::isshieldingblockautotrackingshape() const {
  return isshieldingblockautotrackingshape_;
}
inline void RtTpsProtoBeamUpdate::set_isshieldingblockautotrackingshape(bool value) {
  set_has_isshieldingblockautotrackingshape();
  isshieldingblockautotrackingshape_ = value;
}

// optional float dose_rate = 8;
inline bool RtTpsProtoBeamUpdate::has_dose_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_dose_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoBeamUpdate::clear_has_dose_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoBeamUpdate::clear_dose_rate() {
  dose_rate_ = 0;
  clear_has_dose_rate();
}
inline float RtTpsProtoBeamUpdate::dose_rate() const {
  return dose_rate_;
}
inline void RtTpsProtoBeamUpdate::set_dose_rate(float value) {
  set_has_dose_rate();
  dose_rate_ = value;
}

// optional bool isJoined = 9;
inline bool RtTpsProtoBeamUpdate::has_isjoined() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isjoined() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isjoined() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoBeamUpdate::clear_isjoined() {
  isjoined_ = false;
  clear_has_isjoined();
}
inline bool RtTpsProtoBeamUpdate::isjoined() const {
  return isjoined_;
}
inline void RtTpsProtoBeamUpdate::set_isjoined(bool value) {
  set_has_isjoined();
  isjoined_ = value;
}

// optional int32 algorithm_type = 10;
inline bool RtTpsProtoBeamUpdate::has_algorithm_type() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_algorithm_type() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoBeamUpdate::clear_has_algorithm_type() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoBeamUpdate::clear_algorithm_type() {
  algorithm_type_ = 0;
  clear_has_algorithm_type();
}
inline ::google::protobuf::int32 RtTpsProtoBeamUpdate::algorithm_type() const {
  return algorithm_type_;
}
inline void RtTpsProtoBeamUpdate::set_algorithm_type(::google::protobuf::int32 value) {
  set_has_algorithm_type();
  algorithm_type_ = value;
}

// optional bool isJawFollow = 11;
inline bool RtTpsProtoBeamUpdate::has_isjawfollow() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_isjawfollow() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoBeamUpdate::clear_has_isjawfollow() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoBeamUpdate::clear_isjawfollow() {
  isjawfollow_ = false;
  clear_has_isjawfollow();
}
inline bool RtTpsProtoBeamUpdate::isjawfollow() const {
  return isjawfollow_;
}
inline void RtTpsProtoBeamUpdate::set_isjawfollow(bool value) {
  set_has_isjawfollow();
  isjawfollow_ = value;
}

// optional float beam_mu = 12;
inline bool RtTpsProtoBeamUpdate::has_beam_mu() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_beam_mu() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoBeamUpdate::clear_has_beam_mu() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoBeamUpdate::clear_beam_mu() {
  beam_mu_ = 0;
  clear_has_beam_mu();
}
inline float RtTpsProtoBeamUpdate::beam_mu() const {
  return beam_mu_;
}
inline void RtTpsProtoBeamUpdate::set_beam_mu(float value) {
  set_has_beam_mu();
  beam_mu_ = value;
}

// optional float beam_weight = 13;
inline bool RtTpsProtoBeamUpdate::has_beam_weight() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_beam_weight() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoBeamUpdate::clear_has_beam_weight() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoBeamUpdate::clear_beam_weight() {
  beam_weight_ = 0;
  clear_has_beam_weight();
}
inline float RtTpsProtoBeamUpdate::beam_weight() const {
  return beam_weight_;
}
inline void RtTpsProtoBeamUpdate::set_beam_weight(float value) {
  set_has_beam_weight();
  beam_weight_ = value;
}

// optional string commission_uid = 14;
inline bool RtTpsProtoBeamUpdate::has_commission_uid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoBeamUpdate::set_has_commission_uid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoBeamUpdate::clear_has_commission_uid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoBeamUpdate::clear_commission_uid() {
  if (commission_uid_ != &::google::protobuf::internal::kEmptyString) {
    commission_uid_->clear();
  }
  clear_has_commission_uid();
}
inline const ::std::string& RtTpsProtoBeamUpdate::commission_uid() const {
  return *commission_uid_;
}
inline void RtTpsProtoBeamUpdate::set_commission_uid(const ::std::string& value) {
  set_has_commission_uid();
  if (commission_uid_ == &::google::protobuf::internal::kEmptyString) {
    commission_uid_ = new ::std::string;
  }
  commission_uid_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_commission_uid(const char* value) {
  set_has_commission_uid();
  if (commission_uid_ == &::google::protobuf::internal::kEmptyString) {
    commission_uid_ = new ::std::string;
  }
  commission_uid_->assign(value);
}
inline void RtTpsProtoBeamUpdate::set_commission_uid(const char* value, size_t size) {
  set_has_commission_uid();
  if (commission_uid_ == &::google::protobuf::internal::kEmptyString) {
    commission_uid_ = new ::std::string;
  }
  commission_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamUpdate::mutable_commission_uid() {
  set_has_commission_uid();
  if (commission_uid_ == &::google::protobuf::internal::kEmptyString) {
    commission_uid_ = new ::std::string;
  }
  return commission_uid_;
}
inline ::std::string* RtTpsProtoBeamUpdate::release_commission_uid() {
  clear_has_commission_uid();
  if (commission_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commission_uid_;
    commission_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fbeam_5fupdate_2eproto__INCLUDED
