// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_mesh.proto

#ifndef PROTOBUF_rt_5ftps_5fmesh_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fmesh_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto();

class RT_TPS_POINT3D;
class RT_TPS_VECTOR3D;
class RT_TPS_TRIANGLEINDEX;
class RT_TPS_MESH;

// ===================================================================

class RT_TPS_POINT3D : public ::google::protobuf::Message {
 public:
  RT_TPS_POINT3D();
  virtual ~RT_TPS_POINT3D();
  
  RT_TPS_POINT3D(const RT_TPS_POINT3D& from);
  
  inline RT_TPS_POINT3D& operator=(const RT_TPS_POINT3D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_POINT3D& default_instance();
  
  void Swap(RT_TPS_POINT3D* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_POINT3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_POINT3D& from);
  void MergeFrom(const RT_TPS_POINT3D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // optional double preserve = 4;
  inline bool has_preserve() const;
  inline void clear_preserve();
  static const int kPreserveFieldNumber = 4;
  inline double preserve() const;
  inline void set_preserve(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_POINT3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_preserve();
  inline void clear_has_preserve();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double z_;
  double preserve_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_POINT3D* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_VECTOR3D : public ::google::protobuf::Message {
 public:
  RT_TPS_VECTOR3D();
  virtual ~RT_TPS_VECTOR3D();
  
  RT_TPS_VECTOR3D(const RT_TPS_VECTOR3D& from);
  
  inline RT_TPS_VECTOR3D& operator=(const RT_TPS_VECTOR3D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_VECTOR3D& default_instance();
  
  void Swap(RT_TPS_VECTOR3D* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_VECTOR3D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_VECTOR3D& from);
  void MergeFrom(const RT_TPS_VECTOR3D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // optional double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // optional double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_VECTOR3D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  double z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_VECTOR3D* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_TRIANGLEINDEX : public ::google::protobuf::Message {
 public:
  RT_TPS_TRIANGLEINDEX();
  virtual ~RT_TPS_TRIANGLEINDEX();
  
  RT_TPS_TRIANGLEINDEX(const RT_TPS_TRIANGLEINDEX& from);
  
  inline RT_TPS_TRIANGLEINDEX& operator=(const RT_TPS_TRIANGLEINDEX& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_TRIANGLEINDEX& default_instance();
  
  void Swap(RT_TPS_TRIANGLEINDEX* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_TRIANGLEINDEX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_TRIANGLEINDEX& from);
  void MergeFrom(const RT_TPS_TRIANGLEINDEX& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 index1 = 1;
  inline bool has_index1() const;
  inline void clear_index1();
  static const int kIndex1FieldNumber = 1;
  inline ::google::protobuf::int32 index1() const;
  inline void set_index1(::google::protobuf::int32 value);
  
  // optional int32 index2 = 2;
  inline bool has_index2() const;
  inline void clear_index2();
  static const int kIndex2FieldNumber = 2;
  inline ::google::protobuf::int32 index2() const;
  inline void set_index2(::google::protobuf::int32 value);
  
  // optional int32 index3 = 3;
  inline bool has_index3() const;
  inline void clear_index3();
  static const int kIndex3FieldNumber = 3;
  inline ::google::protobuf::int32 index3() const;
  inline void set_index3(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_TRIANGLEINDEX)
 private:
  inline void set_has_index1();
  inline void clear_has_index1();
  inline void set_has_index2();
  inline void clear_has_index2();
  inline void set_has_index3();
  inline void clear_has_index3();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 index1_;
  ::google::protobuf::int32 index2_;
  ::google::protobuf::int32 index3_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_TRIANGLEINDEX* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_MESH : public ::google::protobuf::Message {
 public:
  RT_TPS_MESH();
  virtual ~RT_TPS_MESH();
  
  RT_TPS_MESH(const RT_TPS_MESH& from);
  
  inline RT_TPS_MESH& operator=(const RT_TPS_MESH& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_MESH& default_instance();
  
  void Swap(RT_TPS_MESH* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_MESH* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_MESH& from);
  void MergeFrom(const RT_TPS_MESH& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RT_TPS_POINT3D points = 1;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 1;
  inline const ::tps::proto::RT_TPS_POINT3D& points(int index) const;
  inline ::tps::proto::RT_TPS_POINT3D* mutable_points(int index);
  inline ::tps::proto::RT_TPS_POINT3D* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT3D >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT3D >*
      mutable_points();
  
  // repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
  inline int normals_size() const;
  inline void clear_normals();
  static const int kNormalsFieldNumber = 2;
  inline const ::tps::proto::RT_TPS_VECTOR3D& normals(int index) const;
  inline ::tps::proto::RT_TPS_VECTOR3D* mutable_normals(int index);
  inline ::tps::proto::RT_TPS_VECTOR3D* add_normals();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_VECTOR3D >&
      normals() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_VECTOR3D >*
      mutable_normals();
  
  // repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
  inline int triangleindices_size() const;
  inline void clear_triangleindices();
  static const int kTriangleIndicesFieldNumber = 3;
  inline const ::tps::proto::RT_TPS_TRIANGLEINDEX& triangleindices(int index) const;
  inline ::tps::proto::RT_TPS_TRIANGLEINDEX* mutable_triangleindices(int index);
  inline ::tps::proto::RT_TPS_TRIANGLEINDEX* add_triangleindices();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_TRIANGLEINDEX >&
      triangleindices() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_TRIANGLEINDEX >*
      mutable_triangleindices();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_MESH)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT3D > points_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_VECTOR3D > normals_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_TRIANGLEINDEX > triangleindices_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fmesh_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fmesh_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_MESH* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_POINT3D

// required double x = 1;
inline bool RT_TPS_POINT3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_POINT3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_POINT3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_POINT3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RT_TPS_POINT3D::x() const {
  return x_;
}
inline void RT_TPS_POINT3D::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool RT_TPS_POINT3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_POINT3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_POINT3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_POINT3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RT_TPS_POINT3D::y() const {
  return y_;
}
inline void RT_TPS_POINT3D::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required double z = 3;
inline bool RT_TPS_POINT3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_POINT3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_POINT3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_POINT3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double RT_TPS_POINT3D::z() const {
  return z_;
}
inline void RT_TPS_POINT3D::set_z(double value) {
  set_has_z();
  z_ = value;
}

// optional double preserve = 4;
inline bool RT_TPS_POINT3D::has_preserve() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_POINT3D::set_has_preserve() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_POINT3D::clear_has_preserve() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_POINT3D::clear_preserve() {
  preserve_ = 0;
  clear_has_preserve();
}
inline double RT_TPS_POINT3D::preserve() const {
  return preserve_;
}
inline void RT_TPS_POINT3D::set_preserve(double value) {
  set_has_preserve();
  preserve_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_VECTOR3D

// optional double x = 1;
inline bool RT_TPS_VECTOR3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_VECTOR3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_VECTOR3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_VECTOR3D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RT_TPS_VECTOR3D::x() const {
  return x_;
}
inline void RT_TPS_VECTOR3D::set_x(double value) {
  set_has_x();
  x_ = value;
}

// optional double y = 2;
inline bool RT_TPS_VECTOR3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_VECTOR3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_VECTOR3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_VECTOR3D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RT_TPS_VECTOR3D::y() const {
  return y_;
}
inline void RT_TPS_VECTOR3D::set_y(double value) {
  set_has_y();
  y_ = value;
}

// optional double z = 3;
inline bool RT_TPS_VECTOR3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_VECTOR3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_VECTOR3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_VECTOR3D::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double RT_TPS_VECTOR3D::z() const {
  return z_;
}
inline void RT_TPS_VECTOR3D::set_z(double value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_TRIANGLEINDEX

// optional int32 index1 = 1;
inline bool RT_TPS_TRIANGLEINDEX::has_index1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_TRIANGLEINDEX::set_has_index1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_has_index1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_index1() {
  index1_ = 0;
  clear_has_index1();
}
inline ::google::protobuf::int32 RT_TPS_TRIANGLEINDEX::index1() const {
  return index1_;
}
inline void RT_TPS_TRIANGLEINDEX::set_index1(::google::protobuf::int32 value) {
  set_has_index1();
  index1_ = value;
}

// optional int32 index2 = 2;
inline bool RT_TPS_TRIANGLEINDEX::has_index2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_TRIANGLEINDEX::set_has_index2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_has_index2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_index2() {
  index2_ = 0;
  clear_has_index2();
}
inline ::google::protobuf::int32 RT_TPS_TRIANGLEINDEX::index2() const {
  return index2_;
}
inline void RT_TPS_TRIANGLEINDEX::set_index2(::google::protobuf::int32 value) {
  set_has_index2();
  index2_ = value;
}

// optional int32 index3 = 3;
inline bool RT_TPS_TRIANGLEINDEX::has_index3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_TRIANGLEINDEX::set_has_index3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_has_index3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_TRIANGLEINDEX::clear_index3() {
  index3_ = 0;
  clear_has_index3();
}
inline ::google::protobuf::int32 RT_TPS_TRIANGLEINDEX::index3() const {
  return index3_;
}
inline void RT_TPS_TRIANGLEINDEX::set_index3(::google::protobuf::int32 value) {
  set_has_index3();
  index3_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_MESH

// repeated .tps.proto.RT_TPS_POINT3D points = 1;
inline int RT_TPS_MESH::points_size() const {
  return points_.size();
}
inline void RT_TPS_MESH::clear_points() {
  points_.Clear();
}
inline const ::tps::proto::RT_TPS_POINT3D& RT_TPS_MESH::points(int index) const {
  return points_.Get(index);
}
inline ::tps::proto::RT_TPS_POINT3D* RT_TPS_MESH::mutable_points(int index) {
  return points_.Mutable(index);
}
inline ::tps::proto::RT_TPS_POINT3D* RT_TPS_MESH::add_points() {
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT3D >&
RT_TPS_MESH::points() const {
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT3D >*
RT_TPS_MESH::mutable_points() {
  return &points_;
}

// repeated .tps.proto.RT_TPS_VECTOR3D normals = 2;
inline int RT_TPS_MESH::normals_size() const {
  return normals_.size();
}
inline void RT_TPS_MESH::clear_normals() {
  normals_.Clear();
}
inline const ::tps::proto::RT_TPS_VECTOR3D& RT_TPS_MESH::normals(int index) const {
  return normals_.Get(index);
}
inline ::tps::proto::RT_TPS_VECTOR3D* RT_TPS_MESH::mutable_normals(int index) {
  return normals_.Mutable(index);
}
inline ::tps::proto::RT_TPS_VECTOR3D* RT_TPS_MESH::add_normals() {
  return normals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_VECTOR3D >&
RT_TPS_MESH::normals() const {
  return normals_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_VECTOR3D >*
RT_TPS_MESH::mutable_normals() {
  return &normals_;
}

// repeated .tps.proto.RT_TPS_TRIANGLEINDEX triangleIndices = 3;
inline int RT_TPS_MESH::triangleindices_size() const {
  return triangleindices_.size();
}
inline void RT_TPS_MESH::clear_triangleindices() {
  triangleindices_.Clear();
}
inline const ::tps::proto::RT_TPS_TRIANGLEINDEX& RT_TPS_MESH::triangleindices(int index) const {
  return triangleindices_.Get(index);
}
inline ::tps::proto::RT_TPS_TRIANGLEINDEX* RT_TPS_MESH::mutable_triangleindices(int index) {
  return triangleindices_.Mutable(index);
}
inline ::tps::proto::RT_TPS_TRIANGLEINDEX* RT_TPS_MESH::add_triangleindices() {
  return triangleindices_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_TRIANGLEINDEX >&
RT_TPS_MESH::triangleindices() const {
  return triangleindices_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_TRIANGLEINDEX >*
RT_TPS_MESH::mutable_triangleindices() {
  return &triangleindices_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fmesh_2eproto__INCLUDED
