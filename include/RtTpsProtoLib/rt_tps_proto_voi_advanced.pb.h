// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_voi_advanced.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();

class RtTpsProtoVoiAdvanced;
class FunctionData;

// ===================================================================

class RtTpsProtoVoiAdvanced : public ::google::protobuf::Message {
 public:
  RtTpsProtoVoiAdvanced();
  virtual ~RtTpsProtoVoiAdvanced();
  
  RtTpsProtoVoiAdvanced(const RtTpsProtoVoiAdvanced& from);
  
  inline RtTpsProtoVoiAdvanced& operator=(const RtTpsProtoVoiAdvanced& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoVoiAdvanced& default_instance();
  
  void Swap(RtTpsProtoVoiAdvanced* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoVoiAdvanced* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoVoiAdvanced& from);
  void MergeFrom(const RtTpsProtoVoiAdvanced& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bool isPreview = 1;
  inline bool has_ispreview() const;
  inline void clear_ispreview();
  static const int kIsPreviewFieldNumber = 1;
  inline bool ispreview() const;
  inline void set_ispreview(bool value);
  
  // required string roiUid = 2;
  inline bool has_roiuid() const;
  inline void clear_roiuid();
  static const int kRoiUidFieldNumber = 2;
  inline const ::std::string& roiuid() const;
  inline void set_roiuid(const ::std::string& value);
  inline void set_roiuid(const char* value);
  inline void set_roiuid(const char* value, size_t size);
  inline ::std::string* mutable_roiuid();
  inline ::std::string* release_roiuid();
  
  // optional string seriesUid = 3;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUidFieldNumber = 3;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // optional int32 planningRole = 5;
  inline bool has_planningrole() const;
  inline void clear_planningrole();
  static const int kPlanningRoleFieldNumber = 5;
  inline ::google::protobuf::int32 planningrole() const;
  inline void set_planningrole(::google::protobuf::int32 value);
  
  // optional int32 subRole = 6;
  inline bool has_subrole() const;
  inline void clear_subrole();
  static const int kSubRoleFieldNumber = 6;
  inline ::google::protobuf::int32 subrole() const;
  inline void set_subrole(::google::protobuf::int32 value);
  
  // repeated float color = 7;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 7;
  inline float color(int index) const;
  inline void set_color(int index, float value);
  inline void add_color(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      color() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_color();
  
  // required bool isBasedOnDose = 8;
  inline bool has_isbasedondose() const;
  inline void clear_isbasedondose();
  static const int kIsBasedOnDoseFieldNumber = 8;
  inline bool isbasedondose() const;
  inline void set_isbasedondose(bool value);
  
  // optional string planUid = 9;
  inline bool has_planuid() const;
  inline void clear_planuid();
  static const int kPlanUidFieldNumber = 9;
  inline const ::std::string& planuid() const;
  inline void set_planuid(const ::std::string& value);
  inline void set_planuid(const char* value);
  inline void set_planuid(const char* value, size_t size);
  inline ::std::string* mutable_planuid();
  inline ::std::string* release_planuid();
  
  // optional float fromDose = 10;
  inline bool has_fromdose() const;
  inline void clear_fromdose();
  static const int kFromDoseFieldNumber = 10;
  inline float fromdose() const;
  inline void set_fromdose(float value);
  
  // optional float toDose = 11;
  inline bool has_todose() const;
  inline void clear_todose();
  static const int kToDoseFieldNumber = 11;
  inline float todose() const;
  inline void set_todose(float value);
  
  // optional string sourceROIUid = 12;
  inline bool has_sourceroiuid() const;
  inline void clear_sourceroiuid();
  static const int kSourceROIUidFieldNumber = 12;
  inline const ::std::string& sourceroiuid() const;
  inline void set_sourceroiuid(const ::std::string& value);
  inline void set_sourceroiuid(const char* value);
  inline void set_sourceroiuid(const char* value, size_t size);
  inline ::std::string* mutable_sourceroiuid();
  inline ::std::string* release_sourceroiuid();
  
  // repeated .tps.proto.FunctionData functions = 13;
  inline int functions_size() const;
  inline void clear_functions();
  static const int kFunctionsFieldNumber = 13;
  inline const ::tps::proto::FunctionData& functions(int index) const;
  inline ::tps::proto::FunctionData* mutable_functions(int index);
  inline ::tps::proto::FunctionData* add_functions();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::FunctionData >&
      functions() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::FunctionData >*
      mutable_functions();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoVoiAdvanced)
 private:
  inline void set_has_ispreview();
  inline void clear_has_ispreview();
  inline void set_has_roiuid();
  inline void clear_has_roiuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_planningrole();
  inline void clear_has_planningrole();
  inline void set_has_subrole();
  inline void clear_has_subrole();
  inline void set_has_isbasedondose();
  inline void clear_has_isbasedondose();
  inline void set_has_planuid();
  inline void clear_has_planuid();
  inline void set_has_fromdose();
  inline void clear_has_fromdose();
  inline void set_has_todose();
  inline void clear_has_todose();
  inline void set_has_sourceroiuid();
  inline void clear_has_sourceroiuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* roiuid_;
  ::std::string* seriesuid_;
  ::std::string* name_;
  bool ispreview_;
  bool isbasedondose_;
  ::google::protobuf::int32 planningrole_;
  ::google::protobuf::RepeatedField< float > color_;
  ::google::protobuf::int32 subrole_;
  float fromdose_;
  ::std::string* planuid_;
  ::std::string* sourceroiuid_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::FunctionData > functions_;
  float todose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoVoiAdvanced* default_instance_;
};
// -------------------------------------------------------------------

class FunctionData : public ::google::protobuf::Message {
 public:
  FunctionData();
  virtual ~FunctionData();
  
  FunctionData(const FunctionData& from);
  
  inline FunctionData& operator=(const FunctionData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionData& default_instance();
  
  void Swap(FunctionData* other);
  
  // implements Message ----------------------------------------------
  
  FunctionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionData& from);
  void MergeFrom(const FunctionData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);
  
  // optional int32 mirrorMode = 2;
  inline bool has_mirrormode() const;
  inline void clear_mirrormode();
  static const int kMirrorModeFieldNumber = 2;
  inline ::google::protobuf::int32 mirrormode() const;
  inline void set_mirrormode(::google::protobuf::int32 value);
  
  // optional bool isExpansion = 3;
  inline bool has_isexpansion() const;
  inline void clear_isexpansion();
  static const int kIsExpansionFieldNumber = 3;
  inline bool isexpansion() const;
  inline void set_isexpansion(bool value);
  
  // optional bool is2DMode = 4;
  inline bool has_is2dmode() const;
  inline void clear_is2dmode();
  static const int kIs2DModeFieldNumber = 4;
  inline bool is2dmode() const;
  inline void set_is2dmode(bool value);
  
  // optional bool isIsotropic = 5;
  inline bool has_isisotropic() const;
  inline void clear_isisotropic();
  static const int kIsIsotropicFieldNumber = 5;
  inline bool isisotropic() const;
  inline void set_isisotropic(bool value);
  
  // repeated float margin = 6;
  inline int margin_size() const;
  inline void clear_margin();
  static const int kMarginFieldNumber = 6;
  inline float margin(int index) const;
  inline void set_margin(int index, float value);
  inline void add_margin(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      margin() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_margin();
  
  // optional bool isToCreateRing = 7;
  inline bool has_istocreatering() const;
  inline void clear_istocreatering();
  static const int kIsToCreateRingFieldNumber = 7;
  inline bool istocreatering() const;
  inline void set_istocreatering(bool value);
  
  // optional float ringSize = 8;
  inline bool has_ringsize() const;
  inline void clear_ringsize();
  static const int kRingSizeFieldNumber = 8;
  inline float ringsize() const;
  inline void set_ringsize(float value);
  
  // optional int32 combinationMode = 9;
  inline bool has_combinationmode() const;
  inline void clear_combinationmode();
  static const int kCombinationModeFieldNumber = 9;
  inline ::google::protobuf::int32 combinationmode() const;
  inline void set_combinationmode(::google::protobuf::int32 value);
  
  // repeated string combinationRoiUids = 10;
  inline int combinationroiuids_size() const;
  inline void clear_combinationroiuids();
  static const int kCombinationRoiUidsFieldNumber = 10;
  inline const ::std::string& combinationroiuids(int index) const;
  inline ::std::string* mutable_combinationroiuids(int index);
  inline void set_combinationroiuids(int index, const ::std::string& value);
  inline void set_combinationroiuids(int index, const char* value);
  inline void set_combinationroiuids(int index, const char* value, size_t size);
  inline ::std::string* add_combinationroiuids();
  inline void add_combinationroiuids(const ::std::string& value);
  inline void add_combinationroiuids(const char* value);
  inline void add_combinationroiuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& combinationroiuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_combinationroiuids();
  
  // @@protoc_insertion_point(class_scope:tps.proto.FunctionData)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_mirrormode();
  inline void clear_has_mirrormode();
  inline void set_has_isexpansion();
  inline void clear_has_isexpansion();
  inline void set_has_is2dmode();
  inline void clear_has_is2dmode();
  inline void set_has_isisotropic();
  inline void clear_has_isisotropic();
  inline void set_has_istocreatering();
  inline void clear_has_istocreatering();
  inline void set_has_ringsize();
  inline void clear_has_ringsize();
  inline void set_has_combinationmode();
  inline void clear_has_combinationmode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 mirrormode_;
  bool isexpansion_;
  bool is2dmode_;
  bool isisotropic_;
  bool istocreatering_;
  float ringsize_;
  ::google::protobuf::RepeatedField< float > margin_;
  ::google::protobuf::RepeatedPtrField< ::std::string> combinationroiuids_;
  ::google::protobuf::int32 combinationmode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto();
  
  void InitAsDefaultInstance();
  static FunctionData* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoVoiAdvanced

// required bool isPreview = 1;
inline bool RtTpsProtoVoiAdvanced::has_ispreview() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_ispreview() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_ispreview() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoVoiAdvanced::clear_ispreview() {
  ispreview_ = false;
  clear_has_ispreview();
}
inline bool RtTpsProtoVoiAdvanced::ispreview() const {
  return ispreview_;
}
inline void RtTpsProtoVoiAdvanced::set_ispreview(bool value) {
  set_has_ispreview();
  ispreview_ = value;
}

// required string roiUid = 2;
inline bool RtTpsProtoVoiAdvanced::has_roiuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_roiuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_roiuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoVoiAdvanced::clear_roiuid() {
  if (roiuid_ != &::google::protobuf::internal::kEmptyString) {
    roiuid_->clear();
  }
  clear_has_roiuid();
}
inline const ::std::string& RtTpsProtoVoiAdvanced::roiuid() const {
  return *roiuid_;
}
inline void RtTpsProtoVoiAdvanced::set_roiuid(const ::std::string& value) {
  set_has_roiuid();
  if (roiuid_ == &::google::protobuf::internal::kEmptyString) {
    roiuid_ = new ::std::string;
  }
  roiuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_roiuid(const char* value) {
  set_has_roiuid();
  if (roiuid_ == &::google::protobuf::internal::kEmptyString) {
    roiuid_ = new ::std::string;
  }
  roiuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_roiuid(const char* value, size_t size) {
  set_has_roiuid();
  if (roiuid_ == &::google::protobuf::internal::kEmptyString) {
    roiuid_ = new ::std::string;
  }
  roiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoiAdvanced::mutable_roiuid() {
  set_has_roiuid();
  if (roiuid_ == &::google::protobuf::internal::kEmptyString) {
    roiuid_ = new ::std::string;
  }
  return roiuid_;
}
inline ::std::string* RtTpsProtoVoiAdvanced::release_roiuid() {
  clear_has_roiuid();
  if (roiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = roiuid_;
    roiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seriesUid = 3;
inline bool RtTpsProtoVoiAdvanced::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoVoiAdvanced::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RtTpsProtoVoiAdvanced::seriesuid() const {
  return *seriesuid_;
}
inline void RtTpsProtoVoiAdvanced::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoiAdvanced::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RtTpsProtoVoiAdvanced::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 4;
inline bool RtTpsProtoVoiAdvanced::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoVoiAdvanced::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RtTpsProtoVoiAdvanced::name() const {
  return *name_;
}
inline void RtTpsProtoVoiAdvanced::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoiAdvanced::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RtTpsProtoVoiAdvanced::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 planningRole = 5;
inline bool RtTpsProtoVoiAdvanced::has_planningrole() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_planningrole() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_planningrole() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoVoiAdvanced::clear_planningrole() {
  planningrole_ = 0;
  clear_has_planningrole();
}
inline ::google::protobuf::int32 RtTpsProtoVoiAdvanced::planningrole() const {
  return planningrole_;
}
inline void RtTpsProtoVoiAdvanced::set_planningrole(::google::protobuf::int32 value) {
  set_has_planningrole();
  planningrole_ = value;
}

// optional int32 subRole = 6;
inline bool RtTpsProtoVoiAdvanced::has_subrole() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_subrole() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_subrole() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoVoiAdvanced::clear_subrole() {
  subrole_ = 0;
  clear_has_subrole();
}
inline ::google::protobuf::int32 RtTpsProtoVoiAdvanced::subrole() const {
  return subrole_;
}
inline void RtTpsProtoVoiAdvanced::set_subrole(::google::protobuf::int32 value) {
  set_has_subrole();
  subrole_ = value;
}

// repeated float color = 7;
inline int RtTpsProtoVoiAdvanced::color_size() const {
  return color_.size();
}
inline void RtTpsProtoVoiAdvanced::clear_color() {
  color_.Clear();
}
inline float RtTpsProtoVoiAdvanced::color(int index) const {
  return color_.Get(index);
}
inline void RtTpsProtoVoiAdvanced::set_color(int index, float value) {
  color_.Set(index, value);
}
inline void RtTpsProtoVoiAdvanced::add_color(float value) {
  color_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RtTpsProtoVoiAdvanced::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
RtTpsProtoVoiAdvanced::mutable_color() {
  return &color_;
}

// required bool isBasedOnDose = 8;
inline bool RtTpsProtoVoiAdvanced::has_isbasedondose() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_isbasedondose() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_isbasedondose() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoVoiAdvanced::clear_isbasedondose() {
  isbasedondose_ = false;
  clear_has_isbasedondose();
}
inline bool RtTpsProtoVoiAdvanced::isbasedondose() const {
  return isbasedondose_;
}
inline void RtTpsProtoVoiAdvanced::set_isbasedondose(bool value) {
  set_has_isbasedondose();
  isbasedondose_ = value;
}

// optional string planUid = 9;
inline bool RtTpsProtoVoiAdvanced::has_planuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_planuid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_planuid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoVoiAdvanced::clear_planuid() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    planuid_->clear();
  }
  clear_has_planuid();
}
inline const ::std::string& RtTpsProtoVoiAdvanced::planuid() const {
  return *planuid_;
}
inline void RtTpsProtoVoiAdvanced::set_planuid(const ::std::string& value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_planuid(const char* value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_planuid(const char* value, size_t size) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoiAdvanced::mutable_planuid() {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  return planuid_;
}
inline ::std::string* RtTpsProtoVoiAdvanced::release_planuid() {
  clear_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planuid_;
    planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float fromDose = 10;
inline bool RtTpsProtoVoiAdvanced::has_fromdose() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_fromdose() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_fromdose() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoVoiAdvanced::clear_fromdose() {
  fromdose_ = 0;
  clear_has_fromdose();
}
inline float RtTpsProtoVoiAdvanced::fromdose() const {
  return fromdose_;
}
inline void RtTpsProtoVoiAdvanced::set_fromdose(float value) {
  set_has_fromdose();
  fromdose_ = value;
}

// optional float toDose = 11;
inline bool RtTpsProtoVoiAdvanced::has_todose() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_todose() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_todose() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoVoiAdvanced::clear_todose() {
  todose_ = 0;
  clear_has_todose();
}
inline float RtTpsProtoVoiAdvanced::todose() const {
  return todose_;
}
inline void RtTpsProtoVoiAdvanced::set_todose(float value) {
  set_has_todose();
  todose_ = value;
}

// optional string sourceROIUid = 12;
inline bool RtTpsProtoVoiAdvanced::has_sourceroiuid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoVoiAdvanced::set_has_sourceroiuid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoVoiAdvanced::clear_has_sourceroiuid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoVoiAdvanced::clear_sourceroiuid() {
  if (sourceroiuid_ != &::google::protobuf::internal::kEmptyString) {
    sourceroiuid_->clear();
  }
  clear_has_sourceroiuid();
}
inline const ::std::string& RtTpsProtoVoiAdvanced::sourceroiuid() const {
  return *sourceroiuid_;
}
inline void RtTpsProtoVoiAdvanced::set_sourceroiuid(const ::std::string& value) {
  set_has_sourceroiuid();
  if (sourceroiuid_ == &::google::protobuf::internal::kEmptyString) {
    sourceroiuid_ = new ::std::string;
  }
  sourceroiuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_sourceroiuid(const char* value) {
  set_has_sourceroiuid();
  if (sourceroiuid_ == &::google::protobuf::internal::kEmptyString) {
    sourceroiuid_ = new ::std::string;
  }
  sourceroiuid_->assign(value);
}
inline void RtTpsProtoVoiAdvanced::set_sourceroiuid(const char* value, size_t size) {
  set_has_sourceroiuid();
  if (sourceroiuid_ == &::google::protobuf::internal::kEmptyString) {
    sourceroiuid_ = new ::std::string;
  }
  sourceroiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoVoiAdvanced::mutable_sourceroiuid() {
  set_has_sourceroiuid();
  if (sourceroiuid_ == &::google::protobuf::internal::kEmptyString) {
    sourceroiuid_ = new ::std::string;
  }
  return sourceroiuid_;
}
inline ::std::string* RtTpsProtoVoiAdvanced::release_sourceroiuid() {
  clear_has_sourceroiuid();
  if (sourceroiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sourceroiuid_;
    sourceroiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tps.proto.FunctionData functions = 13;
inline int RtTpsProtoVoiAdvanced::functions_size() const {
  return functions_.size();
}
inline void RtTpsProtoVoiAdvanced::clear_functions() {
  functions_.Clear();
}
inline const ::tps::proto::FunctionData& RtTpsProtoVoiAdvanced::functions(int index) const {
  return functions_.Get(index);
}
inline ::tps::proto::FunctionData* RtTpsProtoVoiAdvanced::mutable_functions(int index) {
  return functions_.Mutable(index);
}
inline ::tps::proto::FunctionData* RtTpsProtoVoiAdvanced::add_functions() {
  return functions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::FunctionData >&
RtTpsProtoVoiAdvanced::functions() const {
  return functions_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::FunctionData >*
RtTpsProtoVoiAdvanced::mutable_functions() {
  return &functions_;
}

// -------------------------------------------------------------------

// FunctionData

// required int32 mode = 1;
inline bool FunctionData::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FunctionData::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FunctionData::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FunctionData::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 FunctionData::mode() const {
  return mode_;
}
inline void FunctionData::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
}

// optional int32 mirrorMode = 2;
inline bool FunctionData::has_mirrormode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FunctionData::set_has_mirrormode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FunctionData::clear_has_mirrormode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FunctionData::clear_mirrormode() {
  mirrormode_ = 0;
  clear_has_mirrormode();
}
inline ::google::protobuf::int32 FunctionData::mirrormode() const {
  return mirrormode_;
}
inline void FunctionData::set_mirrormode(::google::protobuf::int32 value) {
  set_has_mirrormode();
  mirrormode_ = value;
}

// optional bool isExpansion = 3;
inline bool FunctionData::has_isexpansion() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FunctionData::set_has_isexpansion() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FunctionData::clear_has_isexpansion() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FunctionData::clear_isexpansion() {
  isexpansion_ = false;
  clear_has_isexpansion();
}
inline bool FunctionData::isexpansion() const {
  return isexpansion_;
}
inline void FunctionData::set_isexpansion(bool value) {
  set_has_isexpansion();
  isexpansion_ = value;
}

// optional bool is2DMode = 4;
inline bool FunctionData::has_is2dmode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FunctionData::set_has_is2dmode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FunctionData::clear_has_is2dmode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FunctionData::clear_is2dmode() {
  is2dmode_ = false;
  clear_has_is2dmode();
}
inline bool FunctionData::is2dmode() const {
  return is2dmode_;
}
inline void FunctionData::set_is2dmode(bool value) {
  set_has_is2dmode();
  is2dmode_ = value;
}

// optional bool isIsotropic = 5;
inline bool FunctionData::has_isisotropic() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FunctionData::set_has_isisotropic() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FunctionData::clear_has_isisotropic() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FunctionData::clear_isisotropic() {
  isisotropic_ = false;
  clear_has_isisotropic();
}
inline bool FunctionData::isisotropic() const {
  return isisotropic_;
}
inline void FunctionData::set_isisotropic(bool value) {
  set_has_isisotropic();
  isisotropic_ = value;
}

// repeated float margin = 6;
inline int FunctionData::margin_size() const {
  return margin_.size();
}
inline void FunctionData::clear_margin() {
  margin_.Clear();
}
inline float FunctionData::margin(int index) const {
  return margin_.Get(index);
}
inline void FunctionData::set_margin(int index, float value) {
  margin_.Set(index, value);
}
inline void FunctionData::add_margin(float value) {
  margin_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
FunctionData::margin() const {
  return margin_;
}
inline ::google::protobuf::RepeatedField< float >*
FunctionData::mutable_margin() {
  return &margin_;
}

// optional bool isToCreateRing = 7;
inline bool FunctionData::has_istocreatering() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FunctionData::set_has_istocreatering() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FunctionData::clear_has_istocreatering() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FunctionData::clear_istocreatering() {
  istocreatering_ = false;
  clear_has_istocreatering();
}
inline bool FunctionData::istocreatering() const {
  return istocreatering_;
}
inline void FunctionData::set_istocreatering(bool value) {
  set_has_istocreatering();
  istocreatering_ = value;
}

// optional float ringSize = 8;
inline bool FunctionData::has_ringsize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FunctionData::set_has_ringsize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FunctionData::clear_has_ringsize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FunctionData::clear_ringsize() {
  ringsize_ = 0;
  clear_has_ringsize();
}
inline float FunctionData::ringsize() const {
  return ringsize_;
}
inline void FunctionData::set_ringsize(float value) {
  set_has_ringsize();
  ringsize_ = value;
}

// optional int32 combinationMode = 9;
inline bool FunctionData::has_combinationmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FunctionData::set_has_combinationmode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FunctionData::clear_has_combinationmode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FunctionData::clear_combinationmode() {
  combinationmode_ = 0;
  clear_has_combinationmode();
}
inline ::google::protobuf::int32 FunctionData::combinationmode() const {
  return combinationmode_;
}
inline void FunctionData::set_combinationmode(::google::protobuf::int32 value) {
  set_has_combinationmode();
  combinationmode_ = value;
}

// repeated string combinationRoiUids = 10;
inline int FunctionData::combinationroiuids_size() const {
  return combinationroiuids_.size();
}
inline void FunctionData::clear_combinationroiuids() {
  combinationroiuids_.Clear();
}
inline const ::std::string& FunctionData::combinationroiuids(int index) const {
  return combinationroiuids_.Get(index);
}
inline ::std::string* FunctionData::mutable_combinationroiuids(int index) {
  return combinationroiuids_.Mutable(index);
}
inline void FunctionData::set_combinationroiuids(int index, const ::std::string& value) {
  combinationroiuids_.Mutable(index)->assign(value);
}
inline void FunctionData::set_combinationroiuids(int index, const char* value) {
  combinationroiuids_.Mutable(index)->assign(value);
}
inline void FunctionData::set_combinationroiuids(int index, const char* value, size_t size) {
  combinationroiuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionData::add_combinationroiuids() {
  return combinationroiuids_.Add();
}
inline void FunctionData::add_combinationroiuids(const ::std::string& value) {
  combinationroiuids_.Add()->assign(value);
}
inline void FunctionData::add_combinationroiuids(const char* value) {
  combinationroiuids_.Add()->assign(value);
}
inline void FunctionData::add_combinationroiuids(const char* value, size_t size) {
  combinationroiuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
FunctionData::combinationroiuids() const {
  return combinationroiuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
FunctionData::mutable_combinationroiuids() {
  return &combinationroiuids_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fvoi_5fadvanced_2eproto__INCLUDED
