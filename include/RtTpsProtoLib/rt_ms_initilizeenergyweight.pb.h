// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_ms_initilizeenergyweight.proto

#ifndef PROTOBUF_rt_5fms_5finitilizeenergyweight_2eproto__INCLUDED
#define PROTOBUF_rt_5fms_5finitilizeenergyweight_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();
void protobuf_AssignDesc_rt_5fms_5finitilizeenergyweight_2eproto();
void protobuf_ShutdownFile_rt_5fms_5finitilizeenergyweight_2eproto();

class RT_MS_PhoEnergyWeight;
class RT_MS_PhoSpectrum;

// ===================================================================

class RT_MS_PhoEnergyWeight : public ::google::protobuf::Message {
 public:
  RT_MS_PhoEnergyWeight();
  virtual ~RT_MS_PhoEnergyWeight();
  
  RT_MS_PhoEnergyWeight(const RT_MS_PhoEnergyWeight& from);
  
  inline RT_MS_PhoEnergyWeight& operator=(const RT_MS_PhoEnergyWeight& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PhoEnergyWeight& default_instance();
  
  void Swap(RT_MS_PhoEnergyWeight* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PhoEnergyWeight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PhoEnergyWeight& from);
  void MergeFrom(const RT_MS_PhoEnergyWeight& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float energy = 1;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 1;
  inline float energy() const;
  inline void set_energy(float value);
  
  // optional float weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight() const;
  inline void set_weight(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PhoEnergyWeight)
 private:
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float energy_;
  float weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5finitilizeenergyweight_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PhoEnergyWeight* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PhoSpectrum : public ::google::protobuf::Message {
 public:
  RT_MS_PhoSpectrum();
  virtual ~RT_MS_PhoSpectrum();
  
  RT_MS_PhoSpectrum(const RT_MS_PhoSpectrum& from);
  
  inline RT_MS_PhoSpectrum& operator=(const RT_MS_PhoSpectrum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PhoSpectrum& default_instance();
  
  void Swap(RT_MS_PhoSpectrum* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PhoSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PhoSpectrum& from);
  void MergeFrom(const RT_MS_PhoSpectrum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string UID = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // optional float minEnergy = 2;
  inline bool has_minenergy() const;
  inline void clear_minenergy();
  static const int kMinEnergyFieldNumber = 2;
  inline float minenergy() const;
  inline void set_minenergy(float value);
  
  // optional float maxEnergy = 3;
  inline bool has_maxenergy() const;
  inline void clear_maxenergy();
  static const int kMaxEnergyFieldNumber = 3;
  inline float maxenergy() const;
  inline void set_maxenergy(float value);
  
  // repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
  inline int energyweightinfolist_size() const;
  inline void clear_energyweightinfolist();
  static const int kEnergyWeightInfoListFieldNumber = 4;
  inline const ::ms::proto::RT_MS_PhoEnergyWeight& energyweightinfolist(int index) const;
  inline ::ms::proto::RT_MS_PhoEnergyWeight* mutable_energyweightinfolist(int index);
  inline ::ms::proto::RT_MS_PhoEnergyWeight* add_energyweightinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PhoEnergyWeight >&
      energyweightinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PhoEnergyWeight >*
      mutable_energyweightinfolist();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PhoSpectrum)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_minenergy();
  inline void clear_has_minenergy();
  inline void set_has_maxenergy();
  inline void clear_has_maxenergy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  float minenergy_;
  float maxenergy_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PhoEnergyWeight > energyweightinfolist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5finitilizeenergyweight_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5finitilizeenergyweight_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PhoSpectrum* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_PhoEnergyWeight

// optional float energy = 1;
inline bool RT_MS_PhoEnergyWeight::has_energy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PhoEnergyWeight::set_has_energy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PhoEnergyWeight::clear_has_energy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PhoEnergyWeight::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline float RT_MS_PhoEnergyWeight::energy() const {
  return energy_;
}
inline void RT_MS_PhoEnergyWeight::set_energy(float value) {
  set_has_energy();
  energy_ = value;
}

// optional float weight = 2;
inline bool RT_MS_PhoEnergyWeight::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PhoEnergyWeight::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PhoEnergyWeight::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PhoEnergyWeight::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float RT_MS_PhoEnergyWeight::weight() const {
  return weight_;
}
inline void RT_MS_PhoEnergyWeight::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PhoSpectrum

// optional string UID = 1;
inline bool RT_MS_PhoSpectrum::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PhoSpectrum::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PhoSpectrum::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PhoSpectrum::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RT_MS_PhoSpectrum::uid() const {
  return *uid_;
}
inline void RT_MS_PhoSpectrum::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_PhoSpectrum::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_PhoSpectrum::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PhoSpectrum::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RT_MS_PhoSpectrum::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float minEnergy = 2;
inline bool RT_MS_PhoSpectrum::has_minenergy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PhoSpectrum::set_has_minenergy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PhoSpectrum::clear_has_minenergy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PhoSpectrum::clear_minenergy() {
  minenergy_ = 0;
  clear_has_minenergy();
}
inline float RT_MS_PhoSpectrum::minenergy() const {
  return minenergy_;
}
inline void RT_MS_PhoSpectrum::set_minenergy(float value) {
  set_has_minenergy();
  minenergy_ = value;
}

// optional float maxEnergy = 3;
inline bool RT_MS_PhoSpectrum::has_maxenergy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PhoSpectrum::set_has_maxenergy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PhoSpectrum::clear_has_maxenergy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PhoSpectrum::clear_maxenergy() {
  maxenergy_ = 0;
  clear_has_maxenergy();
}
inline float RT_MS_PhoSpectrum::maxenergy() const {
  return maxenergy_;
}
inline void RT_MS_PhoSpectrum::set_maxenergy(float value) {
  set_has_maxenergy();
  maxenergy_ = value;
}

// repeated .ms.proto.RT_MS_PhoEnergyWeight energyWeightInfoList = 4;
inline int RT_MS_PhoSpectrum::energyweightinfolist_size() const {
  return energyweightinfolist_.size();
}
inline void RT_MS_PhoSpectrum::clear_energyweightinfolist() {
  energyweightinfolist_.Clear();
}
inline const ::ms::proto::RT_MS_PhoEnergyWeight& RT_MS_PhoSpectrum::energyweightinfolist(int index) const {
  return energyweightinfolist_.Get(index);
}
inline ::ms::proto::RT_MS_PhoEnergyWeight* RT_MS_PhoSpectrum::mutable_energyweightinfolist(int index) {
  return energyweightinfolist_.Mutable(index);
}
inline ::ms::proto::RT_MS_PhoEnergyWeight* RT_MS_PhoSpectrum::add_energyweightinfolist() {
  return energyweightinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PhoEnergyWeight >&
RT_MS_PhoSpectrum::energyweightinfolist() const {
  return energyweightinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PhoEnergyWeight >*
RT_MS_PhoSpectrum::mutable_energyweightinfolist() {
  return &energyweightinfolist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5fms_5finitilizeenergyweight_2eproto__INCLUDED
