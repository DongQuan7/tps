// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_simplebeam.proto

#ifndef PROTOBUF_rt_5ftps_5fsimplebeam_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fsimplebeam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        // Internal implementation detail -- do not call these.
        void  protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();
        void protobuf_AssignDesc_rt_5ftps_5fsimplebeam_2eproto();
        void protobuf_ShutdownFile_rt_5ftps_5fsimplebeam_2eproto();

        class RT_TPS_SimpleBeam;

        // ===================================================================

        class RT_TPS_SimpleBeam : public ::google::protobuf::Message {
        public:
            RT_TPS_SimpleBeam();
            virtual ~RT_TPS_SimpleBeam();

            RT_TPS_SimpleBeam(const RT_TPS_SimpleBeam& from);

            inline RT_TPS_SimpleBeam& operator=(const RT_TPS_SimpleBeam& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const RT_TPS_SimpleBeam& default_instance();

            void Swap(RT_TPS_SimpleBeam* other);

            // implements Message ----------------------------------------------

            RT_TPS_SimpleBeam* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const RT_TPS_SimpleBeam& from);
            void MergeFrom(const RT_TPS_SimpleBeam& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required float gantry_start_angle = 1;
            inline bool has_gantry_start_angle() const;
            inline void clear_gantry_start_angle();
            static const int kGantryStartAngleFieldNumber = 1;
            inline float gantry_start_angle() const;
            inline void set_gantry_start_angle(float value);

            // optional float gantry_arc_length = 2;
            inline bool has_gantry_arc_length() const;
            inline void clear_gantry_arc_length();
            static const int kGantryArcLengthFieldNumber = 2;
            inline float gantry_arc_length() const;
            inline void set_gantry_arc_length(float value);

            // optional bool is_clockwise = 3;
            inline bool has_is_clockwise() const;
            inline void clear_is_clockwise();
            static const int kIsClockwiseFieldNumber = 3;
            inline bool is_clockwise() const;
            inline void set_is_clockwise(bool value);

            // required float collimator_angle = 4;
            inline bool has_collimator_angle() const;
            inline void clear_collimator_angle();
            static const int kCollimatorAngleFieldNumber = 4;
            inline float collimator_angle() const;
            inline void set_collimator_angle(float value);

            // required float couch_angle = 5;
            inline bool has_couch_angle() const;
            inline void clear_couch_angle();
            static const int kCouchAngleFieldNumber = 5;
            inline float couch_angle() const;
            inline void set_couch_angle(float value);

            // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_SimpleBeam)
        private:
            inline void set_has_gantry_start_angle();
            inline void clear_has_gantry_start_angle();
            inline void set_has_gantry_arc_length();
            inline void clear_has_gantry_arc_length();
            inline void set_has_is_clockwise();
            inline void clear_has_is_clockwise();
            inline void set_has_collimator_angle();
            inline void clear_has_collimator_angle();
            inline void set_has_couch_angle();
            inline void clear_has_couch_angle();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            float gantry_start_angle_;
            float gantry_arc_length_;
            bool is_clockwise_;
            float collimator_angle_;
            float couch_angle_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

            friend void  protobuf_AddDesc_rt_5ftps_5fsimplebeam_2eproto();
            friend void protobuf_AssignDesc_rt_5ftps_5fsimplebeam_2eproto();
            friend void protobuf_ShutdownFile_rt_5ftps_5fsimplebeam_2eproto();

            void InitAsDefaultInstance();
            static RT_TPS_SimpleBeam* default_instance_;
        };
        // ===================================================================


        // ===================================================================

        // RT_TPS_SimpleBeam

        // required float gantry_start_angle = 1;
        inline bool RT_TPS_SimpleBeam::has_gantry_start_angle() const {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        inline void RT_TPS_SimpleBeam::set_has_gantry_start_angle() {
            _has_bits_[0] |= 0x00000001u;
        }
        inline void RT_TPS_SimpleBeam::clear_has_gantry_start_angle() {
            _has_bits_[0] &= ~0x00000001u;
        }
        inline void RT_TPS_SimpleBeam::clear_gantry_start_angle() {
            gantry_start_angle_ = 0;
            clear_has_gantry_start_angle();
        }
        inline float RT_TPS_SimpleBeam::gantry_start_angle() const {
            return gantry_start_angle_;
        }
        inline void RT_TPS_SimpleBeam::set_gantry_start_angle(float value) {
            set_has_gantry_start_angle();
            gantry_start_angle_ = value;
        }

        // optional float gantry_arc_length = 2;
        inline bool RT_TPS_SimpleBeam::has_gantry_arc_length() const {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        inline void RT_TPS_SimpleBeam::set_has_gantry_arc_length() {
            _has_bits_[0] |= 0x00000002u;
        }
        inline void RT_TPS_SimpleBeam::clear_has_gantry_arc_length() {
            _has_bits_[0] &= ~0x00000002u;
        }
        inline void RT_TPS_SimpleBeam::clear_gantry_arc_length() {
            gantry_arc_length_ = 0;
            clear_has_gantry_arc_length();
        }
        inline float RT_TPS_SimpleBeam::gantry_arc_length() const {
            return gantry_arc_length_;
        }
        inline void RT_TPS_SimpleBeam::set_gantry_arc_length(float value) {
            set_has_gantry_arc_length();
            gantry_arc_length_ = value;
        }

        // optional bool is_clockwise = 3;
        inline bool RT_TPS_SimpleBeam::has_is_clockwise() const {
            return (_has_bits_[0] & 0x00000004u) != 0;
        }
        inline void RT_TPS_SimpleBeam::set_has_is_clockwise() {
            _has_bits_[0] |= 0x00000004u;
        }
        inline void RT_TPS_SimpleBeam::clear_has_is_clockwise() {
            _has_bits_[0] &= ~0x00000004u;
        }
        inline void RT_TPS_SimpleBeam::clear_is_clockwise() {
            is_clockwise_ = false;
            clear_has_is_clockwise();
        }
        inline bool RT_TPS_SimpleBeam::is_clockwise() const {
            return is_clockwise_;
        }
        inline void RT_TPS_SimpleBeam::set_is_clockwise(bool value) {
            set_has_is_clockwise();
            is_clockwise_ = value;
        }

        // required float collimator_angle = 4;
        inline bool RT_TPS_SimpleBeam::has_collimator_angle() const {
            return (_has_bits_[0] & 0x00000008u) != 0;
        }
        inline void RT_TPS_SimpleBeam::set_has_collimator_angle() {
            _has_bits_[0] |= 0x00000008u;
        }
        inline void RT_TPS_SimpleBeam::clear_has_collimator_angle() {
            _has_bits_[0] &= ~0x00000008u;
        }
        inline void RT_TPS_SimpleBeam::clear_collimator_angle() {
            collimator_angle_ = 0;
            clear_has_collimator_angle();
        }
        inline float RT_TPS_SimpleBeam::collimator_angle() const {
            return collimator_angle_;
        }
        inline void RT_TPS_SimpleBeam::set_collimator_angle(float value) {
            set_has_collimator_angle();
            collimator_angle_ = value;
        }

        // required float couch_angle = 5;
        inline bool RT_TPS_SimpleBeam::has_couch_angle() const {
            return (_has_bits_[0] & 0x00000010u) != 0;
        }
        inline void RT_TPS_SimpleBeam::set_has_couch_angle() {
            _has_bits_[0] |= 0x00000010u;
        }
        inline void RT_TPS_SimpleBeam::clear_has_couch_angle() {
            _has_bits_[0] &= ~0x00000010u;
        }
        inline void RT_TPS_SimpleBeam::clear_couch_angle() {
            couch_angle_ = 0;
            clear_has_couch_angle();
        }
        inline float RT_TPS_SimpleBeam::couch_angle() const {
            return couch_angle_;
        }
        inline void RT_TPS_SimpleBeam::set_couch_angle(float value) {
            set_has_couch_angle();
            couch_angle_ = value;
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fsimplebeam_2eproto__INCLUDED
