// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_gallery.proto

#ifndef PROTOBUF_rt_5ftps_5fgallery_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fgallery_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();

class RT_TPS_Gallery_PatientTreeData;
class RT_TPS_Gallery_Patient;
class RT_TPS_Gallery_Course;
class RT_TPS_Gallery_EditCourse;
class RT_TPS_Gallery_EditCourseItem;
class RT_TPS_Gallery_Series;
class RT_TPS_Gallery_SeriesGroup;
class RT_TPS_Gallery_RepeatedSeriesGroup;
class RT_TPS_Gallery_CornerInfo;
class RT_TPS_Gallery_CornerInfoVisible;
class RT_TPS_Gallery_ExpandSeries;
class RT_TPS_Gallery_SliceInfo;
class RT_TPS_Gallery_SaveSeries;

// ===================================================================

class RT_TPS_Gallery_PatientTreeData : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_PatientTreeData();
  virtual ~RT_TPS_Gallery_PatientTreeData();
  
  RT_TPS_Gallery_PatientTreeData(const RT_TPS_Gallery_PatientTreeData& from);
  
  inline RT_TPS_Gallery_PatientTreeData& operator=(const RT_TPS_Gallery_PatientTreeData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_PatientTreeData& default_instance();
  
  void Swap(RT_TPS_Gallery_PatientTreeData* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_PatientTreeData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_PatientTreeData& from);
  void MergeFrom(const RT_TPS_Gallery_PatientTreeData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
  inline bool has_patient() const;
  inline void clear_patient();
  static const int kPatientFieldNumber = 1;
  inline const ::tps::proto::RT_TPS_Gallery_Patient& patient() const;
  inline ::tps::proto::RT_TPS_Gallery_Patient* mutable_patient();
  inline ::tps::proto::RT_TPS_Gallery_Patient* release_patient();
  
  // repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
  inline int courselist_size() const;
  inline void clear_courselist();
  static const int kCourseListFieldNumber = 2;
  inline const ::tps::proto::RT_TPS_Gallery_Course& courselist(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_Course* mutable_courselist(int index);
  inline ::tps::proto::RT_TPS_Gallery_Course* add_courselist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Course >&
      courselist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Course >*
      mutable_courselist();
  
  // repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
  inline int serieslist_size() const;
  inline void clear_serieslist();
  static const int kSeriesListFieldNumber = 3;
  inline const ::tps::proto::RT_TPS_Gallery_Series& serieslist(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_Series* mutable_serieslist(int index);
  inline ::tps::proto::RT_TPS_Gallery_Series* add_serieslist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Series >&
      serieslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Series >*
      mutable_serieslist();
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
  inline int seriesgroup_size() const;
  inline void clear_seriesgroup();
  static const int kSeriesGroupFieldNumber = 4;
  inline const ::tps::proto::RT_TPS_Gallery_SeriesGroup& seriesgroup(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* mutable_seriesgroup(int index);
  inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* add_seriesgroup();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >&
      seriesgroup() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >*
      mutable_seriesgroup();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_PatientTreeData)
 private:
  inline void set_has_patient();
  inline void clear_has_patient();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::tps::proto::RT_TPS_Gallery_Patient* patient_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Course > courselist_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Series > serieslist_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup > seriesgroup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_PatientTreeData* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_Patient : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_Patient();
  virtual ~RT_TPS_Gallery_Patient();
  
  RT_TPS_Gallery_Patient(const RT_TPS_Gallery_Patient& from);
  
  inline RT_TPS_Gallery_Patient& operator=(const RT_TPS_Gallery_Patient& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_Patient& default_instance();
  
  void Swap(RT_TPS_Gallery_Patient* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_Patient* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_Patient& from);
  void MergeFrom(const RT_TPS_Gallery_Patient& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string patientUID = 1;
  inline bool has_patientuid() const;
  inline void clear_patientuid();
  static const int kPatientUIDFieldNumber = 1;
  inline const ::std::string& patientuid() const;
  inline void set_patientuid(const ::std::string& value);
  inline void set_patientuid(const char* value);
  inline void set_patientuid(const char* value, size_t size);
  inline ::std::string* mutable_patientuid();
  inline ::std::string* release_patientuid();
  
  // optional string patientNamePrefix = 2;
  inline bool has_patientnameprefix() const;
  inline void clear_patientnameprefix();
  static const int kPatientNamePrefixFieldNumber = 2;
  inline const ::std::string& patientnameprefix() const;
  inline void set_patientnameprefix(const ::std::string& value);
  inline void set_patientnameprefix(const char* value);
  inline void set_patientnameprefix(const char* value, size_t size);
  inline ::std::string* mutable_patientnameprefix();
  inline ::std::string* release_patientnameprefix();
  
  // optional string patientFirstName = 3;
  inline bool has_patientfirstname() const;
  inline void clear_patientfirstname();
  static const int kPatientFirstNameFieldNumber = 3;
  inline const ::std::string& patientfirstname() const;
  inline void set_patientfirstname(const ::std::string& value);
  inline void set_patientfirstname(const char* value);
  inline void set_patientfirstname(const char* value, size_t size);
  inline ::std::string* mutable_patientfirstname();
  inline ::std::string* release_patientfirstname();
  
  // optional string patientMiddleName = 4;
  inline bool has_patientmiddlename() const;
  inline void clear_patientmiddlename();
  static const int kPatientMiddleNameFieldNumber = 4;
  inline const ::std::string& patientmiddlename() const;
  inline void set_patientmiddlename(const ::std::string& value);
  inline void set_patientmiddlename(const char* value);
  inline void set_patientmiddlename(const char* value, size_t size);
  inline ::std::string* mutable_patientmiddlename();
  inline ::std::string* release_patientmiddlename();
  
  // optional string patientLastName = 5;
  inline bool has_patientlastname() const;
  inline void clear_patientlastname();
  static const int kPatientLastNameFieldNumber = 5;
  inline const ::std::string& patientlastname() const;
  inline void set_patientlastname(const ::std::string& value);
  inline void set_patientlastname(const char* value);
  inline void set_patientlastname(const char* value, size_t size);
  inline ::std::string* mutable_patientlastname();
  inline ::std::string* release_patientlastname();
  
  // optional string patientNameSuffix = 6;
  inline bool has_patientnamesuffix() const;
  inline void clear_patientnamesuffix();
  static const int kPatientNameSuffixFieldNumber = 6;
  inline const ::std::string& patientnamesuffix() const;
  inline void set_patientnamesuffix(const ::std::string& value);
  inline void set_patientnamesuffix(const char* value);
  inline void set_patientnamesuffix(const char* value, size_t size);
  inline ::std::string* mutable_patientnamesuffix();
  inline ::std::string* release_patientnamesuffix();
  
  // optional string patientID = 7;
  inline bool has_patientid() const;
  inline void clear_patientid();
  static const int kPatientIDFieldNumber = 7;
  inline const ::std::string& patientid() const;
  inline void set_patientid(const ::std::string& value);
  inline void set_patientid(const char* value);
  inline void set_patientid(const char* value, size_t size);
  inline ::std::string* mutable_patientid();
  inline ::std::string* release_patientid();
  
  // optional int32 patientsex = 8;
  inline bool has_patientsex() const;
  inline void clear_patientsex();
  static const int kPatientsexFieldNumber = 8;
  inline ::google::protobuf::int32 patientsex() const;
  inline void set_patientsex(::google::protobuf::int32 value);
  
  // optional string patientDateOfBirth = 9;
  inline bool has_patientdateofbirth() const;
  inline void clear_patientdateofbirth();
  static const int kPatientDateOfBirthFieldNumber = 9;
  inline const ::std::string& patientdateofbirth() const;
  inline void set_patientdateofbirth(const ::std::string& value);
  inline void set_patientdateofbirth(const char* value);
  inline void set_patientdateofbirth(const char* value, size_t size);
  inline ::std::string* mutable_patientdateofbirth();
  inline ::std::string* release_patientdateofbirth();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_Patient)
 private:
  inline void set_has_patientuid();
  inline void clear_has_patientuid();
  inline void set_has_patientnameprefix();
  inline void clear_has_patientnameprefix();
  inline void set_has_patientfirstname();
  inline void clear_has_patientfirstname();
  inline void set_has_patientmiddlename();
  inline void clear_has_patientmiddlename();
  inline void set_has_patientlastname();
  inline void clear_has_patientlastname();
  inline void set_has_patientnamesuffix();
  inline void clear_has_patientnamesuffix();
  inline void set_has_patientid();
  inline void clear_has_patientid();
  inline void set_has_patientsex();
  inline void clear_has_patientsex();
  inline void set_has_patientdateofbirth();
  inline void clear_has_patientdateofbirth();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* patientuid_;
  ::std::string* patientnameprefix_;
  ::std::string* patientfirstname_;
  ::std::string* patientmiddlename_;
  ::std::string* patientlastname_;
  ::std::string* patientnamesuffix_;
  ::std::string* patientid_;
  ::std::string* patientdateofbirth_;
  ::google::protobuf::int32 patientsex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_Patient* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_Course : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_Course();
  virtual ~RT_TPS_Gallery_Course();
  
  RT_TPS_Gallery_Course(const RT_TPS_Gallery_Course& from);
  
  inline RT_TPS_Gallery_Course& operator=(const RT_TPS_Gallery_Course& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_Course& default_instance();
  
  void Swap(RT_TPS_Gallery_Course* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_Course* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_Course& from);
  void MergeFrom(const RT_TPS_Gallery_Course& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string courseUID = 1;
  inline bool has_courseuid() const;
  inline void clear_courseuid();
  static const int kCourseUIDFieldNumber = 1;
  inline const ::std::string& courseuid() const;
  inline void set_courseuid(const ::std::string& value);
  inline void set_courseuid(const char* value);
  inline void set_courseuid(const char* value, size_t size);
  inline ::std::string* mutable_courseuid();
  inline ::std::string* release_courseuid();
  
  // optional string courseName = 2;
  inline bool has_coursename() const;
  inline void clear_coursename();
  static const int kCourseNameFieldNumber = 2;
  inline const ::std::string& coursename() const;
  inline void set_coursename(const ::std::string& value);
  inline void set_coursename(const char* value);
  inline void set_coursename(const char* value, size_t size);
  inline ::std::string* mutable_coursename();
  inline ::std::string* release_coursename();
  
  // optional string patientUID = 3;
  inline bool has_patientuid() const;
  inline void clear_patientuid();
  static const int kPatientUIDFieldNumber = 3;
  inline const ::std::string& patientuid() const;
  inline void set_patientuid(const ::std::string& value);
  inline void set_patientuid(const char* value);
  inline void set_patientuid(const char* value, size_t size);
  inline ::std::string* mutable_patientuid();
  inline ::std::string* release_patientuid();
  
  // required bool hasbeamgroup = 4;
  inline bool has_hasbeamgroup() const;
  inline void clear_hasbeamgroup();
  static const int kHasbeamgroupFieldNumber = 4;
  inline bool hasbeamgroup() const;
  inline void set_hasbeamgroup(bool value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_Course)
 private:
  inline void set_has_courseuid();
  inline void clear_has_courseuid();
  inline void set_has_coursename();
  inline void clear_has_coursename();
  inline void set_has_patientuid();
  inline void clear_has_patientuid();
  inline void set_has_hasbeamgroup();
  inline void clear_has_hasbeamgroup();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* courseuid_;
  ::std::string* coursename_;
  ::std::string* patientuid_;
  bool hasbeamgroup_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_Course* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_EditCourse : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_EditCourse();
  virtual ~RT_TPS_Gallery_EditCourse();
  
  RT_TPS_Gallery_EditCourse(const RT_TPS_Gallery_EditCourse& from);
  
  inline RT_TPS_Gallery_EditCourse& operator=(const RT_TPS_Gallery_EditCourse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_EditCourse& default_instance();
  
  void Swap(RT_TPS_Gallery_EditCourse* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_EditCourse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_EditCourse& from);
  void MergeFrom(const RT_TPS_Gallery_EditCourse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string patientuid = 1;
  inline bool has_patientuid() const;
  inline void clear_patientuid();
  static const int kPatientuidFieldNumber = 1;
  inline const ::std::string& patientuid() const;
  inline void set_patientuid(const ::std::string& value);
  inline void set_patientuid(const char* value);
  inline void set_patientuid(const char* value, size_t size);
  inline ::std::string* mutable_patientuid();
  inline ::std::string* release_patientuid();
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
  inline int addedcourses_size() const;
  inline void clear_addedcourses();
  static const int kAddedcoursesFieldNumber = 2;
  inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& addedcourses(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* mutable_addedcourses(int index);
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* add_addedcourses();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
      addedcourses() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
      mutable_addedcourses();
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
  inline int deletedcourses_size() const;
  inline void clear_deletedcourses();
  static const int kDeletedcoursesFieldNumber = 3;
  inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& deletedcourses(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* mutable_deletedcourses(int index);
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* add_deletedcourses();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
      deletedcourses() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
      mutable_deletedcourses();
  
  // repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
  inline int updatedcourses_size() const;
  inline void clear_updatedcourses();
  static const int kUpdatedcoursesFieldNumber = 4;
  inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& updatedcourses(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* mutable_updatedcourses(int index);
  inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* add_updatedcourses();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
      updatedcourses() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
      mutable_updatedcourses();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_EditCourse)
 private:
  inline void set_has_patientuid();
  inline void clear_has_patientuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* patientuid_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem > addedcourses_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem > deletedcourses_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem > updatedcourses_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_EditCourse* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_EditCourseItem : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_EditCourseItem();
  virtual ~RT_TPS_Gallery_EditCourseItem();
  
  RT_TPS_Gallery_EditCourseItem(const RT_TPS_Gallery_EditCourseItem& from);
  
  inline RT_TPS_Gallery_EditCourseItem& operator=(const RT_TPS_Gallery_EditCourseItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_EditCourseItem& default_instance();
  
  void Swap(RT_TPS_Gallery_EditCourseItem* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_EditCourseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_EditCourseItem& from);
  void MergeFrom(const RT_TPS_Gallery_EditCourseItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated string addedseriesuids = 3;
  inline int addedseriesuids_size() const;
  inline void clear_addedseriesuids();
  static const int kAddedseriesuidsFieldNumber = 3;
  inline const ::std::string& addedseriesuids(int index) const;
  inline ::std::string* mutable_addedseriesuids(int index);
  inline void set_addedseriesuids(int index, const ::std::string& value);
  inline void set_addedseriesuids(int index, const char* value);
  inline void set_addedseriesuids(int index, const char* value, size_t size);
  inline ::std::string* add_addedseriesuids();
  inline void add_addedseriesuids(const ::std::string& value);
  inline void add_addedseriesuids(const char* value);
  inline void add_addedseriesuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& addedseriesuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_addedseriesuids();
  
  // repeated string removedseriesuids = 4;
  inline int removedseriesuids_size() const;
  inline void clear_removedseriesuids();
  static const int kRemovedseriesuidsFieldNumber = 4;
  inline const ::std::string& removedseriesuids(int index) const;
  inline ::std::string* mutable_removedseriesuids(int index);
  inline void set_removedseriesuids(int index, const ::std::string& value);
  inline void set_removedseriesuids(int index, const char* value);
  inline void set_removedseriesuids(int index, const char* value, size_t size);
  inline ::std::string* add_removedseriesuids();
  inline void add_removedseriesuids(const ::std::string& value);
  inline void add_removedseriesuids(const char* value);
  inline void add_removedseriesuids(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& removedseriesuids() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_removedseriesuids();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_EditCourseItem)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_name();
  inline void clear_has_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::std::string> addedseriesuids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> removedseriesuids_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_EditCourseItem* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_Series : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_Series();
  virtual ~RT_TPS_Gallery_Series();
  
  RT_TPS_Gallery_Series(const RT_TPS_Gallery_Series& from);
  
  inline RT_TPS_Gallery_Series& operator=(const RT_TPS_Gallery_Series& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_Series& default_instance();
  
  void Swap(RT_TPS_Gallery_Series* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_Series* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_Series& from);
  void MergeFrom(const RT_TPS_Gallery_Series& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string seriesUID = 1;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUIDFieldNumber = 1;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required float windowingCenter = 2;
  inline bool has_windowingcenter() const;
  inline void clear_windowingcenter();
  static const int kWindowingCenterFieldNumber = 2;
  inline float windowingcenter() const;
  inline void set_windowingcenter(float value);
  
  // required float windowingWidth = 3;
  inline bool has_windowingwidth() const;
  inline void clear_windowingwidth();
  static const int kWindowingWidthFieldNumber = 3;
  inline float windowingwidth() const;
  inline void set_windowingwidth(float value);
  
  // required int32 sliceCount = 4;
  inline bool has_slicecount() const;
  inline void clear_slicecount();
  static const int kSliceCountFieldNumber = 4;
  inline ::google::protobuf::int32 slicecount() const;
  inline void set_slicecount(::google::protobuf::int32 value);
  
  // required int32 xDimension = 5;
  inline bool has_xdimension() const;
  inline void clear_xdimension();
  static const int kXDimensionFieldNumber = 5;
  inline ::google::protobuf::int32 xdimension() const;
  inline void set_xdimension(::google::protobuf::int32 value);
  
  // required int32 yDimension = 6;
  inline bool has_ydimension() const;
  inline void clear_ydimension();
  static const int kYDimensionFieldNumber = 6;
  inline ::google::protobuf::int32 ydimension() const;
  inline void set_ydimension(::google::protobuf::int32 value);
  
  // required float xPixelSpacing = 7;
  inline bool has_xpixelspacing() const;
  inline void clear_xpixelspacing();
  static const int kXPixelSpacingFieldNumber = 7;
  inline float xpixelspacing() const;
  inline void set_xpixelspacing(float value);
  
  // required float yPixelSpacing = 8;
  inline bool has_ypixelspacing() const;
  inline void clear_ypixelspacing();
  static const int kYPixelSpacingFieldNumber = 8;
  inline float ypixelspacing() const;
  inline void set_ypixelspacing(float value);
  
  // required float sliceSpacing = 9;
  inline bool has_slicespacing() const;
  inline void clear_slicespacing();
  static const int kSliceSpacingFieldNumber = 9;
  inline float slicespacing() const;
  inline void set_slicespacing(float value);
  
  // optional string modality = 10;
  inline bool has_modality() const;
  inline void clear_modality();
  static const int kModalityFieldNumber = 10;
  inline const ::std::string& modality() const;
  inline void set_modality(const ::std::string& value);
  inline void set_modality(const char* value);
  inline void set_modality(const char* value, size_t size);
  inline ::std::string* mutable_modality();
  inline ::std::string* release_modality();
  
  // optional int32 bitAllocated = 11;
  inline bool has_bitallocated() const;
  inline void clear_bitallocated();
  static const int kBitAllocatedFieldNumber = 11;
  inline ::google::protobuf::int32 bitallocated() const;
  inline void set_bitallocated(::google::protobuf::int32 value);
  
  // optional string seriesTime = 12;
  inline bool has_seriestime() const;
  inline void clear_seriestime();
  static const int kSeriesTimeFieldNumber = 12;
  inline const ::std::string& seriestime() const;
  inline void set_seriestime(const ::std::string& value);
  inline void set_seriestime(const char* value);
  inline void set_seriestime(const char* value, size_t size);
  inline ::std::string* mutable_seriestime();
  inline ::std::string* release_seriestime();
  
  // optional string seriesDate = 13;
  inline bool has_seriesdate() const;
  inline void clear_seriesdate();
  static const int kSeriesDateFieldNumber = 13;
  inline const ::std::string& seriesdate() const;
  inline void set_seriesdate(const ::std::string& value);
  inline void set_seriesdate(const char* value);
  inline void set_seriesdate(const char* value, size_t size);
  inline ::std::string* mutable_seriesdate();
  inline ::std::string* release_seriesdate();
  
  // optional string seriesDescription = 14;
  inline bool has_seriesdescription() const;
  inline void clear_seriesdescription();
  static const int kSeriesDescriptionFieldNumber = 14;
  inline const ::std::string& seriesdescription() const;
  inline void set_seriesdescription(const ::std::string& value);
  inline void set_seriesdescription(const char* value);
  inline void set_seriesdescription(const char* value, size_t size);
  inline ::std::string* mutable_seriesdescription();
  inline ::std::string* release_seriesdescription();
  
  // optional string patientPosition = 15;
  inline bool has_patientposition() const;
  inline void clear_patientposition();
  static const int kPatientPositionFieldNumber = 15;
  inline const ::std::string& patientposition() const;
  inline void set_patientposition(const ::std::string& value);
  inline void set_patientposition(const char* value);
  inline void set_patientposition(const char* value, size_t size);
  inline ::std::string* mutable_patientposition();
  inline ::std::string* release_patientposition();
  
  // optional bytes imageSliceBuffer = 16;
  inline bool has_imageslicebuffer() const;
  inline void clear_imageslicebuffer();
  static const int kImageSliceBufferFieldNumber = 16;
  inline const ::std::string& imageslicebuffer() const;
  inline void set_imageslicebuffer(const ::std::string& value);
  inline void set_imageslicebuffer(const char* value);
  inline void set_imageslicebuffer(const void* value, size_t size);
  inline ::std::string* mutable_imageslicebuffer();
  inline ::std::string* release_imageslicebuffer();
  
  // optional bool isCopied = 17;
  inline bool has_iscopied() const;
  inline void clear_iscopied();
  static const int kIsCopiedFieldNumber = 17;
  inline bool iscopied() const;
  inline void set_iscopied(bool value);
  
  // optional int32 seriesNumber = 18;
  inline bool has_seriesnumber() const;
  inline void clear_seriesnumber();
  static const int kSeriesNumberFieldNumber = 18;
  inline ::google::protobuf::int32 seriesnumber() const;
  inline void set_seriesnumber(::google::protobuf::int32 value);
  
  // optional string frameOfReferenceUID = 19;
  inline bool has_frameofreferenceuid() const;
  inline void clear_frameofreferenceuid();
  static const int kFrameOfReferenceUIDFieldNumber = 19;
  inline const ::std::string& frameofreferenceuid() const;
  inline void set_frameofreferenceuid(const ::std::string& value);
  inline void set_frameofreferenceuid(const char* value);
  inline void set_frameofreferenceuid(const char* value, size_t size);
  inline ::std::string* mutable_frameofreferenceuid();
  inline ::std::string* release_frameofreferenceuid();
  
  // optional string ManufacturerModelName = 20;
  inline bool has_manufacturermodelname() const;
  inline void clear_manufacturermodelname();
  static const int kManufacturerModelNameFieldNumber = 20;
  inline const ::std::string& manufacturermodelname() const;
  inline void set_manufacturermodelname(const ::std::string& value);
  inline void set_manufacturermodelname(const char* value);
  inline void set_manufacturermodelname(const char* value, size_t size);
  inline ::std::string* mutable_manufacturermodelname();
  inline ::std::string* release_manufacturermodelname();
  
  // required bool hasVOI = 21;
  inline bool has_hasvoi() const;
  inline void clear_hasvoi();
  static const int kHasVOIFieldNumber = 21;
  inline bool hasvoi() const;
  inline void set_hasvoi(bool value);
  
  // optional string sliceThickness = 22;
  inline bool has_slicethickness() const;
  inline void clear_slicethickness();
  static const int kSliceThicknessFieldNumber = 22;
  inline const ::std::string& slicethickness() const;
  inline void set_slicethickness(const ::std::string& value);
  inline void set_slicethickness(const char* value);
  inline void set_slicethickness(const char* value, size_t size);
  inline ::std::string* mutable_slicethickness();
  inline ::std::string* release_slicethickness();
  
  // optional string studyID = 23;
  inline bool has_studyid() const;
  inline void clear_studyid();
  static const int kStudyIDFieldNumber = 23;
  inline const ::std::string& studyid() const;
  inline void set_studyid(const ::std::string& value);
  inline void set_studyid(const char* value);
  inline void set_studyid(const char* value, size_t size);
  inline ::std::string* mutable_studyid();
  inline ::std::string* release_studyid();
  
  // optional string studyDescription = 24;
  inline bool has_studydescription() const;
  inline void clear_studydescription();
  static const int kStudyDescriptionFieldNumber = 24;
  inline const ::std::string& studydescription() const;
  inline void set_studydescription(const ::std::string& value);
  inline void set_studydescription(const char* value);
  inline void set_studydescription(const char* value, size_t size);
  inline ::std::string* mutable_studydescription();
  inline ::std::string* release_studydescription();
  
  // optional string patientName = 25;
  inline bool has_patientname() const;
  inline void clear_patientname();
  static const int kPatientNameFieldNumber = 25;
  inline const ::std::string& patientname() const;
  inline void set_patientname(const ::std::string& value);
  inline void set_patientname(const char* value);
  inline void set_patientname(const char* value, size_t size);
  inline ::std::string* mutable_patientname();
  inline ::std::string* release_patientname();
  
  // optional string patientID = 26;
  inline bool has_patientid() const;
  inline void clear_patientid();
  static const int kPatientIDFieldNumber = 26;
  inline const ::std::string& patientid() const;
  inline void set_patientid(const ::std::string& value);
  inline void set_patientid(const char* value);
  inline void set_patientid(const char* value, size_t size);
  inline ::std::string* mutable_patientid();
  inline ::std::string* release_patientid();
  
  // optional string patientBirthday = 27;
  inline bool has_patientbirthday() const;
  inline void clear_patientbirthday();
  static const int kPatientBirthdayFieldNumber = 27;
  inline const ::std::string& patientbirthday() const;
  inline void set_patientbirthday(const ::std::string& value);
  inline void set_patientbirthday(const char* value);
  inline void set_patientbirthday(const char* value, size_t size);
  inline ::std::string* mutable_patientbirthday();
  inline ::std::string* release_patientbirthday();
  
  // optional string patientAge = 28;
  inline bool has_patientage() const;
  inline void clear_patientage();
  static const int kPatientAgeFieldNumber = 28;
  inline const ::std::string& patientage() const;
  inline void set_patientage(const ::std::string& value);
  inline void set_patientage(const char* value);
  inline void set_patientage(const char* value, size_t size);
  inline ::std::string* mutable_patientage();
  inline ::std::string* release_patientage();
  
  // optional string patientSex = 29;
  inline bool has_patientsex() const;
  inline void clear_patientsex();
  static const int kPatientSexFieldNumber = 29;
  inline const ::std::string& patientsex() const;
  inline void set_patientsex(const ::std::string& value);
  inline void set_patientsex(const char* value);
  inline void set_patientsex(const char* value, size_t size);
  inline ::std::string* mutable_patientsex();
  inline ::std::string* release_patientsex();
  
  // optional string institutionName = 30;
  inline bool has_institutionname() const;
  inline void clear_institutionname();
  static const int kInstitutionNameFieldNumber = 30;
  inline const ::std::string& institutionname() const;
  inline void set_institutionname(const ::std::string& value);
  inline void set_institutionname(const char* value);
  inline void set_institutionname(const char* value, size_t size);
  inline ::std::string* mutable_institutionname();
  inline ::std::string* release_institutionname();
  
  // optional string manufacturer = 31;
  inline bool has_manufacturer() const;
  inline void clear_manufacturer();
  static const int kManufacturerFieldNumber = 31;
  inline const ::std::string& manufacturer() const;
  inline void set_manufacturer(const ::std::string& value);
  inline void set_manufacturer(const char* value);
  inline void set_manufacturer(const char* value, size_t size);
  inline ::std::string* mutable_manufacturer();
  inline ::std::string* release_manufacturer();
  
  // optional string groupUID = 32;
  inline bool has_groupuid() const;
  inline void clear_groupuid();
  static const int kGroupUIDFieldNumber = 32;
  inline const ::std::string& groupuid() const;
  inline void set_groupuid(const ::std::string& value);
  inline void set_groupuid(const char* value);
  inline void set_groupuid(const char* value, size_t size);
  inline ::std::string* mutable_groupuid();
  inline ::std::string* release_groupuid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_Series)
 private:
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_windowingcenter();
  inline void clear_has_windowingcenter();
  inline void set_has_windowingwidth();
  inline void clear_has_windowingwidth();
  inline void set_has_slicecount();
  inline void clear_has_slicecount();
  inline void set_has_xdimension();
  inline void clear_has_xdimension();
  inline void set_has_ydimension();
  inline void clear_has_ydimension();
  inline void set_has_xpixelspacing();
  inline void clear_has_xpixelspacing();
  inline void set_has_ypixelspacing();
  inline void clear_has_ypixelspacing();
  inline void set_has_slicespacing();
  inline void clear_has_slicespacing();
  inline void set_has_modality();
  inline void clear_has_modality();
  inline void set_has_bitallocated();
  inline void clear_has_bitallocated();
  inline void set_has_seriestime();
  inline void clear_has_seriestime();
  inline void set_has_seriesdate();
  inline void clear_has_seriesdate();
  inline void set_has_seriesdescription();
  inline void clear_has_seriesdescription();
  inline void set_has_patientposition();
  inline void clear_has_patientposition();
  inline void set_has_imageslicebuffer();
  inline void clear_has_imageslicebuffer();
  inline void set_has_iscopied();
  inline void clear_has_iscopied();
  inline void set_has_seriesnumber();
  inline void clear_has_seriesnumber();
  inline void set_has_frameofreferenceuid();
  inline void clear_has_frameofreferenceuid();
  inline void set_has_manufacturermodelname();
  inline void clear_has_manufacturermodelname();
  inline void set_has_hasvoi();
  inline void clear_has_hasvoi();
  inline void set_has_slicethickness();
  inline void clear_has_slicethickness();
  inline void set_has_studyid();
  inline void clear_has_studyid();
  inline void set_has_studydescription();
  inline void clear_has_studydescription();
  inline void set_has_patientname();
  inline void clear_has_patientname();
  inline void set_has_patientid();
  inline void clear_has_patientid();
  inline void set_has_patientbirthday();
  inline void clear_has_patientbirthday();
  inline void set_has_patientage();
  inline void clear_has_patientage();
  inline void set_has_patientsex();
  inline void clear_has_patientsex();
  inline void set_has_institutionname();
  inline void clear_has_institutionname();
  inline void set_has_manufacturer();
  inline void clear_has_manufacturer();
  inline void set_has_groupuid();
  inline void clear_has_groupuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* seriesuid_;
  float windowingcenter_;
  float windowingwidth_;
  ::google::protobuf::int32 slicecount_;
  ::google::protobuf::int32 xdimension_;
  ::google::protobuf::int32 ydimension_;
  float xpixelspacing_;
  float ypixelspacing_;
  float slicespacing_;
  ::std::string* modality_;
  ::std::string* seriestime_;
  ::std::string* seriesdate_;
  ::std::string* seriesdescription_;
  ::google::protobuf::int32 bitallocated_;
  ::google::protobuf::int32 seriesnumber_;
  ::std::string* patientposition_;
  ::std::string* imageslicebuffer_;
  ::std::string* frameofreferenceuid_;
  ::std::string* manufacturermodelname_;
  ::std::string* slicethickness_;
  ::std::string* studyid_;
  ::std::string* studydescription_;
  ::std::string* patientname_;
  ::std::string* patientid_;
  ::std::string* patientbirthday_;
  ::std::string* patientage_;
  ::std::string* patientsex_;
  ::std::string* institutionname_;
  ::std::string* manufacturer_;
  ::std::string* groupuid_;
  bool iscopied_;
  bool hasvoi_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(32 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_Series* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_SeriesGroup : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_SeriesGroup();
  virtual ~RT_TPS_Gallery_SeriesGroup();
  
  RT_TPS_Gallery_SeriesGroup(const RT_TPS_Gallery_SeriesGroup& from);
  
  inline RT_TPS_Gallery_SeriesGroup& operator=(const RT_TPS_Gallery_SeriesGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_SeriesGroup& default_instance();
  
  void Swap(RT_TPS_Gallery_SeriesGroup* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_SeriesGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_SeriesGroup& from);
  void MergeFrom(const RT_TPS_Gallery_SeriesGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string groupUID = 1;
  inline bool has_groupuid() const;
  inline void clear_groupuid();
  static const int kGroupUIDFieldNumber = 1;
  inline const ::std::string& groupuid() const;
  inline void set_groupuid(const ::std::string& value);
  inline void set_groupuid(const char* value);
  inline void set_groupuid(const char* value, size_t size);
  inline ::std::string* mutable_groupuid();
  inline ::std::string* release_groupuid();
  
  // optional string groupName = 2;
  inline bool has_groupname() const;
  inline void clear_groupname();
  static const int kGroupNameFieldNumber = 2;
  inline const ::std::string& groupname() const;
  inline void set_groupname(const ::std::string& value);
  inline void set_groupname(const char* value);
  inline void set_groupname(const char* value, size_t size);
  inline ::std::string* mutable_groupname();
  inline ::std::string* release_groupname();
  
  // optional int32 groupType = 3;
  inline bool has_grouptype() const;
  inline void clear_grouptype();
  static const int kGroupTypeFieldNumber = 3;
  inline ::google::protobuf::int32 grouptype() const;
  inline void set_grouptype(::google::protobuf::int32 value);
  
  // optional string mainSeries = 4;
  inline bool has_mainseries() const;
  inline void clear_mainseries();
  static const int kMainSeriesFieldNumber = 4;
  inline const ::std::string& mainseries() const;
  inline void set_mainseries(const ::std::string& value);
  inline void set_mainseries(const char* value);
  inline void set_mainseries(const char* value, size_t size);
  inline ::std::string* mutable_mainseries();
  inline ::std::string* release_mainseries();
  
  // repeated string seriesList = 5;
  inline int serieslist_size() const;
  inline void clear_serieslist();
  static const int kSeriesListFieldNumber = 5;
  inline const ::std::string& serieslist(int index) const;
  inline ::std::string* mutable_serieslist(int index);
  inline void set_serieslist(int index, const ::std::string& value);
  inline void set_serieslist(int index, const char* value);
  inline void set_serieslist(int index, const char* value, size_t size);
  inline ::std::string* add_serieslist();
  inline void add_serieslist(const ::std::string& value);
  inline void add_serieslist(const char* value);
  inline void add_serieslist(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& serieslist() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_serieslist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_SeriesGroup)
 private:
  inline void set_has_groupuid();
  inline void clear_has_groupuid();
  inline void set_has_groupname();
  inline void clear_has_groupname();
  inline void set_has_grouptype();
  inline void clear_has_grouptype();
  inline void set_has_mainseries();
  inline void clear_has_mainseries();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* groupuid_;
  ::std::string* groupname_;
  ::std::string* mainseries_;
  ::google::protobuf::RepeatedPtrField< ::std::string> serieslist_;
  ::google::protobuf::int32 grouptype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_SeriesGroup* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_RepeatedSeriesGroup : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_RepeatedSeriesGroup();
  virtual ~RT_TPS_Gallery_RepeatedSeriesGroup();
  
  RT_TPS_Gallery_RepeatedSeriesGroup(const RT_TPS_Gallery_RepeatedSeriesGroup& from);
  
  inline RT_TPS_Gallery_RepeatedSeriesGroup& operator=(const RT_TPS_Gallery_RepeatedSeriesGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_RepeatedSeriesGroup& default_instance();
  
  void Swap(RT_TPS_Gallery_RepeatedSeriesGroup* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_RepeatedSeriesGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_RepeatedSeriesGroup& from);
  void MergeFrom(const RT_TPS_Gallery_RepeatedSeriesGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
  inline int series_group_size() const;
  inline void clear_series_group();
  static const int kSeriesGroupFieldNumber = 1;
  inline const ::tps::proto::RT_TPS_Gallery_SeriesGroup& series_group(int index) const;
  inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* mutable_series_group(int index);
  inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* add_series_group();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >&
      series_group() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >*
      mutable_series_group();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_RepeatedSeriesGroup)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup > series_group_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_RepeatedSeriesGroup* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_CornerInfo : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_CornerInfo();
  virtual ~RT_TPS_Gallery_CornerInfo();
  
  RT_TPS_Gallery_CornerInfo(const RT_TPS_Gallery_CornerInfo& from);
  
  inline RT_TPS_Gallery_CornerInfo& operator=(const RT_TPS_Gallery_CornerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_CornerInfo& default_instance();
  
  void Swap(RT_TPS_Gallery_CornerInfo* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_CornerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_CornerInfo& from);
  void MergeFrom(const RT_TPS_Gallery_CornerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string patientname = 1;
  inline bool has_patientname() const;
  inline void clear_patientname();
  static const int kPatientnameFieldNumber = 1;
  inline const ::std::string& patientname() const;
  inline void set_patientname(const ::std::string& value);
  inline void set_patientname(const char* value);
  inline void set_patientname(const char* value, size_t size);
  inline ::std::string* mutable_patientname();
  inline ::std::string* release_patientname();
  
  // optional string seriesname = 2;
  inline bool has_seriesname() const;
  inline void clear_seriesname();
  static const int kSeriesnameFieldNumber = 2;
  inline const ::std::string& seriesname() const;
  inline void set_seriesname(const ::std::string& value);
  inline void set_seriesname(const char* value);
  inline void set_seriesname(const char* value, size_t size);
  inline ::std::string* mutable_seriesname();
  inline ::std::string* release_seriesname();
  
  // optional string seriesdatetime = 3;
  inline bool has_seriesdatetime() const;
  inline void clear_seriesdatetime();
  static const int kSeriesdatetimeFieldNumber = 3;
  inline const ::std::string& seriesdatetime() const;
  inline void set_seriesdatetime(const ::std::string& value);
  inline void set_seriesdatetime(const char* value);
  inline void set_seriesdatetime(const char* value, size_t size);
  inline ::std::string* mutable_seriesdatetime();
  inline ::std::string* release_seriesdatetime();
  
  // optional string patientposition = 4;
  inline bool has_patientposition() const;
  inline void clear_patientposition();
  static const int kPatientpositionFieldNumber = 4;
  inline const ::std::string& patientposition() const;
  inline void set_patientposition(const ::std::string& value);
  inline void set_patientposition(const char* value);
  inline void set_patientposition(const char* value, size_t size);
  inline ::std::string* mutable_patientposition();
  inline ::std::string* release_patientposition();
  
  // optional double value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline double value() const;
  inline void set_value(double value);
  
  // optional double density = 6;
  inline bool has_density() const;
  inline void clear_density();
  static const int kDensityFieldNumber = 6;
  inline double density() const;
  inline void set_density(double value);
  
  // optional double pixelpositionx = 7;
  inline bool has_pixelpositionx() const;
  inline void clear_pixelpositionx();
  static const int kPixelpositionxFieldNumber = 7;
  inline double pixelpositionx() const;
  inline void set_pixelpositionx(double value);
  
  // optional double pixelpositiony = 8;
  inline bool has_pixelpositiony() const;
  inline void clear_pixelpositiony();
  static const int kPixelpositionyFieldNumber = 8;
  inline double pixelpositiony() const;
  inline void set_pixelpositiony(double value);
  
  // optional double pixelpositionz = 9;
  inline bool has_pixelpositionz() const;
  inline void clear_pixelpositionz();
  static const int kPixelpositionzFieldNumber = 9;
  inline double pixelpositionz() const;
  inline void set_pixelpositionz(double value);
  
  // optional double windowwidth = 10;
  inline bool has_windowwidth() const;
  inline void clear_windowwidth();
  static const int kWindowwidthFieldNumber = 10;
  inline double windowwidth() const;
  inline void set_windowwidth(double value);
  
  // optional double windowcenter = 11;
  inline bool has_windowcenter() const;
  inline void clear_windowcenter();
  static const int kWindowcenterFieldNumber = 11;
  inline double windowcenter() const;
  inline void set_windowcenter(double value);
  
  // optional int32 slicenumber = 12;
  inline bool has_slicenumber() const;
  inline void clear_slicenumber();
  static const int kSlicenumberFieldNumber = 12;
  inline ::google::protobuf::int32 slicenumber() const;
  inline void set_slicenumber(::google::protobuf::int32 value);
  
  // optional int32 totalslicenumber = 13;
  inline bool has_totalslicenumber() const;
  inline void clear_totalslicenumber();
  static const int kTotalslicenumberFieldNumber = 13;
  inline ::google::protobuf::int32 totalslicenumber() const;
  inline void set_totalslicenumber(::google::protobuf::int32 value);
  
  // optional double slicethickness = 14;
  inline bool has_slicethickness() const;
  inline void clear_slicethickness();
  static const int kSlicethicknessFieldNumber = 14;
  inline double slicethickness() const;
  inline void set_slicethickness(double value);
  
  // optional bool isvaluevalid = 15;
  inline bool has_isvaluevalid() const;
  inline void clear_isvaluevalid();
  static const int kIsvaluevalidFieldNumber = 15;
  inline bool isvaluevalid() const;
  inline void set_isvaluevalid(bool value);
  
  // optional string modality = 16;
  inline bool has_modality() const;
  inline void clear_modality();
  static const int kModalityFieldNumber = 16;
  inline const ::std::string& modality() const;
  inline void set_modality(const ::std::string& value);
  inline void set_modality(const char* value);
  inline void set_modality(const char* value, size_t size);
  inline ::std::string* mutable_modality();
  inline ::std::string* release_modality();
  
  // optional double zoomfactor = 17;
  inline bool has_zoomfactor() const;
  inline void clear_zoomfactor();
  static const int kZoomfactorFieldNumber = 17;
  inline double zoomfactor() const;
  inline void set_zoomfactor(double value);
  
  // optional double rotate = 18;
  inline bool has_rotate() const;
  inline void clear_rotate();
  static const int kRotateFieldNumber = 18;
  inline double rotate() const;
  inline void set_rotate(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_CornerInfo)
 private:
  inline void set_has_patientname();
  inline void clear_has_patientname();
  inline void set_has_seriesname();
  inline void clear_has_seriesname();
  inline void set_has_seriesdatetime();
  inline void clear_has_seriesdatetime();
  inline void set_has_patientposition();
  inline void clear_has_patientposition();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_density();
  inline void clear_has_density();
  inline void set_has_pixelpositionx();
  inline void clear_has_pixelpositionx();
  inline void set_has_pixelpositiony();
  inline void clear_has_pixelpositiony();
  inline void set_has_pixelpositionz();
  inline void clear_has_pixelpositionz();
  inline void set_has_windowwidth();
  inline void clear_has_windowwidth();
  inline void set_has_windowcenter();
  inline void clear_has_windowcenter();
  inline void set_has_slicenumber();
  inline void clear_has_slicenumber();
  inline void set_has_totalslicenumber();
  inline void clear_has_totalslicenumber();
  inline void set_has_slicethickness();
  inline void clear_has_slicethickness();
  inline void set_has_isvaluevalid();
  inline void clear_has_isvaluevalid();
  inline void set_has_modality();
  inline void clear_has_modality();
  inline void set_has_zoomfactor();
  inline void clear_has_zoomfactor();
  inline void set_has_rotate();
  inline void clear_has_rotate();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* patientname_;
  ::std::string* seriesname_;
  ::std::string* seriesdatetime_;
  ::std::string* patientposition_;
  double value_;
  double density_;
  double pixelpositionx_;
  double pixelpositiony_;
  double pixelpositionz_;
  double windowwidth_;
  double windowcenter_;
  ::google::protobuf::int32 slicenumber_;
  ::google::protobuf::int32 totalslicenumber_;
  double slicethickness_;
  ::std::string* modality_;
  double zoomfactor_;
  double rotate_;
  bool isvaluevalid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(18 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_CornerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_CornerInfoVisible : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_CornerInfoVisible();
  virtual ~RT_TPS_Gallery_CornerInfoVisible();
  
  RT_TPS_Gallery_CornerInfoVisible(const RT_TPS_Gallery_CornerInfoVisible& from);
  
  inline RT_TPS_Gallery_CornerInfoVisible& operator=(const RT_TPS_Gallery_CornerInfoVisible& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_CornerInfoVisible& default_instance();
  
  void Swap(RT_TPS_Gallery_CornerInfoVisible* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_CornerInfoVisible* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_CornerInfoVisible& from);
  void MergeFrom(const RT_TPS_Gallery_CornerInfoVisible& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string seriesUID = 1;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUIDFieldNumber = 1;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required bool isVisible = 2;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 2;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_CornerInfoVisible)
 private:
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* seriesuid_;
  bool isvisible_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_CornerInfoVisible* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_ExpandSeries : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_ExpandSeries();
  virtual ~RT_TPS_Gallery_ExpandSeries();
  
  RT_TPS_Gallery_ExpandSeries(const RT_TPS_Gallery_ExpandSeries& from);
  
  inline RT_TPS_Gallery_ExpandSeries& operator=(const RT_TPS_Gallery_ExpandSeries& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_ExpandSeries& default_instance();
  
  void Swap(RT_TPS_Gallery_ExpandSeries* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_ExpandSeries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_ExpandSeries& from);
  void MergeFrom(const RT_TPS_Gallery_ExpandSeries& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string seriesUID = 1;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUIDFieldNumber = 1;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required bool IsExpandBottom = 2;
  inline bool has_isexpandbottom() const;
  inline void clear_isexpandbottom();
  static const int kIsExpandBottomFieldNumber = 2;
  inline bool isexpandbottom() const;
  inline void set_isexpandbottom(bool value);
  
  // required int32 SliceNumber = 3;
  inline bool has_slicenumber() const;
  inline void clear_slicenumber();
  static const int kSliceNumberFieldNumber = 3;
  inline ::google::protobuf::int32 slicenumber() const;
  inline void set_slicenumber(::google::protobuf::int32 value);
  
  // required bool IsSaveAsNewSeries = 4;
  inline bool has_issaveasnewseries() const;
  inline void clear_issaveasnewseries();
  static const int kIsSaveAsNewSeriesFieldNumber = 4;
  inline bool issaveasnewseries() const;
  inline void set_issaveasnewseries(bool value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_ExpandSeries)
 private:
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_isexpandbottom();
  inline void clear_has_isexpandbottom();
  inline void set_has_slicenumber();
  inline void clear_has_slicenumber();
  inline void set_has_issaveasnewseries();
  inline void clear_has_issaveasnewseries();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* seriesuid_;
  ::google::protobuf::int32 slicenumber_;
  bool isexpandbottom_;
  bool issaveasnewseries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_ExpandSeries* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_SliceInfo : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_SliceInfo();
  virtual ~RT_TPS_Gallery_SliceInfo();
  
  RT_TPS_Gallery_SliceInfo(const RT_TPS_Gallery_SliceInfo& from);
  
  inline RT_TPS_Gallery_SliceInfo& operator=(const RT_TPS_Gallery_SliceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_SliceInfo& default_instance();
  
  void Swap(RT_TPS_Gallery_SliceInfo* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_SliceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_SliceInfo& from);
  void MergeFrom(const RT_TPS_Gallery_SliceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 currentSlice = 1;
  inline bool has_currentslice() const;
  inline void clear_currentslice();
  static const int kCurrentSliceFieldNumber = 1;
  inline ::google::protobuf::int32 currentslice() const;
  inline void set_currentslice(::google::protobuf::int32 value);
  
  // required int32 totalSlice = 2;
  inline bool has_totalslice() const;
  inline void clear_totalslice();
  static const int kTotalSliceFieldNumber = 2;
  inline ::google::protobuf::int32 totalslice() const;
  inline void set_totalslice(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_SliceInfo)
 private:
  inline void set_has_currentslice();
  inline void clear_has_currentslice();
  inline void set_has_totalslice();
  inline void clear_has_totalslice();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 currentslice_;
  ::google::protobuf::int32 totalslice_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_SliceInfo* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_Gallery_SaveSeries : public ::google::protobuf::Message {
 public:
  RT_TPS_Gallery_SaveSeries();
  virtual ~RT_TPS_Gallery_SaveSeries();
  
  RT_TPS_Gallery_SaveSeries(const RT_TPS_Gallery_SaveSeries& from);
  
  inline RT_TPS_Gallery_SaveSeries& operator=(const RT_TPS_Gallery_SaveSeries& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Gallery_SaveSeries& default_instance();
  
  void Swap(RT_TPS_Gallery_SaveSeries* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Gallery_SaveSeries* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Gallery_SaveSeries& from);
  void MergeFrom(const RT_TPS_Gallery_SaveSeries& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string seriesUID = 1;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUIDFieldNumber = 1;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required bool isSaveAsNewSeries = 2;
  inline bool has_issaveasnewseries() const;
  inline void clear_issaveasnewseries();
  static const int kIsSaveAsNewSeriesFieldNumber = 2;
  inline bool issaveasnewseries() const;
  inline void set_issaveasnewseries(bool value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Gallery_SaveSeries)
 private:
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_issaveasnewseries();
  inline void clear_has_issaveasnewseries();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* seriesuid_;
  bool issaveasnewseries_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgallery_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgallery_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Gallery_SaveSeries* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_Gallery_PatientTreeData

// optional .tps.proto.RT_TPS_Gallery_Patient patient = 1;
inline bool RT_TPS_Gallery_PatientTreeData::has_patient() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_PatientTreeData::set_has_patient() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_PatientTreeData::clear_has_patient() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_PatientTreeData::clear_patient() {
  if (patient_ != NULL) patient_->::tps::proto::RT_TPS_Gallery_Patient::Clear();
  clear_has_patient();
}
inline const ::tps::proto::RT_TPS_Gallery_Patient& RT_TPS_Gallery_PatientTreeData::patient() const {
  return patient_ != NULL ? *patient_ : *default_instance_->patient_;
}
inline ::tps::proto::RT_TPS_Gallery_Patient* RT_TPS_Gallery_PatientTreeData::mutable_patient() {
  set_has_patient();
  if (patient_ == NULL) patient_ = new ::tps::proto::RT_TPS_Gallery_Patient;
  return patient_;
}
inline ::tps::proto::RT_TPS_Gallery_Patient* RT_TPS_Gallery_PatientTreeData::release_patient() {
  clear_has_patient();
  ::tps::proto::RT_TPS_Gallery_Patient* temp = patient_;
  patient_ = NULL;
  return temp;
}

// repeated .tps.proto.RT_TPS_Gallery_Course courseList = 2;
inline int RT_TPS_Gallery_PatientTreeData::courselist_size() const {
  return courselist_.size();
}
inline void RT_TPS_Gallery_PatientTreeData::clear_courselist() {
  courselist_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_Course& RT_TPS_Gallery_PatientTreeData::courselist(int index) const {
  return courselist_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_Course* RT_TPS_Gallery_PatientTreeData::mutable_courselist(int index) {
  return courselist_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_Course* RT_TPS_Gallery_PatientTreeData::add_courselist() {
  return courselist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Course >&
RT_TPS_Gallery_PatientTreeData::courselist() const {
  return courselist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Course >*
RT_TPS_Gallery_PatientTreeData::mutable_courselist() {
  return &courselist_;
}

// repeated .tps.proto.RT_TPS_Gallery_Series seriesList = 3;
inline int RT_TPS_Gallery_PatientTreeData::serieslist_size() const {
  return serieslist_.size();
}
inline void RT_TPS_Gallery_PatientTreeData::clear_serieslist() {
  serieslist_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_Series& RT_TPS_Gallery_PatientTreeData::serieslist(int index) const {
  return serieslist_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_Series* RT_TPS_Gallery_PatientTreeData::mutable_serieslist(int index) {
  return serieslist_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_Series* RT_TPS_Gallery_PatientTreeData::add_serieslist() {
  return serieslist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Series >&
RT_TPS_Gallery_PatientTreeData::serieslist() const {
  return serieslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_Series >*
RT_TPS_Gallery_PatientTreeData::mutable_serieslist() {
  return &serieslist_;
}

// repeated .tps.proto.RT_TPS_Gallery_SeriesGroup seriesGroup = 4;
inline int RT_TPS_Gallery_PatientTreeData::seriesgroup_size() const {
  return seriesgroup_.size();
}
inline void RT_TPS_Gallery_PatientTreeData::clear_seriesgroup() {
  seriesgroup_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_SeriesGroup& RT_TPS_Gallery_PatientTreeData::seriesgroup(int index) const {
  return seriesgroup_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_PatientTreeData::mutable_seriesgroup(int index) {
  return seriesgroup_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_PatientTreeData::add_seriesgroup() {
  return seriesgroup_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >&
RT_TPS_Gallery_PatientTreeData::seriesgroup() const {
  return seriesgroup_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >*
RT_TPS_Gallery_PatientTreeData::mutable_seriesgroup() {
  return &seriesgroup_;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_Patient

// required string patientUID = 1;
inline bool RT_TPS_Gallery_Patient::has_patientuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_Patient::clear_patientuid() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    patientuid_->clear();
  }
  clear_has_patientuid();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientuid() const {
  return *patientuid_;
}
inline void RT_TPS_Gallery_Patient::set_patientuid(const ::std::string& value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientuid(const char* value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientuid(const char* value, size_t size) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientuid() {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  return patientuid_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientuid() {
  clear_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientuid_;
    patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientNamePrefix = 2;
inline bool RT_TPS_Gallery_Patient::has_patientnameprefix() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientnameprefix() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientnameprefix() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_Patient::clear_patientnameprefix() {
  if (patientnameprefix_ != &::google::protobuf::internal::kEmptyString) {
    patientnameprefix_->clear();
  }
  clear_has_patientnameprefix();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientnameprefix() const {
  return *patientnameprefix_;
}
inline void RT_TPS_Gallery_Patient::set_patientnameprefix(const ::std::string& value) {
  set_has_patientnameprefix();
  if (patientnameprefix_ == &::google::protobuf::internal::kEmptyString) {
    patientnameprefix_ = new ::std::string;
  }
  patientnameprefix_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientnameprefix(const char* value) {
  set_has_patientnameprefix();
  if (patientnameprefix_ == &::google::protobuf::internal::kEmptyString) {
    patientnameprefix_ = new ::std::string;
  }
  patientnameprefix_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientnameprefix(const char* value, size_t size) {
  set_has_patientnameprefix();
  if (patientnameprefix_ == &::google::protobuf::internal::kEmptyString) {
    patientnameprefix_ = new ::std::string;
  }
  patientnameprefix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientnameprefix() {
  set_has_patientnameprefix();
  if (patientnameprefix_ == &::google::protobuf::internal::kEmptyString) {
    patientnameprefix_ = new ::std::string;
  }
  return patientnameprefix_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientnameprefix() {
  clear_has_patientnameprefix();
  if (patientnameprefix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientnameprefix_;
    patientnameprefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientFirstName = 3;
inline bool RT_TPS_Gallery_Patient::has_patientfirstname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientfirstname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientfirstname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_Patient::clear_patientfirstname() {
  if (patientfirstname_ != &::google::protobuf::internal::kEmptyString) {
    patientfirstname_->clear();
  }
  clear_has_patientfirstname();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientfirstname() const {
  return *patientfirstname_;
}
inline void RT_TPS_Gallery_Patient::set_patientfirstname(const ::std::string& value) {
  set_has_patientfirstname();
  if (patientfirstname_ == &::google::protobuf::internal::kEmptyString) {
    patientfirstname_ = new ::std::string;
  }
  patientfirstname_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientfirstname(const char* value) {
  set_has_patientfirstname();
  if (patientfirstname_ == &::google::protobuf::internal::kEmptyString) {
    patientfirstname_ = new ::std::string;
  }
  patientfirstname_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientfirstname(const char* value, size_t size) {
  set_has_patientfirstname();
  if (patientfirstname_ == &::google::protobuf::internal::kEmptyString) {
    patientfirstname_ = new ::std::string;
  }
  patientfirstname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientfirstname() {
  set_has_patientfirstname();
  if (patientfirstname_ == &::google::protobuf::internal::kEmptyString) {
    patientfirstname_ = new ::std::string;
  }
  return patientfirstname_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientfirstname() {
  clear_has_patientfirstname();
  if (patientfirstname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientfirstname_;
    patientfirstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientMiddleName = 4;
inline bool RT_TPS_Gallery_Patient::has_patientmiddlename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientmiddlename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientmiddlename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_Patient::clear_patientmiddlename() {
  if (patientmiddlename_ != &::google::protobuf::internal::kEmptyString) {
    patientmiddlename_->clear();
  }
  clear_has_patientmiddlename();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientmiddlename() const {
  return *patientmiddlename_;
}
inline void RT_TPS_Gallery_Patient::set_patientmiddlename(const ::std::string& value) {
  set_has_patientmiddlename();
  if (patientmiddlename_ == &::google::protobuf::internal::kEmptyString) {
    patientmiddlename_ = new ::std::string;
  }
  patientmiddlename_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientmiddlename(const char* value) {
  set_has_patientmiddlename();
  if (patientmiddlename_ == &::google::protobuf::internal::kEmptyString) {
    patientmiddlename_ = new ::std::string;
  }
  patientmiddlename_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientmiddlename(const char* value, size_t size) {
  set_has_patientmiddlename();
  if (patientmiddlename_ == &::google::protobuf::internal::kEmptyString) {
    patientmiddlename_ = new ::std::string;
  }
  patientmiddlename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientmiddlename() {
  set_has_patientmiddlename();
  if (patientmiddlename_ == &::google::protobuf::internal::kEmptyString) {
    patientmiddlename_ = new ::std::string;
  }
  return patientmiddlename_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientmiddlename() {
  clear_has_patientmiddlename();
  if (patientmiddlename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientmiddlename_;
    patientmiddlename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientLastName = 5;
inline bool RT_TPS_Gallery_Patient::has_patientlastname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientlastname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientlastname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_Gallery_Patient::clear_patientlastname() {
  if (patientlastname_ != &::google::protobuf::internal::kEmptyString) {
    patientlastname_->clear();
  }
  clear_has_patientlastname();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientlastname() const {
  return *patientlastname_;
}
inline void RT_TPS_Gallery_Patient::set_patientlastname(const ::std::string& value) {
  set_has_patientlastname();
  if (patientlastname_ == &::google::protobuf::internal::kEmptyString) {
    patientlastname_ = new ::std::string;
  }
  patientlastname_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientlastname(const char* value) {
  set_has_patientlastname();
  if (patientlastname_ == &::google::protobuf::internal::kEmptyString) {
    patientlastname_ = new ::std::string;
  }
  patientlastname_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientlastname(const char* value, size_t size) {
  set_has_patientlastname();
  if (patientlastname_ == &::google::protobuf::internal::kEmptyString) {
    patientlastname_ = new ::std::string;
  }
  patientlastname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientlastname() {
  set_has_patientlastname();
  if (patientlastname_ == &::google::protobuf::internal::kEmptyString) {
    patientlastname_ = new ::std::string;
  }
  return patientlastname_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientlastname() {
  clear_has_patientlastname();
  if (patientlastname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientlastname_;
    patientlastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientNameSuffix = 6;
inline bool RT_TPS_Gallery_Patient::has_patientnamesuffix() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientnamesuffix() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientnamesuffix() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_Gallery_Patient::clear_patientnamesuffix() {
  if (patientnamesuffix_ != &::google::protobuf::internal::kEmptyString) {
    patientnamesuffix_->clear();
  }
  clear_has_patientnamesuffix();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientnamesuffix() const {
  return *patientnamesuffix_;
}
inline void RT_TPS_Gallery_Patient::set_patientnamesuffix(const ::std::string& value) {
  set_has_patientnamesuffix();
  if (patientnamesuffix_ == &::google::protobuf::internal::kEmptyString) {
    patientnamesuffix_ = new ::std::string;
  }
  patientnamesuffix_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientnamesuffix(const char* value) {
  set_has_patientnamesuffix();
  if (patientnamesuffix_ == &::google::protobuf::internal::kEmptyString) {
    patientnamesuffix_ = new ::std::string;
  }
  patientnamesuffix_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientnamesuffix(const char* value, size_t size) {
  set_has_patientnamesuffix();
  if (patientnamesuffix_ == &::google::protobuf::internal::kEmptyString) {
    patientnamesuffix_ = new ::std::string;
  }
  patientnamesuffix_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientnamesuffix() {
  set_has_patientnamesuffix();
  if (patientnamesuffix_ == &::google::protobuf::internal::kEmptyString) {
    patientnamesuffix_ = new ::std::string;
  }
  return patientnamesuffix_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientnamesuffix() {
  clear_has_patientnamesuffix();
  if (patientnamesuffix_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientnamesuffix_;
    patientnamesuffix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientID = 7;
inline bool RT_TPS_Gallery_Patient::has_patientid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_Gallery_Patient::clear_patientid() {
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    patientid_->clear();
  }
  clear_has_patientid();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientid() const {
  return *patientid_;
}
inline void RT_TPS_Gallery_Patient::set_patientid(const ::std::string& value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientid(const char* value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientid(const char* value, size_t size) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientid() {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  return patientid_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientid() {
  clear_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientid_;
    patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 patientsex = 8;
inline bool RT_TPS_Gallery_Patient::has_patientsex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientsex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientsex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_Gallery_Patient::clear_patientsex() {
  patientsex_ = 0;
  clear_has_patientsex();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Patient::patientsex() const {
  return patientsex_;
}
inline void RT_TPS_Gallery_Patient::set_patientsex(::google::protobuf::int32 value) {
  set_has_patientsex();
  patientsex_ = value;
}

// optional string patientDateOfBirth = 9;
inline bool RT_TPS_Gallery_Patient::has_patientdateofbirth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_Gallery_Patient::set_has_patientdateofbirth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_Gallery_Patient::clear_has_patientdateofbirth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_Gallery_Patient::clear_patientdateofbirth() {
  if (patientdateofbirth_ != &::google::protobuf::internal::kEmptyString) {
    patientdateofbirth_->clear();
  }
  clear_has_patientdateofbirth();
}
inline const ::std::string& RT_TPS_Gallery_Patient::patientdateofbirth() const {
  return *patientdateofbirth_;
}
inline void RT_TPS_Gallery_Patient::set_patientdateofbirth(const ::std::string& value) {
  set_has_patientdateofbirth();
  if (patientdateofbirth_ == &::google::protobuf::internal::kEmptyString) {
    patientdateofbirth_ = new ::std::string;
  }
  patientdateofbirth_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientdateofbirth(const char* value) {
  set_has_patientdateofbirth();
  if (patientdateofbirth_ == &::google::protobuf::internal::kEmptyString) {
    patientdateofbirth_ = new ::std::string;
  }
  patientdateofbirth_->assign(value);
}
inline void RT_TPS_Gallery_Patient::set_patientdateofbirth(const char* value, size_t size) {
  set_has_patientdateofbirth();
  if (patientdateofbirth_ == &::google::protobuf::internal::kEmptyString) {
    patientdateofbirth_ = new ::std::string;
  }
  patientdateofbirth_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Patient::mutable_patientdateofbirth() {
  set_has_patientdateofbirth();
  if (patientdateofbirth_ == &::google::protobuf::internal::kEmptyString) {
    patientdateofbirth_ = new ::std::string;
  }
  return patientdateofbirth_;
}
inline ::std::string* RT_TPS_Gallery_Patient::release_patientdateofbirth() {
  clear_has_patientdateofbirth();
  if (patientdateofbirth_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientdateofbirth_;
    patientdateofbirth_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_Course

// required string courseUID = 1;
inline bool RT_TPS_Gallery_Course::has_courseuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_Course::set_has_courseuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_Course::clear_has_courseuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_Course::clear_courseuid() {
  if (courseuid_ != &::google::protobuf::internal::kEmptyString) {
    courseuid_->clear();
  }
  clear_has_courseuid();
}
inline const ::std::string& RT_TPS_Gallery_Course::courseuid() const {
  return *courseuid_;
}
inline void RT_TPS_Gallery_Course::set_courseuid(const ::std::string& value) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_courseuid(const char* value) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_courseuid(const char* value, size_t size) {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  courseuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Course::mutable_courseuid() {
  set_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    courseuid_ = new ::std::string;
  }
  return courseuid_;
}
inline ::std::string* RT_TPS_Gallery_Course::release_courseuid() {
  clear_has_courseuid();
  if (courseuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = courseuid_;
    courseuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string courseName = 2;
inline bool RT_TPS_Gallery_Course::has_coursename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_Course::set_has_coursename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_Course::clear_has_coursename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_Course::clear_coursename() {
  if (coursename_ != &::google::protobuf::internal::kEmptyString) {
    coursename_->clear();
  }
  clear_has_coursename();
}
inline const ::std::string& RT_TPS_Gallery_Course::coursename() const {
  return *coursename_;
}
inline void RT_TPS_Gallery_Course::set_coursename(const ::std::string& value) {
  set_has_coursename();
  if (coursename_ == &::google::protobuf::internal::kEmptyString) {
    coursename_ = new ::std::string;
  }
  coursename_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_coursename(const char* value) {
  set_has_coursename();
  if (coursename_ == &::google::protobuf::internal::kEmptyString) {
    coursename_ = new ::std::string;
  }
  coursename_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_coursename(const char* value, size_t size) {
  set_has_coursename();
  if (coursename_ == &::google::protobuf::internal::kEmptyString) {
    coursename_ = new ::std::string;
  }
  coursename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Course::mutable_coursename() {
  set_has_coursename();
  if (coursename_ == &::google::protobuf::internal::kEmptyString) {
    coursename_ = new ::std::string;
  }
  return coursename_;
}
inline ::std::string* RT_TPS_Gallery_Course::release_coursename() {
  clear_has_coursename();
  if (coursename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = coursename_;
    coursename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientUID = 3;
inline bool RT_TPS_Gallery_Course::has_patientuid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_Course::set_has_patientuid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_Course::clear_has_patientuid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_Course::clear_patientuid() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    patientuid_->clear();
  }
  clear_has_patientuid();
}
inline const ::std::string& RT_TPS_Gallery_Course::patientuid() const {
  return *patientuid_;
}
inline void RT_TPS_Gallery_Course::set_patientuid(const ::std::string& value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_patientuid(const char* value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_Course::set_patientuid(const char* value, size_t size) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Course::mutable_patientuid() {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  return patientuid_;
}
inline ::std::string* RT_TPS_Gallery_Course::release_patientuid() {
  clear_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientuid_;
    patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasbeamgroup = 4;
inline bool RT_TPS_Gallery_Course::has_hasbeamgroup() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_Course::set_has_hasbeamgroup() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_Course::clear_has_hasbeamgroup() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_Course::clear_hasbeamgroup() {
  hasbeamgroup_ = false;
  clear_has_hasbeamgroup();
}
inline bool RT_TPS_Gallery_Course::hasbeamgroup() const {
  return hasbeamgroup_;
}
inline void RT_TPS_Gallery_Course::set_hasbeamgroup(bool value) {
  set_has_hasbeamgroup();
  hasbeamgroup_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_EditCourse

// required string patientuid = 1;
inline bool RT_TPS_Gallery_EditCourse::has_patientuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_EditCourse::set_has_patientuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_EditCourse::clear_has_patientuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_EditCourse::clear_patientuid() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    patientuid_->clear();
  }
  clear_has_patientuid();
}
inline const ::std::string& RT_TPS_Gallery_EditCourse::patientuid() const {
  return *patientuid_;
}
inline void RT_TPS_Gallery_EditCourse::set_patientuid(const ::std::string& value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_EditCourse::set_patientuid(const char* value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void RT_TPS_Gallery_EditCourse::set_patientuid(const char* value, size_t size) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_EditCourse::mutable_patientuid() {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  return patientuid_;
}
inline ::std::string* RT_TPS_Gallery_EditCourse::release_patientuid() {
  clear_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientuid_;
    patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tps.proto.RT_TPS_Gallery_EditCourseItem addedcourses = 2;
inline int RT_TPS_Gallery_EditCourse::addedcourses_size() const {
  return addedcourses_.size();
}
inline void RT_TPS_Gallery_EditCourse::clear_addedcourses() {
  addedcourses_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& RT_TPS_Gallery_EditCourse::addedcourses(int index) const {
  return addedcourses_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::mutable_addedcourses(int index) {
  return addedcourses_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::add_addedcourses() {
  return addedcourses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
RT_TPS_Gallery_EditCourse::addedcourses() const {
  return addedcourses_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
RT_TPS_Gallery_EditCourse::mutable_addedcourses() {
  return &addedcourses_;
}

// repeated .tps.proto.RT_TPS_Gallery_EditCourseItem deletedcourses = 3;
inline int RT_TPS_Gallery_EditCourse::deletedcourses_size() const {
  return deletedcourses_.size();
}
inline void RT_TPS_Gallery_EditCourse::clear_deletedcourses() {
  deletedcourses_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& RT_TPS_Gallery_EditCourse::deletedcourses(int index) const {
  return deletedcourses_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::mutable_deletedcourses(int index) {
  return deletedcourses_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::add_deletedcourses() {
  return deletedcourses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
RT_TPS_Gallery_EditCourse::deletedcourses() const {
  return deletedcourses_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
RT_TPS_Gallery_EditCourse::mutable_deletedcourses() {
  return &deletedcourses_;
}

// repeated .tps.proto.RT_TPS_Gallery_EditCourseItem updatedcourses = 4;
inline int RT_TPS_Gallery_EditCourse::updatedcourses_size() const {
  return updatedcourses_.size();
}
inline void RT_TPS_Gallery_EditCourse::clear_updatedcourses() {
  updatedcourses_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_EditCourseItem& RT_TPS_Gallery_EditCourse::updatedcourses(int index) const {
  return updatedcourses_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::mutable_updatedcourses(int index) {
  return updatedcourses_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_EditCourseItem* RT_TPS_Gallery_EditCourse::add_updatedcourses() {
  return updatedcourses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >&
RT_TPS_Gallery_EditCourse::updatedcourses() const {
  return updatedcourses_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_EditCourseItem >*
RT_TPS_Gallery_EditCourse::mutable_updatedcourses() {
  return &updatedcourses_;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_EditCourseItem

// optional string uid = 1;
inline bool RT_TPS_Gallery_EditCourseItem::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_EditCourseItem::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_EditCourseItem::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_EditCourseItem::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RT_TPS_Gallery_EditCourseItem::uid() const {
  return *uid_;
}
inline void RT_TPS_Gallery_EditCourseItem::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string name = 2;
inline bool RT_TPS_Gallery_EditCourseItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_EditCourseItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_EditCourseItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_EditCourseItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RT_TPS_Gallery_EditCourseItem::name() const {
  return *name_;
}
inline void RT_TPS_Gallery_EditCourseItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string addedseriesuids = 3;
inline int RT_TPS_Gallery_EditCourseItem::addedseriesuids_size() const {
  return addedseriesuids_.size();
}
inline void RT_TPS_Gallery_EditCourseItem::clear_addedseriesuids() {
  addedseriesuids_.Clear();
}
inline const ::std::string& RT_TPS_Gallery_EditCourseItem::addedseriesuids(int index) const {
  return addedseriesuids_.Get(index);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::mutable_addedseriesuids(int index) {
  return addedseriesuids_.Mutable(index);
}
inline void RT_TPS_Gallery_EditCourseItem::set_addedseriesuids(int index, const ::std::string& value) {
  addedseriesuids_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_addedseriesuids(int index, const char* value) {
  addedseriesuids_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_addedseriesuids(int index, const char* value, size_t size) {
  addedseriesuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::add_addedseriesuids() {
  return addedseriesuids_.Add();
}
inline void RT_TPS_Gallery_EditCourseItem::add_addedseriesuids(const ::std::string& value) {
  addedseriesuids_.Add()->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::add_addedseriesuids(const char* value) {
  addedseriesuids_.Add()->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::add_addedseriesuids(const char* value, size_t size) {
  addedseriesuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RT_TPS_Gallery_EditCourseItem::addedseriesuids() const {
  return addedseriesuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RT_TPS_Gallery_EditCourseItem::mutable_addedseriesuids() {
  return &addedseriesuids_;
}

// repeated string removedseriesuids = 4;
inline int RT_TPS_Gallery_EditCourseItem::removedseriesuids_size() const {
  return removedseriesuids_.size();
}
inline void RT_TPS_Gallery_EditCourseItem::clear_removedseriesuids() {
  removedseriesuids_.Clear();
}
inline const ::std::string& RT_TPS_Gallery_EditCourseItem::removedseriesuids(int index) const {
  return removedseriesuids_.Get(index);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::mutable_removedseriesuids(int index) {
  return removedseriesuids_.Mutable(index);
}
inline void RT_TPS_Gallery_EditCourseItem::set_removedseriesuids(int index, const ::std::string& value) {
  removedseriesuids_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_removedseriesuids(int index, const char* value) {
  removedseriesuids_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::set_removedseriesuids(int index, const char* value, size_t size) {
  removedseriesuids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_EditCourseItem::add_removedseriesuids() {
  return removedseriesuids_.Add();
}
inline void RT_TPS_Gallery_EditCourseItem::add_removedseriesuids(const ::std::string& value) {
  removedseriesuids_.Add()->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::add_removedseriesuids(const char* value) {
  removedseriesuids_.Add()->assign(value);
}
inline void RT_TPS_Gallery_EditCourseItem::add_removedseriesuids(const char* value, size_t size) {
  removedseriesuids_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RT_TPS_Gallery_EditCourseItem::removedseriesuids() const {
  return removedseriesuids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RT_TPS_Gallery_EditCourseItem::mutable_removedseriesuids() {
  return &removedseriesuids_;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_Series

// required string seriesUID = 1;
inline bool RT_TPS_Gallery_Series::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_Series::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_Series::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RT_TPS_Gallery_Series::seriesuid() const {
  return *seriesuid_;
}
inline void RT_TPS_Gallery_Series::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float windowingCenter = 2;
inline bool RT_TPS_Gallery_Series::has_windowingcenter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_windowingcenter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_Series::clear_has_windowingcenter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_Series::clear_windowingcenter() {
  windowingcenter_ = 0;
  clear_has_windowingcenter();
}
inline float RT_TPS_Gallery_Series::windowingcenter() const {
  return windowingcenter_;
}
inline void RT_TPS_Gallery_Series::set_windowingcenter(float value) {
  set_has_windowingcenter();
  windowingcenter_ = value;
}

// required float windowingWidth = 3;
inline bool RT_TPS_Gallery_Series::has_windowingwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_windowingwidth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_Series::clear_has_windowingwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_Series::clear_windowingwidth() {
  windowingwidth_ = 0;
  clear_has_windowingwidth();
}
inline float RT_TPS_Gallery_Series::windowingwidth() const {
  return windowingwidth_;
}
inline void RT_TPS_Gallery_Series::set_windowingwidth(float value) {
  set_has_windowingwidth();
  windowingwidth_ = value;
}

// required int32 sliceCount = 4;
inline bool RT_TPS_Gallery_Series::has_slicecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_slicecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_Series::clear_has_slicecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_Series::clear_slicecount() {
  slicecount_ = 0;
  clear_has_slicecount();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Series::slicecount() const {
  return slicecount_;
}
inline void RT_TPS_Gallery_Series::set_slicecount(::google::protobuf::int32 value) {
  set_has_slicecount();
  slicecount_ = value;
}

// required int32 xDimension = 5;
inline bool RT_TPS_Gallery_Series::has_xdimension() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_xdimension() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_Gallery_Series::clear_has_xdimension() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_Gallery_Series::clear_xdimension() {
  xdimension_ = 0;
  clear_has_xdimension();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Series::xdimension() const {
  return xdimension_;
}
inline void RT_TPS_Gallery_Series::set_xdimension(::google::protobuf::int32 value) {
  set_has_xdimension();
  xdimension_ = value;
}

// required int32 yDimension = 6;
inline bool RT_TPS_Gallery_Series::has_ydimension() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_ydimension() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_Gallery_Series::clear_has_ydimension() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_Gallery_Series::clear_ydimension() {
  ydimension_ = 0;
  clear_has_ydimension();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Series::ydimension() const {
  return ydimension_;
}
inline void RT_TPS_Gallery_Series::set_ydimension(::google::protobuf::int32 value) {
  set_has_ydimension();
  ydimension_ = value;
}

// required float xPixelSpacing = 7;
inline bool RT_TPS_Gallery_Series::has_xpixelspacing() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_xpixelspacing() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_Gallery_Series::clear_has_xpixelspacing() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_Gallery_Series::clear_xpixelspacing() {
  xpixelspacing_ = 0;
  clear_has_xpixelspacing();
}
inline float RT_TPS_Gallery_Series::xpixelspacing() const {
  return xpixelspacing_;
}
inline void RT_TPS_Gallery_Series::set_xpixelspacing(float value) {
  set_has_xpixelspacing();
  xpixelspacing_ = value;
}

// required float yPixelSpacing = 8;
inline bool RT_TPS_Gallery_Series::has_ypixelspacing() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_ypixelspacing() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_Gallery_Series::clear_has_ypixelspacing() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_Gallery_Series::clear_ypixelspacing() {
  ypixelspacing_ = 0;
  clear_has_ypixelspacing();
}
inline float RT_TPS_Gallery_Series::ypixelspacing() const {
  return ypixelspacing_;
}
inline void RT_TPS_Gallery_Series::set_ypixelspacing(float value) {
  set_has_ypixelspacing();
  ypixelspacing_ = value;
}

// required float sliceSpacing = 9;
inline bool RT_TPS_Gallery_Series::has_slicespacing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_slicespacing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_Gallery_Series::clear_has_slicespacing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_Gallery_Series::clear_slicespacing() {
  slicespacing_ = 0;
  clear_has_slicespacing();
}
inline float RT_TPS_Gallery_Series::slicespacing() const {
  return slicespacing_;
}
inline void RT_TPS_Gallery_Series::set_slicespacing(float value) {
  set_has_slicespacing();
  slicespacing_ = value;
}

// optional string modality = 10;
inline bool RT_TPS_Gallery_Series::has_modality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_modality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_Gallery_Series::clear_has_modality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_Gallery_Series::clear_modality() {
  if (modality_ != &::google::protobuf::internal::kEmptyString) {
    modality_->clear();
  }
  clear_has_modality();
}
inline const ::std::string& RT_TPS_Gallery_Series::modality() const {
  return *modality_;
}
inline void RT_TPS_Gallery_Series::set_modality(const ::std::string& value) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_modality(const char* value) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_modality(const char* value, size_t size) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_modality() {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  return modality_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_modality() {
  clear_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modality_;
    modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 bitAllocated = 11;
inline bool RT_TPS_Gallery_Series::has_bitallocated() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_bitallocated() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_Gallery_Series::clear_has_bitallocated() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_Gallery_Series::clear_bitallocated() {
  bitallocated_ = 0;
  clear_has_bitallocated();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Series::bitallocated() const {
  return bitallocated_;
}
inline void RT_TPS_Gallery_Series::set_bitallocated(::google::protobuf::int32 value) {
  set_has_bitallocated();
  bitallocated_ = value;
}

// optional string seriesTime = 12;
inline bool RT_TPS_Gallery_Series::has_seriestime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_seriestime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_TPS_Gallery_Series::clear_has_seriestime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_TPS_Gallery_Series::clear_seriestime() {
  if (seriestime_ != &::google::protobuf::internal::kEmptyString) {
    seriestime_->clear();
  }
  clear_has_seriestime();
}
inline const ::std::string& RT_TPS_Gallery_Series::seriestime() const {
  return *seriestime_;
}
inline void RT_TPS_Gallery_Series::set_seriestime(const ::std::string& value) {
  set_has_seriestime();
  if (seriestime_ == &::google::protobuf::internal::kEmptyString) {
    seriestime_ = new ::std::string;
  }
  seriestime_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriestime(const char* value) {
  set_has_seriestime();
  if (seriestime_ == &::google::protobuf::internal::kEmptyString) {
    seriestime_ = new ::std::string;
  }
  seriestime_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriestime(const char* value, size_t size) {
  set_has_seriestime();
  if (seriestime_ == &::google::protobuf::internal::kEmptyString) {
    seriestime_ = new ::std::string;
  }
  seriestime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_seriestime() {
  set_has_seriestime();
  if (seriestime_ == &::google::protobuf::internal::kEmptyString) {
    seriestime_ = new ::std::string;
  }
  return seriestime_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_seriestime() {
  clear_has_seriestime();
  if (seriestime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriestime_;
    seriestime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seriesDate = 13;
inline bool RT_TPS_Gallery_Series::has_seriesdate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_seriesdate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RT_TPS_Gallery_Series::clear_has_seriesdate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RT_TPS_Gallery_Series::clear_seriesdate() {
  if (seriesdate_ != &::google::protobuf::internal::kEmptyString) {
    seriesdate_->clear();
  }
  clear_has_seriesdate();
}
inline const ::std::string& RT_TPS_Gallery_Series::seriesdate() const {
  return *seriesdate_;
}
inline void RT_TPS_Gallery_Series::set_seriesdate(const ::std::string& value) {
  set_has_seriesdate();
  if (seriesdate_ == &::google::protobuf::internal::kEmptyString) {
    seriesdate_ = new ::std::string;
  }
  seriesdate_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesdate(const char* value) {
  set_has_seriesdate();
  if (seriesdate_ == &::google::protobuf::internal::kEmptyString) {
    seriesdate_ = new ::std::string;
  }
  seriesdate_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesdate(const char* value, size_t size) {
  set_has_seriesdate();
  if (seriesdate_ == &::google::protobuf::internal::kEmptyString) {
    seriesdate_ = new ::std::string;
  }
  seriesdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_seriesdate() {
  set_has_seriesdate();
  if (seriesdate_ == &::google::protobuf::internal::kEmptyString) {
    seriesdate_ = new ::std::string;
  }
  return seriesdate_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_seriesdate() {
  clear_has_seriesdate();
  if (seriesdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesdate_;
    seriesdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seriesDescription = 14;
inline bool RT_TPS_Gallery_Series::has_seriesdescription() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_seriesdescription() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RT_TPS_Gallery_Series::clear_has_seriesdescription() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RT_TPS_Gallery_Series::clear_seriesdescription() {
  if (seriesdescription_ != &::google::protobuf::internal::kEmptyString) {
    seriesdescription_->clear();
  }
  clear_has_seriesdescription();
}
inline const ::std::string& RT_TPS_Gallery_Series::seriesdescription() const {
  return *seriesdescription_;
}
inline void RT_TPS_Gallery_Series::set_seriesdescription(const ::std::string& value) {
  set_has_seriesdescription();
  if (seriesdescription_ == &::google::protobuf::internal::kEmptyString) {
    seriesdescription_ = new ::std::string;
  }
  seriesdescription_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesdescription(const char* value) {
  set_has_seriesdescription();
  if (seriesdescription_ == &::google::protobuf::internal::kEmptyString) {
    seriesdescription_ = new ::std::string;
  }
  seriesdescription_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_seriesdescription(const char* value, size_t size) {
  set_has_seriesdescription();
  if (seriesdescription_ == &::google::protobuf::internal::kEmptyString) {
    seriesdescription_ = new ::std::string;
  }
  seriesdescription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_seriesdescription() {
  set_has_seriesdescription();
  if (seriesdescription_ == &::google::protobuf::internal::kEmptyString) {
    seriesdescription_ = new ::std::string;
  }
  return seriesdescription_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_seriesdescription() {
  clear_has_seriesdescription();
  if (seriesdescription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesdescription_;
    seriesdescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientPosition = 15;
inline bool RT_TPS_Gallery_Series::has_patientposition() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientposition() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientposition() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RT_TPS_Gallery_Series::clear_patientposition() {
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    patientposition_->clear();
  }
  clear_has_patientposition();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientposition() const {
  return *patientposition_;
}
inline void RT_TPS_Gallery_Series::set_patientposition(const ::std::string& value) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientposition(const char* value) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientposition(const char* value, size_t size) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientposition() {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  return patientposition_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientposition() {
  clear_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientposition_;
    patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes imageSliceBuffer = 16;
inline bool RT_TPS_Gallery_Series::has_imageslicebuffer() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_imageslicebuffer() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RT_TPS_Gallery_Series::clear_has_imageslicebuffer() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RT_TPS_Gallery_Series::clear_imageslicebuffer() {
  if (imageslicebuffer_ != &::google::protobuf::internal::kEmptyString) {
    imageslicebuffer_->clear();
  }
  clear_has_imageslicebuffer();
}
inline const ::std::string& RT_TPS_Gallery_Series::imageslicebuffer() const {
  return *imageslicebuffer_;
}
inline void RT_TPS_Gallery_Series::set_imageslicebuffer(const ::std::string& value) {
  set_has_imageslicebuffer();
  if (imageslicebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imageslicebuffer_ = new ::std::string;
  }
  imageslicebuffer_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_imageslicebuffer(const char* value) {
  set_has_imageslicebuffer();
  if (imageslicebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imageslicebuffer_ = new ::std::string;
  }
  imageslicebuffer_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_imageslicebuffer(const void* value, size_t size) {
  set_has_imageslicebuffer();
  if (imageslicebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imageslicebuffer_ = new ::std::string;
  }
  imageslicebuffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_imageslicebuffer() {
  set_has_imageslicebuffer();
  if (imageslicebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imageslicebuffer_ = new ::std::string;
  }
  return imageslicebuffer_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_imageslicebuffer() {
  clear_has_imageslicebuffer();
  if (imageslicebuffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageslicebuffer_;
    imageslicebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isCopied = 17;
inline bool RT_TPS_Gallery_Series::has_iscopied() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_iscopied() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RT_TPS_Gallery_Series::clear_has_iscopied() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RT_TPS_Gallery_Series::clear_iscopied() {
  iscopied_ = false;
  clear_has_iscopied();
}
inline bool RT_TPS_Gallery_Series::iscopied() const {
  return iscopied_;
}
inline void RT_TPS_Gallery_Series::set_iscopied(bool value) {
  set_has_iscopied();
  iscopied_ = value;
}

// optional int32 seriesNumber = 18;
inline bool RT_TPS_Gallery_Series::has_seriesnumber() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_seriesnumber() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RT_TPS_Gallery_Series::clear_has_seriesnumber() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RT_TPS_Gallery_Series::clear_seriesnumber() {
  seriesnumber_ = 0;
  clear_has_seriesnumber();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_Series::seriesnumber() const {
  return seriesnumber_;
}
inline void RT_TPS_Gallery_Series::set_seriesnumber(::google::protobuf::int32 value) {
  set_has_seriesnumber();
  seriesnumber_ = value;
}

// optional string frameOfReferenceUID = 19;
inline bool RT_TPS_Gallery_Series::has_frameofreferenceuid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_frameofreferenceuid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RT_TPS_Gallery_Series::clear_has_frameofreferenceuid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RT_TPS_Gallery_Series::clear_frameofreferenceuid() {
  if (frameofreferenceuid_ != &::google::protobuf::internal::kEmptyString) {
    frameofreferenceuid_->clear();
  }
  clear_has_frameofreferenceuid();
}
inline const ::std::string& RT_TPS_Gallery_Series::frameofreferenceuid() const {
  return *frameofreferenceuid_;
}
inline void RT_TPS_Gallery_Series::set_frameofreferenceuid(const ::std::string& value) {
  set_has_frameofreferenceuid();
  if (frameofreferenceuid_ == &::google::protobuf::internal::kEmptyString) {
    frameofreferenceuid_ = new ::std::string;
  }
  frameofreferenceuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_frameofreferenceuid(const char* value) {
  set_has_frameofreferenceuid();
  if (frameofreferenceuid_ == &::google::protobuf::internal::kEmptyString) {
    frameofreferenceuid_ = new ::std::string;
  }
  frameofreferenceuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_frameofreferenceuid(const char* value, size_t size) {
  set_has_frameofreferenceuid();
  if (frameofreferenceuid_ == &::google::protobuf::internal::kEmptyString) {
    frameofreferenceuid_ = new ::std::string;
  }
  frameofreferenceuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_frameofreferenceuid() {
  set_has_frameofreferenceuid();
  if (frameofreferenceuid_ == &::google::protobuf::internal::kEmptyString) {
    frameofreferenceuid_ = new ::std::string;
  }
  return frameofreferenceuid_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_frameofreferenceuid() {
  clear_has_frameofreferenceuid();
  if (frameofreferenceuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = frameofreferenceuid_;
    frameofreferenceuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string ManufacturerModelName = 20;
inline bool RT_TPS_Gallery_Series::has_manufacturermodelname() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_manufacturermodelname() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RT_TPS_Gallery_Series::clear_has_manufacturermodelname() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RT_TPS_Gallery_Series::clear_manufacturermodelname() {
  if (manufacturermodelname_ != &::google::protobuf::internal::kEmptyString) {
    manufacturermodelname_->clear();
  }
  clear_has_manufacturermodelname();
}
inline const ::std::string& RT_TPS_Gallery_Series::manufacturermodelname() const {
  return *manufacturermodelname_;
}
inline void RT_TPS_Gallery_Series::set_manufacturermodelname(const ::std::string& value) {
  set_has_manufacturermodelname();
  if (manufacturermodelname_ == &::google::protobuf::internal::kEmptyString) {
    manufacturermodelname_ = new ::std::string;
  }
  manufacturermodelname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_manufacturermodelname(const char* value) {
  set_has_manufacturermodelname();
  if (manufacturermodelname_ == &::google::protobuf::internal::kEmptyString) {
    manufacturermodelname_ = new ::std::string;
  }
  manufacturermodelname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_manufacturermodelname(const char* value, size_t size) {
  set_has_manufacturermodelname();
  if (manufacturermodelname_ == &::google::protobuf::internal::kEmptyString) {
    manufacturermodelname_ = new ::std::string;
  }
  manufacturermodelname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_manufacturermodelname() {
  set_has_manufacturermodelname();
  if (manufacturermodelname_ == &::google::protobuf::internal::kEmptyString) {
    manufacturermodelname_ = new ::std::string;
  }
  return manufacturermodelname_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_manufacturermodelname() {
  clear_has_manufacturermodelname();
  if (manufacturermodelname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manufacturermodelname_;
    manufacturermodelname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool hasVOI = 21;
inline bool RT_TPS_Gallery_Series::has_hasvoi() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_hasvoi() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RT_TPS_Gallery_Series::clear_has_hasvoi() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RT_TPS_Gallery_Series::clear_hasvoi() {
  hasvoi_ = false;
  clear_has_hasvoi();
}
inline bool RT_TPS_Gallery_Series::hasvoi() const {
  return hasvoi_;
}
inline void RT_TPS_Gallery_Series::set_hasvoi(bool value) {
  set_has_hasvoi();
  hasvoi_ = value;
}

// optional string sliceThickness = 22;
inline bool RT_TPS_Gallery_Series::has_slicethickness() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_slicethickness() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RT_TPS_Gallery_Series::clear_has_slicethickness() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RT_TPS_Gallery_Series::clear_slicethickness() {
  if (slicethickness_ != &::google::protobuf::internal::kEmptyString) {
    slicethickness_->clear();
  }
  clear_has_slicethickness();
}
inline const ::std::string& RT_TPS_Gallery_Series::slicethickness() const {
  return *slicethickness_;
}
inline void RT_TPS_Gallery_Series::set_slicethickness(const ::std::string& value) {
  set_has_slicethickness();
  if (slicethickness_ == &::google::protobuf::internal::kEmptyString) {
    slicethickness_ = new ::std::string;
  }
  slicethickness_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_slicethickness(const char* value) {
  set_has_slicethickness();
  if (slicethickness_ == &::google::protobuf::internal::kEmptyString) {
    slicethickness_ = new ::std::string;
  }
  slicethickness_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_slicethickness(const char* value, size_t size) {
  set_has_slicethickness();
  if (slicethickness_ == &::google::protobuf::internal::kEmptyString) {
    slicethickness_ = new ::std::string;
  }
  slicethickness_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_slicethickness() {
  set_has_slicethickness();
  if (slicethickness_ == &::google::protobuf::internal::kEmptyString) {
    slicethickness_ = new ::std::string;
  }
  return slicethickness_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_slicethickness() {
  clear_has_slicethickness();
  if (slicethickness_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = slicethickness_;
    slicethickness_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string studyID = 23;
inline bool RT_TPS_Gallery_Series::has_studyid() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_studyid() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RT_TPS_Gallery_Series::clear_has_studyid() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RT_TPS_Gallery_Series::clear_studyid() {
  if (studyid_ != &::google::protobuf::internal::kEmptyString) {
    studyid_->clear();
  }
  clear_has_studyid();
}
inline const ::std::string& RT_TPS_Gallery_Series::studyid() const {
  return *studyid_;
}
inline void RT_TPS_Gallery_Series::set_studyid(const ::std::string& value) {
  set_has_studyid();
  if (studyid_ == &::google::protobuf::internal::kEmptyString) {
    studyid_ = new ::std::string;
  }
  studyid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_studyid(const char* value) {
  set_has_studyid();
  if (studyid_ == &::google::protobuf::internal::kEmptyString) {
    studyid_ = new ::std::string;
  }
  studyid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_studyid(const char* value, size_t size) {
  set_has_studyid();
  if (studyid_ == &::google::protobuf::internal::kEmptyString) {
    studyid_ = new ::std::string;
  }
  studyid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_studyid() {
  set_has_studyid();
  if (studyid_ == &::google::protobuf::internal::kEmptyString) {
    studyid_ = new ::std::string;
  }
  return studyid_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_studyid() {
  clear_has_studyid();
  if (studyid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = studyid_;
    studyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string studyDescription = 24;
inline bool RT_TPS_Gallery_Series::has_studydescription() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_studydescription() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RT_TPS_Gallery_Series::clear_has_studydescription() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RT_TPS_Gallery_Series::clear_studydescription() {
  if (studydescription_ != &::google::protobuf::internal::kEmptyString) {
    studydescription_->clear();
  }
  clear_has_studydescription();
}
inline const ::std::string& RT_TPS_Gallery_Series::studydescription() const {
  return *studydescription_;
}
inline void RT_TPS_Gallery_Series::set_studydescription(const ::std::string& value) {
  set_has_studydescription();
  if (studydescription_ == &::google::protobuf::internal::kEmptyString) {
    studydescription_ = new ::std::string;
  }
  studydescription_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_studydescription(const char* value) {
  set_has_studydescription();
  if (studydescription_ == &::google::protobuf::internal::kEmptyString) {
    studydescription_ = new ::std::string;
  }
  studydescription_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_studydescription(const char* value, size_t size) {
  set_has_studydescription();
  if (studydescription_ == &::google::protobuf::internal::kEmptyString) {
    studydescription_ = new ::std::string;
  }
  studydescription_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_studydescription() {
  set_has_studydescription();
  if (studydescription_ == &::google::protobuf::internal::kEmptyString) {
    studydescription_ = new ::std::string;
  }
  return studydescription_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_studydescription() {
  clear_has_studydescription();
  if (studydescription_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = studydescription_;
    studydescription_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientName = 25;
inline bool RT_TPS_Gallery_Series::has_patientname() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientname() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientname() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RT_TPS_Gallery_Series::clear_patientname() {
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    patientname_->clear();
  }
  clear_has_patientname();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientname() const {
  return *patientname_;
}
inline void RT_TPS_Gallery_Series::set_patientname(const ::std::string& value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientname(const char* value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientname(const char* value, size_t size) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientname() {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  return patientname_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientname() {
  clear_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientname_;
    patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientID = 26;
inline bool RT_TPS_Gallery_Series::has_patientid() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientid() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientid() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RT_TPS_Gallery_Series::clear_patientid() {
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    patientid_->clear();
  }
  clear_has_patientid();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientid() const {
  return *patientid_;
}
inline void RT_TPS_Gallery_Series::set_patientid(const ::std::string& value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientid(const char* value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientid(const char* value, size_t size) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientid() {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  return patientid_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientid() {
  clear_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientid_;
    patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientBirthday = 27;
inline bool RT_TPS_Gallery_Series::has_patientbirthday() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientbirthday() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientbirthday() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RT_TPS_Gallery_Series::clear_patientbirthday() {
  if (patientbirthday_ != &::google::protobuf::internal::kEmptyString) {
    patientbirthday_->clear();
  }
  clear_has_patientbirthday();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientbirthday() const {
  return *patientbirthday_;
}
inline void RT_TPS_Gallery_Series::set_patientbirthday(const ::std::string& value) {
  set_has_patientbirthday();
  if (patientbirthday_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthday_ = new ::std::string;
  }
  patientbirthday_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientbirthday(const char* value) {
  set_has_patientbirthday();
  if (patientbirthday_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthday_ = new ::std::string;
  }
  patientbirthday_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientbirthday(const char* value, size_t size) {
  set_has_patientbirthday();
  if (patientbirthday_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthday_ = new ::std::string;
  }
  patientbirthday_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientbirthday() {
  set_has_patientbirthday();
  if (patientbirthday_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthday_ = new ::std::string;
  }
  return patientbirthday_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientbirthday() {
  clear_has_patientbirthday();
  if (patientbirthday_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientbirthday_;
    patientbirthday_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientAge = 28;
inline bool RT_TPS_Gallery_Series::has_patientage() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientage() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientage() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RT_TPS_Gallery_Series::clear_patientage() {
  if (patientage_ != &::google::protobuf::internal::kEmptyString) {
    patientage_->clear();
  }
  clear_has_patientage();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientage() const {
  return *patientage_;
}
inline void RT_TPS_Gallery_Series::set_patientage(const ::std::string& value) {
  set_has_patientage();
  if (patientage_ == &::google::protobuf::internal::kEmptyString) {
    patientage_ = new ::std::string;
  }
  patientage_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientage(const char* value) {
  set_has_patientage();
  if (patientage_ == &::google::protobuf::internal::kEmptyString) {
    patientage_ = new ::std::string;
  }
  patientage_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientage(const char* value, size_t size) {
  set_has_patientage();
  if (patientage_ == &::google::protobuf::internal::kEmptyString) {
    patientage_ = new ::std::string;
  }
  patientage_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientage() {
  set_has_patientage();
  if (patientage_ == &::google::protobuf::internal::kEmptyString) {
    patientage_ = new ::std::string;
  }
  return patientage_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientage() {
  clear_has_patientage();
  if (patientage_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientage_;
    patientage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientSex = 29;
inline bool RT_TPS_Gallery_Series::has_patientsex() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_patientsex() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_patientsex() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RT_TPS_Gallery_Series::clear_patientsex() {
  if (patientsex_ != &::google::protobuf::internal::kEmptyString) {
    patientsex_->clear();
  }
  clear_has_patientsex();
}
inline const ::std::string& RT_TPS_Gallery_Series::patientsex() const {
  return *patientsex_;
}
inline void RT_TPS_Gallery_Series::set_patientsex(const ::std::string& value) {
  set_has_patientsex();
  if (patientsex_ == &::google::protobuf::internal::kEmptyString) {
    patientsex_ = new ::std::string;
  }
  patientsex_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientsex(const char* value) {
  set_has_patientsex();
  if (patientsex_ == &::google::protobuf::internal::kEmptyString) {
    patientsex_ = new ::std::string;
  }
  patientsex_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_patientsex(const char* value, size_t size) {
  set_has_patientsex();
  if (patientsex_ == &::google::protobuf::internal::kEmptyString) {
    patientsex_ = new ::std::string;
  }
  patientsex_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_patientsex() {
  set_has_patientsex();
  if (patientsex_ == &::google::protobuf::internal::kEmptyString) {
    patientsex_ = new ::std::string;
  }
  return patientsex_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_patientsex() {
  clear_has_patientsex();
  if (patientsex_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientsex_;
    patientsex_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string institutionName = 30;
inline bool RT_TPS_Gallery_Series::has_institutionname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_institutionname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_institutionname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RT_TPS_Gallery_Series::clear_institutionname() {
  if (institutionname_ != &::google::protobuf::internal::kEmptyString) {
    institutionname_->clear();
  }
  clear_has_institutionname();
}
inline const ::std::string& RT_TPS_Gallery_Series::institutionname() const {
  return *institutionname_;
}
inline void RT_TPS_Gallery_Series::set_institutionname(const ::std::string& value) {
  set_has_institutionname();
  if (institutionname_ == &::google::protobuf::internal::kEmptyString) {
    institutionname_ = new ::std::string;
  }
  institutionname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_institutionname(const char* value) {
  set_has_institutionname();
  if (institutionname_ == &::google::protobuf::internal::kEmptyString) {
    institutionname_ = new ::std::string;
  }
  institutionname_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_institutionname(const char* value, size_t size) {
  set_has_institutionname();
  if (institutionname_ == &::google::protobuf::internal::kEmptyString) {
    institutionname_ = new ::std::string;
  }
  institutionname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_institutionname() {
  set_has_institutionname();
  if (institutionname_ == &::google::protobuf::internal::kEmptyString) {
    institutionname_ = new ::std::string;
  }
  return institutionname_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_institutionname() {
  clear_has_institutionname();
  if (institutionname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = institutionname_;
    institutionname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string manufacturer = 31;
inline bool RT_TPS_Gallery_Series::has_manufacturer() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_manufacturer() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_manufacturer() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RT_TPS_Gallery_Series::clear_manufacturer() {
  if (manufacturer_ != &::google::protobuf::internal::kEmptyString) {
    manufacturer_->clear();
  }
  clear_has_manufacturer();
}
inline const ::std::string& RT_TPS_Gallery_Series::manufacturer() const {
  return *manufacturer_;
}
inline void RT_TPS_Gallery_Series::set_manufacturer(const ::std::string& value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_manufacturer(const char* value) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_manufacturer(const char* value, size_t size) {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  manufacturer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_manufacturer() {
  set_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    manufacturer_ = new ::std::string;
  }
  return manufacturer_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_manufacturer() {
  clear_has_manufacturer();
  if (manufacturer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = manufacturer_;
    manufacturer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string groupUID = 32;
inline bool RT_TPS_Gallery_Series::has_groupuid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RT_TPS_Gallery_Series::set_has_groupuid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RT_TPS_Gallery_Series::clear_has_groupuid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RT_TPS_Gallery_Series::clear_groupuid() {
  if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
    groupuid_->clear();
  }
  clear_has_groupuid();
}
inline const ::std::string& RT_TPS_Gallery_Series::groupuid() const {
  return *groupuid_;
}
inline void RT_TPS_Gallery_Series::set_groupuid(const ::std::string& value) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_groupuid(const char* value) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(value);
}
inline void RT_TPS_Gallery_Series::set_groupuid(const char* value, size_t size) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_Series::mutable_groupuid() {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  return groupuid_;
}
inline ::std::string* RT_TPS_Gallery_Series::release_groupuid() {
  clear_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupuid_;
    groupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_SeriesGroup

// required string groupUID = 1;
inline bool RT_TPS_Gallery_SeriesGroup::has_groupuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_SeriesGroup::set_has_groupuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_has_groupuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_groupuid() {
  if (groupuid_ != &::google::protobuf::internal::kEmptyString) {
    groupuid_->clear();
  }
  clear_has_groupuid();
}
inline const ::std::string& RT_TPS_Gallery_SeriesGroup::groupuid() const {
  return *groupuid_;
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupuid(const ::std::string& value) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupuid(const char* value) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupuid(const char* value, size_t size) {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  groupuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::mutable_groupuid() {
  set_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    groupuid_ = new ::std::string;
  }
  return groupuid_;
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::release_groupuid() {
  clear_has_groupuid();
  if (groupuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupuid_;
    groupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string groupName = 2;
inline bool RT_TPS_Gallery_SeriesGroup::has_groupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_SeriesGroup::set_has_groupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_has_groupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_groupname() {
  if (groupname_ != &::google::protobuf::internal::kEmptyString) {
    groupname_->clear();
  }
  clear_has_groupname();
}
inline const ::std::string& RT_TPS_Gallery_SeriesGroup::groupname() const {
  return *groupname_;
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupname(const ::std::string& value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupname(const char* value) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_groupname(const char* value, size_t size) {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  groupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::mutable_groupname() {
  set_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    groupname_ = new ::std::string;
  }
  return groupname_;
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::release_groupname() {
  clear_has_groupname();
  if (groupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupname_;
    groupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 groupType = 3;
inline bool RT_TPS_Gallery_SeriesGroup::has_grouptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_SeriesGroup::set_has_grouptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_has_grouptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_grouptype() {
  grouptype_ = 0;
  clear_has_grouptype();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_SeriesGroup::grouptype() const {
  return grouptype_;
}
inline void RT_TPS_Gallery_SeriesGroup::set_grouptype(::google::protobuf::int32 value) {
  set_has_grouptype();
  grouptype_ = value;
}

// optional string mainSeries = 4;
inline bool RT_TPS_Gallery_SeriesGroup::has_mainseries() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_SeriesGroup::set_has_mainseries() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_has_mainseries() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_SeriesGroup::clear_mainseries() {
  if (mainseries_ != &::google::protobuf::internal::kEmptyString) {
    mainseries_->clear();
  }
  clear_has_mainseries();
}
inline const ::std::string& RT_TPS_Gallery_SeriesGroup::mainseries() const {
  return *mainseries_;
}
inline void RT_TPS_Gallery_SeriesGroup::set_mainseries(const ::std::string& value) {
  set_has_mainseries();
  if (mainseries_ == &::google::protobuf::internal::kEmptyString) {
    mainseries_ = new ::std::string;
  }
  mainseries_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_mainseries(const char* value) {
  set_has_mainseries();
  if (mainseries_ == &::google::protobuf::internal::kEmptyString) {
    mainseries_ = new ::std::string;
  }
  mainseries_->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_mainseries(const char* value, size_t size) {
  set_has_mainseries();
  if (mainseries_ == &::google::protobuf::internal::kEmptyString) {
    mainseries_ = new ::std::string;
  }
  mainseries_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::mutable_mainseries() {
  set_has_mainseries();
  if (mainseries_ == &::google::protobuf::internal::kEmptyString) {
    mainseries_ = new ::std::string;
  }
  return mainseries_;
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::release_mainseries() {
  clear_has_mainseries();
  if (mainseries_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = mainseries_;
    mainseries_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated string seriesList = 5;
inline int RT_TPS_Gallery_SeriesGroup::serieslist_size() const {
  return serieslist_.size();
}
inline void RT_TPS_Gallery_SeriesGroup::clear_serieslist() {
  serieslist_.Clear();
}
inline const ::std::string& RT_TPS_Gallery_SeriesGroup::serieslist(int index) const {
  return serieslist_.Get(index);
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::mutable_serieslist(int index) {
  return serieslist_.Mutable(index);
}
inline void RT_TPS_Gallery_SeriesGroup::set_serieslist(int index, const ::std::string& value) {
  serieslist_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_serieslist(int index, const char* value) {
  serieslist_.Mutable(index)->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::set_serieslist(int index, const char* value, size_t size) {
  serieslist_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_SeriesGroup::add_serieslist() {
  return serieslist_.Add();
}
inline void RT_TPS_Gallery_SeriesGroup::add_serieslist(const ::std::string& value) {
  serieslist_.Add()->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::add_serieslist(const char* value) {
  serieslist_.Add()->assign(value);
}
inline void RT_TPS_Gallery_SeriesGroup::add_serieslist(const char* value, size_t size) {
  serieslist_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
RT_TPS_Gallery_SeriesGroup::serieslist() const {
  return serieslist_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
RT_TPS_Gallery_SeriesGroup::mutable_serieslist() {
  return &serieslist_;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_RepeatedSeriesGroup

// repeated .tps.proto.RT_TPS_Gallery_SeriesGroup series_group = 1;
inline int RT_TPS_Gallery_RepeatedSeriesGroup::series_group_size() const {
  return series_group_.size();
}
inline void RT_TPS_Gallery_RepeatedSeriesGroup::clear_series_group() {
  series_group_.Clear();
}
inline const ::tps::proto::RT_TPS_Gallery_SeriesGroup& RT_TPS_Gallery_RepeatedSeriesGroup::series_group(int index) const {
  return series_group_.Get(index);
}
inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_RepeatedSeriesGroup::mutable_series_group(int index) {
  return series_group_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Gallery_SeriesGroup* RT_TPS_Gallery_RepeatedSeriesGroup::add_series_group() {
  return series_group_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >&
RT_TPS_Gallery_RepeatedSeriesGroup::series_group() const {
  return series_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Gallery_SeriesGroup >*
RT_TPS_Gallery_RepeatedSeriesGroup::mutable_series_group() {
  return &series_group_;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_CornerInfo

// optional string patientname = 1;
inline bool RT_TPS_Gallery_CornerInfo::has_patientname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_patientname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_patientname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_patientname() {
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    patientname_->clear();
  }
  clear_has_patientname();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfo::patientname() const {
  return *patientname_;
}
inline void RT_TPS_Gallery_CornerInfo::set_patientname(const ::std::string& value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_patientname(const char* value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_patientname(const char* value, size_t size) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::mutable_patientname() {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  return patientname_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::release_patientname() {
  clear_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientname_;
    patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seriesname = 2;
inline bool RT_TPS_Gallery_CornerInfo::has_seriesname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_seriesname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_seriesname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_seriesname() {
  if (seriesname_ != &::google::protobuf::internal::kEmptyString) {
    seriesname_->clear();
  }
  clear_has_seriesname();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfo::seriesname() const {
  return *seriesname_;
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesname(const ::std::string& value) {
  set_has_seriesname();
  if (seriesname_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ = new ::std::string;
  }
  seriesname_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesname(const char* value) {
  set_has_seriesname();
  if (seriesname_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ = new ::std::string;
  }
  seriesname_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesname(const char* value, size_t size) {
  set_has_seriesname();
  if (seriesname_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ = new ::std::string;
  }
  seriesname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::mutable_seriesname() {
  set_has_seriesname();
  if (seriesname_ == &::google::protobuf::internal::kEmptyString) {
    seriesname_ = new ::std::string;
  }
  return seriesname_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::release_seriesname() {
  clear_has_seriesname();
  if (seriesname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesname_;
    seriesname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string seriesdatetime = 3;
inline bool RT_TPS_Gallery_CornerInfo::has_seriesdatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_seriesdatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_seriesdatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_seriesdatetime() {
  if (seriesdatetime_ != &::google::protobuf::internal::kEmptyString) {
    seriesdatetime_->clear();
  }
  clear_has_seriesdatetime();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfo::seriesdatetime() const {
  return *seriesdatetime_;
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesdatetime(const ::std::string& value) {
  set_has_seriesdatetime();
  if (seriesdatetime_ == &::google::protobuf::internal::kEmptyString) {
    seriesdatetime_ = new ::std::string;
  }
  seriesdatetime_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesdatetime(const char* value) {
  set_has_seriesdatetime();
  if (seriesdatetime_ == &::google::protobuf::internal::kEmptyString) {
    seriesdatetime_ = new ::std::string;
  }
  seriesdatetime_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_seriesdatetime(const char* value, size_t size) {
  set_has_seriesdatetime();
  if (seriesdatetime_ == &::google::protobuf::internal::kEmptyString) {
    seriesdatetime_ = new ::std::string;
  }
  seriesdatetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::mutable_seriesdatetime() {
  set_has_seriesdatetime();
  if (seriesdatetime_ == &::google::protobuf::internal::kEmptyString) {
    seriesdatetime_ = new ::std::string;
  }
  return seriesdatetime_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::release_seriesdatetime() {
  clear_has_seriesdatetime();
  if (seriesdatetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesdatetime_;
    seriesdatetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientposition = 4;
inline bool RT_TPS_Gallery_CornerInfo::has_patientposition() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_patientposition() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_patientposition() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_patientposition() {
  if (patientposition_ != &::google::protobuf::internal::kEmptyString) {
    patientposition_->clear();
  }
  clear_has_patientposition();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfo::patientposition() const {
  return *patientposition_;
}
inline void RT_TPS_Gallery_CornerInfo::set_patientposition(const ::std::string& value) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_patientposition(const char* value) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_patientposition(const char* value, size_t size) {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  patientposition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::mutable_patientposition() {
  set_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    patientposition_ = new ::std::string;
  }
  return patientposition_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::release_patientposition() {
  clear_has_patientposition();
  if (patientposition_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientposition_;
    patientposition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double value = 5;
inline bool RT_TPS_Gallery_CornerInfo::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double RT_TPS_Gallery_CornerInfo::value() const {
  return value_;
}
inline void RT_TPS_Gallery_CornerInfo::set_value(double value) {
  set_has_value();
  value_ = value;
}

// optional double density = 6;
inline bool RT_TPS_Gallery_CornerInfo::has_density() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_density() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_density() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_density() {
  density_ = 0;
  clear_has_density();
}
inline double RT_TPS_Gallery_CornerInfo::density() const {
  return density_;
}
inline void RT_TPS_Gallery_CornerInfo::set_density(double value) {
  set_has_density();
  density_ = value;
}

// optional double pixelpositionx = 7;
inline bool RT_TPS_Gallery_CornerInfo::has_pixelpositionx() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_pixelpositionx() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_pixelpositionx() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_pixelpositionx() {
  pixelpositionx_ = 0;
  clear_has_pixelpositionx();
}
inline double RT_TPS_Gallery_CornerInfo::pixelpositionx() const {
  return pixelpositionx_;
}
inline void RT_TPS_Gallery_CornerInfo::set_pixelpositionx(double value) {
  set_has_pixelpositionx();
  pixelpositionx_ = value;
}

// optional double pixelpositiony = 8;
inline bool RT_TPS_Gallery_CornerInfo::has_pixelpositiony() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_pixelpositiony() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_pixelpositiony() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_pixelpositiony() {
  pixelpositiony_ = 0;
  clear_has_pixelpositiony();
}
inline double RT_TPS_Gallery_CornerInfo::pixelpositiony() const {
  return pixelpositiony_;
}
inline void RT_TPS_Gallery_CornerInfo::set_pixelpositiony(double value) {
  set_has_pixelpositiony();
  pixelpositiony_ = value;
}

// optional double pixelpositionz = 9;
inline bool RT_TPS_Gallery_CornerInfo::has_pixelpositionz() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_pixelpositionz() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_pixelpositionz() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_pixelpositionz() {
  pixelpositionz_ = 0;
  clear_has_pixelpositionz();
}
inline double RT_TPS_Gallery_CornerInfo::pixelpositionz() const {
  return pixelpositionz_;
}
inline void RT_TPS_Gallery_CornerInfo::set_pixelpositionz(double value) {
  set_has_pixelpositionz();
  pixelpositionz_ = value;
}

// optional double windowwidth = 10;
inline bool RT_TPS_Gallery_CornerInfo::has_windowwidth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_windowwidth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_windowwidth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_windowwidth() {
  windowwidth_ = 0;
  clear_has_windowwidth();
}
inline double RT_TPS_Gallery_CornerInfo::windowwidth() const {
  return windowwidth_;
}
inline void RT_TPS_Gallery_CornerInfo::set_windowwidth(double value) {
  set_has_windowwidth();
  windowwidth_ = value;
}

// optional double windowcenter = 11;
inline bool RT_TPS_Gallery_CornerInfo::has_windowcenter() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_windowcenter() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_windowcenter() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_windowcenter() {
  windowcenter_ = 0;
  clear_has_windowcenter();
}
inline double RT_TPS_Gallery_CornerInfo::windowcenter() const {
  return windowcenter_;
}
inline void RT_TPS_Gallery_CornerInfo::set_windowcenter(double value) {
  set_has_windowcenter();
  windowcenter_ = value;
}

// optional int32 slicenumber = 12;
inline bool RT_TPS_Gallery_CornerInfo::has_slicenumber() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_slicenumber() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_slicenumber() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_slicenumber() {
  slicenumber_ = 0;
  clear_has_slicenumber();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_CornerInfo::slicenumber() const {
  return slicenumber_;
}
inline void RT_TPS_Gallery_CornerInfo::set_slicenumber(::google::protobuf::int32 value) {
  set_has_slicenumber();
  slicenumber_ = value;
}

// optional int32 totalslicenumber = 13;
inline bool RT_TPS_Gallery_CornerInfo::has_totalslicenumber() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_totalslicenumber() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_totalslicenumber() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_totalslicenumber() {
  totalslicenumber_ = 0;
  clear_has_totalslicenumber();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_CornerInfo::totalslicenumber() const {
  return totalslicenumber_;
}
inline void RT_TPS_Gallery_CornerInfo::set_totalslicenumber(::google::protobuf::int32 value) {
  set_has_totalslicenumber();
  totalslicenumber_ = value;
}

// optional double slicethickness = 14;
inline bool RT_TPS_Gallery_CornerInfo::has_slicethickness() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_slicethickness() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_slicethickness() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_slicethickness() {
  slicethickness_ = 0;
  clear_has_slicethickness();
}
inline double RT_TPS_Gallery_CornerInfo::slicethickness() const {
  return slicethickness_;
}
inline void RT_TPS_Gallery_CornerInfo::set_slicethickness(double value) {
  set_has_slicethickness();
  slicethickness_ = value;
}

// optional bool isvaluevalid = 15;
inline bool RT_TPS_Gallery_CornerInfo::has_isvaluevalid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_isvaluevalid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_isvaluevalid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_isvaluevalid() {
  isvaluevalid_ = false;
  clear_has_isvaluevalid();
}
inline bool RT_TPS_Gallery_CornerInfo::isvaluevalid() const {
  return isvaluevalid_;
}
inline void RT_TPS_Gallery_CornerInfo::set_isvaluevalid(bool value) {
  set_has_isvaluevalid();
  isvaluevalid_ = value;
}

// optional string modality = 16;
inline bool RT_TPS_Gallery_CornerInfo::has_modality() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_modality() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_modality() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_modality() {
  if (modality_ != &::google::protobuf::internal::kEmptyString) {
    modality_->clear();
  }
  clear_has_modality();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfo::modality() const {
  return *modality_;
}
inline void RT_TPS_Gallery_CornerInfo::set_modality(const ::std::string& value) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_modality(const char* value) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfo::set_modality(const char* value, size_t size) {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  modality_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::mutable_modality() {
  set_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    modality_ = new ::std::string;
  }
  return modality_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfo::release_modality() {
  clear_has_modality();
  if (modality_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = modality_;
    modality_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double zoomfactor = 17;
inline bool RT_TPS_Gallery_CornerInfo::has_zoomfactor() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_zoomfactor() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_zoomfactor() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_zoomfactor() {
  zoomfactor_ = 0;
  clear_has_zoomfactor();
}
inline double RT_TPS_Gallery_CornerInfo::zoomfactor() const {
  return zoomfactor_;
}
inline void RT_TPS_Gallery_CornerInfo::set_zoomfactor(double value) {
  set_has_zoomfactor();
  zoomfactor_ = value;
}

// optional double rotate = 18;
inline bool RT_TPS_Gallery_CornerInfo::has_rotate() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RT_TPS_Gallery_CornerInfo::set_has_rotate() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_has_rotate() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RT_TPS_Gallery_CornerInfo::clear_rotate() {
  rotate_ = 0;
  clear_has_rotate();
}
inline double RT_TPS_Gallery_CornerInfo::rotate() const {
  return rotate_;
}
inline void RT_TPS_Gallery_CornerInfo::set_rotate(double value) {
  set_has_rotate();
  rotate_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_CornerInfoVisible

// required string seriesUID = 1;
inline bool RT_TPS_Gallery_CornerInfoVisible::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_CornerInfoVisible::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_CornerInfoVisible::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RT_TPS_Gallery_CornerInfoVisible::seriesuid() const {
  return *seriesuid_;
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_CornerInfoVisible::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RT_TPS_Gallery_CornerInfoVisible::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isVisible = 2;
inline bool RT_TPS_Gallery_CornerInfoVisible::has_isvisible() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_has_isvisible() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_CornerInfoVisible::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_CornerInfoVisible::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool RT_TPS_Gallery_CornerInfoVisible::isvisible() const {
  return isvisible_;
}
inline void RT_TPS_Gallery_CornerInfoVisible::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_ExpandSeries

// required string seriesUID = 1;
inline bool RT_TPS_Gallery_ExpandSeries::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_ExpandSeries::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RT_TPS_Gallery_ExpandSeries::seriesuid() const {
  return *seriesuid_;
}
inline void RT_TPS_Gallery_ExpandSeries::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_ExpandSeries::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_ExpandSeries::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_ExpandSeries::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RT_TPS_Gallery_ExpandSeries::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool IsExpandBottom = 2;
inline bool RT_TPS_Gallery_ExpandSeries::has_isexpandbottom() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_ExpandSeries::set_has_isexpandbottom() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_has_isexpandbottom() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_isexpandbottom() {
  isexpandbottom_ = false;
  clear_has_isexpandbottom();
}
inline bool RT_TPS_Gallery_ExpandSeries::isexpandbottom() const {
  return isexpandbottom_;
}
inline void RT_TPS_Gallery_ExpandSeries::set_isexpandbottom(bool value) {
  set_has_isexpandbottom();
  isexpandbottom_ = value;
}

// required int32 SliceNumber = 3;
inline bool RT_TPS_Gallery_ExpandSeries::has_slicenumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Gallery_ExpandSeries::set_has_slicenumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_has_slicenumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_slicenumber() {
  slicenumber_ = 0;
  clear_has_slicenumber();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_ExpandSeries::slicenumber() const {
  return slicenumber_;
}
inline void RT_TPS_Gallery_ExpandSeries::set_slicenumber(::google::protobuf::int32 value) {
  set_has_slicenumber();
  slicenumber_ = value;
}

// required bool IsSaveAsNewSeries = 4;
inline bool RT_TPS_Gallery_ExpandSeries::has_issaveasnewseries() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Gallery_ExpandSeries::set_has_issaveasnewseries() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_has_issaveasnewseries() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Gallery_ExpandSeries::clear_issaveasnewseries() {
  issaveasnewseries_ = false;
  clear_has_issaveasnewseries();
}
inline bool RT_TPS_Gallery_ExpandSeries::issaveasnewseries() const {
  return issaveasnewseries_;
}
inline void RT_TPS_Gallery_ExpandSeries::set_issaveasnewseries(bool value) {
  set_has_issaveasnewseries();
  issaveasnewseries_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_SliceInfo

// required int32 currentSlice = 1;
inline bool RT_TPS_Gallery_SliceInfo::has_currentslice() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_SliceInfo::set_has_currentslice() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_SliceInfo::clear_has_currentslice() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_SliceInfo::clear_currentslice() {
  currentslice_ = 0;
  clear_has_currentslice();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_SliceInfo::currentslice() const {
  return currentslice_;
}
inline void RT_TPS_Gallery_SliceInfo::set_currentslice(::google::protobuf::int32 value) {
  set_has_currentslice();
  currentslice_ = value;
}

// required int32 totalSlice = 2;
inline bool RT_TPS_Gallery_SliceInfo::has_totalslice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_SliceInfo::set_has_totalslice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_SliceInfo::clear_has_totalslice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_SliceInfo::clear_totalslice() {
  totalslice_ = 0;
  clear_has_totalslice();
}
inline ::google::protobuf::int32 RT_TPS_Gallery_SliceInfo::totalslice() const {
  return totalslice_;
}
inline void RT_TPS_Gallery_SliceInfo::set_totalslice(::google::protobuf::int32 value) {
  set_has_totalslice();
  totalslice_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_Gallery_SaveSeries

// required string seriesUID = 1;
inline bool RT_TPS_Gallery_SaveSeries::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Gallery_SaveSeries::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Gallery_SaveSeries::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Gallery_SaveSeries::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RT_TPS_Gallery_SaveSeries::seriesuid() const {
  return *seriesuid_;
}
inline void RT_TPS_Gallery_SaveSeries::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_SaveSeries::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RT_TPS_Gallery_SaveSeries::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Gallery_SaveSeries::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RT_TPS_Gallery_SaveSeries::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isSaveAsNewSeries = 2;
inline bool RT_TPS_Gallery_SaveSeries::has_issaveasnewseries() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Gallery_SaveSeries::set_has_issaveasnewseries() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Gallery_SaveSeries::clear_has_issaveasnewseries() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Gallery_SaveSeries::clear_issaveasnewseries() {
  issaveasnewseries_ = false;
  clear_has_issaveasnewseries();
}
inline bool RT_TPS_Gallery_SaveSeries::issaveasnewseries() const {
  return issaveasnewseries_;
}
inline void RT_TPS_Gallery_SaveSeries::set_issaveasnewseries(bool value) {
  set_has_issaveasnewseries();
  issaveasnewseries_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fgallery_2eproto__INCLUDED
