// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_commissionedunit.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fcommissionedunit_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fcommissionedunit_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto();

class RtTpsProtoCommissionedunit;
class RtTpsProtoRepeatedCommissionedunit;
class RtTpsProtoTrayfactor;

// ===================================================================

class RtTpsProtoCommissionedunit : public ::google::protobuf::Message {
 public:
  RtTpsProtoCommissionedunit();
  virtual ~RtTpsProtoCommissionedunit();
  
  RtTpsProtoCommissionedunit(const RtTpsProtoCommissionedunit& from);
  
  inline RtTpsProtoCommissionedunit& operator=(const RtTpsProtoCommissionedunit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoCommissionedunit& default_instance();
  
  void Swap(RtTpsProtoCommissionedunit* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoCommissionedunit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoCommissionedunit& from);
  void MergeFrom(const RtTpsProtoCommissionedunit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string commissionedunitUID = 1;
  inline bool has_commissionedunituid() const;
  inline void clear_commissionedunituid();
  static const int kCommissionedunitUIDFieldNumber = 1;
  inline const ::std::string& commissionedunituid() const;
  inline void set_commissionedunituid(const ::std::string& value);
  inline void set_commissionedunituid(const char* value);
  inline void set_commissionedunituid(const char* value, size_t size);
  inline ::std::string* mutable_commissionedunituid();
  inline ::std::string* release_commissionedunituid();
  
  // optional int32 radiationType = 2;
  inline bool has_radiationtype() const;
  inline void clear_radiationtype();
  static const int kRadiationTypeFieldNumber = 2;
  inline ::google::protobuf::int32 radiationtype() const;
  inline void set_radiationtype(::google::protobuf::int32 value);
  
  // repeated int32 techniqueType = 3;
  inline int techniquetype_size() const;
  inline void clear_techniquetype();
  static const int kTechniqueTypeFieldNumber = 3;
  inline ::google::protobuf::int32 techniquetype(int index) const;
  inline void set_techniquetype(int index, ::google::protobuf::int32 value);
  inline void add_techniquetype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      techniquetype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_techniquetype();
  
  // optional string unitEnergy = 4;
  inline bool has_unitenergy() const;
  inline void clear_unitenergy();
  static const int kUnitEnergyFieldNumber = 4;
  inline const ::std::string& unitenergy() const;
  inline void set_unitenergy(const ::std::string& value);
  inline void set_unitenergy(const char* value);
  inline void set_unitenergy(const char* value, size_t size);
  inline ::std::string* mutable_unitenergy();
  inline ::std::string* release_unitenergy();
  
  // optional int32 flatteningfiltermode = 5;
  inline bool has_flatteningfiltermode() const;
  inline void clear_flatteningfiltermode();
  static const int kFlatteningfiltermodeFieldNumber = 5;
  inline ::google::protobuf::int32 flatteningfiltermode() const;
  inline void set_flatteningfiltermode(::google::protobuf::int32 value);
  
  // repeated float doseRates = 6;
  inline int doserates_size() const;
  inline void clear_doserates();
  static const int kDoseRatesFieldNumber = 6;
  inline float doserates(int index) const;
  inline void set_doserates(int index, float value);
  inline void add_doserates(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      doserates() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_doserates();
  
  // repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
  inline int trayfactors_size() const;
  inline void clear_trayfactors();
  static const int kTrayfactorsFieldNumber = 7;
  inline const ::tps::proto::RtTpsProtoTrayfactor& trayfactors(int index) const;
  inline ::tps::proto::RtTpsProtoTrayfactor* mutable_trayfactors(int index);
  inline ::tps::proto::RtTpsProtoTrayfactor* add_trayfactors();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoTrayfactor >&
      trayfactors() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoTrayfactor >*
      mutable_trayfactors();
  
  // optional string machineUID = 8;
  inline bool has_machineuid() const;
  inline void clear_machineuid();
  static const int kMachineUIDFieldNumber = 8;
  inline const ::std::string& machineuid() const;
  inline void set_machineuid(const ::std::string& value);
  inline void set_machineuid(const char* value);
  inline void set_machineuid(const char* value, size_t size);
  inline ::std::string* mutable_machineuid();
  inline ::std::string* release_machineuid();
  
  // optional float transmission = 9;
  inline bool has_transmission() const;
  inline void clear_transmission();
  static const int kTransmissionFieldNumber = 9;
  inline float transmission() const;
  inline void set_transmission(float value);
  
  // optional bool ispencilebeamsupport = 10;
  inline bool has_ispencilebeamsupport() const;
  inline void clear_ispencilebeamsupport();
  static const int kIspencilebeamsupportFieldNumber = 10;
  inline bool ispencilebeamsupport() const;
  inline void set_ispencilebeamsupport(bool value);
  
  // optional bool isconvolutionsupport = 11;
  inline bool has_isconvolutionsupport() const;
  inline void clear_isconvolutionsupport();
  static const int kIsconvolutionsupportFieldNumber = 11;
  inline bool isconvolutionsupport() const;
  inline void set_isconvolutionsupport(bool value);
  
  // optional bool ismontecarlosupport = 12;
  inline bool has_ismontecarlosupport() const;
  inline void clear_ismontecarlosupport();
  static const int kIsmontecarlosupportFieldNumber = 12;
  inline bool ismontecarlosupport() const;
  inline void set_ismontecarlosupport(bool value);
  
  // optional int32 defaultdoserateindex = 13;
  inline bool has_defaultdoserateindex() const;
  inline void clear_defaultdoserateindex();
  static const int kDefaultdoserateindexFieldNumber = 13;
  inline ::google::protobuf::int32 defaultdoserateindex() const;
  inline void set_defaultdoserateindex(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoCommissionedunit)
 private:
  inline void set_has_commissionedunituid();
  inline void clear_has_commissionedunituid();
  inline void set_has_radiationtype();
  inline void clear_has_radiationtype();
  inline void set_has_unitenergy();
  inline void clear_has_unitenergy();
  inline void set_has_flatteningfiltermode();
  inline void clear_has_flatteningfiltermode();
  inline void set_has_machineuid();
  inline void clear_has_machineuid();
  inline void set_has_transmission();
  inline void clear_has_transmission();
  inline void set_has_ispencilebeamsupport();
  inline void clear_has_ispencilebeamsupport();
  inline void set_has_isconvolutionsupport();
  inline void clear_has_isconvolutionsupport();
  inline void set_has_ismontecarlosupport();
  inline void clear_has_ismontecarlosupport();
  inline void set_has_defaultdoserateindex();
  inline void clear_has_defaultdoserateindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* commissionedunituid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > techniquetype_;
  ::google::protobuf::int32 radiationtype_;
  ::google::protobuf::int32 flatteningfiltermode_;
  ::std::string* unitenergy_;
  ::google::protobuf::RepeatedField< float > doserates_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoTrayfactor > trayfactors_;
  ::std::string* machineuid_;
  float transmission_;
  bool ispencilebeamsupport_;
  bool isconvolutionsupport_;
  bool ismontecarlosupport_;
  ::google::protobuf::int32 defaultdoserateindex_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoCommissionedunit* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedCommissionedunit : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedCommissionedunit();
  virtual ~RtTpsProtoRepeatedCommissionedunit();
  
  RtTpsProtoRepeatedCommissionedunit(const RtTpsProtoRepeatedCommissionedunit& from);
  
  inline RtTpsProtoRepeatedCommissionedunit& operator=(const RtTpsProtoRepeatedCommissionedunit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedCommissionedunit& default_instance();
  
  void Swap(RtTpsProtoRepeatedCommissionedunit* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedCommissionedunit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedCommissionedunit& from);
  void MergeFrom(const RtTpsProtoRepeatedCommissionedunit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
  inline int commissionedunitlist_size() const;
  inline void clear_commissionedunitlist();
  static const int kCommissionedunitListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoCommissionedunit& commissionedunitlist(int index) const;
  inline ::tps::proto::RtTpsProtoCommissionedunit* mutable_commissionedunitlist(int index);
  inline ::tps::proto::RtTpsProtoCommissionedunit* add_commissionedunitlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoCommissionedunit >&
      commissionedunitlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoCommissionedunit >*
      mutable_commissionedunitlist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedCommissionedunit)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoCommissionedunit > commissionedunitlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedCommissionedunit* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoTrayfactor : public ::google::protobuf::Message {
 public:
  RtTpsProtoTrayfactor();
  virtual ~RtTpsProtoTrayfactor();
  
  RtTpsProtoTrayfactor(const RtTpsProtoTrayfactor& from);
  
  inline RtTpsProtoTrayfactor& operator=(const RtTpsProtoTrayfactor& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoTrayfactor& default_instance();
  
  void Swap(RtTpsProtoTrayfactor* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoTrayfactor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoTrayfactor& from);
  void MergeFrom(const RtTpsProtoTrayfactor& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string trayUID = 1;
  inline bool has_trayuid() const;
  inline void clear_trayuid();
  static const int kTrayUIDFieldNumber = 1;
  inline const ::std::string& trayuid() const;
  inline void set_trayuid(const ::std::string& value);
  inline void set_trayuid(const char* value);
  inline void set_trayuid(const char* value, size_t size);
  inline ::std::string* mutable_trayuid();
  inline ::std::string* release_trayuid();
  
  // required float factor = 2;
  inline bool has_factor() const;
  inline void clear_factor();
  static const int kFactorFieldNumber = 2;
  inline float factor() const;
  inline void set_factor(float value);
  
  // required string trayID = 3;
  inline bool has_trayid() const;
  inline void clear_trayid();
  static const int kTrayIDFieldNumber = 3;
  inline const ::std::string& trayid() const;
  inline void set_trayid(const ::std::string& value);
  inline void set_trayid(const char* value);
  inline void set_trayid(const char* value, size_t size);
  inline ::std::string* mutable_trayid();
  inline ::std::string* release_trayid();
  
  // optional string code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoTrayfactor)
 private:
  inline void set_has_trayuid();
  inline void clear_has_trayuid();
  inline void set_has_factor();
  inline void clear_has_factor();
  inline void set_has_trayid();
  inline void clear_has_trayid();
  inline void set_has_code();
  inline void clear_has_code();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* trayuid_;
  ::std::string* trayid_;
  ::std::string* code_;
  float factor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fcommissionedunit_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoTrayfactor* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoCommissionedunit

// required string commissionedunitUID = 1;
inline bool RtTpsProtoCommissionedunit::has_commissionedunituid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_commissionedunituid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoCommissionedunit::clear_has_commissionedunituid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoCommissionedunit::clear_commissionedunituid() {
  if (commissionedunituid_ != &::google::protobuf::internal::kEmptyString) {
    commissionedunituid_->clear();
  }
  clear_has_commissionedunituid();
}
inline const ::std::string& RtTpsProtoCommissionedunit::commissionedunituid() const {
  return *commissionedunituid_;
}
inline void RtTpsProtoCommissionedunit::set_commissionedunituid(const ::std::string& value) {
  set_has_commissionedunituid();
  if (commissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    commissionedunituid_ = new ::std::string;
  }
  commissionedunituid_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_commissionedunituid(const char* value) {
  set_has_commissionedunituid();
  if (commissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    commissionedunituid_ = new ::std::string;
  }
  commissionedunituid_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_commissionedunituid(const char* value, size_t size) {
  set_has_commissionedunituid();
  if (commissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    commissionedunituid_ = new ::std::string;
  }
  commissionedunituid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoCommissionedunit::mutable_commissionedunituid() {
  set_has_commissionedunituid();
  if (commissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    commissionedunituid_ = new ::std::string;
  }
  return commissionedunituid_;
}
inline ::std::string* RtTpsProtoCommissionedunit::release_commissionedunituid() {
  clear_has_commissionedunituid();
  if (commissionedunituid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commissionedunituid_;
    commissionedunituid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 radiationType = 2;
inline bool RtTpsProtoCommissionedunit::has_radiationtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_radiationtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoCommissionedunit::clear_has_radiationtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoCommissionedunit::clear_radiationtype() {
  radiationtype_ = 0;
  clear_has_radiationtype();
}
inline ::google::protobuf::int32 RtTpsProtoCommissionedunit::radiationtype() const {
  return radiationtype_;
}
inline void RtTpsProtoCommissionedunit::set_radiationtype(::google::protobuf::int32 value) {
  set_has_radiationtype();
  radiationtype_ = value;
}

// repeated int32 techniqueType = 3;
inline int RtTpsProtoCommissionedunit::techniquetype_size() const {
  return techniquetype_.size();
}
inline void RtTpsProtoCommissionedunit::clear_techniquetype() {
  techniquetype_.Clear();
}
inline ::google::protobuf::int32 RtTpsProtoCommissionedunit::techniquetype(int index) const {
  return techniquetype_.Get(index);
}
inline void RtTpsProtoCommissionedunit::set_techniquetype(int index, ::google::protobuf::int32 value) {
  techniquetype_.Set(index, value);
}
inline void RtTpsProtoCommissionedunit::add_techniquetype(::google::protobuf::int32 value) {
  techniquetype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RtTpsProtoCommissionedunit::techniquetype() const {
  return techniquetype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RtTpsProtoCommissionedunit::mutable_techniquetype() {
  return &techniquetype_;
}

// optional string unitEnergy = 4;
inline bool RtTpsProtoCommissionedunit::has_unitenergy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_unitenergy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoCommissionedunit::clear_has_unitenergy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoCommissionedunit::clear_unitenergy() {
  if (unitenergy_ != &::google::protobuf::internal::kEmptyString) {
    unitenergy_->clear();
  }
  clear_has_unitenergy();
}
inline const ::std::string& RtTpsProtoCommissionedunit::unitenergy() const {
  return *unitenergy_;
}
inline void RtTpsProtoCommissionedunit::set_unitenergy(const ::std::string& value) {
  set_has_unitenergy();
  if (unitenergy_ == &::google::protobuf::internal::kEmptyString) {
    unitenergy_ = new ::std::string;
  }
  unitenergy_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_unitenergy(const char* value) {
  set_has_unitenergy();
  if (unitenergy_ == &::google::protobuf::internal::kEmptyString) {
    unitenergy_ = new ::std::string;
  }
  unitenergy_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_unitenergy(const char* value, size_t size) {
  set_has_unitenergy();
  if (unitenergy_ == &::google::protobuf::internal::kEmptyString) {
    unitenergy_ = new ::std::string;
  }
  unitenergy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoCommissionedunit::mutable_unitenergy() {
  set_has_unitenergy();
  if (unitenergy_ == &::google::protobuf::internal::kEmptyString) {
    unitenergy_ = new ::std::string;
  }
  return unitenergy_;
}
inline ::std::string* RtTpsProtoCommissionedunit::release_unitenergy() {
  clear_has_unitenergy();
  if (unitenergy_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = unitenergy_;
    unitenergy_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 flatteningfiltermode = 5;
inline bool RtTpsProtoCommissionedunit::has_flatteningfiltermode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_flatteningfiltermode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoCommissionedunit::clear_has_flatteningfiltermode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoCommissionedunit::clear_flatteningfiltermode() {
  flatteningfiltermode_ = 0;
  clear_has_flatteningfiltermode();
}
inline ::google::protobuf::int32 RtTpsProtoCommissionedunit::flatteningfiltermode() const {
  return flatteningfiltermode_;
}
inline void RtTpsProtoCommissionedunit::set_flatteningfiltermode(::google::protobuf::int32 value) {
  set_has_flatteningfiltermode();
  flatteningfiltermode_ = value;
}

// repeated float doseRates = 6;
inline int RtTpsProtoCommissionedunit::doserates_size() const {
  return doserates_.size();
}
inline void RtTpsProtoCommissionedunit::clear_doserates() {
  doserates_.Clear();
}
inline float RtTpsProtoCommissionedunit::doserates(int index) const {
  return doserates_.Get(index);
}
inline void RtTpsProtoCommissionedunit::set_doserates(int index, float value) {
  doserates_.Set(index, value);
}
inline void RtTpsProtoCommissionedunit::add_doserates(float value) {
  doserates_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RtTpsProtoCommissionedunit::doserates() const {
  return doserates_;
}
inline ::google::protobuf::RepeatedField< float >*
RtTpsProtoCommissionedunit::mutable_doserates() {
  return &doserates_;
}

// repeated .tps.proto.RtTpsProtoTrayfactor trayfactors = 7;
inline int RtTpsProtoCommissionedunit::trayfactors_size() const {
  return trayfactors_.size();
}
inline void RtTpsProtoCommissionedunit::clear_trayfactors() {
  trayfactors_.Clear();
}
inline const ::tps::proto::RtTpsProtoTrayfactor& RtTpsProtoCommissionedunit::trayfactors(int index) const {
  return trayfactors_.Get(index);
}
inline ::tps::proto::RtTpsProtoTrayfactor* RtTpsProtoCommissionedunit::mutable_trayfactors(int index) {
  return trayfactors_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoTrayfactor* RtTpsProtoCommissionedunit::add_trayfactors() {
  return trayfactors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoTrayfactor >&
RtTpsProtoCommissionedunit::trayfactors() const {
  return trayfactors_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoTrayfactor >*
RtTpsProtoCommissionedunit::mutable_trayfactors() {
  return &trayfactors_;
}

// optional string machineUID = 8;
inline bool RtTpsProtoCommissionedunit::has_machineuid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_machineuid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoCommissionedunit::clear_has_machineuid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoCommissionedunit::clear_machineuid() {
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    machineuid_->clear();
  }
  clear_has_machineuid();
}
inline const ::std::string& RtTpsProtoCommissionedunit::machineuid() const {
  return *machineuid_;
}
inline void RtTpsProtoCommissionedunit::set_machineuid(const ::std::string& value) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_machineuid(const char* value) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(value);
}
inline void RtTpsProtoCommissionedunit::set_machineuid(const char* value, size_t size) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoCommissionedunit::mutable_machineuid() {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  return machineuid_;
}
inline ::std::string* RtTpsProtoCommissionedunit::release_machineuid() {
  clear_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machineuid_;
    machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float transmission = 9;
inline bool RtTpsProtoCommissionedunit::has_transmission() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_transmission() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoCommissionedunit::clear_has_transmission() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoCommissionedunit::clear_transmission() {
  transmission_ = 0;
  clear_has_transmission();
}
inline float RtTpsProtoCommissionedunit::transmission() const {
  return transmission_;
}
inline void RtTpsProtoCommissionedunit::set_transmission(float value) {
  set_has_transmission();
  transmission_ = value;
}

// optional bool ispencilebeamsupport = 10;
inline bool RtTpsProtoCommissionedunit::has_ispencilebeamsupport() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_ispencilebeamsupport() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoCommissionedunit::clear_has_ispencilebeamsupport() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoCommissionedunit::clear_ispencilebeamsupport() {
  ispencilebeamsupport_ = false;
  clear_has_ispencilebeamsupport();
}
inline bool RtTpsProtoCommissionedunit::ispencilebeamsupport() const {
  return ispencilebeamsupport_;
}
inline void RtTpsProtoCommissionedunit::set_ispencilebeamsupport(bool value) {
  set_has_ispencilebeamsupport();
  ispencilebeamsupport_ = value;
}

// optional bool isconvolutionsupport = 11;
inline bool RtTpsProtoCommissionedunit::has_isconvolutionsupport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_isconvolutionsupport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoCommissionedunit::clear_has_isconvolutionsupport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoCommissionedunit::clear_isconvolutionsupport() {
  isconvolutionsupport_ = false;
  clear_has_isconvolutionsupport();
}
inline bool RtTpsProtoCommissionedunit::isconvolutionsupport() const {
  return isconvolutionsupport_;
}
inline void RtTpsProtoCommissionedunit::set_isconvolutionsupport(bool value) {
  set_has_isconvolutionsupport();
  isconvolutionsupport_ = value;
}

// optional bool ismontecarlosupport = 12;
inline bool RtTpsProtoCommissionedunit::has_ismontecarlosupport() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_ismontecarlosupport() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoCommissionedunit::clear_has_ismontecarlosupport() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoCommissionedunit::clear_ismontecarlosupport() {
  ismontecarlosupport_ = false;
  clear_has_ismontecarlosupport();
}
inline bool RtTpsProtoCommissionedunit::ismontecarlosupport() const {
  return ismontecarlosupport_;
}
inline void RtTpsProtoCommissionedunit::set_ismontecarlosupport(bool value) {
  set_has_ismontecarlosupport();
  ismontecarlosupport_ = value;
}

// optional int32 defaultdoserateindex = 13;
inline bool RtTpsProtoCommissionedunit::has_defaultdoserateindex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoCommissionedunit::set_has_defaultdoserateindex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoCommissionedunit::clear_has_defaultdoserateindex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoCommissionedunit::clear_defaultdoserateindex() {
  defaultdoserateindex_ = 0;
  clear_has_defaultdoserateindex();
}
inline ::google::protobuf::int32 RtTpsProtoCommissionedunit::defaultdoserateindex() const {
  return defaultdoserateindex_;
}
inline void RtTpsProtoCommissionedunit::set_defaultdoserateindex(::google::protobuf::int32 value) {
  set_has_defaultdoserateindex();
  defaultdoserateindex_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedCommissionedunit

// repeated .tps.proto.RtTpsProtoCommissionedunit commissionedunitList = 1;
inline int RtTpsProtoRepeatedCommissionedunit::commissionedunitlist_size() const {
  return commissionedunitlist_.size();
}
inline void RtTpsProtoRepeatedCommissionedunit::clear_commissionedunitlist() {
  commissionedunitlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoCommissionedunit& RtTpsProtoRepeatedCommissionedunit::commissionedunitlist(int index) const {
  return commissionedunitlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoCommissionedunit* RtTpsProtoRepeatedCommissionedunit::mutable_commissionedunitlist(int index) {
  return commissionedunitlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoCommissionedunit* RtTpsProtoRepeatedCommissionedunit::add_commissionedunitlist() {
  return commissionedunitlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoCommissionedunit >&
RtTpsProtoRepeatedCommissionedunit::commissionedunitlist() const {
  return commissionedunitlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoCommissionedunit >*
RtTpsProtoRepeatedCommissionedunit::mutable_commissionedunitlist() {
  return &commissionedunitlist_;
}

// -------------------------------------------------------------------

// RtTpsProtoTrayfactor

// required string trayUID = 1;
inline bool RtTpsProtoTrayfactor::has_trayuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoTrayfactor::set_has_trayuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoTrayfactor::clear_has_trayuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoTrayfactor::clear_trayuid() {
  if (trayuid_ != &::google::protobuf::internal::kEmptyString) {
    trayuid_->clear();
  }
  clear_has_trayuid();
}
inline const ::std::string& RtTpsProtoTrayfactor::trayuid() const {
  return *trayuid_;
}
inline void RtTpsProtoTrayfactor::set_trayuid(const ::std::string& value) {
  set_has_trayuid();
  if (trayuid_ == &::google::protobuf::internal::kEmptyString) {
    trayuid_ = new ::std::string;
  }
  trayuid_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_trayuid(const char* value) {
  set_has_trayuid();
  if (trayuid_ == &::google::protobuf::internal::kEmptyString) {
    trayuid_ = new ::std::string;
  }
  trayuid_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_trayuid(const char* value, size_t size) {
  set_has_trayuid();
  if (trayuid_ == &::google::protobuf::internal::kEmptyString) {
    trayuid_ = new ::std::string;
  }
  trayuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoTrayfactor::mutable_trayuid() {
  set_has_trayuid();
  if (trayuid_ == &::google::protobuf::internal::kEmptyString) {
    trayuid_ = new ::std::string;
  }
  return trayuid_;
}
inline ::std::string* RtTpsProtoTrayfactor::release_trayuid() {
  clear_has_trayuid();
  if (trayuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trayuid_;
    trayuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float factor = 2;
inline bool RtTpsProtoTrayfactor::has_factor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoTrayfactor::set_has_factor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoTrayfactor::clear_has_factor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoTrayfactor::clear_factor() {
  factor_ = 0;
  clear_has_factor();
}
inline float RtTpsProtoTrayfactor::factor() const {
  return factor_;
}
inline void RtTpsProtoTrayfactor::set_factor(float value) {
  set_has_factor();
  factor_ = value;
}

// required string trayID = 3;
inline bool RtTpsProtoTrayfactor::has_trayid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoTrayfactor::set_has_trayid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoTrayfactor::clear_has_trayid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoTrayfactor::clear_trayid() {
  if (trayid_ != &::google::protobuf::internal::kEmptyString) {
    trayid_->clear();
  }
  clear_has_trayid();
}
inline const ::std::string& RtTpsProtoTrayfactor::trayid() const {
  return *trayid_;
}
inline void RtTpsProtoTrayfactor::set_trayid(const ::std::string& value) {
  set_has_trayid();
  if (trayid_ == &::google::protobuf::internal::kEmptyString) {
    trayid_ = new ::std::string;
  }
  trayid_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_trayid(const char* value) {
  set_has_trayid();
  if (trayid_ == &::google::protobuf::internal::kEmptyString) {
    trayid_ = new ::std::string;
  }
  trayid_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_trayid(const char* value, size_t size) {
  set_has_trayid();
  if (trayid_ == &::google::protobuf::internal::kEmptyString) {
    trayid_ = new ::std::string;
  }
  trayid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoTrayfactor::mutable_trayid() {
  set_has_trayid();
  if (trayid_ == &::google::protobuf::internal::kEmptyString) {
    trayid_ = new ::std::string;
  }
  return trayid_;
}
inline ::std::string* RtTpsProtoTrayfactor::release_trayid() {
  clear_has_trayid();
  if (trayid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = trayid_;
    trayid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string code = 4;
inline bool RtTpsProtoTrayfactor::has_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoTrayfactor::set_has_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoTrayfactor::clear_has_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoTrayfactor::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& RtTpsProtoTrayfactor::code() const {
  return *code_;
}
inline void RtTpsProtoTrayfactor::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void RtTpsProtoTrayfactor::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoTrayfactor::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* RtTpsProtoTrayfactor::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fcommissionedunit_2eproto__INCLUDED
