// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_normalizationgroup.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fnormalizationgroup_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fnormalizationgroup_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rt_tps_proto_beam.pb.h"
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();

class RtTpsProtoNormalizationGroup;
class RtTpsProtoRepeatedNormalizationGroup;

// ===================================================================

class RtTpsProtoNormalizationGroup : public ::google::protobuf::Message {
 public:
  RtTpsProtoNormalizationGroup();
  virtual ~RtTpsProtoNormalizationGroup();
  
  RtTpsProtoNormalizationGroup(const RtTpsProtoNormalizationGroup& from);
  
  inline RtTpsProtoNormalizationGroup& operator=(const RtTpsProtoNormalizationGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoNormalizationGroup& default_instance();
  
  void Swap(RtTpsProtoNormalizationGroup* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoNormalizationGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoNormalizationGroup& from);
  void MergeFrom(const RtTpsProtoNormalizationGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string normalizationGroupUID = 1;
  inline bool has_normalizationgroupuid() const;
  inline void clear_normalizationgroupuid();
  static const int kNormalizationGroupUIDFieldNumber = 1;
  inline const ::std::string& normalizationgroupuid() const;
  inline void set_normalizationgroupuid(const ::std::string& value);
  inline void set_normalizationgroupuid(const char* value);
  inline void set_normalizationgroupuid(const char* value, size_t size);
  inline ::std::string* mutable_normalizationgroupuid();
  inline ::std::string* release_normalizationgroupuid();
  
  // optional string normalizationGroupName = 2;
  inline bool has_normalizationgroupname() const;
  inline void clear_normalizationgroupname();
  static const int kNormalizationGroupNameFieldNumber = 2;
  inline const ::std::string& normalizationgroupname() const;
  inline void set_normalizationgroupname(const ::std::string& value);
  inline void set_normalizationgroupname(const char* value);
  inline void set_normalizationgroupname(const char* value, size_t size);
  inline ::std::string* mutable_normalizationgroupname();
  inline ::std::string* release_normalizationgroupname();
  
  // optional int32 techniqueType = 3;
  inline bool has_techniquetype() const;
  inline void clear_techniquetype();
  static const int kTechniqueTypeFieldNumber = 3;
  inline ::google::protobuf::int32 techniquetype() const;
  inline void set_techniquetype(::google::protobuf::int32 value);
  
  // optional string machineUID = 4;
  inline bool has_machineuid() const;
  inline void clear_machineuid();
  static const int kMachineUIDFieldNumber = 4;
  inline const ::std::string& machineuid() const;
  inline void set_machineuid(const ::std::string& value);
  inline void set_machineuid(const char* value);
  inline void set_machineuid(const char* value, size_t size);
  inline ::std::string* mutable_machineuid();
  inline ::std::string* release_machineuid();
  
  // optional bool targetIsPoi = 5;
  inline bool has_targetispoi() const;
  inline void clear_targetispoi();
  static const int kTargetIsPoiFieldNumber = 5;
  inline bool targetispoi() const;
  inline void set_targetispoi(bool value);
  
  // optional double dosePerFraction = 6;
  inline bool has_doseperfraction() const;
  inline void clear_doseperfraction();
  static const int kDosePerFractionFieldNumber = 6;
  inline double doseperfraction() const;
  inline void set_doseperfraction(double value);
  
  // optional int32 fractionCount = 7;
  inline bool has_fractioncount() const;
  inline void clear_fractioncount();
  static const int kFractionCountFieldNumber = 7;
  inline ::google::protobuf::int32 fractioncount() const;
  inline void set_fractioncount(::google::protobuf::int32 value);
  
  // optional bool isAverageVoi = 8;
  inline bool has_isaveragevoi() const;
  inline void clear_isaveragevoi();
  static const int kIsAverageVoiFieldNumber = 8;
  inline bool isaveragevoi() const;
  inline void set_isaveragevoi(bool value);
  
  // optional double poiDosePercent = 9;
  inline bool has_poidosepercent() const;
  inline void clear_poidosepercent();
  static const int kPoiDosePercentFieldNumber = 9;
  inline double poidosepercent() const;
  inline void set_poidosepercent(double value);
  
  // optional double voiDoseAtVolume = 10;
  inline bool has_voidoseatvolume() const;
  inline void clear_voidoseatvolume();
  static const int kVoiDoseAtVolumeFieldNumber = 10;
  inline double voidoseatvolume() const;
  inline void set_voidoseatvolume(double value);
  
  // optional double voiDosePercent = 11;
  inline bool has_voidosepercent() const;
  inline void clear_voidosepercent();
  static const int kVoiDosePercentFieldNumber = 11;
  inline double voidosepercent() const;
  inline void set_voidosepercent(double value);
  
  // optional int32 radiationType = 12;
  inline bool has_radiationtype() const;
  inline void clear_radiationtype();
  static const int kRadiationTypeFieldNumber = 12;
  inline ::google::protobuf::int32 radiationtype() const;
  inline void set_radiationtype(::google::protobuf::int32 value);
  
  // optional bool isAutoCalculate = 13;
  inline bool has_isautocalculate() const;
  inline void clear_isautocalculate();
  static const int kIsAutoCalculateFieldNumber = 13;
  inline bool isautocalculate() const;
  inline void set_isautocalculate(bool value);
  
  // optional int32 startSlice = 14;
  inline bool has_startslice() const;
  inline void clear_startslice();
  static const int kStartSliceFieldNumber = 14;
  inline ::google::protobuf::int32 startslice() const;
  inline void set_startslice(::google::protobuf::int32 value);
  
  // optional int32 endSlice = 15;
  inline bool has_endslice() const;
  inline void clear_endslice();
  static const int kEndSliceFieldNumber = 15;
  inline ::google::protobuf::int32 endslice() const;
  inline void set_endslice(::google::protobuf::int32 value);
  
  // optional bool isJoined = 16;
  inline bool has_isjoined() const;
  inline void clear_isjoined();
  static const int kIsJoinedFieldNumber = 16;
  inline bool isjoined() const;
  inline void set_isjoined(bool value);
  
  // optional int32 editType = 17;
  inline bool has_edittype() const;
  inline void clear_edittype();
  static const int kEditTypeFieldNumber = 17;
  inline ::google::protobuf::int32 edittype() const;
  inline void set_edittype(::google::protobuf::int32 value);
  
  // optional int32 isApproved = 18;
  inline bool has_isapproved() const;
  inline void clear_isapproved();
  static const int kIsApprovedFieldNumber = 18;
  inline ::google::protobuf::int32 isapproved() const;
  inline void set_isapproved(::google::protobuf::int32 value);
  
  // optional string prescriptionUID = 19;
  inline bool has_prescriptionuid() const;
  inline void clear_prescriptionuid();
  static const int kPrescriptionUIDFieldNumber = 19;
  inline const ::std::string& prescriptionuid() const;
  inline void set_prescriptionuid(const ::std::string& value);
  inline void set_prescriptionuid(const char* value);
  inline void set_prescriptionuid(const char* value, size_t size);
  inline ::std::string* mutable_prescriptionuid();
  inline ::std::string* release_prescriptionuid();
  
  // optional string planUID = 20;
  inline bool has_planuid() const;
  inline void clear_planuid();
  static const int kPlanUIDFieldNumber = 20;
  inline const ::std::string& planuid() const;
  inline void set_planuid(const ::std::string& value);
  inline void set_planuid(const char* value);
  inline void set_planuid(const char* value, size_t size);
  inline ::std::string* mutable_planuid();
  inline ::std::string* release_planuid();
  
  // optional string normalizationPoiUID = 21;
  inline bool has_normalizationpoiuid() const;
  inline void clear_normalizationpoiuid();
  static const int kNormalizationPoiUIDFieldNumber = 21;
  inline const ::std::string& normalizationpoiuid() const;
  inline void set_normalizationpoiuid(const ::std::string& value);
  inline void set_normalizationpoiuid(const char* value);
  inline void set_normalizationpoiuid(const char* value, size_t size);
  inline ::std::string* mutable_normalizationpoiuid();
  inline ::std::string* release_normalizationpoiuid();
  
  // optional string normalizationVoiUID = 22;
  inline bool has_normalizationvoiuid() const;
  inline void clear_normalizationvoiuid();
  static const int kNormalizationVoiUIDFieldNumber = 22;
  inline const ::std::string& normalizationvoiuid() const;
  inline void set_normalizationvoiuid(const ::std::string& value);
  inline void set_normalizationvoiuid(const char* value);
  inline void set_normalizationvoiuid(const char* value, size_t size);
  inline ::std::string* mutable_normalizationvoiuid();
  inline ::std::string* release_normalizationvoiuid();
  
  // repeated .tps.proto.RtTpsProtoBeam beamList = 23;
  inline int beamlist_size() const;
  inline void clear_beamlist();
  static const int kBeamListFieldNumber = 23;
  inline const ::tps::proto::RtTpsProtoBeam& beamlist(int index) const;
  inline ::tps::proto::RtTpsProtoBeam* mutable_beamlist(int index);
  inline ::tps::proto::RtTpsProtoBeam* add_beamlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >&
      beamlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >*
      mutable_beamlist();
  
  // optional double doseGridStartX = 24;
  inline bool has_dosegridstartx() const;
  inline void clear_dosegridstartx();
  static const int kDoseGridStartXFieldNumber = 24;
  inline double dosegridstartx() const;
  inline void set_dosegridstartx(double value);
  
  // optional double doseGridStartY = 25;
  inline bool has_dosegridstarty() const;
  inline void clear_dosegridstarty();
  static const int kDoseGridStartYFieldNumber = 25;
  inline double dosegridstarty() const;
  inline void set_dosegridstarty(double value);
  
  // optional double doseGridStartZ = 26;
  inline bool has_dosegridstartz() const;
  inline void clear_dosegridstartz();
  static const int kDoseGridStartZFieldNumber = 26;
  inline double dosegridstartz() const;
  inline void set_dosegridstartz(double value);
  
  // optional double doseGridSpacingX = 27;
  inline bool has_dosegridspacingx() const;
  inline void clear_dosegridspacingx();
  static const int kDoseGridSpacingXFieldNumber = 27;
  inline double dosegridspacingx() const;
  inline void set_dosegridspacingx(double value);
  
  // optional double doseGridSpacingY = 28;
  inline bool has_dosegridspacingy() const;
  inline void clear_dosegridspacingy();
  static const int kDoseGridSpacingYFieldNumber = 28;
  inline double dosegridspacingy() const;
  inline void set_dosegridspacingy(double value);
  
  // optional double doseGridSpacingZ = 29;
  inline bool has_dosegridspacingz() const;
  inline void clear_dosegridspacingz();
  static const int kDoseGridSpacingZFieldNumber = 29;
  inline double dosegridspacingz() const;
  inline void set_dosegridspacingz(double value);
  
  // optional double doseGridSizeX = 30;
  inline bool has_dosegridsizex() const;
  inline void clear_dosegridsizex();
  static const int kDoseGridSizeXFieldNumber = 30;
  inline double dosegridsizex() const;
  inline void set_dosegridsizex(double value);
  
  // optional double doseGridSizeY = 31;
  inline bool has_dosegridsizey() const;
  inline void clear_dosegridsizey();
  static const int kDoseGridSizeYFieldNumber = 31;
  inline double dosegridsizey() const;
  inline void set_dosegridsizey(double value);
  
  // optional double doseGridSizeZ = 32;
  inline bool has_dosegridsizez() const;
  inline void clear_dosegridsizez();
  static const int kDoseGridSizeZFieldNumber = 32;
  inline double dosegridsizez() const;
  inline void set_dosegridsizez(double value);
  
  // optional double electronEnergyForDrr = 33;
  inline bool has_electronenergyfordrr() const;
  inline void clear_electronenergyfordrr();
  static const int kElectronEnergyForDrrFieldNumber = 33;
  inline double electronenergyfordrr() const;
  inline void set_electronenergyfordrr(double value);
  
  // optional int32 ctThresholdMinForDrr = 34;
  inline bool has_ctthresholdminfordrr() const;
  inline void clear_ctthresholdminfordrr();
  static const int kCtThresholdMinForDrrFieldNumber = 34;
  inline ::google::protobuf::int32 ctthresholdminfordrr() const;
  inline void set_ctthresholdminfordrr(::google::protobuf::int32 value);
  
  // optional int32 ctThresholdMaxForDrr = 35;
  inline bool has_ctthresholdmaxfordrr() const;
  inline void clear_ctthresholdmaxfordrr();
  static const int kCtThresholdMaxForDrrFieldNumber = 35;
  inline ::google::protobuf::int32 ctthresholdmaxfordrr() const;
  inline void set_ctthresholdmaxfordrr(::google::protobuf::int32 value);
  
  // optional string ct2densityUidForDrr = 36;
  inline bool has_ct2densityuidfordrr() const;
  inline void clear_ct2densityuidfordrr();
  static const int kCt2DensityUidForDrrFieldNumber = 36;
  inline const ::std::string& ct2densityuidfordrr() const;
  inline void set_ct2densityuidfordrr(const ::std::string& value);
  inline void set_ct2densityuidfordrr(const char* value);
  inline void set_ct2densityuidfordrr(const char* value, size_t size);
  inline ::std::string* mutable_ct2densityuidfordrr();
  inline ::std::string* release_ct2densityuidfordrr();
  
  // optional bool isGating = 37;
  inline bool has_isgating() const;
  inline void clear_isgating();
  static const int kIsGatingFieldNumber = 37;
  inline bool isgating() const;
  inline void set_isgating(bool value);
  
  // optional int32 binMode = 38;
  inline bool has_binmode() const;
  inline void clear_binmode();
  static const int kBinModeFieldNumber = 38;
  inline ::google::protobuf::int32 binmode() const;
  inline void set_binmode(::google::protobuf::int32 value);
  
  // optional double beamOnRangeStart = 39;
  inline bool has_beamonrangestart() const;
  inline void clear_beamonrangestart();
  static const int kBeamOnRangeStartFieldNumber = 39;
  inline double beamonrangestart() const;
  inline void set_beamonrangestart(double value);
  
  // optional double beamOnRangeEnd = 40;
  inline bool has_beamonrangeend() const;
  inline void clear_beamonrangeend();
  static const int kBeamOnRangeEndFieldNumber = 40;
  inline double beamonrangeend() const;
  inline void set_beamonrangeend(double value);
  
  // optional bool isDoseValid = 41;
  inline bool has_isdosevalid() const;
  inline void clear_isdosevalid();
  static const int kIsDoseValidFieldNumber = 41;
  inline bool isdosevalid() const;
  inline void set_isdosevalid(bool value);
  
  // optional string description = 42;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 42;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoNormalizationGroup)
 private:
  inline void set_has_normalizationgroupuid();
  inline void clear_has_normalizationgroupuid();
  inline void set_has_normalizationgroupname();
  inline void clear_has_normalizationgroupname();
  inline void set_has_techniquetype();
  inline void clear_has_techniquetype();
  inline void set_has_machineuid();
  inline void clear_has_machineuid();
  inline void set_has_targetispoi();
  inline void clear_has_targetispoi();
  inline void set_has_doseperfraction();
  inline void clear_has_doseperfraction();
  inline void set_has_fractioncount();
  inline void clear_has_fractioncount();
  inline void set_has_isaveragevoi();
  inline void clear_has_isaveragevoi();
  inline void set_has_poidosepercent();
  inline void clear_has_poidosepercent();
  inline void set_has_voidoseatvolume();
  inline void clear_has_voidoseatvolume();
  inline void set_has_voidosepercent();
  inline void clear_has_voidosepercent();
  inline void set_has_radiationtype();
  inline void clear_has_radiationtype();
  inline void set_has_isautocalculate();
  inline void clear_has_isautocalculate();
  inline void set_has_startslice();
  inline void clear_has_startslice();
  inline void set_has_endslice();
  inline void clear_has_endslice();
  inline void set_has_isjoined();
  inline void clear_has_isjoined();
  inline void set_has_edittype();
  inline void clear_has_edittype();
  inline void set_has_isapproved();
  inline void clear_has_isapproved();
  inline void set_has_prescriptionuid();
  inline void clear_has_prescriptionuid();
  inline void set_has_planuid();
  inline void clear_has_planuid();
  inline void set_has_normalizationpoiuid();
  inline void clear_has_normalizationpoiuid();
  inline void set_has_normalizationvoiuid();
  inline void clear_has_normalizationvoiuid();
  inline void set_has_dosegridstartx();
  inline void clear_has_dosegridstartx();
  inline void set_has_dosegridstarty();
  inline void clear_has_dosegridstarty();
  inline void set_has_dosegridstartz();
  inline void clear_has_dosegridstartz();
  inline void set_has_dosegridspacingx();
  inline void clear_has_dosegridspacingx();
  inline void set_has_dosegridspacingy();
  inline void clear_has_dosegridspacingy();
  inline void set_has_dosegridspacingz();
  inline void clear_has_dosegridspacingz();
  inline void set_has_dosegridsizex();
  inline void clear_has_dosegridsizex();
  inline void set_has_dosegridsizey();
  inline void clear_has_dosegridsizey();
  inline void set_has_dosegridsizez();
  inline void clear_has_dosegridsizez();
  inline void set_has_electronenergyfordrr();
  inline void clear_has_electronenergyfordrr();
  inline void set_has_ctthresholdminfordrr();
  inline void clear_has_ctthresholdminfordrr();
  inline void set_has_ctthresholdmaxfordrr();
  inline void clear_has_ctthresholdmaxfordrr();
  inline void set_has_ct2densityuidfordrr();
  inline void clear_has_ct2densityuidfordrr();
  inline void set_has_isgating();
  inline void clear_has_isgating();
  inline void set_has_binmode();
  inline void clear_has_binmode();
  inline void set_has_beamonrangestart();
  inline void clear_has_beamonrangestart();
  inline void set_has_beamonrangeend();
  inline void clear_has_beamonrangeend();
  inline void set_has_isdosevalid();
  inline void clear_has_isdosevalid();
  inline void set_has_description();
  inline void clear_has_description();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* normalizationgroupuid_;
  ::std::string* normalizationgroupname_;
  ::std::string* machineuid_;
  ::google::protobuf::int32 techniquetype_;
  ::google::protobuf::int32 fractioncount_;
  double doseperfraction_;
  double poidosepercent_;
  double voidoseatvolume_;
  bool targetispoi_;
  bool isaveragevoi_;
  bool isautocalculate_;
  bool isjoined_;
  ::google::protobuf::int32 radiationtype_;
  double voidosepercent_;
  ::google::protobuf::int32 startslice_;
  ::google::protobuf::int32 endslice_;
  ::google::protobuf::int32 edittype_;
  ::google::protobuf::int32 isapproved_;
  ::std::string* prescriptionuid_;
  ::std::string* planuid_;
  ::std::string* normalizationpoiuid_;
  ::std::string* normalizationvoiuid_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam > beamlist_;
  double dosegridstartx_;
  double dosegridstarty_;
  double dosegridstartz_;
  double dosegridspacingx_;
  double dosegridspacingy_;
  double dosegridspacingz_;
  double dosegridsizex_;
  double dosegridsizey_;
  double dosegridsizez_;
  double electronenergyfordrr_;
  ::google::protobuf::int32 ctthresholdminfordrr_;
  ::google::protobuf::int32 ctthresholdmaxfordrr_;
  ::std::string* ct2densityuidfordrr_;
  ::google::protobuf::int32 binmode_;
  bool isgating_;
  bool isdosevalid_;
  double beamonrangestart_;
  double beamonrangeend_;
  ::std::string* description_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(42 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoNormalizationGroup* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedNormalizationGroup : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedNormalizationGroup();
  virtual ~RtTpsProtoRepeatedNormalizationGroup();
  
  RtTpsProtoRepeatedNormalizationGroup(const RtTpsProtoRepeatedNormalizationGroup& from);
  
  inline RtTpsProtoRepeatedNormalizationGroup& operator=(const RtTpsProtoRepeatedNormalizationGroup& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedNormalizationGroup& default_instance();
  
  void Swap(RtTpsProtoRepeatedNormalizationGroup* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedNormalizationGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedNormalizationGroup& from);
  void MergeFrom(const RtTpsProtoRepeatedNormalizationGroup& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
  inline int normalizationgrouplist_size() const;
  inline void clear_normalizationgrouplist();
  static const int kNormalizationGroupListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoNormalizationGroup& normalizationgrouplist(int index) const;
  inline ::tps::proto::RtTpsProtoNormalizationGroup* mutable_normalizationgrouplist(int index);
  inline ::tps::proto::RtTpsProtoNormalizationGroup* add_normalizationgrouplist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoNormalizationGroup >&
      normalizationgrouplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoNormalizationGroup >*
      mutable_normalizationgrouplist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedNormalizationGroup)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoNormalizationGroup > normalizationgrouplist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fnormalizationgroup_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedNormalizationGroup* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoNormalizationGroup

// required string normalizationGroupUID = 1;
inline bool RtTpsProtoNormalizationGroup::has_normalizationgroupuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_normalizationgroupuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_normalizationgroupuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoNormalizationGroup::clear_normalizationgroupuid() {
  if (normalizationgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    normalizationgroupuid_->clear();
  }
  clear_has_normalizationgroupuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::normalizationgroupuid() const {
  return *normalizationgroupuid_;
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupuid(const ::std::string& value) {
  set_has_normalizationgroupuid();
  if (normalizationgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupuid_ = new ::std::string;
  }
  normalizationgroupuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupuid(const char* value) {
  set_has_normalizationgroupuid();
  if (normalizationgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupuid_ = new ::std::string;
  }
  normalizationgroupuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupuid(const char* value, size_t size) {
  set_has_normalizationgroupuid();
  if (normalizationgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupuid_ = new ::std::string;
  }
  normalizationgroupuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_normalizationgroupuid() {
  set_has_normalizationgroupuid();
  if (normalizationgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupuid_ = new ::std::string;
  }
  return normalizationgroupuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_normalizationgroupuid() {
  clear_has_normalizationgroupuid();
  if (normalizationgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalizationgroupuid_;
    normalizationgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normalizationGroupName = 2;
inline bool RtTpsProtoNormalizationGroup::has_normalizationgroupname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_normalizationgroupname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_normalizationgroupname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoNormalizationGroup::clear_normalizationgroupname() {
  if (normalizationgroupname_ != &::google::protobuf::internal::kEmptyString) {
    normalizationgroupname_->clear();
  }
  clear_has_normalizationgroupname();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::normalizationgroupname() const {
  return *normalizationgroupname_;
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupname(const ::std::string& value) {
  set_has_normalizationgroupname();
  if (normalizationgroupname_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupname_ = new ::std::string;
  }
  normalizationgroupname_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupname(const char* value) {
  set_has_normalizationgroupname();
  if (normalizationgroupname_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupname_ = new ::std::string;
  }
  normalizationgroupname_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationgroupname(const char* value, size_t size) {
  set_has_normalizationgroupname();
  if (normalizationgroupname_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupname_ = new ::std::string;
  }
  normalizationgroupname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_normalizationgroupname() {
  set_has_normalizationgroupname();
  if (normalizationgroupname_ == &::google::protobuf::internal::kEmptyString) {
    normalizationgroupname_ = new ::std::string;
  }
  return normalizationgroupname_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_normalizationgroupname() {
  clear_has_normalizationgroupname();
  if (normalizationgroupname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalizationgroupname_;
    normalizationgroupname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 techniqueType = 3;
inline bool RtTpsProtoNormalizationGroup::has_techniquetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_techniquetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_techniquetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoNormalizationGroup::clear_techniquetype() {
  techniquetype_ = 0;
  clear_has_techniquetype();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::techniquetype() const {
  return techniquetype_;
}
inline void RtTpsProtoNormalizationGroup::set_techniquetype(::google::protobuf::int32 value) {
  set_has_techniquetype();
  techniquetype_ = value;
}

// optional string machineUID = 4;
inline bool RtTpsProtoNormalizationGroup::has_machineuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_machineuid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_machineuid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoNormalizationGroup::clear_machineuid() {
  if (machineuid_ != &::google::protobuf::internal::kEmptyString) {
    machineuid_->clear();
  }
  clear_has_machineuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::machineuid() const {
  return *machineuid_;
}
inline void RtTpsProtoNormalizationGroup::set_machineuid(const ::std::string& value) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_machineuid(const char* value) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_machineuid(const char* value, size_t size) {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  machineuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_machineuid() {
  set_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    machineuid_ = new ::std::string;
  }
  return machineuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_machineuid() {
  clear_has_machineuid();
  if (machineuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machineuid_;
    machineuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool targetIsPoi = 5;
inline bool RtTpsProtoNormalizationGroup::has_targetispoi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_targetispoi() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_targetispoi() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoNormalizationGroup::clear_targetispoi() {
  targetispoi_ = false;
  clear_has_targetispoi();
}
inline bool RtTpsProtoNormalizationGroup::targetispoi() const {
  return targetispoi_;
}
inline void RtTpsProtoNormalizationGroup::set_targetispoi(bool value) {
  set_has_targetispoi();
  targetispoi_ = value;
}

// optional double dosePerFraction = 6;
inline bool RtTpsProtoNormalizationGroup::has_doseperfraction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_doseperfraction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_doseperfraction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoNormalizationGroup::clear_doseperfraction() {
  doseperfraction_ = 0;
  clear_has_doseperfraction();
}
inline double RtTpsProtoNormalizationGroup::doseperfraction() const {
  return doseperfraction_;
}
inline void RtTpsProtoNormalizationGroup::set_doseperfraction(double value) {
  set_has_doseperfraction();
  doseperfraction_ = value;
}

// optional int32 fractionCount = 7;
inline bool RtTpsProtoNormalizationGroup::has_fractioncount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_fractioncount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_fractioncount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoNormalizationGroup::clear_fractioncount() {
  fractioncount_ = 0;
  clear_has_fractioncount();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::fractioncount() const {
  return fractioncount_;
}
inline void RtTpsProtoNormalizationGroup::set_fractioncount(::google::protobuf::int32 value) {
  set_has_fractioncount();
  fractioncount_ = value;
}

// optional bool isAverageVoi = 8;
inline bool RtTpsProtoNormalizationGroup::has_isaveragevoi() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isaveragevoi() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isaveragevoi() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoNormalizationGroup::clear_isaveragevoi() {
  isaveragevoi_ = false;
  clear_has_isaveragevoi();
}
inline bool RtTpsProtoNormalizationGroup::isaveragevoi() const {
  return isaveragevoi_;
}
inline void RtTpsProtoNormalizationGroup::set_isaveragevoi(bool value) {
  set_has_isaveragevoi();
  isaveragevoi_ = value;
}

// optional double poiDosePercent = 9;
inline bool RtTpsProtoNormalizationGroup::has_poidosepercent() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_poidosepercent() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_poidosepercent() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoNormalizationGroup::clear_poidosepercent() {
  poidosepercent_ = 0;
  clear_has_poidosepercent();
}
inline double RtTpsProtoNormalizationGroup::poidosepercent() const {
  return poidosepercent_;
}
inline void RtTpsProtoNormalizationGroup::set_poidosepercent(double value) {
  set_has_poidosepercent();
  poidosepercent_ = value;
}

// optional double voiDoseAtVolume = 10;
inline bool RtTpsProtoNormalizationGroup::has_voidoseatvolume() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_voidoseatvolume() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_voidoseatvolume() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoNormalizationGroup::clear_voidoseatvolume() {
  voidoseatvolume_ = 0;
  clear_has_voidoseatvolume();
}
inline double RtTpsProtoNormalizationGroup::voidoseatvolume() const {
  return voidoseatvolume_;
}
inline void RtTpsProtoNormalizationGroup::set_voidoseatvolume(double value) {
  set_has_voidoseatvolume();
  voidoseatvolume_ = value;
}

// optional double voiDosePercent = 11;
inline bool RtTpsProtoNormalizationGroup::has_voidosepercent() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_voidosepercent() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_voidosepercent() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoNormalizationGroup::clear_voidosepercent() {
  voidosepercent_ = 0;
  clear_has_voidosepercent();
}
inline double RtTpsProtoNormalizationGroup::voidosepercent() const {
  return voidosepercent_;
}
inline void RtTpsProtoNormalizationGroup::set_voidosepercent(double value) {
  set_has_voidosepercent();
  voidosepercent_ = value;
}

// optional int32 radiationType = 12;
inline bool RtTpsProtoNormalizationGroup::has_radiationtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_radiationtype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_radiationtype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoNormalizationGroup::clear_radiationtype() {
  radiationtype_ = 0;
  clear_has_radiationtype();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::radiationtype() const {
  return radiationtype_;
}
inline void RtTpsProtoNormalizationGroup::set_radiationtype(::google::protobuf::int32 value) {
  set_has_radiationtype();
  radiationtype_ = value;
}

// optional bool isAutoCalculate = 13;
inline bool RtTpsProtoNormalizationGroup::has_isautocalculate() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isautocalculate() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isautocalculate() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoNormalizationGroup::clear_isautocalculate() {
  isautocalculate_ = false;
  clear_has_isautocalculate();
}
inline bool RtTpsProtoNormalizationGroup::isautocalculate() const {
  return isautocalculate_;
}
inline void RtTpsProtoNormalizationGroup::set_isautocalculate(bool value) {
  set_has_isautocalculate();
  isautocalculate_ = value;
}

// optional int32 startSlice = 14;
inline bool RtTpsProtoNormalizationGroup::has_startslice() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_startslice() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_startslice() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoNormalizationGroup::clear_startslice() {
  startslice_ = 0;
  clear_has_startslice();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::startslice() const {
  return startslice_;
}
inline void RtTpsProtoNormalizationGroup::set_startslice(::google::protobuf::int32 value) {
  set_has_startslice();
  startslice_ = value;
}

// optional int32 endSlice = 15;
inline bool RtTpsProtoNormalizationGroup::has_endslice() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_endslice() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_endslice() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RtTpsProtoNormalizationGroup::clear_endslice() {
  endslice_ = 0;
  clear_has_endslice();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::endslice() const {
  return endslice_;
}
inline void RtTpsProtoNormalizationGroup::set_endslice(::google::protobuf::int32 value) {
  set_has_endslice();
  endslice_ = value;
}

// optional bool isJoined = 16;
inline bool RtTpsProtoNormalizationGroup::has_isjoined() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isjoined() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isjoined() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RtTpsProtoNormalizationGroup::clear_isjoined() {
  isjoined_ = false;
  clear_has_isjoined();
}
inline bool RtTpsProtoNormalizationGroup::isjoined() const {
  return isjoined_;
}
inline void RtTpsProtoNormalizationGroup::set_isjoined(bool value) {
  set_has_isjoined();
  isjoined_ = value;
}

// optional int32 editType = 17;
inline bool RtTpsProtoNormalizationGroup::has_edittype() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_edittype() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_edittype() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RtTpsProtoNormalizationGroup::clear_edittype() {
  edittype_ = 0;
  clear_has_edittype();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::edittype() const {
  return edittype_;
}
inline void RtTpsProtoNormalizationGroup::set_edittype(::google::protobuf::int32 value) {
  set_has_edittype();
  edittype_ = value;
}

// optional int32 isApproved = 18;
inline bool RtTpsProtoNormalizationGroup::has_isapproved() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isapproved() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isapproved() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RtTpsProtoNormalizationGroup::clear_isapproved() {
  isapproved_ = 0;
  clear_has_isapproved();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::isapproved() const {
  return isapproved_;
}
inline void RtTpsProtoNormalizationGroup::set_isapproved(::google::protobuf::int32 value) {
  set_has_isapproved();
  isapproved_ = value;
}

// optional string prescriptionUID = 19;
inline bool RtTpsProtoNormalizationGroup::has_prescriptionuid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_prescriptionuid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_prescriptionuid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RtTpsProtoNormalizationGroup::clear_prescriptionuid() {
  if (prescriptionuid_ != &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_->clear();
  }
  clear_has_prescriptionuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::prescriptionuid() const {
  return *prescriptionuid_;
}
inline void RtTpsProtoNormalizationGroup::set_prescriptionuid(const ::std::string& value) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_prescriptionuid(const char* value) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_prescriptionuid(const char* value, size_t size) {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  prescriptionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_prescriptionuid() {
  set_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    prescriptionuid_ = new ::std::string;
  }
  return prescriptionuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_prescriptionuid() {
  clear_has_prescriptionuid();
  if (prescriptionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = prescriptionuid_;
    prescriptionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string planUID = 20;
inline bool RtTpsProtoNormalizationGroup::has_planuid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_planuid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_planuid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RtTpsProtoNormalizationGroup::clear_planuid() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    planuid_->clear();
  }
  clear_has_planuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::planuid() const {
  return *planuid_;
}
inline void RtTpsProtoNormalizationGroup::set_planuid(const ::std::string& value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_planuid(const char* value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_planuid(const char* value, size_t size) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_planuid() {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  return planuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_planuid() {
  clear_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planuid_;
    planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normalizationPoiUID = 21;
inline bool RtTpsProtoNormalizationGroup::has_normalizationpoiuid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_normalizationpoiuid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_normalizationpoiuid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RtTpsProtoNormalizationGroup::clear_normalizationpoiuid() {
  if (normalizationpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    normalizationpoiuid_->clear();
  }
  clear_has_normalizationpoiuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::normalizationpoiuid() const {
  return *normalizationpoiuid_;
}
inline void RtTpsProtoNormalizationGroup::set_normalizationpoiuid(const ::std::string& value) {
  set_has_normalizationpoiuid();
  if (normalizationpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationpoiuid_ = new ::std::string;
  }
  normalizationpoiuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationpoiuid(const char* value) {
  set_has_normalizationpoiuid();
  if (normalizationpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationpoiuid_ = new ::std::string;
  }
  normalizationpoiuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationpoiuid(const char* value, size_t size) {
  set_has_normalizationpoiuid();
  if (normalizationpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationpoiuid_ = new ::std::string;
  }
  normalizationpoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_normalizationpoiuid() {
  set_has_normalizationpoiuid();
  if (normalizationpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationpoiuid_ = new ::std::string;
  }
  return normalizationpoiuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_normalizationpoiuid() {
  clear_has_normalizationpoiuid();
  if (normalizationpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalizationpoiuid_;
    normalizationpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normalizationVoiUID = 22;
inline bool RtTpsProtoNormalizationGroup::has_normalizationvoiuid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_normalizationvoiuid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_normalizationvoiuid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RtTpsProtoNormalizationGroup::clear_normalizationvoiuid() {
  if (normalizationvoiuid_ != &::google::protobuf::internal::kEmptyString) {
    normalizationvoiuid_->clear();
  }
  clear_has_normalizationvoiuid();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::normalizationvoiuid() const {
  return *normalizationvoiuid_;
}
inline void RtTpsProtoNormalizationGroup::set_normalizationvoiuid(const ::std::string& value) {
  set_has_normalizationvoiuid();
  if (normalizationvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationvoiuid_ = new ::std::string;
  }
  normalizationvoiuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationvoiuid(const char* value) {
  set_has_normalizationvoiuid();
  if (normalizationvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationvoiuid_ = new ::std::string;
  }
  normalizationvoiuid_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_normalizationvoiuid(const char* value, size_t size) {
  set_has_normalizationvoiuid();
  if (normalizationvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationvoiuid_ = new ::std::string;
  }
  normalizationvoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_normalizationvoiuid() {
  set_has_normalizationvoiuid();
  if (normalizationvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    normalizationvoiuid_ = new ::std::string;
  }
  return normalizationvoiuid_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_normalizationvoiuid() {
  clear_has_normalizationvoiuid();
  if (normalizationvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalizationvoiuid_;
    normalizationvoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tps.proto.RtTpsProtoBeam beamList = 23;
inline int RtTpsProtoNormalizationGroup::beamlist_size() const {
  return beamlist_.size();
}
inline void RtTpsProtoNormalizationGroup::clear_beamlist() {
  beamlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoBeam& RtTpsProtoNormalizationGroup::beamlist(int index) const {
  return beamlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoBeam* RtTpsProtoNormalizationGroup::mutable_beamlist(int index) {
  return beamlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoBeam* RtTpsProtoNormalizationGroup::add_beamlist() {
  return beamlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >&
RtTpsProtoNormalizationGroup::beamlist() const {
  return beamlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >*
RtTpsProtoNormalizationGroup::mutable_beamlist() {
  return &beamlist_;
}

// optional double doseGridStartX = 24;
inline bool RtTpsProtoNormalizationGroup::has_dosegridstartx() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridstartx() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridstartx() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridstartx() {
  dosegridstartx_ = 0;
  clear_has_dosegridstartx();
}
inline double RtTpsProtoNormalizationGroup::dosegridstartx() const {
  return dosegridstartx_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridstartx(double value) {
  set_has_dosegridstartx();
  dosegridstartx_ = value;
}

// optional double doseGridStartY = 25;
inline bool RtTpsProtoNormalizationGroup::has_dosegridstarty() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridstarty() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridstarty() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridstarty() {
  dosegridstarty_ = 0;
  clear_has_dosegridstarty();
}
inline double RtTpsProtoNormalizationGroup::dosegridstarty() const {
  return dosegridstarty_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridstarty(double value) {
  set_has_dosegridstarty();
  dosegridstarty_ = value;
}

// optional double doseGridStartZ = 26;
inline bool RtTpsProtoNormalizationGroup::has_dosegridstartz() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridstartz() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridstartz() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridstartz() {
  dosegridstartz_ = 0;
  clear_has_dosegridstartz();
}
inline double RtTpsProtoNormalizationGroup::dosegridstartz() const {
  return dosegridstartz_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridstartz(double value) {
  set_has_dosegridstartz();
  dosegridstartz_ = value;
}

// optional double doseGridSpacingX = 27;
inline bool RtTpsProtoNormalizationGroup::has_dosegridspacingx() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridspacingx() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridspacingx() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridspacingx() {
  dosegridspacingx_ = 0;
  clear_has_dosegridspacingx();
}
inline double RtTpsProtoNormalizationGroup::dosegridspacingx() const {
  return dosegridspacingx_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridspacingx(double value) {
  set_has_dosegridspacingx();
  dosegridspacingx_ = value;
}

// optional double doseGridSpacingY = 28;
inline bool RtTpsProtoNormalizationGroup::has_dosegridspacingy() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridspacingy() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridspacingy() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridspacingy() {
  dosegridspacingy_ = 0;
  clear_has_dosegridspacingy();
}
inline double RtTpsProtoNormalizationGroup::dosegridspacingy() const {
  return dosegridspacingy_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridspacingy(double value) {
  set_has_dosegridspacingy();
  dosegridspacingy_ = value;
}

// optional double doseGridSpacingZ = 29;
inline bool RtTpsProtoNormalizationGroup::has_dosegridspacingz() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridspacingz() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridspacingz() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridspacingz() {
  dosegridspacingz_ = 0;
  clear_has_dosegridspacingz();
}
inline double RtTpsProtoNormalizationGroup::dosegridspacingz() const {
  return dosegridspacingz_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridspacingz(double value) {
  set_has_dosegridspacingz();
  dosegridspacingz_ = value;
}

// optional double doseGridSizeX = 30;
inline bool RtTpsProtoNormalizationGroup::has_dosegridsizex() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridsizex() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridsizex() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridsizex() {
  dosegridsizex_ = 0;
  clear_has_dosegridsizex();
}
inline double RtTpsProtoNormalizationGroup::dosegridsizex() const {
  return dosegridsizex_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridsizex(double value) {
  set_has_dosegridsizex();
  dosegridsizex_ = value;
}

// optional double doseGridSizeY = 31;
inline bool RtTpsProtoNormalizationGroup::has_dosegridsizey() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridsizey() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridsizey() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridsizey() {
  dosegridsizey_ = 0;
  clear_has_dosegridsizey();
}
inline double RtTpsProtoNormalizationGroup::dosegridsizey() const {
  return dosegridsizey_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridsizey(double value) {
  set_has_dosegridsizey();
  dosegridsizey_ = value;
}

// optional double doseGridSizeZ = 32;
inline bool RtTpsProtoNormalizationGroup::has_dosegridsizez() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_dosegridsizez() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_dosegridsizez() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RtTpsProtoNormalizationGroup::clear_dosegridsizez() {
  dosegridsizez_ = 0;
  clear_has_dosegridsizez();
}
inline double RtTpsProtoNormalizationGroup::dosegridsizez() const {
  return dosegridsizez_;
}
inline void RtTpsProtoNormalizationGroup::set_dosegridsizez(double value) {
  set_has_dosegridsizez();
  dosegridsizez_ = value;
}

// optional double electronEnergyForDrr = 33;
inline bool RtTpsProtoNormalizationGroup::has_electronenergyfordrr() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_electronenergyfordrr() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_electronenergyfordrr() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RtTpsProtoNormalizationGroup::clear_electronenergyfordrr() {
  electronenergyfordrr_ = 0;
  clear_has_electronenergyfordrr();
}
inline double RtTpsProtoNormalizationGroup::electronenergyfordrr() const {
  return electronenergyfordrr_;
}
inline void RtTpsProtoNormalizationGroup::set_electronenergyfordrr(double value) {
  set_has_electronenergyfordrr();
  electronenergyfordrr_ = value;
}

// optional int32 ctThresholdMinForDrr = 34;
inline bool RtTpsProtoNormalizationGroup::has_ctthresholdminfordrr() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_ctthresholdminfordrr() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_ctthresholdminfordrr() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RtTpsProtoNormalizationGroup::clear_ctthresholdminfordrr() {
  ctthresholdminfordrr_ = 0;
  clear_has_ctthresholdminfordrr();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::ctthresholdminfordrr() const {
  return ctthresholdminfordrr_;
}
inline void RtTpsProtoNormalizationGroup::set_ctthresholdminfordrr(::google::protobuf::int32 value) {
  set_has_ctthresholdminfordrr();
  ctthresholdminfordrr_ = value;
}

// optional int32 ctThresholdMaxForDrr = 35;
inline bool RtTpsProtoNormalizationGroup::has_ctthresholdmaxfordrr() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_ctthresholdmaxfordrr() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_ctthresholdmaxfordrr() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RtTpsProtoNormalizationGroup::clear_ctthresholdmaxfordrr() {
  ctthresholdmaxfordrr_ = 0;
  clear_has_ctthresholdmaxfordrr();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::ctthresholdmaxfordrr() const {
  return ctthresholdmaxfordrr_;
}
inline void RtTpsProtoNormalizationGroup::set_ctthresholdmaxfordrr(::google::protobuf::int32 value) {
  set_has_ctthresholdmaxfordrr();
  ctthresholdmaxfordrr_ = value;
}

// optional string ct2densityUidForDrr = 36;
inline bool RtTpsProtoNormalizationGroup::has_ct2densityuidfordrr() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_ct2densityuidfordrr() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_ct2densityuidfordrr() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RtTpsProtoNormalizationGroup::clear_ct2densityuidfordrr() {
  if (ct2densityuidfordrr_ != &::google::protobuf::internal::kEmptyString) {
    ct2densityuidfordrr_->clear();
  }
  clear_has_ct2densityuidfordrr();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::ct2densityuidfordrr() const {
  return *ct2densityuidfordrr_;
}
inline void RtTpsProtoNormalizationGroup::set_ct2densityuidfordrr(const ::std::string& value) {
  set_has_ct2densityuidfordrr();
  if (ct2densityuidfordrr_ == &::google::protobuf::internal::kEmptyString) {
    ct2densityuidfordrr_ = new ::std::string;
  }
  ct2densityuidfordrr_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_ct2densityuidfordrr(const char* value) {
  set_has_ct2densityuidfordrr();
  if (ct2densityuidfordrr_ == &::google::protobuf::internal::kEmptyString) {
    ct2densityuidfordrr_ = new ::std::string;
  }
  ct2densityuidfordrr_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_ct2densityuidfordrr(const char* value, size_t size) {
  set_has_ct2densityuidfordrr();
  if (ct2densityuidfordrr_ == &::google::protobuf::internal::kEmptyString) {
    ct2densityuidfordrr_ = new ::std::string;
  }
  ct2densityuidfordrr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_ct2densityuidfordrr() {
  set_has_ct2densityuidfordrr();
  if (ct2densityuidfordrr_ == &::google::protobuf::internal::kEmptyString) {
    ct2densityuidfordrr_ = new ::std::string;
  }
  return ct2densityuidfordrr_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_ct2densityuidfordrr() {
  clear_has_ct2densityuidfordrr();
  if (ct2densityuidfordrr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ct2densityuidfordrr_;
    ct2densityuidfordrr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isGating = 37;
inline bool RtTpsProtoNormalizationGroup::has_isgating() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isgating() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isgating() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RtTpsProtoNormalizationGroup::clear_isgating() {
  isgating_ = false;
  clear_has_isgating();
}
inline bool RtTpsProtoNormalizationGroup::isgating() const {
  return isgating_;
}
inline void RtTpsProtoNormalizationGroup::set_isgating(bool value) {
  set_has_isgating();
  isgating_ = value;
}

// optional int32 binMode = 38;
inline bool RtTpsProtoNormalizationGroup::has_binmode() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_binmode() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_binmode() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RtTpsProtoNormalizationGroup::clear_binmode() {
  binmode_ = 0;
  clear_has_binmode();
}
inline ::google::protobuf::int32 RtTpsProtoNormalizationGroup::binmode() const {
  return binmode_;
}
inline void RtTpsProtoNormalizationGroup::set_binmode(::google::protobuf::int32 value) {
  set_has_binmode();
  binmode_ = value;
}

// optional double beamOnRangeStart = 39;
inline bool RtTpsProtoNormalizationGroup::has_beamonrangestart() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_beamonrangestart() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_beamonrangestart() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RtTpsProtoNormalizationGroup::clear_beamonrangestart() {
  beamonrangestart_ = 0;
  clear_has_beamonrangestart();
}
inline double RtTpsProtoNormalizationGroup::beamonrangestart() const {
  return beamonrangestart_;
}
inline void RtTpsProtoNormalizationGroup::set_beamonrangestart(double value) {
  set_has_beamonrangestart();
  beamonrangestart_ = value;
}

// optional double beamOnRangeEnd = 40;
inline bool RtTpsProtoNormalizationGroup::has_beamonrangeend() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_beamonrangeend() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_beamonrangeend() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RtTpsProtoNormalizationGroup::clear_beamonrangeend() {
  beamonrangeend_ = 0;
  clear_has_beamonrangeend();
}
inline double RtTpsProtoNormalizationGroup::beamonrangeend() const {
  return beamonrangeend_;
}
inline void RtTpsProtoNormalizationGroup::set_beamonrangeend(double value) {
  set_has_beamonrangeend();
  beamonrangeend_ = value;
}

// optional bool isDoseValid = 41;
inline bool RtTpsProtoNormalizationGroup::has_isdosevalid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_isdosevalid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_isdosevalid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RtTpsProtoNormalizationGroup::clear_isdosevalid() {
  isdosevalid_ = false;
  clear_has_isdosevalid();
}
inline bool RtTpsProtoNormalizationGroup::isdosevalid() const {
  return isdosevalid_;
}
inline void RtTpsProtoNormalizationGroup::set_isdosevalid(bool value) {
  set_has_isdosevalid();
  isdosevalid_ = value;
}

// optional string description = 42;
inline bool RtTpsProtoNormalizationGroup::has_description() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RtTpsProtoNormalizationGroup::set_has_description() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RtTpsProtoNormalizationGroup::clear_has_description() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RtTpsProtoNormalizationGroup::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& RtTpsProtoNormalizationGroup::description() const {
  return *description_;
}
inline void RtTpsProtoNormalizationGroup::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void RtTpsProtoNormalizationGroup::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoNormalizationGroup::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* RtTpsProtoNormalizationGroup::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedNormalizationGroup

// repeated .tps.proto.RtTpsProtoNormalizationGroup normalizationGroupList = 1;
inline int RtTpsProtoRepeatedNormalizationGroup::normalizationgrouplist_size() const {
  return normalizationgrouplist_.size();
}
inline void RtTpsProtoRepeatedNormalizationGroup::clear_normalizationgrouplist() {
  normalizationgrouplist_.Clear();
}
inline const ::tps::proto::RtTpsProtoNormalizationGroup& RtTpsProtoRepeatedNormalizationGroup::normalizationgrouplist(int index) const {
  return normalizationgrouplist_.Get(index);
}
inline ::tps::proto::RtTpsProtoNormalizationGroup* RtTpsProtoRepeatedNormalizationGroup::mutable_normalizationgrouplist(int index) {
  return normalizationgrouplist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoNormalizationGroup* RtTpsProtoRepeatedNormalizationGroup::add_normalizationgrouplist() {
  return normalizationgrouplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoNormalizationGroup >&
RtTpsProtoRepeatedNormalizationGroup::normalizationgrouplist() const {
  return normalizationgrouplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoNormalizationGroup >*
RtTpsProtoRepeatedNormalizationGroup::mutable_normalizationgrouplist() {
  return &normalizationgrouplist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fnormalizationgroup_2eproto__INCLUDED
