// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_poi.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fpoi_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fpoi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto();

class RtTpsProtoPoi;
class RtTpsProtoRepeatedPoi;
class RtTpsProtoPoiDoseInPlan;

// ===================================================================

class RtTpsProtoPoi : public ::google::protobuf::Message {
 public:
  RtTpsProtoPoi();
  virtual ~RtTpsProtoPoi();
  
  RtTpsProtoPoi(const RtTpsProtoPoi& from);
  
  inline RtTpsProtoPoi& operator=(const RtTpsProtoPoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoPoi& default_instance();
  
  void Swap(RtTpsProtoPoi* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoPoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoPoi& from);
  void MergeFrom(const RtTpsProtoPoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string poiUID = 1;
  inline bool has_poiuid() const;
  inline void clear_poiuid();
  static const int kPoiUIDFieldNumber = 1;
  inline const ::std::string& poiuid() const;
  inline void set_poiuid(const ::std::string& value);
  inline void set_poiuid(const char* value);
  inline void set_poiuid(const char* value, size_t size);
  inline ::std::string* mutable_poiuid();
  inline ::std::string* release_poiuid();
  
  // optional string poiName = 2;
  inline bool has_poiname() const;
  inline void clear_poiname();
  static const int kPoiNameFieldNumber = 2;
  inline const ::std::string& poiname() const;
  inline void set_poiname(const ::std::string& value);
  inline void set_poiname(const char* value);
  inline void set_poiname(const char* value, size_t size);
  inline ::std::string* mutable_poiname();
  inline ::std::string* release_poiname();
  
  // optional int32 poiType = 3;
  inline bool has_poitype() const;
  inline void clear_poitype();
  static const int kPoiTypeFieldNumber = 3;
  inline ::google::protobuf::int32 poitype() const;
  inline void set_poitype(::google::protobuf::int32 value);
  
  // repeated float poiColor = 4;
  inline int poicolor_size() const;
  inline void clear_poicolor();
  static const int kPoiColorFieldNumber = 4;
  inline float poicolor(int index) const;
  inline void set_poicolor(int index, float value);
  inline void add_poicolor(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      poicolor() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_poicolor();
  
  // optional bool isVisible = 5;
  inline bool has_isvisible() const;
  inline void clear_isvisible();
  static const int kIsVisibleFieldNumber = 5;
  inline bool isvisible() const;
  inline void set_isvisible(bool value);
  
  // optional int32 lockType = 6;
  inline bool has_locktype() const;
  inline void clear_locktype();
  static const int kLockTypeFieldNumber = 6;
  inline ::google::protobuf::int32 locktype() const;
  inline void set_locktype(::google::protobuf::int32 value);
  
  // optional float xCoordInPat = 7;
  inline bool has_xcoordinpat() const;
  inline void clear_xcoordinpat();
  static const int kXCoordInPatFieldNumber = 7;
  inline float xcoordinpat() const;
  inline void set_xcoordinpat(float value);
  
  // optional float yCoordInPat = 8;
  inline bool has_ycoordinpat() const;
  inline void clear_ycoordinpat();
  static const int kYCoordInPatFieldNumber = 8;
  inline float ycoordinpat() const;
  inline void set_ycoordinpat(float value);
  
  // optional float zCoordInPat = 9;
  inline bool has_zcoordinpat() const;
  inline void clear_zcoordinpat();
  static const int kZCoordInPatFieldNumber = 9;
  inline float zcoordinpat() const;
  inline void set_zcoordinpat(float value);
  
  // optional float dose = 10;
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 10;
  inline float dose() const;
  inline void set_dose(float value);
  
  // optional float xCoordInCol = 11;
  inline bool has_xcoordincol() const;
  inline void clear_xcoordincol();
  static const int kXCoordInColFieldNumber = 11;
  inline float xcoordincol() const;
  inline void set_xcoordincol(float value);
  
  // optional float yCoordInCol = 12;
  inline bool has_ycoordincol() const;
  inline void clear_ycoordincol();
  static const int kYCoordInColFieldNumber = 12;
  inline float ycoordincol() const;
  inline void set_ycoordincol(float value);
  
  // optional float pointDepth = 13;
  inline bool has_pointdepth() const;
  inline void clear_pointdepth();
  static const int kPointDepthFieldNumber = 13;
  inline float pointdepth() const;
  inline void set_pointdepth(float value);
  
  // optional string seriesuid = 14;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesuidFieldNumber = 14;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
  inline int poidoselist_size() const;
  inline void clear_poidoselist();
  static const int kPoiDoseListFieldNumber = 15;
  inline const ::tps::proto::RtTpsProtoPoiDoseInPlan& poidoselist(int index) const;
  inline ::tps::proto::RtTpsProtoPoiDoseInPlan* mutable_poidoselist(int index);
  inline ::tps::proto::RtTpsProtoPoiDoseInPlan* add_poidoselist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoiDoseInPlan >&
      poidoselist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoiDoseInPlan >*
      mutable_poidoselist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoPoi)
 private:
  inline void set_has_poiuid();
  inline void clear_has_poiuid();
  inline void set_has_poiname();
  inline void clear_has_poiname();
  inline void set_has_poitype();
  inline void clear_has_poitype();
  inline void set_has_isvisible();
  inline void clear_has_isvisible();
  inline void set_has_locktype();
  inline void clear_has_locktype();
  inline void set_has_xcoordinpat();
  inline void clear_has_xcoordinpat();
  inline void set_has_ycoordinpat();
  inline void clear_has_ycoordinpat();
  inline void set_has_zcoordinpat();
  inline void clear_has_zcoordinpat();
  inline void set_has_dose();
  inline void clear_has_dose();
  inline void set_has_xcoordincol();
  inline void clear_has_xcoordincol();
  inline void set_has_ycoordincol();
  inline void clear_has_ycoordincol();
  inline void set_has_pointdepth();
  inline void clear_has_pointdepth();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* poiuid_;
  ::std::string* poiname_;
  ::google::protobuf::RepeatedField< float > poicolor_;
  ::google::protobuf::int32 poitype_;
  bool isvisible_;
  ::google::protobuf::int32 locktype_;
  float xcoordinpat_;
  float ycoordinpat_;
  float zcoordinpat_;
  float dose_;
  float xcoordincol_;
  float ycoordincol_;
  float pointdepth_;
  ::std::string* seriesuid_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoiDoseInPlan > poidoselist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoPoi* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedPoi : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedPoi();
  virtual ~RtTpsProtoRepeatedPoi();
  
  RtTpsProtoRepeatedPoi(const RtTpsProtoRepeatedPoi& from);
  
  inline RtTpsProtoRepeatedPoi& operator=(const RtTpsProtoRepeatedPoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedPoi& default_instance();
  
  void Swap(RtTpsProtoRepeatedPoi* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedPoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedPoi& from);
  void MergeFrom(const RtTpsProtoRepeatedPoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoPoi poiList = 1;
  inline int poilist_size() const;
  inline void clear_poilist();
  static const int kPoiListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoPoi& poilist(int index) const;
  inline ::tps::proto::RtTpsProtoPoi* mutable_poilist(int index);
  inline ::tps::proto::RtTpsProtoPoi* add_poilist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoi >&
      poilist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoi >*
      mutable_poilist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedPoi)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoi > poilist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedPoi* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoPoiDoseInPlan : public ::google::protobuf::Message {
 public:
  RtTpsProtoPoiDoseInPlan();
  virtual ~RtTpsProtoPoiDoseInPlan();
  
  RtTpsProtoPoiDoseInPlan(const RtTpsProtoPoiDoseInPlan& from);
  
  inline RtTpsProtoPoiDoseInPlan& operator=(const RtTpsProtoPoiDoseInPlan& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoPoiDoseInPlan& default_instance();
  
  void Swap(RtTpsProtoPoiDoseInPlan* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoPoiDoseInPlan* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoPoiDoseInPlan& from);
  void MergeFrom(const RtTpsProtoPoiDoseInPlan& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string poiuid = 1;
  inline bool has_poiuid() const;
  inline void clear_poiuid();
  static const int kPoiuidFieldNumber = 1;
  inline const ::std::string& poiuid() const;
  inline void set_poiuid(const ::std::string& value);
  inline void set_poiuid(const char* value);
  inline void set_poiuid(const char* value, size_t size);
  inline ::std::string* mutable_poiuid();
  inline ::std::string* release_poiuid();
  
  // optional string planUID = 2;
  inline bool has_planuid() const;
  inline void clear_planuid();
  static const int kPlanUIDFieldNumber = 2;
  inline const ::std::string& planuid() const;
  inline void set_planuid(const ::std::string& value);
  inline void set_planuid(const char* value);
  inline void set_planuid(const char* value, size_t size);
  inline ::std::string* mutable_planuid();
  inline ::std::string* release_planuid();
  
  // optional float dose = 3;
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 3;
  inline float dose() const;
  inline void set_dose(float value);
  
  // optional int32 doseCalcMethod = 4;
  inline bool has_dosecalcmethod() const;
  inline void clear_dosecalcmethod();
  static const int kDoseCalcMethodFieldNumber = 4;
  inline ::google::protobuf::int32 dosecalcmethod() const;
  inline void set_dosecalcmethod(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoPoiDoseInPlan)
 private:
  inline void set_has_poiuid();
  inline void clear_has_poiuid();
  inline void set_has_planuid();
  inline void clear_has_planuid();
  inline void set_has_dose();
  inline void clear_has_dose();
  inline void set_has_dosecalcmethod();
  inline void clear_has_dosecalcmethod();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* poiuid_;
  ::std::string* planuid_;
  float dose_;
  ::google::protobuf::int32 dosecalcmethod_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fpoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fpoi_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoPoiDoseInPlan* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoPoi

// required string poiUID = 1;
inline bool RtTpsProtoPoi::has_poiuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoPoi::set_has_poiuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoPoi::clear_has_poiuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoPoi::clear_poiuid() {
  if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
    poiuid_->clear();
  }
  clear_has_poiuid();
}
inline const ::std::string& RtTpsProtoPoi::poiuid() const {
  return *poiuid_;
}
inline void RtTpsProtoPoi::set_poiuid(const ::std::string& value) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(value);
}
inline void RtTpsProtoPoi::set_poiuid(const char* value) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(value);
}
inline void RtTpsProtoPoi::set_poiuid(const char* value, size_t size) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPoi::mutable_poiuid() {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  return poiuid_;
}
inline ::std::string* RtTpsProtoPoi::release_poiuid() {
  clear_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poiuid_;
    poiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string poiName = 2;
inline bool RtTpsProtoPoi::has_poiname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoPoi::set_has_poiname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoPoi::clear_has_poiname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoPoi::clear_poiname() {
  if (poiname_ != &::google::protobuf::internal::kEmptyString) {
    poiname_->clear();
  }
  clear_has_poiname();
}
inline const ::std::string& RtTpsProtoPoi::poiname() const {
  return *poiname_;
}
inline void RtTpsProtoPoi::set_poiname(const ::std::string& value) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(value);
}
inline void RtTpsProtoPoi::set_poiname(const char* value) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(value);
}
inline void RtTpsProtoPoi::set_poiname(const char* value, size_t size) {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  poiname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPoi::mutable_poiname() {
  set_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    poiname_ = new ::std::string;
  }
  return poiname_;
}
inline ::std::string* RtTpsProtoPoi::release_poiname() {
  clear_has_poiname();
  if (poiname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poiname_;
    poiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 poiType = 3;
inline bool RtTpsProtoPoi::has_poitype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoPoi::set_has_poitype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoPoi::clear_has_poitype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoPoi::clear_poitype() {
  poitype_ = 0;
  clear_has_poitype();
}
inline ::google::protobuf::int32 RtTpsProtoPoi::poitype() const {
  return poitype_;
}
inline void RtTpsProtoPoi::set_poitype(::google::protobuf::int32 value) {
  set_has_poitype();
  poitype_ = value;
}

// repeated float poiColor = 4;
inline int RtTpsProtoPoi::poicolor_size() const {
  return poicolor_.size();
}
inline void RtTpsProtoPoi::clear_poicolor() {
  poicolor_.Clear();
}
inline float RtTpsProtoPoi::poicolor(int index) const {
  return poicolor_.Get(index);
}
inline void RtTpsProtoPoi::set_poicolor(int index, float value) {
  poicolor_.Set(index, value);
}
inline void RtTpsProtoPoi::add_poicolor(float value) {
  poicolor_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RtTpsProtoPoi::poicolor() const {
  return poicolor_;
}
inline ::google::protobuf::RepeatedField< float >*
RtTpsProtoPoi::mutable_poicolor() {
  return &poicolor_;
}

// optional bool isVisible = 5;
inline bool RtTpsProtoPoi::has_isvisible() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoPoi::set_has_isvisible() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoPoi::clear_has_isvisible() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoPoi::clear_isvisible() {
  isvisible_ = false;
  clear_has_isvisible();
}
inline bool RtTpsProtoPoi::isvisible() const {
  return isvisible_;
}
inline void RtTpsProtoPoi::set_isvisible(bool value) {
  set_has_isvisible();
  isvisible_ = value;
}

// optional int32 lockType = 6;
inline bool RtTpsProtoPoi::has_locktype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoPoi::set_has_locktype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoPoi::clear_has_locktype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoPoi::clear_locktype() {
  locktype_ = 0;
  clear_has_locktype();
}
inline ::google::protobuf::int32 RtTpsProtoPoi::locktype() const {
  return locktype_;
}
inline void RtTpsProtoPoi::set_locktype(::google::protobuf::int32 value) {
  set_has_locktype();
  locktype_ = value;
}

// optional float xCoordInPat = 7;
inline bool RtTpsProtoPoi::has_xcoordinpat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoPoi::set_has_xcoordinpat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoPoi::clear_has_xcoordinpat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoPoi::clear_xcoordinpat() {
  xcoordinpat_ = 0;
  clear_has_xcoordinpat();
}
inline float RtTpsProtoPoi::xcoordinpat() const {
  return xcoordinpat_;
}
inline void RtTpsProtoPoi::set_xcoordinpat(float value) {
  set_has_xcoordinpat();
  xcoordinpat_ = value;
}

// optional float yCoordInPat = 8;
inline bool RtTpsProtoPoi::has_ycoordinpat() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoPoi::set_has_ycoordinpat() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoPoi::clear_has_ycoordinpat() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoPoi::clear_ycoordinpat() {
  ycoordinpat_ = 0;
  clear_has_ycoordinpat();
}
inline float RtTpsProtoPoi::ycoordinpat() const {
  return ycoordinpat_;
}
inline void RtTpsProtoPoi::set_ycoordinpat(float value) {
  set_has_ycoordinpat();
  ycoordinpat_ = value;
}

// optional float zCoordInPat = 9;
inline bool RtTpsProtoPoi::has_zcoordinpat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoPoi::set_has_zcoordinpat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoPoi::clear_has_zcoordinpat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoPoi::clear_zcoordinpat() {
  zcoordinpat_ = 0;
  clear_has_zcoordinpat();
}
inline float RtTpsProtoPoi::zcoordinpat() const {
  return zcoordinpat_;
}
inline void RtTpsProtoPoi::set_zcoordinpat(float value) {
  set_has_zcoordinpat();
  zcoordinpat_ = value;
}

// optional float dose = 10;
inline bool RtTpsProtoPoi::has_dose() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoPoi::set_has_dose() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoPoi::clear_has_dose() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoPoi::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline float RtTpsProtoPoi::dose() const {
  return dose_;
}
inline void RtTpsProtoPoi::set_dose(float value) {
  set_has_dose();
  dose_ = value;
}

// optional float xCoordInCol = 11;
inline bool RtTpsProtoPoi::has_xcoordincol() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoPoi::set_has_xcoordincol() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoPoi::clear_has_xcoordincol() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoPoi::clear_xcoordincol() {
  xcoordincol_ = 0;
  clear_has_xcoordincol();
}
inline float RtTpsProtoPoi::xcoordincol() const {
  return xcoordincol_;
}
inline void RtTpsProtoPoi::set_xcoordincol(float value) {
  set_has_xcoordincol();
  xcoordincol_ = value;
}

// optional float yCoordInCol = 12;
inline bool RtTpsProtoPoi::has_ycoordincol() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoPoi::set_has_ycoordincol() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoPoi::clear_has_ycoordincol() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoPoi::clear_ycoordincol() {
  ycoordincol_ = 0;
  clear_has_ycoordincol();
}
inline float RtTpsProtoPoi::ycoordincol() const {
  return ycoordincol_;
}
inline void RtTpsProtoPoi::set_ycoordincol(float value) {
  set_has_ycoordincol();
  ycoordincol_ = value;
}

// optional float pointDepth = 13;
inline bool RtTpsProtoPoi::has_pointdepth() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoPoi::set_has_pointdepth() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoPoi::clear_has_pointdepth() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoPoi::clear_pointdepth() {
  pointdepth_ = 0;
  clear_has_pointdepth();
}
inline float RtTpsProtoPoi::pointdepth() const {
  return pointdepth_;
}
inline void RtTpsProtoPoi::set_pointdepth(float value) {
  set_has_pointdepth();
  pointdepth_ = value;
}

// optional string seriesuid = 14;
inline bool RtTpsProtoPoi::has_seriesuid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoPoi::set_has_seriesuid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoPoi::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoPoi::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RtTpsProtoPoi::seriesuid() const {
  return *seriesuid_;
}
inline void RtTpsProtoPoi::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoPoi::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoPoi::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPoi::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RtTpsProtoPoi::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .tps.proto.RtTpsProtoPoiDoseInPlan poiDoseList = 15;
inline int RtTpsProtoPoi::poidoselist_size() const {
  return poidoselist_.size();
}
inline void RtTpsProtoPoi::clear_poidoselist() {
  poidoselist_.Clear();
}
inline const ::tps::proto::RtTpsProtoPoiDoseInPlan& RtTpsProtoPoi::poidoselist(int index) const {
  return poidoselist_.Get(index);
}
inline ::tps::proto::RtTpsProtoPoiDoseInPlan* RtTpsProtoPoi::mutable_poidoselist(int index) {
  return poidoselist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoPoiDoseInPlan* RtTpsProtoPoi::add_poidoselist() {
  return poidoselist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoiDoseInPlan >&
RtTpsProtoPoi::poidoselist() const {
  return poidoselist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoiDoseInPlan >*
RtTpsProtoPoi::mutable_poidoselist() {
  return &poidoselist_;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedPoi

// repeated .tps.proto.RtTpsProtoPoi poiList = 1;
inline int RtTpsProtoRepeatedPoi::poilist_size() const {
  return poilist_.size();
}
inline void RtTpsProtoRepeatedPoi::clear_poilist() {
  poilist_.Clear();
}
inline const ::tps::proto::RtTpsProtoPoi& RtTpsProtoRepeatedPoi::poilist(int index) const {
  return poilist_.Get(index);
}
inline ::tps::proto::RtTpsProtoPoi* RtTpsProtoRepeatedPoi::mutable_poilist(int index) {
  return poilist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoPoi* RtTpsProtoRepeatedPoi::add_poilist() {
  return poilist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoi >&
RtTpsProtoRepeatedPoi::poilist() const {
  return poilist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoPoi >*
RtTpsProtoRepeatedPoi::mutable_poilist() {
  return &poilist_;
}

// -------------------------------------------------------------------

// RtTpsProtoPoiDoseInPlan

// optional string poiuid = 1;
inline bool RtTpsProtoPoiDoseInPlan::has_poiuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoPoiDoseInPlan::set_has_poiuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_has_poiuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_poiuid() {
  if (poiuid_ != &::google::protobuf::internal::kEmptyString) {
    poiuid_->clear();
  }
  clear_has_poiuid();
}
inline const ::std::string& RtTpsProtoPoiDoseInPlan::poiuid() const {
  return *poiuid_;
}
inline void RtTpsProtoPoiDoseInPlan::set_poiuid(const ::std::string& value) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(value);
}
inline void RtTpsProtoPoiDoseInPlan::set_poiuid(const char* value) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(value);
}
inline void RtTpsProtoPoiDoseInPlan::set_poiuid(const char* value, size_t size) {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  poiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPoiDoseInPlan::mutable_poiuid() {
  set_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    poiuid_ = new ::std::string;
  }
  return poiuid_;
}
inline ::std::string* RtTpsProtoPoiDoseInPlan::release_poiuid() {
  clear_has_poiuid();
  if (poiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = poiuid_;
    poiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string planUID = 2;
inline bool RtTpsProtoPoiDoseInPlan::has_planuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoPoiDoseInPlan::set_has_planuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_has_planuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_planuid() {
  if (planuid_ != &::google::protobuf::internal::kEmptyString) {
    planuid_->clear();
  }
  clear_has_planuid();
}
inline const ::std::string& RtTpsProtoPoiDoseInPlan::planuid() const {
  return *planuid_;
}
inline void RtTpsProtoPoiDoseInPlan::set_planuid(const ::std::string& value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoPoiDoseInPlan::set_planuid(const char* value) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(value);
}
inline void RtTpsProtoPoiDoseInPlan::set_planuid(const char* value, size_t size) {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  planuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPoiDoseInPlan::mutable_planuid() {
  set_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    planuid_ = new ::std::string;
  }
  return planuid_;
}
inline ::std::string* RtTpsProtoPoiDoseInPlan::release_planuid() {
  clear_has_planuid();
  if (planuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = planuid_;
    planuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float dose = 3;
inline bool RtTpsProtoPoiDoseInPlan::has_dose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoPoiDoseInPlan::set_has_dose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_has_dose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline float RtTpsProtoPoiDoseInPlan::dose() const {
  return dose_;
}
inline void RtTpsProtoPoiDoseInPlan::set_dose(float value) {
  set_has_dose();
  dose_ = value;
}

// optional int32 doseCalcMethod = 4;
inline bool RtTpsProtoPoiDoseInPlan::has_dosecalcmethod() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoPoiDoseInPlan::set_has_dosecalcmethod() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_has_dosecalcmethod() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoPoiDoseInPlan::clear_dosecalcmethod() {
  dosecalcmethod_ = 0;
  clear_has_dosecalcmethod();
}
inline ::google::protobuf::int32 RtTpsProtoPoiDoseInPlan::dosecalcmethod() const {
  return dosecalcmethod_;
}
inline void RtTpsProtoPoiDoseInPlan::set_dosecalcmethod(::google::protobuf::int32 value) {
  set_has_dosecalcmethod();
  dosecalcmethod_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fpoi_2eproto__INCLUDED
