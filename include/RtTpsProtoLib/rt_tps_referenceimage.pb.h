// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_referenceimage.proto

#ifndef PROTOBUF_rt_5ftps_5freferenceimage_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5freferenceimage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
void protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto();

class ReferenceImageInfo;
class ReferenceImage;
class ReferenceImageList;

enum ReferenceImage_IMAGE_TYPE {
  ReferenceImage_IMAGE_TYPE_UNKNOW_TYPE = -1,
  ReferenceImage_IMAGE_TYPE_DRR_IMAGE = 1,
  ReferenceImage_IMAGE_TYPE_SLICE_IMAGE = 2,
  ReferenceImage_IMAGE_TYPE_EPID_IMAGE = 3,
  ReferenceImage_IMAGE_TYPE_PORT_IMAGE = 4
};
bool ReferenceImage_IMAGE_TYPE_IsValid(int value);
const ReferenceImage_IMAGE_TYPE ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_MIN = ReferenceImage_IMAGE_TYPE_UNKNOW_TYPE;
const ReferenceImage_IMAGE_TYPE ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_MAX = ReferenceImage_IMAGE_TYPE_PORT_IMAGE;
const int ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_ARRAYSIZE = ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReferenceImage_IMAGE_TYPE_descriptor();
inline const ::std::string& ReferenceImage_IMAGE_TYPE_Name(ReferenceImage_IMAGE_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReferenceImage_IMAGE_TYPE_descriptor(), value);
}
inline bool ReferenceImage_IMAGE_TYPE_Parse(
    const ::std::string& name, ReferenceImage_IMAGE_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReferenceImage_IMAGE_TYPE>(
    ReferenceImage_IMAGE_TYPE_descriptor(), name, value);
}
// ===================================================================

class ReferenceImageInfo : public ::google::protobuf::Message {
 public:
  ReferenceImageInfo();
  virtual ~ReferenceImageInfo();
  
  ReferenceImageInfo(const ReferenceImageInfo& from);
  
  inline ReferenceImageInfo& operator=(const ReferenceImageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceImageInfo& default_instance();
  
  void Swap(ReferenceImageInfo* other);
  
  // implements Message ----------------------------------------------
  
  ReferenceImageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceImageInfo& from);
  void MergeFrom(const ReferenceImageInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string groupID = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 1;
  inline const ::std::string& groupid() const;
  inline void set_groupid(const ::std::string& value);
  inline void set_groupid(const char* value);
  inline void set_groupid(const char* value, size_t size);
  inline ::std::string* mutable_groupid();
  inline ::std::string* release_groupid();
  
  // optional string isocenterUID = 2;
  inline bool has_isocenteruid() const;
  inline void clear_isocenteruid();
  static const int kIsocenterUIDFieldNumber = 2;
  inline const ::std::string& isocenteruid() const;
  inline void set_isocenteruid(const ::std::string& value);
  inline void set_isocenteruid(const char* value);
  inline void set_isocenteruid(const char* value, size_t size);
  inline ::std::string* mutable_isocenteruid();
  inline ::std::string* release_isocenteruid();
  
  // optional float angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline float angle() const;
  inline void set_angle(float value);
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
  inline bool has_imagetype() const;
  inline void clear_imagetype();
  static const int kImageTypeFieldNumber = 4;
  inline ::tps::proto::ReferenceImage_IMAGE_TYPE imagetype() const;
  inline void set_imagetype(::tps::proto::ReferenceImage_IMAGE_TYPE value);
  
  // optional string beamUID = 5;
  inline bool has_beamuid() const;
  inline void clear_beamuid();
  static const int kBeamUIDFieldNumber = 5;
  inline const ::std::string& beamuid() const;
  inline void set_beamuid(const ::std::string& value);
  inline void set_beamuid(const char* value);
  inline void set_beamuid(const char* value, size_t size);
  inline ::std::string* mutable_beamuid();
  inline ::std::string* release_beamuid();
  
  // optional string imageUID = 6;
  inline bool has_imageuid() const;
  inline void clear_imageuid();
  static const int kImageUIDFieldNumber = 6;
  inline const ::std::string& imageuid() const;
  inline void set_imageuid(const ::std::string& value);
  inline void set_imageuid(const char* value);
  inline void set_imageuid(const char* value, size_t size);
  inline ::std::string* mutable_imageuid();
  inline ::std::string* release_imageuid();
  
  // optional int32 displayMedviewerID = 7;
  inline bool has_displaymedviewerid() const;
  inline void clear_displaymedviewerid();
  static const int kDisplayMedviewerIDFieldNumber = 7;
  inline ::google::protobuf::int32 displaymedviewerid() const;
  inline void set_displaymedviewerid(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.ReferenceImageInfo)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();
  inline void set_has_isocenteruid();
  inline void clear_has_isocenteruid();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_imagetype();
  inline void clear_has_imagetype();
  inline void set_has_beamuid();
  inline void clear_has_beamuid();
  inline void set_has_imageuid();
  inline void clear_has_imageuid();
  inline void set_has_displaymedviewerid();
  inline void clear_has_displaymedviewerid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* groupid_;
  ::std::string* isocenteruid_;
  float angle_;
  int imagetype_;
  ::std::string* beamuid_;
  ::std::string* imageuid_;
  ::google::protobuf::int32 displaymedviewerid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto();
  
  void InitAsDefaultInstance();
  static ReferenceImageInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReferenceImage : public ::google::protobuf::Message {
 public:
  ReferenceImage();
  virtual ~ReferenceImage();
  
  ReferenceImage(const ReferenceImage& from);
  
  inline ReferenceImage& operator=(const ReferenceImage& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceImage& default_instance();
  
  void Swap(ReferenceImage* other);
  
  // implements Message ----------------------------------------------
  
  ReferenceImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceImage& from);
  void MergeFrom(const ReferenceImage& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef ReferenceImage_IMAGE_TYPE IMAGE_TYPE;
  static const IMAGE_TYPE UNKNOW_TYPE = ReferenceImage_IMAGE_TYPE_UNKNOW_TYPE;
  static const IMAGE_TYPE DRR_IMAGE = ReferenceImage_IMAGE_TYPE_DRR_IMAGE;
  static const IMAGE_TYPE SLICE_IMAGE = ReferenceImage_IMAGE_TYPE_SLICE_IMAGE;
  static const IMAGE_TYPE EPID_IMAGE = ReferenceImage_IMAGE_TYPE_EPID_IMAGE;
  static const IMAGE_TYPE PORT_IMAGE = ReferenceImage_IMAGE_TYPE_PORT_IMAGE;
  static inline bool IMAGE_TYPE_IsValid(int value) {
    return ReferenceImage_IMAGE_TYPE_IsValid(value);
  }
  static const IMAGE_TYPE IMAGE_TYPE_MIN =
    ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_MIN;
  static const IMAGE_TYPE IMAGE_TYPE_MAX =
    ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_MAX;
  static const int IMAGE_TYPE_ARRAYSIZE =
    ReferenceImage_IMAGE_TYPE_IMAGE_TYPE_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  IMAGE_TYPE_descriptor() {
    return ReferenceImage_IMAGE_TYPE_descriptor();
  }
  static inline const ::std::string& IMAGE_TYPE_Name(IMAGE_TYPE value) {
    return ReferenceImage_IMAGE_TYPE_Name(value);
  }
  static inline bool IMAGE_TYPE_Parse(const ::std::string& name,
      IMAGE_TYPE* value) {
    return ReferenceImage_IMAGE_TYPE_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional string imageUID = 1;
  inline bool has_imageuid() const;
  inline void clear_imageuid();
  static const int kImageUIDFieldNumber = 1;
  inline const ::std::string& imageuid() const;
  inline void set_imageuid(const ::std::string& value);
  inline void set_imageuid(const char* value);
  inline void set_imageuid(const char* value, size_t size);
  inline ::std::string* mutable_imageuid();
  inline ::std::string* release_imageuid();
  
  // optional string beamUID = 2;
  inline bool has_beamuid() const;
  inline void clear_beamuid();
  static const int kBeamUIDFieldNumber = 2;
  inline const ::std::string& beamuid() const;
  inline void set_beamuid(const ::std::string& value);
  inline void set_beamuid(const char* value);
  inline void set_beamuid(const char* value, size_t size);
  inline ::std::string* mutable_beamuid();
  inline ::std::string* release_beamuid();
  
  // optional string imageDate = 3;
  inline bool has_imagedate() const;
  inline void clear_imagedate();
  static const int kImageDateFieldNumber = 3;
  inline const ::std::string& imagedate() const;
  inline void set_imagedate(const ::std::string& value);
  inline void set_imagedate(const char* value);
  inline void set_imagedate(const char* value, size_t size);
  inline ::std::string* mutable_imagedate();
  inline ::std::string* release_imagedate();
  
  // optional string imageTime = 4;
  inline bool has_imagetime() const;
  inline void clear_imagetime();
  static const int kImageTimeFieldNumber = 4;
  inline const ::std::string& imagetime() const;
  inline void set_imagetime(const ::std::string& value);
  inline void set_imagetime(const char* value);
  inline void set_imagetime(const char* value, size_t size);
  inline ::std::string* mutable_imagetime();
  inline ::std::string* release_imagetime();
  
  // optional float imageGantryAngle = 5;
  inline bool has_imagegantryangle() const;
  inline void clear_imagegantryangle();
  static const int kImageGantryAngleFieldNumber = 5;
  inline float imagegantryangle() const;
  inline void set_imagegantryangle(float value);
  
  // optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
  inline bool has_imagetype() const;
  inline void clear_imagetype();
  static const int kImageTypeFieldNumber = 6;
  inline ::tps::proto::ReferenceImage_IMAGE_TYPE imagetype() const;
  inline void set_imagetype(::tps::proto::ReferenceImage_IMAGE_TYPE value);
  
  // optional int32 imageHeight = 7;
  inline bool has_imageheight() const;
  inline void clear_imageheight();
  static const int kImageHeightFieldNumber = 7;
  inline ::google::protobuf::int32 imageheight() const;
  inline void set_imageheight(::google::protobuf::int32 value);
  
  // optional int32 imageWidth = 8;
  inline bool has_imagewidth() const;
  inline void clear_imagewidth();
  static const int kImageWidthFieldNumber = 8;
  inline ::google::protobuf::int32 imagewidth() const;
  inline void set_imagewidth(::google::protobuf::int32 value);
  
  // optional float pixelSpacingX = 9;
  inline bool has_pixelspacingx() const;
  inline void clear_pixelspacingx();
  static const int kPixelSpacingXFieldNumber = 9;
  inline float pixelspacingx() const;
  inline void set_pixelspacingx(float value);
  
  // optional float pixelSpacingY = 10;
  inline bool has_pixelspacingy() const;
  inline void clear_pixelspacingy();
  static const int kPixelSpacingYFieldNumber = 10;
  inline float pixelspacingy() const;
  inline void set_pixelspacingy(float value);
  
  // optional int32 centerX = 11;
  inline bool has_centerx() const;
  inline void clear_centerx();
  static const int kCenterXFieldNumber = 11;
  inline ::google::protobuf::int32 centerx() const;
  inline void set_centerx(::google::protobuf::int32 value);
  
  // optional int32 centerY = 12;
  inline bool has_centery() const;
  inline void clear_centery();
  static const int kCenterYFieldNumber = 12;
  inline ::google::protobuf::int32 centery() const;
  inline void set_centery(::google::protobuf::int32 value);
  
  // optional int32 bitsAllocated = 13;
  inline bool has_bitsallocated() const;
  inline void clear_bitsallocated();
  static const int kBitsAllocatedFieldNumber = 13;
  inline ::google::protobuf::int32 bitsallocated() const;
  inline void set_bitsallocated(::google::protobuf::int32 value);
  
  // optional uint32 bufferLength = 14;
  inline bool has_bufferlength() const;
  inline void clear_bufferlength();
  static const int kBufferLengthFieldNumber = 14;
  inline ::google::protobuf::uint32 bufferlength() const;
  inline void set_bufferlength(::google::protobuf::uint32 value);
  
  // optional bytes imageBuffer = 16;
  inline bool has_imagebuffer() const;
  inline void clear_imagebuffer();
  static const int kImageBufferFieldNumber = 16;
  inline const ::std::string& imagebuffer() const;
  inline void set_imagebuffer(const ::std::string& value);
  inline void set_imagebuffer(const char* value);
  inline void set_imagebuffer(const void* value, size_t size);
  inline ::std::string* mutable_imagebuffer();
  inline ::std::string* release_imagebuffer();
  
  // optional int32 cpNumber = 17;
  inline bool has_cpnumber() const;
  inline void clear_cpnumber();
  static const int kCpNumberFieldNumber = 17;
  inline ::google::protobuf::int32 cpnumber() const;
  inline void set_cpnumber(::google::protobuf::int32 value);
  
  // optional float receptorTranslationX = 18;
  inline bool has_receptortranslationx() const;
  inline void clear_receptortranslationx();
  static const int kReceptorTranslationXFieldNumber = 18;
  inline float receptortranslationx() const;
  inline void set_receptortranslationx(float value);
  
  // optional float receptorTranslationY = 19;
  inline bool has_receptortranslationy() const;
  inline void clear_receptortranslationy();
  static const int kReceptorTranslationYFieldNumber = 19;
  inline float receptortranslationy() const;
  inline void set_receptortranslationy(float value);
  
  // optional float receptorTranslationZ = 20;
  inline bool has_receptortranslationz() const;
  inline void clear_receptortranslationz();
  static const int kReceptorTranslationZFieldNumber = 20;
  inline float receptortranslationz() const;
  inline void set_receptortranslationz(float value);
  
  // optional float receptorAngle = 21;
  inline bool has_receptorangle() const;
  inline void clear_receptorangle();
  static const int kReceptorAngleFieldNumber = 21;
  inline float receptorangle() const;
  inline void set_receptorangle(float value);
  
  // optional float receptorPosX = 22;
  inline bool has_receptorposx() const;
  inline void clear_receptorposx();
  static const int kReceptorPosXFieldNumber = 22;
  inline float receptorposx() const;
  inline void set_receptorposx(float value);
  
  // optional float receptorPosY = 23;
  inline bool has_receptorposy() const;
  inline void clear_receptorposy();
  static const int kReceptorPosYFieldNumber = 23;
  inline float receptorposy() const;
  inline void set_receptorposy(float value);
  
  // optional int32 bitsStored = 24;
  inline bool has_bitsstored() const;
  inline void clear_bitsstored();
  static const int kBitsStoredFieldNumber = 24;
  inline ::google::protobuf::int32 bitsstored() const;
  inline void set_bitsstored(::google::protobuf::int32 value);
  
  // optional int32 hightBit = 25;
  inline bool has_hightbit() const;
  inline void clear_hightbit();
  static const int kHightBitFieldNumber = 25;
  inline ::google::protobuf::int32 hightbit() const;
  inline void set_hightbit(::google::protobuf::int32 value);
  
  // optional string imageName = 26;
  inline bool has_imagename() const;
  inline void clear_imagename();
  static const int kImageNameFieldNumber = 26;
  inline const ::std::string& imagename() const;
  inline void set_imagename(const ::std::string& value);
  inline void set_imagename(const char* value);
  inline void set_imagename(const char* value, size_t size);
  inline ::std::string* mutable_imagename();
  inline ::std::string* release_imagename();
  
  // optional string pixelRepresentation = 27;
  inline bool has_pixelrepresentation() const;
  inline void clear_pixelrepresentation();
  static const int kPixelRepresentationFieldNumber = 27;
  inline const ::std::string& pixelrepresentation() const;
  inline void set_pixelrepresentation(const ::std::string& value);
  inline void set_pixelrepresentation(const char* value);
  inline void set_pixelrepresentation(const char* value, size_t size);
  inline ::std::string* mutable_pixelrepresentation();
  inline ::std::string* release_pixelrepresentation();
  
  // optional int32 samplesPerPixel = 28;
  inline bool has_samplesperpixel() const;
  inline void clear_samplesperpixel();
  static const int kSamplesPerPixelFieldNumber = 28;
  inline ::google::protobuf::int32 samplesperpixel() const;
  inline void set_samplesperpixel(::google::protobuf::int32 value);
  
  // optional int32 windowCenter = 29;
  inline bool has_windowcenter() const;
  inline void clear_windowcenter();
  static const int kWindowCenterFieldNumber = 29;
  inline ::google::protobuf::int32 windowcenter() const;
  inline void set_windowcenter(::google::protobuf::int32 value);
  
  // optional int32 windowWidth = 30;
  inline bool has_windowwidth() const;
  inline void clear_windowwidth();
  static const int kWindowWidthFieldNumber = 30;
  inline ::google::protobuf::int32 windowwidth() const;
  inline void set_windowwidth(::google::protobuf::int32 value);
  
  // optional string patientName = 31;
  inline bool has_patientname() const;
  inline void clear_patientname();
  static const int kPatientNameFieldNumber = 31;
  inline const ::std::string& patientname() const;
  inline void set_patientname(const ::std::string& value);
  inline void set_patientname(const char* value);
  inline void set_patientname(const char* value, size_t size);
  inline ::std::string* mutable_patientname();
  inline ::std::string* release_patientname();
  
  // optional string patientID = 32;
  inline bool has_patientid() const;
  inline void clear_patientid();
  static const int kPatientIDFieldNumber = 32;
  inline const ::std::string& patientid() const;
  inline void set_patientid(const ::std::string& value);
  inline void set_patientid(const char* value);
  inline void set_patientid(const char* value, size_t size);
  inline ::std::string* mutable_patientid();
  inline ::std::string* release_patientid();
  
  // optional string patientBirthDate = 33;
  inline bool has_patientbirthdate() const;
  inline void clear_patientbirthdate();
  static const int kPatientBirthDateFieldNumber = 33;
  inline const ::std::string& patientbirthdate() const;
  inline void set_patientbirthdate(const ::std::string& value);
  inline void set_patientbirthdate(const char* value);
  inline void set_patientbirthdate(const char* value, size_t size);
  inline ::std::string* mutable_patientbirthdate();
  inline ::std::string* release_patientbirthdate();
  
  // optional int32 patientSex = 34;
  inline bool has_patientsex() const;
  inline void clear_patientsex();
  static const int kPatientSexFieldNumber = 34;
  inline ::google::protobuf::int32 patientsex() const;
  inline void set_patientsex(::google::protobuf::int32 value);
  
  // optional int32 sad = 35;
  inline bool has_sad() const;
  inline void clear_sad();
  static const int kSadFieldNumber = 35;
  inline ::google::protobuf::int32 sad() const;
  inline void set_sad(::google::protobuf::int32 value);
  
  // optional int32 ssd = 36;
  inline bool has_ssd() const;
  inline void clear_ssd();
  static const int kSsdFieldNumber = 36;
  inline ::google::protobuf::int32 ssd() const;
  inline void set_ssd(::google::protobuf::int32 value);
  
  // optional string dicomImageType = 37;
  inline bool has_dicomimagetype() const;
  inline void clear_dicomimagetype();
  static const int kDicomImageTypeFieldNumber = 37;
  inline const ::std::string& dicomimagetype() const;
  inline void set_dicomimagetype(const ::std::string& value);
  inline void set_dicomimagetype(const char* value);
  inline void set_dicomimagetype(const char* value, size_t size);
  inline ::std::string* mutable_dicomimagetype();
  inline ::std::string* release_dicomimagetype();
  
  // optional int32 patientPosition = 38;
  inline bool has_patientposition() const;
  inline void clear_patientposition();
  static const int kPatientPositionFieldNumber = 38;
  inline ::google::protobuf::int32 patientposition() const;
  inline void set_patientposition(::google::protobuf::int32 value);
  
  // optional string imageAcquisitionDate = 39;
  inline bool has_imageacquisitiondate() const;
  inline void clear_imageacquisitiondate();
  static const int kImageAcquisitionDateFieldNumber = 39;
  inline const ::std::string& imageacquisitiondate() const;
  inline void set_imageacquisitiondate(const ::std::string& value);
  inline void set_imageacquisitiondate(const char* value);
  inline void set_imageacquisitiondate(const char* value, size_t size);
  inline ::std::string* mutable_imageacquisitiondate();
  inline ::std::string* release_imageacquisitiondate();
  
  // optional string imageAcquisitionTime = 40;
  inline bool has_imageacquisitiontime() const;
  inline void clear_imageacquisitiontime();
  static const int kImageAcquisitionTimeFieldNumber = 40;
  inline const ::std::string& imageacquisitiontime() const;
  inline void set_imageacquisitiontime(const ::std::string& value);
  inline void set_imageacquisitiontime(const char* value);
  inline void set_imageacquisitiontime(const char* value, size_t size);
  inline ::std::string* mutable_imageacquisitiontime();
  inline ::std::string* release_imageacquisitiontime();
  
  // @@protoc_insertion_point(class_scope:tps.proto.ReferenceImage)
 private:
  inline void set_has_imageuid();
  inline void clear_has_imageuid();
  inline void set_has_beamuid();
  inline void clear_has_beamuid();
  inline void set_has_imagedate();
  inline void clear_has_imagedate();
  inline void set_has_imagetime();
  inline void clear_has_imagetime();
  inline void set_has_imagegantryangle();
  inline void clear_has_imagegantryangle();
  inline void set_has_imagetype();
  inline void clear_has_imagetype();
  inline void set_has_imageheight();
  inline void clear_has_imageheight();
  inline void set_has_imagewidth();
  inline void clear_has_imagewidth();
  inline void set_has_pixelspacingx();
  inline void clear_has_pixelspacingx();
  inline void set_has_pixelspacingy();
  inline void clear_has_pixelspacingy();
  inline void set_has_centerx();
  inline void clear_has_centerx();
  inline void set_has_centery();
  inline void clear_has_centery();
  inline void set_has_bitsallocated();
  inline void clear_has_bitsallocated();
  inline void set_has_bufferlength();
  inline void clear_has_bufferlength();
  inline void set_has_imagebuffer();
  inline void clear_has_imagebuffer();
  inline void set_has_cpnumber();
  inline void clear_has_cpnumber();
  inline void set_has_receptortranslationx();
  inline void clear_has_receptortranslationx();
  inline void set_has_receptortranslationy();
  inline void clear_has_receptortranslationy();
  inline void set_has_receptortranslationz();
  inline void clear_has_receptortranslationz();
  inline void set_has_receptorangle();
  inline void clear_has_receptorangle();
  inline void set_has_receptorposx();
  inline void clear_has_receptorposx();
  inline void set_has_receptorposy();
  inline void clear_has_receptorposy();
  inline void set_has_bitsstored();
  inline void clear_has_bitsstored();
  inline void set_has_hightbit();
  inline void clear_has_hightbit();
  inline void set_has_imagename();
  inline void clear_has_imagename();
  inline void set_has_pixelrepresentation();
  inline void clear_has_pixelrepresentation();
  inline void set_has_samplesperpixel();
  inline void clear_has_samplesperpixel();
  inline void set_has_windowcenter();
  inline void clear_has_windowcenter();
  inline void set_has_windowwidth();
  inline void clear_has_windowwidth();
  inline void set_has_patientname();
  inline void clear_has_patientname();
  inline void set_has_patientid();
  inline void clear_has_patientid();
  inline void set_has_patientbirthdate();
  inline void clear_has_patientbirthdate();
  inline void set_has_patientsex();
  inline void clear_has_patientsex();
  inline void set_has_sad();
  inline void clear_has_sad();
  inline void set_has_ssd();
  inline void clear_has_ssd();
  inline void set_has_dicomimagetype();
  inline void clear_has_dicomimagetype();
  inline void set_has_patientposition();
  inline void clear_has_patientposition();
  inline void set_has_imageacquisitiondate();
  inline void clear_has_imageacquisitiondate();
  inline void set_has_imageacquisitiontime();
  inline void clear_has_imageacquisitiontime();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* imageuid_;
  ::std::string* beamuid_;
  ::std::string* imagedate_;
  ::std::string* imagetime_;
  float imagegantryangle_;
  int imagetype_;
  ::google::protobuf::int32 imageheight_;
  ::google::protobuf::int32 imagewidth_;
  float pixelspacingx_;
  float pixelspacingy_;
  ::google::protobuf::int32 centerx_;
  ::google::protobuf::int32 centery_;
  ::google::protobuf::int32 bitsallocated_;
  ::google::protobuf::uint32 bufferlength_;
  ::std::string* imagebuffer_;
  ::google::protobuf::int32 cpnumber_;
  float receptortranslationx_;
  float receptortranslationy_;
  float receptortranslationz_;
  float receptorangle_;
  float receptorposx_;
  float receptorposy_;
  ::google::protobuf::int32 bitsstored_;
  ::std::string* imagename_;
  ::google::protobuf::int32 hightbit_;
  ::google::protobuf::int32 samplesperpixel_;
  ::std::string* pixelrepresentation_;
  ::google::protobuf::int32 windowcenter_;
  ::google::protobuf::int32 windowwidth_;
  ::std::string* patientname_;
  ::std::string* patientid_;
  ::std::string* patientbirthdate_;
  ::google::protobuf::int32 patientsex_;
  ::google::protobuf::int32 sad_;
  ::std::string* dicomimagetype_;
  ::google::protobuf::int32 ssd_;
  ::google::protobuf::int32 patientposition_;
  ::std::string* imageacquisitiondate_;
  ::std::string* imageacquisitiontime_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(39 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto();
  
  void InitAsDefaultInstance();
  static ReferenceImage* default_instance_;
};
// -------------------------------------------------------------------

class ReferenceImageList : public ::google::protobuf::Message {
 public:
  ReferenceImageList();
  virtual ~ReferenceImageList();
  
  ReferenceImageList(const ReferenceImageList& from);
  
  inline ReferenceImageList& operator=(const ReferenceImageList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReferenceImageList& default_instance();
  
  void Swap(ReferenceImageList* other);
  
  // implements Message ----------------------------------------------
  
  ReferenceImageList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReferenceImageList& from);
  void MergeFrom(const ReferenceImageList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.ReferenceImage imageList = 1;
  inline int imagelist_size() const;
  inline void clear_imagelist();
  static const int kImageListFieldNumber = 1;
  inline const ::tps::proto::ReferenceImage& imagelist(int index) const;
  inline ::tps::proto::ReferenceImage* mutable_imagelist(int index);
  inline ::tps::proto::ReferenceImage* add_imagelist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::ReferenceImage >&
      imagelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::ReferenceImage >*
      mutable_imagelist();
  
  // optional string patientUID = 2;
  inline bool has_patientuid() const;
  inline void clear_patientuid();
  static const int kPatientUIDFieldNumber = 2;
  inline const ::std::string& patientuid() const;
  inline void set_patientuid(const ::std::string& value);
  inline void set_patientuid(const char* value);
  inline void set_patientuid(const char* value, size_t size);
  inline ::std::string* mutable_patientuid();
  inline ::std::string* release_patientuid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.ReferenceImageList)
 private:
  inline void set_has_patientuid();
  inline void clear_has_patientuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::ReferenceImage > imagelist_;
  ::std::string* patientuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5freferenceimage_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5freferenceimage_2eproto();
  
  void InitAsDefaultInstance();
  static ReferenceImageList* default_instance_;
};
// ===================================================================


// ===================================================================

// ReferenceImageInfo

// optional string groupID = 1;
inline bool ReferenceImageInfo::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceImageInfo::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceImageInfo::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceImageInfo::clear_groupid() {
  if (groupid_ != &::google::protobuf::internal::kEmptyString) {
    groupid_->clear();
  }
  clear_has_groupid();
}
inline const ::std::string& ReferenceImageInfo::groupid() const {
  return *groupid_;
}
inline void ReferenceImageInfo::set_groupid(const ::std::string& value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void ReferenceImageInfo::set_groupid(const char* value) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(value);
}
inline void ReferenceImageInfo::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  groupid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImageInfo::mutable_groupid() {
  set_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    groupid_ = new ::std::string;
  }
  return groupid_;
}
inline ::std::string* ReferenceImageInfo::release_groupid() {
  clear_has_groupid();
  if (groupid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = groupid_;
    groupid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string isocenterUID = 2;
inline bool ReferenceImageInfo::has_isocenteruid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceImageInfo::set_has_isocenteruid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceImageInfo::clear_has_isocenteruid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceImageInfo::clear_isocenteruid() {
  if (isocenteruid_ != &::google::protobuf::internal::kEmptyString) {
    isocenteruid_->clear();
  }
  clear_has_isocenteruid();
}
inline const ::std::string& ReferenceImageInfo::isocenteruid() const {
  return *isocenteruid_;
}
inline void ReferenceImageInfo::set_isocenteruid(const ::std::string& value) {
  set_has_isocenteruid();
  if (isocenteruid_ == &::google::protobuf::internal::kEmptyString) {
    isocenteruid_ = new ::std::string;
  }
  isocenteruid_->assign(value);
}
inline void ReferenceImageInfo::set_isocenteruid(const char* value) {
  set_has_isocenteruid();
  if (isocenteruid_ == &::google::protobuf::internal::kEmptyString) {
    isocenteruid_ = new ::std::string;
  }
  isocenteruid_->assign(value);
}
inline void ReferenceImageInfo::set_isocenteruid(const char* value, size_t size) {
  set_has_isocenteruid();
  if (isocenteruid_ == &::google::protobuf::internal::kEmptyString) {
    isocenteruid_ = new ::std::string;
  }
  isocenteruid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImageInfo::mutable_isocenteruid() {
  set_has_isocenteruid();
  if (isocenteruid_ == &::google::protobuf::internal::kEmptyString) {
    isocenteruid_ = new ::std::string;
  }
  return isocenteruid_;
}
inline ::std::string* ReferenceImageInfo::release_isocenteruid() {
  clear_has_isocenteruid();
  if (isocenteruid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isocenteruid_;
    isocenteruid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float angle = 3;
inline bool ReferenceImageInfo::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceImageInfo::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceImageInfo::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceImageInfo::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline float ReferenceImageInfo::angle() const {
  return angle_;
}
inline void ReferenceImageInfo::set_angle(float value) {
  set_has_angle();
  angle_ = value;
}

// optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 4;
inline bool ReferenceImageInfo::has_imagetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceImageInfo::set_has_imagetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceImageInfo::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceImageInfo::clear_imagetype() {
  imagetype_ = -1;
  clear_has_imagetype();
}
inline ::tps::proto::ReferenceImage_IMAGE_TYPE ReferenceImageInfo::imagetype() const {
  return static_cast< ::tps::proto::ReferenceImage_IMAGE_TYPE >(imagetype_);
}
inline void ReferenceImageInfo::set_imagetype(::tps::proto::ReferenceImage_IMAGE_TYPE value) {
  GOOGLE_DCHECK(::tps::proto::ReferenceImage_IMAGE_TYPE_IsValid(value));
  set_has_imagetype();
  imagetype_ = value;
}

// optional string beamUID = 5;
inline bool ReferenceImageInfo::has_beamuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceImageInfo::set_has_beamuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceImageInfo::clear_has_beamuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceImageInfo::clear_beamuid() {
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    beamuid_->clear();
  }
  clear_has_beamuid();
}
inline const ::std::string& ReferenceImageInfo::beamuid() const {
  return *beamuid_;
}
inline void ReferenceImageInfo::set_beamuid(const ::std::string& value) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(value);
}
inline void ReferenceImageInfo::set_beamuid(const char* value) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(value);
}
inline void ReferenceImageInfo::set_beamuid(const char* value, size_t size) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImageInfo::mutable_beamuid() {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  return beamuid_;
}
inline ::std::string* ReferenceImageInfo::release_beamuid() {
  clear_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beamuid_;
    beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imageUID = 6;
inline bool ReferenceImageInfo::has_imageuid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReferenceImageInfo::set_has_imageuid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReferenceImageInfo::clear_has_imageuid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReferenceImageInfo::clear_imageuid() {
  if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
    imageuid_->clear();
  }
  clear_has_imageuid();
}
inline const ::std::string& ReferenceImageInfo::imageuid() const {
  return *imageuid_;
}
inline void ReferenceImageInfo::set_imageuid(const ::std::string& value) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(value);
}
inline void ReferenceImageInfo::set_imageuid(const char* value) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(value);
}
inline void ReferenceImageInfo::set_imageuid(const char* value, size_t size) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImageInfo::mutable_imageuid() {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  return imageuid_;
}
inline ::std::string* ReferenceImageInfo::release_imageuid() {
  clear_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageuid_;
    imageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 displayMedviewerID = 7;
inline bool ReferenceImageInfo::has_displaymedviewerid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReferenceImageInfo::set_has_displaymedviewerid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReferenceImageInfo::clear_has_displaymedviewerid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReferenceImageInfo::clear_displaymedviewerid() {
  displaymedviewerid_ = 0;
  clear_has_displaymedviewerid();
}
inline ::google::protobuf::int32 ReferenceImageInfo::displaymedviewerid() const {
  return displaymedviewerid_;
}
inline void ReferenceImageInfo::set_displaymedviewerid(::google::protobuf::int32 value) {
  set_has_displaymedviewerid();
  displaymedviewerid_ = value;
}

// -------------------------------------------------------------------

// ReferenceImage

// optional string imageUID = 1;
inline bool ReferenceImage::has_imageuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReferenceImage::set_has_imageuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReferenceImage::clear_has_imageuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReferenceImage::clear_imageuid() {
  if (imageuid_ != &::google::protobuf::internal::kEmptyString) {
    imageuid_->clear();
  }
  clear_has_imageuid();
}
inline const ::std::string& ReferenceImage::imageuid() const {
  return *imageuid_;
}
inline void ReferenceImage::set_imageuid(const ::std::string& value) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(value);
}
inline void ReferenceImage::set_imageuid(const char* value) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(value);
}
inline void ReferenceImage::set_imageuid(const char* value, size_t size) {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  imageuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imageuid() {
  set_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    imageuid_ = new ::std::string;
  }
  return imageuid_;
}
inline ::std::string* ReferenceImage::release_imageuid() {
  clear_has_imageuid();
  if (imageuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageuid_;
    imageuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string beamUID = 2;
inline bool ReferenceImage::has_beamuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceImage::set_has_beamuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceImage::clear_has_beamuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceImage::clear_beamuid() {
  if (beamuid_ != &::google::protobuf::internal::kEmptyString) {
    beamuid_->clear();
  }
  clear_has_beamuid();
}
inline const ::std::string& ReferenceImage::beamuid() const {
  return *beamuid_;
}
inline void ReferenceImage::set_beamuid(const ::std::string& value) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(value);
}
inline void ReferenceImage::set_beamuid(const char* value) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(value);
}
inline void ReferenceImage::set_beamuid(const char* value, size_t size) {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  beamuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_beamuid() {
  set_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    beamuid_ = new ::std::string;
  }
  return beamuid_;
}
inline ::std::string* ReferenceImage::release_beamuid() {
  clear_has_beamuid();
  if (beamuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beamuid_;
    beamuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imageDate = 3;
inline bool ReferenceImage::has_imagedate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReferenceImage::set_has_imagedate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReferenceImage::clear_has_imagedate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReferenceImage::clear_imagedate() {
  if (imagedate_ != &::google::protobuf::internal::kEmptyString) {
    imagedate_->clear();
  }
  clear_has_imagedate();
}
inline const ::std::string& ReferenceImage::imagedate() const {
  return *imagedate_;
}
inline void ReferenceImage::set_imagedate(const ::std::string& value) {
  set_has_imagedate();
  if (imagedate_ == &::google::protobuf::internal::kEmptyString) {
    imagedate_ = new ::std::string;
  }
  imagedate_->assign(value);
}
inline void ReferenceImage::set_imagedate(const char* value) {
  set_has_imagedate();
  if (imagedate_ == &::google::protobuf::internal::kEmptyString) {
    imagedate_ = new ::std::string;
  }
  imagedate_->assign(value);
}
inline void ReferenceImage::set_imagedate(const char* value, size_t size) {
  set_has_imagedate();
  if (imagedate_ == &::google::protobuf::internal::kEmptyString) {
    imagedate_ = new ::std::string;
  }
  imagedate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imagedate() {
  set_has_imagedate();
  if (imagedate_ == &::google::protobuf::internal::kEmptyString) {
    imagedate_ = new ::std::string;
  }
  return imagedate_;
}
inline ::std::string* ReferenceImage::release_imagedate() {
  clear_has_imagedate();
  if (imagedate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagedate_;
    imagedate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imageTime = 4;
inline bool ReferenceImage::has_imagetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReferenceImage::set_has_imagetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReferenceImage::clear_has_imagetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReferenceImage::clear_imagetime() {
  if (imagetime_ != &::google::protobuf::internal::kEmptyString) {
    imagetime_->clear();
  }
  clear_has_imagetime();
}
inline const ::std::string& ReferenceImage::imagetime() const {
  return *imagetime_;
}
inline void ReferenceImage::set_imagetime(const ::std::string& value) {
  set_has_imagetime();
  if (imagetime_ == &::google::protobuf::internal::kEmptyString) {
    imagetime_ = new ::std::string;
  }
  imagetime_->assign(value);
}
inline void ReferenceImage::set_imagetime(const char* value) {
  set_has_imagetime();
  if (imagetime_ == &::google::protobuf::internal::kEmptyString) {
    imagetime_ = new ::std::string;
  }
  imagetime_->assign(value);
}
inline void ReferenceImage::set_imagetime(const char* value, size_t size) {
  set_has_imagetime();
  if (imagetime_ == &::google::protobuf::internal::kEmptyString) {
    imagetime_ = new ::std::string;
  }
  imagetime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imagetime() {
  set_has_imagetime();
  if (imagetime_ == &::google::protobuf::internal::kEmptyString) {
    imagetime_ = new ::std::string;
  }
  return imagetime_;
}
inline ::std::string* ReferenceImage::release_imagetime() {
  clear_has_imagetime();
  if (imagetime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagetime_;
    imagetime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float imageGantryAngle = 5;
inline bool ReferenceImage::has_imagegantryangle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReferenceImage::set_has_imagegantryangle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReferenceImage::clear_has_imagegantryangle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReferenceImage::clear_imagegantryangle() {
  imagegantryangle_ = 0;
  clear_has_imagegantryangle();
}
inline float ReferenceImage::imagegantryangle() const {
  return imagegantryangle_;
}
inline void ReferenceImage::set_imagegantryangle(float value) {
  set_has_imagegantryangle();
  imagegantryangle_ = value;
}

// optional .tps.proto.ReferenceImage.IMAGE_TYPE imageType = 6;
inline bool ReferenceImage::has_imagetype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReferenceImage::set_has_imagetype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReferenceImage::clear_has_imagetype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReferenceImage::clear_imagetype() {
  imagetype_ = -1;
  clear_has_imagetype();
}
inline ::tps::proto::ReferenceImage_IMAGE_TYPE ReferenceImage::imagetype() const {
  return static_cast< ::tps::proto::ReferenceImage_IMAGE_TYPE >(imagetype_);
}
inline void ReferenceImage::set_imagetype(::tps::proto::ReferenceImage_IMAGE_TYPE value) {
  GOOGLE_DCHECK(::tps::proto::ReferenceImage_IMAGE_TYPE_IsValid(value));
  set_has_imagetype();
  imagetype_ = value;
}

// optional int32 imageHeight = 7;
inline bool ReferenceImage::has_imageheight() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReferenceImage::set_has_imageheight() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReferenceImage::clear_has_imageheight() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReferenceImage::clear_imageheight() {
  imageheight_ = 0;
  clear_has_imageheight();
}
inline ::google::protobuf::int32 ReferenceImage::imageheight() const {
  return imageheight_;
}
inline void ReferenceImage::set_imageheight(::google::protobuf::int32 value) {
  set_has_imageheight();
  imageheight_ = value;
}

// optional int32 imageWidth = 8;
inline bool ReferenceImage::has_imagewidth() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ReferenceImage::set_has_imagewidth() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ReferenceImage::clear_has_imagewidth() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ReferenceImage::clear_imagewidth() {
  imagewidth_ = 0;
  clear_has_imagewidth();
}
inline ::google::protobuf::int32 ReferenceImage::imagewidth() const {
  return imagewidth_;
}
inline void ReferenceImage::set_imagewidth(::google::protobuf::int32 value) {
  set_has_imagewidth();
  imagewidth_ = value;
}

// optional float pixelSpacingX = 9;
inline bool ReferenceImage::has_pixelspacingx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ReferenceImage::set_has_pixelspacingx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ReferenceImage::clear_has_pixelspacingx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ReferenceImage::clear_pixelspacingx() {
  pixelspacingx_ = 0;
  clear_has_pixelspacingx();
}
inline float ReferenceImage::pixelspacingx() const {
  return pixelspacingx_;
}
inline void ReferenceImage::set_pixelspacingx(float value) {
  set_has_pixelspacingx();
  pixelspacingx_ = value;
}

// optional float pixelSpacingY = 10;
inline bool ReferenceImage::has_pixelspacingy() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ReferenceImage::set_has_pixelspacingy() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ReferenceImage::clear_has_pixelspacingy() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ReferenceImage::clear_pixelspacingy() {
  pixelspacingy_ = 0;
  clear_has_pixelspacingy();
}
inline float ReferenceImage::pixelspacingy() const {
  return pixelspacingy_;
}
inline void ReferenceImage::set_pixelspacingy(float value) {
  set_has_pixelspacingy();
  pixelspacingy_ = value;
}

// optional int32 centerX = 11;
inline bool ReferenceImage::has_centerx() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ReferenceImage::set_has_centerx() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ReferenceImage::clear_has_centerx() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ReferenceImage::clear_centerx() {
  centerx_ = 0;
  clear_has_centerx();
}
inline ::google::protobuf::int32 ReferenceImage::centerx() const {
  return centerx_;
}
inline void ReferenceImage::set_centerx(::google::protobuf::int32 value) {
  set_has_centerx();
  centerx_ = value;
}

// optional int32 centerY = 12;
inline bool ReferenceImage::has_centery() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ReferenceImage::set_has_centery() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ReferenceImage::clear_has_centery() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ReferenceImage::clear_centery() {
  centery_ = 0;
  clear_has_centery();
}
inline ::google::protobuf::int32 ReferenceImage::centery() const {
  return centery_;
}
inline void ReferenceImage::set_centery(::google::protobuf::int32 value) {
  set_has_centery();
  centery_ = value;
}

// optional int32 bitsAllocated = 13;
inline bool ReferenceImage::has_bitsallocated() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ReferenceImage::set_has_bitsallocated() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ReferenceImage::clear_has_bitsallocated() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ReferenceImage::clear_bitsallocated() {
  bitsallocated_ = 0;
  clear_has_bitsallocated();
}
inline ::google::protobuf::int32 ReferenceImage::bitsallocated() const {
  return bitsallocated_;
}
inline void ReferenceImage::set_bitsallocated(::google::protobuf::int32 value) {
  set_has_bitsallocated();
  bitsallocated_ = value;
}

// optional uint32 bufferLength = 14;
inline bool ReferenceImage::has_bufferlength() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ReferenceImage::set_has_bufferlength() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ReferenceImage::clear_has_bufferlength() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ReferenceImage::clear_bufferlength() {
  bufferlength_ = 0u;
  clear_has_bufferlength();
}
inline ::google::protobuf::uint32 ReferenceImage::bufferlength() const {
  return bufferlength_;
}
inline void ReferenceImage::set_bufferlength(::google::protobuf::uint32 value) {
  set_has_bufferlength();
  bufferlength_ = value;
}

// optional bytes imageBuffer = 16;
inline bool ReferenceImage::has_imagebuffer() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ReferenceImage::set_has_imagebuffer() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ReferenceImage::clear_has_imagebuffer() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ReferenceImage::clear_imagebuffer() {
  if (imagebuffer_ != &::google::protobuf::internal::kEmptyString) {
    imagebuffer_->clear();
  }
  clear_has_imagebuffer();
}
inline const ::std::string& ReferenceImage::imagebuffer() const {
  return *imagebuffer_;
}
inline void ReferenceImage::set_imagebuffer(const ::std::string& value) {
  set_has_imagebuffer();
  if (imagebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imagebuffer_ = new ::std::string;
  }
  imagebuffer_->assign(value);
}
inline void ReferenceImage::set_imagebuffer(const char* value) {
  set_has_imagebuffer();
  if (imagebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imagebuffer_ = new ::std::string;
  }
  imagebuffer_->assign(value);
}
inline void ReferenceImage::set_imagebuffer(const void* value, size_t size) {
  set_has_imagebuffer();
  if (imagebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imagebuffer_ = new ::std::string;
  }
  imagebuffer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imagebuffer() {
  set_has_imagebuffer();
  if (imagebuffer_ == &::google::protobuf::internal::kEmptyString) {
    imagebuffer_ = new ::std::string;
  }
  return imagebuffer_;
}
inline ::std::string* ReferenceImage::release_imagebuffer() {
  clear_has_imagebuffer();
  if (imagebuffer_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagebuffer_;
    imagebuffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 cpNumber = 17;
inline bool ReferenceImage::has_cpnumber() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ReferenceImage::set_has_cpnumber() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ReferenceImage::clear_has_cpnumber() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ReferenceImage::clear_cpnumber() {
  cpnumber_ = 0;
  clear_has_cpnumber();
}
inline ::google::protobuf::int32 ReferenceImage::cpnumber() const {
  return cpnumber_;
}
inline void ReferenceImage::set_cpnumber(::google::protobuf::int32 value) {
  set_has_cpnumber();
  cpnumber_ = value;
}

// optional float receptorTranslationX = 18;
inline bool ReferenceImage::has_receptortranslationx() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ReferenceImage::set_has_receptortranslationx() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ReferenceImage::clear_has_receptortranslationx() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ReferenceImage::clear_receptortranslationx() {
  receptortranslationx_ = 0;
  clear_has_receptortranslationx();
}
inline float ReferenceImage::receptortranslationx() const {
  return receptortranslationx_;
}
inline void ReferenceImage::set_receptortranslationx(float value) {
  set_has_receptortranslationx();
  receptortranslationx_ = value;
}

// optional float receptorTranslationY = 19;
inline bool ReferenceImage::has_receptortranslationy() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ReferenceImage::set_has_receptortranslationy() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ReferenceImage::clear_has_receptortranslationy() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ReferenceImage::clear_receptortranslationy() {
  receptortranslationy_ = 0;
  clear_has_receptortranslationy();
}
inline float ReferenceImage::receptortranslationy() const {
  return receptortranslationy_;
}
inline void ReferenceImage::set_receptortranslationy(float value) {
  set_has_receptortranslationy();
  receptortranslationy_ = value;
}

// optional float receptorTranslationZ = 20;
inline bool ReferenceImage::has_receptortranslationz() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ReferenceImage::set_has_receptortranslationz() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ReferenceImage::clear_has_receptortranslationz() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ReferenceImage::clear_receptortranslationz() {
  receptortranslationz_ = 0;
  clear_has_receptortranslationz();
}
inline float ReferenceImage::receptortranslationz() const {
  return receptortranslationz_;
}
inline void ReferenceImage::set_receptortranslationz(float value) {
  set_has_receptortranslationz();
  receptortranslationz_ = value;
}

// optional float receptorAngle = 21;
inline bool ReferenceImage::has_receptorangle() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ReferenceImage::set_has_receptorangle() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ReferenceImage::clear_has_receptorangle() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ReferenceImage::clear_receptorangle() {
  receptorangle_ = 0;
  clear_has_receptorangle();
}
inline float ReferenceImage::receptorangle() const {
  return receptorangle_;
}
inline void ReferenceImage::set_receptorangle(float value) {
  set_has_receptorangle();
  receptorangle_ = value;
}

// optional float receptorPosX = 22;
inline bool ReferenceImage::has_receptorposx() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ReferenceImage::set_has_receptorposx() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ReferenceImage::clear_has_receptorposx() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ReferenceImage::clear_receptorposx() {
  receptorposx_ = 0;
  clear_has_receptorposx();
}
inline float ReferenceImage::receptorposx() const {
  return receptorposx_;
}
inline void ReferenceImage::set_receptorposx(float value) {
  set_has_receptorposx();
  receptorposx_ = value;
}

// optional float receptorPosY = 23;
inline bool ReferenceImage::has_receptorposy() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ReferenceImage::set_has_receptorposy() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ReferenceImage::clear_has_receptorposy() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ReferenceImage::clear_receptorposy() {
  receptorposy_ = 0;
  clear_has_receptorposy();
}
inline float ReferenceImage::receptorposy() const {
  return receptorposy_;
}
inline void ReferenceImage::set_receptorposy(float value) {
  set_has_receptorposy();
  receptorposy_ = value;
}

// optional int32 bitsStored = 24;
inline bool ReferenceImage::has_bitsstored() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ReferenceImage::set_has_bitsstored() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ReferenceImage::clear_has_bitsstored() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ReferenceImage::clear_bitsstored() {
  bitsstored_ = 0;
  clear_has_bitsstored();
}
inline ::google::protobuf::int32 ReferenceImage::bitsstored() const {
  return bitsstored_;
}
inline void ReferenceImage::set_bitsstored(::google::protobuf::int32 value) {
  set_has_bitsstored();
  bitsstored_ = value;
}

// optional int32 hightBit = 25;
inline bool ReferenceImage::has_hightbit() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ReferenceImage::set_has_hightbit() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ReferenceImage::clear_has_hightbit() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ReferenceImage::clear_hightbit() {
  hightbit_ = 0;
  clear_has_hightbit();
}
inline ::google::protobuf::int32 ReferenceImage::hightbit() const {
  return hightbit_;
}
inline void ReferenceImage::set_hightbit(::google::protobuf::int32 value) {
  set_has_hightbit();
  hightbit_ = value;
}

// optional string imageName = 26;
inline bool ReferenceImage::has_imagename() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ReferenceImage::set_has_imagename() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ReferenceImage::clear_has_imagename() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ReferenceImage::clear_imagename() {
  if (imagename_ != &::google::protobuf::internal::kEmptyString) {
    imagename_->clear();
  }
  clear_has_imagename();
}
inline const ::std::string& ReferenceImage::imagename() const {
  return *imagename_;
}
inline void ReferenceImage::set_imagename(const ::std::string& value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void ReferenceImage::set_imagename(const char* value) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(value);
}
inline void ReferenceImage::set_imagename(const char* value, size_t size) {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  imagename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imagename() {
  set_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    imagename_ = new ::std::string;
  }
  return imagename_;
}
inline ::std::string* ReferenceImage::release_imagename() {
  clear_has_imagename();
  if (imagename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imagename_;
    imagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string pixelRepresentation = 27;
inline bool ReferenceImage::has_pixelrepresentation() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ReferenceImage::set_has_pixelrepresentation() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ReferenceImage::clear_has_pixelrepresentation() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ReferenceImage::clear_pixelrepresentation() {
  if (pixelrepresentation_ != &::google::protobuf::internal::kEmptyString) {
    pixelrepresentation_->clear();
  }
  clear_has_pixelrepresentation();
}
inline const ::std::string& ReferenceImage::pixelrepresentation() const {
  return *pixelrepresentation_;
}
inline void ReferenceImage::set_pixelrepresentation(const ::std::string& value) {
  set_has_pixelrepresentation();
  if (pixelrepresentation_ == &::google::protobuf::internal::kEmptyString) {
    pixelrepresentation_ = new ::std::string;
  }
  pixelrepresentation_->assign(value);
}
inline void ReferenceImage::set_pixelrepresentation(const char* value) {
  set_has_pixelrepresentation();
  if (pixelrepresentation_ == &::google::protobuf::internal::kEmptyString) {
    pixelrepresentation_ = new ::std::string;
  }
  pixelrepresentation_->assign(value);
}
inline void ReferenceImage::set_pixelrepresentation(const char* value, size_t size) {
  set_has_pixelrepresentation();
  if (pixelrepresentation_ == &::google::protobuf::internal::kEmptyString) {
    pixelrepresentation_ = new ::std::string;
  }
  pixelrepresentation_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_pixelrepresentation() {
  set_has_pixelrepresentation();
  if (pixelrepresentation_ == &::google::protobuf::internal::kEmptyString) {
    pixelrepresentation_ = new ::std::string;
  }
  return pixelrepresentation_;
}
inline ::std::string* ReferenceImage::release_pixelrepresentation() {
  clear_has_pixelrepresentation();
  if (pixelrepresentation_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pixelrepresentation_;
    pixelrepresentation_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 samplesPerPixel = 28;
inline bool ReferenceImage::has_samplesperpixel() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ReferenceImage::set_has_samplesperpixel() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ReferenceImage::clear_has_samplesperpixel() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ReferenceImage::clear_samplesperpixel() {
  samplesperpixel_ = 0;
  clear_has_samplesperpixel();
}
inline ::google::protobuf::int32 ReferenceImage::samplesperpixel() const {
  return samplesperpixel_;
}
inline void ReferenceImage::set_samplesperpixel(::google::protobuf::int32 value) {
  set_has_samplesperpixel();
  samplesperpixel_ = value;
}

// optional int32 windowCenter = 29;
inline bool ReferenceImage::has_windowcenter() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void ReferenceImage::set_has_windowcenter() {
  _has_bits_[0] |= 0x08000000u;
}
inline void ReferenceImage::clear_has_windowcenter() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void ReferenceImage::clear_windowcenter() {
  windowcenter_ = 0;
  clear_has_windowcenter();
}
inline ::google::protobuf::int32 ReferenceImage::windowcenter() const {
  return windowcenter_;
}
inline void ReferenceImage::set_windowcenter(::google::protobuf::int32 value) {
  set_has_windowcenter();
  windowcenter_ = value;
}

// optional int32 windowWidth = 30;
inline bool ReferenceImage::has_windowwidth() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void ReferenceImage::set_has_windowwidth() {
  _has_bits_[0] |= 0x10000000u;
}
inline void ReferenceImage::clear_has_windowwidth() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void ReferenceImage::clear_windowwidth() {
  windowwidth_ = 0;
  clear_has_windowwidth();
}
inline ::google::protobuf::int32 ReferenceImage::windowwidth() const {
  return windowwidth_;
}
inline void ReferenceImage::set_windowwidth(::google::protobuf::int32 value) {
  set_has_windowwidth();
  windowwidth_ = value;
}

// optional string patientName = 31;
inline bool ReferenceImage::has_patientname() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void ReferenceImage::set_has_patientname() {
  _has_bits_[0] |= 0x20000000u;
}
inline void ReferenceImage::clear_has_patientname() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void ReferenceImage::clear_patientname() {
  if (patientname_ != &::google::protobuf::internal::kEmptyString) {
    patientname_->clear();
  }
  clear_has_patientname();
}
inline const ::std::string& ReferenceImage::patientname() const {
  return *patientname_;
}
inline void ReferenceImage::set_patientname(const ::std::string& value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void ReferenceImage::set_patientname(const char* value) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(value);
}
inline void ReferenceImage::set_patientname(const char* value, size_t size) {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  patientname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_patientname() {
  set_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    patientname_ = new ::std::string;
  }
  return patientname_;
}
inline ::std::string* ReferenceImage::release_patientname() {
  clear_has_patientname();
  if (patientname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientname_;
    patientname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientID = 32;
inline bool ReferenceImage::has_patientid() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void ReferenceImage::set_has_patientid() {
  _has_bits_[0] |= 0x40000000u;
}
inline void ReferenceImage::clear_has_patientid() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void ReferenceImage::clear_patientid() {
  if (patientid_ != &::google::protobuf::internal::kEmptyString) {
    patientid_->clear();
  }
  clear_has_patientid();
}
inline const ::std::string& ReferenceImage::patientid() const {
  return *patientid_;
}
inline void ReferenceImage::set_patientid(const ::std::string& value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void ReferenceImage::set_patientid(const char* value) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(value);
}
inline void ReferenceImage::set_patientid(const char* value, size_t size) {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  patientid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_patientid() {
  set_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    patientid_ = new ::std::string;
  }
  return patientid_;
}
inline ::std::string* ReferenceImage::release_patientid() {
  clear_has_patientid();
  if (patientid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientid_;
    patientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string patientBirthDate = 33;
inline bool ReferenceImage::has_patientbirthdate() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void ReferenceImage::set_has_patientbirthdate() {
  _has_bits_[0] |= 0x80000000u;
}
inline void ReferenceImage::clear_has_patientbirthdate() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void ReferenceImage::clear_patientbirthdate() {
  if (patientbirthdate_ != &::google::protobuf::internal::kEmptyString) {
    patientbirthdate_->clear();
  }
  clear_has_patientbirthdate();
}
inline const ::std::string& ReferenceImage::patientbirthdate() const {
  return *patientbirthdate_;
}
inline void ReferenceImage::set_patientbirthdate(const ::std::string& value) {
  set_has_patientbirthdate();
  if (patientbirthdate_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthdate_ = new ::std::string;
  }
  patientbirthdate_->assign(value);
}
inline void ReferenceImage::set_patientbirthdate(const char* value) {
  set_has_patientbirthdate();
  if (patientbirthdate_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthdate_ = new ::std::string;
  }
  patientbirthdate_->assign(value);
}
inline void ReferenceImage::set_patientbirthdate(const char* value, size_t size) {
  set_has_patientbirthdate();
  if (patientbirthdate_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthdate_ = new ::std::string;
  }
  patientbirthdate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_patientbirthdate() {
  set_has_patientbirthdate();
  if (patientbirthdate_ == &::google::protobuf::internal::kEmptyString) {
    patientbirthdate_ = new ::std::string;
  }
  return patientbirthdate_;
}
inline ::std::string* ReferenceImage::release_patientbirthdate() {
  clear_has_patientbirthdate();
  if (patientbirthdate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientbirthdate_;
    patientbirthdate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 patientSex = 34;
inline bool ReferenceImage::has_patientsex() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void ReferenceImage::set_has_patientsex() {
  _has_bits_[1] |= 0x00000001u;
}
inline void ReferenceImage::clear_has_patientsex() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void ReferenceImage::clear_patientsex() {
  patientsex_ = 0;
  clear_has_patientsex();
}
inline ::google::protobuf::int32 ReferenceImage::patientsex() const {
  return patientsex_;
}
inline void ReferenceImage::set_patientsex(::google::protobuf::int32 value) {
  set_has_patientsex();
  patientsex_ = value;
}

// optional int32 sad = 35;
inline bool ReferenceImage::has_sad() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void ReferenceImage::set_has_sad() {
  _has_bits_[1] |= 0x00000002u;
}
inline void ReferenceImage::clear_has_sad() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void ReferenceImage::clear_sad() {
  sad_ = 0;
  clear_has_sad();
}
inline ::google::protobuf::int32 ReferenceImage::sad() const {
  return sad_;
}
inline void ReferenceImage::set_sad(::google::protobuf::int32 value) {
  set_has_sad();
  sad_ = value;
}

// optional int32 ssd = 36;
inline bool ReferenceImage::has_ssd() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void ReferenceImage::set_has_ssd() {
  _has_bits_[1] |= 0x00000004u;
}
inline void ReferenceImage::clear_has_ssd() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void ReferenceImage::clear_ssd() {
  ssd_ = 0;
  clear_has_ssd();
}
inline ::google::protobuf::int32 ReferenceImage::ssd() const {
  return ssd_;
}
inline void ReferenceImage::set_ssd(::google::protobuf::int32 value) {
  set_has_ssd();
  ssd_ = value;
}

// optional string dicomImageType = 37;
inline bool ReferenceImage::has_dicomimagetype() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void ReferenceImage::set_has_dicomimagetype() {
  _has_bits_[1] |= 0x00000008u;
}
inline void ReferenceImage::clear_has_dicomimagetype() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void ReferenceImage::clear_dicomimagetype() {
  if (dicomimagetype_ != &::google::protobuf::internal::kEmptyString) {
    dicomimagetype_->clear();
  }
  clear_has_dicomimagetype();
}
inline const ::std::string& ReferenceImage::dicomimagetype() const {
  return *dicomimagetype_;
}
inline void ReferenceImage::set_dicomimagetype(const ::std::string& value) {
  set_has_dicomimagetype();
  if (dicomimagetype_ == &::google::protobuf::internal::kEmptyString) {
    dicomimagetype_ = new ::std::string;
  }
  dicomimagetype_->assign(value);
}
inline void ReferenceImage::set_dicomimagetype(const char* value) {
  set_has_dicomimagetype();
  if (dicomimagetype_ == &::google::protobuf::internal::kEmptyString) {
    dicomimagetype_ = new ::std::string;
  }
  dicomimagetype_->assign(value);
}
inline void ReferenceImage::set_dicomimagetype(const char* value, size_t size) {
  set_has_dicomimagetype();
  if (dicomimagetype_ == &::google::protobuf::internal::kEmptyString) {
    dicomimagetype_ = new ::std::string;
  }
  dicomimagetype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_dicomimagetype() {
  set_has_dicomimagetype();
  if (dicomimagetype_ == &::google::protobuf::internal::kEmptyString) {
    dicomimagetype_ = new ::std::string;
  }
  return dicomimagetype_;
}
inline ::std::string* ReferenceImage::release_dicomimagetype() {
  clear_has_dicomimagetype();
  if (dicomimagetype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dicomimagetype_;
    dicomimagetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 patientPosition = 38;
inline bool ReferenceImage::has_patientposition() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void ReferenceImage::set_has_patientposition() {
  _has_bits_[1] |= 0x00000010u;
}
inline void ReferenceImage::clear_has_patientposition() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void ReferenceImage::clear_patientposition() {
  patientposition_ = 0;
  clear_has_patientposition();
}
inline ::google::protobuf::int32 ReferenceImage::patientposition() const {
  return patientposition_;
}
inline void ReferenceImage::set_patientposition(::google::protobuf::int32 value) {
  set_has_patientposition();
  patientposition_ = value;
}

// optional string imageAcquisitionDate = 39;
inline bool ReferenceImage::has_imageacquisitiondate() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void ReferenceImage::set_has_imageacquisitiondate() {
  _has_bits_[1] |= 0x00000020u;
}
inline void ReferenceImage::clear_has_imageacquisitiondate() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void ReferenceImage::clear_imageacquisitiondate() {
  if (imageacquisitiondate_ != &::google::protobuf::internal::kEmptyString) {
    imageacquisitiondate_->clear();
  }
  clear_has_imageacquisitiondate();
}
inline const ::std::string& ReferenceImage::imageacquisitiondate() const {
  return *imageacquisitiondate_;
}
inline void ReferenceImage::set_imageacquisitiondate(const ::std::string& value) {
  set_has_imageacquisitiondate();
  if (imageacquisitiondate_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiondate_ = new ::std::string;
  }
  imageacquisitiondate_->assign(value);
}
inline void ReferenceImage::set_imageacquisitiondate(const char* value) {
  set_has_imageacquisitiondate();
  if (imageacquisitiondate_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiondate_ = new ::std::string;
  }
  imageacquisitiondate_->assign(value);
}
inline void ReferenceImage::set_imageacquisitiondate(const char* value, size_t size) {
  set_has_imageacquisitiondate();
  if (imageacquisitiondate_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiondate_ = new ::std::string;
  }
  imageacquisitiondate_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imageacquisitiondate() {
  set_has_imageacquisitiondate();
  if (imageacquisitiondate_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiondate_ = new ::std::string;
  }
  return imageacquisitiondate_;
}
inline ::std::string* ReferenceImage::release_imageacquisitiondate() {
  clear_has_imageacquisitiondate();
  if (imageacquisitiondate_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageacquisitiondate_;
    imageacquisitiondate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string imageAcquisitionTime = 40;
inline bool ReferenceImage::has_imageacquisitiontime() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void ReferenceImage::set_has_imageacquisitiontime() {
  _has_bits_[1] |= 0x00000040u;
}
inline void ReferenceImage::clear_has_imageacquisitiontime() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void ReferenceImage::clear_imageacquisitiontime() {
  if (imageacquisitiontime_ != &::google::protobuf::internal::kEmptyString) {
    imageacquisitiontime_->clear();
  }
  clear_has_imageacquisitiontime();
}
inline const ::std::string& ReferenceImage::imageacquisitiontime() const {
  return *imageacquisitiontime_;
}
inline void ReferenceImage::set_imageacquisitiontime(const ::std::string& value) {
  set_has_imageacquisitiontime();
  if (imageacquisitiontime_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiontime_ = new ::std::string;
  }
  imageacquisitiontime_->assign(value);
}
inline void ReferenceImage::set_imageacquisitiontime(const char* value) {
  set_has_imageacquisitiontime();
  if (imageacquisitiontime_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiontime_ = new ::std::string;
  }
  imageacquisitiontime_->assign(value);
}
inline void ReferenceImage::set_imageacquisitiontime(const char* value, size_t size) {
  set_has_imageacquisitiontime();
  if (imageacquisitiontime_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiontime_ = new ::std::string;
  }
  imageacquisitiontime_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImage::mutable_imageacquisitiontime() {
  set_has_imageacquisitiontime();
  if (imageacquisitiontime_ == &::google::protobuf::internal::kEmptyString) {
    imageacquisitiontime_ = new ::std::string;
  }
  return imageacquisitiontime_;
}
inline ::std::string* ReferenceImage::release_imageacquisitiontime() {
  clear_has_imageacquisitiontime();
  if (imageacquisitiontime_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = imageacquisitiontime_;
    imageacquisitiontime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ReferenceImageList

// repeated .tps.proto.ReferenceImage imageList = 1;
inline int ReferenceImageList::imagelist_size() const {
  return imagelist_.size();
}
inline void ReferenceImageList::clear_imagelist() {
  imagelist_.Clear();
}
inline const ::tps::proto::ReferenceImage& ReferenceImageList::imagelist(int index) const {
  return imagelist_.Get(index);
}
inline ::tps::proto::ReferenceImage* ReferenceImageList::mutable_imagelist(int index) {
  return imagelist_.Mutable(index);
}
inline ::tps::proto::ReferenceImage* ReferenceImageList::add_imagelist() {
  return imagelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::ReferenceImage >&
ReferenceImageList::imagelist() const {
  return imagelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::ReferenceImage >*
ReferenceImageList::mutable_imagelist() {
  return &imagelist_;
}

// optional string patientUID = 2;
inline bool ReferenceImageList::has_patientuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReferenceImageList::set_has_patientuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReferenceImageList::clear_has_patientuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReferenceImageList::clear_patientuid() {
  if (patientuid_ != &::google::protobuf::internal::kEmptyString) {
    patientuid_->clear();
  }
  clear_has_patientuid();
}
inline const ::std::string& ReferenceImageList::patientuid() const {
  return *patientuid_;
}
inline void ReferenceImageList::set_patientuid(const ::std::string& value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void ReferenceImageList::set_patientuid(const char* value) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(value);
}
inline void ReferenceImageList::set_patientuid(const char* value, size_t size) {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  patientuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReferenceImageList::mutable_patientuid() {
  set_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    patientuid_ = new ::std::string;
  }
  return patientuid_;
}
inline ::std::string* ReferenceImageList::release_patientuid() {
  clear_has_patientuid();
  if (patientuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = patientuid_;
    patientuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::tps::proto::ReferenceImage_IMAGE_TYPE>() {
  return ::tps::proto::ReferenceImage_IMAGE_TYPE_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5freferenceimage_2eproto__INCLUDED
