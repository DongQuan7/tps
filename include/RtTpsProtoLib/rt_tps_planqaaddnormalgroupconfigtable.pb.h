// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_planqaaddnormalgroupconfigtable.proto

#ifndef PROTOBUF_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();

class RtTpsProtoPlanQAAddNormalGroupConfigTable;

// ===================================================================

class RtTpsProtoPlanQAAddNormalGroupConfigTable : public ::google::protobuf::Message {
 public:
  RtTpsProtoPlanQAAddNormalGroupConfigTable();
  virtual ~RtTpsProtoPlanQAAddNormalGroupConfigTable();
  
  RtTpsProtoPlanQAAddNormalGroupConfigTable(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from);
  
  inline RtTpsProtoPlanQAAddNormalGroupConfigTable& operator=(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoPlanQAAddNormalGroupConfigTable& default_instance();
  
  void Swap(RtTpsProtoPlanQAAddNormalGroupConfigTable* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoPlanQAAddNormalGroupConfigTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from);
  void MergeFrom(const RtTpsProtoPlanQAAddNormalGroupConfigTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string treatmentPlanNormalGroupUID = 1;
  inline bool has_treatmentplannormalgroupuid() const;
  inline void clear_treatmentplannormalgroupuid();
  static const int kTreatmentPlanNormalGroupUIDFieldNumber = 1;
  inline const ::std::string& treatmentplannormalgroupuid() const;
  inline void set_treatmentplannormalgroupuid(const ::std::string& value);
  inline void set_treatmentplannormalgroupuid(const char* value);
  inline void set_treatmentplannormalgroupuid(const char* value, size_t size);
  inline ::std::string* mutable_treatmentplannormalgroupuid();
  inline ::std::string* release_treatmentplannormalgroupuid();
  
  // required bool isBeamGantryFromTreatment = 2;
  inline bool has_isbeamgantryfromtreatment() const;
  inline void clear_isbeamgantryfromtreatment();
  static const int kIsBeamGantryFromTreatmentFieldNumber = 2;
  inline bool isbeamgantryfromtreatment() const;
  inline void set_isbeamgantryfromtreatment(bool value);
  
  // required bool isBeamTableFromTreatment = 3;
  inline bool has_isbeamtablefromtreatment() const;
  inline void clear_isbeamtablefromtreatment();
  static const int kIsBeamTableFromTreatmentFieldNumber = 3;
  inline bool isbeamtablefromtreatment() const;
  inline void set_isbeamtablefromtreatment(bool value);
  
  // required bool isBeamCollimatorFromTreatment = 4;
  inline bool has_isbeamcollimatorfromtreatment() const;
  inline void clear_isbeamcollimatorfromtreatment();
  static const int kIsBeamCollimatorFromTreatmentFieldNumber = 4;
  inline bool isbeamcollimatorfromtreatment() const;
  inline void set_isbeamcollimatorfromtreatment(bool value);
  
  // optional float gantryStartAngle = 5;
  inline bool has_gantrystartangle() const;
  inline void clear_gantrystartangle();
  static const int kGantryStartAngleFieldNumber = 5;
  inline float gantrystartangle() const;
  inline void set_gantrystartangle(float value);
  
  // optional float collimatorAngle = 6;
  inline bool has_collimatorangle() const;
  inline void clear_collimatorangle();
  static const int kCollimatorAngleFieldNumber = 6;
  inline float collimatorangle() const;
  inline void set_collimatorangle(float value);
  
  // optional float couchAngle = 7;
  inline bool has_couchangle() const;
  inline void clear_couchangle();
  static const int kCouchAngleFieldNumber = 7;
  inline float couchangle() const;
  inline void set_couchangle(float value);
  
  // required int32 IsoCenterType = 8;
  inline bool has_isocentertype() const;
  inline void clear_isocentertype();
  static const int kIsoCenterTypeFieldNumber = 8;
  inline ::google::protobuf::int32 isocentertype() const;
  inline void set_isocentertype(::google::protobuf::int32 value);
  
  // optional string IsocenterPOIUID = 9;
  inline bool has_isocenterpoiuid() const;
  inline void clear_isocenterpoiuid();
  static const int kIsocenterPOIUIDFieldNumber = 9;
  inline const ::std::string& isocenterpoiuid() const;
  inline void set_isocenterpoiuid(const ::std::string& value);
  inline void set_isocenterpoiuid(const char* value);
  inline void set_isocenterpoiuid(const char* value, size_t size);
  inline ::std::string* mutable_isocenterpoiuid();
  inline ::std::string* release_isocenterpoiuid();
  
  // optional string IsocenterVOIUID = 10;
  inline bool has_isocentervoiuid() const;
  inline void clear_isocentervoiuid();
  static const int kIsocenterVOIUIDFieldNumber = 10;
  inline const ::std::string& isocentervoiuid() const;
  inline void set_isocentervoiuid(const ::std::string& value);
  inline void set_isocentervoiuid(const char* value);
  inline void set_isocentervoiuid(const char* value, size_t size);
  inline ::std::string* mutable_isocentervoiuid();
  inline ::std::string* release_isocentervoiuid();
  
  // required bool isGoalFromTreatment = 11;
  inline bool has_isgoalfromtreatment() const;
  inline void clear_isgoalfromtreatment();
  static const int kIsGoalFromTreatmentFieldNumber = 11;
  inline bool isgoalfromtreatment() const;
  inline void set_isgoalfromtreatment(bool value);
  
  // optional double dosePerFraction = 12;
  inline bool has_doseperfraction() const;
  inline void clear_doseperfraction();
  static const int kDosePerFractionFieldNumber = 12;
  inline double doseperfraction() const;
  inline void set_doseperfraction(double value);
  
  // optional int32 fractionCount = 13;
  inline bool has_fractioncount() const;
  inline void clear_fractioncount();
  static const int kFractionCountFieldNumber = 13;
  inline ::google::protobuf::int32 fractioncount() const;
  inline void set_fractioncount(::google::protobuf::int32 value);
  
  // optional double totalDose = 14;
  inline bool has_totaldose() const;
  inline void clear_totaldose();
  static const int kTotalDoseFieldNumber = 14;
  inline double totaldose() const;
  inline void set_totaldose(double value);
  
  // optional double doseLinePercentage = 15;
  inline bool has_doselinepercentage() const;
  inline void clear_doselinepercentage();
  static const int kDoseLinePercentageFieldNumber = 15;
  inline double doselinepercentage() const;
  inline void set_doselinepercentage(double value);
  
  // required int32 goalTargetType = 16;
  inline bool has_goaltargettype() const;
  inline void clear_goaltargettype();
  static const int kGoalTargetTypeFieldNumber = 16;
  inline ::google::protobuf::int32 goaltargettype() const;
  inline void set_goaltargettype(::google::protobuf::int32 value);
  
  // optional string targetVOIUID = 17;
  inline bool has_targetvoiuid() const;
  inline void clear_targetvoiuid();
  static const int kTargetVOIUIDFieldNumber = 17;
  inline const ::std::string& targetvoiuid() const;
  inline void set_targetvoiuid(const ::std::string& value);
  inline void set_targetvoiuid(const char* value);
  inline void set_targetvoiuid(const char* value, size_t size);
  inline ::std::string* mutable_targetvoiuid();
  inline ::std::string* release_targetvoiuid();
  
  // optional int32 voiDoseType = 18;
  inline bool has_voidosetype() const;
  inline void clear_voidosetype();
  static const int kVoiDoseTypeFieldNumber = 18;
  inline ::google::protobuf::int32 voidosetype() const;
  inline void set_voidosetype(::google::protobuf::int32 value);
  
  // optional double doseAtVolumePercentage = 19;
  inline bool has_doseatvolumepercentage() const;
  inline void clear_doseatvolumepercentage();
  static const int kDoseAtVolumePercentageFieldNumber = 19;
  inline double doseatvolumepercentage() const;
  inline void set_doseatvolumepercentage(double value);
  
  // optional string targetPOIUID = 20;
  inline bool has_targetpoiuid() const;
  inline void clear_targetpoiuid();
  static const int kTargetPOIUIDFieldNumber = 20;
  inline const ::std::string& targetpoiuid() const;
  inline void set_targetpoiuid(const ::std::string& value);
  inline void set_targetpoiuid(const char* value);
  inline void set_targetpoiuid(const char* value, size_t size);
  inline ::std::string* mutable_targetpoiuid();
  inline ::std::string* release_targetpoiuid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoPlanQAAddNormalGroupConfigTable)
 private:
  inline void set_has_treatmentplannormalgroupuid();
  inline void clear_has_treatmentplannormalgroupuid();
  inline void set_has_isbeamgantryfromtreatment();
  inline void clear_has_isbeamgantryfromtreatment();
  inline void set_has_isbeamtablefromtreatment();
  inline void clear_has_isbeamtablefromtreatment();
  inline void set_has_isbeamcollimatorfromtreatment();
  inline void clear_has_isbeamcollimatorfromtreatment();
  inline void set_has_gantrystartangle();
  inline void clear_has_gantrystartangle();
  inline void set_has_collimatorangle();
  inline void clear_has_collimatorangle();
  inline void set_has_couchangle();
  inline void clear_has_couchangle();
  inline void set_has_isocentertype();
  inline void clear_has_isocentertype();
  inline void set_has_isocenterpoiuid();
  inline void clear_has_isocenterpoiuid();
  inline void set_has_isocentervoiuid();
  inline void clear_has_isocentervoiuid();
  inline void set_has_isgoalfromtreatment();
  inline void clear_has_isgoalfromtreatment();
  inline void set_has_doseperfraction();
  inline void clear_has_doseperfraction();
  inline void set_has_fractioncount();
  inline void clear_has_fractioncount();
  inline void set_has_totaldose();
  inline void clear_has_totaldose();
  inline void set_has_doselinepercentage();
  inline void clear_has_doselinepercentage();
  inline void set_has_goaltargettype();
  inline void clear_has_goaltargettype();
  inline void set_has_targetvoiuid();
  inline void clear_has_targetvoiuid();
  inline void set_has_voidosetype();
  inline void clear_has_voidosetype();
  inline void set_has_doseatvolumepercentage();
  inline void clear_has_doseatvolumepercentage();
  inline void set_has_targetpoiuid();
  inline void clear_has_targetpoiuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* treatmentplannormalgroupuid_;
  float gantrystartangle_;
  bool isbeamgantryfromtreatment_;
  bool isbeamtablefromtreatment_;
  bool isbeamcollimatorfromtreatment_;
  bool isgoalfromtreatment_;
  float collimatorangle_;
  float couchangle_;
  ::std::string* isocenterpoiuid_;
  ::std::string* isocentervoiuid_;
  ::google::protobuf::int32 isocentertype_;
  ::google::protobuf::int32 fractioncount_;
  double doseperfraction_;
  double totaldose_;
  double doselinepercentage_;
  ::std::string* targetvoiuid_;
  ::google::protobuf::int32 goaltargettype_;
  ::google::protobuf::int32 voidosetype_;
  double doseatvolumepercentage_;
  ::std::string* targetpoiuid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoPlanQAAddNormalGroupConfigTable* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoPlanQAAddNormalGroupConfigTable

// required string treatmentPlanNormalGroupUID = 1;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_treatmentplannormalgroupuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_treatmentplannormalgroupuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_treatmentplannormalgroupuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_treatmentplannormalgroupuid() {
  if (treatmentplannormalgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    treatmentplannormalgroupuid_->clear();
  }
  clear_has_treatmentplannormalgroupuid();
}
inline const ::std::string& RtTpsProtoPlanQAAddNormalGroupConfigTable::treatmentplannormalgroupuid() const {
  return *treatmentplannormalgroupuid_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_treatmentplannormalgroupuid(const ::std::string& value) {
  set_has_treatmentplannormalgroupuid();
  if (treatmentplannormalgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    treatmentplannormalgroupuid_ = new ::std::string;
  }
  treatmentplannormalgroupuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_treatmentplannormalgroupuid(const char* value) {
  set_has_treatmentplannormalgroupuid();
  if (treatmentplannormalgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    treatmentplannormalgroupuid_ = new ::std::string;
  }
  treatmentplannormalgroupuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_treatmentplannormalgroupuid(const char* value, size_t size) {
  set_has_treatmentplannormalgroupuid();
  if (treatmentplannormalgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    treatmentplannormalgroupuid_ = new ::std::string;
  }
  treatmentplannormalgroupuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::mutable_treatmentplannormalgroupuid() {
  set_has_treatmentplannormalgroupuid();
  if (treatmentplannormalgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    treatmentplannormalgroupuid_ = new ::std::string;
  }
  return treatmentplannormalgroupuid_;
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::release_treatmentplannormalgroupuid() {
  clear_has_treatmentplannormalgroupuid();
  if (treatmentplannormalgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = treatmentplannormalgroupuid_;
    treatmentplannormalgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isBeamGantryFromTreatment = 2;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isbeamgantryfromtreatment() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isbeamgantryfromtreatment() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isbeamgantryfromtreatment() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isbeamgantryfromtreatment() {
  isbeamgantryfromtreatment_ = false;
  clear_has_isbeamgantryfromtreatment();
}
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::isbeamgantryfromtreatment() const {
  return isbeamgantryfromtreatment_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isbeamgantryfromtreatment(bool value) {
  set_has_isbeamgantryfromtreatment();
  isbeamgantryfromtreatment_ = value;
}

// required bool isBeamTableFromTreatment = 3;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isbeamtablefromtreatment() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isbeamtablefromtreatment() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isbeamtablefromtreatment() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isbeamtablefromtreatment() {
  isbeamtablefromtreatment_ = false;
  clear_has_isbeamtablefromtreatment();
}
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::isbeamtablefromtreatment() const {
  return isbeamtablefromtreatment_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isbeamtablefromtreatment(bool value) {
  set_has_isbeamtablefromtreatment();
  isbeamtablefromtreatment_ = value;
}

// required bool isBeamCollimatorFromTreatment = 4;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isbeamcollimatorfromtreatment() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isbeamcollimatorfromtreatment() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isbeamcollimatorfromtreatment() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isbeamcollimatorfromtreatment() {
  isbeamcollimatorfromtreatment_ = false;
  clear_has_isbeamcollimatorfromtreatment();
}
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::isbeamcollimatorfromtreatment() const {
  return isbeamcollimatorfromtreatment_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isbeamcollimatorfromtreatment(bool value) {
  set_has_isbeamcollimatorfromtreatment();
  isbeamcollimatorfromtreatment_ = value;
}

// optional float gantryStartAngle = 5;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_gantrystartangle() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_gantrystartangle() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_gantrystartangle() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_gantrystartangle() {
  gantrystartangle_ = 0;
  clear_has_gantrystartangle();
}
inline float RtTpsProtoPlanQAAddNormalGroupConfigTable::gantrystartangle() const {
  return gantrystartangle_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_gantrystartangle(float value) {
  set_has_gantrystartangle();
  gantrystartangle_ = value;
}

// optional float collimatorAngle = 6;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_collimatorangle() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_collimatorangle() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_collimatorangle() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_collimatorangle() {
  collimatorangle_ = 0;
  clear_has_collimatorangle();
}
inline float RtTpsProtoPlanQAAddNormalGroupConfigTable::collimatorangle() const {
  return collimatorangle_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_collimatorangle(float value) {
  set_has_collimatorangle();
  collimatorangle_ = value;
}

// optional float couchAngle = 7;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_couchangle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_couchangle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_couchangle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_couchangle() {
  couchangle_ = 0;
  clear_has_couchangle();
}
inline float RtTpsProtoPlanQAAddNormalGroupConfigTable::couchangle() const {
  return couchangle_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_couchangle(float value) {
  set_has_couchangle();
  couchangle_ = value;
}

// required int32 IsoCenterType = 8;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isocentertype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isocentertype() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isocentertype() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isocentertype() {
  isocentertype_ = 0;
  clear_has_isocentertype();
}
inline ::google::protobuf::int32 RtTpsProtoPlanQAAddNormalGroupConfigTable::isocentertype() const {
  return isocentertype_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocentertype(::google::protobuf::int32 value) {
  set_has_isocentertype();
  isocentertype_ = value;
}

// optional string IsocenterPOIUID = 9;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isocenterpoiuid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isocenterpoiuid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isocenterpoiuid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isocenterpoiuid() {
  if (isocenterpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    isocenterpoiuid_->clear();
  }
  clear_has_isocenterpoiuid();
}
inline const ::std::string& RtTpsProtoPlanQAAddNormalGroupConfigTable::isocenterpoiuid() const {
  return *isocenterpoiuid_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocenterpoiuid(const ::std::string& value) {
  set_has_isocenterpoiuid();
  if (isocenterpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocenterpoiuid_ = new ::std::string;
  }
  isocenterpoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocenterpoiuid(const char* value) {
  set_has_isocenterpoiuid();
  if (isocenterpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocenterpoiuid_ = new ::std::string;
  }
  isocenterpoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocenterpoiuid(const char* value, size_t size) {
  set_has_isocenterpoiuid();
  if (isocenterpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocenterpoiuid_ = new ::std::string;
  }
  isocenterpoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::mutable_isocenterpoiuid() {
  set_has_isocenterpoiuid();
  if (isocenterpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocenterpoiuid_ = new ::std::string;
  }
  return isocenterpoiuid_;
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::release_isocenterpoiuid() {
  clear_has_isocenterpoiuid();
  if (isocenterpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isocenterpoiuid_;
    isocenterpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string IsocenterVOIUID = 10;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isocentervoiuid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isocentervoiuid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isocentervoiuid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isocentervoiuid() {
  if (isocentervoiuid_ != &::google::protobuf::internal::kEmptyString) {
    isocentervoiuid_->clear();
  }
  clear_has_isocentervoiuid();
}
inline const ::std::string& RtTpsProtoPlanQAAddNormalGroupConfigTable::isocentervoiuid() const {
  return *isocentervoiuid_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocentervoiuid(const ::std::string& value) {
  set_has_isocentervoiuid();
  if (isocentervoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocentervoiuid_ = new ::std::string;
  }
  isocentervoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocentervoiuid(const char* value) {
  set_has_isocentervoiuid();
  if (isocentervoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocentervoiuid_ = new ::std::string;
  }
  isocentervoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isocentervoiuid(const char* value, size_t size) {
  set_has_isocentervoiuid();
  if (isocentervoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocentervoiuid_ = new ::std::string;
  }
  isocentervoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::mutable_isocentervoiuid() {
  set_has_isocentervoiuid();
  if (isocentervoiuid_ == &::google::protobuf::internal::kEmptyString) {
    isocentervoiuid_ = new ::std::string;
  }
  return isocentervoiuid_;
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::release_isocentervoiuid() {
  clear_has_isocentervoiuid();
  if (isocentervoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isocentervoiuid_;
    isocentervoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bool isGoalFromTreatment = 11;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_isgoalfromtreatment() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_isgoalfromtreatment() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_isgoalfromtreatment() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_isgoalfromtreatment() {
  isgoalfromtreatment_ = false;
  clear_has_isgoalfromtreatment();
}
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::isgoalfromtreatment() const {
  return isgoalfromtreatment_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_isgoalfromtreatment(bool value) {
  set_has_isgoalfromtreatment();
  isgoalfromtreatment_ = value;
}

// optional double dosePerFraction = 12;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_doseperfraction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_doseperfraction() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_doseperfraction() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_doseperfraction() {
  doseperfraction_ = 0;
  clear_has_doseperfraction();
}
inline double RtTpsProtoPlanQAAddNormalGroupConfigTable::doseperfraction() const {
  return doseperfraction_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_doseperfraction(double value) {
  set_has_doseperfraction();
  doseperfraction_ = value;
}

// optional int32 fractionCount = 13;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_fractioncount() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_fractioncount() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_fractioncount() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_fractioncount() {
  fractioncount_ = 0;
  clear_has_fractioncount();
}
inline ::google::protobuf::int32 RtTpsProtoPlanQAAddNormalGroupConfigTable::fractioncount() const {
  return fractioncount_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_fractioncount(::google::protobuf::int32 value) {
  set_has_fractioncount();
  fractioncount_ = value;
}

// optional double totalDose = 14;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_totaldose() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_totaldose() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_totaldose() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_totaldose() {
  totaldose_ = 0;
  clear_has_totaldose();
}
inline double RtTpsProtoPlanQAAddNormalGroupConfigTable::totaldose() const {
  return totaldose_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_totaldose(double value) {
  set_has_totaldose();
  totaldose_ = value;
}

// optional double doseLinePercentage = 15;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_doselinepercentage() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_doselinepercentage() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_doselinepercentage() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_doselinepercentage() {
  doselinepercentage_ = 0;
  clear_has_doselinepercentage();
}
inline double RtTpsProtoPlanQAAddNormalGroupConfigTable::doselinepercentage() const {
  return doselinepercentage_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_doselinepercentage(double value) {
  set_has_doselinepercentage();
  doselinepercentage_ = value;
}

// required int32 goalTargetType = 16;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_goaltargettype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_goaltargettype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_goaltargettype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_goaltargettype() {
  goaltargettype_ = 0;
  clear_has_goaltargettype();
}
inline ::google::protobuf::int32 RtTpsProtoPlanQAAddNormalGroupConfigTable::goaltargettype() const {
  return goaltargettype_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_goaltargettype(::google::protobuf::int32 value) {
  set_has_goaltargettype();
  goaltargettype_ = value;
}

// optional string targetVOIUID = 17;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_targetvoiuid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_targetvoiuid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_targetvoiuid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_targetvoiuid() {
  if (targetvoiuid_ != &::google::protobuf::internal::kEmptyString) {
    targetvoiuid_->clear();
  }
  clear_has_targetvoiuid();
}
inline const ::std::string& RtTpsProtoPlanQAAddNormalGroupConfigTable::targetvoiuid() const {
  return *targetvoiuid_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetvoiuid(const ::std::string& value) {
  set_has_targetvoiuid();
  if (targetvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetvoiuid_ = new ::std::string;
  }
  targetvoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetvoiuid(const char* value) {
  set_has_targetvoiuid();
  if (targetvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetvoiuid_ = new ::std::string;
  }
  targetvoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetvoiuid(const char* value, size_t size) {
  set_has_targetvoiuid();
  if (targetvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetvoiuid_ = new ::std::string;
  }
  targetvoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::mutable_targetvoiuid() {
  set_has_targetvoiuid();
  if (targetvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetvoiuid_ = new ::std::string;
  }
  return targetvoiuid_;
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::release_targetvoiuid() {
  clear_has_targetvoiuid();
  if (targetvoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetvoiuid_;
    targetvoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 voiDoseType = 18;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_voidosetype() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_voidosetype() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_voidosetype() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_voidosetype() {
  voidosetype_ = 0;
  clear_has_voidosetype();
}
inline ::google::protobuf::int32 RtTpsProtoPlanQAAddNormalGroupConfigTable::voidosetype() const {
  return voidosetype_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_voidosetype(::google::protobuf::int32 value) {
  set_has_voidosetype();
  voidosetype_ = value;
}

// optional double doseAtVolumePercentage = 19;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_doseatvolumepercentage() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_doseatvolumepercentage() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_doseatvolumepercentage() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_doseatvolumepercentage() {
  doseatvolumepercentage_ = 0;
  clear_has_doseatvolumepercentage();
}
inline double RtTpsProtoPlanQAAddNormalGroupConfigTable::doseatvolumepercentage() const {
  return doseatvolumepercentage_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_doseatvolumepercentage(double value) {
  set_has_doseatvolumepercentage();
  doseatvolumepercentage_ = value;
}

// optional string targetPOIUID = 20;
inline bool RtTpsProtoPlanQAAddNormalGroupConfigTable::has_targetpoiuid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_has_targetpoiuid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_has_targetpoiuid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::clear_targetpoiuid() {
  if (targetpoiuid_ != &::google::protobuf::internal::kEmptyString) {
    targetpoiuid_->clear();
  }
  clear_has_targetpoiuid();
}
inline const ::std::string& RtTpsProtoPlanQAAddNormalGroupConfigTable::targetpoiuid() const {
  return *targetpoiuid_;
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetpoiuid(const ::std::string& value) {
  set_has_targetpoiuid();
  if (targetpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetpoiuid_ = new ::std::string;
  }
  targetpoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetpoiuid(const char* value) {
  set_has_targetpoiuid();
  if (targetpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetpoiuid_ = new ::std::string;
  }
  targetpoiuid_->assign(value);
}
inline void RtTpsProtoPlanQAAddNormalGroupConfigTable::set_targetpoiuid(const char* value, size_t size) {
  set_has_targetpoiuid();
  if (targetpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetpoiuid_ = new ::std::string;
  }
  targetpoiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::mutable_targetpoiuid() {
  set_has_targetpoiuid();
  if (targetpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    targetpoiuid_ = new ::std::string;
  }
  return targetpoiuid_;
}
inline ::std::string* RtTpsProtoPlanQAAddNormalGroupConfigTable::release_targetpoiuid() {
  clear_has_targetpoiuid();
  if (targetpoiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = targetpoiuid_;
    targetpoiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fplanqaaddnormalgroupconfigtable_2eproto__INCLUDED
