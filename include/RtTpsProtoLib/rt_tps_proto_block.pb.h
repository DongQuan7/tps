// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_block.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fblock_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fblock_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fblock_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fblock_2eproto();

class BlockPoint;
class RtTpsProtoBlock;

// ===================================================================

class BlockPoint : public ::google::protobuf::Message {
 public:
  BlockPoint();
  virtual ~BlockPoint();
  
  BlockPoint(const BlockPoint& from);
  
  inline BlockPoint& operator=(const BlockPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockPoint& default_instance();
  
  void Swap(BlockPoint* other);
  
  // implements Message ----------------------------------------------
  
  BlockPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockPoint& from);
  void MergeFrom(const BlockPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.BlockPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fblock_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fblock_2eproto();
  
  void InitAsDefaultInstance();
  static BlockPoint* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoBlock : public ::google::protobuf::Message {
 public:
  RtTpsProtoBlock();
  virtual ~RtTpsProtoBlock();
  
  RtTpsProtoBlock(const RtTpsProtoBlock& from);
  
  inline RtTpsProtoBlock& operator=(const RtTpsProtoBlock& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoBlock& default_instance();
  
  void Swap(RtTpsProtoBlock* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoBlock& from);
  void MergeFrom(const RtTpsProtoBlock& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string block_uid = 1;
  inline bool has_block_uid() const;
  inline void clear_block_uid();
  static const int kBlockUidFieldNumber = 1;
  inline const ::std::string& block_uid() const;
  inline void set_block_uid(const ::std::string& value);
  inline void set_block_uid(const char* value);
  inline void set_block_uid(const char* value, size_t size);
  inline ::std::string* mutable_block_uid();
  inline ::std::string* release_block_uid();
  
  // optional string block_name = 2;
  inline bool has_block_name() const;
  inline void clear_block_name();
  static const int kBlockNameFieldNumber = 2;
  inline const ::std::string& block_name() const;
  inline void set_block_name(const ::std::string& value);
  inline void set_block_name(const char* value);
  inline void set_block_name(const char* value, size_t size);
  inline ::std::string* mutable_block_name();
  inline ::std::string* release_block_name();
  
  // optional int32 block_type = 3;
  inline bool has_block_type() const;
  inline void clear_block_type();
  static const int kBlockTypeFieldNumber = 3;
  inline ::google::protobuf::int32 block_type() const;
  inline void set_block_type(::google::protobuf::int32 value);
  
  // optional int32 material = 4;
  inline bool has_material() const;
  inline void clear_material();
  static const int kMaterialFieldNumber = 4;
  inline ::google::protobuf::int32 material() const;
  inline void set_material(::google::protobuf::int32 value);
  
  // optional double thickness = 5;
  inline bool has_thickness() const;
  inline void clear_thickness();
  static const int kThicknessFieldNumber = 5;
  inline double thickness() const;
  inline void set_thickness(double value);
  
  // repeated .tps.proto.BlockPoint block_data = 6;
  inline int block_data_size() const;
  inline void clear_block_data();
  static const int kBlockDataFieldNumber = 6;
  inline const ::tps::proto::BlockPoint& block_data(int index) const;
  inline ::tps::proto::BlockPoint* mutable_block_data(int index);
  inline ::tps::proto::BlockPoint* add_block_data();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::BlockPoint >&
      block_data() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::BlockPoint >*
      mutable_block_data();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoBlock)
 private:
  inline void set_has_block_uid();
  inline void clear_has_block_uid();
  inline void set_has_block_name();
  inline void clear_has_block_name();
  inline void set_has_block_type();
  inline void clear_has_block_type();
  inline void set_has_material();
  inline void clear_has_material();
  inline void set_has_thickness();
  inline void clear_has_thickness();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* block_uid_;
  ::std::string* block_name_;
  ::google::protobuf::int32 block_type_;
  ::google::protobuf::int32 material_;
  double thickness_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::BlockPoint > block_data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fblock_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fblock_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fblock_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoBlock* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockPoint

// required double x = 1;
inline bool BlockPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BlockPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BlockPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BlockPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double BlockPoint::x() const {
  return x_;
}
inline void BlockPoint::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool BlockPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BlockPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BlockPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BlockPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double BlockPoint::y() const {
  return y_;
}
inline void BlockPoint::set_y(double value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoBlock

// optional string block_uid = 1;
inline bool RtTpsProtoBlock::has_block_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoBlock::set_has_block_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoBlock::clear_has_block_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoBlock::clear_block_uid() {
  if (block_uid_ != &::google::protobuf::internal::kEmptyString) {
    block_uid_->clear();
  }
  clear_has_block_uid();
}
inline const ::std::string& RtTpsProtoBlock::block_uid() const {
  return *block_uid_;
}
inline void RtTpsProtoBlock::set_block_uid(const ::std::string& value) {
  set_has_block_uid();
  if (block_uid_ == &::google::protobuf::internal::kEmptyString) {
    block_uid_ = new ::std::string;
  }
  block_uid_->assign(value);
}
inline void RtTpsProtoBlock::set_block_uid(const char* value) {
  set_has_block_uid();
  if (block_uid_ == &::google::protobuf::internal::kEmptyString) {
    block_uid_ = new ::std::string;
  }
  block_uid_->assign(value);
}
inline void RtTpsProtoBlock::set_block_uid(const char* value, size_t size) {
  set_has_block_uid();
  if (block_uid_ == &::google::protobuf::internal::kEmptyString) {
    block_uid_ = new ::std::string;
  }
  block_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBlock::mutable_block_uid() {
  set_has_block_uid();
  if (block_uid_ == &::google::protobuf::internal::kEmptyString) {
    block_uid_ = new ::std::string;
  }
  return block_uid_;
}
inline ::std::string* RtTpsProtoBlock::release_block_uid() {
  clear_has_block_uid();
  if (block_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_uid_;
    block_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string block_name = 2;
inline bool RtTpsProtoBlock::has_block_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoBlock::set_has_block_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoBlock::clear_has_block_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoBlock::clear_block_name() {
  if (block_name_ != &::google::protobuf::internal::kEmptyString) {
    block_name_->clear();
  }
  clear_has_block_name();
}
inline const ::std::string& RtTpsProtoBlock::block_name() const {
  return *block_name_;
}
inline void RtTpsProtoBlock::set_block_name(const ::std::string& value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void RtTpsProtoBlock::set_block_name(const char* value) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(value);
}
inline void RtTpsProtoBlock::set_block_name(const char* value, size_t size) {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  block_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBlock::mutable_block_name() {
  set_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    block_name_ = new ::std::string;
  }
  return block_name_;
}
inline ::std::string* RtTpsProtoBlock::release_block_name() {
  clear_has_block_name();
  if (block_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = block_name_;
    block_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 block_type = 3;
inline bool RtTpsProtoBlock::has_block_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoBlock::set_has_block_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoBlock::clear_has_block_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoBlock::clear_block_type() {
  block_type_ = 0;
  clear_has_block_type();
}
inline ::google::protobuf::int32 RtTpsProtoBlock::block_type() const {
  return block_type_;
}
inline void RtTpsProtoBlock::set_block_type(::google::protobuf::int32 value) {
  set_has_block_type();
  block_type_ = value;
}

// optional int32 material = 4;
inline bool RtTpsProtoBlock::has_material() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoBlock::set_has_material() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoBlock::clear_has_material() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoBlock::clear_material() {
  material_ = 0;
  clear_has_material();
}
inline ::google::protobuf::int32 RtTpsProtoBlock::material() const {
  return material_;
}
inline void RtTpsProtoBlock::set_material(::google::protobuf::int32 value) {
  set_has_material();
  material_ = value;
}

// optional double thickness = 5;
inline bool RtTpsProtoBlock::has_thickness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoBlock::set_has_thickness() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoBlock::clear_has_thickness() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoBlock::clear_thickness() {
  thickness_ = 0;
  clear_has_thickness();
}
inline double RtTpsProtoBlock::thickness() const {
  return thickness_;
}
inline void RtTpsProtoBlock::set_thickness(double value) {
  set_has_thickness();
  thickness_ = value;
}

// repeated .tps.proto.BlockPoint block_data = 6;
inline int RtTpsProtoBlock::block_data_size() const {
  return block_data_.size();
}
inline void RtTpsProtoBlock::clear_block_data() {
  block_data_.Clear();
}
inline const ::tps::proto::BlockPoint& RtTpsProtoBlock::block_data(int index) const {
  return block_data_.Get(index);
}
inline ::tps::proto::BlockPoint* RtTpsProtoBlock::mutable_block_data(int index) {
  return block_data_.Mutable(index);
}
inline ::tps::proto::BlockPoint* RtTpsProtoBlock::add_block_data() {
  return block_data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::BlockPoint >&
RtTpsProtoBlock::block_data() const {
  return block_data_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::BlockPoint >*
RtTpsProtoBlock::mutable_block_data() {
  return &block_data_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fblock_2eproto__INCLUDED
