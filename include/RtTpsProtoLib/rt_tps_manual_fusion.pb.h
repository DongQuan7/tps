// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_manual_fusion.proto

#ifndef PROTOBUF_rt_5ftps_5fmanual_5ffusion_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fmanual_5ffusion_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fmanual_5ffusion_2eproto();

class RT_TPS_MANUAL_FUSION;

// ===================================================================

class RT_TPS_MANUAL_FUSION : public ::google::protobuf::Message {
 public:
  RT_TPS_MANUAL_FUSION();
  virtual ~RT_TPS_MANUAL_FUSION();
  
  RT_TPS_MANUAL_FUSION(const RT_TPS_MANUAL_FUSION& from);
  
  inline RT_TPS_MANUAL_FUSION& operator=(const RT_TPS_MANUAL_FUSION& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_MANUAL_FUSION& default_instance();
  
  void Swap(RT_TPS_MANUAL_FUSION* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_MANUAL_FUSION* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_MANUAL_FUSION& from);
  void MergeFrom(const RT_TPS_MANUAL_FUSION& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double xStart = 1;
  inline bool has_xstart() const;
  inline void clear_xstart();
  static const int kXStartFieldNumber = 1;
  inline double xstart() const;
  inline void set_xstart(double value);
  
  // required double yStart = 2;
  inline bool has_ystart() const;
  inline void clear_ystart();
  static const int kYStartFieldNumber = 2;
  inline double ystart() const;
  inline void set_ystart(double value);
  
  // required double xEnd = 3;
  inline bool has_xend() const;
  inline void clear_xend();
  static const int kXEndFieldNumber = 3;
  inline double xend() const;
  inline void set_xend(double value);
  
  // required double yEnd = 4;
  inline bool has_yend() const;
  inline void clear_yend();
  static const int kYEndFieldNumber = 4;
  inline double yend() const;
  inline void set_yend(double value);
  
  // required int32 action = 5;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 5;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);
  
  // required int32 lastaction = 6;
  inline bool has_lastaction() const;
  inline void clear_lastaction();
  static const int kLastactionFieldNumber = 6;
  inline ::google::protobuf::int32 lastaction() const;
  inline void set_lastaction(::google::protobuf::int32 value);
  
  // required int32 viewerControlID = 7;
  inline bool has_viewercontrolid() const;
  inline void clear_viewercontrolid();
  static const int kViewerControlIDFieldNumber = 7;
  inline ::google::protobuf::int32 viewercontrolid() const;
  inline void set_viewercontrolid(::google::protobuf::int32 value);
  
  // optional int32 cellID = 8;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIDFieldNumber = 8;
  inline ::google::protobuf::int32 cellid() const;
  inline void set_cellid(::google::protobuf::int32 value);
  
  // optional int32 hittestMode = 9;
  inline bool has_hittestmode() const;
  inline void clear_hittestmode();
  static const int kHittestModeFieldNumber = 9;
  inline ::google::protobuf::int32 hittestmode() const;
  inline void set_hittestmode(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_MANUAL_FUSION)
 private:
  inline void set_has_xstart();
  inline void clear_has_xstart();
  inline void set_has_ystart();
  inline void clear_has_ystart();
  inline void set_has_xend();
  inline void clear_has_xend();
  inline void set_has_yend();
  inline void clear_has_yend();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_lastaction();
  inline void clear_has_lastaction();
  inline void set_has_viewercontrolid();
  inline void clear_has_viewercontrolid();
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_hittestmode();
  inline void clear_has_hittestmode();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double xstart_;
  double ystart_;
  double xend_;
  double yend_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 lastaction_;
  ::google::protobuf::int32 viewercontrolid_;
  ::google::protobuf::int32 cellid_;
  ::google::protobuf::int32 hittestmode_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fmanual_5ffusion_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fmanual_5ffusion_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_MANUAL_FUSION* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_MANUAL_FUSION

// required double xStart = 1;
inline bool RT_TPS_MANUAL_FUSION::has_xstart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_xstart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_xstart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_MANUAL_FUSION::clear_xstart() {
  xstart_ = 0;
  clear_has_xstart();
}
inline double RT_TPS_MANUAL_FUSION::xstart() const {
  return xstart_;
}
inline void RT_TPS_MANUAL_FUSION::set_xstart(double value) {
  set_has_xstart();
  xstart_ = value;
}

// required double yStart = 2;
inline bool RT_TPS_MANUAL_FUSION::has_ystart() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_ystart() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_ystart() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_MANUAL_FUSION::clear_ystart() {
  ystart_ = 0;
  clear_has_ystart();
}
inline double RT_TPS_MANUAL_FUSION::ystart() const {
  return ystart_;
}
inline void RT_TPS_MANUAL_FUSION::set_ystart(double value) {
  set_has_ystart();
  ystart_ = value;
}

// required double xEnd = 3;
inline bool RT_TPS_MANUAL_FUSION::has_xend() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_xend() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_xend() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_MANUAL_FUSION::clear_xend() {
  xend_ = 0;
  clear_has_xend();
}
inline double RT_TPS_MANUAL_FUSION::xend() const {
  return xend_;
}
inline void RT_TPS_MANUAL_FUSION::set_xend(double value) {
  set_has_xend();
  xend_ = value;
}

// required double yEnd = 4;
inline bool RT_TPS_MANUAL_FUSION::has_yend() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_yend() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_yend() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_MANUAL_FUSION::clear_yend() {
  yend_ = 0;
  clear_has_yend();
}
inline double RT_TPS_MANUAL_FUSION::yend() const {
  return yend_;
}
inline void RT_TPS_MANUAL_FUSION::set_yend(double value) {
  set_has_yend();
  yend_ = value;
}

// required int32 action = 5;
inline bool RT_TPS_MANUAL_FUSION::has_action() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_action() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_action() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_MANUAL_FUSION::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 RT_TPS_MANUAL_FUSION::action() const {
  return action_;
}
inline void RT_TPS_MANUAL_FUSION::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// required int32 lastaction = 6;
inline bool RT_TPS_MANUAL_FUSION::has_lastaction() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_lastaction() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_lastaction() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_MANUAL_FUSION::clear_lastaction() {
  lastaction_ = 0;
  clear_has_lastaction();
}
inline ::google::protobuf::int32 RT_TPS_MANUAL_FUSION::lastaction() const {
  return lastaction_;
}
inline void RT_TPS_MANUAL_FUSION::set_lastaction(::google::protobuf::int32 value) {
  set_has_lastaction();
  lastaction_ = value;
}

// required int32 viewerControlID = 7;
inline bool RT_TPS_MANUAL_FUSION::has_viewercontrolid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_viewercontrolid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_viewercontrolid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_MANUAL_FUSION::clear_viewercontrolid() {
  viewercontrolid_ = 0;
  clear_has_viewercontrolid();
}
inline ::google::protobuf::int32 RT_TPS_MANUAL_FUSION::viewercontrolid() const {
  return viewercontrolid_;
}
inline void RT_TPS_MANUAL_FUSION::set_viewercontrolid(::google::protobuf::int32 value) {
  set_has_viewercontrolid();
  viewercontrolid_ = value;
}

// optional int32 cellID = 8;
inline bool RT_TPS_MANUAL_FUSION::has_cellid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_cellid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_MANUAL_FUSION::clear_cellid() {
  cellid_ = 0;
  clear_has_cellid();
}
inline ::google::protobuf::int32 RT_TPS_MANUAL_FUSION::cellid() const {
  return cellid_;
}
inline void RT_TPS_MANUAL_FUSION::set_cellid(::google::protobuf::int32 value) {
  set_has_cellid();
  cellid_ = value;
}

// optional int32 hittestMode = 9;
inline bool RT_TPS_MANUAL_FUSION::has_hittestmode() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_MANUAL_FUSION::set_has_hittestmode() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_MANUAL_FUSION::clear_has_hittestmode() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_MANUAL_FUSION::clear_hittestmode() {
  hittestmode_ = 0;
  clear_has_hittestmode();
}
inline ::google::protobuf::int32 RT_TPS_MANUAL_FUSION::hittestmode() const {
  return hittestmode_;
}
inline void RT_TPS_MANUAL_FUSION::set_hittestmode(::google::protobuf::int32 value) {
  set_has_hittestmode();
  hittestmode_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fmanual_5ffusion_2eproto__INCLUDED
