// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_gridboundary.proto

#ifndef PROTOBUF_rt_5ftps_5fgridboundary_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fgridboundary_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fgridboundary_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fgridboundary_2eproto();

class RT_TPS_GridBoundary;

// ===================================================================

class RT_TPS_GridBoundary : public ::google::protobuf::Message {
 public:
  RT_TPS_GridBoundary();
  virtual ~RT_TPS_GridBoundary();
  
  RT_TPS_GridBoundary(const RT_TPS_GridBoundary& from);
  
  inline RT_TPS_GridBoundary& operator=(const RT_TPS_GridBoundary& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_GridBoundary& default_instance();
  
  void Swap(RT_TPS_GridBoundary* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_GridBoundary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_GridBoundary& from);
  void MergeFrom(const RT_TPS_GridBoundary& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);
  
  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);
  
  // required int32 action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::google::protobuf::int32 action() const;
  inline void set_action(::google::protobuf::int32 value);
  
  // required int32 windowType = 5;
  inline bool has_windowtype() const;
  inline void clear_windowtype();
  static const int kWindowTypeFieldNumber = 5;
  inline ::google::protobuf::int32 windowtype() const;
  inline void set_windowtype(::google::protobuf::int32 value);
  
  // required string windowUid = 6;
  inline bool has_windowuid() const;
  inline void clear_windowuid();
  static const int kWindowUidFieldNumber = 6;
  inline const ::std::string& windowuid() const;
  inline void set_windowuid(const ::std::string& value);
  inline void set_windowuid(const char* value);
  inline void set_windowuid(const char* value, size_t size);
  inline ::std::string* mutable_windowuid();
  inline ::std::string* release_windowuid();
  
  // required string plan_uid = 7;
  inline bool has_plan_uid() const;
  inline void clear_plan_uid();
  static const int kPlanUidFieldNumber = 7;
  inline const ::std::string& plan_uid() const;
  inline void set_plan_uid(const ::std::string& value);
  inline void set_plan_uid(const char* value);
  inline void set_plan_uid(const char* value, size_t size);
  inline ::std::string* mutable_plan_uid();
  inline ::std::string* release_plan_uid();
  
  // optional string normalgroup_uid = 8;
  inline bool has_normalgroup_uid() const;
  inline void clear_normalgroup_uid();
  static const int kNormalgroupUidFieldNumber = 8;
  inline const ::std::string& normalgroup_uid() const;
  inline void set_normalgroup_uid(const ::std::string& value);
  inline void set_normalgroup_uid(const char* value);
  inline void set_normalgroup_uid(const char* value, size_t size);
  inline ::std::string* mutable_normalgroup_uid();
  inline ::std::string* release_normalgroup_uid();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_GridBoundary)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_windowtype();
  inline void clear_has_windowtype();
  inline void set_has_windowuid();
  inline void clear_has_windowuid();
  inline void set_has_plan_uid();
  inline void clear_has_plan_uid();
  inline void set_has_normalgroup_uid();
  inline void clear_has_normalgroup_uid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  double x_;
  double y_;
  ::google::protobuf::int32 action_;
  ::google::protobuf::int32 windowtype_;
  ::std::string* windowuid_;
  ::std::string* plan_uid_;
  ::std::string* normalgroup_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fgridboundary_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fgridboundary_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fgridboundary_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_GridBoundary* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_GridBoundary

// required double x = 1;
inline bool RT_TPS_GridBoundary::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_GridBoundary::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_GridBoundary::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double RT_TPS_GridBoundary::x() const {
  return x_;
}
inline void RT_TPS_GridBoundary::set_x(double value) {
  set_has_x();
  x_ = value;
}

// required double y = 2;
inline bool RT_TPS_GridBoundary::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_GridBoundary::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_GridBoundary::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double RT_TPS_GridBoundary::y() const {
  return y_;
}
inline void RT_TPS_GridBoundary::set_y(double value) {
  set_has_y();
  y_ = value;
}

// required int32 action = 3;
inline bool RT_TPS_GridBoundary::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_GridBoundary::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_GridBoundary::clear_action() {
  action_ = 0;
  clear_has_action();
}
inline ::google::protobuf::int32 RT_TPS_GridBoundary::action() const {
  return action_;
}
inline void RT_TPS_GridBoundary::set_action(::google::protobuf::int32 value) {
  set_has_action();
  action_ = value;
}

// required int32 windowType = 5;
inline bool RT_TPS_GridBoundary::has_windowtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_windowtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_GridBoundary::clear_has_windowtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_GridBoundary::clear_windowtype() {
  windowtype_ = 0;
  clear_has_windowtype();
}
inline ::google::protobuf::int32 RT_TPS_GridBoundary::windowtype() const {
  return windowtype_;
}
inline void RT_TPS_GridBoundary::set_windowtype(::google::protobuf::int32 value) {
  set_has_windowtype();
  windowtype_ = value;
}

// required string windowUid = 6;
inline bool RT_TPS_GridBoundary::has_windowuid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_windowuid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_GridBoundary::clear_has_windowuid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_GridBoundary::clear_windowuid() {
  if (windowuid_ != &::google::protobuf::internal::kEmptyString) {
    windowuid_->clear();
  }
  clear_has_windowuid();
}
inline const ::std::string& RT_TPS_GridBoundary::windowuid() const {
  return *windowuid_;
}
inline void RT_TPS_GridBoundary::set_windowuid(const ::std::string& value) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_windowuid(const char* value) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_windowuid(const char* value, size_t size) {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  windowuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_GridBoundary::mutable_windowuid() {
  set_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    windowuid_ = new ::std::string;
  }
  return windowuid_;
}
inline ::std::string* RT_TPS_GridBoundary::release_windowuid() {
  clear_has_windowuid();
  if (windowuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = windowuid_;
    windowuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string plan_uid = 7;
inline bool RT_TPS_GridBoundary::has_plan_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_plan_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_GridBoundary::clear_has_plan_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_GridBoundary::clear_plan_uid() {
  if (plan_uid_ != &::google::protobuf::internal::kEmptyString) {
    plan_uid_->clear();
  }
  clear_has_plan_uid();
}
inline const ::std::string& RT_TPS_GridBoundary::plan_uid() const {
  return *plan_uid_;
}
inline void RT_TPS_GridBoundary::set_plan_uid(const ::std::string& value) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_plan_uid(const char* value) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_plan_uid(const char* value, size_t size) {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  plan_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_GridBoundary::mutable_plan_uid() {
  set_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    plan_uid_ = new ::std::string;
  }
  return plan_uid_;
}
inline ::std::string* RT_TPS_GridBoundary::release_plan_uid() {
  clear_has_plan_uid();
  if (plan_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = plan_uid_;
    plan_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normalgroup_uid = 8;
inline bool RT_TPS_GridBoundary::has_normalgroup_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_GridBoundary::set_has_normalgroup_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_GridBoundary::clear_has_normalgroup_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_GridBoundary::clear_normalgroup_uid() {
  if (normalgroup_uid_ != &::google::protobuf::internal::kEmptyString) {
    normalgroup_uid_->clear();
  }
  clear_has_normalgroup_uid();
}
inline const ::std::string& RT_TPS_GridBoundary::normalgroup_uid() const {
  return *normalgroup_uid_;
}
inline void RT_TPS_GridBoundary::set_normalgroup_uid(const ::std::string& value) {
  set_has_normalgroup_uid();
  if (normalgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normalgroup_uid_ = new ::std::string;
  }
  normalgroup_uid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_normalgroup_uid(const char* value) {
  set_has_normalgroup_uid();
  if (normalgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normalgroup_uid_ = new ::std::string;
  }
  normalgroup_uid_->assign(value);
}
inline void RT_TPS_GridBoundary::set_normalgroup_uid(const char* value, size_t size) {
  set_has_normalgroup_uid();
  if (normalgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normalgroup_uid_ = new ::std::string;
  }
  normalgroup_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_GridBoundary::mutable_normalgroup_uid() {
  set_has_normalgroup_uid();
  if (normalgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    normalgroup_uid_ = new ::std::string;
  }
  return normalgroup_uid_;
}
inline ::std::string* RT_TPS_GridBoundary::release_normalgroup_uid() {
  clear_has_normalgroup_uid();
  if (normalgroup_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normalgroup_uid_;
    normalgroup_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fgridboundary_2eproto__INCLUDED
