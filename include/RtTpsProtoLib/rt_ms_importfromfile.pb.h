// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_importfromfile.proto

#ifndef PROTOBUF_rt_5ftps_5fimportfromfile_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fimportfromfile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto();

class RT_MS_ImportFromFileList;
class RT_MS_ImportFromFileInfo;
class RT_MS_CoodrinatePoint;
class RT_MS_ErrorResult;

// ===================================================================

class RT_MS_ImportFromFileList : public ::google::protobuf::Message {
 public:
  RT_MS_ImportFromFileList();
  virtual ~RT_MS_ImportFromFileList();
  
  RT_MS_ImportFromFileList(const RT_MS_ImportFromFileList& from);
  
  inline RT_MS_ImportFromFileList& operator=(const RT_MS_ImportFromFileList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_ImportFromFileList& default_instance();
  
  void Swap(RT_MS_ImportFromFileList* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_ImportFromFileList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_ImportFromFileList& from);
  void MergeFrom(const RT_MS_ImportFromFileList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string commissionUID = 1;
  inline bool has_commissionuid() const;
  inline void clear_commissionuid();
  static const int kCommissionUIDFieldNumber = 1;
  inline const ::std::string& commissionuid() const;
  inline void set_commissionuid(const ::std::string& value);
  inline void set_commissionuid(const char* value);
  inline void set_commissionuid(const char* value, size_t size);
  inline ::std::string* mutable_commissionuid();
  inline ::std::string* release_commissionuid();
  
  // optional float depth = 2;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 2;
  inline float depth() const;
  inline void set_depth(float value);
  
  // optional bool isNormalDepth = 3;
  inline bool has_isnormaldepth() const;
  inline void clear_isnormaldepth();
  static const int kIsNormalDepthFieldNumber = 3;
  inline bool isnormaldepth() const;
  inline void set_isnormaldepth(bool value);
  
  // optional int32 algType = 4;
  inline bool has_algtype() const;
  inline void clear_algtype();
  static const int kAlgTypeFieldNumber = 4;
  inline ::google::protobuf::int32 algtype() const;
  inline void set_algtype(::google::protobuf::int32 value);
  
  // optional float minAxisX = 5;
  inline bool has_minaxisx() const;
  inline void clear_minaxisx();
  static const int kMinAxisXFieldNumber = 5;
  inline float minaxisx() const;
  inline void set_minaxisx(float value);
  
  // optional float maxAxisX = 6;
  inline bool has_maxaxisx() const;
  inline void clear_maxaxisx();
  static const int kMaxAxisXFieldNumber = 6;
  inline float maxaxisx() const;
  inline void set_maxaxisx(float value);
  
  // optional float minAxisY = 7;
  inline bool has_minaxisy() const;
  inline void clear_minaxisy();
  static const int kMinAxisYFieldNumber = 7;
  inline float minaxisy() const;
  inline void set_minaxisy(float value);
  
  // optional float maxAxisY = 8;
  inline bool has_maxaxisy() const;
  inline void clear_maxaxisy();
  static const int kMaxAxisYFieldNumber = 8;
  inline float maxaxisy() const;
  inline void set_maxaxisy(float value);
  
  // optional string objectoperationtype = 9;
  inline bool has_objectoperationtype() const;
  inline void clear_objectoperationtype();
  static const int kObjectoperationtypeFieldNumber = 9;
  inline const ::std::string& objectoperationtype() const;
  inline void set_objectoperationtype(const ::std::string& value);
  inline void set_objectoperationtype(const char* value);
  inline void set_objectoperationtype(const char* value, size_t size);
  inline ::std::string* mutable_objectoperationtype();
  inline ::std::string* release_objectoperationtype();
  
  // repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
  inline int importfromfilelist_size() const;
  inline void clear_importfromfilelist();
  static const int kImportFromFileListFieldNumber = 10;
  inline const ::ms::proto::RT_MS_ImportFromFileInfo& importfromfilelist(int index) const;
  inline ::ms::proto::RT_MS_ImportFromFileInfo* mutable_importfromfilelist(int index);
  inline ::ms::proto::RT_MS_ImportFromFileInfo* add_importfromfilelist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportFromFileInfo >&
      importfromfilelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportFromFileInfo >*
      mutable_importfromfilelist();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_ImportFromFileList)
 private:
  inline void set_has_commissionuid();
  inline void clear_has_commissionuid();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_isnormaldepth();
  inline void clear_has_isnormaldepth();
  inline void set_has_algtype();
  inline void clear_has_algtype();
  inline void set_has_minaxisx();
  inline void clear_has_minaxisx();
  inline void set_has_maxaxisx();
  inline void clear_has_maxaxisx();
  inline void set_has_minaxisy();
  inline void clear_has_minaxisy();
  inline void set_has_maxaxisy();
  inline void clear_has_maxaxisy();
  inline void set_has_objectoperationtype();
  inline void clear_has_objectoperationtype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* commissionuid_;
  float depth_;
  bool isnormaldepth_;
  ::google::protobuf::int32 algtype_;
  float minaxisx_;
  float maxaxisx_;
  float minaxisy_;
  ::std::string* objectoperationtype_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportFromFileInfo > importfromfilelist_;
  float maxaxisy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_ImportFromFileList* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_ImportFromFileInfo : public ::google::protobuf::Message {
 public:
  RT_MS_ImportFromFileInfo();
  virtual ~RT_MS_ImportFromFileInfo();
  
  RT_MS_ImportFromFileInfo(const RT_MS_ImportFromFileInfo& from);
  
  inline RT_MS_ImportFromFileInfo& operator=(const RT_MS_ImportFromFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_ImportFromFileInfo& default_instance();
  
  void Swap(RT_MS_ImportFromFileInfo* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_ImportFromFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_ImportFromFileInfo& from);
  void MergeFrom(const RT_MS_ImportFromFileInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string uID = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUIDFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  
  // optional bool isDisplay = 2;
  inline bool has_isdisplay() const;
  inline void clear_isdisplay();
  static const int kIsDisplayFieldNumber = 2;
  inline bool isdisplay() const;
  inline void set_isdisplay(bool value);
  
  // optional string fieldSize = 3;
  inline bool has_fieldsize() const;
  inline void clear_fieldsize();
  static const int kFieldSizeFieldNumber = 3;
  inline const ::std::string& fieldsize() const;
  inline void set_fieldsize(const ::std::string& value);
  inline void set_fieldsize(const char* value);
  inline void set_fieldsize(const char* value, size_t size);
  inline ::std::string* mutable_fieldsize();
  inline ::std::string* release_fieldsize();
  
  // optional int32 type = 4;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 4;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);
  
  // optional float offsetX = 5;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 5;
  inline float offsetx() const;
  inline void set_offsetx(float value);
  
  // optional float offsetY = 6;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 6;
  inline float offsety() const;
  inline void set_offsety(float value);
  
  // optional float depth = 7;
  inline bool has_depth() const;
  inline void clear_depth();
  static const int kDepthFieldNumber = 7;
  inline float depth() const;
  inline void set_depth(float value);
  
  // optional int32 modulation = 8;
  inline bool has_modulation() const;
  inline void clear_modulation();
  static const int kModulationFieldNumber = 8;
  inline ::google::protobuf::int32 modulation() const;
  inline void set_modulation(::google::protobuf::int32 value);
  
  // optional string wedgeACCID = 9;
  inline bool has_wedgeaccid() const;
  inline void clear_wedgeaccid();
  static const int kWedgeACCIDFieldNumber = 9;
  inline const ::std::string& wedgeaccid() const;
  inline void set_wedgeaccid(const ::std::string& value);
  inline void set_wedgeaccid(const char* value);
  inline void set_wedgeaccid(const char* value, size_t size);
  inline ::std::string* mutable_wedgeaccid();
  inline ::std::string* release_wedgeaccid();
  
  // optional bool isWedgeACCID = 10;
  inline bool has_iswedgeaccid() const;
  inline void clear_iswedgeaccid();
  static const int kIsWedgeACCIDFieldNumber = 10;
  inline bool iswedgeaccid() const;
  inline void set_iswedgeaccid(bool value);
  
  // optional int32 status = 11;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 11;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // optional int32 algType = 12;
  inline bool has_algtype() const;
  inline void clear_algtype();
  static const int kAlgTypeFieldNumber = 12;
  inline ::google::protobuf::int32 algtype() const;
  inline void set_algtype(::google::protobuf::int32 value);
  
  // optional string parentuid = 13;
  inline bool has_parentuid() const;
  inline void clear_parentuid();
  static const int kParentuidFieldNumber = 13;
  inline const ::std::string& parentuid() const;
  inline void set_parentuid(const ::std::string& value);
  inline void set_parentuid(const char* value);
  inline void set_parentuid(const char* value, size_t size);
  inline ::std::string* mutable_parentuid();
  inline ::std::string* release_parentuid();
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
  inline int pointlist_size() const;
  inline void clear_pointlist();
  static const int kPointListFieldNumber = 14;
  inline const ::ms::proto::RT_MS_CoodrinatePoint& pointlist(int index) const;
  inline ::ms::proto::RT_MS_CoodrinatePoint* mutable_pointlist(int index);
  inline ::ms::proto::RT_MS_CoodrinatePoint* add_pointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
      pointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
      mutable_pointlist();
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
  inline int calpointlist_size() const;
  inline void clear_calpointlist();
  static const int kCalpointListFieldNumber = 15;
  inline const ::ms::proto::RT_MS_CoodrinatePoint& calpointlist(int index) const;
  inline ::ms::proto::RT_MS_CoodrinatePoint* mutable_calpointlist(int index);
  inline ::ms::proto::RT_MS_CoodrinatePoint* add_calpointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
      calpointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
      mutable_calpointlist();
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
  inline int normpointlist_size() const;
  inline void clear_normpointlist();
  static const int kNormpointListFieldNumber = 16;
  inline const ::ms::proto::RT_MS_CoodrinatePoint& normpointlist(int index) const;
  inline ::ms::proto::RT_MS_CoodrinatePoint* mutable_normpointlist(int index);
  inline ::ms::proto::RT_MS_CoodrinatePoint* add_normpointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
      normpointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
      mutable_normpointlist();
  
  // repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
  inline int normcalpointlist_size() const;
  inline void clear_normcalpointlist();
  static const int kNormcalpointListFieldNumber = 17;
  inline const ::ms::proto::RT_MS_CoodrinatePoint& normcalpointlist(int index) const;
  inline ::ms::proto::RT_MS_CoodrinatePoint* mutable_normcalpointlist(int index);
  inline ::ms::proto::RT_MS_CoodrinatePoint* add_normcalpointlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
      normcalpointlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
      mutable_normcalpointlist();
  
  // optional float fieldsizex = 18;
  inline bool has_fieldsizex() const;
  inline void clear_fieldsizex();
  static const int kFieldsizexFieldNumber = 18;
  inline float fieldsizex() const;
  inline void set_fieldsizex(float value);
  
  // optional float fieldsizey = 19;
  inline bool has_fieldsizey() const;
  inline void clear_fieldsizey();
  static const int kFieldsizeyFieldNumber = 19;
  inline float fieldsizey() const;
  inline void set_fieldsizey(float value);
  
  // repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
  inline int errorresultlist_size() const;
  inline void clear_errorresultlist();
  static const int kErrorResultListFieldNumber = 20;
  inline const ::ms::proto::RT_MS_ErrorResult& errorresultlist(int index) const;
  inline ::ms::proto::RT_MS_ErrorResult* mutable_errorresultlist(int index);
  inline ::ms::proto::RT_MS_ErrorResult* add_errorresultlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ErrorResult >&
      errorresultlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ErrorResult >*
      mutable_errorresultlist();
  
  // optional float degree = 21;
  inline bool has_degree() const;
  inline void clear_degree();
  static const int kDegreeFieldNumber = 21;
  inline float degree() const;
  inline void set_degree(float value);
  
  // optional string wedgeUid = 22;
  inline bool has_wedgeuid() const;
  inline void clear_wedgeuid();
  static const int kWedgeUidFieldNumber = 22;
  inline const ::std::string& wedgeuid() const;
  inline void set_wedgeuid(const ::std::string& value);
  inline void set_wedgeuid(const char* value);
  inline void set_wedgeuid(const char* value, size_t size);
  inline ::std::string* mutable_wedgeuid();
  inline ::std::string* release_wedgeuid();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_ImportFromFileInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_isdisplay();
  inline void clear_has_isdisplay();
  inline void set_has_fieldsize();
  inline void clear_has_fieldsize();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_depth();
  inline void clear_has_depth();
  inline void set_has_modulation();
  inline void clear_has_modulation();
  inline void set_has_wedgeaccid();
  inline void clear_has_wedgeaccid();
  inline void set_has_iswedgeaccid();
  inline void clear_has_iswedgeaccid();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_algtype();
  inline void clear_has_algtype();
  inline void set_has_parentuid();
  inline void clear_has_parentuid();
  inline void set_has_fieldsizex();
  inline void clear_has_fieldsizex();
  inline void set_has_fieldsizey();
  inline void clear_has_fieldsizey();
  inline void set_has_degree();
  inline void clear_has_degree();
  inline void set_has_wedgeuid();
  inline void clear_has_wedgeuid();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* uid_;
  ::std::string* fieldsize_;
  ::google::protobuf::int32 type_;
  float offsetx_;
  float offsety_;
  bool isdisplay_;
  bool iswedgeaccid_;
  float depth_;
  ::google::protobuf::int32 modulation_;
  ::std::string* wedgeaccid_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 algtype_;
  ::std::string* parentuid_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint > pointlist_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint > calpointlist_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint > normpointlist_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint > normcalpointlist_;
  float fieldsizex_;
  float fieldsizey_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ErrorResult > errorresultlist_;
  ::std::string* wedgeuid_;
  float degree_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_ImportFromFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_CoodrinatePoint : public ::google::protobuf::Message {
 public:
  RT_MS_CoodrinatePoint();
  virtual ~RT_MS_CoodrinatePoint();
  
  RT_MS_CoodrinatePoint(const RT_MS_CoodrinatePoint& from);
  
  inline RT_MS_CoodrinatePoint& operator=(const RT_MS_CoodrinatePoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_CoodrinatePoint& default_instance();
  
  void Swap(RT_MS_CoodrinatePoint* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_CoodrinatePoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_CoodrinatePoint& from);
  void MergeFrom(const RT_MS_CoodrinatePoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // optional float dose = 4;
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 4;
  inline float dose() const;
  inline void set_dose(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_CoodrinatePoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_dose();
  inline void clear_has_dose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  float dose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_CoodrinatePoint* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_ErrorResult : public ::google::protobuf::Message {
 public:
  RT_MS_ErrorResult();
  virtual ~RT_MS_ErrorResult();
  
  RT_MS_ErrorResult(const RT_MS_ErrorResult& from);
  
  inline RT_MS_ErrorResult& operator=(const RT_MS_ErrorResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_ErrorResult& default_instance();
  
  void Swap(RT_MS_ErrorResult* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_ErrorResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_ErrorResult& from);
  void MergeFrom(const RT_MS_ErrorResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string errorName = 1;
  inline bool has_errorname() const;
  inline void clear_errorname();
  static const int kErrorNameFieldNumber = 1;
  inline const ::std::string& errorname() const;
  inline void set_errorname(const ::std::string& value);
  inline void set_errorname(const char* value);
  inline void set_errorname(const char* value, size_t size);
  inline ::std::string* mutable_errorname();
  inline ::std::string* release_errorname();
  
  // optional float averageerror = 2;
  inline bool has_averageerror() const;
  inline void clear_averageerror();
  static const int kAverageerrorFieldNumber = 2;
  inline float averageerror() const;
  inline void set_averageerror(float value);
  
  // optional float maxerror = 3;
  inline bool has_maxerror() const;
  inline void clear_maxerror();
  static const int kMaxerrorFieldNumber = 3;
  inline float maxerror() const;
  inline void set_maxerror(float value);
  
  // optional float errorlimit = 4;
  inline bool has_errorlimit() const;
  inline void clear_errorlimit();
  static const int kErrorlimitFieldNumber = 4;
  inline float errorlimit() const;
  inline void set_errorlimit(float value);
  
  // optional float failurepoits = 5;
  inline bool has_failurepoits() const;
  inline void clear_failurepoits();
  static const int kFailurepoitsFieldNumber = 5;
  inline float failurepoits() const;
  inline void set_failurepoits(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_ErrorResult)
 private:
  inline void set_has_errorname();
  inline void clear_has_errorname();
  inline void set_has_averageerror();
  inline void clear_has_averageerror();
  inline void set_has_maxerror();
  inline void clear_has_maxerror();
  inline void set_has_errorlimit();
  inline void clear_has_errorlimit();
  inline void set_has_failurepoits();
  inline void clear_has_failurepoits();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* errorname_;
  float averageerror_;
  float maxerror_;
  float errorlimit_;
  float failurepoits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fimportfromfile_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fimportfromfile_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_ErrorResult* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_ImportFromFileList

// optional string commissionUID = 1;
inline bool RT_MS_ImportFromFileList::has_commissionuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_commissionuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_ImportFromFileList::clear_has_commissionuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_ImportFromFileList::clear_commissionuid() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    commissionuid_->clear();
  }
  clear_has_commissionuid();
}
inline const ::std::string& RT_MS_ImportFromFileList::commissionuid() const {
  return *commissionuid_;
}
inline void RT_MS_ImportFromFileList::set_commissionuid(const ::std::string& value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_ImportFromFileList::set_commissionuid(const char* value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_ImportFromFileList::set_commissionuid(const char* value, size_t size) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileList::mutable_commissionuid() {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  return commissionuid_;
}
inline ::std::string* RT_MS_ImportFromFileList::release_commissionuid() {
  clear_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commissionuid_;
    commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float depth = 2;
inline bool RT_MS_ImportFromFileList::has_depth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_depth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_ImportFromFileList::clear_has_depth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_ImportFromFileList::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline float RT_MS_ImportFromFileList::depth() const {
  return depth_;
}
inline void RT_MS_ImportFromFileList::set_depth(float value) {
  set_has_depth();
  depth_ = value;
}

// optional bool isNormalDepth = 3;
inline bool RT_MS_ImportFromFileList::has_isnormaldepth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_isnormaldepth() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_ImportFromFileList::clear_has_isnormaldepth() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_ImportFromFileList::clear_isnormaldepth() {
  isnormaldepth_ = false;
  clear_has_isnormaldepth();
}
inline bool RT_MS_ImportFromFileList::isnormaldepth() const {
  return isnormaldepth_;
}
inline void RT_MS_ImportFromFileList::set_isnormaldepth(bool value) {
  set_has_isnormaldepth();
  isnormaldepth_ = value;
}

// optional int32 algType = 4;
inline bool RT_MS_ImportFromFileList::has_algtype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_algtype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_ImportFromFileList::clear_has_algtype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_ImportFromFileList::clear_algtype() {
  algtype_ = 0;
  clear_has_algtype();
}
inline ::google::protobuf::int32 RT_MS_ImportFromFileList::algtype() const {
  return algtype_;
}
inline void RT_MS_ImportFromFileList::set_algtype(::google::protobuf::int32 value) {
  set_has_algtype();
  algtype_ = value;
}

// optional float minAxisX = 5;
inline bool RT_MS_ImportFromFileList::has_minaxisx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_minaxisx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_ImportFromFileList::clear_has_minaxisx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_ImportFromFileList::clear_minaxisx() {
  minaxisx_ = 0;
  clear_has_minaxisx();
}
inline float RT_MS_ImportFromFileList::minaxisx() const {
  return minaxisx_;
}
inline void RT_MS_ImportFromFileList::set_minaxisx(float value) {
  set_has_minaxisx();
  minaxisx_ = value;
}

// optional float maxAxisX = 6;
inline bool RT_MS_ImportFromFileList::has_maxaxisx() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_maxaxisx() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_ImportFromFileList::clear_has_maxaxisx() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_ImportFromFileList::clear_maxaxisx() {
  maxaxisx_ = 0;
  clear_has_maxaxisx();
}
inline float RT_MS_ImportFromFileList::maxaxisx() const {
  return maxaxisx_;
}
inline void RT_MS_ImportFromFileList::set_maxaxisx(float value) {
  set_has_maxaxisx();
  maxaxisx_ = value;
}

// optional float minAxisY = 7;
inline bool RT_MS_ImportFromFileList::has_minaxisy() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_minaxisy() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_ImportFromFileList::clear_has_minaxisy() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_ImportFromFileList::clear_minaxisy() {
  minaxisy_ = 0;
  clear_has_minaxisy();
}
inline float RT_MS_ImportFromFileList::minaxisy() const {
  return minaxisy_;
}
inline void RT_MS_ImportFromFileList::set_minaxisy(float value) {
  set_has_minaxisy();
  minaxisy_ = value;
}

// optional float maxAxisY = 8;
inline bool RT_MS_ImportFromFileList::has_maxaxisy() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_maxaxisy() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_MS_ImportFromFileList::clear_has_maxaxisy() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_MS_ImportFromFileList::clear_maxaxisy() {
  maxaxisy_ = 0;
  clear_has_maxaxisy();
}
inline float RT_MS_ImportFromFileList::maxaxisy() const {
  return maxaxisy_;
}
inline void RT_MS_ImportFromFileList::set_maxaxisy(float value) {
  set_has_maxaxisy();
  maxaxisy_ = value;
}

// optional string objectoperationtype = 9;
inline bool RT_MS_ImportFromFileList::has_objectoperationtype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_MS_ImportFromFileList::set_has_objectoperationtype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_MS_ImportFromFileList::clear_has_objectoperationtype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_MS_ImportFromFileList::clear_objectoperationtype() {
  if (objectoperationtype_ != &::google::protobuf::internal::kEmptyString) {
    objectoperationtype_->clear();
  }
  clear_has_objectoperationtype();
}
inline const ::std::string& RT_MS_ImportFromFileList::objectoperationtype() const {
  return *objectoperationtype_;
}
inline void RT_MS_ImportFromFileList::set_objectoperationtype(const ::std::string& value) {
  set_has_objectoperationtype();
  if (objectoperationtype_ == &::google::protobuf::internal::kEmptyString) {
    objectoperationtype_ = new ::std::string;
  }
  objectoperationtype_->assign(value);
}
inline void RT_MS_ImportFromFileList::set_objectoperationtype(const char* value) {
  set_has_objectoperationtype();
  if (objectoperationtype_ == &::google::protobuf::internal::kEmptyString) {
    objectoperationtype_ = new ::std::string;
  }
  objectoperationtype_->assign(value);
}
inline void RT_MS_ImportFromFileList::set_objectoperationtype(const char* value, size_t size) {
  set_has_objectoperationtype();
  if (objectoperationtype_ == &::google::protobuf::internal::kEmptyString) {
    objectoperationtype_ = new ::std::string;
  }
  objectoperationtype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileList::mutable_objectoperationtype() {
  set_has_objectoperationtype();
  if (objectoperationtype_ == &::google::protobuf::internal::kEmptyString) {
    objectoperationtype_ = new ::std::string;
  }
  return objectoperationtype_;
}
inline ::std::string* RT_MS_ImportFromFileList::release_objectoperationtype() {
  clear_has_objectoperationtype();
  if (objectoperationtype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = objectoperationtype_;
    objectoperationtype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ms.proto.RT_MS_ImportFromFileInfo ImportFromFileList = 10;
inline int RT_MS_ImportFromFileList::importfromfilelist_size() const {
  return importfromfilelist_.size();
}
inline void RT_MS_ImportFromFileList::clear_importfromfilelist() {
  importfromfilelist_.Clear();
}
inline const ::ms::proto::RT_MS_ImportFromFileInfo& RT_MS_ImportFromFileList::importfromfilelist(int index) const {
  return importfromfilelist_.Get(index);
}
inline ::ms::proto::RT_MS_ImportFromFileInfo* RT_MS_ImportFromFileList::mutable_importfromfilelist(int index) {
  return importfromfilelist_.Mutable(index);
}
inline ::ms::proto::RT_MS_ImportFromFileInfo* RT_MS_ImportFromFileList::add_importfromfilelist() {
  return importfromfilelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportFromFileInfo >&
RT_MS_ImportFromFileList::importfromfilelist() const {
  return importfromfilelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ImportFromFileInfo >*
RT_MS_ImportFromFileList::mutable_importfromfilelist() {
  return &importfromfilelist_;
}

// -------------------------------------------------------------------

// RT_MS_ImportFromFileInfo

// optional string uID = 1;
inline bool RT_MS_ImportFromFileInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_ImportFromFileInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& RT_MS_ImportFromFileInfo::uid() const {
  return *uid_;
}
inline void RT_MS_ImportFromFileInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* RT_MS_ImportFromFileInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isDisplay = 2;
inline bool RT_MS_ImportFromFileInfo::has_isdisplay() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_isdisplay() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_isdisplay() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_ImportFromFileInfo::clear_isdisplay() {
  isdisplay_ = false;
  clear_has_isdisplay();
}
inline bool RT_MS_ImportFromFileInfo::isdisplay() const {
  return isdisplay_;
}
inline void RT_MS_ImportFromFileInfo::set_isdisplay(bool value) {
  set_has_isdisplay();
  isdisplay_ = value;
}

// optional string fieldSize = 3;
inline bool RT_MS_ImportFromFileInfo::has_fieldsize() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_fieldsize() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_fieldsize() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_ImportFromFileInfo::clear_fieldsize() {
  if (fieldsize_ != &::google::protobuf::internal::kEmptyString) {
    fieldsize_->clear();
  }
  clear_has_fieldsize();
}
inline const ::std::string& RT_MS_ImportFromFileInfo::fieldsize() const {
  return *fieldsize_;
}
inline void RT_MS_ImportFromFileInfo::set_fieldsize(const ::std::string& value) {
  set_has_fieldsize();
  if (fieldsize_ == &::google::protobuf::internal::kEmptyString) {
    fieldsize_ = new ::std::string;
  }
  fieldsize_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_fieldsize(const char* value) {
  set_has_fieldsize();
  if (fieldsize_ == &::google::protobuf::internal::kEmptyString) {
    fieldsize_ = new ::std::string;
  }
  fieldsize_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_fieldsize(const char* value, size_t size) {
  set_has_fieldsize();
  if (fieldsize_ == &::google::protobuf::internal::kEmptyString) {
    fieldsize_ = new ::std::string;
  }
  fieldsize_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileInfo::mutable_fieldsize() {
  set_has_fieldsize();
  if (fieldsize_ == &::google::protobuf::internal::kEmptyString) {
    fieldsize_ = new ::std::string;
  }
  return fieldsize_;
}
inline ::std::string* RT_MS_ImportFromFileInfo::release_fieldsize() {
  clear_has_fieldsize();
  if (fieldsize_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fieldsize_;
    fieldsize_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 type = 4;
inline bool RT_MS_ImportFromFileInfo::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_ImportFromFileInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RT_MS_ImportFromFileInfo::type() const {
  return type_;
}
inline void RT_MS_ImportFromFileInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional float offsetX = 5;
inline bool RT_MS_ImportFromFileInfo::has_offsetx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_offsetx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_ImportFromFileInfo::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float RT_MS_ImportFromFileInfo::offsetx() const {
  return offsetx_;
}
inline void RT_MS_ImportFromFileInfo::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// optional float offsetY = 6;
inline bool RT_MS_ImportFromFileInfo::has_offsety() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_offsety() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_ImportFromFileInfo::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float RT_MS_ImportFromFileInfo::offsety() const {
  return offsety_;
}
inline void RT_MS_ImportFromFileInfo::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// optional float depth = 7;
inline bool RT_MS_ImportFromFileInfo::has_depth() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_depth() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_depth() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_ImportFromFileInfo::clear_depth() {
  depth_ = 0;
  clear_has_depth();
}
inline float RT_MS_ImportFromFileInfo::depth() const {
  return depth_;
}
inline void RT_MS_ImportFromFileInfo::set_depth(float value) {
  set_has_depth();
  depth_ = value;
}

// optional int32 modulation = 8;
inline bool RT_MS_ImportFromFileInfo::has_modulation() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_modulation() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_modulation() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_MS_ImportFromFileInfo::clear_modulation() {
  modulation_ = 0;
  clear_has_modulation();
}
inline ::google::protobuf::int32 RT_MS_ImportFromFileInfo::modulation() const {
  return modulation_;
}
inline void RT_MS_ImportFromFileInfo::set_modulation(::google::protobuf::int32 value) {
  set_has_modulation();
  modulation_ = value;
}

// optional string wedgeACCID = 9;
inline bool RT_MS_ImportFromFileInfo::has_wedgeaccid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_wedgeaccid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_wedgeaccid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_MS_ImportFromFileInfo::clear_wedgeaccid() {
  if (wedgeaccid_ != &::google::protobuf::internal::kEmptyString) {
    wedgeaccid_->clear();
  }
  clear_has_wedgeaccid();
}
inline const ::std::string& RT_MS_ImportFromFileInfo::wedgeaccid() const {
  return *wedgeaccid_;
}
inline void RT_MS_ImportFromFileInfo::set_wedgeaccid(const ::std::string& value) {
  set_has_wedgeaccid();
  if (wedgeaccid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeaccid_ = new ::std::string;
  }
  wedgeaccid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_wedgeaccid(const char* value) {
  set_has_wedgeaccid();
  if (wedgeaccid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeaccid_ = new ::std::string;
  }
  wedgeaccid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_wedgeaccid(const char* value, size_t size) {
  set_has_wedgeaccid();
  if (wedgeaccid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeaccid_ = new ::std::string;
  }
  wedgeaccid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileInfo::mutable_wedgeaccid() {
  set_has_wedgeaccid();
  if (wedgeaccid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeaccid_ = new ::std::string;
  }
  return wedgeaccid_;
}
inline ::std::string* RT_MS_ImportFromFileInfo::release_wedgeaccid() {
  clear_has_wedgeaccid();
  if (wedgeaccid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgeaccid_;
    wedgeaccid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isWedgeACCID = 10;
inline bool RT_MS_ImportFromFileInfo::has_iswedgeaccid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_iswedgeaccid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_iswedgeaccid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_MS_ImportFromFileInfo::clear_iswedgeaccid() {
  iswedgeaccid_ = false;
  clear_has_iswedgeaccid();
}
inline bool RT_MS_ImportFromFileInfo::iswedgeaccid() const {
  return iswedgeaccid_;
}
inline void RT_MS_ImportFromFileInfo::set_iswedgeaccid(bool value) {
  set_has_iswedgeaccid();
  iswedgeaccid_ = value;
}

// optional int32 status = 11;
inline bool RT_MS_ImportFromFileInfo::has_status() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_status() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_MS_ImportFromFileInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RT_MS_ImportFromFileInfo::status() const {
  return status_;
}
inline void RT_MS_ImportFromFileInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 algType = 12;
inline bool RT_MS_ImportFromFileInfo::has_algtype() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_algtype() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_algtype() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_MS_ImportFromFileInfo::clear_algtype() {
  algtype_ = 0;
  clear_has_algtype();
}
inline ::google::protobuf::int32 RT_MS_ImportFromFileInfo::algtype() const {
  return algtype_;
}
inline void RT_MS_ImportFromFileInfo::set_algtype(::google::protobuf::int32 value) {
  set_has_algtype();
  algtype_ = value;
}

// optional string parentuid = 13;
inline bool RT_MS_ImportFromFileInfo::has_parentuid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_parentuid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_parentuid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RT_MS_ImportFromFileInfo::clear_parentuid() {
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    parentuid_->clear();
  }
  clear_has_parentuid();
}
inline const ::std::string& RT_MS_ImportFromFileInfo::parentuid() const {
  return *parentuid_;
}
inline void RT_MS_ImportFromFileInfo::set_parentuid(const ::std::string& value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_parentuid(const char* value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_parentuid(const char* value, size_t size) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileInfo::mutable_parentuid() {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  return parentuid_;
}
inline ::std::string* RT_MS_ImportFromFileInfo::release_parentuid() {
  clear_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentuid_;
    parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .ms.proto.RT_MS_CoodrinatePoint pointList = 14;
inline int RT_MS_ImportFromFileInfo::pointlist_size() const {
  return pointlist_.size();
}
inline void RT_MS_ImportFromFileInfo::clear_pointlist() {
  pointlist_.Clear();
}
inline const ::ms::proto::RT_MS_CoodrinatePoint& RT_MS_ImportFromFileInfo::pointlist(int index) const {
  return pointlist_.Get(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::mutable_pointlist(int index) {
  return pointlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::add_pointlist() {
  return pointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
RT_MS_ImportFromFileInfo::pointlist() const {
  return pointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
RT_MS_ImportFromFileInfo::mutable_pointlist() {
  return &pointlist_;
}

// repeated .ms.proto.RT_MS_CoodrinatePoint calpointList = 15;
inline int RT_MS_ImportFromFileInfo::calpointlist_size() const {
  return calpointlist_.size();
}
inline void RT_MS_ImportFromFileInfo::clear_calpointlist() {
  calpointlist_.Clear();
}
inline const ::ms::proto::RT_MS_CoodrinatePoint& RT_MS_ImportFromFileInfo::calpointlist(int index) const {
  return calpointlist_.Get(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::mutable_calpointlist(int index) {
  return calpointlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::add_calpointlist() {
  return calpointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
RT_MS_ImportFromFileInfo::calpointlist() const {
  return calpointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
RT_MS_ImportFromFileInfo::mutable_calpointlist() {
  return &calpointlist_;
}

// repeated .ms.proto.RT_MS_CoodrinatePoint normpointList = 16;
inline int RT_MS_ImportFromFileInfo::normpointlist_size() const {
  return normpointlist_.size();
}
inline void RT_MS_ImportFromFileInfo::clear_normpointlist() {
  normpointlist_.Clear();
}
inline const ::ms::proto::RT_MS_CoodrinatePoint& RT_MS_ImportFromFileInfo::normpointlist(int index) const {
  return normpointlist_.Get(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::mutable_normpointlist(int index) {
  return normpointlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::add_normpointlist() {
  return normpointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
RT_MS_ImportFromFileInfo::normpointlist() const {
  return normpointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
RT_MS_ImportFromFileInfo::mutable_normpointlist() {
  return &normpointlist_;
}

// repeated .ms.proto.RT_MS_CoodrinatePoint normcalpointList = 17;
inline int RT_MS_ImportFromFileInfo::normcalpointlist_size() const {
  return normcalpointlist_.size();
}
inline void RT_MS_ImportFromFileInfo::clear_normcalpointlist() {
  normcalpointlist_.Clear();
}
inline const ::ms::proto::RT_MS_CoodrinatePoint& RT_MS_ImportFromFileInfo::normcalpointlist(int index) const {
  return normcalpointlist_.Get(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::mutable_normcalpointlist(int index) {
  return normcalpointlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_CoodrinatePoint* RT_MS_ImportFromFileInfo::add_normcalpointlist() {
  return normcalpointlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >&
RT_MS_ImportFromFileInfo::normcalpointlist() const {
  return normcalpointlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_CoodrinatePoint >*
RT_MS_ImportFromFileInfo::mutable_normcalpointlist() {
  return &normcalpointlist_;
}

// optional float fieldsizex = 18;
inline bool RT_MS_ImportFromFileInfo::has_fieldsizex() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_fieldsizex() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_fieldsizex() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RT_MS_ImportFromFileInfo::clear_fieldsizex() {
  fieldsizex_ = 0;
  clear_has_fieldsizex();
}
inline float RT_MS_ImportFromFileInfo::fieldsizex() const {
  return fieldsizex_;
}
inline void RT_MS_ImportFromFileInfo::set_fieldsizex(float value) {
  set_has_fieldsizex();
  fieldsizex_ = value;
}

// optional float fieldsizey = 19;
inline bool RT_MS_ImportFromFileInfo::has_fieldsizey() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_fieldsizey() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_fieldsizey() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RT_MS_ImportFromFileInfo::clear_fieldsizey() {
  fieldsizey_ = 0;
  clear_has_fieldsizey();
}
inline float RT_MS_ImportFromFileInfo::fieldsizey() const {
  return fieldsizey_;
}
inline void RT_MS_ImportFromFileInfo::set_fieldsizey(float value) {
  set_has_fieldsizey();
  fieldsizey_ = value;
}

// repeated .ms.proto.RT_MS_ErrorResult errorResultList = 20;
inline int RT_MS_ImportFromFileInfo::errorresultlist_size() const {
  return errorresultlist_.size();
}
inline void RT_MS_ImportFromFileInfo::clear_errorresultlist() {
  errorresultlist_.Clear();
}
inline const ::ms::proto::RT_MS_ErrorResult& RT_MS_ImportFromFileInfo::errorresultlist(int index) const {
  return errorresultlist_.Get(index);
}
inline ::ms::proto::RT_MS_ErrorResult* RT_MS_ImportFromFileInfo::mutable_errorresultlist(int index) {
  return errorresultlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_ErrorResult* RT_MS_ImportFromFileInfo::add_errorresultlist() {
  return errorresultlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ErrorResult >&
RT_MS_ImportFromFileInfo::errorresultlist() const {
  return errorresultlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_ErrorResult >*
RT_MS_ImportFromFileInfo::mutable_errorresultlist() {
  return &errorresultlist_;
}

// optional float degree = 21;
inline bool RT_MS_ImportFromFileInfo::has_degree() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_degree() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_degree() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RT_MS_ImportFromFileInfo::clear_degree() {
  degree_ = 0;
  clear_has_degree();
}
inline float RT_MS_ImportFromFileInfo::degree() const {
  return degree_;
}
inline void RT_MS_ImportFromFileInfo::set_degree(float value) {
  set_has_degree();
  degree_ = value;
}

// optional string wedgeUid = 22;
inline bool RT_MS_ImportFromFileInfo::has_wedgeuid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RT_MS_ImportFromFileInfo::set_has_wedgeuid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RT_MS_ImportFromFileInfo::clear_has_wedgeuid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RT_MS_ImportFromFileInfo::clear_wedgeuid() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    wedgeuid_->clear();
  }
  clear_has_wedgeuid();
}
inline const ::std::string& RT_MS_ImportFromFileInfo::wedgeuid() const {
  return *wedgeuid_;
}
inline void RT_MS_ImportFromFileInfo::set_wedgeuid(const ::std::string& value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_wedgeuid(const char* value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_ImportFromFileInfo::set_wedgeuid(const char* value, size_t size) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ImportFromFileInfo::mutable_wedgeuid() {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  return wedgeuid_;
}
inline ::std::string* RT_MS_ImportFromFileInfo::release_wedgeuid() {
  clear_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgeuid_;
    wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RT_MS_CoodrinatePoint

// optional float x = 1;
inline bool RT_MS_CoodrinatePoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_CoodrinatePoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_CoodrinatePoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_CoodrinatePoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float RT_MS_CoodrinatePoint::x() const {
  return x_;
}
inline void RT_MS_CoodrinatePoint::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float y = 2;
inline bool RT_MS_CoodrinatePoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_CoodrinatePoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_CoodrinatePoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_CoodrinatePoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float RT_MS_CoodrinatePoint::y() const {
  return y_;
}
inline void RT_MS_CoodrinatePoint::set_y(float value) {
  set_has_y();
  y_ = value;
}

// optional float z = 3;
inline bool RT_MS_CoodrinatePoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_CoodrinatePoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_CoodrinatePoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_CoodrinatePoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float RT_MS_CoodrinatePoint::z() const {
  return z_;
}
inline void RT_MS_CoodrinatePoint::set_z(float value) {
  set_has_z();
  z_ = value;
}

// optional float dose = 4;
inline bool RT_MS_CoodrinatePoint::has_dose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_CoodrinatePoint::set_has_dose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_CoodrinatePoint::clear_has_dose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_CoodrinatePoint::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline float RT_MS_CoodrinatePoint::dose() const {
  return dose_;
}
inline void RT_MS_CoodrinatePoint::set_dose(float value) {
  set_has_dose();
  dose_ = value;
}

// -------------------------------------------------------------------

// RT_MS_ErrorResult

// optional string errorName = 1;
inline bool RT_MS_ErrorResult::has_errorname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_ErrorResult::set_has_errorname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_ErrorResult::clear_has_errorname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_ErrorResult::clear_errorname() {
  if (errorname_ != &::google::protobuf::internal::kEmptyString) {
    errorname_->clear();
  }
  clear_has_errorname();
}
inline const ::std::string& RT_MS_ErrorResult::errorname() const {
  return *errorname_;
}
inline void RT_MS_ErrorResult::set_errorname(const ::std::string& value) {
  set_has_errorname();
  if (errorname_ == &::google::protobuf::internal::kEmptyString) {
    errorname_ = new ::std::string;
  }
  errorname_->assign(value);
}
inline void RT_MS_ErrorResult::set_errorname(const char* value) {
  set_has_errorname();
  if (errorname_ == &::google::protobuf::internal::kEmptyString) {
    errorname_ = new ::std::string;
  }
  errorname_->assign(value);
}
inline void RT_MS_ErrorResult::set_errorname(const char* value, size_t size) {
  set_has_errorname();
  if (errorname_ == &::google::protobuf::internal::kEmptyString) {
    errorname_ = new ::std::string;
  }
  errorname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_ErrorResult::mutable_errorname() {
  set_has_errorname();
  if (errorname_ == &::google::protobuf::internal::kEmptyString) {
    errorname_ = new ::std::string;
  }
  return errorname_;
}
inline ::std::string* RT_MS_ErrorResult::release_errorname() {
  clear_has_errorname();
  if (errorname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = errorname_;
    errorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float averageerror = 2;
inline bool RT_MS_ErrorResult::has_averageerror() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_ErrorResult::set_has_averageerror() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_ErrorResult::clear_has_averageerror() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_ErrorResult::clear_averageerror() {
  averageerror_ = 0;
  clear_has_averageerror();
}
inline float RT_MS_ErrorResult::averageerror() const {
  return averageerror_;
}
inline void RT_MS_ErrorResult::set_averageerror(float value) {
  set_has_averageerror();
  averageerror_ = value;
}

// optional float maxerror = 3;
inline bool RT_MS_ErrorResult::has_maxerror() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_ErrorResult::set_has_maxerror() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_ErrorResult::clear_has_maxerror() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_ErrorResult::clear_maxerror() {
  maxerror_ = 0;
  clear_has_maxerror();
}
inline float RT_MS_ErrorResult::maxerror() const {
  return maxerror_;
}
inline void RT_MS_ErrorResult::set_maxerror(float value) {
  set_has_maxerror();
  maxerror_ = value;
}

// optional float errorlimit = 4;
inline bool RT_MS_ErrorResult::has_errorlimit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_ErrorResult::set_has_errorlimit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_ErrorResult::clear_has_errorlimit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_ErrorResult::clear_errorlimit() {
  errorlimit_ = 0;
  clear_has_errorlimit();
}
inline float RT_MS_ErrorResult::errorlimit() const {
  return errorlimit_;
}
inline void RT_MS_ErrorResult::set_errorlimit(float value) {
  set_has_errorlimit();
  errorlimit_ = value;
}

// optional float failurepoits = 5;
inline bool RT_MS_ErrorResult::has_failurepoits() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_ErrorResult::set_has_failurepoits() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_ErrorResult::clear_has_failurepoits() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_ErrorResult::clear_failurepoits() {
  failurepoits_ = 0;
  clear_has_failurepoits();
}
inline float RT_MS_ErrorResult::failurepoits() const {
  return failurepoits_;
}
inline void RT_MS_ErrorResult::set_failurepoits(float value) {
  set_has_failurepoits();
  failurepoits_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fimportfromfile_2eproto__INCLUDED
