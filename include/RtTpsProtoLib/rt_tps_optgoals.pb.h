// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_optgoals.proto

#ifndef PROTOBUF_rt_5ftps_5foptgoals_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5foptgoals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();
void protobuf_AssignDesc_rt_5ftps_5foptgoals_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5foptgoals_2eproto();

class RT_TPS_Optgoal;
class RT_TPS_OptgoalList;

// ===================================================================

class RT_TPS_Optgoal : public ::google::protobuf::Message {
 public:
  RT_TPS_Optgoal();
  virtual ~RT_TPS_Optgoal();
  
  RT_TPS_Optgoal(const RT_TPS_Optgoal& from);
  
  inline RT_TPS_Optgoal& operator=(const RT_TPS_Optgoal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_Optgoal& default_instance();
  
  void Swap(RT_TPS_Optgoal* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_Optgoal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_Optgoal& from);
  void MergeFrom(const RT_TPS_Optgoal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string normGroupUid = 1;
  inline bool has_normgroupuid() const;
  inline void clear_normgroupuid();
  static const int kNormGroupUidFieldNumber = 1;
  inline const ::std::string& normgroupuid() const;
  inline void set_normgroupuid(const ::std::string& value);
  inline void set_normgroupuid(const char* value);
  inline void set_normgroupuid(const char* value, size_t size);
  inline ::std::string* mutable_normgroupuid();
  inline ::std::string* release_normgroupuid();
  
  // optional string voiUid = 2;
  inline bool has_voiuid() const;
  inline void clear_voiuid();
  static const int kVoiUidFieldNumber = 2;
  inline const ::std::string& voiuid() const;
  inline void set_voiuid(const ::std::string& value);
  inline void set_voiuid(const char* value);
  inline void set_voiuid(const char* value, size_t size);
  inline ::std::string* mutable_voiuid();
  inline ::std::string* release_voiuid();
  
  // optional string voiName = 3;
  inline bool has_voiname() const;
  inline void clear_voiname();
  static const int kVoiNameFieldNumber = 3;
  inline const ::std::string& voiname() const;
  inline void set_voiname(const ::std::string& value);
  inline void set_voiname(const char* value);
  inline void set_voiname(const char* value, size_t size);
  inline ::std::string* mutable_voiname();
  inline ::std::string* release_voiname();
  
  // optional int32 planningRole = 4;
  inline bool has_planningrole() const;
  inline void clear_planningrole();
  static const int kPlanningRoleFieldNumber = 4;
  inline ::google::protobuf::int32 planningrole() const;
  inline void set_planningrole(::google::protobuf::int32 value);
  
  // optional int32 fuctionType = 5;
  inline bool has_fuctiontype() const;
  inline void clear_fuctiontype();
  static const int kFuctionTypeFieldNumber = 5;
  inline ::google::protobuf::int32 fuctiontype() const;
  inline void set_fuctiontype(::google::protobuf::int32 value);
  
  // optional int32 minMaxFlag = 6;
  inline bool has_minmaxflag() const;
  inline void clear_minmaxflag();
  static const int kMinMaxFlagFieldNumber = 6;
  inline ::google::protobuf::int32 minmaxflag() const;
  inline void set_minmaxflag(::google::protobuf::int32 value);
  
  // optional float dose = 7;
  inline bool has_dose() const;
  inline void clear_dose();
  static const int kDoseFieldNumber = 7;
  inline float dose() const;
  inline void set_dose(float value);
  
  // optional float volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline float volume() const;
  inline void set_volume(float value);
  
  // optional float eud = 9;
  inline bool has_eud() const;
  inline void clear_eud();
  static const int kEudFieldNumber = 9;
  inline float eud() const;
  inline void set_eud(float value);
  
  // optional float weight = 10;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 10;
  inline float weight() const;
  inline void set_weight(float value);
  
  // optional bool isHard = 11;
  inline bool has_ishard() const;
  inline void clear_ishard();
  static const int kIsHardFieldNumber = 11;
  inline bool ishard() const;
  inline void set_ishard(bool value);
  
  // optional string optGoalUid = 12;
  inline bool has_optgoaluid() const;
  inline void clear_optgoaluid();
  static const int kOptGoalUidFieldNumber = 12;
  inline const ::std::string& optgoaluid() const;
  inline void set_optgoaluid(const ::std::string& value);
  inline void set_optgoaluid(const char* value);
  inline void set_optgoaluid(const char* value, size_t size);
  inline ::std::string* mutable_optgoaluid();
  inline ::std::string* release_optgoaluid();
  
  // optional bool isJoinOpt = 13;
  inline bool has_isjoinopt() const;
  inline void clear_isjoinopt();
  static const int kIsJoinOptFieldNumber = 13;
  inline bool isjoinopt() const;
  inline void set_isjoinopt(bool value);
  
  // optional float eudResult = 14;
  inline bool has_eudresult() const;
  inline void clear_eudresult();
  static const int kEudResultFieldNumber = 14;
  inline float eudresult() const;
  inline void set_eudresult(float value);
  
  // optional int32 id = 15;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 15;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_Optgoal)
 private:
  inline void set_has_normgroupuid();
  inline void clear_has_normgroupuid();
  inline void set_has_voiuid();
  inline void clear_has_voiuid();
  inline void set_has_voiname();
  inline void clear_has_voiname();
  inline void set_has_planningrole();
  inline void clear_has_planningrole();
  inline void set_has_fuctiontype();
  inline void clear_has_fuctiontype();
  inline void set_has_minmaxflag();
  inline void clear_has_minmaxflag();
  inline void set_has_dose();
  inline void clear_has_dose();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_eud();
  inline void clear_has_eud();
  inline void set_has_weight();
  inline void clear_has_weight();
  inline void set_has_ishard();
  inline void clear_has_ishard();
  inline void set_has_optgoaluid();
  inline void clear_has_optgoaluid();
  inline void set_has_isjoinopt();
  inline void clear_has_isjoinopt();
  inline void set_has_eudresult();
  inline void clear_has_eudresult();
  inline void set_has_id();
  inline void clear_has_id();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* normgroupuid_;
  ::std::string* voiuid_;
  ::std::string* voiname_;
  ::google::protobuf::int32 planningrole_;
  ::google::protobuf::int32 fuctiontype_;
  ::google::protobuf::int32 minmaxflag_;
  float dose_;
  float volume_;
  float eud_;
  float weight_;
  bool ishard_;
  bool isjoinopt_;
  ::std::string* optgoaluid_;
  float eudresult_;
  ::google::protobuf::int32 id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(15 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5foptgoals_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5foptgoals_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_Optgoal* default_instance_;
};
// -------------------------------------------------------------------

class RT_TPS_OptgoalList : public ::google::protobuf::Message {
 public:
  RT_TPS_OptgoalList();
  virtual ~RT_TPS_OptgoalList();
  
  RT_TPS_OptgoalList(const RT_TPS_OptgoalList& from);
  
  inline RT_TPS_OptgoalList& operator=(const RT_TPS_OptgoalList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_OptgoalList& default_instance();
  
  void Swap(RT_TPS_OptgoalList* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_OptgoalList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_OptgoalList& from);
  void MergeFrom(const RT_TPS_OptgoalList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RT_TPS_Optgoal opts = 1;
  inline int opts_size() const;
  inline void clear_opts();
  static const int kOptsFieldNumber = 1;
  inline const ::tps::proto::RT_TPS_Optgoal& opts(int index) const;
  inline ::tps::proto::RT_TPS_Optgoal* mutable_opts(int index);
  inline ::tps::proto::RT_TPS_Optgoal* add_opts();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Optgoal >&
      opts() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Optgoal >*
      mutable_opts();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_OptgoalList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Optgoal > opts_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5foptgoals_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5foptgoals_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5foptgoals_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_OptgoalList* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_Optgoal

// optional string normGroupUid = 1;
inline bool RT_TPS_Optgoal::has_normgroupuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_Optgoal::set_has_normgroupuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_Optgoal::clear_has_normgroupuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_Optgoal::clear_normgroupuid() {
  if (normgroupuid_ != &::google::protobuf::internal::kEmptyString) {
    normgroupuid_->clear();
  }
  clear_has_normgroupuid();
}
inline const ::std::string& RT_TPS_Optgoal::normgroupuid() const {
  return *normgroupuid_;
}
inline void RT_TPS_Optgoal::set_normgroupuid(const ::std::string& value) {
  set_has_normgroupuid();
  if (normgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normgroupuid_ = new ::std::string;
  }
  normgroupuid_->assign(value);
}
inline void RT_TPS_Optgoal::set_normgroupuid(const char* value) {
  set_has_normgroupuid();
  if (normgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normgroupuid_ = new ::std::string;
  }
  normgroupuid_->assign(value);
}
inline void RT_TPS_Optgoal::set_normgroupuid(const char* value, size_t size) {
  set_has_normgroupuid();
  if (normgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normgroupuid_ = new ::std::string;
  }
  normgroupuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Optgoal::mutable_normgroupuid() {
  set_has_normgroupuid();
  if (normgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    normgroupuid_ = new ::std::string;
  }
  return normgroupuid_;
}
inline ::std::string* RT_TPS_Optgoal::release_normgroupuid() {
  clear_has_normgroupuid();
  if (normgroupuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normgroupuid_;
    normgroupuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string voiUid = 2;
inline bool RT_TPS_Optgoal::has_voiuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_Optgoal::set_has_voiuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_Optgoal::clear_has_voiuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_Optgoal::clear_voiuid() {
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    voiuid_->clear();
  }
  clear_has_voiuid();
}
inline const ::std::string& RT_TPS_Optgoal::voiuid() const {
  return *voiuid_;
}
inline void RT_TPS_Optgoal::set_voiuid(const ::std::string& value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RT_TPS_Optgoal::set_voiuid(const char* value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RT_TPS_Optgoal::set_voiuid(const char* value, size_t size) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Optgoal::mutable_voiuid() {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  return voiuid_;
}
inline ::std::string* RT_TPS_Optgoal::release_voiuid() {
  clear_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiuid_;
    voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string voiName = 3;
inline bool RT_TPS_Optgoal::has_voiname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_Optgoal::set_has_voiname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_Optgoal::clear_has_voiname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_Optgoal::clear_voiname() {
  if (voiname_ != &::google::protobuf::internal::kEmptyString) {
    voiname_->clear();
  }
  clear_has_voiname();
}
inline const ::std::string& RT_TPS_Optgoal::voiname() const {
  return *voiname_;
}
inline void RT_TPS_Optgoal::set_voiname(const ::std::string& value) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(value);
}
inline void RT_TPS_Optgoal::set_voiname(const char* value) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(value);
}
inline void RT_TPS_Optgoal::set_voiname(const char* value, size_t size) {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  voiname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Optgoal::mutable_voiname() {
  set_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    voiname_ = new ::std::string;
  }
  return voiname_;
}
inline ::std::string* RT_TPS_Optgoal::release_voiname() {
  clear_has_voiname();
  if (voiname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiname_;
    voiname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 planningRole = 4;
inline bool RT_TPS_Optgoal::has_planningrole() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_Optgoal::set_has_planningrole() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_Optgoal::clear_has_planningrole() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_Optgoal::clear_planningrole() {
  planningrole_ = 0;
  clear_has_planningrole();
}
inline ::google::protobuf::int32 RT_TPS_Optgoal::planningrole() const {
  return planningrole_;
}
inline void RT_TPS_Optgoal::set_planningrole(::google::protobuf::int32 value) {
  set_has_planningrole();
  planningrole_ = value;
}

// optional int32 fuctionType = 5;
inline bool RT_TPS_Optgoal::has_fuctiontype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_Optgoal::set_has_fuctiontype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_Optgoal::clear_has_fuctiontype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_Optgoal::clear_fuctiontype() {
  fuctiontype_ = 0;
  clear_has_fuctiontype();
}
inline ::google::protobuf::int32 RT_TPS_Optgoal::fuctiontype() const {
  return fuctiontype_;
}
inline void RT_TPS_Optgoal::set_fuctiontype(::google::protobuf::int32 value) {
  set_has_fuctiontype();
  fuctiontype_ = value;
}

// optional int32 minMaxFlag = 6;
inline bool RT_TPS_Optgoal::has_minmaxflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_Optgoal::set_has_minmaxflag() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_Optgoal::clear_has_minmaxflag() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_Optgoal::clear_minmaxflag() {
  minmaxflag_ = 0;
  clear_has_minmaxflag();
}
inline ::google::protobuf::int32 RT_TPS_Optgoal::minmaxflag() const {
  return minmaxflag_;
}
inline void RT_TPS_Optgoal::set_minmaxflag(::google::protobuf::int32 value) {
  set_has_minmaxflag();
  minmaxflag_ = value;
}

// optional float dose = 7;
inline bool RT_TPS_Optgoal::has_dose() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_Optgoal::set_has_dose() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_Optgoal::clear_has_dose() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_Optgoal::clear_dose() {
  dose_ = 0;
  clear_has_dose();
}
inline float RT_TPS_Optgoal::dose() const {
  return dose_;
}
inline void RT_TPS_Optgoal::set_dose(float value) {
  set_has_dose();
  dose_ = value;
}

// optional float volume = 8;
inline bool RT_TPS_Optgoal::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_Optgoal::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_Optgoal::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_Optgoal::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline float RT_TPS_Optgoal::volume() const {
  return volume_;
}
inline void RT_TPS_Optgoal::set_volume(float value) {
  set_has_volume();
  volume_ = value;
}

// optional float eud = 9;
inline bool RT_TPS_Optgoal::has_eud() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_Optgoal::set_has_eud() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_Optgoal::clear_has_eud() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_Optgoal::clear_eud() {
  eud_ = 0;
  clear_has_eud();
}
inline float RT_TPS_Optgoal::eud() const {
  return eud_;
}
inline void RT_TPS_Optgoal::set_eud(float value) {
  set_has_eud();
  eud_ = value;
}

// optional float weight = 10;
inline bool RT_TPS_Optgoal::has_weight() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_Optgoal::set_has_weight() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_Optgoal::clear_has_weight() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_Optgoal::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float RT_TPS_Optgoal::weight() const {
  return weight_;
}
inline void RT_TPS_Optgoal::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// optional bool isHard = 11;
inline bool RT_TPS_Optgoal::has_ishard() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_Optgoal::set_has_ishard() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_Optgoal::clear_has_ishard() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_Optgoal::clear_ishard() {
  ishard_ = false;
  clear_has_ishard();
}
inline bool RT_TPS_Optgoal::ishard() const {
  return ishard_;
}
inline void RT_TPS_Optgoal::set_ishard(bool value) {
  set_has_ishard();
  ishard_ = value;
}

// optional string optGoalUid = 12;
inline bool RT_TPS_Optgoal::has_optgoaluid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_TPS_Optgoal::set_has_optgoaluid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_TPS_Optgoal::clear_has_optgoaluid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_TPS_Optgoal::clear_optgoaluid() {
  if (optgoaluid_ != &::google::protobuf::internal::kEmptyString) {
    optgoaluid_->clear();
  }
  clear_has_optgoaluid();
}
inline const ::std::string& RT_TPS_Optgoal::optgoaluid() const {
  return *optgoaluid_;
}
inline void RT_TPS_Optgoal::set_optgoaluid(const ::std::string& value) {
  set_has_optgoaluid();
  if (optgoaluid_ == &::google::protobuf::internal::kEmptyString) {
    optgoaluid_ = new ::std::string;
  }
  optgoaluid_->assign(value);
}
inline void RT_TPS_Optgoal::set_optgoaluid(const char* value) {
  set_has_optgoaluid();
  if (optgoaluid_ == &::google::protobuf::internal::kEmptyString) {
    optgoaluid_ = new ::std::string;
  }
  optgoaluid_->assign(value);
}
inline void RT_TPS_Optgoal::set_optgoaluid(const char* value, size_t size) {
  set_has_optgoaluid();
  if (optgoaluid_ == &::google::protobuf::internal::kEmptyString) {
    optgoaluid_ = new ::std::string;
  }
  optgoaluid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_Optgoal::mutable_optgoaluid() {
  set_has_optgoaluid();
  if (optgoaluid_ == &::google::protobuf::internal::kEmptyString) {
    optgoaluid_ = new ::std::string;
  }
  return optgoaluid_;
}
inline ::std::string* RT_TPS_Optgoal::release_optgoaluid() {
  clear_has_optgoaluid();
  if (optgoaluid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = optgoaluid_;
    optgoaluid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool isJoinOpt = 13;
inline bool RT_TPS_Optgoal::has_isjoinopt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RT_TPS_Optgoal::set_has_isjoinopt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RT_TPS_Optgoal::clear_has_isjoinopt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RT_TPS_Optgoal::clear_isjoinopt() {
  isjoinopt_ = false;
  clear_has_isjoinopt();
}
inline bool RT_TPS_Optgoal::isjoinopt() const {
  return isjoinopt_;
}
inline void RT_TPS_Optgoal::set_isjoinopt(bool value) {
  set_has_isjoinopt();
  isjoinopt_ = value;
}

// optional float eudResult = 14;
inline bool RT_TPS_Optgoal::has_eudresult() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RT_TPS_Optgoal::set_has_eudresult() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RT_TPS_Optgoal::clear_has_eudresult() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RT_TPS_Optgoal::clear_eudresult() {
  eudresult_ = 0;
  clear_has_eudresult();
}
inline float RT_TPS_Optgoal::eudresult() const {
  return eudresult_;
}
inline void RT_TPS_Optgoal::set_eudresult(float value) {
  set_has_eudresult();
  eudresult_ = value;
}

// optional int32 id = 15;
inline bool RT_TPS_Optgoal::has_id() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RT_TPS_Optgoal::set_has_id() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RT_TPS_Optgoal::clear_has_id() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RT_TPS_Optgoal::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RT_TPS_Optgoal::id() const {
  return id_;
}
inline void RT_TPS_Optgoal::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// RT_TPS_OptgoalList

// repeated .tps.proto.RT_TPS_Optgoal opts = 1;
inline int RT_TPS_OptgoalList::opts_size() const {
  return opts_.size();
}
inline void RT_TPS_OptgoalList::clear_opts() {
  opts_.Clear();
}
inline const ::tps::proto::RT_TPS_Optgoal& RT_TPS_OptgoalList::opts(int index) const {
  return opts_.Get(index);
}
inline ::tps::proto::RT_TPS_Optgoal* RT_TPS_OptgoalList::mutable_opts(int index) {
  return opts_.Mutable(index);
}
inline ::tps::proto::RT_TPS_Optgoal* RT_TPS_OptgoalList::add_opts() {
  return opts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Optgoal >&
RT_TPS_OptgoalList::opts() const {
  return opts_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_Optgoal >*
RT_TPS_OptgoalList::mutable_opts() {
  return &opts_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5foptgoals_2eproto__INCLUDED
