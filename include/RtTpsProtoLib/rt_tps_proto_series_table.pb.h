// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_series_table.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fseries_5ftable_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fseries_5ftable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_5ftable_2eproto();

class RtTpsProtoSeriesTable;
class RtTpsProtoRepeatedSeriesTable;

// ===================================================================

class RtTpsProtoSeriesTable : public ::google::protobuf::Message {
 public:
  RtTpsProtoSeriesTable();
  virtual ~RtTpsProtoSeriesTable();
  
  RtTpsProtoSeriesTable(const RtTpsProtoSeriesTable& from);
  
  inline RtTpsProtoSeriesTable& operator=(const RtTpsProtoSeriesTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoSeriesTable& default_instance();
  
  void Swap(RtTpsProtoSeriesTable* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoSeriesTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoSeriesTable& from);
  void MergeFrom(const RtTpsProtoSeriesTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string tableUid = 1;
  inline bool has_tableuid() const;
  inline void clear_tableuid();
  static const int kTableUidFieldNumber = 1;
  inline const ::std::string& tableuid() const;
  inline void set_tableuid(const ::std::string& value);
  inline void set_tableuid(const char* value);
  inline void set_tableuid(const char* value, size_t size);
  inline ::std::string* mutable_tableuid();
  inline ::std::string* release_tableuid();
  
  // required string seriesUid = 2;
  inline bool has_seriesuid() const;
  inline void clear_seriesuid();
  static const int kSeriesUidFieldNumber = 2;
  inline const ::std::string& seriesuid() const;
  inline void set_seriesuid(const ::std::string& value);
  inline void set_seriesuid(const char* value);
  inline void set_seriesuid(const char* value, size_t size);
  inline ::std::string* mutable_seriesuid();
  inline ::std::string* release_seriesuid();
  
  // required float averageMassDensity = 3;
  inline bool has_averagemassdensity() const;
  inline void clear_averagemassdensity();
  static const int kAverageMassDensityFieldNumber = 3;
  inline float averagemassdensity() const;
  inline void set_averagemassdensity(float value);
  
  // required float offsetX = 4;
  inline bool has_offsetx() const;
  inline void clear_offsetx();
  static const int kOffsetXFieldNumber = 4;
  inline float offsetx() const;
  inline void set_offsetx(float value);
  
  // required float offsetY = 5;
  inline bool has_offsety() const;
  inline void clear_offsety();
  static const int kOffsetYFieldNumber = 5;
  inline float offsety() const;
  inline void set_offsety(float value);
  
  // required float offsetZ = 6;
  inline bool has_offsetz() const;
  inline void clear_offsetz();
  static const int kOffsetZFieldNumber = 6;
  inline float offsetz() const;
  inline void set_offsetz(float value);
  
  // required float angleX = 7;
  inline bool has_anglex() const;
  inline void clear_anglex();
  static const int kAngleXFieldNumber = 7;
  inline float anglex() const;
  inline void set_anglex(float value);
  
  // required float angleY = 8;
  inline bool has_angley() const;
  inline void clear_angley();
  static const int kAngleYFieldNumber = 8;
  inline float angley() const;
  inline void set_angley(float value);
  
  // required float angleZ = 9;
  inline bool has_anglez() const;
  inline void clear_anglez();
  static const int kAngleZFieldNumber = 9;
  inline float anglez() const;
  inline void set_anglez(float value);
  
  // required float referenceElectronDensity = 10;
  inline bool has_referenceelectrondensity() const;
  inline void clear_referenceelectrondensity();
  static const int kReferenceElectronDensityFieldNumber = 10;
  inline float referenceelectrondensity() const;
  inline void set_referenceelectrondensity(float value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoSeriesTable)
 private:
  inline void set_has_tableuid();
  inline void clear_has_tableuid();
  inline void set_has_seriesuid();
  inline void clear_has_seriesuid();
  inline void set_has_averagemassdensity();
  inline void clear_has_averagemassdensity();
  inline void set_has_offsetx();
  inline void clear_has_offsetx();
  inline void set_has_offsety();
  inline void clear_has_offsety();
  inline void set_has_offsetz();
  inline void clear_has_offsetz();
  inline void set_has_anglex();
  inline void clear_has_anglex();
  inline void set_has_angley();
  inline void clear_has_angley();
  inline void set_has_anglez();
  inline void clear_has_anglez();
  inline void set_has_referenceelectrondensity();
  inline void clear_has_referenceelectrondensity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* tableuid_;
  ::std::string* seriesuid_;
  float averagemassdensity_;
  float offsetx_;
  float offsety_;
  float offsetz_;
  float anglex_;
  float angley_;
  float anglez_;
  float referenceelectrondensity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoSeriesTable* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedSeriesTable : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedSeriesTable();
  virtual ~RtTpsProtoRepeatedSeriesTable();
  
  RtTpsProtoRepeatedSeriesTable(const RtTpsProtoRepeatedSeriesTable& from);
  
  inline RtTpsProtoRepeatedSeriesTable& operator=(const RtTpsProtoRepeatedSeriesTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedSeriesTable& default_instance();
  
  void Swap(RtTpsProtoRepeatedSeriesTable* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedSeriesTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedSeriesTable& from);
  void MergeFrom(const RtTpsProtoRepeatedSeriesTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
  inline int seriestable_size() const;
  inline void clear_seriestable();
  static const int kSeriesTableFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoSeriesTable& seriestable(int index) const;
  inline ::tps::proto::RtTpsProtoSeriesTable* mutable_seriestable(int index);
  inline ::tps::proto::RtTpsProtoSeriesTable* add_seriestable();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSeriesTable >&
      seriestable() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSeriesTable >*
      mutable_seriestable();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedSeriesTable)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSeriesTable > seriestable_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fseries_5ftable_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedSeriesTable* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoSeriesTable

// required string tableUid = 1;
inline bool RtTpsProtoSeriesTable::has_tableuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_tableuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoSeriesTable::clear_has_tableuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoSeriesTable::clear_tableuid() {
  if (tableuid_ != &::google::protobuf::internal::kEmptyString) {
    tableuid_->clear();
  }
  clear_has_tableuid();
}
inline const ::std::string& RtTpsProtoSeriesTable::tableuid() const {
  return *tableuid_;
}
inline void RtTpsProtoSeriesTable::set_tableuid(const ::std::string& value) {
  set_has_tableuid();
  if (tableuid_ == &::google::protobuf::internal::kEmptyString) {
    tableuid_ = new ::std::string;
  }
  tableuid_->assign(value);
}
inline void RtTpsProtoSeriesTable::set_tableuid(const char* value) {
  set_has_tableuid();
  if (tableuid_ == &::google::protobuf::internal::kEmptyString) {
    tableuid_ = new ::std::string;
  }
  tableuid_->assign(value);
}
inline void RtTpsProtoSeriesTable::set_tableuid(const char* value, size_t size) {
  set_has_tableuid();
  if (tableuid_ == &::google::protobuf::internal::kEmptyString) {
    tableuid_ = new ::std::string;
  }
  tableuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoSeriesTable::mutable_tableuid() {
  set_has_tableuid();
  if (tableuid_ == &::google::protobuf::internal::kEmptyString) {
    tableuid_ = new ::std::string;
  }
  return tableuid_;
}
inline ::std::string* RtTpsProtoSeriesTable::release_tableuid() {
  clear_has_tableuid();
  if (tableuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tableuid_;
    tableuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string seriesUid = 2;
inline bool RtTpsProtoSeriesTable::has_seriesuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_seriesuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoSeriesTable::clear_has_seriesuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoSeriesTable::clear_seriesuid() {
  if (seriesuid_ != &::google::protobuf::internal::kEmptyString) {
    seriesuid_->clear();
  }
  clear_has_seriesuid();
}
inline const ::std::string& RtTpsProtoSeriesTable::seriesuid() const {
  return *seriesuid_;
}
inline void RtTpsProtoSeriesTable::set_seriesuid(const ::std::string& value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoSeriesTable::set_seriesuid(const char* value) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(value);
}
inline void RtTpsProtoSeriesTable::set_seriesuid(const char* value, size_t size) {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  seriesuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoSeriesTable::mutable_seriesuid() {
  set_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    seriesuid_ = new ::std::string;
  }
  return seriesuid_;
}
inline ::std::string* RtTpsProtoSeriesTable::release_seriesuid() {
  clear_has_seriesuid();
  if (seriesuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = seriesuid_;
    seriesuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float averageMassDensity = 3;
inline bool RtTpsProtoSeriesTable::has_averagemassdensity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_averagemassdensity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoSeriesTable::clear_has_averagemassdensity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoSeriesTable::clear_averagemassdensity() {
  averagemassdensity_ = 0;
  clear_has_averagemassdensity();
}
inline float RtTpsProtoSeriesTable::averagemassdensity() const {
  return averagemassdensity_;
}
inline void RtTpsProtoSeriesTable::set_averagemassdensity(float value) {
  set_has_averagemassdensity();
  averagemassdensity_ = value;
}

// required float offsetX = 4;
inline bool RtTpsProtoSeriesTable::has_offsetx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_offsetx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoSeriesTable::clear_has_offsetx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoSeriesTable::clear_offsetx() {
  offsetx_ = 0;
  clear_has_offsetx();
}
inline float RtTpsProtoSeriesTable::offsetx() const {
  return offsetx_;
}
inline void RtTpsProtoSeriesTable::set_offsetx(float value) {
  set_has_offsetx();
  offsetx_ = value;
}

// required float offsetY = 5;
inline bool RtTpsProtoSeriesTable::has_offsety() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_offsety() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoSeriesTable::clear_has_offsety() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoSeriesTable::clear_offsety() {
  offsety_ = 0;
  clear_has_offsety();
}
inline float RtTpsProtoSeriesTable::offsety() const {
  return offsety_;
}
inline void RtTpsProtoSeriesTable::set_offsety(float value) {
  set_has_offsety();
  offsety_ = value;
}

// required float offsetZ = 6;
inline bool RtTpsProtoSeriesTable::has_offsetz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_offsetz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoSeriesTable::clear_has_offsetz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoSeriesTable::clear_offsetz() {
  offsetz_ = 0;
  clear_has_offsetz();
}
inline float RtTpsProtoSeriesTable::offsetz() const {
  return offsetz_;
}
inline void RtTpsProtoSeriesTable::set_offsetz(float value) {
  set_has_offsetz();
  offsetz_ = value;
}

// required float angleX = 7;
inline bool RtTpsProtoSeriesTable::has_anglex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_anglex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoSeriesTable::clear_has_anglex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoSeriesTable::clear_anglex() {
  anglex_ = 0;
  clear_has_anglex();
}
inline float RtTpsProtoSeriesTable::anglex() const {
  return anglex_;
}
inline void RtTpsProtoSeriesTable::set_anglex(float value) {
  set_has_anglex();
  anglex_ = value;
}

// required float angleY = 8;
inline bool RtTpsProtoSeriesTable::has_angley() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_angley() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoSeriesTable::clear_has_angley() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoSeriesTable::clear_angley() {
  angley_ = 0;
  clear_has_angley();
}
inline float RtTpsProtoSeriesTable::angley() const {
  return angley_;
}
inline void RtTpsProtoSeriesTable::set_angley(float value) {
  set_has_angley();
  angley_ = value;
}

// required float angleZ = 9;
inline bool RtTpsProtoSeriesTable::has_anglez() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_anglez() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoSeriesTable::clear_has_anglez() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoSeriesTable::clear_anglez() {
  anglez_ = 0;
  clear_has_anglez();
}
inline float RtTpsProtoSeriesTable::anglez() const {
  return anglez_;
}
inline void RtTpsProtoSeriesTable::set_anglez(float value) {
  set_has_anglez();
  anglez_ = value;
}

// required float referenceElectronDensity = 10;
inline bool RtTpsProtoSeriesTable::has_referenceelectrondensity() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoSeriesTable::set_has_referenceelectrondensity() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoSeriesTable::clear_has_referenceelectrondensity() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoSeriesTable::clear_referenceelectrondensity() {
  referenceelectrondensity_ = 0;
  clear_has_referenceelectrondensity();
}
inline float RtTpsProtoSeriesTable::referenceelectrondensity() const {
  return referenceelectrondensity_;
}
inline void RtTpsProtoSeriesTable::set_referenceelectrondensity(float value) {
  set_has_referenceelectrondensity();
  referenceelectrondensity_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedSeriesTable

// repeated .tps.proto.RtTpsProtoSeriesTable seriesTable = 1;
inline int RtTpsProtoRepeatedSeriesTable::seriestable_size() const {
  return seriestable_.size();
}
inline void RtTpsProtoRepeatedSeriesTable::clear_seriestable() {
  seriestable_.Clear();
}
inline const ::tps::proto::RtTpsProtoSeriesTable& RtTpsProtoRepeatedSeriesTable::seriestable(int index) const {
  return seriestable_.Get(index);
}
inline ::tps::proto::RtTpsProtoSeriesTable* RtTpsProtoRepeatedSeriesTable::mutable_seriestable(int index) {
  return seriestable_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoSeriesTable* RtTpsProtoRepeatedSeriesTable::add_seriestable() {
  return seriestable_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSeriesTable >&
RtTpsProtoRepeatedSeriesTable::seriestable() const {
  return seriestable_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSeriesTable >*
RtTpsProtoRepeatedSeriesTable::mutable_seriestable() {
  return &seriestable_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fseries_5ftable_2eproto__INCLUDED
