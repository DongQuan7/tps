// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_rotate.proto

#ifndef PROTOBUF_rt_5ftps_5frotate_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5frotate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5frotate_2eproto();
void protobuf_AssignDesc_rt_5ftps_5frotate_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5frotate_2eproto();

class RT_TPS_ROTATE_SHADEDSURFACE;

// ===================================================================

class RT_TPS_ROTATE_SHADEDSURFACE : public ::google::protobuf::Message {
 public:
  RT_TPS_ROTATE_SHADEDSURFACE();
  virtual ~RT_TPS_ROTATE_SHADEDSURFACE();
  
  RT_TPS_ROTATE_SHADEDSURFACE(const RT_TPS_ROTATE_SHADEDSURFACE& from);
  
  inline RT_TPS_ROTATE_SHADEDSURFACE& operator=(const RT_TPS_ROTATE_SHADEDSURFACE& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_ROTATE_SHADEDSURFACE& default_instance();
  
  void Swap(RT_TPS_ROTATE_SHADEDSURFACE* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_ROTATE_SHADEDSURFACE* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_ROTATE_SHADEDSURFACE& from);
  void MergeFrom(const RT_TPS_ROTATE_SHADEDSURFACE& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 viewerControlID = 1;
  inline bool has_viewercontrolid() const;
  inline void clear_viewercontrolid();
  static const int kViewerControlIDFieldNumber = 1;
  inline ::google::protobuf::int32 viewercontrolid() const;
  inline void set_viewercontrolid(::google::protobuf::int32 value);
  
  // optional int32 cellID = 2;
  inline bool has_cellid() const;
  inline void clear_cellid();
  static const int kCellIDFieldNumber = 2;
  inline ::google::protobuf::int32 cellid() const;
  inline void set_cellid(::google::protobuf::int32 value);
  
  // optional float preCoordX = 3;
  inline bool has_precoordx() const;
  inline void clear_precoordx();
  static const int kPreCoordXFieldNumber = 3;
  inline float precoordx() const;
  inline void set_precoordx(float value);
  
  // optional float preCoordY = 4;
  inline bool has_precoordy() const;
  inline void clear_precoordy();
  static const int kPreCoordYFieldNumber = 4;
  inline float precoordy() const;
  inline void set_precoordy(float value);
  
  // required float currentCoordX = 5;
  inline bool has_currentcoordx() const;
  inline void clear_currentcoordx();
  static const int kCurrentCoordXFieldNumber = 5;
  inline float currentcoordx() const;
  inline void set_currentcoordx(float value);
  
  // required float currentCoordY = 6;
  inline bool has_currentcoordy() const;
  inline void clear_currentcoordy();
  static const int kCurrentCoordYFieldNumber = 6;
  inline float currentcoordy() const;
  inline void set_currentcoordy(float value);
  
  // optional int32 mouseType = 7;
  inline bool has_mousetype() const;
  inline void clear_mousetype();
  static const int kMouseTypeFieldNumber = 7;
  inline ::google::protobuf::int32 mousetype() const;
  inline void set_mousetype(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_ROTATE_SHADEDSURFACE)
 private:
  inline void set_has_viewercontrolid();
  inline void clear_has_viewercontrolid();
  inline void set_has_cellid();
  inline void clear_has_cellid();
  inline void set_has_precoordx();
  inline void clear_has_precoordx();
  inline void set_has_precoordy();
  inline void clear_has_precoordy();
  inline void set_has_currentcoordx();
  inline void clear_has_currentcoordx();
  inline void set_has_currentcoordy();
  inline void clear_has_currentcoordy();
  inline void set_has_mousetype();
  inline void clear_has_mousetype();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 viewercontrolid_;
  ::google::protobuf::int32 cellid_;
  float precoordx_;
  float precoordy_;
  float currentcoordx_;
  float currentcoordy_;
  ::google::protobuf::int32 mousetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5frotate_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5frotate_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5frotate_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_ROTATE_SHADEDSURFACE* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_ROTATE_SHADEDSURFACE

// optional int32 viewerControlID = 1;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_viewercontrolid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_viewercontrolid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_viewercontrolid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_viewercontrolid() {
  viewercontrolid_ = 0;
  clear_has_viewercontrolid();
}
inline ::google::protobuf::int32 RT_TPS_ROTATE_SHADEDSURFACE::viewercontrolid() const {
  return viewercontrolid_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_viewercontrolid(::google::protobuf::int32 value) {
  set_has_viewercontrolid();
  viewercontrolid_ = value;
}

// optional int32 cellID = 2;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_cellid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_cellid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_cellid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_cellid() {
  cellid_ = 0;
  clear_has_cellid();
}
inline ::google::protobuf::int32 RT_TPS_ROTATE_SHADEDSURFACE::cellid() const {
  return cellid_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_cellid(::google::protobuf::int32 value) {
  set_has_cellid();
  cellid_ = value;
}

// optional float preCoordX = 3;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_precoordx() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_precoordx() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_precoordx() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_precoordx() {
  precoordx_ = 0;
  clear_has_precoordx();
}
inline float RT_TPS_ROTATE_SHADEDSURFACE::precoordx() const {
  return precoordx_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_precoordx(float value) {
  set_has_precoordx();
  precoordx_ = value;
}

// optional float preCoordY = 4;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_precoordy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_precoordy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_precoordy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_precoordy() {
  precoordy_ = 0;
  clear_has_precoordy();
}
inline float RT_TPS_ROTATE_SHADEDSURFACE::precoordy() const {
  return precoordy_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_precoordy(float value) {
  set_has_precoordy();
  precoordy_ = value;
}

// required float currentCoordX = 5;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_currentcoordx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_currentcoordx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_currentcoordx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_currentcoordx() {
  currentcoordx_ = 0;
  clear_has_currentcoordx();
}
inline float RT_TPS_ROTATE_SHADEDSURFACE::currentcoordx() const {
  return currentcoordx_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_currentcoordx(float value) {
  set_has_currentcoordx();
  currentcoordx_ = value;
}

// required float currentCoordY = 6;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_currentcoordy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_currentcoordy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_currentcoordy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_currentcoordy() {
  currentcoordy_ = 0;
  clear_has_currentcoordy();
}
inline float RT_TPS_ROTATE_SHADEDSURFACE::currentcoordy() const {
  return currentcoordy_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_currentcoordy(float value) {
  set_has_currentcoordy();
  currentcoordy_ = value;
}

// optional int32 mouseType = 7;
inline bool RT_TPS_ROTATE_SHADEDSURFACE::has_mousetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_has_mousetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_has_mousetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::clear_mousetype() {
  mousetype_ = 0;
  clear_has_mousetype();
}
inline ::google::protobuf::int32 RT_TPS_ROTATE_SHADEDSURFACE::mousetype() const {
  return mousetype_;
}
inline void RT_TPS_ROTATE_SHADEDSURFACE::set_mousetype(::google::protobuf::int32 value) {
  set_has_mousetype();
  mousetype_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5frotate_2eproto__INCLUDED
