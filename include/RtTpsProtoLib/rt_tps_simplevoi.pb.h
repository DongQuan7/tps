// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_simplevoi.proto

#ifndef PROTOBUF_rt_5ftps_5fsimplevoi_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fsimplevoi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fsimplevoi_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fsimplevoi_2eproto();

class RT_TPS_SimpleVOI;

// ===================================================================

class RT_TPS_SimpleVOI : public ::google::protobuf::Message {
 public:
  RT_TPS_SimpleVOI();
  virtual ~RT_TPS_SimpleVOI();
  
  RT_TPS_SimpleVOI(const RT_TPS_SimpleVOI& from);
  
  inline RT_TPS_SimpleVOI& operator=(const RT_TPS_SimpleVOI& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_SimpleVOI& default_instance();
  
  void Swap(RT_TPS_SimpleVOI* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_SimpleVOI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_SimpleVOI& from);
  void MergeFrom(const RT_TPS_SimpleVOI& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required int32 planningRole = 2;
  inline bool has_planningrole() const;
  inline void clear_planningrole();
  static const int kPlanningRoleFieldNumber = 2;
  inline ::google::protobuf::int32 planningrole() const;
  inline void set_planningrole(::google::protobuf::int32 value);
  
  // required int32 subrole = 3;
  inline bool has_subrole() const;
  inline void clear_subrole();
  static const int kSubroleFieldNumber = 3;
  inline ::google::protobuf::int32 subrole() const;
  inline void set_subrole(::google::protobuf::int32 value);
  
  // repeated float color = 4;
  inline int color_size() const;
  inline void clear_color();
  static const int kColorFieldNumber = 4;
  inline float color(int index) const;
  inline void set_color(int index, float value);
  inline void add_color(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      color() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_color();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_SimpleVOI)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_planningrole();
  inline void clear_has_planningrole();
  inline void set_has_subrole();
  inline void clear_has_subrole();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::int32 planningrole_;
  ::google::protobuf::int32 subrole_;
  ::google::protobuf::RepeatedField< float > color_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fsimplevoi_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fsimplevoi_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fsimplevoi_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_SimpleVOI* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_SimpleVOI

// optional string name = 1;
inline bool RT_TPS_SimpleVOI::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_SimpleVOI::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_SimpleVOI::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_SimpleVOI::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& RT_TPS_SimpleVOI::name() const {
  return *name_;
}
inline void RT_TPS_SimpleVOI::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RT_TPS_SimpleVOI::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RT_TPS_SimpleVOI::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_SimpleVOI::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* RT_TPS_SimpleVOI::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 planningRole = 2;
inline bool RT_TPS_SimpleVOI::has_planningrole() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_SimpleVOI::set_has_planningrole() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_SimpleVOI::clear_has_planningrole() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_SimpleVOI::clear_planningrole() {
  planningrole_ = 0;
  clear_has_planningrole();
}
inline ::google::protobuf::int32 RT_TPS_SimpleVOI::planningrole() const {
  return planningrole_;
}
inline void RT_TPS_SimpleVOI::set_planningrole(::google::protobuf::int32 value) {
  set_has_planningrole();
  planningrole_ = value;
}

// required int32 subrole = 3;
inline bool RT_TPS_SimpleVOI::has_subrole() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_SimpleVOI::set_has_subrole() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_SimpleVOI::clear_has_subrole() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_SimpleVOI::clear_subrole() {
  subrole_ = 0;
  clear_has_subrole();
}
inline ::google::protobuf::int32 RT_TPS_SimpleVOI::subrole() const {
  return subrole_;
}
inline void RT_TPS_SimpleVOI::set_subrole(::google::protobuf::int32 value) {
  set_has_subrole();
  subrole_ = value;
}

// repeated float color = 4;
inline int RT_TPS_SimpleVOI::color_size() const {
  return color_.size();
}
inline void RT_TPS_SimpleVOI::clear_color() {
  color_.Clear();
}
inline float RT_TPS_SimpleVOI::color(int index) const {
  return color_.Get(index);
}
inline void RT_TPS_SimpleVOI::set_color(int index, float value) {
  color_.Set(index, value);
}
inline void RT_TPS_SimpleVOI::add_color(float value) {
  color_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
RT_TPS_SimpleVOI::color() const {
  return color_;
}
inline ::google::protobuf::RepeatedField< float >*
RT_TPS_SimpleVOI::mutable_color() {
  return &color_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fsimplevoi_2eproto__INCLUDED
