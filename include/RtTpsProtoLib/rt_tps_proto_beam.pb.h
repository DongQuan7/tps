// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_beam.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fbeam_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fbeam_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rt_tps_proto_segment.pb.h"
#include "rt_tps_proto_block.pb.h"
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_2eproto();

class RtTpsProtoBeam;
class RtTpsProtoRepeatedBeam;

// ===================================================================

class RtTpsProtoBeam : public ::google::protobuf::Message {
 public:
  RtTpsProtoBeam();
  virtual ~RtTpsProtoBeam();
  
  RtTpsProtoBeam(const RtTpsProtoBeam& from);
  
  inline RtTpsProtoBeam& operator=(const RtTpsProtoBeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoBeam& default_instance();
  
  void Swap(RtTpsProtoBeam* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoBeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoBeam& from);
  void MergeFrom(const RtTpsProtoBeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string beam_uid = 1;
  inline bool has_beam_uid() const;
  inline void clear_beam_uid();
  static const int kBeamUidFieldNumber = 1;
  inline const ::std::string& beam_uid() const;
  inline void set_beam_uid(const ::std::string& value);
  inline void set_beam_uid(const char* value);
  inline void set_beam_uid(const char* value, size_t size);
  inline ::std::string* mutable_beam_uid();
  inline ::std::string* release_beam_uid();
  
  // optional string normal_group_uid = 2;
  inline bool has_normal_group_uid() const;
  inline void clear_normal_group_uid();
  static const int kNormalGroupUidFieldNumber = 2;
  inline const ::std::string& normal_group_uid() const;
  inline void set_normal_group_uid(const ::std::string& value);
  inline void set_normal_group_uid(const char* value);
  inline void set_normal_group_uid(const char* value, size_t size);
  inline ::std::string* mutable_normal_group_uid();
  inline ::std::string* release_normal_group_uid();
  
  // optional int32 beam_number = 3;
  inline bool has_beam_number() const;
  inline void clear_beam_number();
  static const int kBeamNumberFieldNumber = 3;
  inline ::google::protobuf::int32 beam_number() const;
  inline void set_beam_number(::google::protobuf::int32 value);
  
  // optional string beam_name = 4;
  inline bool has_beam_name() const;
  inline void clear_beam_name();
  static const int kBeamNameFieldNumber = 4;
  inline const ::std::string& beam_name() const;
  inline void set_beam_name(const ::std::string& value);
  inline void set_beam_name(const char* value);
  inline void set_beam_name(const char* value, size_t size);
  inline ::std::string* mutable_beam_name();
  inline ::std::string* release_beam_name();
  
  // optional string beam_description = 5;
  inline bool has_beam_description() const;
  inline void clear_beam_description();
  static const int kBeamDescriptionFieldNumber = 5;
  inline const ::std::string& beam_description() const;
  inline void set_beam_description(const ::std::string& value);
  inline void set_beam_description(const char* value);
  inline void set_beam_description(const char* value, size_t size);
  inline ::std::string* mutable_beam_description();
  inline ::std::string* release_beam_description();
  
  // optional string commissioned_unit_uid = 6;
  inline bool has_commissioned_unit_uid() const;
  inline void clear_commissioned_unit_uid();
  static const int kCommissionedUnitUidFieldNumber = 6;
  inline const ::std::string& commissioned_unit_uid() const;
  inline void set_commissioned_unit_uid(const ::std::string& value);
  inline void set_commissioned_unit_uid(const char* value);
  inline void set_commissioned_unit_uid(const char* value, size_t size);
  inline ::std::string* mutable_commissioned_unit_uid();
  inline ::std::string* release_commissioned_unit_uid();
  
  // optional string isocenter_uid = 7;
  inline bool has_isocenter_uid() const;
  inline void clear_isocenter_uid();
  static const int kIsocenterUidFieldNumber = 7;
  inline const ::std::string& isocenter_uid() const;
  inline void set_isocenter_uid(const ::std::string& value);
  inline void set_isocenter_uid(const char* value);
  inline void set_isocenter_uid(const char* value, size_t size);
  inline ::std::string* mutable_isocenter_uid();
  inline ::std::string* release_isocenter_uid();
  
  // optional float ssd = 8;
  inline bool has_ssd() const;
  inline void clear_ssd();
  static const int kSsdFieldNumber = 8;
  inline float ssd() const;
  inline void set_ssd(float value);
  
  // optional float beam_mu = 9;
  inline bool has_beam_mu() const;
  inline void clear_beam_mu();
  static const int kBeamMuFieldNumber = 9;
  inline float beam_mu() const;
  inline void set_beam_mu(float value);
  
  // optional bool is_visible = 10;
  inline bool has_is_visible() const;
  inline void clear_is_visible();
  static const int kIsVisibleFieldNumber = 10;
  inline bool is_visible() const;
  inline void set_is_visible(bool value);
  
  // optional bool is_clockwise = 11;
  inline bool has_is_clockwise() const;
  inline void clear_is_clockwise();
  static const int kIsClockwiseFieldNumber = 11;
  inline bool is_clockwise() const;
  inline void set_is_clockwise(bool value);
  
  // optional bool is_joined = 12;
  inline bool has_is_joined() const;
  inline void clear_is_joined();
  static const int kIsJoinedFieldNumber = 12;
  inline bool is_joined() const;
  inline void set_is_joined(bool value);
  
  // optional int32 edit_type = 13;
  inline bool has_edit_type() const;
  inline void clear_edit_type();
  static const int kEditTypeFieldNumber = 13;
  inline ::google::protobuf::int32 edit_type() const;
  inline void set_edit_type(::google::protobuf::int32 value);
  
  // optional float beam_weight = 14;
  inline bool has_beam_weight() const;
  inline void clear_beam_weight();
  static const int kBeamWeightFieldNumber = 14;
  inline float beam_weight() const;
  inline void set_beam_weight(float value);
  
  // optional float dose_rate = 15;
  inline bool has_dose_rate() const;
  inline void clear_dose_rate();
  static const int kDoseRateFieldNumber = 15;
  inline float dose_rate() const;
  inline void set_dose_rate(float value);
  
  // optional float beam_dose = 16;
  inline bool has_beam_dose() const;
  inline void clear_beam_dose();
  static const int kBeamDoseFieldNumber = 16;
  inline float beam_dose() const;
  inline void set_beam_dose(float value);
  
  // optional bool is_dose_valid = 17;
  inline bool has_is_dose_valid() const;
  inline void clear_is_dose_valid();
  static const int kIsDoseValidFieldNumber = 17;
  inline bool is_dose_valid() const;
  inline void set_is_dose_valid(bool value);
  
  // repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
  inline int segment_list_size() const;
  inline void clear_segment_list();
  static const int kSegmentListFieldNumber = 18;
  inline const ::tps::proto::RtTpsProtoSegment& segment_list(int index) const;
  inline ::tps::proto::RtTpsProtoSegment* mutable_segment_list(int index);
  inline ::tps::proto::RtTpsProtoSegment* add_segment_list();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegment >&
      segment_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegment >*
      mutable_segment_list();
  
  // optional float gantry_start_angle = 19;
  inline bool has_gantry_start_angle() const;
  inline void clear_gantry_start_angle();
  static const int kGantryStartAngleFieldNumber = 19;
  inline float gantry_start_angle() const;
  inline void set_gantry_start_angle(float value);
  
  // optional float gantry_arc_length = 20;
  inline bool has_gantry_arc_length() const;
  inline void clear_gantry_arc_length();
  static const int kGantryArcLengthFieldNumber = 20;
  inline float gantry_arc_length() const;
  inline void set_gantry_arc_length(float value);
  
  // optional float collimator_angle = 21;
  inline bool has_collimator_angle() const;
  inline void clear_collimator_angle();
  static const int kCollimatorAngleFieldNumber = 21;
  inline float collimator_angle() const;
  inline void set_collimator_angle(float value);
  
  // optional float couch_angle = 22;
  inline bool has_couch_angle() const;
  inline void clear_couch_angle();
  static const int kCouchAngleFieldNumber = 22;
  inline float couch_angle() const;
  inline void set_couch_angle(float value);
  
  // optional int32 aperture_type = 23;
  inline bool has_aperture_type() const;
  inline void clear_aperture_type();
  static const int kApertureTypeFieldNumber = 23;
  inline ::google::protobuf::int32 aperture_type() const;
  inline void set_aperture_type(::google::protobuf::int32 value);
  
  // optional bool is_auto_tracking_shaped = 24;
  inline bool has_is_auto_tracking_shaped() const;
  inline void clear_is_auto_tracking_shaped();
  static const int kIsAutoTrackingShapedFieldNumber = 24;
  inline bool is_auto_tracking_shaped() const;
  inline void set_is_auto_tracking_shaped(bool value);
  
  // optional string target_voi_uid = 25;
  inline bool has_target_voi_uid() const;
  inline void clear_target_voi_uid();
  static const int kTargetVoiUidFieldNumber = 25;
  inline const ::std::string& target_voi_uid() const;
  inline void set_target_voi_uid(const ::std::string& value);
  inline void set_target_voi_uid(const char* value);
  inline void set_target_voi_uid(const char* value, size_t size);
  inline ::std::string* mutable_target_voi_uid();
  inline ::std::string* release_target_voi_uid();
  
  // optional double target_margin_x = 26;
  inline bool has_target_margin_x() const;
  inline void clear_target_margin_x();
  static const int kTargetMarginXFieldNumber = 26;
  inline double target_margin_x() const;
  inline void set_target_margin_x(double value);
  
  // optional double target_margin_y = 27;
  inline bool has_target_margin_y() const;
  inline void clear_target_margin_y();
  static const int kTargetMarginYFieldNumber = 27;
  inline double target_margin_y() const;
  inline void set_target_margin_y(double value);
  
  // optional string avoid_voi_uid = 28;
  inline bool has_avoid_voi_uid() const;
  inline void clear_avoid_voi_uid();
  static const int kAvoidVoiUidFieldNumber = 28;
  inline const ::std::string& avoid_voi_uid() const;
  inline void set_avoid_voi_uid(const ::std::string& value);
  inline void set_avoid_voi_uid(const char* value);
  inline void set_avoid_voi_uid(const char* value, size_t size);
  inline ::std::string* mutable_avoid_voi_uid();
  inline ::std::string* release_avoid_voi_uid();
  
  // optional double avoid_margin_x = 29;
  inline bool has_avoid_margin_x() const;
  inline void clear_avoid_margin_x();
  static const int kAvoidMarginXFieldNumber = 29;
  inline double avoid_margin_x() const;
  inline void set_avoid_margin_x(double value);
  
  // optional double avoid_margin_y = 30;
  inline bool has_avoid_margin_y() const;
  inline void clear_avoid_margin_y();
  static const int kAvoidMarginYFieldNumber = 30;
  inline double avoid_margin_y() const;
  inline void set_avoid_margin_y(double value);
  
  // optional bool is_jaw_follow = 31;
  inline bool has_is_jaw_follow() const;
  inline void clear_is_jaw_follow();
  static const int kIsJawFollowFieldNumber = 31;
  inline bool is_jaw_follow() const;
  inline void set_is_jaw_follow(bool value);
  
  // optional float jaw_follow_margin_x = 32;
  inline bool has_jaw_follow_margin_x() const;
  inline void clear_jaw_follow_margin_x();
  static const int kJawFollowMarginXFieldNumber = 32;
  inline float jaw_follow_margin_x() const;
  inline void set_jaw_follow_margin_x(float value);
  
  // optional float jaw_follow_margin_y = 33;
  inline bool has_jaw_follow_margin_y() const;
  inline void clear_jaw_follow_margin_y();
  static const int kJawFollowMarginYFieldNumber = 33;
  inline float jaw_follow_margin_y() const;
  inline void set_jaw_follow_margin_y(float value);
  
  // optional bool is_x_symmetric = 34;
  inline bool has_is_x_symmetric() const;
  inline void clear_is_x_symmetric();
  static const int kIsXSymmetricFieldNumber = 34;
  inline bool is_x_symmetric() const;
  inline void set_is_x_symmetric(bool value);
  
  // optional bool is_y_symmetric = 35;
  inline bool has_is_y_symmetric() const;
  inline void clear_is_y_symmetric();
  static const int kIsYSymmetricFieldNumber = 35;
  inline bool is_y_symmetric() const;
  inline void set_is_y_symmetric(bool value);
  
  // optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
  inline bool has_aperture_block() const;
  inline void clear_aperture_block();
  static const int kApertureBlockFieldNumber = 36;
  inline const ::tps::proto::RtTpsProtoBlock& aperture_block() const;
  inline ::tps::proto::RtTpsProtoBlock* mutable_aperture_block();
  inline ::tps::proto::RtTpsProtoBlock* release_aperture_block();
  
  // optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
  inline bool has_shielding_block() const;
  inline void clear_shielding_block();
  static const int kShieldingBlockFieldNumber = 37;
  inline const ::tps::proto::RtTpsProtoBlock& shielding_block() const;
  inline ::tps::proto::RtTpsProtoBlock* mutable_shielding_block();
  inline ::tps::proto::RtTpsProtoBlock* release_shielding_block();
  
  // optional bool use_shielding_block = 38;
  inline bool has_use_shielding_block() const;
  inline void clear_use_shielding_block();
  static const int kUseShieldingBlockFieldNumber = 38;
  inline bool use_shielding_block() const;
  inline void set_use_shielding_block(bool value);
  
  // optional bool is_shielding_block_auto_tracking_shape = 39;
  inline bool has_is_shielding_block_auto_tracking_shape() const;
  inline void clear_is_shielding_block_auto_tracking_shape();
  static const int kIsShieldingBlockAutoTrackingShapeFieldNumber = 39;
  inline bool is_shielding_block_auto_tracking_shape() const;
  inline void set_is_shielding_block_auto_tracking_shape(bool value);
  
  // optional string shielding_block_target_voi_uid = 40;
  inline bool has_shielding_block_target_voi_uid() const;
  inline void clear_shielding_block_target_voi_uid();
  static const int kShieldingBlockTargetVoiUidFieldNumber = 40;
  inline const ::std::string& shielding_block_target_voi_uid() const;
  inline void set_shielding_block_target_voi_uid(const ::std::string& value);
  inline void set_shielding_block_target_voi_uid(const char* value);
  inline void set_shielding_block_target_voi_uid(const char* value, size_t size);
  inline ::std::string* mutable_shielding_block_target_voi_uid();
  inline ::std::string* release_shielding_block_target_voi_uid();
  
  // optional double shielding_block_target_margin_x = 41;
  inline bool has_shielding_block_target_margin_x() const;
  inline void clear_shielding_block_target_margin_x();
  static const int kShieldingBlockTargetMarginXFieldNumber = 41;
  inline double shielding_block_target_margin_x() const;
  inline void set_shielding_block_target_margin_x(double value);
  
  // optional double shielding_block_target_margin_y = 42;
  inline bool has_shielding_block_target_margin_y() const;
  inline void clear_shielding_block_target_margin_y();
  static const int kShieldingBlockTargetMarginYFieldNumber = 42;
  inline double shielding_block_target_margin_y() const;
  inline void set_shielding_block_target_margin_y(double value);
  
  // optional string shielding_block_avoid_voi_uid = 43;
  inline bool has_shielding_block_avoid_voi_uid() const;
  inline void clear_shielding_block_avoid_voi_uid();
  static const int kShieldingBlockAvoidVoiUidFieldNumber = 43;
  inline const ::std::string& shielding_block_avoid_voi_uid() const;
  inline void set_shielding_block_avoid_voi_uid(const ::std::string& value);
  inline void set_shielding_block_avoid_voi_uid(const char* value);
  inline void set_shielding_block_avoid_voi_uid(const char* value, size_t size);
  inline ::std::string* mutable_shielding_block_avoid_voi_uid();
  inline ::std::string* release_shielding_block_avoid_voi_uid();
  
  // optional double shielding_block_avoid_margin_x = 44;
  inline bool has_shielding_block_avoid_margin_x() const;
  inline void clear_shielding_block_avoid_margin_x();
  static const int kShieldingBlockAvoidMarginXFieldNumber = 44;
  inline double shielding_block_avoid_margin_x() const;
  inline void set_shielding_block_avoid_margin_x(double value);
  
  // optional double shielding_block_avoid_margin_y = 45;
  inline bool has_shielding_block_avoid_margin_y() const;
  inline void clear_shielding_block_avoid_margin_y();
  static const int kShieldingBlockAvoidMarginYFieldNumber = 45;
  inline double shielding_block_avoid_margin_y() const;
  inline void set_shielding_block_avoid_margin_y(double value);
  
  // optional bool use_virtual_wedge = 46;
  inline bool has_use_virtual_wedge() const;
  inline void clear_use_virtual_wedge();
  static const int kUseVirtualWedgeFieldNumber = 46;
  inline bool use_virtual_wedge() const;
  inline void set_use_virtual_wedge(bool value);
  
  // optional string virtual_wedge_uid = 47;
  inline bool has_virtual_wedge_uid() const;
  inline void clear_virtual_wedge_uid();
  static const int kVirtualWedgeUidFieldNumber = 47;
  inline const ::std::string& virtual_wedge_uid() const;
  inline void set_virtual_wedge_uid(const ::std::string& value);
  inline void set_virtual_wedge_uid(const char* value);
  inline void set_virtual_wedge_uid(const char* value, size_t size);
  inline ::std::string* mutable_virtual_wedge_uid();
  inline ::std::string* release_virtual_wedge_uid();
  
  // optional bool use_physical_wedge = 48;
  inline bool has_use_physical_wedge() const;
  inline void clear_use_physical_wedge();
  static const int kUsePhysicalWedgeFieldNumber = 48;
  inline bool use_physical_wedge() const;
  inline void set_use_physical_wedge(bool value);
  
  // optional string physical_wedge_uid = 49;
  inline bool has_physical_wedge_uid() const;
  inline void clear_physical_wedge_uid();
  static const int kPhysicalWedgeUidFieldNumber = 49;
  inline const ::std::string& physical_wedge_uid() const;
  inline void set_physical_wedge_uid(const ::std::string& value);
  inline void set_physical_wedge_uid(const char* value);
  inline void set_physical_wedge_uid(const char* value, size_t size);
  inline ::std::string* mutable_physical_wedge_uid();
  inline ::std::string* release_physical_wedge_uid();
  
  // optional string tray_uid = 50;
  inline bool has_tray_uid() const;
  inline void clear_tray_uid();
  static const int kTrayUidFieldNumber = 50;
  inline const ::std::string& tray_uid() const;
  inline void set_tray_uid(const ::std::string& value);
  inline void set_tray_uid(const char* value);
  inline void set_tray_uid(const char* value, size_t size);
  inline ::std::string* mutable_tray_uid();
  inline ::std::string* release_tray_uid();
  
  // optional string bolus_voi_uid = 51;
  inline bool has_bolus_voi_uid() const;
  inline void clear_bolus_voi_uid();
  static const int kBolusVoiUidFieldNumber = 51;
  inline const ::std::string& bolus_voi_uid() const;
  inline void set_bolus_voi_uid(const ::std::string& value);
  inline void set_bolus_voi_uid(const char* value);
  inline void set_bolus_voi_uid(const char* value, size_t size);
  inline ::std::string* mutable_bolus_voi_uid();
  inline ::std::string* release_bolus_voi_uid();
  
  // optional string applicator_uid = 52;
  inline bool has_applicator_uid() const;
  inline void clear_applicator_uid();
  static const int kApplicatorUidFieldNumber = 52;
  inline const ::std::string& applicator_uid() const;
  inline void set_applicator_uid(const ::std::string& value);
  inline void set_applicator_uid(const char* value);
  inline void set_applicator_uid(const char* value, size_t size);
  inline ::std::string* mutable_applicator_uid();
  inline ::std::string* release_applicator_uid();
  
  // optional bool use_e_beam_block = 53;
  inline bool has_use_e_beam_block() const;
  inline void clear_use_e_beam_block();
  static const int kUseEBeamBlockFieldNumber = 53;
  inline bool use_e_beam_block() const;
  inline void set_use_e_beam_block(bool value);
  
  // optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
  inline bool has_e_beam_block() const;
  inline void clear_e_beam_block();
  static const int kEBeamBlockFieldNumber = 54;
  inline const ::tps::proto::RtTpsProtoBlock& e_beam_block() const;
  inline ::tps::proto::RtTpsProtoBlock* mutable_e_beam_block();
  inline ::tps::proto::RtTpsProtoBlock* release_e_beam_block();
  
  // optional bool is_auto_created = 55;
  inline bool has_is_auto_created() const;
  inline void clear_is_auto_created();
  static const int kIsAutoCreatedFieldNumber = 55;
  inline bool is_auto_created() const;
  inline void set_is_auto_created(bool value);
  
  // optional int32 mlcedittype = 56;
  inline bool has_mlcedittype() const;
  inline void clear_mlcedittype();
  static const int kMlcedittypeFieldNumber = 56;
  inline ::google::protobuf::int32 mlcedittype() const;
  inline void set_mlcedittype(::google::protobuf::int32 value);
  
  // optional int32 algorithmType = 57;
  inline bool has_algorithmtype() const;
  inline void clear_algorithmtype();
  static const int kAlgorithmTypeFieldNumber = 57;
  inline ::google::protobuf::int32 algorithmtype() const;
  inline void set_algorithmtype(::google::protobuf::int32 value);
  
  // optional string dosegrid_uid = 58;
  inline bool has_dosegrid_uid() const;
  inline void clear_dosegrid_uid();
  static const int kDosegridUidFieldNumber = 58;
  inline const ::std::string& dosegrid_uid() const;
  inline void set_dosegrid_uid(const ::std::string& value);
  inline void set_dosegrid_uid(const char* value);
  inline void set_dosegrid_uid(const char* value, size_t size);
  inline ::std::string* mutable_dosegrid_uid();
  inline ::std::string* release_dosegrid_uid();
  
  // optional string current_segment_uid = 59;
  inline bool has_current_segment_uid() const;
  inline void clear_current_segment_uid();
  static const int kCurrentSegmentUidFieldNumber = 59;
  inline const ::std::string& current_segment_uid() const;
  inline void set_current_segment_uid(const ::std::string& value);
  inline void set_current_segment_uid(const char* value);
  inline void set_current_segment_uid(const char* value, size_t size);
  inline ::std::string* mutable_current_segment_uid();
  inline ::std::string* release_current_segment_uid();
  
  // optional bool is_opposite_beam = 60;
  inline bool has_is_opposite_beam() const;
  inline void clear_is_opposite_beam();
  static const int kIsOppositeBeamFieldNumber = 60;
  inline bool is_opposite_beam() const;
  inline void set_is_opposite_beam(bool value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoBeam)
 private:
  inline void set_has_beam_uid();
  inline void clear_has_beam_uid();
  inline void set_has_normal_group_uid();
  inline void clear_has_normal_group_uid();
  inline void set_has_beam_number();
  inline void clear_has_beam_number();
  inline void set_has_beam_name();
  inline void clear_has_beam_name();
  inline void set_has_beam_description();
  inline void clear_has_beam_description();
  inline void set_has_commissioned_unit_uid();
  inline void clear_has_commissioned_unit_uid();
  inline void set_has_isocenter_uid();
  inline void clear_has_isocenter_uid();
  inline void set_has_ssd();
  inline void clear_has_ssd();
  inline void set_has_beam_mu();
  inline void clear_has_beam_mu();
  inline void set_has_is_visible();
  inline void clear_has_is_visible();
  inline void set_has_is_clockwise();
  inline void clear_has_is_clockwise();
  inline void set_has_is_joined();
  inline void clear_has_is_joined();
  inline void set_has_edit_type();
  inline void clear_has_edit_type();
  inline void set_has_beam_weight();
  inline void clear_has_beam_weight();
  inline void set_has_dose_rate();
  inline void clear_has_dose_rate();
  inline void set_has_beam_dose();
  inline void clear_has_beam_dose();
  inline void set_has_is_dose_valid();
  inline void clear_has_is_dose_valid();
  inline void set_has_gantry_start_angle();
  inline void clear_has_gantry_start_angle();
  inline void set_has_gantry_arc_length();
  inline void clear_has_gantry_arc_length();
  inline void set_has_collimator_angle();
  inline void clear_has_collimator_angle();
  inline void set_has_couch_angle();
  inline void clear_has_couch_angle();
  inline void set_has_aperture_type();
  inline void clear_has_aperture_type();
  inline void set_has_is_auto_tracking_shaped();
  inline void clear_has_is_auto_tracking_shaped();
  inline void set_has_target_voi_uid();
  inline void clear_has_target_voi_uid();
  inline void set_has_target_margin_x();
  inline void clear_has_target_margin_x();
  inline void set_has_target_margin_y();
  inline void clear_has_target_margin_y();
  inline void set_has_avoid_voi_uid();
  inline void clear_has_avoid_voi_uid();
  inline void set_has_avoid_margin_x();
  inline void clear_has_avoid_margin_x();
  inline void set_has_avoid_margin_y();
  inline void clear_has_avoid_margin_y();
  inline void set_has_is_jaw_follow();
  inline void clear_has_is_jaw_follow();
  inline void set_has_jaw_follow_margin_x();
  inline void clear_has_jaw_follow_margin_x();
  inline void set_has_jaw_follow_margin_y();
  inline void clear_has_jaw_follow_margin_y();
  inline void set_has_is_x_symmetric();
  inline void clear_has_is_x_symmetric();
  inline void set_has_is_y_symmetric();
  inline void clear_has_is_y_symmetric();
  inline void set_has_aperture_block();
  inline void clear_has_aperture_block();
  inline void set_has_shielding_block();
  inline void clear_has_shielding_block();
  inline void set_has_use_shielding_block();
  inline void clear_has_use_shielding_block();
  inline void set_has_is_shielding_block_auto_tracking_shape();
  inline void clear_has_is_shielding_block_auto_tracking_shape();
  inline void set_has_shielding_block_target_voi_uid();
  inline void clear_has_shielding_block_target_voi_uid();
  inline void set_has_shielding_block_target_margin_x();
  inline void clear_has_shielding_block_target_margin_x();
  inline void set_has_shielding_block_target_margin_y();
  inline void clear_has_shielding_block_target_margin_y();
  inline void set_has_shielding_block_avoid_voi_uid();
  inline void clear_has_shielding_block_avoid_voi_uid();
  inline void set_has_shielding_block_avoid_margin_x();
  inline void clear_has_shielding_block_avoid_margin_x();
  inline void set_has_shielding_block_avoid_margin_y();
  inline void clear_has_shielding_block_avoid_margin_y();
  inline void set_has_use_virtual_wedge();
  inline void clear_has_use_virtual_wedge();
  inline void set_has_virtual_wedge_uid();
  inline void clear_has_virtual_wedge_uid();
  inline void set_has_use_physical_wedge();
  inline void clear_has_use_physical_wedge();
  inline void set_has_physical_wedge_uid();
  inline void clear_has_physical_wedge_uid();
  inline void set_has_tray_uid();
  inline void clear_has_tray_uid();
  inline void set_has_bolus_voi_uid();
  inline void clear_has_bolus_voi_uid();
  inline void set_has_applicator_uid();
  inline void clear_has_applicator_uid();
  inline void set_has_use_e_beam_block();
  inline void clear_has_use_e_beam_block();
  inline void set_has_e_beam_block();
  inline void clear_has_e_beam_block();
  inline void set_has_is_auto_created();
  inline void clear_has_is_auto_created();
  inline void set_has_mlcedittype();
  inline void clear_has_mlcedittype();
  inline void set_has_algorithmtype();
  inline void clear_has_algorithmtype();
  inline void set_has_dosegrid_uid();
  inline void clear_has_dosegrid_uid();
  inline void set_has_current_segment_uid();
  inline void clear_has_current_segment_uid();
  inline void set_has_is_opposite_beam();
  inline void clear_has_is_opposite_beam();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* beam_uid_;
  ::std::string* normal_group_uid_;
  ::std::string* beam_name_;
  ::std::string* beam_description_;
  ::google::protobuf::int32 beam_number_;
  float ssd_;
  ::std::string* commissioned_unit_uid_;
  ::std::string* isocenter_uid_;
  float beam_mu_;
  bool is_visible_;
  bool is_clockwise_;
  bool is_joined_;
  bool is_dose_valid_;
  ::google::protobuf::int32 edit_type_;
  float beam_weight_;
  float dose_rate_;
  float beam_dose_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegment > segment_list_;
  float gantry_start_angle_;
  float gantry_arc_length_;
  float collimator_angle_;
  float couch_angle_;
  ::std::string* target_voi_uid_;
  double target_margin_x_;
  double target_margin_y_;
  ::std::string* avoid_voi_uid_;
  double avoid_margin_x_;
  ::google::protobuf::int32 aperture_type_;
  bool is_auto_tracking_shaped_;
  bool is_jaw_follow_;
  bool is_x_symmetric_;
  bool is_y_symmetric_;
  double avoid_margin_y_;
  float jaw_follow_margin_x_;
  float jaw_follow_margin_y_;
  ::tps::proto::RtTpsProtoBlock* aperture_block_;
  ::tps::proto::RtTpsProtoBlock* shielding_block_;
  ::std::string* shielding_block_target_voi_uid_;
  double shielding_block_target_margin_x_;
  double shielding_block_target_margin_y_;
  ::std::string* shielding_block_avoid_voi_uid_;
  double shielding_block_avoid_margin_x_;
  double shielding_block_avoid_margin_y_;
  bool use_shielding_block_;
  bool is_shielding_block_auto_tracking_shape_;
  bool use_virtual_wedge_;
  bool use_physical_wedge_;
  ::google::protobuf::int32 mlcedittype_;
  ::std::string* virtual_wedge_uid_;
  ::std::string* physical_wedge_uid_;
  ::std::string* tray_uid_;
  ::std::string* bolus_voi_uid_;
  ::std::string* applicator_uid_;
  ::tps::proto::RtTpsProtoBlock* e_beam_block_;
  bool use_e_beam_block_;
  bool is_auto_created_;
  bool is_opposite_beam_;
  ::google::protobuf::int32 algorithmtype_;
  ::std::string* dosegrid_uid_;
  ::std::string* current_segment_uid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(60 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoBeam* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedBeam : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedBeam();
  virtual ~RtTpsProtoRepeatedBeam();
  
  RtTpsProtoRepeatedBeam(const RtTpsProtoRepeatedBeam& from);
  
  inline RtTpsProtoRepeatedBeam& operator=(const RtTpsProtoRepeatedBeam& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedBeam& default_instance();
  
  void Swap(RtTpsProtoRepeatedBeam* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedBeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedBeam& from);
  void MergeFrom(const RtTpsProtoRepeatedBeam& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoBeam beamList = 1;
  inline int beamlist_size() const;
  inline void clear_beamlist();
  static const int kBeamListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoBeam& beamlist(int index) const;
  inline ::tps::proto::RtTpsProtoBeam* mutable_beamlist(int index);
  inline ::tps::proto::RtTpsProtoBeam* add_beamlist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >&
      beamlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >*
      mutable_beamlist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedBeam)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam > beamlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedBeam* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoBeam

// required string beam_uid = 1;
inline bool RtTpsProtoBeam::has_beam_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoBeam::clear_has_beam_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoBeam::clear_beam_uid() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    beam_uid_->clear();
  }
  clear_has_beam_uid();
}
inline const ::std::string& RtTpsProtoBeam::beam_uid() const {
  return *beam_uid_;
}
inline void RtTpsProtoBeam::set_beam_uid(const ::std::string& value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_uid(const char* value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_uid(const char* value, size_t size) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_beam_uid() {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  return beam_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_beam_uid() {
  clear_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_uid_;
    beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normal_group_uid = 2;
inline bool RtTpsProtoBeam::has_normal_group_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoBeam::set_has_normal_group_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoBeam::clear_has_normal_group_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoBeam::clear_normal_group_uid() {
  if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_->clear();
  }
  clear_has_normal_group_uid();
}
inline const ::std::string& RtTpsProtoBeam::normal_group_uid() const {
  return *normal_group_uid_;
}
inline void RtTpsProtoBeam::set_normal_group_uid(const ::std::string& value) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_normal_group_uid(const char* value) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_normal_group_uid(const char* value, size_t size) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_normal_group_uid() {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  return normal_group_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_normal_group_uid() {
  clear_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normal_group_uid_;
    normal_group_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 beam_number = 3;
inline bool RtTpsProtoBeam::has_beam_number() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_number() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoBeam::clear_has_beam_number() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoBeam::clear_beam_number() {
  beam_number_ = 0;
  clear_has_beam_number();
}
inline ::google::protobuf::int32 RtTpsProtoBeam::beam_number() const {
  return beam_number_;
}
inline void RtTpsProtoBeam::set_beam_number(::google::protobuf::int32 value) {
  set_has_beam_number();
  beam_number_ = value;
}

// optional string beam_name = 4;
inline bool RtTpsProtoBeam::has_beam_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoBeam::clear_has_beam_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoBeam::clear_beam_name() {
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    beam_name_->clear();
  }
  clear_has_beam_name();
}
inline const ::std::string& RtTpsProtoBeam::beam_name() const {
  return *beam_name_;
}
inline void RtTpsProtoBeam::set_beam_name(const ::std::string& value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_name(const char* value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_name(const char* value, size_t size) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_beam_name() {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  return beam_name_;
}
inline ::std::string* RtTpsProtoBeam::release_beam_name() {
  clear_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_name_;
    beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string beam_description = 5;
inline bool RtTpsProtoBeam::has_beam_description() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_description() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoBeam::clear_has_beam_description() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoBeam::clear_beam_description() {
  if (beam_description_ != &::google::protobuf::internal::kEmptyString) {
    beam_description_->clear();
  }
  clear_has_beam_description();
}
inline const ::std::string& RtTpsProtoBeam::beam_description() const {
  return *beam_description_;
}
inline void RtTpsProtoBeam::set_beam_description(const ::std::string& value) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_description(const char* value) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(value);
}
inline void RtTpsProtoBeam::set_beam_description(const char* value, size_t size) {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  beam_description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_beam_description() {
  set_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    beam_description_ = new ::std::string;
  }
  return beam_description_;
}
inline ::std::string* RtTpsProtoBeam::release_beam_description() {
  clear_has_beam_description();
  if (beam_description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_description_;
    beam_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string commissioned_unit_uid = 6;
inline bool RtTpsProtoBeam::has_commissioned_unit_uid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RtTpsProtoBeam::set_has_commissioned_unit_uid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RtTpsProtoBeam::clear_has_commissioned_unit_uid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RtTpsProtoBeam::clear_commissioned_unit_uid() {
  if (commissioned_unit_uid_ != &::google::protobuf::internal::kEmptyString) {
    commissioned_unit_uid_->clear();
  }
  clear_has_commissioned_unit_uid();
}
inline const ::std::string& RtTpsProtoBeam::commissioned_unit_uid() const {
  return *commissioned_unit_uid_;
}
inline void RtTpsProtoBeam::set_commissioned_unit_uid(const ::std::string& value) {
  set_has_commissioned_unit_uid();
  if (commissioned_unit_uid_ == &::google::protobuf::internal::kEmptyString) {
    commissioned_unit_uid_ = new ::std::string;
  }
  commissioned_unit_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_commissioned_unit_uid(const char* value) {
  set_has_commissioned_unit_uid();
  if (commissioned_unit_uid_ == &::google::protobuf::internal::kEmptyString) {
    commissioned_unit_uid_ = new ::std::string;
  }
  commissioned_unit_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_commissioned_unit_uid(const char* value, size_t size) {
  set_has_commissioned_unit_uid();
  if (commissioned_unit_uid_ == &::google::protobuf::internal::kEmptyString) {
    commissioned_unit_uid_ = new ::std::string;
  }
  commissioned_unit_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_commissioned_unit_uid() {
  set_has_commissioned_unit_uid();
  if (commissioned_unit_uid_ == &::google::protobuf::internal::kEmptyString) {
    commissioned_unit_uid_ = new ::std::string;
  }
  return commissioned_unit_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_commissioned_unit_uid() {
  clear_has_commissioned_unit_uid();
  if (commissioned_unit_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commissioned_unit_uid_;
    commissioned_unit_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string isocenter_uid = 7;
inline bool RtTpsProtoBeam::has_isocenter_uid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RtTpsProtoBeam::set_has_isocenter_uid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RtTpsProtoBeam::clear_has_isocenter_uid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RtTpsProtoBeam::clear_isocenter_uid() {
  if (isocenter_uid_ != &::google::protobuf::internal::kEmptyString) {
    isocenter_uid_->clear();
  }
  clear_has_isocenter_uid();
}
inline const ::std::string& RtTpsProtoBeam::isocenter_uid() const {
  return *isocenter_uid_;
}
inline void RtTpsProtoBeam::set_isocenter_uid(const ::std::string& value) {
  set_has_isocenter_uid();
  if (isocenter_uid_ == &::google::protobuf::internal::kEmptyString) {
    isocenter_uid_ = new ::std::string;
  }
  isocenter_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_isocenter_uid(const char* value) {
  set_has_isocenter_uid();
  if (isocenter_uid_ == &::google::protobuf::internal::kEmptyString) {
    isocenter_uid_ = new ::std::string;
  }
  isocenter_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_isocenter_uid(const char* value, size_t size) {
  set_has_isocenter_uid();
  if (isocenter_uid_ == &::google::protobuf::internal::kEmptyString) {
    isocenter_uid_ = new ::std::string;
  }
  isocenter_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_isocenter_uid() {
  set_has_isocenter_uid();
  if (isocenter_uid_ == &::google::protobuf::internal::kEmptyString) {
    isocenter_uid_ = new ::std::string;
  }
  return isocenter_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_isocenter_uid() {
  clear_has_isocenter_uid();
  if (isocenter_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = isocenter_uid_;
    isocenter_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float ssd = 8;
inline bool RtTpsProtoBeam::has_ssd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RtTpsProtoBeam::set_has_ssd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RtTpsProtoBeam::clear_has_ssd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RtTpsProtoBeam::clear_ssd() {
  ssd_ = 0;
  clear_has_ssd();
}
inline float RtTpsProtoBeam::ssd() const {
  return ssd_;
}
inline void RtTpsProtoBeam::set_ssd(float value) {
  set_has_ssd();
  ssd_ = value;
}

// optional float beam_mu = 9;
inline bool RtTpsProtoBeam::has_beam_mu() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_mu() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RtTpsProtoBeam::clear_has_beam_mu() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RtTpsProtoBeam::clear_beam_mu() {
  beam_mu_ = 0;
  clear_has_beam_mu();
}
inline float RtTpsProtoBeam::beam_mu() const {
  return beam_mu_;
}
inline void RtTpsProtoBeam::set_beam_mu(float value) {
  set_has_beam_mu();
  beam_mu_ = value;
}

// optional bool is_visible = 10;
inline bool RtTpsProtoBeam::has_is_visible() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_visible() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RtTpsProtoBeam::clear_has_is_visible() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RtTpsProtoBeam::clear_is_visible() {
  is_visible_ = false;
  clear_has_is_visible();
}
inline bool RtTpsProtoBeam::is_visible() const {
  return is_visible_;
}
inline void RtTpsProtoBeam::set_is_visible(bool value) {
  set_has_is_visible();
  is_visible_ = value;
}

// optional bool is_clockwise = 11;
inline bool RtTpsProtoBeam::has_is_clockwise() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_clockwise() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RtTpsProtoBeam::clear_has_is_clockwise() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RtTpsProtoBeam::clear_is_clockwise() {
  is_clockwise_ = false;
  clear_has_is_clockwise();
}
inline bool RtTpsProtoBeam::is_clockwise() const {
  return is_clockwise_;
}
inline void RtTpsProtoBeam::set_is_clockwise(bool value) {
  set_has_is_clockwise();
  is_clockwise_ = value;
}

// optional bool is_joined = 12;
inline bool RtTpsProtoBeam::has_is_joined() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_joined() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RtTpsProtoBeam::clear_has_is_joined() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RtTpsProtoBeam::clear_is_joined() {
  is_joined_ = false;
  clear_has_is_joined();
}
inline bool RtTpsProtoBeam::is_joined() const {
  return is_joined_;
}
inline void RtTpsProtoBeam::set_is_joined(bool value) {
  set_has_is_joined();
  is_joined_ = value;
}

// optional int32 edit_type = 13;
inline bool RtTpsProtoBeam::has_edit_type() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RtTpsProtoBeam::set_has_edit_type() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RtTpsProtoBeam::clear_has_edit_type() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RtTpsProtoBeam::clear_edit_type() {
  edit_type_ = 0;
  clear_has_edit_type();
}
inline ::google::protobuf::int32 RtTpsProtoBeam::edit_type() const {
  return edit_type_;
}
inline void RtTpsProtoBeam::set_edit_type(::google::protobuf::int32 value) {
  set_has_edit_type();
  edit_type_ = value;
}

// optional float beam_weight = 14;
inline bool RtTpsProtoBeam::has_beam_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RtTpsProtoBeam::clear_has_beam_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RtTpsProtoBeam::clear_beam_weight() {
  beam_weight_ = 0;
  clear_has_beam_weight();
}
inline float RtTpsProtoBeam::beam_weight() const {
  return beam_weight_;
}
inline void RtTpsProtoBeam::set_beam_weight(float value) {
  set_has_beam_weight();
  beam_weight_ = value;
}

// optional float dose_rate = 15;
inline bool RtTpsProtoBeam::has_dose_rate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RtTpsProtoBeam::set_has_dose_rate() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RtTpsProtoBeam::clear_has_dose_rate() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RtTpsProtoBeam::clear_dose_rate() {
  dose_rate_ = 0;
  clear_has_dose_rate();
}
inline float RtTpsProtoBeam::dose_rate() const {
  return dose_rate_;
}
inline void RtTpsProtoBeam::set_dose_rate(float value) {
  set_has_dose_rate();
  dose_rate_ = value;
}

// optional float beam_dose = 16;
inline bool RtTpsProtoBeam::has_beam_dose() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RtTpsProtoBeam::set_has_beam_dose() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RtTpsProtoBeam::clear_has_beam_dose() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RtTpsProtoBeam::clear_beam_dose() {
  beam_dose_ = 0;
  clear_has_beam_dose();
}
inline float RtTpsProtoBeam::beam_dose() const {
  return beam_dose_;
}
inline void RtTpsProtoBeam::set_beam_dose(float value) {
  set_has_beam_dose();
  beam_dose_ = value;
}

// optional bool is_dose_valid = 17;
inline bool RtTpsProtoBeam::has_is_dose_valid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_dose_valid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RtTpsProtoBeam::clear_has_is_dose_valid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RtTpsProtoBeam::clear_is_dose_valid() {
  is_dose_valid_ = false;
  clear_has_is_dose_valid();
}
inline bool RtTpsProtoBeam::is_dose_valid() const {
  return is_dose_valid_;
}
inline void RtTpsProtoBeam::set_is_dose_valid(bool value) {
  set_has_is_dose_valid();
  is_dose_valid_ = value;
}

// repeated .tps.proto.RtTpsProtoSegment segment_list = 18;
inline int RtTpsProtoBeam::segment_list_size() const {
  return segment_list_.size();
}
inline void RtTpsProtoBeam::clear_segment_list() {
  segment_list_.Clear();
}
inline const ::tps::proto::RtTpsProtoSegment& RtTpsProtoBeam::segment_list(int index) const {
  return segment_list_.Get(index);
}
inline ::tps::proto::RtTpsProtoSegment* RtTpsProtoBeam::mutable_segment_list(int index) {
  return segment_list_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoSegment* RtTpsProtoBeam::add_segment_list() {
  return segment_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegment >&
RtTpsProtoBeam::segment_list() const {
  return segment_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoSegment >*
RtTpsProtoBeam::mutable_segment_list() {
  return &segment_list_;
}

// optional float gantry_start_angle = 19;
inline bool RtTpsProtoBeam::has_gantry_start_angle() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RtTpsProtoBeam::set_has_gantry_start_angle() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RtTpsProtoBeam::clear_has_gantry_start_angle() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RtTpsProtoBeam::clear_gantry_start_angle() {
  gantry_start_angle_ = 0;
  clear_has_gantry_start_angle();
}
inline float RtTpsProtoBeam::gantry_start_angle() const {
  return gantry_start_angle_;
}
inline void RtTpsProtoBeam::set_gantry_start_angle(float value) {
  set_has_gantry_start_angle();
  gantry_start_angle_ = value;
}

// optional float gantry_arc_length = 20;
inline bool RtTpsProtoBeam::has_gantry_arc_length() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RtTpsProtoBeam::set_has_gantry_arc_length() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RtTpsProtoBeam::clear_has_gantry_arc_length() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RtTpsProtoBeam::clear_gantry_arc_length() {
  gantry_arc_length_ = 0;
  clear_has_gantry_arc_length();
}
inline float RtTpsProtoBeam::gantry_arc_length() const {
  return gantry_arc_length_;
}
inline void RtTpsProtoBeam::set_gantry_arc_length(float value) {
  set_has_gantry_arc_length();
  gantry_arc_length_ = value;
}

// optional float collimator_angle = 21;
inline bool RtTpsProtoBeam::has_collimator_angle() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RtTpsProtoBeam::set_has_collimator_angle() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RtTpsProtoBeam::clear_has_collimator_angle() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RtTpsProtoBeam::clear_collimator_angle() {
  collimator_angle_ = 0;
  clear_has_collimator_angle();
}
inline float RtTpsProtoBeam::collimator_angle() const {
  return collimator_angle_;
}
inline void RtTpsProtoBeam::set_collimator_angle(float value) {
  set_has_collimator_angle();
  collimator_angle_ = value;
}

// optional float couch_angle = 22;
inline bool RtTpsProtoBeam::has_couch_angle() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RtTpsProtoBeam::set_has_couch_angle() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RtTpsProtoBeam::clear_has_couch_angle() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RtTpsProtoBeam::clear_couch_angle() {
  couch_angle_ = 0;
  clear_has_couch_angle();
}
inline float RtTpsProtoBeam::couch_angle() const {
  return couch_angle_;
}
inline void RtTpsProtoBeam::set_couch_angle(float value) {
  set_has_couch_angle();
  couch_angle_ = value;
}

// optional int32 aperture_type = 23;
inline bool RtTpsProtoBeam::has_aperture_type() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void RtTpsProtoBeam::set_has_aperture_type() {
  _has_bits_[0] |= 0x00400000u;
}
inline void RtTpsProtoBeam::clear_has_aperture_type() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void RtTpsProtoBeam::clear_aperture_type() {
  aperture_type_ = 0;
  clear_has_aperture_type();
}
inline ::google::protobuf::int32 RtTpsProtoBeam::aperture_type() const {
  return aperture_type_;
}
inline void RtTpsProtoBeam::set_aperture_type(::google::protobuf::int32 value) {
  set_has_aperture_type();
  aperture_type_ = value;
}

// optional bool is_auto_tracking_shaped = 24;
inline bool RtTpsProtoBeam::has_is_auto_tracking_shaped() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_auto_tracking_shaped() {
  _has_bits_[0] |= 0x00800000u;
}
inline void RtTpsProtoBeam::clear_has_is_auto_tracking_shaped() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void RtTpsProtoBeam::clear_is_auto_tracking_shaped() {
  is_auto_tracking_shaped_ = false;
  clear_has_is_auto_tracking_shaped();
}
inline bool RtTpsProtoBeam::is_auto_tracking_shaped() const {
  return is_auto_tracking_shaped_;
}
inline void RtTpsProtoBeam::set_is_auto_tracking_shaped(bool value) {
  set_has_is_auto_tracking_shaped();
  is_auto_tracking_shaped_ = value;
}

// optional string target_voi_uid = 25;
inline bool RtTpsProtoBeam::has_target_voi_uid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_target_voi_uid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void RtTpsProtoBeam::clear_has_target_voi_uid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void RtTpsProtoBeam::clear_target_voi_uid() {
  if (target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    target_voi_uid_->clear();
  }
  clear_has_target_voi_uid();
}
inline const ::std::string& RtTpsProtoBeam::target_voi_uid() const {
  return *target_voi_uid_;
}
inline void RtTpsProtoBeam::set_target_voi_uid(const ::std::string& value) {
  set_has_target_voi_uid();
  if (target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    target_voi_uid_ = new ::std::string;
  }
  target_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_target_voi_uid(const char* value) {
  set_has_target_voi_uid();
  if (target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    target_voi_uid_ = new ::std::string;
  }
  target_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_target_voi_uid(const char* value, size_t size) {
  set_has_target_voi_uid();
  if (target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    target_voi_uid_ = new ::std::string;
  }
  target_voi_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_target_voi_uid() {
  set_has_target_voi_uid();
  if (target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    target_voi_uid_ = new ::std::string;
  }
  return target_voi_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_target_voi_uid() {
  clear_has_target_voi_uid();
  if (target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = target_voi_uid_;
    target_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double target_margin_x = 26;
inline bool RtTpsProtoBeam::has_target_margin_x() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_target_margin_x() {
  _has_bits_[0] |= 0x02000000u;
}
inline void RtTpsProtoBeam::clear_has_target_margin_x() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void RtTpsProtoBeam::clear_target_margin_x() {
  target_margin_x_ = 0;
  clear_has_target_margin_x();
}
inline double RtTpsProtoBeam::target_margin_x() const {
  return target_margin_x_;
}
inline void RtTpsProtoBeam::set_target_margin_x(double value) {
  set_has_target_margin_x();
  target_margin_x_ = value;
}

// optional double target_margin_y = 27;
inline bool RtTpsProtoBeam::has_target_margin_y() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_target_margin_y() {
  _has_bits_[0] |= 0x04000000u;
}
inline void RtTpsProtoBeam::clear_has_target_margin_y() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void RtTpsProtoBeam::clear_target_margin_y() {
  target_margin_y_ = 0;
  clear_has_target_margin_y();
}
inline double RtTpsProtoBeam::target_margin_y() const {
  return target_margin_y_;
}
inline void RtTpsProtoBeam::set_target_margin_y(double value) {
  set_has_target_margin_y();
  target_margin_y_ = value;
}

// optional string avoid_voi_uid = 28;
inline bool RtTpsProtoBeam::has_avoid_voi_uid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_avoid_voi_uid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void RtTpsProtoBeam::clear_has_avoid_voi_uid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void RtTpsProtoBeam::clear_avoid_voi_uid() {
  if (avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    avoid_voi_uid_->clear();
  }
  clear_has_avoid_voi_uid();
}
inline const ::std::string& RtTpsProtoBeam::avoid_voi_uid() const {
  return *avoid_voi_uid_;
}
inline void RtTpsProtoBeam::set_avoid_voi_uid(const ::std::string& value) {
  set_has_avoid_voi_uid();
  if (avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    avoid_voi_uid_ = new ::std::string;
  }
  avoid_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_avoid_voi_uid(const char* value) {
  set_has_avoid_voi_uid();
  if (avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    avoid_voi_uid_ = new ::std::string;
  }
  avoid_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_avoid_voi_uid(const char* value, size_t size) {
  set_has_avoid_voi_uid();
  if (avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    avoid_voi_uid_ = new ::std::string;
  }
  avoid_voi_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_avoid_voi_uid() {
  set_has_avoid_voi_uid();
  if (avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    avoid_voi_uid_ = new ::std::string;
  }
  return avoid_voi_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_avoid_voi_uid() {
  clear_has_avoid_voi_uid();
  if (avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = avoid_voi_uid_;
    avoid_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double avoid_margin_x = 29;
inline bool RtTpsProtoBeam::has_avoid_margin_x() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_avoid_margin_x() {
  _has_bits_[0] |= 0x10000000u;
}
inline void RtTpsProtoBeam::clear_has_avoid_margin_x() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void RtTpsProtoBeam::clear_avoid_margin_x() {
  avoid_margin_x_ = 0;
  clear_has_avoid_margin_x();
}
inline double RtTpsProtoBeam::avoid_margin_x() const {
  return avoid_margin_x_;
}
inline void RtTpsProtoBeam::set_avoid_margin_x(double value) {
  set_has_avoid_margin_x();
  avoid_margin_x_ = value;
}

// optional double avoid_margin_y = 30;
inline bool RtTpsProtoBeam::has_avoid_margin_y() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_avoid_margin_y() {
  _has_bits_[0] |= 0x20000000u;
}
inline void RtTpsProtoBeam::clear_has_avoid_margin_y() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void RtTpsProtoBeam::clear_avoid_margin_y() {
  avoid_margin_y_ = 0;
  clear_has_avoid_margin_y();
}
inline double RtTpsProtoBeam::avoid_margin_y() const {
  return avoid_margin_y_;
}
inline void RtTpsProtoBeam::set_avoid_margin_y(double value) {
  set_has_avoid_margin_y();
  avoid_margin_y_ = value;
}

// optional bool is_jaw_follow = 31;
inline bool RtTpsProtoBeam::has_is_jaw_follow() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_jaw_follow() {
  _has_bits_[0] |= 0x40000000u;
}
inline void RtTpsProtoBeam::clear_has_is_jaw_follow() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void RtTpsProtoBeam::clear_is_jaw_follow() {
  is_jaw_follow_ = false;
  clear_has_is_jaw_follow();
}
inline bool RtTpsProtoBeam::is_jaw_follow() const {
  return is_jaw_follow_;
}
inline void RtTpsProtoBeam::set_is_jaw_follow(bool value) {
  set_has_is_jaw_follow();
  is_jaw_follow_ = value;
}

// optional float jaw_follow_margin_x = 32;
inline bool RtTpsProtoBeam::has_jaw_follow_margin_x() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_jaw_follow_margin_x() {
  _has_bits_[0] |= 0x80000000u;
}
inline void RtTpsProtoBeam::clear_has_jaw_follow_margin_x() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void RtTpsProtoBeam::clear_jaw_follow_margin_x() {
  jaw_follow_margin_x_ = 0;
  clear_has_jaw_follow_margin_x();
}
inline float RtTpsProtoBeam::jaw_follow_margin_x() const {
  return jaw_follow_margin_x_;
}
inline void RtTpsProtoBeam::set_jaw_follow_margin_x(float value) {
  set_has_jaw_follow_margin_x();
  jaw_follow_margin_x_ = value;
}

// optional float jaw_follow_margin_y = 33;
inline bool RtTpsProtoBeam::has_jaw_follow_margin_y() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void RtTpsProtoBeam::set_has_jaw_follow_margin_y() {
  _has_bits_[1] |= 0x00000001u;
}
inline void RtTpsProtoBeam::clear_has_jaw_follow_margin_y() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void RtTpsProtoBeam::clear_jaw_follow_margin_y() {
  jaw_follow_margin_y_ = 0;
  clear_has_jaw_follow_margin_y();
}
inline float RtTpsProtoBeam::jaw_follow_margin_y() const {
  return jaw_follow_margin_y_;
}
inline void RtTpsProtoBeam::set_jaw_follow_margin_y(float value) {
  set_has_jaw_follow_margin_y();
  jaw_follow_margin_y_ = value;
}

// optional bool is_x_symmetric = 34;
inline bool RtTpsProtoBeam::has_is_x_symmetric() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_x_symmetric() {
  _has_bits_[1] |= 0x00000002u;
}
inline void RtTpsProtoBeam::clear_has_is_x_symmetric() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void RtTpsProtoBeam::clear_is_x_symmetric() {
  is_x_symmetric_ = false;
  clear_has_is_x_symmetric();
}
inline bool RtTpsProtoBeam::is_x_symmetric() const {
  return is_x_symmetric_;
}
inline void RtTpsProtoBeam::set_is_x_symmetric(bool value) {
  set_has_is_x_symmetric();
  is_x_symmetric_ = value;
}

// optional bool is_y_symmetric = 35;
inline bool RtTpsProtoBeam::has_is_y_symmetric() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_y_symmetric() {
  _has_bits_[1] |= 0x00000004u;
}
inline void RtTpsProtoBeam::clear_has_is_y_symmetric() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void RtTpsProtoBeam::clear_is_y_symmetric() {
  is_y_symmetric_ = false;
  clear_has_is_y_symmetric();
}
inline bool RtTpsProtoBeam::is_y_symmetric() const {
  return is_y_symmetric_;
}
inline void RtTpsProtoBeam::set_is_y_symmetric(bool value) {
  set_has_is_y_symmetric();
  is_y_symmetric_ = value;
}

// optional .tps.proto.RtTpsProtoBlock aperture_block = 36;
inline bool RtTpsProtoBeam::has_aperture_block() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void RtTpsProtoBeam::set_has_aperture_block() {
  _has_bits_[1] |= 0x00000008u;
}
inline void RtTpsProtoBeam::clear_has_aperture_block() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void RtTpsProtoBeam::clear_aperture_block() {
  if (aperture_block_ != NULL) aperture_block_->::tps::proto::RtTpsProtoBlock::Clear();
  clear_has_aperture_block();
}
inline const ::tps::proto::RtTpsProtoBlock& RtTpsProtoBeam::aperture_block() const {
  return aperture_block_ != NULL ? *aperture_block_ : *default_instance_->aperture_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::mutable_aperture_block() {
  set_has_aperture_block();
  if (aperture_block_ == NULL) aperture_block_ = new ::tps::proto::RtTpsProtoBlock;
  return aperture_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::release_aperture_block() {
  clear_has_aperture_block();
  ::tps::proto::RtTpsProtoBlock* temp = aperture_block_;
  aperture_block_ = NULL;
  return temp;
}

// optional .tps.proto.RtTpsProtoBlock shielding_block = 37;
inline bool RtTpsProtoBeam::has_shielding_block() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block() {
  _has_bits_[1] |= 0x00000010u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void RtTpsProtoBeam::clear_shielding_block() {
  if (shielding_block_ != NULL) shielding_block_->::tps::proto::RtTpsProtoBlock::Clear();
  clear_has_shielding_block();
}
inline const ::tps::proto::RtTpsProtoBlock& RtTpsProtoBeam::shielding_block() const {
  return shielding_block_ != NULL ? *shielding_block_ : *default_instance_->shielding_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::mutable_shielding_block() {
  set_has_shielding_block();
  if (shielding_block_ == NULL) shielding_block_ = new ::tps::proto::RtTpsProtoBlock;
  return shielding_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::release_shielding_block() {
  clear_has_shielding_block();
  ::tps::proto::RtTpsProtoBlock* temp = shielding_block_;
  shielding_block_ = NULL;
  return temp;
}

// optional bool use_shielding_block = 38;
inline bool RtTpsProtoBeam::has_use_shielding_block() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void RtTpsProtoBeam::set_has_use_shielding_block() {
  _has_bits_[1] |= 0x00000020u;
}
inline void RtTpsProtoBeam::clear_has_use_shielding_block() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void RtTpsProtoBeam::clear_use_shielding_block() {
  use_shielding_block_ = false;
  clear_has_use_shielding_block();
}
inline bool RtTpsProtoBeam::use_shielding_block() const {
  return use_shielding_block_;
}
inline void RtTpsProtoBeam::set_use_shielding_block(bool value) {
  set_has_use_shielding_block();
  use_shielding_block_ = value;
}

// optional bool is_shielding_block_auto_tracking_shape = 39;
inline bool RtTpsProtoBeam::has_is_shielding_block_auto_tracking_shape() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_shielding_block_auto_tracking_shape() {
  _has_bits_[1] |= 0x00000040u;
}
inline void RtTpsProtoBeam::clear_has_is_shielding_block_auto_tracking_shape() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void RtTpsProtoBeam::clear_is_shielding_block_auto_tracking_shape() {
  is_shielding_block_auto_tracking_shape_ = false;
  clear_has_is_shielding_block_auto_tracking_shape();
}
inline bool RtTpsProtoBeam::is_shielding_block_auto_tracking_shape() const {
  return is_shielding_block_auto_tracking_shape_;
}
inline void RtTpsProtoBeam::set_is_shielding_block_auto_tracking_shape(bool value) {
  set_has_is_shielding_block_auto_tracking_shape();
  is_shielding_block_auto_tracking_shape_ = value;
}

// optional string shielding_block_target_voi_uid = 40;
inline bool RtTpsProtoBeam::has_shielding_block_target_voi_uid() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_target_voi_uid() {
  _has_bits_[1] |= 0x00000080u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_target_voi_uid() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void RtTpsProtoBeam::clear_shielding_block_target_voi_uid() {
  if (shielding_block_target_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    shielding_block_target_voi_uid_->clear();
  }
  clear_has_shielding_block_target_voi_uid();
}
inline const ::std::string& RtTpsProtoBeam::shielding_block_target_voi_uid() const {
  return *shielding_block_target_voi_uid_;
}
inline void RtTpsProtoBeam::set_shielding_block_target_voi_uid(const ::std::string& value) {
  set_has_shielding_block_target_voi_uid();
  if (shielding_block_target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_target_voi_uid_ = new ::std::string;
  }
  shielding_block_target_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_shielding_block_target_voi_uid(const char* value) {
  set_has_shielding_block_target_voi_uid();
  if (shielding_block_target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_target_voi_uid_ = new ::std::string;
  }
  shielding_block_target_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_shielding_block_target_voi_uid(const char* value, size_t size) {
  set_has_shielding_block_target_voi_uid();
  if (shielding_block_target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_target_voi_uid_ = new ::std::string;
  }
  shielding_block_target_voi_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_shielding_block_target_voi_uid() {
  set_has_shielding_block_target_voi_uid();
  if (shielding_block_target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_target_voi_uid_ = new ::std::string;
  }
  return shielding_block_target_voi_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_shielding_block_target_voi_uid() {
  clear_has_shielding_block_target_voi_uid();
  if (shielding_block_target_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shielding_block_target_voi_uid_;
    shielding_block_target_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double shielding_block_target_margin_x = 41;
inline bool RtTpsProtoBeam::has_shielding_block_target_margin_x() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_target_margin_x() {
  _has_bits_[1] |= 0x00000100u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_target_margin_x() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void RtTpsProtoBeam::clear_shielding_block_target_margin_x() {
  shielding_block_target_margin_x_ = 0;
  clear_has_shielding_block_target_margin_x();
}
inline double RtTpsProtoBeam::shielding_block_target_margin_x() const {
  return shielding_block_target_margin_x_;
}
inline void RtTpsProtoBeam::set_shielding_block_target_margin_x(double value) {
  set_has_shielding_block_target_margin_x();
  shielding_block_target_margin_x_ = value;
}

// optional double shielding_block_target_margin_y = 42;
inline bool RtTpsProtoBeam::has_shielding_block_target_margin_y() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_target_margin_y() {
  _has_bits_[1] |= 0x00000200u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_target_margin_y() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void RtTpsProtoBeam::clear_shielding_block_target_margin_y() {
  shielding_block_target_margin_y_ = 0;
  clear_has_shielding_block_target_margin_y();
}
inline double RtTpsProtoBeam::shielding_block_target_margin_y() const {
  return shielding_block_target_margin_y_;
}
inline void RtTpsProtoBeam::set_shielding_block_target_margin_y(double value) {
  set_has_shielding_block_target_margin_y();
  shielding_block_target_margin_y_ = value;
}

// optional string shielding_block_avoid_voi_uid = 43;
inline bool RtTpsProtoBeam::has_shielding_block_avoid_voi_uid() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_avoid_voi_uid() {
  _has_bits_[1] |= 0x00000400u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_avoid_voi_uid() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void RtTpsProtoBeam::clear_shielding_block_avoid_voi_uid() {
  if (shielding_block_avoid_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    shielding_block_avoid_voi_uid_->clear();
  }
  clear_has_shielding_block_avoid_voi_uid();
}
inline const ::std::string& RtTpsProtoBeam::shielding_block_avoid_voi_uid() const {
  return *shielding_block_avoid_voi_uid_;
}
inline void RtTpsProtoBeam::set_shielding_block_avoid_voi_uid(const ::std::string& value) {
  set_has_shielding_block_avoid_voi_uid();
  if (shielding_block_avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_avoid_voi_uid_ = new ::std::string;
  }
  shielding_block_avoid_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_shielding_block_avoid_voi_uid(const char* value) {
  set_has_shielding_block_avoid_voi_uid();
  if (shielding_block_avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_avoid_voi_uid_ = new ::std::string;
  }
  shielding_block_avoid_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_shielding_block_avoid_voi_uid(const char* value, size_t size) {
  set_has_shielding_block_avoid_voi_uid();
  if (shielding_block_avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_avoid_voi_uid_ = new ::std::string;
  }
  shielding_block_avoid_voi_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_shielding_block_avoid_voi_uid() {
  set_has_shielding_block_avoid_voi_uid();
  if (shielding_block_avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    shielding_block_avoid_voi_uid_ = new ::std::string;
  }
  return shielding_block_avoid_voi_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_shielding_block_avoid_voi_uid() {
  clear_has_shielding_block_avoid_voi_uid();
  if (shielding_block_avoid_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = shielding_block_avoid_voi_uid_;
    shielding_block_avoid_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double shielding_block_avoid_margin_x = 44;
inline bool RtTpsProtoBeam::has_shielding_block_avoid_margin_x() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_avoid_margin_x() {
  _has_bits_[1] |= 0x00000800u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_avoid_margin_x() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void RtTpsProtoBeam::clear_shielding_block_avoid_margin_x() {
  shielding_block_avoid_margin_x_ = 0;
  clear_has_shielding_block_avoid_margin_x();
}
inline double RtTpsProtoBeam::shielding_block_avoid_margin_x() const {
  return shielding_block_avoid_margin_x_;
}
inline void RtTpsProtoBeam::set_shielding_block_avoid_margin_x(double value) {
  set_has_shielding_block_avoid_margin_x();
  shielding_block_avoid_margin_x_ = value;
}

// optional double shielding_block_avoid_margin_y = 45;
inline bool RtTpsProtoBeam::has_shielding_block_avoid_margin_y() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void RtTpsProtoBeam::set_has_shielding_block_avoid_margin_y() {
  _has_bits_[1] |= 0x00001000u;
}
inline void RtTpsProtoBeam::clear_has_shielding_block_avoid_margin_y() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void RtTpsProtoBeam::clear_shielding_block_avoid_margin_y() {
  shielding_block_avoid_margin_y_ = 0;
  clear_has_shielding_block_avoid_margin_y();
}
inline double RtTpsProtoBeam::shielding_block_avoid_margin_y() const {
  return shielding_block_avoid_margin_y_;
}
inline void RtTpsProtoBeam::set_shielding_block_avoid_margin_y(double value) {
  set_has_shielding_block_avoid_margin_y();
  shielding_block_avoid_margin_y_ = value;
}

// optional bool use_virtual_wedge = 46;
inline bool RtTpsProtoBeam::has_use_virtual_wedge() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void RtTpsProtoBeam::set_has_use_virtual_wedge() {
  _has_bits_[1] |= 0x00002000u;
}
inline void RtTpsProtoBeam::clear_has_use_virtual_wedge() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void RtTpsProtoBeam::clear_use_virtual_wedge() {
  use_virtual_wedge_ = false;
  clear_has_use_virtual_wedge();
}
inline bool RtTpsProtoBeam::use_virtual_wedge() const {
  return use_virtual_wedge_;
}
inline void RtTpsProtoBeam::set_use_virtual_wedge(bool value) {
  set_has_use_virtual_wedge();
  use_virtual_wedge_ = value;
}

// optional string virtual_wedge_uid = 47;
inline bool RtTpsProtoBeam::has_virtual_wedge_uid() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void RtTpsProtoBeam::set_has_virtual_wedge_uid() {
  _has_bits_[1] |= 0x00004000u;
}
inline void RtTpsProtoBeam::clear_has_virtual_wedge_uid() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void RtTpsProtoBeam::clear_virtual_wedge_uid() {
  if (virtual_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
    virtual_wedge_uid_->clear();
  }
  clear_has_virtual_wedge_uid();
}
inline const ::std::string& RtTpsProtoBeam::virtual_wedge_uid() const {
  return *virtual_wedge_uid_;
}
inline void RtTpsProtoBeam::set_virtual_wedge_uid(const ::std::string& value) {
  set_has_virtual_wedge_uid();
  if (virtual_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    virtual_wedge_uid_ = new ::std::string;
  }
  virtual_wedge_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_virtual_wedge_uid(const char* value) {
  set_has_virtual_wedge_uid();
  if (virtual_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    virtual_wedge_uid_ = new ::std::string;
  }
  virtual_wedge_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_virtual_wedge_uid(const char* value, size_t size) {
  set_has_virtual_wedge_uid();
  if (virtual_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    virtual_wedge_uid_ = new ::std::string;
  }
  virtual_wedge_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_virtual_wedge_uid() {
  set_has_virtual_wedge_uid();
  if (virtual_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    virtual_wedge_uid_ = new ::std::string;
  }
  return virtual_wedge_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_virtual_wedge_uid() {
  clear_has_virtual_wedge_uid();
  if (virtual_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = virtual_wedge_uid_;
    virtual_wedge_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool use_physical_wedge = 48;
inline bool RtTpsProtoBeam::has_use_physical_wedge() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void RtTpsProtoBeam::set_has_use_physical_wedge() {
  _has_bits_[1] |= 0x00008000u;
}
inline void RtTpsProtoBeam::clear_has_use_physical_wedge() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void RtTpsProtoBeam::clear_use_physical_wedge() {
  use_physical_wedge_ = false;
  clear_has_use_physical_wedge();
}
inline bool RtTpsProtoBeam::use_physical_wedge() const {
  return use_physical_wedge_;
}
inline void RtTpsProtoBeam::set_use_physical_wedge(bool value) {
  set_has_use_physical_wedge();
  use_physical_wedge_ = value;
}

// optional string physical_wedge_uid = 49;
inline bool RtTpsProtoBeam::has_physical_wedge_uid() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void RtTpsProtoBeam::set_has_physical_wedge_uid() {
  _has_bits_[1] |= 0x00010000u;
}
inline void RtTpsProtoBeam::clear_has_physical_wedge_uid() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void RtTpsProtoBeam::clear_physical_wedge_uid() {
  if (physical_wedge_uid_ != &::google::protobuf::internal::kEmptyString) {
    physical_wedge_uid_->clear();
  }
  clear_has_physical_wedge_uid();
}
inline const ::std::string& RtTpsProtoBeam::physical_wedge_uid() const {
  return *physical_wedge_uid_;
}
inline void RtTpsProtoBeam::set_physical_wedge_uid(const ::std::string& value) {
  set_has_physical_wedge_uid();
  if (physical_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    physical_wedge_uid_ = new ::std::string;
  }
  physical_wedge_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_physical_wedge_uid(const char* value) {
  set_has_physical_wedge_uid();
  if (physical_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    physical_wedge_uid_ = new ::std::string;
  }
  physical_wedge_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_physical_wedge_uid(const char* value, size_t size) {
  set_has_physical_wedge_uid();
  if (physical_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    physical_wedge_uid_ = new ::std::string;
  }
  physical_wedge_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_physical_wedge_uid() {
  set_has_physical_wedge_uid();
  if (physical_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    physical_wedge_uid_ = new ::std::string;
  }
  return physical_wedge_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_physical_wedge_uid() {
  clear_has_physical_wedge_uid();
  if (physical_wedge_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = physical_wedge_uid_;
    physical_wedge_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string tray_uid = 50;
inline bool RtTpsProtoBeam::has_tray_uid() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void RtTpsProtoBeam::set_has_tray_uid() {
  _has_bits_[1] |= 0x00020000u;
}
inline void RtTpsProtoBeam::clear_has_tray_uid() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void RtTpsProtoBeam::clear_tray_uid() {
  if (tray_uid_ != &::google::protobuf::internal::kEmptyString) {
    tray_uid_->clear();
  }
  clear_has_tray_uid();
}
inline const ::std::string& RtTpsProtoBeam::tray_uid() const {
  return *tray_uid_;
}
inline void RtTpsProtoBeam::set_tray_uid(const ::std::string& value) {
  set_has_tray_uid();
  if (tray_uid_ == &::google::protobuf::internal::kEmptyString) {
    tray_uid_ = new ::std::string;
  }
  tray_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_tray_uid(const char* value) {
  set_has_tray_uid();
  if (tray_uid_ == &::google::protobuf::internal::kEmptyString) {
    tray_uid_ = new ::std::string;
  }
  tray_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_tray_uid(const char* value, size_t size) {
  set_has_tray_uid();
  if (tray_uid_ == &::google::protobuf::internal::kEmptyString) {
    tray_uid_ = new ::std::string;
  }
  tray_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_tray_uid() {
  set_has_tray_uid();
  if (tray_uid_ == &::google::protobuf::internal::kEmptyString) {
    tray_uid_ = new ::std::string;
  }
  return tray_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_tray_uid() {
  clear_has_tray_uid();
  if (tray_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = tray_uid_;
    tray_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string bolus_voi_uid = 51;
inline bool RtTpsProtoBeam::has_bolus_voi_uid() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void RtTpsProtoBeam::set_has_bolus_voi_uid() {
  _has_bits_[1] |= 0x00040000u;
}
inline void RtTpsProtoBeam::clear_has_bolus_voi_uid() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void RtTpsProtoBeam::clear_bolus_voi_uid() {
  if (bolus_voi_uid_ != &::google::protobuf::internal::kEmptyString) {
    bolus_voi_uid_->clear();
  }
  clear_has_bolus_voi_uid();
}
inline const ::std::string& RtTpsProtoBeam::bolus_voi_uid() const {
  return *bolus_voi_uid_;
}
inline void RtTpsProtoBeam::set_bolus_voi_uid(const ::std::string& value) {
  set_has_bolus_voi_uid();
  if (bolus_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    bolus_voi_uid_ = new ::std::string;
  }
  bolus_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_bolus_voi_uid(const char* value) {
  set_has_bolus_voi_uid();
  if (bolus_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    bolus_voi_uid_ = new ::std::string;
  }
  bolus_voi_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_bolus_voi_uid(const char* value, size_t size) {
  set_has_bolus_voi_uid();
  if (bolus_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    bolus_voi_uid_ = new ::std::string;
  }
  bolus_voi_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_bolus_voi_uid() {
  set_has_bolus_voi_uid();
  if (bolus_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    bolus_voi_uid_ = new ::std::string;
  }
  return bolus_voi_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_bolus_voi_uid() {
  clear_has_bolus_voi_uid();
  if (bolus_voi_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = bolus_voi_uid_;
    bolus_voi_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string applicator_uid = 52;
inline bool RtTpsProtoBeam::has_applicator_uid() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void RtTpsProtoBeam::set_has_applicator_uid() {
  _has_bits_[1] |= 0x00080000u;
}
inline void RtTpsProtoBeam::clear_has_applicator_uid() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void RtTpsProtoBeam::clear_applicator_uid() {
  if (applicator_uid_ != &::google::protobuf::internal::kEmptyString) {
    applicator_uid_->clear();
  }
  clear_has_applicator_uid();
}
inline const ::std::string& RtTpsProtoBeam::applicator_uid() const {
  return *applicator_uid_;
}
inline void RtTpsProtoBeam::set_applicator_uid(const ::std::string& value) {
  set_has_applicator_uid();
  if (applicator_uid_ == &::google::protobuf::internal::kEmptyString) {
    applicator_uid_ = new ::std::string;
  }
  applicator_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_applicator_uid(const char* value) {
  set_has_applicator_uid();
  if (applicator_uid_ == &::google::protobuf::internal::kEmptyString) {
    applicator_uid_ = new ::std::string;
  }
  applicator_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_applicator_uid(const char* value, size_t size) {
  set_has_applicator_uid();
  if (applicator_uid_ == &::google::protobuf::internal::kEmptyString) {
    applicator_uid_ = new ::std::string;
  }
  applicator_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_applicator_uid() {
  set_has_applicator_uid();
  if (applicator_uid_ == &::google::protobuf::internal::kEmptyString) {
    applicator_uid_ = new ::std::string;
  }
  return applicator_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_applicator_uid() {
  clear_has_applicator_uid();
  if (applicator_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = applicator_uid_;
    applicator_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool use_e_beam_block = 53;
inline bool RtTpsProtoBeam::has_use_e_beam_block() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void RtTpsProtoBeam::set_has_use_e_beam_block() {
  _has_bits_[1] |= 0x00100000u;
}
inline void RtTpsProtoBeam::clear_has_use_e_beam_block() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void RtTpsProtoBeam::clear_use_e_beam_block() {
  use_e_beam_block_ = false;
  clear_has_use_e_beam_block();
}
inline bool RtTpsProtoBeam::use_e_beam_block() const {
  return use_e_beam_block_;
}
inline void RtTpsProtoBeam::set_use_e_beam_block(bool value) {
  set_has_use_e_beam_block();
  use_e_beam_block_ = value;
}

// optional .tps.proto.RtTpsProtoBlock e_beam_block = 54;
inline bool RtTpsProtoBeam::has_e_beam_block() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void RtTpsProtoBeam::set_has_e_beam_block() {
  _has_bits_[1] |= 0x00200000u;
}
inline void RtTpsProtoBeam::clear_has_e_beam_block() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void RtTpsProtoBeam::clear_e_beam_block() {
  if (e_beam_block_ != NULL) e_beam_block_->::tps::proto::RtTpsProtoBlock::Clear();
  clear_has_e_beam_block();
}
inline const ::tps::proto::RtTpsProtoBlock& RtTpsProtoBeam::e_beam_block() const {
  return e_beam_block_ != NULL ? *e_beam_block_ : *default_instance_->e_beam_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::mutable_e_beam_block() {
  set_has_e_beam_block();
  if (e_beam_block_ == NULL) e_beam_block_ = new ::tps::proto::RtTpsProtoBlock;
  return e_beam_block_;
}
inline ::tps::proto::RtTpsProtoBlock* RtTpsProtoBeam::release_e_beam_block() {
  clear_has_e_beam_block();
  ::tps::proto::RtTpsProtoBlock* temp = e_beam_block_;
  e_beam_block_ = NULL;
  return temp;
}

// optional bool is_auto_created = 55;
inline bool RtTpsProtoBeam::has_is_auto_created() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_auto_created() {
  _has_bits_[1] |= 0x00400000u;
}
inline void RtTpsProtoBeam::clear_has_is_auto_created() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void RtTpsProtoBeam::clear_is_auto_created() {
  is_auto_created_ = false;
  clear_has_is_auto_created();
}
inline bool RtTpsProtoBeam::is_auto_created() const {
  return is_auto_created_;
}
inline void RtTpsProtoBeam::set_is_auto_created(bool value) {
  set_has_is_auto_created();
  is_auto_created_ = value;
}

// optional int32 mlcedittype = 56;
inline bool RtTpsProtoBeam::has_mlcedittype() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void RtTpsProtoBeam::set_has_mlcedittype() {
  _has_bits_[1] |= 0x00800000u;
}
inline void RtTpsProtoBeam::clear_has_mlcedittype() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void RtTpsProtoBeam::clear_mlcedittype() {
  mlcedittype_ = 0;
  clear_has_mlcedittype();
}
inline ::google::protobuf::int32 RtTpsProtoBeam::mlcedittype() const {
  return mlcedittype_;
}
inline void RtTpsProtoBeam::set_mlcedittype(::google::protobuf::int32 value) {
  set_has_mlcedittype();
  mlcedittype_ = value;
}

// optional int32 algorithmType = 57;
inline bool RtTpsProtoBeam::has_algorithmtype() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_algorithmtype() {
  _has_bits_[1] |= 0x01000000u;
}
inline void RtTpsProtoBeam::clear_has_algorithmtype() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void RtTpsProtoBeam::clear_algorithmtype() {
  algorithmtype_ = 0;
  clear_has_algorithmtype();
}
inline ::google::protobuf::int32 RtTpsProtoBeam::algorithmtype() const {
  return algorithmtype_;
}
inline void RtTpsProtoBeam::set_algorithmtype(::google::protobuf::int32 value) {
  set_has_algorithmtype();
  algorithmtype_ = value;
}

// optional string dosegrid_uid = 58;
inline bool RtTpsProtoBeam::has_dosegrid_uid() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_dosegrid_uid() {
  _has_bits_[1] |= 0x02000000u;
}
inline void RtTpsProtoBeam::clear_has_dosegrid_uid() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void RtTpsProtoBeam::clear_dosegrid_uid() {
  if (dosegrid_uid_ != &::google::protobuf::internal::kEmptyString) {
    dosegrid_uid_->clear();
  }
  clear_has_dosegrid_uid();
}
inline const ::std::string& RtTpsProtoBeam::dosegrid_uid() const {
  return *dosegrid_uid_;
}
inline void RtTpsProtoBeam::set_dosegrid_uid(const ::std::string& value) {
  set_has_dosegrid_uid();
  if (dosegrid_uid_ == &::google::protobuf::internal::kEmptyString) {
    dosegrid_uid_ = new ::std::string;
  }
  dosegrid_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_dosegrid_uid(const char* value) {
  set_has_dosegrid_uid();
  if (dosegrid_uid_ == &::google::protobuf::internal::kEmptyString) {
    dosegrid_uid_ = new ::std::string;
  }
  dosegrid_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_dosegrid_uid(const char* value, size_t size) {
  set_has_dosegrid_uid();
  if (dosegrid_uid_ == &::google::protobuf::internal::kEmptyString) {
    dosegrid_uid_ = new ::std::string;
  }
  dosegrid_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_dosegrid_uid() {
  set_has_dosegrid_uid();
  if (dosegrid_uid_ == &::google::protobuf::internal::kEmptyString) {
    dosegrid_uid_ = new ::std::string;
  }
  return dosegrid_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_dosegrid_uid() {
  clear_has_dosegrid_uid();
  if (dosegrid_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = dosegrid_uid_;
    dosegrid_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string current_segment_uid = 59;
inline bool RtTpsProtoBeam::has_current_segment_uid() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_current_segment_uid() {
  _has_bits_[1] |= 0x04000000u;
}
inline void RtTpsProtoBeam::clear_has_current_segment_uid() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void RtTpsProtoBeam::clear_current_segment_uid() {
  if (current_segment_uid_ != &::google::protobuf::internal::kEmptyString) {
    current_segment_uid_->clear();
  }
  clear_has_current_segment_uid();
}
inline const ::std::string& RtTpsProtoBeam::current_segment_uid() const {
  return *current_segment_uid_;
}
inline void RtTpsProtoBeam::set_current_segment_uid(const ::std::string& value) {
  set_has_current_segment_uid();
  if (current_segment_uid_ == &::google::protobuf::internal::kEmptyString) {
    current_segment_uid_ = new ::std::string;
  }
  current_segment_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_current_segment_uid(const char* value) {
  set_has_current_segment_uid();
  if (current_segment_uid_ == &::google::protobuf::internal::kEmptyString) {
    current_segment_uid_ = new ::std::string;
  }
  current_segment_uid_->assign(value);
}
inline void RtTpsProtoBeam::set_current_segment_uid(const char* value, size_t size) {
  set_has_current_segment_uid();
  if (current_segment_uid_ == &::google::protobuf::internal::kEmptyString) {
    current_segment_uid_ = new ::std::string;
  }
  current_segment_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeam::mutable_current_segment_uid() {
  set_has_current_segment_uid();
  if (current_segment_uid_ == &::google::protobuf::internal::kEmptyString) {
    current_segment_uid_ = new ::std::string;
  }
  return current_segment_uid_;
}
inline ::std::string* RtTpsProtoBeam::release_current_segment_uid() {
  clear_has_current_segment_uid();
  if (current_segment_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = current_segment_uid_;
    current_segment_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_opposite_beam = 60;
inline bool RtTpsProtoBeam::has_is_opposite_beam() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void RtTpsProtoBeam::set_has_is_opposite_beam() {
  _has_bits_[1] |= 0x08000000u;
}
inline void RtTpsProtoBeam::clear_has_is_opposite_beam() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void RtTpsProtoBeam::clear_is_opposite_beam() {
  is_opposite_beam_ = false;
  clear_has_is_opposite_beam();
}
inline bool RtTpsProtoBeam::is_opposite_beam() const {
  return is_opposite_beam_;
}
inline void RtTpsProtoBeam::set_is_opposite_beam(bool value) {
  set_has_is_opposite_beam();
  is_opposite_beam_ = value;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedBeam

// repeated .tps.proto.RtTpsProtoBeam beamList = 1;
inline int RtTpsProtoRepeatedBeam::beamlist_size() const {
  return beamlist_.size();
}
inline void RtTpsProtoRepeatedBeam::clear_beamlist() {
  beamlist_.Clear();
}
inline const ::tps::proto::RtTpsProtoBeam& RtTpsProtoRepeatedBeam::beamlist(int index) const {
  return beamlist_.Get(index);
}
inline ::tps::proto::RtTpsProtoBeam* RtTpsProtoRepeatedBeam::mutable_beamlist(int index) {
  return beamlist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoBeam* RtTpsProtoRepeatedBeam::add_beamlist() {
  return beamlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >&
RtTpsProtoRepeatedBeam::beamlist() const {
  return beamlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeam >*
RtTpsProtoRepeatedBeam::mutable_beamlist() {
  return &beamlist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fbeam_2eproto__INCLUDED
