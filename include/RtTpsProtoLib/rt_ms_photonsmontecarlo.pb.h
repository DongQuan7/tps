// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_ms_photonsmontecarlo.proto

#ifndef PROTOBUF_rt_5fms_5fphotonsmontecarlo_2eproto__INCLUDED
#define PROTOBUF_rt_5fms_5fphotonsmontecarlo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ms {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();

class RT_MS_PMCPDD;
class RT_MS_PMCEnergyAndSpectrumList;
class RT_MS_PMCEnergyAndSpectrum;
class RT_MS_PMCInField;
class RT_MS_PMCSecondarySourceParameter;
class RT_MS_PMCOutField;
class RT_MS_PMCElectronContamination;
class RT_MS_PMCAbsoluteDose;
class RT_MS_PMCWedgeField;
class RT_MS_PMCVirtualWedge;
class RT_MS_PMCVirtualWedgeTable;
class RT_MS_PMCPhysicalWedge;
class RT_MS_Point2D;
class RT_MS_PhotonMonteCarloInformation;

// ===================================================================

class RT_MS_PMCPDD : public ::google::protobuf::Message {
 public:
  RT_MS_PMCPDD();
  virtual ~RT_MS_PMCPDD();
  
  RT_MS_PMCPDD(const RT_MS_PMCPDD& from);
  
  inline RT_MS_PMCPDD& operator=(const RT_MS_PMCPDD& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCPDD& default_instance();
  
  void Swap(RT_MS_PMCPDD* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCPDD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCPDD& from);
  void MergeFrom(const RT_MS_PMCPDD& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float primaryEnergyStart = 1;
  inline bool has_primaryenergystart() const;
  inline void clear_primaryenergystart();
  static const int kPrimaryEnergyStartFieldNumber = 1;
  inline float primaryenergystart() const;
  inline void set_primaryenergystart(float value);
  
  // optional float primaryEnergyEnd = 2;
  inline bool has_primaryenergyend() const;
  inline void clear_primaryenergyend();
  static const int kPrimaryEnergyEndFieldNumber = 2;
  inline float primaryenergyend() const;
  inline void set_primaryenergyend(float value);
  
  // optional int32 primaryEnergyBin = 3;
  inline bool has_primaryenergybin() const;
  inline void clear_primaryenergybin();
  static const int kPrimaryEnergyBinFieldNumber = 3;
  inline ::google::protobuf::int32 primaryenergybin() const;
  inline void set_primaryenergybin(::google::protobuf::int32 value);
  
  // optional float primaryEnergyRestart = 4;
  inline bool has_primaryenergyrestart() const;
  inline void clear_primaryenergyrestart();
  static const int kPrimaryEnergyRestartFieldNumber = 4;
  inline float primaryenergyrestart() const;
  inline void set_primaryenergyrestart(float value);
  
  // optional float secondaryEnergyStart = 5;
  inline bool has_secondaryenergystart() const;
  inline void clear_secondaryenergystart();
  static const int kSecondaryEnergyStartFieldNumber = 5;
  inline float secondaryenergystart() const;
  inline void set_secondaryenergystart(float value);
  
  // optional float secondaryEnergyEnd = 6;
  inline bool has_secondaryenergyend() const;
  inline void clear_secondaryenergyend();
  static const int kSecondaryEnergyEndFieldNumber = 6;
  inline float secondaryenergyend() const;
  inline void set_secondaryenergyend(float value);
  
  // optional int32 secondaryEnergyBin = 7;
  inline bool has_secondaryenergybin() const;
  inline void clear_secondaryenergybin();
  static const int kSecondaryEnergyBinFieldNumber = 7;
  inline ::google::protobuf::int32 secondaryenergybin() const;
  inline void set_secondaryenergybin(::google::protobuf::int32 value);
  
  // optional float secondaryEnergyRestart = 8;
  inline bool has_secondaryenergyrestart() const;
  inline void clear_secondaryenergyrestart();
  static const int kSecondaryEnergyRestartFieldNumber = 8;
  inline float secondaryenergyrestart() const;
  inline void set_secondaryenergyrestart(float value);
  
  // optional float electronEnergy = 9;
  inline bool has_electronenergy() const;
  inline void clear_electronenergy();
  static const int kElectronEnergyFieldNumber = 9;
  inline float electronenergy() const;
  inline void set_electronenergy(float value);
  
  // optional int32 particleNumber = 10;
  inline bool has_particlenumber() const;
  inline void clear_particlenumber();
  static const int kParticleNumberFieldNumber = 10;
  inline ::google::protobuf::int32 particlenumber() const;
  inline void set_particlenumber(::google::protobuf::int32 value);
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
  inline int primaryspectrumcollection_size() const;
  inline void clear_primaryspectrumcollection();
  static const int kPrimarySpectrumCollectionFieldNumber = 11;
  inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& primaryspectrumcollection(int index) const;
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* mutable_primaryspectrumcollection(int index);
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* add_primaryspectrumcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
      primaryspectrumcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
      mutable_primaryspectrumcollection();
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
  inline int secondaryspectrumcollection_size() const;
  inline void clear_secondaryspectrumcollection();
  static const int kSecondarySpectrumCollectionFieldNumber = 12;
  inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& secondaryspectrumcollection(int index) const;
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* mutable_secondaryspectrumcollection(int index);
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* add_secondaryspectrumcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
      secondaryspectrumcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
      mutable_secondaryspectrumcollection();
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
  inline int electronspectrumcollection_size() const;
  inline void clear_electronspectrumcollection();
  static const int kElectronSpectrumCollectionFieldNumber = 13;
  inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& electronspectrumcollection(int index) const;
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* mutable_electronspectrumcollection(int index);
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* add_electronspectrumcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
      electronspectrumcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
      mutable_electronspectrumcollection();
  
  // optional int32 CompleteFilesNumber = 14;
  inline bool has_completefilesnumber() const;
  inline void clear_completefilesnumber();
  static const int kCompleteFilesNumberFieldNumber = 14;
  inline ::google::protobuf::int32 completefilesnumber() const;
  inline void set_completefilesnumber(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCPDD)
 private:
  inline void set_has_primaryenergystart();
  inline void clear_has_primaryenergystart();
  inline void set_has_primaryenergyend();
  inline void clear_has_primaryenergyend();
  inline void set_has_primaryenergybin();
  inline void clear_has_primaryenergybin();
  inline void set_has_primaryenergyrestart();
  inline void clear_has_primaryenergyrestart();
  inline void set_has_secondaryenergystart();
  inline void clear_has_secondaryenergystart();
  inline void set_has_secondaryenergyend();
  inline void clear_has_secondaryenergyend();
  inline void set_has_secondaryenergybin();
  inline void clear_has_secondaryenergybin();
  inline void set_has_secondaryenergyrestart();
  inline void clear_has_secondaryenergyrestart();
  inline void set_has_electronenergy();
  inline void clear_has_electronenergy();
  inline void set_has_particlenumber();
  inline void clear_has_particlenumber();
  inline void set_has_completefilesnumber();
  inline void clear_has_completefilesnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float primaryenergystart_;
  float primaryenergyend_;
  ::google::protobuf::int32 primaryenergybin_;
  float primaryenergyrestart_;
  float secondaryenergystart_;
  float secondaryenergyend_;
  ::google::protobuf::int32 secondaryenergybin_;
  float secondaryenergyrestart_;
  float electronenergy_;
  ::google::protobuf::int32 particlenumber_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum > primaryspectrumcollection_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum > secondaryspectrumcollection_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum > electronspectrumcollection_;
  ::google::protobuf::int32 completefilesnumber_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCPDD* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCEnergyAndSpectrumList : public ::google::protobuf::Message {
 public:
  RT_MS_PMCEnergyAndSpectrumList();
  virtual ~RT_MS_PMCEnergyAndSpectrumList();
  
  RT_MS_PMCEnergyAndSpectrumList(const RT_MS_PMCEnergyAndSpectrumList& from);
  
  inline RT_MS_PMCEnergyAndSpectrumList& operator=(const RT_MS_PMCEnergyAndSpectrumList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCEnergyAndSpectrumList& default_instance();
  
  void Swap(RT_MS_PMCEnergyAndSpectrumList* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCEnergyAndSpectrumList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCEnergyAndSpectrumList& from);
  void MergeFrom(const RT_MS_PMCEnergyAndSpectrumList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
  inline int energyandspectrumlist_size() const;
  inline void clear_energyandspectrumlist();
  static const int kEnergyAndSpectrumListFieldNumber = 1;
  inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& energyandspectrumlist(int index) const;
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* mutable_energyandspectrumlist(int index);
  inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* add_energyandspectrumlist();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
      energyandspectrumlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
      mutable_energyandspectrumlist();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCEnergyAndSpectrumList)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum > energyandspectrumlist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCEnergyAndSpectrumList* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCEnergyAndSpectrum : public ::google::protobuf::Message {
 public:
  RT_MS_PMCEnergyAndSpectrum();
  virtual ~RT_MS_PMCEnergyAndSpectrum();
  
  RT_MS_PMCEnergyAndSpectrum(const RT_MS_PMCEnergyAndSpectrum& from);
  
  inline RT_MS_PMCEnergyAndSpectrum& operator=(const RT_MS_PMCEnergyAndSpectrum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCEnergyAndSpectrum& default_instance();
  
  void Swap(RT_MS_PMCEnergyAndSpectrum* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCEnergyAndSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCEnergyAndSpectrum& from);
  void MergeFrom(const RT_MS_PMCEnergyAndSpectrum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float energy = 1;
  inline bool has_energy() const;
  inline void clear_energy();
  static const int kEnergyFieldNumber = 1;
  inline float energy() const;
  inline void set_energy(float value);
  
  // optional float weight = 2;
  inline bool has_weight() const;
  inline void clear_weight();
  static const int kWeightFieldNumber = 2;
  inline float weight() const;
  inline void set_weight(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCEnergyAndSpectrum)
 private:
  inline void set_has_energy();
  inline void clear_has_energy();
  inline void set_has_weight();
  inline void clear_has_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float energy_;
  float weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCEnergyAndSpectrum* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCInField : public ::google::protobuf::Message {
 public:
  RT_MS_PMCInField();
  virtual ~RT_MS_PMCInField();
  
  RT_MS_PMCInField(const RT_MS_PMCInField& from);
  
  inline RT_MS_PMCInField& operator=(const RT_MS_PMCInField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCInField& default_instance();
  
  void Swap(RT_MS_PMCInField* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCInField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCInField& from);
  void MergeFrom(const RT_MS_PMCInField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool primarySoften = 1;
  inline bool has_primarysoften() const;
  inline void clear_primarysoften();
  static const int kPrimarySoftenFieldNumber = 1;
  inline bool primarysoften() const;
  inline void set_primarysoften(bool value);
  
  // optional float softenParameter = 2;
  inline bool has_softenparameter() const;
  inline void clear_softenparameter();
  static const int kSoftenParameterFieldNumber = 2;
  inline float softenparameter() const;
  inline void set_softenparameter(float value);
  
  // optional int32 selectedSecondarySourceType = 4;
  inline bool has_selectedsecondarysourcetype() const;
  inline void clear_selectedsecondarysourcetype();
  static const int kSelectedSecondarySourceTypeFieldNumber = 4;
  inline ::google::protobuf::int32 selectedsecondarysourcetype() const;
  inline void set_selectedsecondarysourcetype(::google::protobuf::int32 value);
  
  // optional bool scatterSoften = 5;
  inline bool has_scattersoften() const;
  inline void clear_scattersoften();
  static const int kScatterSoftenFieldNumber = 5;
  inline bool scattersoften() const;
  inline void set_scattersoften(bool value);
  
  // repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
  inline int secondarysourceparametercollection_size() const;
  inline void clear_secondarysourceparametercollection();
  static const int kSecondarySourceParameterCollectionFieldNumber = 6;
  inline const ::ms::proto::RT_MS_PMCSecondarySourceParameter& secondarysourceparametercollection(int index) const;
  inline ::ms::proto::RT_MS_PMCSecondarySourceParameter* mutable_secondarysourceparametercollection(int index);
  inline ::ms::proto::RT_MS_PMCSecondarySourceParameter* add_secondarysourceparametercollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCSecondarySourceParameter >&
      secondarysourceparametercollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCSecondarySourceParameter >*
      mutable_secondarysourceparametercollection();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCInField)
 private:
  inline void set_has_primarysoften();
  inline void clear_has_primarysoften();
  inline void set_has_softenparameter();
  inline void clear_has_softenparameter();
  inline void set_has_selectedsecondarysourcetype();
  inline void clear_has_selectedsecondarysourcetype();
  inline void set_has_scattersoften();
  inline void clear_has_scattersoften();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float softenparameter_;
  bool primarysoften_;
  bool scattersoften_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCSecondarySourceParameter > secondarysourceparametercollection_;
  ::google::protobuf::int32 selectedsecondarysourcetype_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCInField* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCSecondarySourceParameter : public ::google::protobuf::Message {
 public:
  RT_MS_PMCSecondarySourceParameter();
  virtual ~RT_MS_PMCSecondarySourceParameter();
  
  RT_MS_PMCSecondarySourceParameter(const RT_MS_PMCSecondarySourceParameter& from);
  
  inline RT_MS_PMCSecondarySourceParameter& operator=(const RT_MS_PMCSecondarySourceParameter& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCSecondarySourceParameter& default_instance();
  
  void Swap(RT_MS_PMCSecondarySourceParameter* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCSecondarySourceParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCSecondarySourceParameter& from);
  void MergeFrom(const RT_MS_PMCSecondarySourceParameter& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float flatFilterA = 1;
  inline bool has_flatfiltera() const;
  inline void clear_flatfiltera();
  static const int kFlatFilterAFieldNumber = 1;
  inline float flatfiltera() const;
  inline void set_flatfiltera(float value);
  
  // optional float flatFilterB = 2;
  inline bool has_flatfilterb() const;
  inline void clear_flatfilterb();
  static const int kFlatFilterBFieldNumber = 2;
  inline float flatfilterb() const;
  inline void set_flatfilterb(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCSecondarySourceParameter)
 private:
  inline void set_has_flatfiltera();
  inline void clear_has_flatfiltera();
  inline void set_has_flatfilterb();
  inline void clear_has_flatfilterb();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float flatfiltera_;
  float flatfilterb_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCSecondarySourceParameter* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCOutField : public ::google::protobuf::Message {
 public:
  RT_MS_PMCOutField();
  virtual ~RT_MS_PMCOutField();
  
  RT_MS_PMCOutField(const RT_MS_PMCOutField& from);
  
  inline RT_MS_PMCOutField& operator=(const RT_MS_PMCOutField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCOutField& default_instance();
  
  void Swap(RT_MS_PMCOutField* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCOutField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCOutField& from);
  void MergeFrom(const RT_MS_PMCOutField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float flatDistance = 1;
  inline bool has_flatdistance() const;
  inline void clear_flatdistance();
  static const int kFlatDistanceFieldNumber = 1;
  inline float flatdistance() const;
  inline void set_flatdistance(float value);
  
  // optional float jawDistance = 2;
  inline bool has_jawdistance() const;
  inline void clear_jawdistance();
  static const int kJawDistanceFieldNumber = 2;
  inline float jawdistance() const;
  inline void set_jawdistance(float value);
  
  // optional float sigmaP = 3;
  inline bool has_sigmap() const;
  inline void clear_sigmap();
  static const int kSigmaPFieldNumber = 3;
  inline float sigmap() const;
  inline void set_sigmap(float value);
  
  // optional float sigmaS = 4;
  inline bool has_sigmas() const;
  inline void clear_sigmas();
  static const int kSigmaSFieldNumber = 4;
  inline float sigmas() const;
  inline void set_sigmas(float value);
  
  // optional float tailCorrection = 5;
  inline bool has_tailcorrection() const;
  inline void clear_tailcorrection();
  static const int kTailCorrectionFieldNumber = 5;
  inline float tailcorrection() const;
  inline void set_tailcorrection(float value);
  
  // optional float rectangleScatterCorrection = 6;
  inline bool has_rectanglescattercorrection() const;
  inline void clear_rectanglescattercorrection();
  static const int kRectangleScatterCorrectionFieldNumber = 6;
  inline float rectanglescattercorrection() const;
  inline void set_rectanglescattercorrection(float value);
  
  // optional float mlcLeakage = 7;
  inline bool has_mlcleakage() const;
  inline void clear_mlcleakage();
  static const int kMlcLeakageFieldNumber = 7;
  inline float mlcleakage() const;
  inline void set_mlcleakage(float value);
  
  // optional bool gaussianBlurSwitch = 8;
  inline bool has_gaussianblurswitch() const;
  inline void clear_gaussianblurswitch();
  static const int kGaussianBlurSwitchFieldNumber = 8;
  inline bool gaussianblurswitch() const;
  inline void set_gaussianblurswitch(bool value);
  
  // optional float gaussianSigmaX = 9;
  inline bool has_gaussiansigmax() const;
  inline void clear_gaussiansigmax();
  static const int kGaussianSigmaXFieldNumber = 9;
  inline float gaussiansigmax() const;
  inline void set_gaussiansigmax(float value);
  
  // optional float gaussianSigmaY = 10;
  inline bool has_gaussiansigmay() const;
  inline void clear_gaussiansigmay();
  static const int kGaussianSigmaYFieldNumber = 10;
  inline float gaussiansigmay() const;
  inline void set_gaussiansigmay(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCOutField)
 private:
  inline void set_has_flatdistance();
  inline void clear_has_flatdistance();
  inline void set_has_jawdistance();
  inline void clear_has_jawdistance();
  inline void set_has_sigmap();
  inline void clear_has_sigmap();
  inline void set_has_sigmas();
  inline void clear_has_sigmas();
  inline void set_has_tailcorrection();
  inline void clear_has_tailcorrection();
  inline void set_has_rectanglescattercorrection();
  inline void clear_has_rectanglescattercorrection();
  inline void set_has_mlcleakage();
  inline void clear_has_mlcleakage();
  inline void set_has_gaussianblurswitch();
  inline void clear_has_gaussianblurswitch();
  inline void set_has_gaussiansigmax();
  inline void clear_has_gaussiansigmax();
  inline void set_has_gaussiansigmay();
  inline void clear_has_gaussiansigmay();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float flatdistance_;
  float jawdistance_;
  float sigmap_;
  float sigmas_;
  float tailcorrection_;
  float rectanglescattercorrection_;
  float mlcleakage_;
  bool gaussianblurswitch_;
  float gaussiansigmax_;
  float gaussiansigmay_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCOutField* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCElectronContamination : public ::google::protobuf::Message {
 public:
  RT_MS_PMCElectronContamination();
  virtual ~RT_MS_PMCElectronContamination();
  
  RT_MS_PMCElectronContamination(const RT_MS_PMCElectronContamination& from);
  
  inline RT_MS_PMCElectronContamination& operator=(const RT_MS_PMCElectronContamination& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCElectronContamination& default_instance();
  
  void Swap(RT_MS_PMCElectronContamination* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCElectronContamination* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCElectronContamination& from);
  void MergeFrom(const RT_MS_PMCElectronContamination& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float standardRadius = 1;
  inline bool has_standardradius() const;
  inline void clear_standardradius();
  static const int kStandardRadiusFieldNumber = 1;
  inline float standardradius() const;
  inline void set_standardradius(float value);
  
  // optional float sigma = 2;
  inline bool has_sigma() const;
  inline void clear_sigma();
  static const int kSigmaFieldNumber = 2;
  inline float sigma() const;
  inline void set_sigma(float value);
  
  // optional float offset = 3;
  inline bool has_offset() const;
  inline void clear_offset();
  static const int kOffsetFieldNumber = 3;
  inline float offset() const;
  inline void set_offset(float value);
  
  // optional float powerFactor = 4;
  inline bool has_powerfactor() const;
  inline void clear_powerfactor();
  static const int kPowerFactorFieldNumber = 4;
  inline float powerfactor() const;
  inline void set_powerfactor(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCElectronContamination)
 private:
  inline void set_has_standardradius();
  inline void clear_has_standardradius();
  inline void set_has_sigma();
  inline void clear_has_sigma();
  inline void set_has_offset();
  inline void clear_has_offset();
  inline void set_has_powerfactor();
  inline void clear_has_powerfactor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float standardradius_;
  float sigma_;
  float offset_;
  float powerfactor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCElectronContamination* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCAbsoluteDose : public ::google::protobuf::Message {
 public:
  RT_MS_PMCAbsoluteDose();
  virtual ~RT_MS_PMCAbsoluteDose();
  
  RT_MS_PMCAbsoluteDose(const RT_MS_PMCAbsoluteDose& from);
  
  inline RT_MS_PMCAbsoluteDose& operator=(const RT_MS_PMCAbsoluteDose& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCAbsoluteDose& default_instance();
  
  void Swap(RT_MS_PMCAbsoluteDose* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCAbsoluteDose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCAbsoluteDose& from);
  void MergeFrom(const RT_MS_PMCAbsoluteDose& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float norm10Dose = 1;
  inline bool has_norm10dose() const;
  inline void clear_norm10dose();
  static const int kNorm10DoseFieldNumber = 1;
  inline float norm10dose() const;
  inline void set_norm10dose(float value);
  
  // optional string absoluteDoseCollectionStr = 2;
  inline bool has_absolutedosecollectionstr() const;
  inline void clear_absolutedosecollectionstr();
  static const int kAbsoluteDoseCollectionStrFieldNumber = 2;
  inline const ::std::string& absolutedosecollectionstr() const;
  inline void set_absolutedosecollectionstr(const ::std::string& value);
  inline void set_absolutedosecollectionstr(const char* value);
  inline void set_absolutedosecollectionstr(const char* value, size_t size);
  inline ::std::string* mutable_absolutedosecollectionstr();
  inline ::std::string* release_absolutedosecollectionstr();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCAbsoluteDose)
 private:
  inline void set_has_norm10dose();
  inline void clear_has_norm10dose();
  inline void set_has_absolutedosecollectionstr();
  inline void clear_has_absolutedosecollectionstr();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* absolutedosecollectionstr_;
  float norm10dose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCAbsoluteDose* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCWedgeField : public ::google::protobuf::Message {
 public:
  RT_MS_PMCWedgeField();
  virtual ~RT_MS_PMCWedgeField();
  
  RT_MS_PMCWedgeField(const RT_MS_PMCWedgeField& from);
  
  inline RT_MS_PMCWedgeField& operator=(const RT_MS_PMCWedgeField& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCWedgeField& default_instance();
  
  void Swap(RT_MS_PMCWedgeField* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCWedgeField* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCWedgeField& from);
  void MergeFrom(const RT_MS_PMCWedgeField& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
  inline int virtualwedgecollection_size() const;
  inline void clear_virtualwedgecollection();
  static const int kVirtualWedgeCollectionFieldNumber = 1;
  inline const ::ms::proto::RT_MS_PMCVirtualWedge& virtualwedgecollection(int index) const;
  inline ::ms::proto::RT_MS_PMCVirtualWedge* mutable_virtualwedgecollection(int index);
  inline ::ms::proto::RT_MS_PMCVirtualWedge* add_virtualwedgecollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedge >&
      virtualwedgecollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedge >*
      mutable_virtualwedgecollection();
  
  // repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
  inline int physicalwedgecollection_size() const;
  inline void clear_physicalwedgecollection();
  static const int kPhysicalWedgeCollectionFieldNumber = 2;
  inline const ::ms::proto::RT_MS_PMCPhysicalWedge& physicalwedgecollection(int index) const;
  inline ::ms::proto::RT_MS_PMCPhysicalWedge* mutable_physicalwedgecollection(int index);
  inline ::ms::proto::RT_MS_PMCPhysicalWedge* add_physicalwedgecollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCPhysicalWedge >&
      physicalwedgecollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCPhysicalWedge >*
      mutable_physicalwedgecollection();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCWedgeField)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedge > virtualwedgecollection_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCPhysicalWedge > physicalwedgecollection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCWedgeField* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCVirtualWedge : public ::google::protobuf::Message {
 public:
  RT_MS_PMCVirtualWedge();
  virtual ~RT_MS_PMCVirtualWedge();
  
  RT_MS_PMCVirtualWedge(const RT_MS_PMCVirtualWedge& from);
  
  inline RT_MS_PMCVirtualWedge& operator=(const RT_MS_PMCVirtualWedge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCVirtualWedge& default_instance();
  
  void Swap(RT_MS_PMCVirtualWedge* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCVirtualWedge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCVirtualWedge& from);
  void MergeFrom(const RT_MS_PMCVirtualWedge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string wedgeUID = 1;
  inline bool has_wedgeuid() const;
  inline void clear_wedgeuid();
  static const int kWedgeUIDFieldNumber = 1;
  inline const ::std::string& wedgeuid() const;
  inline void set_wedgeuid(const ::std::string& value);
  inline void set_wedgeuid(const char* value);
  inline void set_wedgeuid(const char* value, size_t size);
  inline ::std::string* mutable_wedgeuid();
  inline ::std::string* release_wedgeuid();
  
  // optional string wedgeName = 2;
  inline bool has_wedgename() const;
  inline void clear_wedgename();
  static const int kWedgeNameFieldNumber = 2;
  inline const ::std::string& wedgename() const;
  inline void set_wedgename(const ::std::string& value);
  inline void set_wedgename(const char* value);
  inline void set_wedgename(const char* value, size_t size);
  inline ::std::string* mutable_wedgename();
  inline ::std::string* release_wedgename();
  
  // optional float collimatorFixedPosition = 3;
  inline bool has_collimatorfixedposition() const;
  inline void clear_collimatorfixedposition();
  static const int kCollimatorFixedPositionFieldNumber = 3;
  inline float collimatorfixedposition() const;
  inline void set_collimatorfixedposition(float value);
  
  // repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
  inline int virtualwedgetableitemcollection_size() const;
  inline void clear_virtualwedgetableitemcollection();
  static const int kVirtualWedgeTableItemCollectionFieldNumber = 4;
  inline const ::ms::proto::RT_MS_PMCVirtualWedgeTable& virtualwedgetableitemcollection(int index) const;
  inline ::ms::proto::RT_MS_PMCVirtualWedgeTable* mutable_virtualwedgetableitemcollection(int index);
  inline ::ms::proto::RT_MS_PMCVirtualWedgeTable* add_virtualwedgetableitemcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedgeTable >&
      virtualwedgetableitemcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedgeTable >*
      mutable_virtualwedgetableitemcollection();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCVirtualWedge)
 private:
  inline void set_has_wedgeuid();
  inline void clear_has_wedgeuid();
  inline void set_has_wedgename();
  inline void clear_has_wedgename();
  inline void set_has_collimatorfixedposition();
  inline void clear_has_collimatorfixedposition();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* wedgeuid_;
  ::std::string* wedgename_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedgeTable > virtualwedgetableitemcollection_;
  float collimatorfixedposition_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCVirtualWedge* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCVirtualWedgeTable : public ::google::protobuf::Message {
 public:
  RT_MS_PMCVirtualWedgeTable();
  virtual ~RT_MS_PMCVirtualWedgeTable();
  
  RT_MS_PMCVirtualWedgeTable(const RT_MS_PMCVirtualWedgeTable& from);
  
  inline RT_MS_PMCVirtualWedgeTable& operator=(const RT_MS_PMCVirtualWedgeTable& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCVirtualWedgeTable& default_instance();
  
  void Swap(RT_MS_PMCVirtualWedgeTable* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCVirtualWedgeTable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCVirtualWedgeTable& from);
  void MergeFrom(const RT_MS_PMCVirtualWedgeTable& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float collimatorMovingPosition = 1;
  inline bool has_collimatormovingposition() const;
  inline void clear_collimatormovingposition();
  static const int kCollimatorMovingPositionFieldNumber = 1;
  inline float collimatormovingposition() const;
  inline void set_collimatormovingposition(float value);
  
  // optional float relativeMU = 2;
  inline bool has_relativemu() const;
  inline void clear_relativemu();
  static const int kRelativeMUFieldNumber = 2;
  inline float relativemu() const;
  inline void set_relativemu(float value);
  
  // optional float correctionFactor = 3;
  inline bool has_correctionfactor() const;
  inline void clear_correctionfactor();
  static const int kCorrectionFactorFieldNumber = 3;
  inline float correctionfactor() const;
  inline void set_correctionfactor(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCVirtualWedgeTable)
 private:
  inline void set_has_collimatormovingposition();
  inline void clear_has_collimatormovingposition();
  inline void set_has_relativemu();
  inline void clear_has_relativemu();
  inline void set_has_correctionfactor();
  inline void clear_has_correctionfactor();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float collimatormovingposition_;
  float relativemu_;
  float correctionfactor_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCVirtualWedgeTable* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PMCPhysicalWedge : public ::google::protobuf::Message {
 public:
  RT_MS_PMCPhysicalWedge();
  virtual ~RT_MS_PMCPhysicalWedge();
  
  RT_MS_PMCPhysicalWedge(const RT_MS_PMCPhysicalWedge& from);
  
  inline RT_MS_PMCPhysicalWedge& operator=(const RT_MS_PMCPhysicalWedge& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PMCPhysicalWedge& default_instance();
  
  void Swap(RT_MS_PMCPhysicalWedge* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PMCPhysicalWedge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PMCPhysicalWedge& from);
  void MergeFrom(const RT_MS_PMCPhysicalWedge& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string wedgeUID = 1;
  inline bool has_wedgeuid() const;
  inline void clear_wedgeuid();
  static const int kWedgeUIDFieldNumber = 1;
  inline const ::std::string& wedgeuid() const;
  inline void set_wedgeuid(const ::std::string& value);
  inline void set_wedgeuid(const char* value);
  inline void set_wedgeuid(const char* value, size_t size);
  inline ::std::string* mutable_wedgeuid();
  inline ::std::string* release_wedgeuid();
  
  // optional string wedgeName = 2;
  inline bool has_wedgename() const;
  inline void clear_wedgename();
  static const int kWedgeNameFieldNumber = 2;
  inline const ::std::string& wedgename() const;
  inline void set_wedgename(const ::std::string& value);
  inline void set_wedgename(const char* value);
  inline void set_wedgename(const char* value, size_t size);
  inline ::std::string* mutable_wedgename();
  inline ::std::string* release_wedgename();
  
  // optional float wedgeThickness = 3;
  inline bool has_wedgethickness() const;
  inline void clear_wedgethickness();
  static const int kWedgeThicknessFieldNumber = 3;
  inline float wedgethickness() const;
  inline void set_wedgethickness(float value);
  
  // repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
  inline int contourvertexpointcollection_size() const;
  inline void clear_contourvertexpointcollection();
  static const int kContourVertexPointCollectionFieldNumber = 4;
  inline const ::ms::proto::RT_MS_Point2D& contourvertexpointcollection(int index) const;
  inline ::ms::proto::RT_MS_Point2D* mutable_contourvertexpointcollection(int index);
  inline ::ms::proto::RT_MS_Point2D* add_contourvertexpointcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >&
      contourvertexpointcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >*
      mutable_contourvertexpointcollection();
  
  // optional float carrierThickness = 5;
  inline bool has_carrierthickness() const;
  inline void clear_carrierthickness();
  static const int kCarrierThicknessFieldNumber = 5;
  inline float carrierthickness() const;
  inline void set_carrierthickness(float value);
  
  // repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
  inline int carriercontourvertexpointcollection_size() const;
  inline void clear_carriercontourvertexpointcollection();
  static const int kCarrierContourVertexPointCollectionFieldNumber = 6;
  inline const ::ms::proto::RT_MS_Point2D& carriercontourvertexpointcollection(int index) const;
  inline ::ms::proto::RT_MS_Point2D* mutable_carriercontourvertexpointcollection(int index);
  inline ::ms::proto::RT_MS_Point2D* add_carriercontourvertexpointcollection();
  inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >&
      carriercontourvertexpointcollection() const;
  inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >*
      mutable_carriercontourvertexpointcollection();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PMCPhysicalWedge)
 private:
  inline void set_has_wedgeuid();
  inline void clear_has_wedgeuid();
  inline void set_has_wedgename();
  inline void clear_has_wedgename();
  inline void set_has_wedgethickness();
  inline void clear_has_wedgethickness();
  inline void set_has_carrierthickness();
  inline void clear_has_carrierthickness();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* wedgeuid_;
  ::std::string* wedgename_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D > contourvertexpointcollection_;
  float wedgethickness_;
  float carrierthickness_;
  ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D > carriercontourvertexpointcollection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PMCPhysicalWedge* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_Point2D : public ::google::protobuf::Message {
 public:
  RT_MS_Point2D();
  virtual ~RT_MS_Point2D();
  
  RT_MS_Point2D(const RT_MS_Point2D& from);
  
  inline RT_MS_Point2D& operator=(const RT_MS_Point2D& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_Point2D& default_instance();
  
  void Swap(RT_MS_Point2D* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_Point2D* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_Point2D& from);
  void MergeFrom(const RT_MS_Point2D& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float X = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // optional float Y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_Point2D)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_Point2D* default_instance_;
};
// -------------------------------------------------------------------

class RT_MS_PhotonMonteCarloInformation : public ::google::protobuf::Message {
 public:
  RT_MS_PhotonMonteCarloInformation();
  virtual ~RT_MS_PhotonMonteCarloInformation();
  
  RT_MS_PhotonMonteCarloInformation(const RT_MS_PhotonMonteCarloInformation& from);
  
  inline RT_MS_PhotonMonteCarloInformation& operator=(const RT_MS_PhotonMonteCarloInformation& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_MS_PhotonMonteCarloInformation& default_instance();
  
  void Swap(RT_MS_PhotonMonteCarloInformation* other);
  
  // implements Message ----------------------------------------------
  
  RT_MS_PhotonMonteCarloInformation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_MS_PhotonMonteCarloInformation& from);
  void MergeFrom(const RT_MS_PhotonMonteCarloInformation& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string CommissionUID = 1;
  inline bool has_commissionuid() const;
  inline void clear_commissionuid();
  static const int kCommissionUIDFieldNumber = 1;
  inline const ::std::string& commissionuid() const;
  inline void set_commissionuid(const ::std::string& value);
  inline void set_commissionuid(const char* value);
  inline void set_commissionuid(const char* value, size_t size);
  inline ::std::string* mutable_commissionuid();
  inline ::std::string* release_commissionuid();
  
  // optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
  inline bool has_pddparameter() const;
  inline void clear_pddparameter();
  static const int kPDDParameterFieldNumber = 2;
  inline const ::ms::proto::RT_MS_PMCPDD& pddparameter() const;
  inline ::ms::proto::RT_MS_PMCPDD* mutable_pddparameter();
  inline ::ms::proto::RT_MS_PMCPDD* release_pddparameter();
  
  // optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
  inline bool has_infieldparameter() const;
  inline void clear_infieldparameter();
  static const int kInFieldParameterFieldNumber = 3;
  inline const ::ms::proto::RT_MS_PMCInField& infieldparameter() const;
  inline ::ms::proto::RT_MS_PMCInField* mutable_infieldparameter();
  inline ::ms::proto::RT_MS_PMCInField* release_infieldparameter();
  
  // optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
  inline bool has_outfieldparameter() const;
  inline void clear_outfieldparameter();
  static const int kOutFieldParameterFieldNumber = 4;
  inline const ::ms::proto::RT_MS_PMCOutField& outfieldparameter() const;
  inline ::ms::proto::RT_MS_PMCOutField* mutable_outfieldparameter();
  inline ::ms::proto::RT_MS_PMCOutField* release_outfieldparameter();
  
  // optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
  inline bool has_electroncontaminationparameter() const;
  inline void clear_electroncontaminationparameter();
  static const int kElectronContaminationParameterFieldNumber = 5;
  inline const ::ms::proto::RT_MS_PMCElectronContamination& electroncontaminationparameter() const;
  inline ::ms::proto::RT_MS_PMCElectronContamination* mutable_electroncontaminationparameter();
  inline ::ms::proto::RT_MS_PMCElectronContamination* release_electroncontaminationparameter();
  
  // optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
  inline bool has_absolutedoseparameter() const;
  inline void clear_absolutedoseparameter();
  static const int kAbsoluteDoseParameterFieldNumber = 6;
  inline const ::ms::proto::RT_MS_PMCAbsoluteDose& absolutedoseparameter() const;
  inline ::ms::proto::RT_MS_PMCAbsoluteDose* mutable_absolutedoseparameter();
  inline ::ms::proto::RT_MS_PMCAbsoluteDose* release_absolutedoseparameter();
  
  // optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
  inline bool has_wedgefieldparameter() const;
  inline void clear_wedgefieldparameter();
  static const int kWedgeFieldParameterFieldNumber = 7;
  inline const ::ms::proto::RT_MS_PMCWedgeField& wedgefieldparameter() const;
  inline ::ms::proto::RT_MS_PMCWedgeField* mutable_wedgefieldparameter();
  inline ::ms::proto::RT_MS_PMCWedgeField* release_wedgefieldparameter();
  
  // @@protoc_insertion_point(class_scope:ms.proto.RT_MS_PhotonMonteCarloInformation)
 private:
  inline void set_has_commissionuid();
  inline void clear_has_commissionuid();
  inline void set_has_pddparameter();
  inline void clear_has_pddparameter();
  inline void set_has_infieldparameter();
  inline void clear_has_infieldparameter();
  inline void set_has_outfieldparameter();
  inline void clear_has_outfieldparameter();
  inline void set_has_electroncontaminationparameter();
  inline void clear_has_electroncontaminationparameter();
  inline void set_has_absolutedoseparameter();
  inline void clear_has_absolutedoseparameter();
  inline void set_has_wedgefieldparameter();
  inline void clear_has_wedgefieldparameter();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* commissionuid_;
  ::ms::proto::RT_MS_PMCPDD* pddparameter_;
  ::ms::proto::RT_MS_PMCInField* infieldparameter_;
  ::ms::proto::RT_MS_PMCOutField* outfieldparameter_;
  ::ms::proto::RT_MS_PMCElectronContamination* electroncontaminationparameter_;
  ::ms::proto::RT_MS_PMCAbsoluteDose* absolutedoseparameter_;
  ::ms::proto::RT_MS_PMCWedgeField* wedgefieldparameter_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_AssignDesc_rt_5fms_5fphotonsmontecarlo_2eproto();
  friend void protobuf_ShutdownFile_rt_5fms_5fphotonsmontecarlo_2eproto();
  
  void InitAsDefaultInstance();
  static RT_MS_PhotonMonteCarloInformation* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_MS_PMCPDD

// optional float primaryEnergyStart = 1;
inline bool RT_MS_PMCPDD::has_primaryenergystart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCPDD::set_has_primaryenergystart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCPDD::clear_has_primaryenergystart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCPDD::clear_primaryenergystart() {
  primaryenergystart_ = 0;
  clear_has_primaryenergystart();
}
inline float RT_MS_PMCPDD::primaryenergystart() const {
  return primaryenergystart_;
}
inline void RT_MS_PMCPDD::set_primaryenergystart(float value) {
  set_has_primaryenergystart();
  primaryenergystart_ = value;
}

// optional float primaryEnergyEnd = 2;
inline bool RT_MS_PMCPDD::has_primaryenergyend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCPDD::set_has_primaryenergyend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCPDD::clear_has_primaryenergyend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCPDD::clear_primaryenergyend() {
  primaryenergyend_ = 0;
  clear_has_primaryenergyend();
}
inline float RT_MS_PMCPDD::primaryenergyend() const {
  return primaryenergyend_;
}
inline void RT_MS_PMCPDD::set_primaryenergyend(float value) {
  set_has_primaryenergyend();
  primaryenergyend_ = value;
}

// optional int32 primaryEnergyBin = 3;
inline bool RT_MS_PMCPDD::has_primaryenergybin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCPDD::set_has_primaryenergybin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCPDD::clear_has_primaryenergybin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCPDD::clear_primaryenergybin() {
  primaryenergybin_ = 0;
  clear_has_primaryenergybin();
}
inline ::google::protobuf::int32 RT_MS_PMCPDD::primaryenergybin() const {
  return primaryenergybin_;
}
inline void RT_MS_PMCPDD::set_primaryenergybin(::google::protobuf::int32 value) {
  set_has_primaryenergybin();
  primaryenergybin_ = value;
}

// optional float primaryEnergyRestart = 4;
inline bool RT_MS_PMCPDD::has_primaryenergyrestart() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_PMCPDD::set_has_primaryenergyrestart() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_PMCPDD::clear_has_primaryenergyrestart() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_PMCPDD::clear_primaryenergyrestart() {
  primaryenergyrestart_ = 0;
  clear_has_primaryenergyrestart();
}
inline float RT_MS_PMCPDD::primaryenergyrestart() const {
  return primaryenergyrestart_;
}
inline void RT_MS_PMCPDD::set_primaryenergyrestart(float value) {
  set_has_primaryenergyrestart();
  primaryenergyrestart_ = value;
}

// optional float secondaryEnergyStart = 5;
inline bool RT_MS_PMCPDD::has_secondaryenergystart() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_PMCPDD::set_has_secondaryenergystart() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_PMCPDD::clear_has_secondaryenergystart() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_PMCPDD::clear_secondaryenergystart() {
  secondaryenergystart_ = 0;
  clear_has_secondaryenergystart();
}
inline float RT_MS_PMCPDD::secondaryenergystart() const {
  return secondaryenergystart_;
}
inline void RT_MS_PMCPDD::set_secondaryenergystart(float value) {
  set_has_secondaryenergystart();
  secondaryenergystart_ = value;
}

// optional float secondaryEnergyEnd = 6;
inline bool RT_MS_PMCPDD::has_secondaryenergyend() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_PMCPDD::set_has_secondaryenergyend() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_PMCPDD::clear_has_secondaryenergyend() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_PMCPDD::clear_secondaryenergyend() {
  secondaryenergyend_ = 0;
  clear_has_secondaryenergyend();
}
inline float RT_MS_PMCPDD::secondaryenergyend() const {
  return secondaryenergyend_;
}
inline void RT_MS_PMCPDD::set_secondaryenergyend(float value) {
  set_has_secondaryenergyend();
  secondaryenergyend_ = value;
}

// optional int32 secondaryEnergyBin = 7;
inline bool RT_MS_PMCPDD::has_secondaryenergybin() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_PMCPDD::set_has_secondaryenergybin() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_PMCPDD::clear_has_secondaryenergybin() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_PMCPDD::clear_secondaryenergybin() {
  secondaryenergybin_ = 0;
  clear_has_secondaryenergybin();
}
inline ::google::protobuf::int32 RT_MS_PMCPDD::secondaryenergybin() const {
  return secondaryenergybin_;
}
inline void RT_MS_PMCPDD::set_secondaryenergybin(::google::protobuf::int32 value) {
  set_has_secondaryenergybin();
  secondaryenergybin_ = value;
}

// optional float secondaryEnergyRestart = 8;
inline bool RT_MS_PMCPDD::has_secondaryenergyrestart() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_MS_PMCPDD::set_has_secondaryenergyrestart() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_MS_PMCPDD::clear_has_secondaryenergyrestart() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_MS_PMCPDD::clear_secondaryenergyrestart() {
  secondaryenergyrestart_ = 0;
  clear_has_secondaryenergyrestart();
}
inline float RT_MS_PMCPDD::secondaryenergyrestart() const {
  return secondaryenergyrestart_;
}
inline void RT_MS_PMCPDD::set_secondaryenergyrestart(float value) {
  set_has_secondaryenergyrestart();
  secondaryenergyrestart_ = value;
}

// optional float electronEnergy = 9;
inline bool RT_MS_PMCPDD::has_electronenergy() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_MS_PMCPDD::set_has_electronenergy() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_MS_PMCPDD::clear_has_electronenergy() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_MS_PMCPDD::clear_electronenergy() {
  electronenergy_ = 0;
  clear_has_electronenergy();
}
inline float RT_MS_PMCPDD::electronenergy() const {
  return electronenergy_;
}
inline void RT_MS_PMCPDD::set_electronenergy(float value) {
  set_has_electronenergy();
  electronenergy_ = value;
}

// optional int32 particleNumber = 10;
inline bool RT_MS_PMCPDD::has_particlenumber() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_MS_PMCPDD::set_has_particlenumber() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_MS_PMCPDD::clear_has_particlenumber() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_MS_PMCPDD::clear_particlenumber() {
  particlenumber_ = 0;
  clear_has_particlenumber();
}
inline ::google::protobuf::int32 RT_MS_PMCPDD::particlenumber() const {
  return particlenumber_;
}
inline void RT_MS_PMCPDD::set_particlenumber(::google::protobuf::int32 value) {
  set_has_particlenumber();
  particlenumber_ = value;
}

// repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum primarySpectrumCollection = 11;
inline int RT_MS_PMCPDD::primaryspectrumcollection_size() const {
  return primaryspectrumcollection_.size();
}
inline void RT_MS_PMCPDD::clear_primaryspectrumcollection() {
  primaryspectrumcollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& RT_MS_PMCPDD::primaryspectrumcollection(int index) const {
  return primaryspectrumcollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::mutable_primaryspectrumcollection(int index) {
  return primaryspectrumcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::add_primaryspectrumcollection() {
  return primaryspectrumcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
RT_MS_PMCPDD::primaryspectrumcollection() const {
  return primaryspectrumcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
RT_MS_PMCPDD::mutable_primaryspectrumcollection() {
  return &primaryspectrumcollection_;
}

// repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum secondarySpectrumCollection = 12;
inline int RT_MS_PMCPDD::secondaryspectrumcollection_size() const {
  return secondaryspectrumcollection_.size();
}
inline void RT_MS_PMCPDD::clear_secondaryspectrumcollection() {
  secondaryspectrumcollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& RT_MS_PMCPDD::secondaryspectrumcollection(int index) const {
  return secondaryspectrumcollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::mutable_secondaryspectrumcollection(int index) {
  return secondaryspectrumcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::add_secondaryspectrumcollection() {
  return secondaryspectrumcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
RT_MS_PMCPDD::secondaryspectrumcollection() const {
  return secondaryspectrumcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
RT_MS_PMCPDD::mutable_secondaryspectrumcollection() {
  return &secondaryspectrumcollection_;
}

// repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum electronSpectrumCollection = 13;
inline int RT_MS_PMCPDD::electronspectrumcollection_size() const {
  return electronspectrumcollection_.size();
}
inline void RT_MS_PMCPDD::clear_electronspectrumcollection() {
  electronspectrumcollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& RT_MS_PMCPDD::electronspectrumcollection(int index) const {
  return electronspectrumcollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::mutable_electronspectrumcollection(int index) {
  return electronspectrumcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCPDD::add_electronspectrumcollection() {
  return electronspectrumcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
RT_MS_PMCPDD::electronspectrumcollection() const {
  return electronspectrumcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
RT_MS_PMCPDD::mutable_electronspectrumcollection() {
  return &electronspectrumcollection_;
}

// optional int32 CompleteFilesNumber = 14;
inline bool RT_MS_PMCPDD::has_completefilesnumber() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RT_MS_PMCPDD::set_has_completefilesnumber() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RT_MS_PMCPDD::clear_has_completefilesnumber() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RT_MS_PMCPDD::clear_completefilesnumber() {
  completefilesnumber_ = 0;
  clear_has_completefilesnumber();
}
inline ::google::protobuf::int32 RT_MS_PMCPDD::completefilesnumber() const {
  return completefilesnumber_;
}
inline void RT_MS_PMCPDD::set_completefilesnumber(::google::protobuf::int32 value) {
  set_has_completefilesnumber();
  completefilesnumber_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCEnergyAndSpectrumList

// repeated .ms.proto.RT_MS_PMCEnergyAndSpectrum EnergyAndSpectrumList = 1;
inline int RT_MS_PMCEnergyAndSpectrumList::energyandspectrumlist_size() const {
  return energyandspectrumlist_.size();
}
inline void RT_MS_PMCEnergyAndSpectrumList::clear_energyandspectrumlist() {
  energyandspectrumlist_.Clear();
}
inline const ::ms::proto::RT_MS_PMCEnergyAndSpectrum& RT_MS_PMCEnergyAndSpectrumList::energyandspectrumlist(int index) const {
  return energyandspectrumlist_.Get(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCEnergyAndSpectrumList::mutable_energyandspectrumlist(int index) {
  return energyandspectrumlist_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCEnergyAndSpectrum* RT_MS_PMCEnergyAndSpectrumList::add_energyandspectrumlist() {
  return energyandspectrumlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >&
RT_MS_PMCEnergyAndSpectrumList::energyandspectrumlist() const {
  return energyandspectrumlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCEnergyAndSpectrum >*
RT_MS_PMCEnergyAndSpectrumList::mutable_energyandspectrumlist() {
  return &energyandspectrumlist_;
}

// -------------------------------------------------------------------

// RT_MS_PMCEnergyAndSpectrum

// optional float energy = 1;
inline bool RT_MS_PMCEnergyAndSpectrum::has_energy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCEnergyAndSpectrum::set_has_energy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCEnergyAndSpectrum::clear_has_energy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCEnergyAndSpectrum::clear_energy() {
  energy_ = 0;
  clear_has_energy();
}
inline float RT_MS_PMCEnergyAndSpectrum::energy() const {
  return energy_;
}
inline void RT_MS_PMCEnergyAndSpectrum::set_energy(float value) {
  set_has_energy();
  energy_ = value;
}

// optional float weight = 2;
inline bool RT_MS_PMCEnergyAndSpectrum::has_weight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCEnergyAndSpectrum::set_has_weight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCEnergyAndSpectrum::clear_has_weight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCEnergyAndSpectrum::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
inline float RT_MS_PMCEnergyAndSpectrum::weight() const {
  return weight_;
}
inline void RT_MS_PMCEnergyAndSpectrum::set_weight(float value) {
  set_has_weight();
  weight_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCInField

// optional bool primarySoften = 1;
inline bool RT_MS_PMCInField::has_primarysoften() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCInField::set_has_primarysoften() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCInField::clear_has_primarysoften() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCInField::clear_primarysoften() {
  primarysoften_ = false;
  clear_has_primarysoften();
}
inline bool RT_MS_PMCInField::primarysoften() const {
  return primarysoften_;
}
inline void RT_MS_PMCInField::set_primarysoften(bool value) {
  set_has_primarysoften();
  primarysoften_ = value;
}

// optional float softenParameter = 2;
inline bool RT_MS_PMCInField::has_softenparameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCInField::set_has_softenparameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCInField::clear_has_softenparameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCInField::clear_softenparameter() {
  softenparameter_ = 0;
  clear_has_softenparameter();
}
inline float RT_MS_PMCInField::softenparameter() const {
  return softenparameter_;
}
inline void RT_MS_PMCInField::set_softenparameter(float value) {
  set_has_softenparameter();
  softenparameter_ = value;
}

// optional int32 selectedSecondarySourceType = 4;
inline bool RT_MS_PMCInField::has_selectedsecondarysourcetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCInField::set_has_selectedsecondarysourcetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCInField::clear_has_selectedsecondarysourcetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCInField::clear_selectedsecondarysourcetype() {
  selectedsecondarysourcetype_ = 0;
  clear_has_selectedsecondarysourcetype();
}
inline ::google::protobuf::int32 RT_MS_PMCInField::selectedsecondarysourcetype() const {
  return selectedsecondarysourcetype_;
}
inline void RT_MS_PMCInField::set_selectedsecondarysourcetype(::google::protobuf::int32 value) {
  set_has_selectedsecondarysourcetype();
  selectedsecondarysourcetype_ = value;
}

// optional bool scatterSoften = 5;
inline bool RT_MS_PMCInField::has_scattersoften() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_PMCInField::set_has_scattersoften() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_PMCInField::clear_has_scattersoften() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_PMCInField::clear_scattersoften() {
  scattersoften_ = false;
  clear_has_scattersoften();
}
inline bool RT_MS_PMCInField::scattersoften() const {
  return scattersoften_;
}
inline void RT_MS_PMCInField::set_scattersoften(bool value) {
  set_has_scattersoften();
  scattersoften_ = value;
}

// repeated .ms.proto.RT_MS_PMCSecondarySourceParameter secondarySourceParameterCollection = 6;
inline int RT_MS_PMCInField::secondarysourceparametercollection_size() const {
  return secondarysourceparametercollection_.size();
}
inline void RT_MS_PMCInField::clear_secondarysourceparametercollection() {
  secondarysourceparametercollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCSecondarySourceParameter& RT_MS_PMCInField::secondarysourceparametercollection(int index) const {
  return secondarysourceparametercollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCSecondarySourceParameter* RT_MS_PMCInField::mutable_secondarysourceparametercollection(int index) {
  return secondarysourceparametercollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCSecondarySourceParameter* RT_MS_PMCInField::add_secondarysourceparametercollection() {
  return secondarysourceparametercollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCSecondarySourceParameter >&
RT_MS_PMCInField::secondarysourceparametercollection() const {
  return secondarysourceparametercollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCSecondarySourceParameter >*
RT_MS_PMCInField::mutable_secondarysourceparametercollection() {
  return &secondarysourceparametercollection_;
}

// -------------------------------------------------------------------

// RT_MS_PMCSecondarySourceParameter

// optional float flatFilterA = 1;
inline bool RT_MS_PMCSecondarySourceParameter::has_flatfiltera() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCSecondarySourceParameter::set_has_flatfiltera() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCSecondarySourceParameter::clear_has_flatfiltera() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCSecondarySourceParameter::clear_flatfiltera() {
  flatfiltera_ = 0;
  clear_has_flatfiltera();
}
inline float RT_MS_PMCSecondarySourceParameter::flatfiltera() const {
  return flatfiltera_;
}
inline void RT_MS_PMCSecondarySourceParameter::set_flatfiltera(float value) {
  set_has_flatfiltera();
  flatfiltera_ = value;
}

// optional float flatFilterB = 2;
inline bool RT_MS_PMCSecondarySourceParameter::has_flatfilterb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCSecondarySourceParameter::set_has_flatfilterb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCSecondarySourceParameter::clear_has_flatfilterb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCSecondarySourceParameter::clear_flatfilterb() {
  flatfilterb_ = 0;
  clear_has_flatfilterb();
}
inline float RT_MS_PMCSecondarySourceParameter::flatfilterb() const {
  return flatfilterb_;
}
inline void RT_MS_PMCSecondarySourceParameter::set_flatfilterb(float value) {
  set_has_flatfilterb();
  flatfilterb_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCOutField

// optional float flatDistance = 1;
inline bool RT_MS_PMCOutField::has_flatdistance() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCOutField::set_has_flatdistance() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCOutField::clear_has_flatdistance() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCOutField::clear_flatdistance() {
  flatdistance_ = 0;
  clear_has_flatdistance();
}
inline float RT_MS_PMCOutField::flatdistance() const {
  return flatdistance_;
}
inline void RT_MS_PMCOutField::set_flatdistance(float value) {
  set_has_flatdistance();
  flatdistance_ = value;
}

// optional float jawDistance = 2;
inline bool RT_MS_PMCOutField::has_jawdistance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCOutField::set_has_jawdistance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCOutField::clear_has_jawdistance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCOutField::clear_jawdistance() {
  jawdistance_ = 0;
  clear_has_jawdistance();
}
inline float RT_MS_PMCOutField::jawdistance() const {
  return jawdistance_;
}
inline void RT_MS_PMCOutField::set_jawdistance(float value) {
  set_has_jawdistance();
  jawdistance_ = value;
}

// optional float sigmaP = 3;
inline bool RT_MS_PMCOutField::has_sigmap() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCOutField::set_has_sigmap() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCOutField::clear_has_sigmap() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCOutField::clear_sigmap() {
  sigmap_ = 0;
  clear_has_sigmap();
}
inline float RT_MS_PMCOutField::sigmap() const {
  return sigmap_;
}
inline void RT_MS_PMCOutField::set_sigmap(float value) {
  set_has_sigmap();
  sigmap_ = value;
}

// optional float sigmaS = 4;
inline bool RT_MS_PMCOutField::has_sigmas() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_PMCOutField::set_has_sigmas() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_PMCOutField::clear_has_sigmas() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_PMCOutField::clear_sigmas() {
  sigmas_ = 0;
  clear_has_sigmas();
}
inline float RT_MS_PMCOutField::sigmas() const {
  return sigmas_;
}
inline void RT_MS_PMCOutField::set_sigmas(float value) {
  set_has_sigmas();
  sigmas_ = value;
}

// optional float tailCorrection = 5;
inline bool RT_MS_PMCOutField::has_tailcorrection() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_PMCOutField::set_has_tailcorrection() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_PMCOutField::clear_has_tailcorrection() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_PMCOutField::clear_tailcorrection() {
  tailcorrection_ = 0;
  clear_has_tailcorrection();
}
inline float RT_MS_PMCOutField::tailcorrection() const {
  return tailcorrection_;
}
inline void RT_MS_PMCOutField::set_tailcorrection(float value) {
  set_has_tailcorrection();
  tailcorrection_ = value;
}

// optional float rectangleScatterCorrection = 6;
inline bool RT_MS_PMCOutField::has_rectanglescattercorrection() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_PMCOutField::set_has_rectanglescattercorrection() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_PMCOutField::clear_has_rectanglescattercorrection() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_PMCOutField::clear_rectanglescattercorrection() {
  rectanglescattercorrection_ = 0;
  clear_has_rectanglescattercorrection();
}
inline float RT_MS_PMCOutField::rectanglescattercorrection() const {
  return rectanglescattercorrection_;
}
inline void RT_MS_PMCOutField::set_rectanglescattercorrection(float value) {
  set_has_rectanglescattercorrection();
  rectanglescattercorrection_ = value;
}

// optional float mlcLeakage = 7;
inline bool RT_MS_PMCOutField::has_mlcleakage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_PMCOutField::set_has_mlcleakage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_PMCOutField::clear_has_mlcleakage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_PMCOutField::clear_mlcleakage() {
  mlcleakage_ = 0;
  clear_has_mlcleakage();
}
inline float RT_MS_PMCOutField::mlcleakage() const {
  return mlcleakage_;
}
inline void RT_MS_PMCOutField::set_mlcleakage(float value) {
  set_has_mlcleakage();
  mlcleakage_ = value;
}

// optional bool gaussianBlurSwitch = 8;
inline bool RT_MS_PMCOutField::has_gaussianblurswitch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_MS_PMCOutField::set_has_gaussianblurswitch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_MS_PMCOutField::clear_has_gaussianblurswitch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_MS_PMCOutField::clear_gaussianblurswitch() {
  gaussianblurswitch_ = false;
  clear_has_gaussianblurswitch();
}
inline bool RT_MS_PMCOutField::gaussianblurswitch() const {
  return gaussianblurswitch_;
}
inline void RT_MS_PMCOutField::set_gaussianblurswitch(bool value) {
  set_has_gaussianblurswitch();
  gaussianblurswitch_ = value;
}

// optional float gaussianSigmaX = 9;
inline bool RT_MS_PMCOutField::has_gaussiansigmax() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_MS_PMCOutField::set_has_gaussiansigmax() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_MS_PMCOutField::clear_has_gaussiansigmax() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_MS_PMCOutField::clear_gaussiansigmax() {
  gaussiansigmax_ = 0;
  clear_has_gaussiansigmax();
}
inline float RT_MS_PMCOutField::gaussiansigmax() const {
  return gaussiansigmax_;
}
inline void RT_MS_PMCOutField::set_gaussiansigmax(float value) {
  set_has_gaussiansigmax();
  gaussiansigmax_ = value;
}

// optional float gaussianSigmaY = 10;
inline bool RT_MS_PMCOutField::has_gaussiansigmay() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_MS_PMCOutField::set_has_gaussiansigmay() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_MS_PMCOutField::clear_has_gaussiansigmay() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_MS_PMCOutField::clear_gaussiansigmay() {
  gaussiansigmay_ = 0;
  clear_has_gaussiansigmay();
}
inline float RT_MS_PMCOutField::gaussiansigmay() const {
  return gaussiansigmay_;
}
inline void RT_MS_PMCOutField::set_gaussiansigmay(float value) {
  set_has_gaussiansigmay();
  gaussiansigmay_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCElectronContamination

// optional float standardRadius = 1;
inline bool RT_MS_PMCElectronContamination::has_standardradius() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCElectronContamination::set_has_standardradius() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCElectronContamination::clear_has_standardradius() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCElectronContamination::clear_standardradius() {
  standardradius_ = 0;
  clear_has_standardradius();
}
inline float RT_MS_PMCElectronContamination::standardradius() const {
  return standardradius_;
}
inline void RT_MS_PMCElectronContamination::set_standardradius(float value) {
  set_has_standardradius();
  standardradius_ = value;
}

// optional float sigma = 2;
inline bool RT_MS_PMCElectronContamination::has_sigma() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCElectronContamination::set_has_sigma() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCElectronContamination::clear_has_sigma() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCElectronContamination::clear_sigma() {
  sigma_ = 0;
  clear_has_sigma();
}
inline float RT_MS_PMCElectronContamination::sigma() const {
  return sigma_;
}
inline void RT_MS_PMCElectronContamination::set_sigma(float value) {
  set_has_sigma();
  sigma_ = value;
}

// optional float offset = 3;
inline bool RT_MS_PMCElectronContamination::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCElectronContamination::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCElectronContamination::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCElectronContamination::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
inline float RT_MS_PMCElectronContamination::offset() const {
  return offset_;
}
inline void RT_MS_PMCElectronContamination::set_offset(float value) {
  set_has_offset();
  offset_ = value;
}

// optional float powerFactor = 4;
inline bool RT_MS_PMCElectronContamination::has_powerfactor() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_PMCElectronContamination::set_has_powerfactor() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_PMCElectronContamination::clear_has_powerfactor() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_PMCElectronContamination::clear_powerfactor() {
  powerfactor_ = 0;
  clear_has_powerfactor();
}
inline float RT_MS_PMCElectronContamination::powerfactor() const {
  return powerfactor_;
}
inline void RT_MS_PMCElectronContamination::set_powerfactor(float value) {
  set_has_powerfactor();
  powerfactor_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCAbsoluteDose

// optional float norm10Dose = 1;
inline bool RT_MS_PMCAbsoluteDose::has_norm10dose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCAbsoluteDose::set_has_norm10dose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCAbsoluteDose::clear_has_norm10dose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCAbsoluteDose::clear_norm10dose() {
  norm10dose_ = 0;
  clear_has_norm10dose();
}
inline float RT_MS_PMCAbsoluteDose::norm10dose() const {
  return norm10dose_;
}
inline void RT_MS_PMCAbsoluteDose::set_norm10dose(float value) {
  set_has_norm10dose();
  norm10dose_ = value;
}

// optional string absoluteDoseCollectionStr = 2;
inline bool RT_MS_PMCAbsoluteDose::has_absolutedosecollectionstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCAbsoluteDose::set_has_absolutedosecollectionstr() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCAbsoluteDose::clear_has_absolutedosecollectionstr() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCAbsoluteDose::clear_absolutedosecollectionstr() {
  if (absolutedosecollectionstr_ != &::google::protobuf::internal::kEmptyString) {
    absolutedosecollectionstr_->clear();
  }
  clear_has_absolutedosecollectionstr();
}
inline const ::std::string& RT_MS_PMCAbsoluteDose::absolutedosecollectionstr() const {
  return *absolutedosecollectionstr_;
}
inline void RT_MS_PMCAbsoluteDose::set_absolutedosecollectionstr(const ::std::string& value) {
  set_has_absolutedosecollectionstr();
  if (absolutedosecollectionstr_ == &::google::protobuf::internal::kEmptyString) {
    absolutedosecollectionstr_ = new ::std::string;
  }
  absolutedosecollectionstr_->assign(value);
}
inline void RT_MS_PMCAbsoluteDose::set_absolutedosecollectionstr(const char* value) {
  set_has_absolutedosecollectionstr();
  if (absolutedosecollectionstr_ == &::google::protobuf::internal::kEmptyString) {
    absolutedosecollectionstr_ = new ::std::string;
  }
  absolutedosecollectionstr_->assign(value);
}
inline void RT_MS_PMCAbsoluteDose::set_absolutedosecollectionstr(const char* value, size_t size) {
  set_has_absolutedosecollectionstr();
  if (absolutedosecollectionstr_ == &::google::protobuf::internal::kEmptyString) {
    absolutedosecollectionstr_ = new ::std::string;
  }
  absolutedosecollectionstr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PMCAbsoluteDose::mutable_absolutedosecollectionstr() {
  set_has_absolutedosecollectionstr();
  if (absolutedosecollectionstr_ == &::google::protobuf::internal::kEmptyString) {
    absolutedosecollectionstr_ = new ::std::string;
  }
  return absolutedosecollectionstr_;
}
inline ::std::string* RT_MS_PMCAbsoluteDose::release_absolutedosecollectionstr() {
  clear_has_absolutedosecollectionstr();
  if (absolutedosecollectionstr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = absolutedosecollectionstr_;
    absolutedosecollectionstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RT_MS_PMCWedgeField

// repeated .ms.proto.RT_MS_PMCVirtualWedge virtualWedgeCollection = 1;
inline int RT_MS_PMCWedgeField::virtualwedgecollection_size() const {
  return virtualwedgecollection_.size();
}
inline void RT_MS_PMCWedgeField::clear_virtualwedgecollection() {
  virtualwedgecollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCVirtualWedge& RT_MS_PMCWedgeField::virtualwedgecollection(int index) const {
  return virtualwedgecollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCVirtualWedge* RT_MS_PMCWedgeField::mutable_virtualwedgecollection(int index) {
  return virtualwedgecollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCVirtualWedge* RT_MS_PMCWedgeField::add_virtualwedgecollection() {
  return virtualwedgecollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedge >&
RT_MS_PMCWedgeField::virtualwedgecollection() const {
  return virtualwedgecollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedge >*
RT_MS_PMCWedgeField::mutable_virtualwedgecollection() {
  return &virtualwedgecollection_;
}

// repeated .ms.proto.RT_MS_PMCPhysicalWedge PhysicalWedgeCollection = 2;
inline int RT_MS_PMCWedgeField::physicalwedgecollection_size() const {
  return physicalwedgecollection_.size();
}
inline void RT_MS_PMCWedgeField::clear_physicalwedgecollection() {
  physicalwedgecollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCPhysicalWedge& RT_MS_PMCWedgeField::physicalwedgecollection(int index) const {
  return physicalwedgecollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCPhysicalWedge* RT_MS_PMCWedgeField::mutable_physicalwedgecollection(int index) {
  return physicalwedgecollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCPhysicalWedge* RT_MS_PMCWedgeField::add_physicalwedgecollection() {
  return physicalwedgecollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCPhysicalWedge >&
RT_MS_PMCWedgeField::physicalwedgecollection() const {
  return physicalwedgecollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCPhysicalWedge >*
RT_MS_PMCWedgeField::mutable_physicalwedgecollection() {
  return &physicalwedgecollection_;
}

// -------------------------------------------------------------------

// RT_MS_PMCVirtualWedge

// optional string wedgeUID = 1;
inline bool RT_MS_PMCVirtualWedge::has_wedgeuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCVirtualWedge::set_has_wedgeuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCVirtualWedge::clear_has_wedgeuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCVirtualWedge::clear_wedgeuid() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    wedgeuid_->clear();
  }
  clear_has_wedgeuid();
}
inline const ::std::string& RT_MS_PMCVirtualWedge::wedgeuid() const {
  return *wedgeuid_;
}
inline void RT_MS_PMCVirtualWedge::set_wedgeuid(const ::std::string& value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_PMCVirtualWedge::set_wedgeuid(const char* value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_PMCVirtualWedge::set_wedgeuid(const char* value, size_t size) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PMCVirtualWedge::mutable_wedgeuid() {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  return wedgeuid_;
}
inline ::std::string* RT_MS_PMCVirtualWedge::release_wedgeuid() {
  clear_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgeuid_;
    wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wedgeName = 2;
inline bool RT_MS_PMCVirtualWedge::has_wedgename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCVirtualWedge::set_has_wedgename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCVirtualWedge::clear_has_wedgename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCVirtualWedge::clear_wedgename() {
  if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
    wedgename_->clear();
  }
  clear_has_wedgename();
}
inline const ::std::string& RT_MS_PMCVirtualWedge::wedgename() const {
  return *wedgename_;
}
inline void RT_MS_PMCVirtualWedge::set_wedgename(const ::std::string& value) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(value);
}
inline void RT_MS_PMCVirtualWedge::set_wedgename(const char* value) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(value);
}
inline void RT_MS_PMCVirtualWedge::set_wedgename(const char* value, size_t size) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PMCVirtualWedge::mutable_wedgename() {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  return wedgename_;
}
inline ::std::string* RT_MS_PMCVirtualWedge::release_wedgename() {
  clear_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgename_;
    wedgename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float collimatorFixedPosition = 3;
inline bool RT_MS_PMCVirtualWedge::has_collimatorfixedposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCVirtualWedge::set_has_collimatorfixedposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCVirtualWedge::clear_has_collimatorfixedposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCVirtualWedge::clear_collimatorfixedposition() {
  collimatorfixedposition_ = 0;
  clear_has_collimatorfixedposition();
}
inline float RT_MS_PMCVirtualWedge::collimatorfixedposition() const {
  return collimatorfixedposition_;
}
inline void RT_MS_PMCVirtualWedge::set_collimatorfixedposition(float value) {
  set_has_collimatorfixedposition();
  collimatorfixedposition_ = value;
}

// repeated .ms.proto.RT_MS_PMCVirtualWedgeTable virtualWedgeTableItemCollection = 4;
inline int RT_MS_PMCVirtualWedge::virtualwedgetableitemcollection_size() const {
  return virtualwedgetableitemcollection_.size();
}
inline void RT_MS_PMCVirtualWedge::clear_virtualwedgetableitemcollection() {
  virtualwedgetableitemcollection_.Clear();
}
inline const ::ms::proto::RT_MS_PMCVirtualWedgeTable& RT_MS_PMCVirtualWedge::virtualwedgetableitemcollection(int index) const {
  return virtualwedgetableitemcollection_.Get(index);
}
inline ::ms::proto::RT_MS_PMCVirtualWedgeTable* RT_MS_PMCVirtualWedge::mutable_virtualwedgetableitemcollection(int index) {
  return virtualwedgetableitemcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_PMCVirtualWedgeTable* RT_MS_PMCVirtualWedge::add_virtualwedgetableitemcollection() {
  return virtualwedgetableitemcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedgeTable >&
RT_MS_PMCVirtualWedge::virtualwedgetableitemcollection() const {
  return virtualwedgetableitemcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_PMCVirtualWedgeTable >*
RT_MS_PMCVirtualWedge::mutable_virtualwedgetableitemcollection() {
  return &virtualwedgetableitemcollection_;
}

// -------------------------------------------------------------------

// RT_MS_PMCVirtualWedgeTable

// optional float collimatorMovingPosition = 1;
inline bool RT_MS_PMCVirtualWedgeTable::has_collimatormovingposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCVirtualWedgeTable::set_has_collimatormovingposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_has_collimatormovingposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_collimatormovingposition() {
  collimatormovingposition_ = 0;
  clear_has_collimatormovingposition();
}
inline float RT_MS_PMCVirtualWedgeTable::collimatormovingposition() const {
  return collimatormovingposition_;
}
inline void RT_MS_PMCVirtualWedgeTable::set_collimatormovingposition(float value) {
  set_has_collimatormovingposition();
  collimatormovingposition_ = value;
}

// optional float relativeMU = 2;
inline bool RT_MS_PMCVirtualWedgeTable::has_relativemu() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCVirtualWedgeTable::set_has_relativemu() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_has_relativemu() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_relativemu() {
  relativemu_ = 0;
  clear_has_relativemu();
}
inline float RT_MS_PMCVirtualWedgeTable::relativemu() const {
  return relativemu_;
}
inline void RT_MS_PMCVirtualWedgeTable::set_relativemu(float value) {
  set_has_relativemu();
  relativemu_ = value;
}

// optional float correctionFactor = 3;
inline bool RT_MS_PMCVirtualWedgeTable::has_correctionfactor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCVirtualWedgeTable::set_has_correctionfactor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_has_correctionfactor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCVirtualWedgeTable::clear_correctionfactor() {
  correctionfactor_ = 0;
  clear_has_correctionfactor();
}
inline float RT_MS_PMCVirtualWedgeTable::correctionfactor() const {
  return correctionfactor_;
}
inline void RT_MS_PMCVirtualWedgeTable::set_correctionfactor(float value) {
  set_has_correctionfactor();
  correctionfactor_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PMCPhysicalWedge

// optional string wedgeUID = 1;
inline bool RT_MS_PMCPhysicalWedge::has_wedgeuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PMCPhysicalWedge::set_has_wedgeuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PMCPhysicalWedge::clear_has_wedgeuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PMCPhysicalWedge::clear_wedgeuid() {
  if (wedgeuid_ != &::google::protobuf::internal::kEmptyString) {
    wedgeuid_->clear();
  }
  clear_has_wedgeuid();
}
inline const ::std::string& RT_MS_PMCPhysicalWedge::wedgeuid() const {
  return *wedgeuid_;
}
inline void RT_MS_PMCPhysicalWedge::set_wedgeuid(const ::std::string& value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_PMCPhysicalWedge::set_wedgeuid(const char* value) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(value);
}
inline void RT_MS_PMCPhysicalWedge::set_wedgeuid(const char* value, size_t size) {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  wedgeuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PMCPhysicalWedge::mutable_wedgeuid() {
  set_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    wedgeuid_ = new ::std::string;
  }
  return wedgeuid_;
}
inline ::std::string* RT_MS_PMCPhysicalWedge::release_wedgeuid() {
  clear_has_wedgeuid();
  if (wedgeuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgeuid_;
    wedgeuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string wedgeName = 2;
inline bool RT_MS_PMCPhysicalWedge::has_wedgename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PMCPhysicalWedge::set_has_wedgename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PMCPhysicalWedge::clear_has_wedgename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PMCPhysicalWedge::clear_wedgename() {
  if (wedgename_ != &::google::protobuf::internal::kEmptyString) {
    wedgename_->clear();
  }
  clear_has_wedgename();
}
inline const ::std::string& RT_MS_PMCPhysicalWedge::wedgename() const {
  return *wedgename_;
}
inline void RT_MS_PMCPhysicalWedge::set_wedgename(const ::std::string& value) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(value);
}
inline void RT_MS_PMCPhysicalWedge::set_wedgename(const char* value) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(value);
}
inline void RT_MS_PMCPhysicalWedge::set_wedgename(const char* value, size_t size) {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  wedgename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PMCPhysicalWedge::mutable_wedgename() {
  set_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    wedgename_ = new ::std::string;
  }
  return wedgename_;
}
inline ::std::string* RT_MS_PMCPhysicalWedge::release_wedgename() {
  clear_has_wedgename();
  if (wedgename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wedgename_;
    wedgename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float wedgeThickness = 3;
inline bool RT_MS_PMCPhysicalWedge::has_wedgethickness() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PMCPhysicalWedge::set_has_wedgethickness() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PMCPhysicalWedge::clear_has_wedgethickness() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PMCPhysicalWedge::clear_wedgethickness() {
  wedgethickness_ = 0;
  clear_has_wedgethickness();
}
inline float RT_MS_PMCPhysicalWedge::wedgethickness() const {
  return wedgethickness_;
}
inline void RT_MS_PMCPhysicalWedge::set_wedgethickness(float value) {
  set_has_wedgethickness();
  wedgethickness_ = value;
}

// repeated .ms.proto.RT_MS_Point2D ContourVertexPointCollection = 4;
inline int RT_MS_PMCPhysicalWedge::contourvertexpointcollection_size() const {
  return contourvertexpointcollection_.size();
}
inline void RT_MS_PMCPhysicalWedge::clear_contourvertexpointcollection() {
  contourvertexpointcollection_.Clear();
}
inline const ::ms::proto::RT_MS_Point2D& RT_MS_PMCPhysicalWedge::contourvertexpointcollection(int index) const {
  return contourvertexpointcollection_.Get(index);
}
inline ::ms::proto::RT_MS_Point2D* RT_MS_PMCPhysicalWedge::mutable_contourvertexpointcollection(int index) {
  return contourvertexpointcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_Point2D* RT_MS_PMCPhysicalWedge::add_contourvertexpointcollection() {
  return contourvertexpointcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >&
RT_MS_PMCPhysicalWedge::contourvertexpointcollection() const {
  return contourvertexpointcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >*
RT_MS_PMCPhysicalWedge::mutable_contourvertexpointcollection() {
  return &contourvertexpointcollection_;
}

// optional float carrierThickness = 5;
inline bool RT_MS_PMCPhysicalWedge::has_carrierthickness() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_PMCPhysicalWedge::set_has_carrierthickness() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_PMCPhysicalWedge::clear_has_carrierthickness() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_PMCPhysicalWedge::clear_carrierthickness() {
  carrierthickness_ = 0;
  clear_has_carrierthickness();
}
inline float RT_MS_PMCPhysicalWedge::carrierthickness() const {
  return carrierthickness_;
}
inline void RT_MS_PMCPhysicalWedge::set_carrierthickness(float value) {
  set_has_carrierthickness();
  carrierthickness_ = value;
}

// repeated .ms.proto.RT_MS_Point2D carrierContourVertexPointCollection = 6;
inline int RT_MS_PMCPhysicalWedge::carriercontourvertexpointcollection_size() const {
  return carriercontourvertexpointcollection_.size();
}
inline void RT_MS_PMCPhysicalWedge::clear_carriercontourvertexpointcollection() {
  carriercontourvertexpointcollection_.Clear();
}
inline const ::ms::proto::RT_MS_Point2D& RT_MS_PMCPhysicalWedge::carriercontourvertexpointcollection(int index) const {
  return carriercontourvertexpointcollection_.Get(index);
}
inline ::ms::proto::RT_MS_Point2D* RT_MS_PMCPhysicalWedge::mutable_carriercontourvertexpointcollection(int index) {
  return carriercontourvertexpointcollection_.Mutable(index);
}
inline ::ms::proto::RT_MS_Point2D* RT_MS_PMCPhysicalWedge::add_carriercontourvertexpointcollection() {
  return carriercontourvertexpointcollection_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >&
RT_MS_PMCPhysicalWedge::carriercontourvertexpointcollection() const {
  return carriercontourvertexpointcollection_;
}
inline ::google::protobuf::RepeatedPtrField< ::ms::proto::RT_MS_Point2D >*
RT_MS_PMCPhysicalWedge::mutable_carriercontourvertexpointcollection() {
  return &carriercontourvertexpointcollection_;
}

// -------------------------------------------------------------------

// RT_MS_Point2D

// optional float X = 1;
inline bool RT_MS_Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_Point2D::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float RT_MS_Point2D::x() const {
  return x_;
}
inline void RT_MS_Point2D::set_x(float value) {
  set_has_x();
  x_ = value;
}

// optional float Y = 2;
inline bool RT_MS_Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_Point2D::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float RT_MS_Point2D::y() const {
  return y_;
}
inline void RT_MS_Point2D::set_y(float value) {
  set_has_y();
  y_ = value;
}

// -------------------------------------------------------------------

// RT_MS_PhotonMonteCarloInformation

// optional string CommissionUID = 1;
inline bool RT_MS_PhotonMonteCarloInformation::has_commissionuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_commissionuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_commissionuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_commissionuid() {
  if (commissionuid_ != &::google::protobuf::internal::kEmptyString) {
    commissionuid_->clear();
  }
  clear_has_commissionuid();
}
inline const ::std::string& RT_MS_PhotonMonteCarloInformation::commissionuid() const {
  return *commissionuid_;
}
inline void RT_MS_PhotonMonteCarloInformation::set_commissionuid(const ::std::string& value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_PhotonMonteCarloInformation::set_commissionuid(const char* value) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(value);
}
inline void RT_MS_PhotonMonteCarloInformation::set_commissionuid(const char* value, size_t size) {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  commissionuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_MS_PhotonMonteCarloInformation::mutable_commissionuid() {
  set_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    commissionuid_ = new ::std::string;
  }
  return commissionuid_;
}
inline ::std::string* RT_MS_PhotonMonteCarloInformation::release_commissionuid() {
  clear_has_commissionuid();
  if (commissionuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = commissionuid_;
    commissionuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional .ms.proto.RT_MS_PMCPDD PDDParameter = 2;
inline bool RT_MS_PhotonMonteCarloInformation::has_pddparameter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_pddparameter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_pddparameter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_pddparameter() {
  if (pddparameter_ != NULL) pddparameter_->::ms::proto::RT_MS_PMCPDD::Clear();
  clear_has_pddparameter();
}
inline const ::ms::proto::RT_MS_PMCPDD& RT_MS_PhotonMonteCarloInformation::pddparameter() const {
  return pddparameter_ != NULL ? *pddparameter_ : *default_instance_->pddparameter_;
}
inline ::ms::proto::RT_MS_PMCPDD* RT_MS_PhotonMonteCarloInformation::mutable_pddparameter() {
  set_has_pddparameter();
  if (pddparameter_ == NULL) pddparameter_ = new ::ms::proto::RT_MS_PMCPDD;
  return pddparameter_;
}
inline ::ms::proto::RT_MS_PMCPDD* RT_MS_PhotonMonteCarloInformation::release_pddparameter() {
  clear_has_pddparameter();
  ::ms::proto::RT_MS_PMCPDD* temp = pddparameter_;
  pddparameter_ = NULL;
  return temp;
}

// optional .ms.proto.RT_MS_PMCInField InFieldParameter = 3;
inline bool RT_MS_PhotonMonteCarloInformation::has_infieldparameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_infieldparameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_infieldparameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_infieldparameter() {
  if (infieldparameter_ != NULL) infieldparameter_->::ms::proto::RT_MS_PMCInField::Clear();
  clear_has_infieldparameter();
}
inline const ::ms::proto::RT_MS_PMCInField& RT_MS_PhotonMonteCarloInformation::infieldparameter() const {
  return infieldparameter_ != NULL ? *infieldparameter_ : *default_instance_->infieldparameter_;
}
inline ::ms::proto::RT_MS_PMCInField* RT_MS_PhotonMonteCarloInformation::mutable_infieldparameter() {
  set_has_infieldparameter();
  if (infieldparameter_ == NULL) infieldparameter_ = new ::ms::proto::RT_MS_PMCInField;
  return infieldparameter_;
}
inline ::ms::proto::RT_MS_PMCInField* RT_MS_PhotonMonteCarloInformation::release_infieldparameter() {
  clear_has_infieldparameter();
  ::ms::proto::RT_MS_PMCInField* temp = infieldparameter_;
  infieldparameter_ = NULL;
  return temp;
}

// optional .ms.proto.RT_MS_PMCOutField OutFieldParameter = 4;
inline bool RT_MS_PhotonMonteCarloInformation::has_outfieldparameter() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_outfieldparameter() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_outfieldparameter() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_outfieldparameter() {
  if (outfieldparameter_ != NULL) outfieldparameter_->::ms::proto::RT_MS_PMCOutField::Clear();
  clear_has_outfieldparameter();
}
inline const ::ms::proto::RT_MS_PMCOutField& RT_MS_PhotonMonteCarloInformation::outfieldparameter() const {
  return outfieldparameter_ != NULL ? *outfieldparameter_ : *default_instance_->outfieldparameter_;
}
inline ::ms::proto::RT_MS_PMCOutField* RT_MS_PhotonMonteCarloInformation::mutable_outfieldparameter() {
  set_has_outfieldparameter();
  if (outfieldparameter_ == NULL) outfieldparameter_ = new ::ms::proto::RT_MS_PMCOutField;
  return outfieldparameter_;
}
inline ::ms::proto::RT_MS_PMCOutField* RT_MS_PhotonMonteCarloInformation::release_outfieldparameter() {
  clear_has_outfieldparameter();
  ::ms::proto::RT_MS_PMCOutField* temp = outfieldparameter_;
  outfieldparameter_ = NULL;
  return temp;
}

// optional .ms.proto.RT_MS_PMCElectronContamination ElectronContaminationParameter = 5;
inline bool RT_MS_PhotonMonteCarloInformation::has_electroncontaminationparameter() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_electroncontaminationparameter() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_electroncontaminationparameter() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_electroncontaminationparameter() {
  if (electroncontaminationparameter_ != NULL) electroncontaminationparameter_->::ms::proto::RT_MS_PMCElectronContamination::Clear();
  clear_has_electroncontaminationparameter();
}
inline const ::ms::proto::RT_MS_PMCElectronContamination& RT_MS_PhotonMonteCarloInformation::electroncontaminationparameter() const {
  return electroncontaminationparameter_ != NULL ? *electroncontaminationparameter_ : *default_instance_->electroncontaminationparameter_;
}
inline ::ms::proto::RT_MS_PMCElectronContamination* RT_MS_PhotonMonteCarloInformation::mutable_electroncontaminationparameter() {
  set_has_electroncontaminationparameter();
  if (electroncontaminationparameter_ == NULL) electroncontaminationparameter_ = new ::ms::proto::RT_MS_PMCElectronContamination;
  return electroncontaminationparameter_;
}
inline ::ms::proto::RT_MS_PMCElectronContamination* RT_MS_PhotonMonteCarloInformation::release_electroncontaminationparameter() {
  clear_has_electroncontaminationparameter();
  ::ms::proto::RT_MS_PMCElectronContamination* temp = electroncontaminationparameter_;
  electroncontaminationparameter_ = NULL;
  return temp;
}

// optional .ms.proto.RT_MS_PMCAbsoluteDose AbsoluteDoseParameter = 6;
inline bool RT_MS_PhotonMonteCarloInformation::has_absolutedoseparameter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_absolutedoseparameter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_absolutedoseparameter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_absolutedoseparameter() {
  if (absolutedoseparameter_ != NULL) absolutedoseparameter_->::ms::proto::RT_MS_PMCAbsoluteDose::Clear();
  clear_has_absolutedoseparameter();
}
inline const ::ms::proto::RT_MS_PMCAbsoluteDose& RT_MS_PhotonMonteCarloInformation::absolutedoseparameter() const {
  return absolutedoseparameter_ != NULL ? *absolutedoseparameter_ : *default_instance_->absolutedoseparameter_;
}
inline ::ms::proto::RT_MS_PMCAbsoluteDose* RT_MS_PhotonMonteCarloInformation::mutable_absolutedoseparameter() {
  set_has_absolutedoseparameter();
  if (absolutedoseparameter_ == NULL) absolutedoseparameter_ = new ::ms::proto::RT_MS_PMCAbsoluteDose;
  return absolutedoseparameter_;
}
inline ::ms::proto::RT_MS_PMCAbsoluteDose* RT_MS_PhotonMonteCarloInformation::release_absolutedoseparameter() {
  clear_has_absolutedoseparameter();
  ::ms::proto::RT_MS_PMCAbsoluteDose* temp = absolutedoseparameter_;
  absolutedoseparameter_ = NULL;
  return temp;
}

// optional .ms.proto.RT_MS_PMCWedgeField WedgeFieldParameter = 7;
inline bool RT_MS_PhotonMonteCarloInformation::has_wedgefieldparameter() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_MS_PhotonMonteCarloInformation::set_has_wedgefieldparameter() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_has_wedgefieldparameter() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_MS_PhotonMonteCarloInformation::clear_wedgefieldparameter() {
  if (wedgefieldparameter_ != NULL) wedgefieldparameter_->::ms::proto::RT_MS_PMCWedgeField::Clear();
  clear_has_wedgefieldparameter();
}
inline const ::ms::proto::RT_MS_PMCWedgeField& RT_MS_PhotonMonteCarloInformation::wedgefieldparameter() const {
  return wedgefieldparameter_ != NULL ? *wedgefieldparameter_ : *default_instance_->wedgefieldparameter_;
}
inline ::ms::proto::RT_MS_PMCWedgeField* RT_MS_PhotonMonteCarloInformation::mutable_wedgefieldparameter() {
  set_has_wedgefieldparameter();
  if (wedgefieldparameter_ == NULL) wedgefieldparameter_ = new ::ms::proto::RT_MS_PMCWedgeField;
  return wedgefieldparameter_;
}
inline ::ms::proto::RT_MS_PMCWedgeField* RT_MS_PhotonMonteCarloInformation::release_wedgefieldparameter() {
  clear_has_wedgefieldparameter();
  ::ms::proto::RT_MS_PMCWedgeField* temp = wedgefieldparameter_;
  wedgefieldparameter_ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace ms

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5fms_5fphotonsmontecarlo_2eproto__INCLUDED
