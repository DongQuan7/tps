// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_lightsettings.proto

#ifndef PROTOBUF_rt_5ftps_5flightsettings_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5flightsettings_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5flightsettings_2eproto();
void protobuf_AssignDesc_rt_5ftps_5flightsettings_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5flightsettings_2eproto();

class RT_TPS_LightSettings;

// ===================================================================

class RT_TPS_LightSettings : public ::google::protobuf::Message {
 public:
  RT_TPS_LightSettings();
  virtual ~RT_TPS_LightSettings();
  
  RT_TPS_LightSettings(const RT_TPS_LightSettings& from);
  
  inline RT_TPS_LightSettings& operator=(const RT_TPS_LightSettings& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_LightSettings& default_instance();
  
  void Swap(RT_TPS_LightSettings* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_LightSettings* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_LightSettings& from);
  void MergeFrom(const RT_TPS_LightSettings& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float scale = 1;
  inline bool has_scale() const;
  inline void clear_scale();
  static const int kScaleFieldNumber = 1;
  inline float scale() const;
  inline void set_scale(float value);
  
  // optional float rotateX = 2;
  inline bool has_rotatex() const;
  inline void clear_rotatex();
  static const int kRotateXFieldNumber = 2;
  inline float rotatex() const;
  inline void set_rotatex(float value);
  
  // optional float rotateY = 3;
  inline bool has_rotatey() const;
  inline void clear_rotatey();
  static const int kRotateYFieldNumber = 3;
  inline float rotatey() const;
  inline void set_rotatey(float value);
  
  // optional float rotateZ = 4;
  inline bool has_rotatez() const;
  inline void clear_rotatez();
  static const int kRotateZFieldNumber = 4;
  inline float rotatez() const;
  inline void set_rotatez(float value);
  
  // optional float specfactor = 5;
  inline bool has_specfactor() const;
  inline void clear_specfactor();
  static const int kSpecfactorFieldNumber = 5;
  inline float specfactor() const;
  inline void set_specfactor(float value);
  
  // optional float ambfactor = 6;
  inline bool has_ambfactor() const;
  inline void clear_ambfactor();
  static const int kAmbfactorFieldNumber = 6;
  inline float ambfactor() const;
  inline void set_ambfactor(float value);
  
  // optional float difffactor = 7;
  inline bool has_difffactor() const;
  inline void clear_difffactor();
  static const int kDifffactorFieldNumber = 7;
  inline float difffactor() const;
  inline void set_difffactor(float value);
  
  // optional float shininess = 8;
  inline bool has_shininess() const;
  inline void clear_shininess();
  static const int kShininessFieldNumber = 8;
  inline float shininess() const;
  inline void set_shininess(float value);
  
  // optional float lightX = 9;
  inline bool has_lightx() const;
  inline void clear_lightx();
  static const int kLightXFieldNumber = 9;
  inline float lightx() const;
  inline void set_lightx(float value);
  
  // optional float lightY = 10;
  inline bool has_lighty() const;
  inline void clear_lighty();
  static const int kLightYFieldNumber = 10;
  inline float lighty() const;
  inline void set_lighty(float value);
  
  // optional float lightZ = 11;
  inline bool has_lightz() const;
  inline void clear_lightz();
  static const int kLightZFieldNumber = 11;
  inline float lightz() const;
  inline void set_lightz(float value);
  
  // optional int32 displayMode = 12;
  inline bool has_displaymode() const;
  inline void clear_displaymode();
  static const int kDisplayModeFieldNumber = 12;
  inline ::google::protobuf::int32 displaymode() const;
  inline void set_displaymode(::google::protobuf::int32 value);
  
  // optional int32 smoothness = 13;
  inline bool has_smoothness() const;
  inline void clear_smoothness();
  static const int kSmoothnessFieldNumber = 13;
  inline ::google::protobuf::int32 smoothness() const;
  inline void set_smoothness(::google::protobuf::int32 value);
  
  // optional bool useCameraLight = 14;
  inline bool has_usecameralight() const;
  inline void clear_usecameralight();
  static const int kUseCameraLightFieldNumber = 14;
  inline bool usecameralight() const;
  inline void set_usecameralight(bool value);
  
  // optional int32 startStripIndex = 15;
  inline bool has_startstripindex() const;
  inline void clear_startstripindex();
  static const int kStartStripIndexFieldNumber = 15;
  inline ::google::protobuf::int32 startstripindex() const;
  inline void set_startstripindex(::google::protobuf::int32 value);
  
  // optional int32 endStripIndex = 16;
  inline bool has_endstripindex() const;
  inline void clear_endstripindex();
  static const int kEndStripIndexFieldNumber = 16;
  inline ::google::protobuf::int32 endstripindex() const;
  inline void set_endstripindex(::google::protobuf::int32 value);
  
  // optional bool showMeshVertex = 17;
  inline bool has_showmeshvertex() const;
  inline void clear_showmeshvertex();
  static const int kShowMeshVertexFieldNumber = 17;
  inline bool showmeshvertex() const;
  inline void set_showmeshvertex(bool value);
  
  // optional float mprTransparency3D = 18;
  inline bool has_mprtransparency3d() const;
  inline void clear_mprtransparency3d();
  static const int kMprTransparency3DFieldNumber = 18;
  inline float mprtransparency3d() const;
  inline void set_mprtransparency3d(float value);
  
  // optional int32 mprSection = 19;
  inline bool has_mprsection() const;
  inline void clear_mprsection();
  static const int kMprSectionFieldNumber = 19;
  inline ::google::protobuf::int32 mprsection() const;
  inline void set_mprsection(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_LightSettings)
 private:
  inline void set_has_scale();
  inline void clear_has_scale();
  inline void set_has_rotatex();
  inline void clear_has_rotatex();
  inline void set_has_rotatey();
  inline void clear_has_rotatey();
  inline void set_has_rotatez();
  inline void clear_has_rotatez();
  inline void set_has_specfactor();
  inline void clear_has_specfactor();
  inline void set_has_ambfactor();
  inline void clear_has_ambfactor();
  inline void set_has_difffactor();
  inline void clear_has_difffactor();
  inline void set_has_shininess();
  inline void clear_has_shininess();
  inline void set_has_lightx();
  inline void clear_has_lightx();
  inline void set_has_lighty();
  inline void clear_has_lighty();
  inline void set_has_lightz();
  inline void clear_has_lightz();
  inline void set_has_displaymode();
  inline void clear_has_displaymode();
  inline void set_has_smoothness();
  inline void clear_has_smoothness();
  inline void set_has_usecameralight();
  inline void clear_has_usecameralight();
  inline void set_has_startstripindex();
  inline void clear_has_startstripindex();
  inline void set_has_endstripindex();
  inline void clear_has_endstripindex();
  inline void set_has_showmeshvertex();
  inline void clear_has_showmeshvertex();
  inline void set_has_mprtransparency3d();
  inline void clear_has_mprtransparency3d();
  inline void set_has_mprsection();
  inline void clear_has_mprsection();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float scale_;
  float rotatex_;
  float rotatey_;
  float rotatez_;
  float specfactor_;
  float ambfactor_;
  float difffactor_;
  float shininess_;
  float lightx_;
  float lighty_;
  float lightz_;
  ::google::protobuf::int32 displaymode_;
  ::google::protobuf::int32 smoothness_;
  ::google::protobuf::int32 startstripindex_;
  bool usecameralight_;
  bool showmeshvertex_;
  ::google::protobuf::int32 endstripindex_;
  float mprtransparency3d_;
  ::google::protobuf::int32 mprsection_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(19 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5flightsettings_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5flightsettings_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5flightsettings_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_LightSettings* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_LightSettings

// optional float scale = 1;
inline bool RT_TPS_LightSettings::has_scale() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_LightSettings::set_has_scale() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_LightSettings::clear_has_scale() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_LightSettings::clear_scale() {
  scale_ = 0;
  clear_has_scale();
}
inline float RT_TPS_LightSettings::scale() const {
  return scale_;
}
inline void RT_TPS_LightSettings::set_scale(float value) {
  set_has_scale();
  scale_ = value;
}

// optional float rotateX = 2;
inline bool RT_TPS_LightSettings::has_rotatex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_LightSettings::set_has_rotatex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_LightSettings::clear_has_rotatex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_LightSettings::clear_rotatex() {
  rotatex_ = 0;
  clear_has_rotatex();
}
inline float RT_TPS_LightSettings::rotatex() const {
  return rotatex_;
}
inline void RT_TPS_LightSettings::set_rotatex(float value) {
  set_has_rotatex();
  rotatex_ = value;
}

// optional float rotateY = 3;
inline bool RT_TPS_LightSettings::has_rotatey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_LightSettings::set_has_rotatey() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_LightSettings::clear_has_rotatey() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_LightSettings::clear_rotatey() {
  rotatey_ = 0;
  clear_has_rotatey();
}
inline float RT_TPS_LightSettings::rotatey() const {
  return rotatey_;
}
inline void RT_TPS_LightSettings::set_rotatey(float value) {
  set_has_rotatey();
  rotatey_ = value;
}

// optional float rotateZ = 4;
inline bool RT_TPS_LightSettings::has_rotatez() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_LightSettings::set_has_rotatez() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_LightSettings::clear_has_rotatez() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_LightSettings::clear_rotatez() {
  rotatez_ = 0;
  clear_has_rotatez();
}
inline float RT_TPS_LightSettings::rotatez() const {
  return rotatez_;
}
inline void RT_TPS_LightSettings::set_rotatez(float value) {
  set_has_rotatez();
  rotatez_ = value;
}

// optional float specfactor = 5;
inline bool RT_TPS_LightSettings::has_specfactor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_LightSettings::set_has_specfactor() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_LightSettings::clear_has_specfactor() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_LightSettings::clear_specfactor() {
  specfactor_ = 0;
  clear_has_specfactor();
}
inline float RT_TPS_LightSettings::specfactor() const {
  return specfactor_;
}
inline void RT_TPS_LightSettings::set_specfactor(float value) {
  set_has_specfactor();
  specfactor_ = value;
}

// optional float ambfactor = 6;
inline bool RT_TPS_LightSettings::has_ambfactor() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_LightSettings::set_has_ambfactor() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_LightSettings::clear_has_ambfactor() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_LightSettings::clear_ambfactor() {
  ambfactor_ = 0;
  clear_has_ambfactor();
}
inline float RT_TPS_LightSettings::ambfactor() const {
  return ambfactor_;
}
inline void RT_TPS_LightSettings::set_ambfactor(float value) {
  set_has_ambfactor();
  ambfactor_ = value;
}

// optional float difffactor = 7;
inline bool RT_TPS_LightSettings::has_difffactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_LightSettings::set_has_difffactor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_LightSettings::clear_has_difffactor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_LightSettings::clear_difffactor() {
  difffactor_ = 0;
  clear_has_difffactor();
}
inline float RT_TPS_LightSettings::difffactor() const {
  return difffactor_;
}
inline void RT_TPS_LightSettings::set_difffactor(float value) {
  set_has_difffactor();
  difffactor_ = value;
}

// optional float shininess = 8;
inline bool RT_TPS_LightSettings::has_shininess() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_LightSettings::set_has_shininess() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_LightSettings::clear_has_shininess() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_LightSettings::clear_shininess() {
  shininess_ = 0;
  clear_has_shininess();
}
inline float RT_TPS_LightSettings::shininess() const {
  return shininess_;
}
inline void RT_TPS_LightSettings::set_shininess(float value) {
  set_has_shininess();
  shininess_ = value;
}

// optional float lightX = 9;
inline bool RT_TPS_LightSettings::has_lightx() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_LightSettings::set_has_lightx() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_LightSettings::clear_has_lightx() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_LightSettings::clear_lightx() {
  lightx_ = 0;
  clear_has_lightx();
}
inline float RT_TPS_LightSettings::lightx() const {
  return lightx_;
}
inline void RT_TPS_LightSettings::set_lightx(float value) {
  set_has_lightx();
  lightx_ = value;
}

// optional float lightY = 10;
inline bool RT_TPS_LightSettings::has_lighty() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_LightSettings::set_has_lighty() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_LightSettings::clear_has_lighty() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_LightSettings::clear_lighty() {
  lighty_ = 0;
  clear_has_lighty();
}
inline float RT_TPS_LightSettings::lighty() const {
  return lighty_;
}
inline void RT_TPS_LightSettings::set_lighty(float value) {
  set_has_lighty();
  lighty_ = value;
}

// optional float lightZ = 11;
inline bool RT_TPS_LightSettings::has_lightz() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_LightSettings::set_has_lightz() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_LightSettings::clear_has_lightz() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_LightSettings::clear_lightz() {
  lightz_ = 0;
  clear_has_lightz();
}
inline float RT_TPS_LightSettings::lightz() const {
  return lightz_;
}
inline void RT_TPS_LightSettings::set_lightz(float value) {
  set_has_lightz();
  lightz_ = value;
}

// optional int32 displayMode = 12;
inline bool RT_TPS_LightSettings::has_displaymode() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RT_TPS_LightSettings::set_has_displaymode() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RT_TPS_LightSettings::clear_has_displaymode() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RT_TPS_LightSettings::clear_displaymode() {
  displaymode_ = 0;
  clear_has_displaymode();
}
inline ::google::protobuf::int32 RT_TPS_LightSettings::displaymode() const {
  return displaymode_;
}
inline void RT_TPS_LightSettings::set_displaymode(::google::protobuf::int32 value) {
  set_has_displaymode();
  displaymode_ = value;
}

// optional int32 smoothness = 13;
inline bool RT_TPS_LightSettings::has_smoothness() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_smoothness() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RT_TPS_LightSettings::clear_has_smoothness() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RT_TPS_LightSettings::clear_smoothness() {
  smoothness_ = 0;
  clear_has_smoothness();
}
inline ::google::protobuf::int32 RT_TPS_LightSettings::smoothness() const {
  return smoothness_;
}
inline void RT_TPS_LightSettings::set_smoothness(::google::protobuf::int32 value) {
  set_has_smoothness();
  smoothness_ = value;
}

// optional bool useCameraLight = 14;
inline bool RT_TPS_LightSettings::has_usecameralight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_usecameralight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RT_TPS_LightSettings::clear_has_usecameralight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RT_TPS_LightSettings::clear_usecameralight() {
  usecameralight_ = false;
  clear_has_usecameralight();
}
inline bool RT_TPS_LightSettings::usecameralight() const {
  return usecameralight_;
}
inline void RT_TPS_LightSettings::set_usecameralight(bool value) {
  set_has_usecameralight();
  usecameralight_ = value;
}

// optional int32 startStripIndex = 15;
inline bool RT_TPS_LightSettings::has_startstripindex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_startstripindex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RT_TPS_LightSettings::clear_has_startstripindex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RT_TPS_LightSettings::clear_startstripindex() {
  startstripindex_ = 0;
  clear_has_startstripindex();
}
inline ::google::protobuf::int32 RT_TPS_LightSettings::startstripindex() const {
  return startstripindex_;
}
inline void RT_TPS_LightSettings::set_startstripindex(::google::protobuf::int32 value) {
  set_has_startstripindex();
  startstripindex_ = value;
}

// optional int32 endStripIndex = 16;
inline bool RT_TPS_LightSettings::has_endstripindex() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_endstripindex() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RT_TPS_LightSettings::clear_has_endstripindex() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RT_TPS_LightSettings::clear_endstripindex() {
  endstripindex_ = 0;
  clear_has_endstripindex();
}
inline ::google::protobuf::int32 RT_TPS_LightSettings::endstripindex() const {
  return endstripindex_;
}
inline void RT_TPS_LightSettings::set_endstripindex(::google::protobuf::int32 value) {
  set_has_endstripindex();
  endstripindex_ = value;
}

// optional bool showMeshVertex = 17;
inline bool RT_TPS_LightSettings::has_showmeshvertex() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_showmeshvertex() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RT_TPS_LightSettings::clear_has_showmeshvertex() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RT_TPS_LightSettings::clear_showmeshvertex() {
  showmeshvertex_ = false;
  clear_has_showmeshvertex();
}
inline bool RT_TPS_LightSettings::showmeshvertex() const {
  return showmeshvertex_;
}
inline void RT_TPS_LightSettings::set_showmeshvertex(bool value) {
  set_has_showmeshvertex();
  showmeshvertex_ = value;
}

// optional float mprTransparency3D = 18;
inline bool RT_TPS_LightSettings::has_mprtransparency3d() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_mprtransparency3d() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RT_TPS_LightSettings::clear_has_mprtransparency3d() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RT_TPS_LightSettings::clear_mprtransparency3d() {
  mprtransparency3d_ = 0;
  clear_has_mprtransparency3d();
}
inline float RT_TPS_LightSettings::mprtransparency3d() const {
  return mprtransparency3d_;
}
inline void RT_TPS_LightSettings::set_mprtransparency3d(float value) {
  set_has_mprtransparency3d();
  mprtransparency3d_ = value;
}

// optional int32 mprSection = 19;
inline bool RT_TPS_LightSettings::has_mprsection() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RT_TPS_LightSettings::set_has_mprsection() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RT_TPS_LightSettings::clear_has_mprsection() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RT_TPS_LightSettings::clear_mprsection() {
  mprsection_ = 0;
  clear_has_mprsection();
}
inline ::google::protobuf::int32 RT_TPS_LightSettings::mprsection() const {
  return mprsection_;
}
inline void RT_TPS_LightSettings::set_mprsection(::google::protobuf::int32 value) {
  set_has_mprsection();
  mprsection_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5flightsettings_2eproto__INCLUDED
