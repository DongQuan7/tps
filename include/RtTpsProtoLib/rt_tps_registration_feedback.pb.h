// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_registration_feedback.proto

#ifndef PROTOBUF_rt_5ftps_5fregistration_5ffeedback_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fregistration_5ffeedback_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
    namespace proto {

        // Internal implementation detail -- do not call these.
        void  protobuf_AddDesc_rt_5ftps_5fregistration_5ffeedback_2eproto();
        void protobuf_AssignDesc_rt_5ftps_5fregistration_5ffeedback_2eproto();
        void protobuf_ShutdownFile_rt_5ftps_5fregistration_5ffeedback_2eproto();

        class RT_TPS_REGISTRATION_FEEDBACK;

        // ===================================================================

        class RT_TPS_REGISTRATION_FEEDBACK : public ::google::protobuf::Message {
        public:
            RT_TPS_REGISTRATION_FEEDBACK();
            virtual ~RT_TPS_REGISTRATION_FEEDBACK();

            RT_TPS_REGISTRATION_FEEDBACK(const RT_TPS_REGISTRATION_FEEDBACK& from);

            inline RT_TPS_REGISTRATION_FEEDBACK& operator=(const RT_TPS_REGISTRATION_FEEDBACK& from) {
                CopyFrom(from);
                return *this;
            }

            inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
                return _unknown_fields_;
            }

            inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
                return &_unknown_fields_;
            }

            static const ::google::protobuf::Descriptor* descriptor();
            static const RT_TPS_REGISTRATION_FEEDBACK& default_instance();

            void Swap(RT_TPS_REGISTRATION_FEEDBACK* other);

            // implements Message ----------------------------------------------

            RT_TPS_REGISTRATION_FEEDBACK* New() const;
            void CopyFrom(const ::google::protobuf::Message& from);
            void MergeFrom(const ::google::protobuf::Message& from);
            void CopyFrom(const RT_TPS_REGISTRATION_FEEDBACK& from);
            void MergeFrom(const RT_TPS_REGISTRATION_FEEDBACK& from);
            void Clear();
            bool IsInitialized() const;

            int ByteSize() const;
            bool MergePartialFromCodedStream(
                ::google::protobuf::io::CodedInputStream* input);
            void SerializeWithCachedSizes(
                ::google::protobuf::io::CodedOutputStream* output) const;
            ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
            int GetCachedSize() const { return _cached_size_; }
        private:
            void SharedCtor();
            void SharedDtor();
            void SetCachedSize(int size) const;
        public:

            ::google::protobuf::Metadata GetMetadata() const;

            // nested types ----------------------------------------------------

            // accessors -------------------------------------------------------

            // required int32 feedBackType = 1;
            inline bool has_feedbacktype() const;
            inline void clear_feedbacktype();
            static const int kFeedBackTypeFieldNumber = 1;
            inline ::google::protobuf::int32 feedbacktype() const;
            inline void set_feedbacktype(::google::protobuf::int32 value);

            // optional string message = 2;
            inline bool has_message() const;
            inline void clear_message();
            static const int kMessageFieldNumber = 2;
            inline const ::std::string& message() const;
            inline void set_message(const ::std::string& value);
            inline void set_message(const char* value);
            inline void set_message(const char* value, size_t size);
            inline ::std::string* mutable_message();
            inline ::std::string* release_message();

            // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_REGISTRATION_FEEDBACK)
        private:
            inline void set_has_feedbacktype();
            inline void clear_has_feedbacktype();
            inline void set_has_message();
            inline void clear_has_message();

            ::google::protobuf::UnknownFieldSet _unknown_fields_;

            ::std::string* message_;
            ::google::protobuf::int32 feedbacktype_;

            mutable int _cached_size_;
            ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

            friend void  protobuf_AddDesc_rt_5ftps_5fregistration_5ffeedback_2eproto();
            friend void protobuf_AssignDesc_rt_5ftps_5fregistration_5ffeedback_2eproto();
            friend void protobuf_ShutdownFile_rt_5ftps_5fregistration_5ffeedback_2eproto();

            void InitAsDefaultInstance();
            static RT_TPS_REGISTRATION_FEEDBACK* default_instance_;
        };
        // ===================================================================


        // ===================================================================

        // RT_TPS_REGISTRATION_FEEDBACK

        // required int32 feedBackType = 1;
        inline bool RT_TPS_REGISTRATION_FEEDBACK::has_feedbacktype() const {
            return (_has_bits_[0] & 0x00000001u) != 0;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_has_feedbacktype() {
            _has_bits_[0] |= 0x00000001u;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::clear_has_feedbacktype() {
            _has_bits_[0] &= ~0x00000001u;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::clear_feedbacktype() {
            feedbacktype_ = 0;
            clear_has_feedbacktype();
        }
        inline ::google::protobuf::int32 RT_TPS_REGISTRATION_FEEDBACK::feedbacktype() const {
            return feedbacktype_;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_feedbacktype(::google::protobuf::int32 value) {
            set_has_feedbacktype();
            feedbacktype_ = value;
        }

        // optional string message = 2;
        inline bool RT_TPS_REGISTRATION_FEEDBACK::has_message() const {
            return (_has_bits_[0] & 0x00000002u) != 0;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_has_message() {
            _has_bits_[0] |= 0x00000002u;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::clear_has_message() {
            _has_bits_[0] &= ~0x00000002u;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::clear_message() {
            if (message_ != &::google::protobuf::internal::kEmptyString) {
                message_->clear();
            }
            clear_has_message();
        }
        inline const ::std::string& RT_TPS_REGISTRATION_FEEDBACK::message() const {
            return *message_;
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_message(const ::std::string& value) {
            set_has_message();
            if (message_ == &::google::protobuf::internal::kEmptyString) {
                message_ = new ::std::string;
            }
            message_->assign(value);
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_message(const char* value) {
            set_has_message();
            if (message_ == &::google::protobuf::internal::kEmptyString) {
                message_ = new ::std::string;
            }
            message_->assign(value);
        }
        inline void RT_TPS_REGISTRATION_FEEDBACK::set_message(const char* value, size_t size) {
            set_has_message();
            if (message_ == &::google::protobuf::internal::kEmptyString) {
                message_ = new ::std::string;
            }
            message_->assign(reinterpret_cast<const char*>(value), size);
        }
        inline ::std::string* RT_TPS_REGISTRATION_FEEDBACK::mutable_message() {
            set_has_message();
            if (message_ == &::google::protobuf::internal::kEmptyString) {
                message_ = new ::std::string;
            }
            return message_;
        }
        inline ::std::string* RT_TPS_REGISTRATION_FEEDBACK::release_message() {
            clear_has_message();
            if (message_ == &::google::protobuf::internal::kEmptyString) {
                return NULL;
            } else {
                ::std::string* temp = message_;
                message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
                return temp;
            }
        }


        // @@protoc_insertion_point(namespace_scope)

    }  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
    namespace protobuf {


    }  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fregistration_5ffeedback_2eproto__INCLUDED
