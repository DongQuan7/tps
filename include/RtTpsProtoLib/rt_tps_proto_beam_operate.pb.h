// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_proto_beam_operate.proto

#ifndef PROTOBUF_rt_5ftps_5fproto_5fbeam_5foperate_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fproto_5fbeam_5foperate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();

class RtTpsProtoBeamOperate;
class RtTpsProtoRepeatedBeamOperate;

// ===================================================================

class RtTpsProtoBeamOperate : public ::google::protobuf::Message {
 public:
  RtTpsProtoBeamOperate();
  virtual ~RtTpsProtoBeamOperate();
  
  RtTpsProtoBeamOperate(const RtTpsProtoBeamOperate& from);
  
  inline RtTpsProtoBeamOperate& operator=(const RtTpsProtoBeamOperate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoBeamOperate& default_instance();
  
  void Swap(RtTpsProtoBeamOperate* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoBeamOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoBeamOperate& from);
  void MergeFrom(const RtTpsProtoBeamOperate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string beam_uid = 1;
  inline bool has_beam_uid() const;
  inline void clear_beam_uid();
  static const int kBeamUidFieldNumber = 1;
  inline const ::std::string& beam_uid() const;
  inline void set_beam_uid(const ::std::string& value);
  inline void set_beam_uid(const char* value);
  inline void set_beam_uid(const char* value, size_t size);
  inline ::std::string* mutable_beam_uid();
  inline ::std::string* release_beam_uid();
  
  // optional string normal_group_uid = 2;
  inline bool has_normal_group_uid() const;
  inline void clear_normal_group_uid();
  static const int kNormalGroupUidFieldNumber = 2;
  inline const ::std::string& normal_group_uid() const;
  inline void set_normal_group_uid(const ::std::string& value);
  inline void set_normal_group_uid(const char* value);
  inline void set_normal_group_uid(const char* value, size_t size);
  inline ::std::string* mutable_normal_group_uid();
  inline ::std::string* release_normal_group_uid();
  
  // optional string beam_name = 3;
  inline bool has_beam_name() const;
  inline void clear_beam_name();
  static const int kBeamNameFieldNumber = 3;
  inline const ::std::string& beam_name() const;
  inline void set_beam_name(const ::std::string& value);
  inline void set_beam_name(const char* value);
  inline void set_beam_name(const char* value, size_t size);
  inline ::std::string* mutable_beam_name();
  inline ::std::string* release_beam_name();
  
  // optional int32 beam_operate_type = 4;
  inline bool has_beam_operate_type() const;
  inline void clear_beam_operate_type();
  static const int kBeamOperateTypeFieldNumber = 4;
  inline ::google::protobuf::int32 beam_operate_type() const;
  inline void set_beam_operate_type(::google::protobuf::int32 value);
  
  // optional int32 beam_delete_reason_type = 5;
  inline bool has_beam_delete_reason_type() const;
  inline void clear_beam_delete_reason_type();
  static const int kBeamDeleteReasonTypeFieldNumber = 5;
  inline ::google::protobuf::int32 beam_delete_reason_type() const;
  inline void set_beam_delete_reason_type(::google::protobuf::int32 value);
  
  // repeated int32 beam_modify_typelist = 6;
  inline int beam_modify_typelist_size() const;
  inline void clear_beam_modify_typelist();
  static const int kBeamModifyTypelistFieldNumber = 6;
  inline ::google::protobuf::int32 beam_modify_typelist(int index) const;
  inline void set_beam_modify_typelist(int index, ::google::protobuf::int32 value);
  inline void add_beam_modify_typelist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      beam_modify_typelist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_beam_modify_typelist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoBeamOperate)
 private:
  inline void set_has_beam_uid();
  inline void clear_has_beam_uid();
  inline void set_has_normal_group_uid();
  inline void clear_has_normal_group_uid();
  inline void set_has_beam_name();
  inline void clear_has_beam_name();
  inline void set_has_beam_operate_type();
  inline void clear_has_beam_operate_type();
  inline void set_has_beam_delete_reason_type();
  inline void clear_has_beam_delete_reason_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* beam_uid_;
  ::std::string* normal_group_uid_;
  ::std::string* beam_name_;
  ::google::protobuf::int32 beam_operate_type_;
  ::google::protobuf::int32 beam_delete_reason_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > beam_modify_typelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoBeamOperate* default_instance_;
};
// -------------------------------------------------------------------

class RtTpsProtoRepeatedBeamOperate : public ::google::protobuf::Message {
 public:
  RtTpsProtoRepeatedBeamOperate();
  virtual ~RtTpsProtoRepeatedBeamOperate();
  
  RtTpsProtoRepeatedBeamOperate(const RtTpsProtoRepeatedBeamOperate& from);
  
  inline RtTpsProtoRepeatedBeamOperate& operator=(const RtTpsProtoRepeatedBeamOperate& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RtTpsProtoRepeatedBeamOperate& default_instance();
  
  void Swap(RtTpsProtoRepeatedBeamOperate* other);
  
  // implements Message ----------------------------------------------
  
  RtTpsProtoRepeatedBeamOperate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RtTpsProtoRepeatedBeamOperate& from);
  void MergeFrom(const RtTpsProtoRepeatedBeamOperate& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
  inline int beamoperatelist_size() const;
  inline void clear_beamoperatelist();
  static const int kBeamOperateListFieldNumber = 1;
  inline const ::tps::proto::RtTpsProtoBeamOperate& beamoperatelist(int index) const;
  inline ::tps::proto::RtTpsProtoBeamOperate* mutable_beamoperatelist(int index);
  inline ::tps::proto::RtTpsProtoBeamOperate* add_beamoperatelist();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeamOperate >&
      beamoperatelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeamOperate >*
      mutable_beamoperatelist();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RtTpsProtoRepeatedBeamOperate)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeamOperate > beamoperatelist_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fproto_5fbeam_5foperate_2eproto();
  
  void InitAsDefaultInstance();
  static RtTpsProtoRepeatedBeamOperate* default_instance_;
};
// ===================================================================


// ===================================================================

// RtTpsProtoBeamOperate

// required string beam_uid = 1;
inline bool RtTpsProtoBeamOperate::has_beam_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RtTpsProtoBeamOperate::set_has_beam_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RtTpsProtoBeamOperate::clear_has_beam_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RtTpsProtoBeamOperate::clear_beam_uid() {
  if (beam_uid_ != &::google::protobuf::internal::kEmptyString) {
    beam_uid_->clear();
  }
  clear_has_beam_uid();
}
inline const ::std::string& RtTpsProtoBeamOperate::beam_uid() const {
  return *beam_uid_;
}
inline void RtTpsProtoBeamOperate::set_beam_uid(const ::std::string& value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_beam_uid(const char* value) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_beam_uid(const char* value, size_t size) {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  beam_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamOperate::mutable_beam_uid() {
  set_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    beam_uid_ = new ::std::string;
  }
  return beam_uid_;
}
inline ::std::string* RtTpsProtoBeamOperate::release_beam_uid() {
  clear_has_beam_uid();
  if (beam_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_uid_;
    beam_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string normal_group_uid = 2;
inline bool RtTpsProtoBeamOperate::has_normal_group_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RtTpsProtoBeamOperate::set_has_normal_group_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RtTpsProtoBeamOperate::clear_has_normal_group_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RtTpsProtoBeamOperate::clear_normal_group_uid() {
  if (normal_group_uid_ != &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_->clear();
  }
  clear_has_normal_group_uid();
}
inline const ::std::string& RtTpsProtoBeamOperate::normal_group_uid() const {
  return *normal_group_uid_;
}
inline void RtTpsProtoBeamOperate::set_normal_group_uid(const ::std::string& value) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_normal_group_uid(const char* value) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_normal_group_uid(const char* value, size_t size) {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  normal_group_uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamOperate::mutable_normal_group_uid() {
  set_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    normal_group_uid_ = new ::std::string;
  }
  return normal_group_uid_;
}
inline ::std::string* RtTpsProtoBeamOperate::release_normal_group_uid() {
  clear_has_normal_group_uid();
  if (normal_group_uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = normal_group_uid_;
    normal_group_uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string beam_name = 3;
inline bool RtTpsProtoBeamOperate::has_beam_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RtTpsProtoBeamOperate::set_has_beam_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RtTpsProtoBeamOperate::clear_has_beam_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RtTpsProtoBeamOperate::clear_beam_name() {
  if (beam_name_ != &::google::protobuf::internal::kEmptyString) {
    beam_name_->clear();
  }
  clear_has_beam_name();
}
inline const ::std::string& RtTpsProtoBeamOperate::beam_name() const {
  return *beam_name_;
}
inline void RtTpsProtoBeamOperate::set_beam_name(const ::std::string& value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_beam_name(const char* value) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(value);
}
inline void RtTpsProtoBeamOperate::set_beam_name(const char* value, size_t size) {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  beam_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RtTpsProtoBeamOperate::mutable_beam_name() {
  set_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    beam_name_ = new ::std::string;
  }
  return beam_name_;
}
inline ::std::string* RtTpsProtoBeamOperate::release_beam_name() {
  clear_has_beam_name();
  if (beam_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beam_name_;
    beam_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 beam_operate_type = 4;
inline bool RtTpsProtoBeamOperate::has_beam_operate_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RtTpsProtoBeamOperate::set_has_beam_operate_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RtTpsProtoBeamOperate::clear_has_beam_operate_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RtTpsProtoBeamOperate::clear_beam_operate_type() {
  beam_operate_type_ = 0;
  clear_has_beam_operate_type();
}
inline ::google::protobuf::int32 RtTpsProtoBeamOperate::beam_operate_type() const {
  return beam_operate_type_;
}
inline void RtTpsProtoBeamOperate::set_beam_operate_type(::google::protobuf::int32 value) {
  set_has_beam_operate_type();
  beam_operate_type_ = value;
}

// optional int32 beam_delete_reason_type = 5;
inline bool RtTpsProtoBeamOperate::has_beam_delete_reason_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RtTpsProtoBeamOperate::set_has_beam_delete_reason_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RtTpsProtoBeamOperate::clear_has_beam_delete_reason_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RtTpsProtoBeamOperate::clear_beam_delete_reason_type() {
  beam_delete_reason_type_ = 0;
  clear_has_beam_delete_reason_type();
}
inline ::google::protobuf::int32 RtTpsProtoBeamOperate::beam_delete_reason_type() const {
  return beam_delete_reason_type_;
}
inline void RtTpsProtoBeamOperate::set_beam_delete_reason_type(::google::protobuf::int32 value) {
  set_has_beam_delete_reason_type();
  beam_delete_reason_type_ = value;
}

// repeated int32 beam_modify_typelist = 6;
inline int RtTpsProtoBeamOperate::beam_modify_typelist_size() const {
  return beam_modify_typelist_.size();
}
inline void RtTpsProtoBeamOperate::clear_beam_modify_typelist() {
  beam_modify_typelist_.Clear();
}
inline ::google::protobuf::int32 RtTpsProtoBeamOperate::beam_modify_typelist(int index) const {
  return beam_modify_typelist_.Get(index);
}
inline void RtTpsProtoBeamOperate::set_beam_modify_typelist(int index, ::google::protobuf::int32 value) {
  beam_modify_typelist_.Set(index, value);
}
inline void RtTpsProtoBeamOperate::add_beam_modify_typelist(::google::protobuf::int32 value) {
  beam_modify_typelist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RtTpsProtoBeamOperate::beam_modify_typelist() const {
  return beam_modify_typelist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RtTpsProtoBeamOperate::mutable_beam_modify_typelist() {
  return &beam_modify_typelist_;
}

// -------------------------------------------------------------------

// RtTpsProtoRepeatedBeamOperate

// repeated .tps.proto.RtTpsProtoBeamOperate beamOperateList = 1;
inline int RtTpsProtoRepeatedBeamOperate::beamoperatelist_size() const {
  return beamoperatelist_.size();
}
inline void RtTpsProtoRepeatedBeamOperate::clear_beamoperatelist() {
  beamoperatelist_.Clear();
}
inline const ::tps::proto::RtTpsProtoBeamOperate& RtTpsProtoRepeatedBeamOperate::beamoperatelist(int index) const {
  return beamoperatelist_.Get(index);
}
inline ::tps::proto::RtTpsProtoBeamOperate* RtTpsProtoRepeatedBeamOperate::mutable_beamoperatelist(int index) {
  return beamoperatelist_.Mutable(index);
}
inline ::tps::proto::RtTpsProtoBeamOperate* RtTpsProtoRepeatedBeamOperate::add_beamoperatelist() {
  return beamoperatelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeamOperate >&
RtTpsProtoRepeatedBeamOperate::beamoperatelist() const {
  return beamoperatelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RtTpsProtoBeamOperate >*
RtTpsProtoRepeatedBeamOperate::mutable_beamoperatelist() {
  return &beamoperatelist_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fproto_5fbeam_5foperate_2eproto__INCLUDED
