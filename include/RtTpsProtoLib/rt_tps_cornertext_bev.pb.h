// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_cornertext_bev.proto

#ifndef PROTOBUF_rt_5ftps_5fcornertext_5fbev_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fcornertext_5fbev_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fbev_2eproto();

class RT_TPS_CornerText_BEV;

// ===================================================================

class RT_TPS_CornerText_BEV : public ::google::protobuf::Message {
 public:
  RT_TPS_CornerText_BEV();
  virtual ~RT_TPS_CornerText_BEV();
  
  RT_TPS_CornerText_BEV(const RT_TPS_CornerText_BEV& from);
  
  inline RT_TPS_CornerText_BEV& operator=(const RT_TPS_CornerText_BEV& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_CornerText_BEV& default_instance();
  
  void Swap(RT_TPS_CornerText_BEV* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_CornerText_BEV* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_CornerText_BEV& from);
  void MergeFrom(const RT_TPS_CornerText_BEV& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string beamname = 1;
  inline bool has_beamname() const;
  inline void clear_beamname();
  static const int kBeamnameFieldNumber = 1;
  inline const ::std::string& beamname() const;
  inline void set_beamname(const ::std::string& value);
  inline void set_beamname(const char* value);
  inline void set_beamname(const char* value, size_t size);
  inline ::std::string* mutable_beamname();
  inline ::std::string* release_beamname();
  
  // optional double beamweight = 2;
  inline bool has_beamweight() const;
  inline void clear_beamweight();
  static const int kBeamweightFieldNumber = 2;
  inline double beamweight() const;
  inline void set_beamweight(double value);
  
  // optional double beammu = 3;
  inline bool has_beammu() const;
  inline void clear_beammu();
  static const int kBeammuFieldNumber = 3;
  inline double beammu() const;
  inline void set_beammu(double value);
  
  // optional int32 displaycontent = 4;
  inline bool has_displaycontent() const;
  inline void clear_displaycontent();
  static const int kDisplaycontentFieldNumber = 4;
  inline ::google::protobuf::int32 displaycontent() const;
  inline void set_displaycontent(::google::protobuf::int32 value);
  
  // optional double windowwidth = 5;
  inline bool has_windowwidth() const;
  inline void clear_windowwidth();
  static const int kWindowwidthFieldNumber = 5;
  inline double windowwidth() const;
  inline void set_windowwidth(double value);
  
  // optional double windowcenter = 6;
  inline bool has_windowcenter() const;
  inline void clear_windowcenter();
  static const int kWindowcenterFieldNumber = 6;
  inline double windowcenter() const;
  inline void set_windowcenter(double value);
  
  // optional double zoomfactor = 7;
  inline bool has_zoomfactor() const;
  inline void clear_zoomfactor();
  static const int kZoomfactorFieldNumber = 7;
  inline double zoomfactor() const;
  inline void set_zoomfactor(double value);
  
  // optional double segmentindex = 8;
  inline bool has_segmentindex() const;
  inline void clear_segmentindex();
  static const int kSegmentindexFieldNumber = 8;
  inline double segmentindex() const;
  inline void set_segmentindex(double value);
  
  // optional double segmentweight = 9;
  inline bool has_segmentweight() const;
  inline void clear_segmentweight();
  static const int kSegmentweightFieldNumber = 9;
  inline double segmentweight() const;
  inline void set_segmentweight(double value);
  
  // optional double segmentmu = 10;
  inline bool has_segmentmu() const;
  inline void clear_segmentmu();
  static const int kSegmentmuFieldNumber = 10;
  inline double segmentmu() const;
  inline void set_segmentmu(double value);
  
  // optional double leafindex = 11;
  inline bool has_leafindex() const;
  inline void clear_leafindex();
  static const int kLeafindexFieldNumber = 11;
  inline double leafindex() const;
  inline void set_leafindex(double value);
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_CornerText_BEV)
 private:
  inline void set_has_beamname();
  inline void clear_has_beamname();
  inline void set_has_beamweight();
  inline void clear_has_beamweight();
  inline void set_has_beammu();
  inline void clear_has_beammu();
  inline void set_has_displaycontent();
  inline void clear_has_displaycontent();
  inline void set_has_windowwidth();
  inline void clear_has_windowwidth();
  inline void set_has_windowcenter();
  inline void clear_has_windowcenter();
  inline void set_has_zoomfactor();
  inline void clear_has_zoomfactor();
  inline void set_has_segmentindex();
  inline void clear_has_segmentindex();
  inline void set_has_segmentweight();
  inline void clear_has_segmentweight();
  inline void set_has_segmentmu();
  inline void clear_has_segmentmu();
  inline void set_has_leafindex();
  inline void clear_has_leafindex();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* beamname_;
  double beamweight_;
  double beammu_;
  double windowwidth_;
  double windowcenter_;
  double zoomfactor_;
  double segmentindex_;
  double segmentweight_;
  double segmentmu_;
  double leafindex_;
  ::google::protobuf::int32 displaycontent_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fcornertext_5fbev_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fcornertext_5fbev_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_CornerText_BEV* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_CornerText_BEV

// optional string beamname = 1;
inline bool RT_TPS_CornerText_BEV::has_beamname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_beamname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_CornerText_BEV::clear_has_beamname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_CornerText_BEV::clear_beamname() {
  if (beamname_ != &::google::protobuf::internal::kEmptyString) {
    beamname_->clear();
  }
  clear_has_beamname();
}
inline const ::std::string& RT_TPS_CornerText_BEV::beamname() const {
  return *beamname_;
}
inline void RT_TPS_CornerText_BEV::set_beamname(const ::std::string& value) {
  set_has_beamname();
  if (beamname_ == &::google::protobuf::internal::kEmptyString) {
    beamname_ = new ::std::string;
  }
  beamname_->assign(value);
}
inline void RT_TPS_CornerText_BEV::set_beamname(const char* value) {
  set_has_beamname();
  if (beamname_ == &::google::protobuf::internal::kEmptyString) {
    beamname_ = new ::std::string;
  }
  beamname_->assign(value);
}
inline void RT_TPS_CornerText_BEV::set_beamname(const char* value, size_t size) {
  set_has_beamname();
  if (beamname_ == &::google::protobuf::internal::kEmptyString) {
    beamname_ = new ::std::string;
  }
  beamname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_CornerText_BEV::mutable_beamname() {
  set_has_beamname();
  if (beamname_ == &::google::protobuf::internal::kEmptyString) {
    beamname_ = new ::std::string;
  }
  return beamname_;
}
inline ::std::string* RT_TPS_CornerText_BEV::release_beamname() {
  clear_has_beamname();
  if (beamname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = beamname_;
    beamname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional double beamweight = 2;
inline bool RT_TPS_CornerText_BEV::has_beamweight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_beamweight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_CornerText_BEV::clear_has_beamweight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_CornerText_BEV::clear_beamweight() {
  beamweight_ = 0;
  clear_has_beamweight();
}
inline double RT_TPS_CornerText_BEV::beamweight() const {
  return beamweight_;
}
inline void RT_TPS_CornerText_BEV::set_beamweight(double value) {
  set_has_beamweight();
  beamweight_ = value;
}

// optional double beammu = 3;
inline bool RT_TPS_CornerText_BEV::has_beammu() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_beammu() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_CornerText_BEV::clear_has_beammu() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_CornerText_BEV::clear_beammu() {
  beammu_ = 0;
  clear_has_beammu();
}
inline double RT_TPS_CornerText_BEV::beammu() const {
  return beammu_;
}
inline void RT_TPS_CornerText_BEV::set_beammu(double value) {
  set_has_beammu();
  beammu_ = value;
}

// optional int32 displaycontent = 4;
inline bool RT_TPS_CornerText_BEV::has_displaycontent() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_displaycontent() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_CornerText_BEV::clear_has_displaycontent() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_CornerText_BEV::clear_displaycontent() {
  displaycontent_ = 0;
  clear_has_displaycontent();
}
inline ::google::protobuf::int32 RT_TPS_CornerText_BEV::displaycontent() const {
  return displaycontent_;
}
inline void RT_TPS_CornerText_BEV::set_displaycontent(::google::protobuf::int32 value) {
  set_has_displaycontent();
  displaycontent_ = value;
}

// optional double windowwidth = 5;
inline bool RT_TPS_CornerText_BEV::has_windowwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_windowwidth() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_CornerText_BEV::clear_has_windowwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_CornerText_BEV::clear_windowwidth() {
  windowwidth_ = 0;
  clear_has_windowwidth();
}
inline double RT_TPS_CornerText_BEV::windowwidth() const {
  return windowwidth_;
}
inline void RT_TPS_CornerText_BEV::set_windowwidth(double value) {
  set_has_windowwidth();
  windowwidth_ = value;
}

// optional double windowcenter = 6;
inline bool RT_TPS_CornerText_BEV::has_windowcenter() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_windowcenter() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_CornerText_BEV::clear_has_windowcenter() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_CornerText_BEV::clear_windowcenter() {
  windowcenter_ = 0;
  clear_has_windowcenter();
}
inline double RT_TPS_CornerText_BEV::windowcenter() const {
  return windowcenter_;
}
inline void RT_TPS_CornerText_BEV::set_windowcenter(double value) {
  set_has_windowcenter();
  windowcenter_ = value;
}

// optional double zoomfactor = 7;
inline bool RT_TPS_CornerText_BEV::has_zoomfactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_zoomfactor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_CornerText_BEV::clear_has_zoomfactor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_CornerText_BEV::clear_zoomfactor() {
  zoomfactor_ = 0;
  clear_has_zoomfactor();
}
inline double RT_TPS_CornerText_BEV::zoomfactor() const {
  return zoomfactor_;
}
inline void RT_TPS_CornerText_BEV::set_zoomfactor(double value) {
  set_has_zoomfactor();
  zoomfactor_ = value;
}

// optional double segmentindex = 8;
inline bool RT_TPS_CornerText_BEV::has_segmentindex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_segmentindex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_CornerText_BEV::clear_has_segmentindex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_CornerText_BEV::clear_segmentindex() {
  segmentindex_ = 0;
  clear_has_segmentindex();
}
inline double RT_TPS_CornerText_BEV::segmentindex() const {
  return segmentindex_;
}
inline void RT_TPS_CornerText_BEV::set_segmentindex(double value) {
  set_has_segmentindex();
  segmentindex_ = value;
}

// optional double segmentweight = 9;
inline bool RT_TPS_CornerText_BEV::has_segmentweight() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_segmentweight() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RT_TPS_CornerText_BEV::clear_has_segmentweight() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RT_TPS_CornerText_BEV::clear_segmentweight() {
  segmentweight_ = 0;
  clear_has_segmentweight();
}
inline double RT_TPS_CornerText_BEV::segmentweight() const {
  return segmentweight_;
}
inline void RT_TPS_CornerText_BEV::set_segmentweight(double value) {
  set_has_segmentweight();
  segmentweight_ = value;
}

// optional double segmentmu = 10;
inline bool RT_TPS_CornerText_BEV::has_segmentmu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_segmentmu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RT_TPS_CornerText_BEV::clear_has_segmentmu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RT_TPS_CornerText_BEV::clear_segmentmu() {
  segmentmu_ = 0;
  clear_has_segmentmu();
}
inline double RT_TPS_CornerText_BEV::segmentmu() const {
  return segmentmu_;
}
inline void RT_TPS_CornerText_BEV::set_segmentmu(double value) {
  set_has_segmentmu();
  segmentmu_ = value;
}

// optional double leafindex = 11;
inline bool RT_TPS_CornerText_BEV::has_leafindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RT_TPS_CornerText_BEV::set_has_leafindex() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RT_TPS_CornerText_BEV::clear_has_leafindex() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RT_TPS_CornerText_BEV::clear_leafindex() {
  leafindex_ = 0;
  clear_has_leafindex();
}
inline double RT_TPS_CornerText_BEV::leafindex() const {
  return leafindex_;
}
inline void RT_TPS_CornerText_BEV::set_leafindex(double value) {
  set_has_leafindex();
  leafindex_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fcornertext_5fbev_2eproto__INCLUDED
