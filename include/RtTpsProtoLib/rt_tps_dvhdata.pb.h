// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rt_tps_dvhdata.proto

#ifndef PROTOBUF_rt_5ftps_5fdvhdata_2eproto__INCLUDED
#define PROTOBUF_rt_5ftps_5fdvhdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "rt_tps_point.pb.h"
// @@protoc_insertion_point(includes)

namespace tps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();
void protobuf_AssignDesc_rt_5ftps_5fdvhdata_2eproto();
void protobuf_ShutdownFile_rt_5ftps_5fdvhdata_2eproto();

class RT_TPS_DVHData;

// ===================================================================

class RT_TPS_DVHData : public ::google::protobuf::Message {
 public:
  RT_TPS_DVHData();
  virtual ~RT_TPS_DVHData();
  
  RT_TPS_DVHData(const RT_TPS_DVHData& from);
  
  inline RT_TPS_DVHData& operator=(const RT_TPS_DVHData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RT_TPS_DVHData& default_instance();
  
  void Swap(RT_TPS_DVHData* other);
  
  // implements Message ----------------------------------------------
  
  RT_TPS_DVHData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RT_TPS_DVHData& from);
  void MergeFrom(const RT_TPS_DVHData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string parentuid = 1;
  inline bool has_parentuid() const;
  inline void clear_parentuid();
  static const int kParentuidFieldNumber = 1;
  inline const ::std::string& parentuid() const;
  inline void set_parentuid(const ::std::string& value);
  inline void set_parentuid(const char* value);
  inline void set_parentuid(const char* value, size_t size);
  inline ::std::string* mutable_parentuid();
  inline ::std::string* release_parentuid();
  
  // required string voiuid = 2;
  inline bool has_voiuid() const;
  inline void clear_voiuid();
  static const int kVoiuidFieldNumber = 2;
  inline const ::std::string& voiuid() const;
  inline void set_voiuid(const ::std::string& value);
  inline void set_voiuid(const char* value);
  inline void set_voiuid(const char* value, size_t size);
  inline ::std::string* mutable_voiuid();
  inline ::std::string* release_voiuid();
  
  // optional float minDose = 3;
  inline bool has_mindose() const;
  inline void clear_mindose();
  static const int kMinDoseFieldNumber = 3;
  inline float mindose() const;
  inline void set_mindose(float value);
  
  // optional float maxDose = 4;
  inline bool has_maxdose() const;
  inline void clear_maxdose();
  static const int kMaxDoseFieldNumber = 4;
  inline float maxdose() const;
  inline void set_maxdose(float value);
  
  // optional float meanDose = 5;
  inline bool has_meandose() const;
  inline void clear_meandose();
  static const int kMeanDoseFieldNumber = 5;
  inline float meandose() const;
  inline void set_meandose(float value);
  
  // optional float standardDeviation = 6;
  inline bool has_standarddeviation() const;
  inline void clear_standarddeviation();
  static const int kStandardDeviationFieldNumber = 6;
  inline float standarddeviation() const;
  inline void set_standarddeviation(float value);
  
  // optional float inGrid = 7;
  inline bool has_ingrid() const;
  inline void clear_ingrid();
  static const int kInGridFieldNumber = 7;
  inline float ingrid() const;
  inline void set_ingrid(float value);
  
  // optional float volume = 8;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 8;
  inline float volume() const;
  inline void set_volume(float value);
  
  // repeated .tps.proto.RT_TPS_POINT point = 9;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 9;
  inline const ::tps::proto::RT_TPS_POINT& point(int index) const;
  inline ::tps::proto::RT_TPS_POINT* mutable_point(int index);
  inline ::tps::proto::RT_TPS_POINT* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >*
      mutable_point();
  
  // repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
  inline int cumulativepoint_size() const;
  inline void clear_cumulativepoint();
  static const int kCumulativepointFieldNumber = 10;
  inline const ::tps::proto::RT_TPS_POINT& cumulativepoint(int index) const;
  inline ::tps::proto::RT_TPS_POINT* mutable_cumulativepoint(int index);
  inline ::tps::proto::RT_TPS_POINT* add_cumulativepoint();
  inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >&
      cumulativepoint() const;
  inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >*
      mutable_cumulativepoint();
  
  // @@protoc_insertion_point(class_scope:tps.proto.RT_TPS_DVHData)
 private:
  inline void set_has_parentuid();
  inline void clear_has_parentuid();
  inline void set_has_voiuid();
  inline void clear_has_voiuid();
  inline void set_has_mindose();
  inline void clear_has_mindose();
  inline void set_has_maxdose();
  inline void clear_has_maxdose();
  inline void set_has_meandose();
  inline void clear_has_meandose();
  inline void set_has_standarddeviation();
  inline void clear_has_standarddeviation();
  inline void set_has_ingrid();
  inline void clear_has_ingrid();
  inline void set_has_volume();
  inline void clear_has_volume();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* parentuid_;
  ::std::string* voiuid_;
  float mindose_;
  float maxdose_;
  float meandose_;
  float standarddeviation_;
  float ingrid_;
  float volume_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT > point_;
  ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT > cumulativepoint_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_rt_5ftps_5fdvhdata_2eproto();
  friend void protobuf_AssignDesc_rt_5ftps_5fdvhdata_2eproto();
  friend void protobuf_ShutdownFile_rt_5ftps_5fdvhdata_2eproto();
  
  void InitAsDefaultInstance();
  static RT_TPS_DVHData* default_instance_;
};
// ===================================================================


// ===================================================================

// RT_TPS_DVHData

// required string parentuid = 1;
inline bool RT_TPS_DVHData::has_parentuid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RT_TPS_DVHData::set_has_parentuid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RT_TPS_DVHData::clear_has_parentuid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RT_TPS_DVHData::clear_parentuid() {
  if (parentuid_ != &::google::protobuf::internal::kEmptyString) {
    parentuid_->clear();
  }
  clear_has_parentuid();
}
inline const ::std::string& RT_TPS_DVHData::parentuid() const {
  return *parentuid_;
}
inline void RT_TPS_DVHData::set_parentuid(const ::std::string& value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_TPS_DVHData::set_parentuid(const char* value) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(value);
}
inline void RT_TPS_DVHData::set_parentuid(const char* value, size_t size) {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  parentuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_DVHData::mutable_parentuid() {
  set_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    parentuid_ = new ::std::string;
  }
  return parentuid_;
}
inline ::std::string* RT_TPS_DVHData::release_parentuid() {
  clear_has_parentuid();
  if (parentuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = parentuid_;
    parentuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string voiuid = 2;
inline bool RT_TPS_DVHData::has_voiuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RT_TPS_DVHData::set_has_voiuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RT_TPS_DVHData::clear_has_voiuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RT_TPS_DVHData::clear_voiuid() {
  if (voiuid_ != &::google::protobuf::internal::kEmptyString) {
    voiuid_->clear();
  }
  clear_has_voiuid();
}
inline const ::std::string& RT_TPS_DVHData::voiuid() const {
  return *voiuid_;
}
inline void RT_TPS_DVHData::set_voiuid(const ::std::string& value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RT_TPS_DVHData::set_voiuid(const char* value) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(value);
}
inline void RT_TPS_DVHData::set_voiuid(const char* value, size_t size) {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  voiuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RT_TPS_DVHData::mutable_voiuid() {
  set_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    voiuid_ = new ::std::string;
  }
  return voiuid_;
}
inline ::std::string* RT_TPS_DVHData::release_voiuid() {
  clear_has_voiuid();
  if (voiuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiuid_;
    voiuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional float minDose = 3;
inline bool RT_TPS_DVHData::has_mindose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RT_TPS_DVHData::set_has_mindose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RT_TPS_DVHData::clear_has_mindose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RT_TPS_DVHData::clear_mindose() {
  mindose_ = 0;
  clear_has_mindose();
}
inline float RT_TPS_DVHData::mindose() const {
  return mindose_;
}
inline void RT_TPS_DVHData::set_mindose(float value) {
  set_has_mindose();
  mindose_ = value;
}

// optional float maxDose = 4;
inline bool RT_TPS_DVHData::has_maxdose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RT_TPS_DVHData::set_has_maxdose() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RT_TPS_DVHData::clear_has_maxdose() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RT_TPS_DVHData::clear_maxdose() {
  maxdose_ = 0;
  clear_has_maxdose();
}
inline float RT_TPS_DVHData::maxdose() const {
  return maxdose_;
}
inline void RT_TPS_DVHData::set_maxdose(float value) {
  set_has_maxdose();
  maxdose_ = value;
}

// optional float meanDose = 5;
inline bool RT_TPS_DVHData::has_meandose() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RT_TPS_DVHData::set_has_meandose() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RT_TPS_DVHData::clear_has_meandose() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RT_TPS_DVHData::clear_meandose() {
  meandose_ = 0;
  clear_has_meandose();
}
inline float RT_TPS_DVHData::meandose() const {
  return meandose_;
}
inline void RT_TPS_DVHData::set_meandose(float value) {
  set_has_meandose();
  meandose_ = value;
}

// optional float standardDeviation = 6;
inline bool RT_TPS_DVHData::has_standarddeviation() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RT_TPS_DVHData::set_has_standarddeviation() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RT_TPS_DVHData::clear_has_standarddeviation() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RT_TPS_DVHData::clear_standarddeviation() {
  standarddeviation_ = 0;
  clear_has_standarddeviation();
}
inline float RT_TPS_DVHData::standarddeviation() const {
  return standarddeviation_;
}
inline void RT_TPS_DVHData::set_standarddeviation(float value) {
  set_has_standarddeviation();
  standarddeviation_ = value;
}

// optional float inGrid = 7;
inline bool RT_TPS_DVHData::has_ingrid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RT_TPS_DVHData::set_has_ingrid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RT_TPS_DVHData::clear_has_ingrid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RT_TPS_DVHData::clear_ingrid() {
  ingrid_ = 0;
  clear_has_ingrid();
}
inline float RT_TPS_DVHData::ingrid() const {
  return ingrid_;
}
inline void RT_TPS_DVHData::set_ingrid(float value) {
  set_has_ingrid();
  ingrid_ = value;
}

// optional float volume = 8;
inline bool RT_TPS_DVHData::has_volume() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RT_TPS_DVHData::set_has_volume() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RT_TPS_DVHData::clear_has_volume() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RT_TPS_DVHData::clear_volume() {
  volume_ = 0;
  clear_has_volume();
}
inline float RT_TPS_DVHData::volume() const {
  return volume_;
}
inline void RT_TPS_DVHData::set_volume(float value) {
  set_has_volume();
  volume_ = value;
}

// repeated .tps.proto.RT_TPS_POINT point = 9;
inline int RT_TPS_DVHData::point_size() const {
  return point_.size();
}
inline void RT_TPS_DVHData::clear_point() {
  point_.Clear();
}
inline const ::tps::proto::RT_TPS_POINT& RT_TPS_DVHData::point(int index) const {
  return point_.Get(index);
}
inline ::tps::proto::RT_TPS_POINT* RT_TPS_DVHData::mutable_point(int index) {
  return point_.Mutable(index);
}
inline ::tps::proto::RT_TPS_POINT* RT_TPS_DVHData::add_point() {
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >&
RT_TPS_DVHData::point() const {
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >*
RT_TPS_DVHData::mutable_point() {
  return &point_;
}

// repeated .tps.proto.RT_TPS_POINT cumulativepoint = 10;
inline int RT_TPS_DVHData::cumulativepoint_size() const {
  return cumulativepoint_.size();
}
inline void RT_TPS_DVHData::clear_cumulativepoint() {
  cumulativepoint_.Clear();
}
inline const ::tps::proto::RT_TPS_POINT& RT_TPS_DVHData::cumulativepoint(int index) const {
  return cumulativepoint_.Get(index);
}
inline ::tps::proto::RT_TPS_POINT* RT_TPS_DVHData::mutable_cumulativepoint(int index) {
  return cumulativepoint_.Mutable(index);
}
inline ::tps::proto::RT_TPS_POINT* RT_TPS_DVHData::add_cumulativepoint() {
  return cumulativepoint_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >&
RT_TPS_DVHData::cumulativepoint() const {
  return cumulativepoint_;
}
inline ::google::protobuf::RepeatedPtrField< ::tps::proto::RT_TPS_POINT >*
RT_TPS_DVHData::mutable_cumulativepoint() {
  return &cumulativepoint_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace tps

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_rt_5ftps_5fdvhdata_2eproto__INCLUDED
