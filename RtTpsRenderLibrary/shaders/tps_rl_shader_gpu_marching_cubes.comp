#version 430

layout(local_size_x=2, local_size_y=2) in;

layout(r32f, binding=0) uniform imageBuffer imageVertices;
layout(r32f, binding=1) uniform imageBuffer imageNormals;

layout(binding=0) uniform atomic_uint triangleCounter;

//layout(std430, binding=0) buffer InvocationCount
//{
//    uint invocation_count;
//};

//uniform isampler3D texVolumeData;
uniform sampler3D texVolumeData;
uniform isampler2D texTriTable;
uniform usampler1D texEdgeTable;
uniform usampler1D texEdgeVertexTable;
uniform usamplerBuffer texCubeIndexCache;
uniform ivec3 volumeDim;
uniform ivec3 calcSpaceDim;
uniform float isoLevel;

void  VertexInterp(int edgeIndex, out vec3 vertex, out vec3 normal);
vec3  CalcNormal(vec3 point);
float QueryData(vec3 point);

void main()
{
    //extand the invocation space to handle the edge 
    ivec3 currCoord = ivec3(gl_GlobalInvocationID);
    int p = currCoord.x + currCoord.y * calcSpaceDim[0] + 
        currCoord.z * calcSpaceDim[1] * calcSpaceDim[0];
    uint cubeIndex = texelFetch(texCubeIndexCache, p).r;
    if (cubeIndex == 0 || cubeIndex == 255)
    {
        return;
    }

    vec3 vertices[12];
    vec3 normals[12];
    uint edgeFlag = texelFetch(texEdgeTable, int(cubeIndex), 0).r;
    for (int i = 0; i < 12; ++i)
    {
        if ((edgeFlag & (0x01<<i)) == 0) continue;
        VertexInterp(i, vertices[i], normals[i]);
    }

    int rem;
    for (int i = 0; i < 16; ++i)
    {
        int edgeIndex = texelFetch(texTriTable, ivec2(i, cubeIndex), 0).r;
        if (edgeIndex == -1)
        {
            break;
        }
        rem = i % 3;
        if (rem == 0)
        {
            p = int(atomicCounterIncrement(triangleCounter));
        }
        int location = 9 * p + 3 * rem;
        //here we store x, y, z separately, imageBuffer does not support RGB format,
        //if using rgba32f, we need use a stride when rendering the buffer later,
        //and that will affect the performance heavily
        imageStore(imageVertices, location    , vec4(vertices[edgeIndex].x, 0.0, 0.0, 0.0));
        imageStore(imageVertices, location + 1, vec4(vertices[edgeIndex].y, 0.0, 0.0, 0.0));
        imageStore(imageVertices, location + 2, vec4(vertices[edgeIndex].z, 0.0, 0.0, 0.0));
        imageStore(imageNormals , location    , vec4(normals [edgeIndex].x, 0.0, 0.0, 0.0));
        imageStore(imageNormals , location + 1, vec4(normals [edgeIndex].y, 0.0, 0.0, 0.0));
        imageStore(imageNormals , location + 2, vec4(normals [edgeIndex].z, 0.0, 0.0, 0.0));
    }
    memoryBarrier();
}

void VertexInterp(int edgeIndex, out vec3 vertex, out vec3 normal)
{
    vec3 currCoord = vec3(gl_GlobalInvocationID);
    uint edgeVertices = texelFetch(texEdgeVertexTable, edgeIndex, 0).r;
    vec3 points[2];
    int i = 0;

    //we do not need consider the division-by-zero case, because if any dimension of 
    //calSpaceDim equals to 1, no invocation in computer shader will be executed.
    vec3 dimScale = vec3(volumeDim - 1) / (calcSpaceDim - 1);
    vec3 step = 1.0 / volumeDim * dimScale;
    vec3 currNormLocation = (currCoord * dimScale + 0.5) / volumeDim;
    if ((edgeVertices & 0x01) != 0)
    {
        points[i++] = vec3(0, 0, 0);
    }
    if ((edgeVertices & 0x02) != 0)
    {
        points[i++] = vec3(1, 0, 0);
    }
    if ((edgeVertices & 0x04) != 0)
    {
        points[i++] = vec3(1, 1, 0);
    }
    if ((edgeVertices & 0x08) != 0)
    {
        points[i++] = vec3(0, 1, 0);
    }
    if ((edgeVertices & 0x10) != 0)
    {
        points[i++] = vec3(0, 0, 1);
    }
    if ((edgeVertices & 0x20) != 0)
    {
        points[i++] = vec3(1, 0, 1);
    }
    if ((edgeVertices & 0x40) != 0)
    {
        points[i++] = vec3(1, 1, 1);
    }
    if ((edgeVertices & 0x80) != 0)
    {
        points[i++] = vec3(0, 1, 1);
    }
    points[0] = currNormLocation + points[0] * step;
    points[1] = currNormLocation + points[1] * step;

    //vertex
    float v1 = QueryData(points[0]);
    float v2 = QueryData(points[1]);
    float lambda = (isoLevel - v1) / (v2 - v1);
    vertex = points[0] + lambda * (points[1] - points[0]);
    //output the coordinate in original volume, not calc-space
    vertex = vertex * volumeDim - 0.5;
    //normal
    vec3 n1 = CalcNormal(points[0]);
    vec3 n2 = CalcNormal(points[1]);
    normal = -1 * normalize(n1 + lambda * (n2 - n1));
}

vec3 CalcNormal(vec3 point)
{
    vec3 dimScale = vec3(volumeDim - 1) / (calcSpaceDim - 1);
    vec3 delta = 1.0 / volumeDim * dimScale;
    //float v = QueryData(point);
    float vx0 = QueryData(point - vec3(delta.x, 0, 0));
    float vx1 = QueryData(point + vec3(delta.x, 0, 0));
    float vy0 = QueryData(point - vec3(0, delta.y, 0));
    float vy1 = QueryData(point + vec3(0, delta.y, 0));
    float vz0 = QueryData(point - vec3(0, 0, delta.z));
    float vz1 = QueryData(point + vec3(0, 0, delta.z));
    return vec3(vx1 - vx0, vy1 - vy0, vz1 - vz0);
}

float QueryData(vec3 point)
{
    return texture(texVolumeData, point).r;
}