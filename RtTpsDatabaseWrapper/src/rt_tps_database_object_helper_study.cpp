//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_study.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_study.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtStudy& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //69 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < STUDY_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_STUDY_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsstudy SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < STUDY_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_STUDY_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsstudy (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_sopinstanceuid = "";
    std::string	data_patientuid = "";
    std::string	data_patientage = "";
    std::string	data_patientsize = "";
    std::string	data_patientweight = "";
    std::string	data_occupation = "";
    std::string	data_additionalpatienthistory = "";
    std::string	data_studyid = "";
    MYSQL_TIME	data_studydate;
    MYSQL_TIME	data_studytime;
    std::string	data_modalitiesinstudy = "";
    std::string	data_accessionnumber = "";
    std::string	data_studydescription = "";
    std::string	data_instanceavailability = "";
    std::string	data_admittingdiagnosesdescription = "";
    MYSQL_TIME	data_studycompletiondate;
    MYSQL_TIME	data_studycompletiontime;
    std::string	data_requestingphysician = "";
    std::string	data_requestedproceduredescription = "";
    std::string	data_requestedcontrastagent = "";
    std::string	data_referringphysicianname = "";
    int			data_pregnancystatus = 0;
    std::string	data_smokingstatus = "";
    std::string	data_medicalalerts = "";
    std::string	data_patientinstitutionresidence = "";
    std::string	data_studystatusid = "";
    std::string	data_admissionid = "";
    std::string	data_studyprintstatus = "";
    std::string	data_studysendstatus = "";
    std::string	data_studystoredindvd = "";
    std::string	data_studystoredinusb = "";
    int			data_importsource = 0;
    std::string	data_studyflag = "";
    std::string	data_studyprotect = "";
    int			data_studyconfirmstatus = 0;
    std::string	data_studyrejectreason = "";
    MYSQL_TIME	data_studyconfirmdatetime;
    std::string	data_studyidissuer = "";
    std::string	data_studycomments = "";
    std::string	data_specialneeds = "";
    std::string	data_performedprocedurestepuid = "";
    int			data_performedprocedurestepstatus = 0;
    std::string	data_performedprocedurestepdiscontinuationreason = "";
    std::string	data_sourceisotopename = "";
    std::string	data_radionuclidetotaldose = "";
    MYSQL_TIME	data_radiopharmaceuticalstartdatetime;
    std::string	data_radiopharmaceutical = "";
    MYSQL_TIME	data_scheduledscantime;
    int			data_safetymodesar = 0;
    int			data_safetymodegradient = 0;
    std::string	data_studyaccumulateddap = "";
    int			data_studytype = 0;
    int			data_modifyflag = 0;
    int			data_mergeflag = 0;
    int			data_splitflag = 0;
    int			data_repeatflag = 0;
    std::string	data_procedurestepid = "";
    std::string	data_procedurestepdescription = "";
    std::string	data_proceduresteplocation = "";
    std::string	data_premedication = "";
    std::string	data_performingphysician = "";
    std::string	data_operatorsname = "";
    int			data_studyimportstatus = 0;
    std::string	data_requestedprocedureid = "";
    std::string	data_folderpath = "";
    std::string	data_studyreserved0 = "";
    std::string	data_studyreserved1 = "";
    MYSQL_TIME	data_updatetime;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < STUDY_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//sopinstanceuid varchar
            {
                data_sopinstanceuid = src.get_sopinstanceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sopinstanceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sopinstanceuid.size();
            }
            break;
        case 2: 	//patientuid varchar
            {
                data_patientuid = src.get_patientuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientuid.size();
            }
            break;
        case 3: 	//patientage varchar
            {
                data_patientage = src.get_patientage();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientage.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientage.size();
            }
            break;
        case 4: 	//patientsize varchar
            {
                data_patientsize = src.get_patientsize();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientsize.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientsize.size();
            }
            break;
        case 5: 	//patientweight varchar
            {
                data_patientweight = src.get_patientweight();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientweight.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientweight.size();
            }
            break;
        case 6: 	//occupation varchar
            {
                data_occupation = src.get_occupation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_occupation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_occupation.size();
            }
            break;
        case 7: 	//additionalpatienthistory varchar
            {
                data_additionalpatienthistory = src.get_additionalpatienthistory();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_additionalpatienthistory.c_str();
                bind[iCount].buffer_length = (unsigned long)data_additionalpatienthistory.size();
            }
            break;
        case 8: 	//studyid varchar
            {
                data_studyid = src.get_studyid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyid.size();
            }
            break;
        case 9: 	//studydate date
            {
                ConvertDateTime2DB(src.get_studydate(), &data_studydate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_studydate;
                if (src.get_studydate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 10: 	//studytime time
            {
                ConvertDateTime2DB(src.get_studytime(), &data_studytime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_studytime;
                if (src.get_studytime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 11: 	//modalitiesinstudy varchar
            {
                data_modalitiesinstudy = src.get_modalitiesinstudy();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_modalitiesinstudy.c_str();
                bind[iCount].buffer_length = (unsigned long)data_modalitiesinstudy.size();
            }
            break;
        case 12: 	//accessionnumber varchar
            {
                data_accessionnumber = src.get_accessionnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_accessionnumber.c_str();
                bind[iCount].buffer_length = (unsigned long)data_accessionnumber.size();
            }
            break;
        case 13: 	//studydescription varchar
            {
                data_studydescription = src.get_studydescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studydescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studydescription.size();
            }
            break;
        case 14: 	//instanceavailability varchar
            {
                data_instanceavailability = src.get_instanceavailability();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_instanceavailability.c_str();
                bind[iCount].buffer_length = (unsigned long)data_instanceavailability.size();
            }
            break;
        case 15: 	//admittingdiagnosesdescription varchar
            {
                data_admittingdiagnosesdescription = src.get_admittingdiagnosesdescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_admittingdiagnosesdescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_admittingdiagnosesdescription.size();
            }
            break;
        case 16: 	//studycompletiondate date
            {
                ConvertDateTime2DB(src.get_studycompletiondate(), &data_studycompletiondate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_studycompletiondate;
                if (src.get_studycompletiondate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 17: 	//studycompletiontime time
            {
                ConvertDateTime2DB(src.get_studycompletiontime(), &data_studycompletiontime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_studycompletiontime;
                if (src.get_studycompletiontime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 18: 	//requestingphysician varchar
            {
                data_requestingphysician = src.get_requestingphysician();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_requestingphysician.c_str();
                bind[iCount].buffer_length = (unsigned long)data_requestingphysician.size();
            }
            break;
        case 19: 	//requestedproceduredescription varchar
            {
                data_requestedproceduredescription = src.get_requestedproceduredescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_requestedproceduredescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_requestedproceduredescription.size();
            }
            break;
        case 20: 	//requestedcontrastagent varchar
            {
                data_requestedcontrastagent = src.get_requestedcontrastagent();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_requestedcontrastagent.c_str();
                bind[iCount].buffer_length = (unsigned long)data_requestedcontrastagent.size();
            }
            break;
        case 21: 	//referringphysicianname varchar
            {
                data_referringphysicianname = src.get_referringphysicianname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_referringphysicianname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_referringphysicianname.size();
            }
            break;
        case 22: 	//pregnancystatus int
            {
                data_pregnancystatus = src.get_pregnancystatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_pregnancystatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 23: 	//smokingstatus varchar
            {
                data_smokingstatus = src.get_smokingstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_smokingstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_smokingstatus.size();
            }
            break;
        case 24: 	//medicalalerts varchar
            {
                data_medicalalerts = src.get_medicalalerts();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_medicalalerts.c_str();
                bind[iCount].buffer_length = (unsigned long)data_medicalalerts.size();
            }
            break;
        case 25: 	//patientinstitutionresidence varchar
            {
                data_patientinstitutionresidence = src.get_patientinstitutionresidence();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientinstitutionresidence.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientinstitutionresidence.size();
            }
            break;
        case 26: 	//studystatusid varchar
            {
                data_studystatusid = src.get_studystatusid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studystatusid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studystatusid.size();
            }
            break;
        case 27: 	//admissionid varchar
            {
                data_admissionid = src.get_admissionid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_admissionid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_admissionid.size();
            }
            break;
        case 28: 	//studyprintstatus varchar
            {
                data_studyprintstatus = src.get_studyprintstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyprintstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyprintstatus.size();
            }
            break;
        case 29: 	//studysendstatus varchar
            {
                data_studysendstatus = src.get_studysendstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studysendstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studysendstatus.size();
            }
            break;
        case 30: 	//studystoredindvd varchar
            {
                data_studystoredindvd = src.get_studystoredindvd();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studystoredindvd.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studystoredindvd.size();
            }
            break;
        case 31: 	//studystoredinusb varchar
            {
                data_studystoredinusb = src.get_studystoredinusb();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studystoredinusb.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studystoredinusb.size();
            }
            break;
        case 32: 	//importsource int
            {
                data_importsource = src.get_importsource();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_importsource;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 33: 	//studyflag varchar
            {
                data_studyflag = src.get_studyflag();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyflag.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyflag.size();
            }
            break;
        case 34: 	//studyprotect varchar
            {
                data_studyprotect = src.get_studyprotect();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyprotect.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyprotect.size();
            }
            break;
        case 35: 	//studyconfirmstatus int
            {
                data_studyconfirmstatus = src.get_studyconfirmstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_studyconfirmstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 36: 	//studyrejectreason varchar
            {
                data_studyrejectreason = src.get_studyrejectreason();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyrejectreason.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyrejectreason.size();
            }
            break;
        case 37: 	//studyconfirmdatetime datetime
            {
                ConvertDateTime2DB(src.get_studyconfirmdatetime(), &data_studyconfirmdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_studyconfirmdatetime;
                if (src.get_studyconfirmdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 38: 	//studyidissuer varchar
            {
                data_studyidissuer = src.get_studyidissuer();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyidissuer.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyidissuer.size();
            }
            break;
        case 39: 	//studycomments varchar
            {
                data_studycomments = src.get_studycomments();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studycomments.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studycomments.size();
            }
            break;
        case 40: 	//specialneeds varchar
            {
                data_specialneeds = src.get_specialneeds();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_specialneeds.c_str();
                bind[iCount].buffer_length = (unsigned long)data_specialneeds.size();
            }
            break;
        case 41: 	//performedprocedurestepuid varchar
            {
                data_performedprocedurestepuid = src.get_performedprocedurestepuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performedprocedurestepuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performedprocedurestepuid.size();
            }
            break;
        case 42: 	//performedprocedurestepstatus int
            {
                data_performedprocedurestepstatus = src.get_performedprocedurestepstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_performedprocedurestepstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 43: 	//performedprocedurestepdiscontinuationreason varchar
            {
                data_performedprocedurestepdiscontinuationreason = src.get_performedprocedurestepdiscontinuationreason();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performedprocedurestepdiscontinuationreason.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performedprocedurestepdiscontinuationreason.size();
            }
            break;
        case 44: 	//sourceisotopename varchar
            {
                data_sourceisotopename = src.get_sourceisotopename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sourceisotopename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sourceisotopename.size();
            }
            break;
        case 45: 	//radionuclidetotaldose varchar
            {
                data_radionuclidetotaldose = src.get_radionuclidetotaldose();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_radionuclidetotaldose.c_str();
                bind[iCount].buffer_length = (unsigned long)data_radionuclidetotaldose.size();
            }
            break;
        case 46: 	//radiopharmaceuticalstartdatetime datetime
            {
                ConvertDateTime2DB(src.get_radiopharmaceuticalstartdatetime(), &data_radiopharmaceuticalstartdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_radiopharmaceuticalstartdatetime;
                if (src.get_radiopharmaceuticalstartdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 47: 	//radiopharmaceutical varchar
            {
                data_radiopharmaceutical = src.get_radiopharmaceutical();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_radiopharmaceutical.c_str();
                bind[iCount].buffer_length = (unsigned long)data_radiopharmaceutical.size();
            }
            break;
        case 48: 	//scheduledscantime datetime
            {
                ConvertDateTime2DB(src.get_scheduledscantime(), &data_scheduledscantime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_scheduledscantime;
                if (src.get_scheduledscantime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 49: 	//safetymodesar int
            {
                data_safetymodesar = src.get_safetymodesar();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_safetymodesar;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 50: 	//safetymodegradient int
            {
                data_safetymodegradient = src.get_safetymodegradient();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_safetymodegradient;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 51: 	//studyaccumulateddap varchar
            {
                data_studyaccumulateddap = src.get_studyaccumulateddap();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyaccumulateddap.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyaccumulateddap.size();
            }
            break;
        case 52: 	//studytype int
            {
                data_studytype = src.get_studytype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_studytype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 53: 	//modifyflag int
            {
                data_modifyflag = src.get_modifyflag();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_modifyflag;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 54: 	//mergeflag int
            {
                data_mergeflag = src.get_mergeflag();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mergeflag;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 55: 	//splitflag int
            {
                data_splitflag = src.get_splitflag();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_splitflag;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 56: 	//repeatflag int
            {
                data_repeatflag = src.get_repeatflag();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_repeatflag;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 57: 	//procedurestepid varchar
            {
                data_procedurestepid = src.get_procedurestepid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_procedurestepid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_procedurestepid.size();
            }
            break;
        case 58: 	//procedurestepdescription varchar
            {
                data_procedurestepdescription = src.get_procedurestepdescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_procedurestepdescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_procedurestepdescription.size();
            }
            break;
        case 59: 	//proceduresteplocation varchar
            {
                data_proceduresteplocation = src.get_proceduresteplocation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_proceduresteplocation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_proceduresteplocation.size();
            }
            break;
        case 60: 	//premedication varchar
            {
                data_premedication = src.get_premedication();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_premedication.c_str();
                bind[iCount].buffer_length = (unsigned long)data_premedication.size();
            }
            break;
        case 61: 	//performingphysician varchar
            {
                data_performingphysician = src.get_performingphysician();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performingphysician.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performingphysician.size();
            }
            break;
        case 62: 	//operatorsname varchar
            {
                data_operatorsname = src.get_operatorsname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_operatorsname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_operatorsname.size();
            }
            break;
        case 63: 	//studyimportstatus int
            {
                data_studyimportstatus = src.get_studyimportstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_studyimportstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 64: 	//requestedprocedureid varchar
            {
                data_requestedprocedureid = src.get_requestedprocedureid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_requestedprocedureid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_requestedprocedureid.size();
            }
            break;
        case 65: 	//folderpath varchar
            {
                data_folderpath = src.get_folderpath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_folderpath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_folderpath.size();
            }
            break;
        case 66: 	//studyreserved0 varchar
            {
                data_studyreserved0 = src.get_studyreserved0();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyreserved0.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyreserved0.size();
            }
            break;
        case 67: 	//studyreserved1 varchar
            {
                data_studyreserved1 = src.get_studyreserved1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyreserved1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyreserved1.size();
            }
            break;
        case 68: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtStudy*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtStudy*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsstudy    69 parameters
    const int field_num = STUDY_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 64;
    MAX_LENGTH[3] = 4;
    MAX_LENGTH[4] = 16;
    MAX_LENGTH[5] = 16;
    MAX_LENGTH[6] = 16;
    MAX_LENGTH[7] = 5240;
    MAX_LENGTH[8] = 16;
    MAX_LENGTH[9] = 0;
    MAX_LENGTH[10] = 0;
    MAX_LENGTH[11] = 135;
    MAX_LENGTH[12] = 16;
    MAX_LENGTH[13] = 64;
    MAX_LENGTH[14] = 16;
    MAX_LENGTH[15] = 259;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 64;
    MAX_LENGTH[19] = 64;
    MAX_LENGTH[20] = 64;
    MAX_LENGTH[21] = 64;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 16;
    MAX_LENGTH[24] = 259;
    MAX_LENGTH[25] = 64;
    MAX_LENGTH[26] = 16;
    MAX_LENGTH[27] = 64;
    MAX_LENGTH[28] = 4;
    MAX_LENGTH[29] = 4;
    MAX_LENGTH[30] = 4;
    MAX_LENGTH[31] = 4;
    MAX_LENGTH[32] = 0;
    MAX_LENGTH[33] = 4;
    MAX_LENGTH[34] = 4;
    MAX_LENGTH[35] = 0;
    MAX_LENGTH[36] = 255;
    MAX_LENGTH[37] = 0;
    MAX_LENGTH[38] = 64;
    MAX_LENGTH[39] = 1024;
    MAX_LENGTH[40] = 64;
    MAX_LENGTH[41] = 64;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 1024;
    MAX_LENGTH[44] = 64;
    MAX_LENGTH[45] = 16;
    MAX_LENGTH[46] = 0;
    MAX_LENGTH[47] = 64;
    MAX_LENGTH[48] = 0;
    MAX_LENGTH[49] = 0;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 16;
    MAX_LENGTH[52] = 0;
    MAX_LENGTH[53] = 0;
    MAX_LENGTH[54] = 0;
    MAX_LENGTH[55] = 0;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 16;
    MAX_LENGTH[58] = 64;
    MAX_LENGTH[59] = 16;
    MAX_LENGTH[60] = 64;
    MAX_LENGTH[61] = 259;
    MAX_LENGTH[62] = 259;
    MAX_LENGTH[63] = 0;
    MAX_LENGTH[64] = 16;
    MAX_LENGTH[65] = 255;
    MAX_LENGTH[66] = 64;
    MAX_LENGTH[67] = 64;
    MAX_LENGTH[68] = 0;

    //std::string	data_uid
    //std::string	data_sopinstanceuid
    //std::string	data_patientuid
    //std::string	data_patientage
    //std::string	data_patientsize
    //std::string	data_patientweight
    //std::string	data_occupation
    //std::string	data_additionalpatienthistory
    //std::string	data_studyid
    MYSQL_TIME	data_studydate;
    MYSQL_TIME	data_studytime;
    //std::string	data_modalitiesinstudy
    //std::string	data_accessionnumber
    //std::string	data_studydescription
    //std::string	data_instanceavailability
    //std::string	data_admittingdiagnosesdescription
    MYSQL_TIME	data_studycompletiondate;
    MYSQL_TIME	data_studycompletiontime;
    //std::string	data_requestingphysician
    //std::string	data_requestedproceduredescription
    //std::string	data_requestedcontrastagent
    //std::string	data_referringphysicianname
    int	data_pregnancystatus = 0;
    //std::string	data_smokingstatus
    //std::string	data_medicalalerts
    //std::string	data_patientinstitutionresidence
    //std::string	data_studystatusid
    //std::string	data_admissionid
    //std::string	data_studyprintstatus
    //std::string	data_studysendstatus
    //std::string	data_studystoredindvd
    //std::string	data_studystoredinusb
    int	data_importsource = 0;
    //std::string	data_studyflag
    //std::string	data_studyprotect
    int	data_studyconfirmstatus = 0;
    //std::string	data_studyrejectreason
    MYSQL_TIME	data_studyconfirmdatetime;
    //std::string	data_studyidissuer
    //std::string	data_studycomments
    //std::string	data_specialneeds
    //std::string	data_performedprocedurestepuid
    int	data_performedprocedurestepstatus = 0;
    //std::string	data_performedprocedurestepdiscontinuationreason
    //std::string	data_sourceisotopename
    //std::string	data_radionuclidetotaldose
    MYSQL_TIME	data_radiopharmaceuticalstartdatetime;
    //std::string	data_radiopharmaceutical
    MYSQL_TIME	data_scheduledscantime;
    int	data_safetymodesar = 0;
    int	data_safetymodegradient = 0;
    //std::string	data_studyaccumulateddap
    int	data_studytype = 0;
    int	data_modifyflag = 0;
    int	data_mergeflag = 0;
    int	data_splitflag = 0;
    int	data_repeatflag = 0;
    //std::string	data_procedurestepid
    //std::string	data_procedurestepdescription
    //std::string	data_proceduresteplocation
    //std::string	data_premedication
    //std::string	data_performingphysician
    //std::string	data_operatorsname
    int	data_studyimportstatus = 0;
    //std::string	data_requestedprocedureid
    //std::string	data_folderpath
    //std::string	data_studyreserved0
    //std::string	data_studyreserved1
    MYSQL_TIME	data_updatetime;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 9: 	//studydate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_studydate;
            break;
        case 10: 	//studytime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_studytime;
            break;
        case 16: 	//studycompletiondate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_studycompletiondate;
            break;
        case 17: 	//studycompletiontime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_studycompletiontime;
            break;
        case 22: 	//pregnancystatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_pregnancystatus;
            break;
        case 32: 	//importsource int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_importsource;
            break;
        case 35: 	//studyconfirmstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_studyconfirmstatus;
            break;
        case 37: 	//studyconfirmdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_studyconfirmdatetime;
            break;
        case 42: 	//performedprocedurestepstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_performedprocedurestepstatus;
            break;
        case 46: 	//radiopharmaceuticalstartdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_radiopharmaceuticalstartdatetime;
            break;
        case 48: 	//scheduledscantime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_scheduledscantime;
            break;
        case 49: 	//safetymodesar int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_safetymodesar;
            break;
        case 50: 	//safetymodegradient int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_safetymodegradient;
            break;
        case 52: 	//studytype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_studytype;
            break;
        case 53: 	//modifyflag int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_modifyflag;
            break;
        case 54: 	//mergeflag int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mergeflag;
            break;
        case 55: 	//splitflag int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_splitflag;
            break;
        case 56: 	//repeatflag int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_repeatflag;
            break;
        case 63: 	//studyimportstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_studyimportstatus;
            break;
        case 68: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtStudy* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtStudy();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//sopinstanceuid varchar
                pDis->set_sopinstanceuid((char *)bind[i].buffer);
                break;
            case 2: 	//patientuid varchar
                pDis->set_patientuid((char *)bind[i].buffer);
                break;
            case 3: 	//patientage varchar
                pDis->set_patientage((char *)bind[i].buffer);
                break;
            case 4: 	//patientsize varchar
                pDis->set_patientsize((char *)bind[i].buffer);
                break;
            case 5: 	//patientweight varchar
                pDis->set_patientweight((char *)bind[i].buffer);
                break;
            case 6: 	//occupation varchar
                pDis->set_occupation((char *)bind[i].buffer);
                break;
            case 7: 	//additionalpatienthistory varchar
                pDis->set_additionalpatienthistory((char *)bind[i].buffer);
                break;
            case 8: 	//studyid varchar
                pDis->set_studyid((char *)bind[i].buffer);
                break;
            case 9: 	//studydate date
                {
                    DATE_BOOST studydate;
                    ConvertDateTime2Boost(data_studydate, &studydate);
                    pDis->set_studydate(studydate);
                }
                break;
            case 10: 	//studytime time
                {
                    TIME_BOOST studytime;
                    ConvertDateTime2Boost(data_studytime, &studytime);
                    pDis->set_studytime(studytime);
                }
                break;
            case 11: 	//modalitiesinstudy varchar
                pDis->set_modalitiesinstudy((char *)bind[i].buffer);
                break;
            case 12: 	//accessionnumber varchar
                pDis->set_accessionnumber((char *)bind[i].buffer);
                break;
            case 13: 	//studydescription varchar
                pDis->set_studydescription((char *)bind[i].buffer);
                break;
            case 14: 	//instanceavailability varchar
                pDis->set_instanceavailability((char *)bind[i].buffer);
                break;
            case 15: 	//admittingdiagnosesdescription varchar
                pDis->set_admittingdiagnosesdescription((char *)bind[i].buffer);
                break;
            case 16: 	//studycompletiondate date
                {
                    DATE_BOOST studycompletiondate;
                    ConvertDateTime2Boost(data_studycompletiondate, &studycompletiondate);
                    pDis->set_studycompletiondate(studycompletiondate);
                }
                break;
            case 17: 	//studycompletiontime time
                {
                    TIME_BOOST studycompletiontime;
                    ConvertDateTime2Boost(data_studycompletiontime, &studycompletiontime);
                    pDis->set_studycompletiontime(studycompletiontime);
                }
                break;
            case 18: 	//requestingphysician varchar
                pDis->set_requestingphysician((char *)bind[i].buffer);
                break;
            case 19: 	//requestedproceduredescription varchar
                pDis->set_requestedproceduredescription((char *)bind[i].buffer);
                break;
            case 20: 	//requestedcontrastagent varchar
                pDis->set_requestedcontrastagent((char *)bind[i].buffer);
                break;
            case 21: 	//referringphysicianname varchar
                pDis->set_referringphysicianname((char *)bind[i].buffer);
                break;
            case 22: 	//pregnancystatus int
                pDis->set_pregnancystatus(data_pregnancystatus);
                break;
            case 23: 	//smokingstatus varchar
                pDis->set_smokingstatus((char *)bind[i].buffer);
                break;
            case 24: 	//medicalalerts varchar
                pDis->set_medicalalerts((char *)bind[i].buffer);
                break;
            case 25: 	//patientinstitutionresidence varchar
                pDis->set_patientinstitutionresidence((char *)bind[i].buffer);
                break;
            case 26: 	//studystatusid varchar
                pDis->set_studystatusid((char *)bind[i].buffer);
                break;
            case 27: 	//admissionid varchar
                pDis->set_admissionid((char *)bind[i].buffer);
                break;
            case 28: 	//studyprintstatus varchar
                pDis->set_studyprintstatus((char *)bind[i].buffer);
                break;
            case 29: 	//studysendstatus varchar
                pDis->set_studysendstatus((char *)bind[i].buffer);
                break;
            case 30: 	//studystoredindvd varchar
                pDis->set_studystoredindvd((char *)bind[i].buffer);
                break;
            case 31: 	//studystoredinusb varchar
                pDis->set_studystoredinusb((char *)bind[i].buffer);
                break;
            case 32: 	//importsource int
                pDis->set_importsource(data_importsource);
                break;
            case 33: 	//studyflag varchar
                pDis->set_studyflag((char *)bind[i].buffer);
                break;
            case 34: 	//studyprotect varchar
                pDis->set_studyprotect((char *)bind[i].buffer);
                break;
            case 35: 	//studyconfirmstatus int
                pDis->set_studyconfirmstatus(data_studyconfirmstatus);
                break;
            case 36: 	//studyrejectreason varchar
                pDis->set_studyrejectreason((char *)bind[i].buffer);
                break;
            case 37: 	//studyconfirmdatetime datetime
                {
                    DATETIME_BOOST studyconfirmdatetime;
                    ConvertDateTime2Boost(data_studyconfirmdatetime, &studyconfirmdatetime);
                    pDis->set_studyconfirmdatetime(studyconfirmdatetime);
                }
                break;
            case 38: 	//studyidissuer varchar
                pDis->set_studyidissuer((char *)bind[i].buffer);
                break;
            case 39: 	//studycomments varchar
                pDis->set_studycomments((char *)bind[i].buffer);
                break;
            case 40: 	//specialneeds varchar
                pDis->set_specialneeds((char *)bind[i].buffer);
                break;
            case 41: 	//performedprocedurestepuid varchar
                pDis->set_performedprocedurestepuid((char *)bind[i].buffer);
                break;
            case 42: 	//performedprocedurestepstatus int
                pDis->set_performedprocedurestepstatus(data_performedprocedurestepstatus);
                break;
            case 43: 	//performedprocedurestepdiscontinuationreason varchar
                pDis->set_performedprocedurestepdiscontinuationreason((char *)bind[i].buffer);
                break;
            case 44: 	//sourceisotopename varchar
                pDis->set_sourceisotopename((char *)bind[i].buffer);
                break;
            case 45: 	//radionuclidetotaldose varchar
                pDis->set_radionuclidetotaldose((char *)bind[i].buffer);
                break;
            case 46: 	//radiopharmaceuticalstartdatetime datetime
                {
                    DATETIME_BOOST radiopharmaceuticalstartdatetime;
                    ConvertDateTime2Boost(data_radiopharmaceuticalstartdatetime, &radiopharmaceuticalstartdatetime);
                    pDis->set_radiopharmaceuticalstartdatetime(radiopharmaceuticalstartdatetime);
                }
                break;
            case 47: 	//radiopharmaceutical varchar
                pDis->set_radiopharmaceutical((char *)bind[i].buffer);
                break;
            case 48: 	//scheduledscantime datetime
                {
                    DATETIME_BOOST scheduledscantime;
                    ConvertDateTime2Boost(data_scheduledscantime, &scheduledscantime);
                    pDis->set_scheduledscantime(scheduledscantime);
                }
                break;
            case 49: 	//safetymodesar int
                pDis->set_safetymodesar(data_safetymodesar);
                break;
            case 50: 	//safetymodegradient int
                pDis->set_safetymodegradient(data_safetymodegradient);
                break;
            case 51: 	//studyaccumulateddap varchar
                pDis->set_studyaccumulateddap((char *)bind[i].buffer);
                break;
            case 52: 	//studytype int
                pDis->set_studytype(data_studytype);
                break;
            case 53: 	//modifyflag int
                pDis->set_modifyflag(data_modifyflag);
                break;
            case 54: 	//mergeflag int
                pDis->set_mergeflag(data_mergeflag);
                break;
            case 55: 	//splitflag int
                pDis->set_splitflag(data_splitflag);
                break;
            case 56: 	//repeatflag int
                pDis->set_repeatflag(data_repeatflag);
                break;
            case 57: 	//procedurestepid varchar
                pDis->set_procedurestepid((char *)bind[i].buffer);
                break;
            case 58: 	//procedurestepdescription varchar
                pDis->set_procedurestepdescription((char *)bind[i].buffer);
                break;
            case 59: 	//proceduresteplocation varchar
                pDis->set_proceduresteplocation((char *)bind[i].buffer);
                break;
            case 60: 	//premedication varchar
                pDis->set_premedication((char *)bind[i].buffer);
                break;
            case 61: 	//performingphysician varchar
                pDis->set_performingphysician((char *)bind[i].buffer);
                break;
            case 62: 	//operatorsname varchar
                pDis->set_operatorsname((char *)bind[i].buffer);
                break;
            case 63: 	//studyimportstatus int
                pDis->set_studyimportstatus(data_studyimportstatus);
                break;
            case 64: 	//requestedprocedureid varchar
                pDis->set_requestedprocedureid((char *)bind[i].buffer);
                break;
            case 65: 	//folderpath varchar
                pDis->set_folderpath((char *)bind[i].buffer);
                break;
            case 66: 	//studyreserved0 varchar
                pDis->set_studyreserved0((char *)bind[i].buffer);
                break;
            case 67: 	//studyreserved1 varchar
                pDis->set_studyreserved1((char *)bind[i].buffer);
                break;
            case 68: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE