//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_voisetting.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_voisetting.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtVoisettingImp::RtVoisettingImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_voiname(""),
    m_rolename(""),
    m_description(""),
    m_chndescription(""),
    m_planningrole(0),
    m_biologyrole(0),
    m_paired(0),
    m_calculatedose(false),
    m_matflag(false),
    m_mat(0.),
    m_coloreffect(""),
    m_spo(0),
    m_isdefault(false),
    m_updatetime(boost::date_time::not_a_date_time),
    m_site("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtVoisettingImp::RtVoisettingImp(const RtVoisettingImp& voisetting):
    m_uid(voisetting.get_uid()),
    m_voiname(voisetting.get_voiname()),
    m_rolename(voisetting.get_rolename()),
    m_description(voisetting.get_description()),
    m_chndescription(voisetting.get_chndescription()),
    m_planningrole(voisetting.get_planningrole()),
    m_biologyrole(voisetting.get_biologyrole()),
    m_paired(voisetting.get_paired()),
    m_calculatedose(voisetting.get_calculatedose()),
    m_matflag(voisetting.get_matflag()),
    m_mat(voisetting.get_mat()),
    m_coloreffect(voisetting.get_coloreffect()),
    m_spo(voisetting.get_spo()),
    m_isdefault(voisetting.get_isdefault()),
    m_updatetime(voisetting.get_updatetime()),
    m_site(voisetting.get_site())
{
}

RtVoisettingImp& RtVoisettingImp::operator=(const RtVoisettingImp& voisetting)
{
    if (this != &voisetting){
        this->m_uid = voisetting.get_uid();
        this->m_voiname = voisetting.get_voiname();
        this->m_rolename = voisetting.get_rolename();
        this->m_description = voisetting.get_description();
        this->m_chndescription = voisetting.get_chndescription();
        this->m_planningrole = voisetting.get_planningrole();
        this->m_biologyrole = voisetting.get_biologyrole();
        this->m_paired = voisetting.get_paired();
        this->m_calculatedose = voisetting.get_calculatedose();
        this->m_matflag = voisetting.get_matflag();
        this->m_mat = voisetting.get_mat();
        this->m_coloreffect = voisetting.get_coloreffect();
        this->m_spo = voisetting.get_spo();
        this->m_isdefault = voisetting.get_isdefault();
        this->m_updatetime = voisetting.get_updatetime();
        this->m_site = voisetting.get_site();
    }
    return *this;
}

RtVoisettingImp::~RtVoisettingImp()
{
}

void RtVoisettingImp::set_coloreffect(const std::string& coloreffect)
{
    if (coloreffect.size() != 9) return;

    m_coloreffect = coloreffect;
    char* end_ptr = nullptr;
    m_color[3] = (float)strtol(coloreffect.substr(1, 2).c_str(), &end_ptr, 16) / 255;
    m_color[0] = (float)strtol(coloreffect.substr(3, 2).c_str(), &end_ptr, 16) / 255;
    m_color[1] = (float)strtol(coloreffect.substr(5, 2).c_str(), &end_ptr, 16) / 255;
    m_color[2] = (float)strtol(coloreffect.substr(7, 2).c_str(), &end_ptr, 16) / 255;
}

void RtVoisettingImp::get_color(float* color)
{
    if (color == nullptr) return;
    memcpy(color, m_color, 4 * sizeof(float));
}


//////////////////////////////////////////////////////////////////////////
RtVoisetting::RtVoisetting(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtVoisettingImp(bGeneraterUid);
    set_flags(VOISETTING_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_VOISETTING_FIELD_NULL);
}

RtVoisetting::RtVoisetting(const RtVoisetting& voisetting): RtDatabaseObject(voisetting),
   m_pImp(new RtVoisettingImp(*voisetting.m_pImp))
{
}

RtVoisetting& RtVoisetting::operator = (const RtVoisetting& voisetting)
{
    if(this != &voisetting)
    {
        RtDatabaseObject::operator=(voisetting);
        *this->m_pImp = *voisetting.m_pImp;
    }
    return *this;
}

RtVoisetting::~RtVoisetting()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtVoisetting::get_uid() const { return m_pImp->get_uid();}
void RtVoisetting::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(VOISETTING_UID);
    setdirty_field(VOISETTING_UID, true);
}

//voiname
std::string RtVoisetting::get_voiname() const { return m_pImp->get_voiname();}
void RtVoisetting::set_voiname(const std::string& voiname)
{
    m_pImp->set_voiname(voiname);
    enable_field(VOISETTING_VOINAME);
    setdirty_field(VOISETTING_VOINAME, true);
}

//rolename
std::string RtVoisetting::get_rolename() const { return m_pImp->get_rolename();}
void RtVoisetting::set_rolename(const std::string& rolename)
{
    m_pImp->set_rolename(rolename);
    enable_field(VOISETTING_ROLENAME);
    setdirty_field(VOISETTING_ROLENAME, true);
}

//description
std::string RtVoisetting::get_description() const { return m_pImp->get_description();}
void RtVoisetting::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(VOISETTING_DESCRIPTION);
    setdirty_field(VOISETTING_DESCRIPTION, true);
}

//chndescription
std::string RtVoisetting::get_chndescription() const { return m_pImp->get_chndescription();}
void RtVoisetting::set_chndescription(const std::string& chndescription)
{
    m_pImp->set_chndescription(chndescription);
    enable_field(VOISETTING_CHNDESCRIPTION);
    setdirty_field(VOISETTING_CHNDESCRIPTION, true);
}

//planningrole
int RtVoisetting::get_planningrole() const { return m_pImp->get_planningrole();}
void RtVoisetting::set_planningrole(const int& planningrole)
{
    m_pImp->set_planningrole(planningrole);
    enable_field(VOISETTING_PLANNINGROLE);
    setdirty_field(VOISETTING_PLANNINGROLE, true);
}

//biologyrole
int RtVoisetting::get_biologyrole() const { return m_pImp->get_biologyrole();}
void RtVoisetting::set_biologyrole(const int& biologyrole)
{
    m_pImp->set_biologyrole(biologyrole);
    enable_field(VOISETTING_BIOLOGYROLE);
    setdirty_field(VOISETTING_BIOLOGYROLE, true);
}

//paired
int RtVoisetting::get_paired() const { return m_pImp->get_paired();}
void RtVoisetting::set_paired(const int& paired)
{
    m_pImp->set_paired(paired);
    enable_field(VOISETTING_PAIRED);
    setdirty_field(VOISETTING_PAIRED, true);
}

//calculatedose
bool RtVoisetting::get_calculatedose() const { return m_pImp->get_calculatedose();}
void RtVoisetting::set_calculatedose(const bool& calculatedose)
{
    m_pImp->set_calculatedose(calculatedose);
    enable_field(VOISETTING_CALCULATEDOSE);
    setdirty_field(VOISETTING_CALCULATEDOSE, true);
}

//matflag
bool RtVoisetting::get_matflag() const { return m_pImp->get_matflag();}
void RtVoisetting::set_matflag(const bool& matflag)
{
    m_pImp->set_matflag(matflag);
    enable_field(VOISETTING_MATFLAG);
    setdirty_field(VOISETTING_MATFLAG, true);
}

//mat
double RtVoisetting::get_mat() const { return m_pImp->get_mat();}
void RtVoisetting::set_mat(const double& mat)
{
    m_pImp->set_mat(mat);
    enable_field(VOISETTING_MAT);
    setdirty_field(VOISETTING_MAT, true);
}

//coloreffect
std::string RtVoisetting::get_coloreffect() const { return m_pImp->get_coloreffect();}
void RtVoisetting::set_coloreffect(const std::string& coloreffect)
{
    m_pImp->set_coloreffect(coloreffect);
    enable_field(VOISETTING_COLOREFFECT);
    setdirty_field(VOISETTING_COLOREFFECT, true);
}
void RtVoisetting::get_color(float* color) { m_pImp->get_color(color); }

//spo
int RtVoisetting::get_spo() const { return m_pImp->get_spo();}
void RtVoisetting::set_spo(const int& spo)
{
    m_pImp->set_spo(spo);
    enable_field(VOISETTING_SPO);
    setdirty_field(VOISETTING_SPO, true);
}

//isdefault
bool RtVoisetting::get_isdefault() const { return m_pImp->get_isdefault();}
void RtVoisetting::set_isdefault(const bool& isdefault)
{
    m_pImp->set_isdefault(isdefault);
    enable_field(VOISETTING_ISDEFAULT);
    setdirty_field(VOISETTING_ISDEFAULT, true);
}

//updatetime
DATETIME_BOOST RtVoisetting::get_updatetime() const { return m_pImp->get_updatetime();}
void RtVoisetting::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(VOISETTING_UPDATETIME);
    setdirty_field(VOISETTING_UPDATETIME, true);
}

//site
std::string RtVoisetting::get_site() const { return m_pImp->get_site();}
void RtVoisetting::set_site(const std::string& site)
{
    m_pImp->set_site(site);
    enable_field(VOISETTING_SITE);
    setdirty_field(VOISETTING_SITE, true);
}

RT_TPS_DATABASE_END_NAMESPACE