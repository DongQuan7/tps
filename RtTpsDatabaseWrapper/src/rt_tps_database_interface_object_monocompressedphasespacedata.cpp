//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_monocompressedphasespacedata.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_monocompressedphasespacedata.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtMonocompressedphasespacedataImp::RtMonocompressedphasespacedataImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_injectelectronenergy(0.f),
    m_phspdistancefromtarget(0.f),
    m_filepath(""),
    m_phspfilepath(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtMonocompressedphasespacedataImp::RtMonocompressedphasespacedataImp(const RtMonocompressedphasespacedataImp& monocompressedphasespacedata):
    m_uid(monocompressedphasespacedata.get_uid()),
    m_injectelectronenergy(monocompressedphasespacedata.get_injectelectronenergy()),
    m_phspdistancefromtarget(monocompressedphasespacedata.get_phspdistancefromtarget()),
    m_filepath(monocompressedphasespacedata.get_filepath()),
    m_phspfilepath(monocompressedphasespacedata.get_phspfilepath()),
    m_updatetime(monocompressedphasespacedata.get_updatetime())
{
}

RtMonocompressedphasespacedataImp& RtMonocompressedphasespacedataImp::operator=(const RtMonocompressedphasespacedataImp& monocompressedphasespacedata)
{
    if (this != &monocompressedphasespacedata){
        this->m_uid = monocompressedphasespacedata.get_uid();
        this->m_injectelectronenergy = monocompressedphasespacedata.get_injectelectronenergy();
        this->m_phspdistancefromtarget = monocompressedphasespacedata.get_phspdistancefromtarget();
        this->m_filepath = monocompressedphasespacedata.get_filepath();
        this->m_phspfilepath = monocompressedphasespacedata.get_phspfilepath();
        this->m_updatetime = monocompressedphasespacedata.get_updatetime();
    }
    return *this;
}

RtMonocompressedphasespacedataImp::~RtMonocompressedphasespacedataImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtMonocompressedphasespacedata::RtMonocompressedphasespacedata(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtMonocompressedphasespacedataImp(bGeneraterUid);
    set_flags(MONOCOMPRESSEDPHASESPACEDATA_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_MONOCOMPRESSEDPHASESPACEDATA_FIELD_NULL);
}

RtMonocompressedphasespacedata::RtMonocompressedphasespacedata(const RtMonocompressedphasespacedata& monocompressedphasespacedata): RtDatabaseObject(monocompressedphasespacedata),
   m_pImp(new RtMonocompressedphasespacedataImp(*monocompressedphasespacedata.m_pImp))
{
}

RtMonocompressedphasespacedata& RtMonocompressedphasespacedata::operator = (const RtMonocompressedphasespacedata& monocompressedphasespacedata)
{
    if(this != &monocompressedphasespacedata)
    {
        RtDatabaseObject::operator=(monocompressedphasespacedata);
        *this->m_pImp = *monocompressedphasespacedata.m_pImp;
    }
    return *this;
}

RtMonocompressedphasespacedata::~RtMonocompressedphasespacedata()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtMonocompressedphasespacedata::get_uid() const { return m_pImp->get_uid();}
void RtMonocompressedphasespacedata::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_UID);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_UID, true);
}

//injectelectronenergy
float RtMonocompressedphasespacedata::get_injectelectronenergy() const { return m_pImp->get_injectelectronenergy();}
void RtMonocompressedphasespacedata::set_injectelectronenergy(const float& injectelectronenergy)
{
    m_pImp->set_injectelectronenergy(injectelectronenergy);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_INJECTELECTRONENERGY);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_INJECTELECTRONENERGY, true);
}

//phspdistancefromtarget
float RtMonocompressedphasespacedata::get_phspdistancefromtarget() const { return m_pImp->get_phspdistancefromtarget();}
void RtMonocompressedphasespacedata::set_phspdistancefromtarget(const float& phspdistancefromtarget)
{
    m_pImp->set_phspdistancefromtarget(phspdistancefromtarget);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_PHSPDISTANCEFROMTARGET);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_PHSPDISTANCEFROMTARGET, true);
}

//filepath
std::string RtMonocompressedphasespacedata::get_filepath() const { return m_pImp->get_filepath();}
void RtMonocompressedphasespacedata::set_filepath(const std::string& filepath)
{
    m_pImp->set_filepath(filepath);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_FILEPATH);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_FILEPATH, true);
}

//phspfilepath
std::string RtMonocompressedphasespacedata::get_phspfilepath() const { return m_pImp->get_phspfilepath();}
void RtMonocompressedphasespacedata::set_phspfilepath(const std::string& phspfilepath)
{
    m_pImp->set_phspfilepath(phspfilepath);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_PHSPFILEPATH);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_PHSPFILEPATH, true);
}

//updatetime
DATETIME_BOOST RtMonocompressedphasespacedata::get_updatetime() const { return m_pImp->get_updatetime();}
void RtMonocompressedphasespacedata::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(MONOCOMPRESSEDPHASESPACEDATA_UPDATETIME);
    setdirty_field(MONOCOMPRESSEDPHASESPACEDATA_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE