//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_mcphocommissionedunit.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_mcphocommissionedunit.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtMcphocommissionedunit& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //89 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < MCPHOCOMMISSIONEDUNIT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_MCPHOCOMMISSIONEDUNIT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsmcphocommissionedunit SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < MCPHOCOMMISSIONEDUNIT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_MCPHOCOMMISSIONEDUNIT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsmcphocommissionedunit (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_commissionedunituid = "";
    float		data_mcphoxjawupposition = 0.f;
    float		data_mcphoxjawthickness = 0.f;
    float		data_mcphoyjawupposition = 0.f;
    float		data_mcphoyjawthickness = 0.f;
    float		data_mcphomlccenterposition = 0.f;
    float		data_mcphomlcthickness = 0.f;
    float		data_mcphomlctgwidth = 0.f;
    float		data_mcphomlcairgapwidth = 0.f;
    float		data_mcphomlleafendradius = 0.f;
    float		data_mcphomufactor = 0.f;
    std::string	data_mcpholist = "";
    float		data_phspdistancefromtarget = 0.f;
    float		data_mcphonorm10x10 = 0.f;
    std::string	data_mcphoabscorrectionfactor = "";
    std::string	data_mcphoenergy = "";
    std::string	data_phoflulist = "";
    std::string	data_eneoffaxisradiusveclist = "";
    std::string	data_eneoffaxisenergyvec = "";
    std::string	data_eneoffaxisvaluelist = "";
    int			data_mcphoon = 0;
    float		data_mcphodm = 0.f;
    float		data_mcphoc1 = 0.f;
    float		data_mcphoc2 = 0.f;
    float		data_mcphoc3 = 0.f;
    float		data_mcphoffs10 = 0.f;
    float		data_mcphok = 0.f;
    float		data_mcphoa = 0.f;
    float		data_mcphodf = 0.f;
    float		data_mcphosf = 0.f;
    int			data_mlcleafshapenum = 0;
    std::string	data_mlcleafyleafposlist = "";
    std::string	data_mlcleafthetalist = "";
    std::string	data_mlcleafshapeidxlist = "";
    float		data_meanleaforishift = 0.f;
    float		data_fringe = 0.f;
    std::string	data_mcpholeafmaplist = "";
    std::string	data_mcphoparam1 = "";
    std::string	data_mcphoparam2 = "";
    std::string	data_mcphoparam3 = "";
    std::string	data_mcphoparam4 = "";
    std::string	data_mcphoparam5 = "";
    std::string	data_mcphoparam6 = "";
    std::string	data_mcphoparam7 = "";
    std::string	data_mcphoparam8 = "";
    std::string	data_mcphoparam9 = "";
    std::string	data_mcphoparam10 = "";
    float		data_mcprimaryenergystart = 0.f;
    float		data_mcprimaryenergyend = 0.f;
    int			data_mcprimaryenergybin = 0;
    float		data_mcprimaryenergyrestart = 0.f;
    float		data_mcsecondaryenergystart = 0.f;
    float		data_mcsecondaryenergyend = 0.f;
    int			data_mcsecondaryenergybin = 0;
    float		data_mcsecondaryenergyrestart = 0.f;
    float		data_mcelectronenergy = 0.f;
    long long			data_mccommiparticlenumber = 0;
    std::string	data_mcprimaryenergylist = "";
    std::string	data_mcprimaryweightlist = "";
    std::string	data_mcsecondaryenergylist = "";
    std::string	data_mcsecondaryweightlist = "";
    std::string	data_mcelecenergylist = "";
    std::string	data_mcelecweightlist = "";
    float		data_mcprimaryflatfilterdist = 0.f;
    float		data_mcprimaryjawdistance = 0.f;
    float		data_mcsourcesigmaprimary = 0.f;
    float		data_mcsourcesigmasecondary = 0.f;
    bool		data_mcprimarysoftening = false;
    float		data_mcsofteningtunningf = 0.f;
    bool		data_mcscatteringcompton = false;
    int			data_mcsecondarysourcetype = 0;
    std::string	data_mcsecondarysourcepara = "";
    std::string	data_mceleccorfieldsize = "";
    std::string	data_mcphotonfluence = "";
    float		data_mcrectanglescacor = 0.f;
    float		data_mclargefieldtailcor = 0.f;
    float		data_mcmlcleakage = 0.f;
    bool		data_mcgaussianblurswitch = false;
    float		data_mcgaussiansigmax = 0.f;
    float		data_mcgaussiansigmay = 0.f;
    std::string	data_crc = "";
    MYSQL_TIME	data_updatetime;
    float		data_mcjawleakage = 0.f;
    float		data_mctonguewidth = 0.f;
    float		data_mcgroovewidth = 0.f;
    float		data_mcleaftipwidth = 0.f;
    float		data_mctransmission = 0.f;
    std::string	data_reserve = "";

    unsigned int iCount = 0;
    for (unsigned int i(0); i < MCPHOCOMMISSIONEDUNIT_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//commissionedunituid varchar
            {
                data_commissionedunituid = src.get_commissionedunituid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_commissionedunituid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_commissionedunituid.size();
            }
            break;
        case 2: 	//mcphoxjawupposition float
            {
                data_mcphoxjawupposition = src.get_mcphoxjawupposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoxjawupposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 3: 	//mcphoxjawthickness float
            {
                data_mcphoxjawthickness = src.get_mcphoxjawthickness();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoxjawthickness;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 4: 	//mcphoyjawupposition float
            {
                data_mcphoyjawupposition = src.get_mcphoyjawupposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoyjawupposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 5: 	//mcphoyjawthickness float
            {
                data_mcphoyjawthickness = src.get_mcphoyjawthickness();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoyjawthickness;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 6: 	//mcphomlccenterposition float
            {
                data_mcphomlccenterposition = src.get_mcphomlccenterposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomlccenterposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 7: 	//mcphomlcthickness float
            {
                data_mcphomlcthickness = src.get_mcphomlcthickness();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomlcthickness;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 8: 	//mcphomlctgwidth float
            {
                data_mcphomlctgwidth = src.get_mcphomlctgwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomlctgwidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 9: 	//mcphomlcairgapwidth float
            {
                data_mcphomlcairgapwidth = src.get_mcphomlcairgapwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomlcairgapwidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 10: 	//mcphomlleafendradius float
            {
                data_mcphomlleafendradius = src.get_mcphomlleafendradius();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomlleafendradius;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 11: 	//mcphomufactor float
            {
                data_mcphomufactor = src.get_mcphomufactor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphomufactor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 12: 	//mcpholist varchar
            {
                data_mcpholist = src.get_mcpholist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcpholist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcpholist.size();
            }
            break;
        case 13: 	//phspdistancefromtarget float
            {
                data_phspdistancefromtarget = src.get_phspdistancefromtarget();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_phspdistancefromtarget;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 14: 	//mcphonorm10x10 float
            {
                data_mcphonorm10x10 = src.get_mcphonorm10x10();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphonorm10x10;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 15: 	//mcphoabscorrectionfactor varchar
            {
                data_mcphoabscorrectionfactor = src.get_mcphoabscorrectionfactor();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoabscorrectionfactor.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoabscorrectionfactor.size();
            }
            break;
        case 16: 	//mcphoenergy varchar
            {
                data_mcphoenergy = src.get_mcphoenergy();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoenergy.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoenergy.size();
            }
            break;
        case 17: 	//phoflulist varchar
            {
                data_phoflulist = src.get_phoflulist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_phoflulist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_phoflulist.size();
            }
            break;
        case 18: 	//eneoffaxisradiusveclist varchar
            {
                data_eneoffaxisradiusveclist = src.get_eneoffaxisradiusveclist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_eneoffaxisradiusveclist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_eneoffaxisradiusveclist.size();
            }
            break;
        case 19: 	//eneoffaxisenergyvec varchar
            {
                data_eneoffaxisenergyvec = src.get_eneoffaxisenergyvec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_eneoffaxisenergyvec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_eneoffaxisenergyvec.size();
            }
            break;
        case 20: 	//eneoffaxisvaluelist varchar
            {
                data_eneoffaxisvaluelist = src.get_eneoffaxisvaluelist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_eneoffaxisvaluelist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_eneoffaxisvaluelist.size();
            }
            break;
        case 21: 	//mcphoon int
            {
                data_mcphoon = src.get_mcphoon();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mcphoon;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 22: 	//mcphodm float
            {
                data_mcphodm = src.get_mcphodm();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphodm;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 23: 	//mcphoc1 float
            {
                data_mcphoc1 = src.get_mcphoc1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoc1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 24: 	//mcphoc2 float
            {
                data_mcphoc2 = src.get_mcphoc2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoc2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 25: 	//mcphoc3 float
            {
                data_mcphoc3 = src.get_mcphoc3();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoc3;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 26: 	//mcphoffs10 float
            {
                data_mcphoffs10 = src.get_mcphoffs10();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoffs10;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 27: 	//mcphok float
            {
                data_mcphok = src.get_mcphok();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphok;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 28: 	//mcphoa float
            {
                data_mcphoa = src.get_mcphoa();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphoa;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 29: 	//mcphodf float
            {
                data_mcphodf = src.get_mcphodf();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphodf;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 30: 	//mcphosf float
            {
                data_mcphosf = src.get_mcphosf();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcphosf;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 31: 	//mlcleafshapenum int
            {
                data_mlcleafshapenum = src.get_mlcleafshapenum();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mlcleafshapenum;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 32: 	//mlcleafyleafposlist varchar
            {
                data_mlcleafyleafposlist = src.get_mlcleafyleafposlist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mlcleafyleafposlist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mlcleafyleafposlist.size();
            }
            break;
        case 33: 	//mlcleafthetalist varchar
            {
                data_mlcleafthetalist = src.get_mlcleafthetalist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mlcleafthetalist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mlcleafthetalist.size();
            }
            break;
        case 34: 	//mlcleafshapeidxlist varchar
            {
                data_mlcleafshapeidxlist = src.get_mlcleafshapeidxlist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mlcleafshapeidxlist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mlcleafshapeidxlist.size();
            }
            break;
        case 35: 	//meanleaforishift float
            {
                data_meanleaforishift = src.get_meanleaforishift();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_meanleaforishift;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 36: 	//fringe float
            {
                data_fringe = src.get_fringe();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_fringe;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 37: 	//mcpholeafmaplist varchar
            {
                data_mcpholeafmaplist = src.get_mcpholeafmaplist();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcpholeafmaplist.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcpholeafmaplist.size();
            }
            break;
        case 38: 	//mcphoparam1 varchar
            {
                data_mcphoparam1 = src.get_mcphoparam1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam1.size();
            }
            break;
        case 39: 	//mcphoparam2 varchar
            {
                data_mcphoparam2 = src.get_mcphoparam2();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam2.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam2.size();
            }
            break;
        case 40: 	//mcphoparam3 varchar
            {
                data_mcphoparam3 = src.get_mcphoparam3();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam3.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam3.size();
            }
            break;
        case 41: 	//mcphoparam4 varchar
            {
                data_mcphoparam4 = src.get_mcphoparam4();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam4.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam4.size();
            }
            break;
        case 42: 	//mcphoparam5 varchar
            {
                data_mcphoparam5 = src.get_mcphoparam5();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam5.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam5.size();
            }
            break;
        case 43: 	//mcphoparam6 varchar
            {
                data_mcphoparam6 = src.get_mcphoparam6();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam6.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam6.size();
            }
            break;
        case 44: 	//mcphoparam7 varchar
            {
                data_mcphoparam7 = src.get_mcphoparam7();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam7.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam7.size();
            }
            break;
        case 45: 	//mcphoparam8 varchar
            {
                data_mcphoparam8 = src.get_mcphoparam8();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam8.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam8.size();
            }
            break;
        case 46: 	//mcphoparam9 varchar
            {
                data_mcphoparam9 = src.get_mcphoparam9();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam9.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam9.size();
            }
            break;
        case 47: 	//mcphoparam10 varchar
            {
                data_mcphoparam10 = src.get_mcphoparam10();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mcphoparam10.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mcphoparam10.size();
            }
            break;
        case 48: 	//mcprimaryenergystart float
            {
                data_mcprimaryenergystart = src.get_mcprimaryenergystart();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcprimaryenergystart;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 49: 	//mcprimaryenergyend float
            {
                data_mcprimaryenergyend = src.get_mcprimaryenergyend();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcprimaryenergyend;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 50: 	//mcprimaryenergybin int
            {
                data_mcprimaryenergybin = src.get_mcprimaryenergybin();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mcprimaryenergybin;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 51: 	//mcprimaryenergyrestart float
            {
                data_mcprimaryenergyrestart = src.get_mcprimaryenergyrestart();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcprimaryenergyrestart;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 52: 	//mcsecondaryenergystart float
            {
                data_mcsecondaryenergystart = src.get_mcsecondaryenergystart();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsecondaryenergystart;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 53: 	//mcsecondaryenergyend float
            {
                data_mcsecondaryenergyend = src.get_mcsecondaryenergyend();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsecondaryenergyend;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 54: 	//mcsecondaryenergybin int
            {
                data_mcsecondaryenergybin = src.get_mcsecondaryenergybin();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mcsecondaryenergybin;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 55: 	//mcsecondaryenergyrestart float
            {
                data_mcsecondaryenergyrestart = src.get_mcsecondaryenergyrestart();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsecondaryenergyrestart;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 56: 	//mcelectronenergy float
            {
                data_mcelectronenergy = src.get_mcelectronenergy();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcelectronenergy;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 57: 	//mccommiparticlenumber bigint
            {
                data_mccommiparticlenumber = src.get_mccommiparticlenumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONGLONG;
                bind[iCount].buffer = (void*)&data_mccommiparticlenumber;
                bind[iCount].buffer_length = sizeof(long long);
            }
            break;
        case 58: 	//mcprimaryenergylist blob
            {
                data_mcprimaryenergylist = src.get_mcprimaryenergylist();
                if(data_mcprimaryenergylist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcprimaryenergylist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcprimaryenergylist.size();
            }
            break;
        case 59: 	//mcprimaryweightlist blob
            {
                data_mcprimaryweightlist = src.get_mcprimaryweightlist();
                if(data_mcprimaryweightlist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcprimaryweightlist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcprimaryweightlist.size();
            }
            break;
        case 60: 	//mcsecondaryenergylist blob
            {
                data_mcsecondaryenergylist = src.get_mcsecondaryenergylist();
                if(data_mcsecondaryenergylist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcsecondaryenergylist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcsecondaryenergylist.size();
            }
            break;
        case 61: 	//mcsecondaryweightlist blob
            {
                data_mcsecondaryweightlist = src.get_mcsecondaryweightlist();
                if(data_mcsecondaryweightlist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcsecondaryweightlist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcsecondaryweightlist.size();
            }
            break;
        case 62: 	//mcelecenergylist blob
            {
                data_mcelecenergylist = src.get_mcelecenergylist();
                if(data_mcelecenergylist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcelecenergylist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcelecenergylist.size();
            }
            break;
        case 63: 	//mcelecweightlist blob
            {
                data_mcelecweightlist = src.get_mcelecweightlist();
                if(data_mcelecweightlist.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcelecweightlist.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcelecweightlist.size();
            }
            break;
        case 64: 	//mcprimaryflatfilterdist float
            {
                data_mcprimaryflatfilterdist = src.get_mcprimaryflatfilterdist();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcprimaryflatfilterdist;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 65: 	//mcprimaryjawdistance float
            {
                data_mcprimaryjawdistance = src.get_mcprimaryjawdistance();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcprimaryjawdistance;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 66: 	//mcsourcesigmaprimary float
            {
                data_mcsourcesigmaprimary = src.get_mcsourcesigmaprimary();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsourcesigmaprimary;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 67: 	//mcsourcesigmasecondary float
            {
                data_mcsourcesigmasecondary = src.get_mcsourcesigmasecondary();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsourcesigmasecondary;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 68: 	//mcprimarysoftening tinyint
            {
                data_mcprimarysoftening = src.get_mcprimarysoftening();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_mcprimarysoftening;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 69: 	//mcsofteningtunningf float
            {
                data_mcsofteningtunningf = src.get_mcsofteningtunningf();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcsofteningtunningf;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 70: 	//mcscatteringcompton tinyint
            {
                data_mcscatteringcompton = src.get_mcscatteringcompton();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_mcscatteringcompton;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 71: 	//mcsecondarysourcetype int
            {
                data_mcsecondarysourcetype = src.get_mcsecondarysourcetype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_mcsecondarysourcetype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 72: 	//mcsecondarysourcepara blob
            {
                data_mcsecondarysourcepara = src.get_mcsecondarysourcepara();
                if(data_mcsecondarysourcepara.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcsecondarysourcepara.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcsecondarysourcepara.size();
            }
            break;
        case 73: 	//mceleccorfieldsize blob
            {
                data_mceleccorfieldsize = src.get_mceleccorfieldsize();
                if(data_mceleccorfieldsize.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mceleccorfieldsize.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mceleccorfieldsize.size();
            }
            break;
        case 74: 	//mcphotonfluence blob
            {
                data_mcphotonfluence = src.get_mcphotonfluence();
                if(data_mcphotonfluence.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_mcphotonfluence.c_str();
                bind[iCount].buffer_length= (unsigned long)data_mcphotonfluence.size();
            }
            break;
        case 75: 	//mcrectanglescacor float
            {
                data_mcrectanglescacor = src.get_mcrectanglescacor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcrectanglescacor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 76: 	//mclargefieldtailcor float
            {
                data_mclargefieldtailcor = src.get_mclargefieldtailcor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mclargefieldtailcor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 77: 	//mcmlcleakage float
            {
                data_mcmlcleakage = src.get_mcmlcleakage();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcmlcleakage;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 78: 	//mcgaussianblurswitch tinyint
            {
                data_mcgaussianblurswitch = src.get_mcgaussianblurswitch();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_mcgaussianblurswitch;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 79: 	//mcgaussiansigmax float
            {
                data_mcgaussiansigmax = src.get_mcgaussiansigmax();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcgaussiansigmax;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 80: 	//mcgaussiansigmay float
            {
                data_mcgaussiansigmay = src.get_mcgaussiansigmay();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcgaussiansigmay;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 81: 	//crc varchar
            {
                data_crc = src.get_crc();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_crc.c_str();
                bind[iCount].buffer_length = (unsigned long)data_crc.size();
            }
            break;
        case 82: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 83: 	//mcjawleakage float
            {
                data_mcjawleakage = src.get_mcjawleakage();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcjawleakage;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 84: 	//mctonguewidth float
            {
                data_mctonguewidth = src.get_mctonguewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mctonguewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 85: 	//mcgroovewidth float
            {
                data_mcgroovewidth = src.get_mcgroovewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcgroovewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 86: 	//mcleaftipwidth float
            {
                data_mcleaftipwidth = src.get_mcleaftipwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mcleaftipwidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 87: 	//mctransmission float
            {
                data_mctransmission = src.get_mctransmission();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mctransmission;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 88: 	//reserve varchar
            {
                data_reserve = src.get_reserve();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_reserve.c_str();
                bind[iCount].buffer_length = (unsigned long)data_reserve.size();
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtMcphocommissionedunit*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtMcphocommissionedunit*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsmcphocommissionedunit    89 parameters
    const int field_num = MCPHOCOMMISSIONEDUNIT_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 0;
    MAX_LENGTH[3] = 0;
    MAX_LENGTH[4] = 0;
    MAX_LENGTH[5] = 0;
    MAX_LENGTH[6] = 0;
    MAX_LENGTH[7] = 0;
    MAX_LENGTH[8] = 0;
    MAX_LENGTH[9] = 0;
    MAX_LENGTH[10] = 0;
    MAX_LENGTH[11] = 0;
    MAX_LENGTH[12] = 1024;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 0;
    MAX_LENGTH[15] = 4096;
    MAX_LENGTH[16] = 4096;
    MAX_LENGTH[17] = 1024;
    MAX_LENGTH[18] = 1024;
    MAX_LENGTH[19] = 512;
    MAX_LENGTH[20] = 1024;
    MAX_LENGTH[21] = 0;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 0;
    MAX_LENGTH[24] = 0;
    MAX_LENGTH[25] = 0;
    MAX_LENGTH[26] = 0;
    MAX_LENGTH[27] = 0;
    MAX_LENGTH[28] = 0;
    MAX_LENGTH[29] = 0;
    MAX_LENGTH[30] = 0;
    MAX_LENGTH[31] = 0;
    MAX_LENGTH[32] = 1024;
    MAX_LENGTH[33] = 1024;
    MAX_LENGTH[34] = 1024;
    MAX_LENGTH[35] = 0;
    MAX_LENGTH[36] = 0;
    MAX_LENGTH[37] = 1024;
    MAX_LENGTH[38] = 256;
    MAX_LENGTH[39] = 256;
    MAX_LENGTH[40] = 256;
    MAX_LENGTH[41] = 256;
    MAX_LENGTH[42] = 256;
    MAX_LENGTH[43] = 256;
    MAX_LENGTH[44] = 256;
    MAX_LENGTH[45] = 256;
    MAX_LENGTH[46] = 256;
    MAX_LENGTH[47] = 256;
    MAX_LENGTH[48] = 0;
    MAX_LENGTH[49] = 0;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 0;
    MAX_LENGTH[52] = 0;
    MAX_LENGTH[53] = 0;
    MAX_LENGTH[54] = 0;
    MAX_LENGTH[55] = 0;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 0;
    MAX_LENGTH[58] = 65535;
    MAX_LENGTH[59] = 65535;
    MAX_LENGTH[60] = 65535;
    MAX_LENGTH[61] = 65535;
    MAX_LENGTH[62] = 65535;
    MAX_LENGTH[63] = 65535;
    MAX_LENGTH[64] = 0;
    MAX_LENGTH[65] = 0;
    MAX_LENGTH[66] = 0;
    MAX_LENGTH[67] = 0;
    MAX_LENGTH[68] = 0;
    MAX_LENGTH[69] = 0;
    MAX_LENGTH[70] = 0;
    MAX_LENGTH[71] = 0;
    MAX_LENGTH[72] = 65535;
    MAX_LENGTH[73] = 65535;
    MAX_LENGTH[74] = 65535;
    MAX_LENGTH[75] = 0;
    MAX_LENGTH[76] = 0;
    MAX_LENGTH[77] = 0;
    MAX_LENGTH[78] = 0;
    MAX_LENGTH[79] = 0;
    MAX_LENGTH[80] = 0;
    MAX_LENGTH[81] = 64;
    MAX_LENGTH[82] = 0;
    MAX_LENGTH[83] = 0;
    MAX_LENGTH[84] = 0;
    MAX_LENGTH[85] = 0;
    MAX_LENGTH[86] = 0;
    MAX_LENGTH[87] = 0;
    MAX_LENGTH[88] = 1024;

    //std::string	data_uid
    //std::string	data_commissionedunituid
    float	data_mcphoxjawupposition = 0.f;
    float	data_mcphoxjawthickness = 0.f;
    float	data_mcphoyjawupposition = 0.f;
    float	data_mcphoyjawthickness = 0.f;
    float	data_mcphomlccenterposition = 0.f;
    float	data_mcphomlcthickness = 0.f;
    float	data_mcphomlctgwidth = 0.f;
    float	data_mcphomlcairgapwidth = 0.f;
    float	data_mcphomlleafendradius = 0.f;
    float	data_mcphomufactor = 0.f;
    //std::string	data_mcpholist
    float	data_phspdistancefromtarget = 0.f;
    float	data_mcphonorm10x10 = 0.f;
    //std::string	data_mcphoabscorrectionfactor
    //std::string	data_mcphoenergy
    //std::string	data_phoflulist
    //std::string	data_eneoffaxisradiusveclist
    //std::string	data_eneoffaxisenergyvec
    //std::string	data_eneoffaxisvaluelist
    int	data_mcphoon = 0;
    float	data_mcphodm = 0.f;
    float	data_mcphoc1 = 0.f;
    float	data_mcphoc2 = 0.f;
    float	data_mcphoc3 = 0.f;
    float	data_mcphoffs10 = 0.f;
    float	data_mcphok = 0.f;
    float	data_mcphoa = 0.f;
    float	data_mcphodf = 0.f;
    float	data_mcphosf = 0.f;
    int	data_mlcleafshapenum = 0;
    //std::string	data_mlcleafyleafposlist
    //std::string	data_mlcleafthetalist
    //std::string	data_mlcleafshapeidxlist
    float	data_meanleaforishift = 0.f;
    float	data_fringe = 0.f;
    //std::string	data_mcpholeafmaplist
    //std::string	data_mcphoparam1
    //std::string	data_mcphoparam2
    //std::string	data_mcphoparam3
    //std::string	data_mcphoparam4
    //std::string	data_mcphoparam5
    //std::string	data_mcphoparam6
    //std::string	data_mcphoparam7
    //std::string	data_mcphoparam8
    //std::string	data_mcphoparam9
    //std::string	data_mcphoparam10
    float	data_mcprimaryenergystart = 0.f;
    float	data_mcprimaryenergyend = 0.f;
    int	data_mcprimaryenergybin = 0;
    float	data_mcprimaryenergyrestart = 0.f;
    float	data_mcsecondaryenergystart = 0.f;
    float	data_mcsecondaryenergyend = 0.f;
    int	data_mcsecondaryenergybin = 0;
    float	data_mcsecondaryenergyrestart = 0.f;
    float	data_mcelectronenergy = 0.f;
    long long	data_mccommiparticlenumber = 0;
    //std::string	data_mcprimaryenergylist;
    //std::string	data_mcprimaryweightlist;
    //std::string	data_mcsecondaryenergylist;
    //std::string	data_mcsecondaryweightlist;
    //std::string	data_mcelecenergylist;
    //std::string	data_mcelecweightlist;
    float	data_mcprimaryflatfilterdist = 0.f;
    float	data_mcprimaryjawdistance = 0.f;
    float	data_mcsourcesigmaprimary = 0.f;
    float	data_mcsourcesigmasecondary = 0.f;
    bool	data_mcprimarysoftening = false;
    float	data_mcsofteningtunningf = 0.f;
    bool	data_mcscatteringcompton = false;
    int	data_mcsecondarysourcetype = 0;
    //std::string	data_mcsecondarysourcepara;
    //std::string	data_mceleccorfieldsize;
    //std::string	data_mcphotonfluence;
    float	data_mcrectanglescacor = 0.f;
    float	data_mclargefieldtailcor = 0.f;
    float	data_mcmlcleakage = 0.f;
    bool	data_mcgaussianblurswitch = false;
    float	data_mcgaussiansigmax = 0.f;
    float	data_mcgaussiansigmay = 0.f;
    //std::string	data_crc
    MYSQL_TIME	data_updatetime;
    float	data_mcjawleakage = 0.f;
    float	data_mctonguewidth = 0.f;
    float	data_mcgroovewidth = 0.f;
    float	data_mcleaftipwidth = 0.f;
    float	data_mctransmission = 0.f;
    //std::string	data_reserve

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 2: 	//mcphoxjawupposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoxjawupposition;
            break;
        case 3: 	//mcphoxjawthickness float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoxjawthickness;
            break;
        case 4: 	//mcphoyjawupposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoyjawupposition;
            break;
        case 5: 	//mcphoyjawthickness float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoyjawthickness;
            break;
        case 6: 	//mcphomlccenterposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomlccenterposition;
            break;
        case 7: 	//mcphomlcthickness float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomlcthickness;
            break;
        case 8: 	//mcphomlctgwidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomlctgwidth;
            break;
        case 9: 	//mcphomlcairgapwidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomlcairgapwidth;
            break;
        case 10: 	//mcphomlleafendradius float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomlleafendradius;
            break;
        case 11: 	//mcphomufactor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphomufactor;
            break;
        case 13: 	//phspdistancefromtarget float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_phspdistancefromtarget;
            break;
        case 14: 	//mcphonorm10x10 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphonorm10x10;
            break;
        case 21: 	//mcphoon int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mcphoon;
            break;
        case 22: 	//mcphodm float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphodm;
            break;
        case 23: 	//mcphoc1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoc1;
            break;
        case 24: 	//mcphoc2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoc2;
            break;
        case 25: 	//mcphoc3 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoc3;
            break;
        case 26: 	//mcphoffs10 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoffs10;
            break;
        case 27: 	//mcphok float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphok;
            break;
        case 28: 	//mcphoa float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphoa;
            break;
        case 29: 	//mcphodf float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphodf;
            break;
        case 30: 	//mcphosf float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcphosf;
            break;
        case 31: 	//mlcleafshapenum int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mlcleafshapenum;
            break;
        case 35: 	//meanleaforishift float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_meanleaforishift;
            break;
        case 36: 	//fringe float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_fringe;
            break;
        case 48: 	//mcprimaryenergystart float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcprimaryenergystart;
            break;
        case 49: 	//mcprimaryenergyend float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcprimaryenergyend;
            break;
        case 50: 	//mcprimaryenergybin int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mcprimaryenergybin;
            break;
        case 51: 	//mcprimaryenergyrestart float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcprimaryenergyrestart;
            break;
        case 52: 	//mcsecondaryenergystart float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsecondaryenergystart;
            break;
        case 53: 	//mcsecondaryenergyend float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsecondaryenergyend;
            break;
        case 54: 	//mcsecondaryenergybin int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mcsecondaryenergybin;
            break;
        case 55: 	//mcsecondaryenergyrestart float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsecondaryenergyrestart;
            break;
        case 56: 	//mcelectronenergy float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcelectronenergy;
            break;
        case 57: 	//mccommiparticlenumber bigint
            bind[i].buffer_type= MYSQL_TYPE_LONGLONG;
            bind[i].buffer= (char *)&data_mccommiparticlenumber;
            break;
        case 58: 	//mcprimaryenergylist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 59: 	//mcprimaryweightlist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 60: 	//mcsecondaryenergylist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 61: 	//mcsecondaryweightlist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 62: 	//mcelecenergylist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 63: 	//mcelecweightlist blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 64: 	//mcprimaryflatfilterdist float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcprimaryflatfilterdist;
            break;
        case 65: 	//mcprimaryjawdistance float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcprimaryjawdistance;
            break;
        case 66: 	//mcsourcesigmaprimary float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsourcesigmaprimary;
            break;
        case 67: 	//mcsourcesigmasecondary float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsourcesigmasecondary;
            break;
        case 68: 	//mcprimarysoftening tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_mcprimarysoftening;
            break;
        case 69: 	//mcsofteningtunningf float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcsofteningtunningf;
            break;
        case 70: 	//mcscatteringcompton tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_mcscatteringcompton;
            break;
        case 71: 	//mcsecondarysourcetype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_mcsecondarysourcetype;
            break;
        case 72: 	//mcsecondarysourcepara blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 73: 	//mceleccorfieldsize blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 74: 	//mcphotonfluence blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 75: 	//mcrectanglescacor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcrectanglescacor;
            break;
        case 76: 	//mclargefieldtailcor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mclargefieldtailcor;
            break;
        case 77: 	//mcmlcleakage float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcmlcleakage;
            break;
        case 78: 	//mcgaussianblurswitch tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_mcgaussianblurswitch;
            break;
        case 79: 	//mcgaussiansigmax float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcgaussiansigmax;
            break;
        case 80: 	//mcgaussiansigmay float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcgaussiansigmay;
            break;
        case 82: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        case 83: 	//mcjawleakage float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcjawleakage;
            break;
        case 84: 	//mctonguewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mctonguewidth;
            break;
        case 85: 	//mcgroovewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcgroovewidth;
            break;
        case 86: 	//mcleaftipwidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mcleaftipwidth;
            break;
        case 87: 	//mctransmission float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mctransmission;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtMcphocommissionedunit* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtMcphocommissionedunit();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//commissionedunituid varchar
                pDis->set_commissionedunituid((char *)bind[i].buffer);
                break;
            case 2: 	//mcphoxjawupposition float
                pDis->set_mcphoxjawupposition(data_mcphoxjawupposition);
                break;
            case 3: 	//mcphoxjawthickness float
                pDis->set_mcphoxjawthickness(data_mcphoxjawthickness);
                break;
            case 4: 	//mcphoyjawupposition float
                pDis->set_mcphoyjawupposition(data_mcphoyjawupposition);
                break;
            case 5: 	//mcphoyjawthickness float
                pDis->set_mcphoyjawthickness(data_mcphoyjawthickness);
                break;
            case 6: 	//mcphomlccenterposition float
                pDis->set_mcphomlccenterposition(data_mcphomlccenterposition);
                break;
            case 7: 	//mcphomlcthickness float
                pDis->set_mcphomlcthickness(data_mcphomlcthickness);
                break;
            case 8: 	//mcphomlctgwidth float
                pDis->set_mcphomlctgwidth(data_mcphomlctgwidth);
                break;
            case 9: 	//mcphomlcairgapwidth float
                pDis->set_mcphomlcairgapwidth(data_mcphomlcairgapwidth);
                break;
            case 10: 	//mcphomlleafendradius float
                pDis->set_mcphomlleafendradius(data_mcphomlleafendradius);
                break;
            case 11: 	//mcphomufactor float
                pDis->set_mcphomufactor(data_mcphomufactor);
                break;
            case 12: 	//mcpholist varchar
                pDis->set_mcpholist((char *)bind[i].buffer);
                break;
            case 13: 	//phspdistancefromtarget float
                pDis->set_phspdistancefromtarget(data_phspdistancefromtarget);
                break;
            case 14: 	//mcphonorm10x10 float
                pDis->set_mcphonorm10x10(data_mcphonorm10x10);
                break;
            case 15: 	//mcphoabscorrectionfactor varchar
                pDis->set_mcphoabscorrectionfactor((char *)bind[i].buffer);
                break;
            case 16: 	//mcphoenergy varchar
                pDis->set_mcphoenergy((char *)bind[i].buffer);
                break;
            case 17: 	//phoflulist varchar
                pDis->set_phoflulist((char *)bind[i].buffer);
                break;
            case 18: 	//eneoffaxisradiusveclist varchar
                pDis->set_eneoffaxisradiusveclist((char *)bind[i].buffer);
                break;
            case 19: 	//eneoffaxisenergyvec varchar
                pDis->set_eneoffaxisenergyvec((char *)bind[i].buffer);
                break;
            case 20: 	//eneoffaxisvaluelist varchar
                pDis->set_eneoffaxisvaluelist((char *)bind[i].buffer);
                break;
            case 21: 	//mcphoon int
                pDis->set_mcphoon(data_mcphoon);
                break;
            case 22: 	//mcphodm float
                pDis->set_mcphodm(data_mcphodm);
                break;
            case 23: 	//mcphoc1 float
                pDis->set_mcphoc1(data_mcphoc1);
                break;
            case 24: 	//mcphoc2 float
                pDis->set_mcphoc2(data_mcphoc2);
                break;
            case 25: 	//mcphoc3 float
                pDis->set_mcphoc3(data_mcphoc3);
                break;
            case 26: 	//mcphoffs10 float
                pDis->set_mcphoffs10(data_mcphoffs10);
                break;
            case 27: 	//mcphok float
                pDis->set_mcphok(data_mcphok);
                break;
            case 28: 	//mcphoa float
                pDis->set_mcphoa(data_mcphoa);
                break;
            case 29: 	//mcphodf float
                pDis->set_mcphodf(data_mcphodf);
                break;
            case 30: 	//mcphosf float
                pDis->set_mcphosf(data_mcphosf);
                break;
            case 31: 	//mlcleafshapenum int
                pDis->set_mlcleafshapenum(data_mlcleafshapenum);
                break;
            case 32: 	//mlcleafyleafposlist varchar
                pDis->set_mlcleafyleafposlist((char *)bind[i].buffer);
                break;
            case 33: 	//mlcleafthetalist varchar
                pDis->set_mlcleafthetalist((char *)bind[i].buffer);
                break;
            case 34: 	//mlcleafshapeidxlist varchar
                pDis->set_mlcleafshapeidxlist((char *)bind[i].buffer);
                break;
            case 35: 	//meanleaforishift float
                pDis->set_meanleaforishift(data_meanleaforishift);
                break;
            case 36: 	//fringe float
                pDis->set_fringe(data_fringe);
                break;
            case 37: 	//mcpholeafmaplist varchar
                pDis->set_mcpholeafmaplist((char *)bind[i].buffer);
                break;
            case 38: 	//mcphoparam1 varchar
                pDis->set_mcphoparam1((char *)bind[i].buffer);
                break;
            case 39: 	//mcphoparam2 varchar
                pDis->set_mcphoparam2((char *)bind[i].buffer);
                break;
            case 40: 	//mcphoparam3 varchar
                pDis->set_mcphoparam3((char *)bind[i].buffer);
                break;
            case 41: 	//mcphoparam4 varchar
                pDis->set_mcphoparam4((char *)bind[i].buffer);
                break;
            case 42: 	//mcphoparam5 varchar
                pDis->set_mcphoparam5((char *)bind[i].buffer);
                break;
            case 43: 	//mcphoparam6 varchar
                pDis->set_mcphoparam6((char *)bind[i].buffer);
                break;
            case 44: 	//mcphoparam7 varchar
                pDis->set_mcphoparam7((char *)bind[i].buffer);
                break;
            case 45: 	//mcphoparam8 varchar
                pDis->set_mcphoparam8((char *)bind[i].buffer);
                break;
            case 46: 	//mcphoparam9 varchar
                pDis->set_mcphoparam9((char *)bind[i].buffer);
                break;
            case 47: 	//mcphoparam10 varchar
                pDis->set_mcphoparam10((char *)bind[i].buffer);
                break;
            case 48: 	//mcprimaryenergystart float
                pDis->set_mcprimaryenergystart(data_mcprimaryenergystart);
                break;
            case 49: 	//mcprimaryenergyend float
                pDis->set_mcprimaryenergyend(data_mcprimaryenergyend);
                break;
            case 50: 	//mcprimaryenergybin int
                pDis->set_mcprimaryenergybin(data_mcprimaryenergybin);
                break;
            case 51: 	//mcprimaryenergyrestart float
                pDis->set_mcprimaryenergyrestart(data_mcprimaryenergyrestart);
                break;
            case 52: 	//mcsecondaryenergystart float
                pDis->set_mcsecondaryenergystart(data_mcsecondaryenergystart);
                break;
            case 53: 	//mcsecondaryenergyend float
                pDis->set_mcsecondaryenergyend(data_mcsecondaryenergyend);
                break;
            case 54: 	//mcsecondaryenergybin int
                pDis->set_mcsecondaryenergybin(data_mcsecondaryenergybin);
                break;
            case 55: 	//mcsecondaryenergyrestart float
                pDis->set_mcsecondaryenergyrestart(data_mcsecondaryenergyrestart);
                break;
            case 56: 	//mcelectronenergy float
                pDis->set_mcelectronenergy(data_mcelectronenergy);
                break;
            case 57: 	//mccommiparticlenumber bigint
                pDis->set_mccommiparticlenumber(data_mccommiparticlenumber);
                break;
            case 58: 	//mcprimaryenergylist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcprimaryenergylist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 59: 	//mcprimaryweightlist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcprimaryweightlist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 60: 	//mcsecondaryenergylist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcsecondaryenergylist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 61: 	//mcsecondaryweightlist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcsecondaryweightlist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 62: 	//mcelecenergylist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcelecenergylist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 63: 	//mcelecweightlist blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcelecweightlist(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 64: 	//mcprimaryflatfilterdist float
                pDis->set_mcprimaryflatfilterdist(data_mcprimaryflatfilterdist);
                break;
            case 65: 	//mcprimaryjawdistance float
                pDis->set_mcprimaryjawdistance(data_mcprimaryjawdistance);
                break;
            case 66: 	//mcsourcesigmaprimary float
                pDis->set_mcsourcesigmaprimary(data_mcsourcesigmaprimary);
                break;
            case 67: 	//mcsourcesigmasecondary float
                pDis->set_mcsourcesigmasecondary(data_mcsourcesigmasecondary);
                break;
            case 68: 	//mcprimarysoftening tinyint
                pDis->set_mcprimarysoftening(data_mcprimarysoftening);
                break;
            case 69: 	//mcsofteningtunningf float
                pDis->set_mcsofteningtunningf(data_mcsofteningtunningf);
                break;
            case 70: 	//mcscatteringcompton tinyint
                pDis->set_mcscatteringcompton(data_mcscatteringcompton);
                break;
            case 71: 	//mcsecondarysourcetype int
                pDis->set_mcsecondarysourcetype(data_mcsecondarysourcetype);
                break;
            case 72: 	//mcsecondarysourcepara blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcsecondarysourcepara(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 73: 	//mceleccorfieldsize blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mceleccorfieldsize(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 74: 	//mcphotonfluence blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_mcphotonfluence(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 75: 	//mcrectanglescacor float
                pDis->set_mcrectanglescacor(data_mcrectanglescacor);
                break;
            case 76: 	//mclargefieldtailcor float
                pDis->set_mclargefieldtailcor(data_mclargefieldtailcor);
                break;
            case 77: 	//mcmlcleakage float
                pDis->set_mcmlcleakage(data_mcmlcleakage);
                break;
            case 78: 	//mcgaussianblurswitch tinyint
                pDis->set_mcgaussianblurswitch(data_mcgaussianblurswitch);
                break;
            case 79: 	//mcgaussiansigmax float
                pDis->set_mcgaussiansigmax(data_mcgaussiansigmax);
                break;
            case 80: 	//mcgaussiansigmay float
                pDis->set_mcgaussiansigmay(data_mcgaussiansigmay);
                break;
            case 81: 	//crc varchar
                pDis->set_crc((char *)bind[i].buffer);
                break;
            case 82: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            case 83: 	//mcjawleakage float
                pDis->set_mcjawleakage(data_mcjawleakage);
                break;
            case 84: 	//mctonguewidth float
                pDis->set_mctonguewidth(data_mctonguewidth);
                break;
            case 85: 	//mcgroovewidth float
                pDis->set_mcgroovewidth(data_mcgroovewidth);
                break;
            case 86: 	//mcleaftipwidth float
                pDis->set_mcleaftipwidth(data_mcleaftipwidth);
                break;
            case 87: 	//mctransmission float
                pDis->set_mctransmission(data_mctransmission);
                break;
            case 88: 	//reserve varchar
                pDis->set_reserve((char *)bind[i].buffer);
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE