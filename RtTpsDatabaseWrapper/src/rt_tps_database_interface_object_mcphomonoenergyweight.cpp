//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_mcphomonoenergyweight.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_mcphomonoenergyweight.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtMcphomonoenergyweightImp::RtMcphomonoenergyweightImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_mcphocommissionedunituid(""),
    m_injectelectronenergy(0.f),
    m_injectelectronweight(0.f),
    m_phspdistancefromtarget(0.f),
    m_filepath(""),
    m_phspfilepath(""),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtMcphomonoenergyweightImp::RtMcphomonoenergyweightImp(const RtMcphomonoenergyweightImp& mcphomonoenergyweight):
    m_uid(mcphomonoenergyweight.get_uid()),
    m_mcphocommissionedunituid(mcphomonoenergyweight.get_mcphocommissionedunituid()),
    m_injectelectronenergy(mcphomonoenergyweight.get_injectelectronenergy()),
    m_injectelectronweight(mcphomonoenergyweight.get_injectelectronweight()),
    m_phspdistancefromtarget(mcphomonoenergyweight.get_phspdistancefromtarget()),
    m_filepath(mcphomonoenergyweight.get_filepath()),
    m_phspfilepath(mcphomonoenergyweight.get_phspfilepath()),
    m_crc(mcphomonoenergyweight.get_crc()),
    m_updatetime(mcphomonoenergyweight.get_updatetime())
{
}

RtMcphomonoenergyweightImp& RtMcphomonoenergyweightImp::operator=(const RtMcphomonoenergyweightImp& mcphomonoenergyweight)
{
    if (this != &mcphomonoenergyweight){
        this->m_uid = mcphomonoenergyweight.get_uid();
        this->m_mcphocommissionedunituid = mcphomonoenergyweight.get_mcphocommissionedunituid();
        this->m_injectelectronenergy = mcphomonoenergyweight.get_injectelectronenergy();
        this->m_injectelectronweight = mcphomonoenergyweight.get_injectelectronweight();
        this->m_phspdistancefromtarget = mcphomonoenergyweight.get_phspdistancefromtarget();
        this->m_filepath = mcphomonoenergyweight.get_filepath();
        this->m_phspfilepath = mcphomonoenergyweight.get_phspfilepath();
        this->m_crc = mcphomonoenergyweight.get_crc();
        this->m_updatetime = mcphomonoenergyweight.get_updatetime();
    }
    return *this;
}

RtMcphomonoenergyweightImp::~RtMcphomonoenergyweightImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtMcphomonoenergyweight::RtMcphomonoenergyweight(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtMcphomonoenergyweightImp(bGeneraterUid);
    set_flags(MCPHOMONOENERGYWEIGHT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_MCPHOMONOENERGYWEIGHT_FIELD_NULL);
}

RtMcphomonoenergyweight::RtMcphomonoenergyweight(const RtMcphomonoenergyweight& mcphomonoenergyweight): RtDatabaseObject(mcphomonoenergyweight),
   m_pImp(new RtMcphomonoenergyweightImp(*mcphomonoenergyweight.m_pImp))
{
}

RtMcphomonoenergyweight& RtMcphomonoenergyweight::operator = (const RtMcphomonoenergyweight& mcphomonoenergyweight)
{
    if(this != &mcphomonoenergyweight)
    {
        RtDatabaseObject::operator=(mcphomonoenergyweight);
        *this->m_pImp = *mcphomonoenergyweight.m_pImp;
    }
    return *this;
}

RtMcphomonoenergyweight::~RtMcphomonoenergyweight()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtMcphomonoenergyweight::get_uid() const { return m_pImp->get_uid();}
void RtMcphomonoenergyweight::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(MCPHOMONOENERGYWEIGHT_UID);
    setdirty_field(MCPHOMONOENERGYWEIGHT_UID, true);
}

//mcphocommissionedunituid
std::string RtMcphomonoenergyweight::get_mcphocommissionedunituid() const { return m_pImp->get_mcphocommissionedunituid();}
void RtMcphomonoenergyweight::set_mcphocommissionedunituid(const std::string& mcphocommissionedunituid)
{
    m_pImp->set_mcphocommissionedunituid(mcphocommissionedunituid);
    enable_field(MCPHOMONOENERGYWEIGHT_MCPHOCOMMISSIONEDUNITUID);
    setdirty_field(MCPHOMONOENERGYWEIGHT_MCPHOCOMMISSIONEDUNITUID, true);
}

//injectelectronenergy
float RtMcphomonoenergyweight::get_injectelectronenergy() const { return m_pImp->get_injectelectronenergy();}
void RtMcphomonoenergyweight::set_injectelectronenergy(const float& injectelectronenergy)
{
    m_pImp->set_injectelectronenergy(injectelectronenergy);
    enable_field(MCPHOMONOENERGYWEIGHT_INJECTELECTRONENERGY);
    setdirty_field(MCPHOMONOENERGYWEIGHT_INJECTELECTRONENERGY, true);
}

//injectelectronweight
float RtMcphomonoenergyweight::get_injectelectronweight() const { return m_pImp->get_injectelectronweight();}
void RtMcphomonoenergyweight::set_injectelectronweight(const float& injectelectronweight)
{
    m_pImp->set_injectelectronweight(injectelectronweight);
    enable_field(MCPHOMONOENERGYWEIGHT_INJECTELECTRONWEIGHT);
    setdirty_field(MCPHOMONOENERGYWEIGHT_INJECTELECTRONWEIGHT, true);
}

//phspdistancefromtarget
float RtMcphomonoenergyweight::get_phspdistancefromtarget() const { return m_pImp->get_phspdistancefromtarget();}
void RtMcphomonoenergyweight::set_phspdistancefromtarget(const float& phspdistancefromtarget)
{
    m_pImp->set_phspdistancefromtarget(phspdistancefromtarget);
    enable_field(MCPHOMONOENERGYWEIGHT_PHSPDISTANCEFROMTARGET);
    setdirty_field(MCPHOMONOENERGYWEIGHT_PHSPDISTANCEFROMTARGET, true);
}

//filepath
std::string RtMcphomonoenergyweight::get_filepath() const { return m_pImp->get_filepath();}
void RtMcphomonoenergyweight::set_filepath(const std::string& filepath)
{
    m_pImp->set_filepath(filepath);
    enable_field(MCPHOMONOENERGYWEIGHT_FILEPATH);
    setdirty_field(MCPHOMONOENERGYWEIGHT_FILEPATH, true);
}

//phspfilepath
std::string RtMcphomonoenergyweight::get_phspfilepath() const { return m_pImp->get_phspfilepath();}
void RtMcphomonoenergyweight::set_phspfilepath(const std::string& phspfilepath)
{
    m_pImp->set_phspfilepath(phspfilepath);
    enable_field(MCPHOMONOENERGYWEIGHT_PHSPFILEPATH);
    setdirty_field(MCPHOMONOENERGYWEIGHT_PHSPFILEPATH, true);
}

//crc
std::string RtMcphomonoenergyweight::get_crc() const { return m_pImp->get_crc();}
void RtMcphomonoenergyweight::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(MCPHOMONOENERGYWEIGHT_CRC);
    setdirty_field(MCPHOMONOENERGYWEIGHT_CRC, true);
}

//updatetime
DATETIME_BOOST RtMcphomonoenergyweight::get_updatetime() const { return m_pImp->get_updatetime();}
void RtMcphomonoenergyweight::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(MCPHOMONOENERGYWEIGHT_UPDATETIME);
    setdirty_field(MCPHOMONOENERGYWEIGHT_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE