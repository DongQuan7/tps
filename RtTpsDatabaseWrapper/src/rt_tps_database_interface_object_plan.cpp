//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_plan.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.10
///
///  \version 1.0
///  \date    6/30/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_plan.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_dosegrid.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtPlanImp::RtPlanImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_courseuid(""),
    m_imageseriesuid(""),
    m_setuppoiuid(""),
    m_name(""),
    m_sopinstanceuid(""),
    m_plansourcetype(0),
    m_bodythickness(0.f),
    m_planner(""),
    m_totalgoal(0.f),
    m_tpsverno(0),
    m_tmsverno(0),
    m_planid(""),
    m_origintype(0),
    m_displaymode(0),
    m_hundredpercentdefinition(0),
    m_specifieddose(0.),
    m_rendermode(0),
    m_transparency(0.f),
    m_enableskindoseview(false),
    m_maxskindose(0.f),
    m_transparency3d(0.f),
    m_patientposition(""),
    m_description(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    m_dosegrid = new RtDosegrid(bGeneraterUid);
}

RtPlanImp::RtPlanImp(const RtPlanImp& plan):
    m_uid(plan.get_uid()),
    m_courseuid(plan.get_courseuid()),
    m_imageseriesuid(plan.get_imageseriesuid()),
    m_setuppoiuid(plan.get_setuppoiuid()),
    m_name(plan.get_name()),
    m_sopinstanceuid(plan.get_sopinstanceuid()),
    m_plansourcetype(plan.get_plansourcetype()),
    m_bodythickness(plan.get_bodythickness()),
    m_planner(plan.get_planner()),
    m_totalgoal(plan.get_totalgoal()),
    m_tpsverno(plan.get_tpsverno()),
    m_tmsverno(plan.get_tmsverno()),
    m_planid(plan.get_planid()),
    m_origintype(plan.get_origintype()),
    m_displaymode(plan.get_displaymode()),
    m_hundredpercentdefinition(plan.get_hundredpercentdefinition()),
    m_specifieddose(plan.get_specifieddose()),
    m_rendermode(plan.get_rendermode()),
    m_transparency(plan.get_transparency()),
    m_enableskindoseview(plan.get_enableskindoseview()),
    m_maxskindose(plan.get_maxskindose()),
    m_transparency3d(plan.get_transparency3d()),
    m_patientposition(plan.get_patientposition()),
    m_description(plan.get_description()),
    m_updatetime(plan.get_updatetime())
{
    m_dosegrid = new RtDosegrid(*plan.get_dosegrid());
}

RtPlanImp& RtPlanImp::operator=(const RtPlanImp& plan)
{
    if (this != &plan){
        this->m_uid = plan.get_uid();
        this->m_courseuid = plan.get_courseuid();
        this->m_imageseriesuid = plan.get_imageseriesuid();
        this->m_setuppoiuid = plan.get_setuppoiuid();
        this->m_name = plan.get_name();
        this->m_sopinstanceuid = plan.get_sopinstanceuid();
        this->m_plansourcetype = plan.get_plansourcetype();
        this->m_bodythickness = plan.get_bodythickness();
        this->m_planner = plan.get_planner();
        this->m_totalgoal = plan.get_totalgoal();
        this->m_tpsverno = plan.get_tpsverno();
        this->m_tmsverno = plan.get_tmsverno();
        this->m_planid = plan.get_planid();
        this->m_origintype = plan.get_origintype();
        this->m_displaymode = plan.get_displaymode();
        this->m_hundredpercentdefinition = plan.get_hundredpercentdefinition();
        this->m_specifieddose = plan.get_specifieddose();
        this->m_rendermode = plan.get_rendermode();
        this->m_transparency = plan.get_transparency();
        this->m_enableskindoseview = plan.get_enableskindoseview();
        this->m_maxskindose = plan.get_maxskindose();
        this->m_transparency3d = plan.get_transparency3d();
        this->m_patientposition = plan.get_patientposition();
        this->m_description = plan.get_description();
        this->m_updatetime = plan.get_updatetime();
        *this->m_dosegrid = *plan.get_dosegrid();
    }
    return *this;
}

RtPlanImp::~RtPlanImp()
{
    DEL_PTR(m_dosegrid);
}


//////////////////////////////////////////////////////////////////////////
RtPlan::RtPlan(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtPlanImp(bGeneraterUid);
    set_flags(PLAN_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_PLAN_FIELD_NULL);
}

RtPlan::RtPlan(const RtPlan& plan): RtDatabaseObject(plan),
   m_pImp(new RtPlanImp(*plan.m_pImp))
{
}

RtPlan& RtPlan::operator = (const RtPlan& plan)
{
    if(this != &plan)
    {
        RtDatabaseObject::operator=(plan);
        *this->m_pImp = *plan.m_pImp;
    }
    return *this;
}

RtPlan::~RtPlan()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtPlan::get_uid() const { return m_pImp->get_uid();}
void RtPlan::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(PLAN_UID);
    setdirty_field(PLAN_UID, true);
}

//courseuid
std::string RtPlan::get_courseuid() const { return m_pImp->get_courseuid();}
void RtPlan::set_courseuid(const std::string& courseuid)
{
    m_pImp->set_courseuid(courseuid);
    enable_field(PLAN_COURSEUID);
    setdirty_field(PLAN_COURSEUID, true);
}

//imageseriesuid
std::string RtPlan::get_imageseriesuid() const { return m_pImp->get_imageseriesuid();}
void RtPlan::set_imageseriesuid(const std::string& imageseriesuid)
{
    m_pImp->set_imageseriesuid(imageseriesuid);
    enable_field(PLAN_IMAGESERIESUID);
    setdirty_field(PLAN_IMAGESERIESUID, true);
}

//setuppoiuid
std::string RtPlan::get_setuppoiuid() const { return m_pImp->get_setuppoiuid();}
void RtPlan::set_setuppoiuid(const std::string& setuppoiuid)
{
    m_pImp->set_setuppoiuid(setuppoiuid);
    enable_field(PLAN_SETUPPOIUID);
    setdirty_field(PLAN_SETUPPOIUID, true);
}

//name
std::string RtPlan::get_name() const { return m_pImp->get_name();}
void RtPlan::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(PLAN_NAME);
    setdirty_field(PLAN_NAME, true);
}

//sopinstanceuid
std::string RtPlan::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtPlan::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(PLAN_SOPINSTANCEUID);
    setdirty_field(PLAN_SOPINSTANCEUID, true);
}

//plansourcetype
int RtPlan::get_plansourcetype() const { return m_pImp->get_plansourcetype();}
void RtPlan::set_plansourcetype(const int& plansourcetype)
{
    m_pImp->set_plansourcetype(plansourcetype);
    enable_field(PLAN_PLANSOURCETYPE);
    setdirty_field(PLAN_PLANSOURCETYPE, true);
}

//bodythickness
float RtPlan::get_bodythickness() const { return m_pImp->get_bodythickness();}
void RtPlan::set_bodythickness(const float& bodythickness)
{
    m_pImp->set_bodythickness(bodythickness);
    enable_field(PLAN_BODYTHICKNESS);
    setdirty_field(PLAN_BODYTHICKNESS, true);
}

//planner
std::string RtPlan::get_planner() const { return m_pImp->get_planner();}
void RtPlan::set_planner(const std::string& planner)
{
    m_pImp->set_planner(planner);
    enable_field(PLAN_PLANNER);
    setdirty_field(PLAN_PLANNER, true);
}

//totalgoal
float RtPlan::get_totalgoal() const { return m_pImp->get_totalgoal();}
void RtPlan::set_totalgoal(const float& totalgoal)
{
    m_pImp->set_totalgoal(totalgoal);
    enable_field(PLAN_TOTALGOAL);
    setdirty_field(PLAN_TOTALGOAL, true);
}

//tpsverno
int RtPlan::get_tpsverno() const { return m_pImp->get_tpsverno();}
void RtPlan::set_tpsverno(const int& tpsverno)
{
    m_pImp->set_tpsverno(tpsverno);
    enable_field(PLAN_TPSVERNO);
    setdirty_field(PLAN_TPSVERNO, true);
}

//tmsverno
int RtPlan::get_tmsverno() const { return m_pImp->get_tmsverno();}
void RtPlan::set_tmsverno(const int& tmsverno)
{
    m_pImp->set_tmsverno(tmsverno);
    enable_field(PLAN_TMSVERNO);
    setdirty_field(PLAN_TMSVERNO, true);
}

//planid
std::string RtPlan::get_planid() const { return m_pImp->get_planid();}
void RtPlan::set_planid(const std::string& planid)
{
    m_pImp->set_planid(planid);
    enable_field(PLAN_PLANID);
    setdirty_field(PLAN_PLANID, true);
}

//origintype
int RtPlan::get_origintype() const { return m_pImp->get_origintype();}
void RtPlan::set_origintype(const int& origintype)
{
    m_pImp->set_origintype(origintype);
    enable_field(PLAN_ORIGINTYPE);
    setdirty_field(PLAN_ORIGINTYPE, true);
}

//displaymode
int RtPlan::get_displaymode() const { return m_pImp->get_displaymode();}
void RtPlan::set_displaymode(const int& displaymode)
{
    m_pImp->set_displaymode(displaymode);
    enable_field(PLAN_DISPLAYMODE);
    setdirty_field(PLAN_DISPLAYMODE, true);
}

//hundredpercentdefinition
int RtPlan::get_hundredpercentdefinition() const { return m_pImp->get_hundredpercentdefinition();}
void RtPlan::set_hundredpercentdefinition(const int& hundredpercentdefinition)
{
    m_pImp->set_hundredpercentdefinition(hundredpercentdefinition);
    enable_field(PLAN_HUNDREDPERCENTDEFINITION);
    setdirty_field(PLAN_HUNDREDPERCENTDEFINITION, true);
}

//specifieddose
double RtPlan::get_specifieddose() const { return m_pImp->get_specifieddose();}
void RtPlan::set_specifieddose(const double& specifieddose)
{
    m_pImp->set_specifieddose(specifieddose);
    enable_field(PLAN_SPECIFIEDDOSE);
    setdirty_field(PLAN_SPECIFIEDDOSE, true);
}

//rendermode
int RtPlan::get_rendermode() const { return m_pImp->get_rendermode();}
void RtPlan::set_rendermode(const int& rendermode)
{
    m_pImp->set_rendermode(rendermode);
    enable_field(PLAN_RENDERMODE);
    setdirty_field(PLAN_RENDERMODE, true);
}

//transparency
float RtPlan::get_transparency() const { return m_pImp->get_transparency();}
void RtPlan::set_transparency(const float& transparency)
{
    m_pImp->set_transparency(transparency);
    enable_field(PLAN_TRANSPARENCY);
    setdirty_field(PLAN_TRANSPARENCY, true);
}

//enableskindoseview
bool RtPlan::get_enableskindoseview() const { return m_pImp->get_enableskindoseview();}
void RtPlan::set_enableskindoseview(const bool& enableskindoseview)
{
    m_pImp->set_enableskindoseview(enableskindoseview);
    enable_field(PLAN_ENABLESKINDOSEVIEW);
    setdirty_field(PLAN_ENABLESKINDOSEVIEW, true);
}

//maxskindose
float RtPlan::get_maxskindose() const { return m_pImp->get_maxskindose();}
void RtPlan::set_maxskindose(const float& maxskindose)
{
    m_pImp->set_maxskindose(maxskindose);
    enable_field(PLAN_MAXSKINDOSE);
    setdirty_field(PLAN_MAXSKINDOSE, true);
}

//transparency3d
float RtPlan::get_transparency3d() const { return m_pImp->get_transparency3d();}
void RtPlan::set_transparency3d(const float& transparency3d)
{
    m_pImp->set_transparency3d(transparency3d);
    enable_field(PLAN_TRANSPARENCY3D);
    setdirty_field(PLAN_TRANSPARENCY3D, true);
}

//patientposition
std::string RtPlan::get_patientposition() const { return m_pImp->get_patientposition();}
void RtPlan::set_patientposition(const std::string& patientposition)
{
    m_pImp->set_patientposition(patientposition);
    enable_field(PLAN_PATIENTPOSITION);
    setdirty_field(PLAN_PATIENTPOSITION, true);
}

//description
std::string RtPlan::get_description() const { return m_pImp->get_description();}
void RtPlan::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(PLAN_DESCRIPTION);
    setdirty_field(PLAN_DESCRIPTION, true);
}

//updatetime
DATETIME_BOOST RtPlan::get_updatetime() const { return m_pImp->get_updatetime();}
void RtPlan::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(PLAN_UPDATETIME);
    setdirty_field(PLAN_UPDATETIME, true);
}

//////////////////////////////////////////////////////////////////////////
RtDosegrid* RtPlan::get_dosegrid() const {return m_pImp->get_dosegrid();}

RT_TPS_DATABASE_END_NAMESPACE