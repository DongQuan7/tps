//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_patient.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_patient.h"
#include "rt_tps_database_cryptohash.h"
#include "boost/algorithm/string/split.hpp"
#include "boost/algorithm/string/classification.hpp"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtPatient& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //120 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < PATIENT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_PATIENT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmspatient SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < PATIENT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_PATIENT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmspatient (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_patientid = "";
    int			data_patientbarcode = 0;
    std::string	data_clinicaluid = "";
    std::string	data_issuerofpatientid = "";
    bool		data_isinternal = false;
    std::string	data_attdoctorid = "";
    std::string	data_refdoctorname = "";
    std::string	data_firstname = "";
    std::string	data_middlename = "";
    std::string	data_nameprefix = "";
    std::string	data_namesuffix = "";
    std::string	data_lastname = "";
    std::string	data_photofilepath = "";
    std::string	data_ssn = "";
    std::string	data_cardid = "";
    int			data_patienttype = 0;
    int			data_weightunit = 0;
    int			data_heightunit = 0;
    float		data_height = 0.f;
    std::string	data_phone1 = "";
    std::string	data_phone2 = "";
    std::string	data_emailaddress = "";
    std::string	data_homeaddress = "";
    std::string	data_homeaddressprovince = "";
    std::string	data_nation = "";
    std::string	data_nationality = "";
    std::string	data_nativeplace = "";
    std::string	data_nativeplaceprovince = "";
    std::string	data_emergencycontactname = "";
    std::string	data_emergencycontactphone = "";
    std::string	data_oldadmissionno = "";
    std::string	data_inpatientarea = "";
    std::string	data_association = "";
    std::string	data_pathologyno = "";
    std::string	data_hospitalcardid = "";
    std::string	data_roomno = "";
    std::string	data_bedno = "";
    std::string	data_description = "";
    std::string	data_otherpatientnames = "";
    std::string	data_otherpatientids = "";
    MYSQL_TIME	data_patientbirthdate;
    int			data_patientsex = 0;
    std::string	data_patientcomments = "";
    int			data_patientcardtype = 0;
    std::string	data_ethnicgroup = "";
    std::string	data_militaryrank = "";
    std::string	data_patientprotect = "";
    int			data_patientconfirmstatus = 0;
    std::string	data_patientrejectreason = "";
    MYSQL_TIME	data_patientconfirmdatetime;
    bool		data_emergency = false;
    std::string	data_patientaccumulateddap = "";
    std::string	data_patientaccumulateddapunit = "";
    std::string	data_voicelanguage = "";
    std::string	data_allergies = "";
    MYSQL_TIME	data_lastmenstrualdate;
    std::string	data_patientstate = "";
    std::string	data_patientreserved0 = "";
    std::string	data_patientreserved1 = "";
    bool		data_isactive = false;
    int			data_country = 0;
    int			data_province = 0;
    std::string	data_city = "";
    std::string	data_postcode = "";
    std::string	data_address = "";
    int			data_originalcountry = 0;
    int			data_originalprovince = 0;
    std::string	data_originalcity = "";
    std::string	data_originalpostcode = "";
    std::string	data_originaladdress = "";
    std::string	data_email = "";
    std::string	data_telephone = "";
    std::string	data_countrycode = "";
    std::string	data_areacode = "";
    std::string	data_mobile = "";
    std::string	data_emergencycontactfirstname = "";
    std::string	data_emergencycontactlastname = "";
    int			data_emergencycontactrelationship = 0;
    int			data_emergencycontactcountry = 0;
    int			data_emergencycontactprovince = 0;
    std::string	data_emergencycontactcity = "";
    std::string	data_emergencycontactpostcode = "";
    std::string	data_emergencycontactaddress = "";
    std::string	data_emergencycontactemail = "";
    std::string	data_emergencycontacttelephone = "";
    std::string	data_emergencycontactmobile = "";
    std::string	data_emergencycontactcountrycode = "";
    std::string	data_emergencycontactareacode = "";
    std::string	data_contactfirstname = "";
    std::string	data_contactlastname = "";
    int			data_contactrelationship = 0;
    int			data_contactcountry = 0;
    int			data_contactprovince = 0;
    std::string	data_contactcity = "";
    std::string	data_contactpostcode = "";
    std::string	data_contactaddress = "";
    std::string	data_contactemail = "";
    std::string	data_contacttelephone = "";
    std::string	data_contactmobile = "";
    std::string	data_contactcountrycode = "";
    std::string	data_contactareacode = "";
    std::string	data_state = "";
    std::string	data_emergencystate = "";
    std::string	data_contactstate = "";
    std::string	data_originalstate = "";
    std::string	data_weighthistory = "";
    std::string	data_clincalhistory = "";
    std::string	data_crc = "";
    bool		data_isfromhis = false;
    int			data_occupation = 0;
    std::string	data_patientcardphotofilepath = "";
    MYSQL_TIME	data_registerdate;
    MYSQL_TIME	data_updatetime;
    std::string	data_risk = "";
    bool		data_enableweightlimit = false;
    double		data_weightuplimit = 0.;
    double		data_weightdownlimit = 0.;
    MYSQL_TIME	data_restoredatetime;
    MYSQL_TIME	data_backupdatetime;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < PATIENT_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//patientid varchar
            {
                data_patientid = src.get_patientid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientid.size();
            }
            break;
        case 2: 	//patientbarcode int
            {
                data_patientbarcode = src.get_patientbarcode();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientbarcode;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 3: 	//clinicaluid varchar
            {
                data_clinicaluid = src.get_clinicaluid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_clinicaluid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_clinicaluid.size();
            }
            break;
        case 4: 	//issuerofpatientid varchar
            {
                data_issuerofpatientid = src.get_issuerofpatientid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_issuerofpatientid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_issuerofpatientid.size();
            }
            break;
        case 5: 	//isinternal tinyint
            {
                data_isinternal = src.get_isinternal();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isinternal;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 6: 	//attdoctorid varchar
            {
                data_attdoctorid = src.get_attdoctorid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_attdoctorid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_attdoctorid.size();
            }
            break;
        case 7: 	//refdoctorname varchar
            {
                data_refdoctorname = src.get_refdoctorname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_refdoctorname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_refdoctorname.size();
            }
            break;
        case 8: 	//firstname varchar
            {
                data_firstname = src.get_firstname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_firstname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_firstname.size();
            }
            break;
        case 9: 	//middlename varchar
            {
                data_middlename = src.get_middlename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_middlename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_middlename.size();
            }
            break;
        case 10: 	//nameprefix varchar
            {
                data_nameprefix = src.get_nameprefix();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_nameprefix.c_str();
                bind[iCount].buffer_length = (unsigned long)data_nameprefix.size();
            }
            break;
        case 11: 	//namesuffix varchar
            {
                data_namesuffix = src.get_namesuffix();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_namesuffix.c_str();
                bind[iCount].buffer_length = (unsigned long)data_namesuffix.size();
            }
            break;
        case 12: 	//lastname varchar
            {
                data_lastname = src.get_lastname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_lastname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_lastname.size();
            }
            break;
        case 13: 	//photofilepath varchar
            {
                data_photofilepath = src.get_photofilepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_photofilepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_photofilepath.size();
            }
            break;
        case 14: 	//ssn varchar
            {
                data_ssn = src.get_ssn();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_ssn.c_str();
                bind[iCount].buffer_length = (unsigned long)data_ssn.size();
            }
            break;
        case 15: 	//cardid varchar
            {
                data_cardid = src.get_cardid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_cardid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_cardid.size();
            }
            break;
        case 16: 	//patienttype int
            {
                data_patienttype = src.get_patienttype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patienttype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 17: 	//weightunit int
            {
                data_weightunit = src.get_weightunit();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_weightunit;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 18: 	//heightunit int
            {
                data_heightunit = src.get_heightunit();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_heightunit;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 19: 	//height float
            {
                data_height = src.get_height();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_height;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 20: 	//phone1 varchar
            {
                data_phone1 = src.get_phone1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_phone1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_phone1.size();
            }
            break;
        case 21: 	//phone2 varchar
            {
                data_phone2 = src.get_phone2();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_phone2.c_str();
                bind[iCount].buffer_length = (unsigned long)data_phone2.size();
            }
            break;
        case 22: 	//emailaddress varchar
            {
                data_emailaddress = src.get_emailaddress();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emailaddress.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emailaddress.size();
            }
            break;
        case 23: 	//homeaddress varchar
            {
                data_homeaddress = src.get_homeaddress();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_homeaddress.c_str();
                bind[iCount].buffer_length = (unsigned long)data_homeaddress.size();
            }
            break;
        case 24: 	//homeaddressprovince varchar
            {
                data_homeaddressprovince = src.get_homeaddressprovince();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_homeaddressprovince.c_str();
                bind[iCount].buffer_length = (unsigned long)data_homeaddressprovince.size();
            }
            break;
        case 25: 	//nation varchar
            {
                data_nation = src.get_nation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_nation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_nation.size();
            }
            break;
        case 26: 	//nationality varchar
            {
                data_nationality = src.get_nationality();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_nationality.c_str();
                bind[iCount].buffer_length = (unsigned long)data_nationality.size();
            }
            break;
        case 27: 	//nativeplace varchar
            {
                data_nativeplace = src.get_nativeplace();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_nativeplace.c_str();
                bind[iCount].buffer_length = (unsigned long)data_nativeplace.size();
            }
            break;
        case 28: 	//nativeplaceprovince varchar
            {
                data_nativeplaceprovince = src.get_nativeplaceprovince();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_nativeplaceprovince.c_str();
                bind[iCount].buffer_length = (unsigned long)data_nativeplaceprovince.size();
            }
            break;
        case 29: 	//emergencycontactname varchar
            {
                data_emergencycontactname = src.get_emergencycontactname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactname.size();
            }
            break;
        case 30: 	//emergencycontactphone varchar
            {
                data_emergencycontactphone = src.get_emergencycontactphone();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactphone.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactphone.size();
            }
            break;
        case 31: 	//oldadmissionno varchar
            {
                data_oldadmissionno = src.get_oldadmissionno();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_oldadmissionno.c_str();
                bind[iCount].buffer_length = (unsigned long)data_oldadmissionno.size();
            }
            break;
        case 32: 	//inpatientarea varchar
            {
                data_inpatientarea = src.get_inpatientarea();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_inpatientarea.c_str();
                bind[iCount].buffer_length = (unsigned long)data_inpatientarea.size();
            }
            break;
        case 33: 	//association varchar
            {
                data_association = src.get_association();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_association.c_str();
                bind[iCount].buffer_length = (unsigned long)data_association.size();
            }
            break;
        case 34: 	//pathologyno varchar
            {
                data_pathologyno = src.get_pathologyno();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_pathologyno.c_str();
                bind[iCount].buffer_length = (unsigned long)data_pathologyno.size();
            }
            break;
        case 35: 	//hospitalcardid varchar
            {
                data_hospitalcardid = src.get_hospitalcardid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_hospitalcardid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_hospitalcardid.size();
            }
            break;
        case 36: 	//roomno varchar
            {
                data_roomno = src.get_roomno();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_roomno.c_str();
                bind[iCount].buffer_length = (unsigned long)data_roomno.size();
            }
            break;
        case 37: 	//bedno varchar
            {
                data_bedno = src.get_bedno();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_bedno.c_str();
                bind[iCount].buffer_length = (unsigned long)data_bedno.size();
            }
            break;
        case 38: 	//description varchar
            {
                data_description = src.get_description();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_description.c_str();
                bind[iCount].buffer_length = (unsigned long)data_description.size();
            }
            break;
        case 39: 	//otherpatientnames varchar
            {
                data_otherpatientnames = src.get_otherpatientnames();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_otherpatientnames.c_str();
                bind[iCount].buffer_length = (unsigned long)data_otherpatientnames.size();
            }
            break;
        case 40: 	//otherpatientids varchar
            {
                data_otherpatientids = src.get_otherpatientids();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_otherpatientids.c_str();
                bind[iCount].buffer_length = (unsigned long)data_otherpatientids.size();
            }
            break;
        case 41: 	//patientbirthdate date
            {
                ConvertDateTime2DB(src.get_patientbirthdate(), &data_patientbirthdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_patientbirthdate;
                if (src.get_patientbirthdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 42: 	//patientsex int
            {
                data_patientsex = src.get_patientsex();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientsex;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 43: 	//patientcomments varchar
            {
                data_patientcomments = src.get_patientcomments();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientcomments.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientcomments.size();
            }
            break;
        case 44: 	//patientcardtype int
            {
                data_patientcardtype = src.get_patientcardtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientcardtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 45: 	//ethnicgroup varchar
            {
                data_ethnicgroup = src.get_ethnicgroup();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_ethnicgroup.c_str();
                bind[iCount].buffer_length = (unsigned long)data_ethnicgroup.size();
            }
            break;
        case 46: 	//militaryrank varchar
            {
                data_militaryrank = src.get_militaryrank();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_militaryrank.c_str();
                bind[iCount].buffer_length = (unsigned long)data_militaryrank.size();
            }
            break;
        case 47: 	//patientprotect varchar
            {
                data_patientprotect = src.get_patientprotect();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientprotect.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientprotect.size();
            }
            break;
        case 48: 	//patientconfirmstatus int
            {
                data_patientconfirmstatus = src.get_patientconfirmstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientconfirmstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 49: 	//patientrejectreason varchar
            {
                data_patientrejectreason = src.get_patientrejectreason();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientrejectreason.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientrejectreason.size();
            }
            break;
        case 50: 	//patientconfirmdatetime datetime
            {
                ConvertDateTime2DB(src.get_patientconfirmdatetime(), &data_patientconfirmdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_patientconfirmdatetime;
                if (src.get_patientconfirmdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 51: 	//emergency tinyint
            {
                data_emergency = src.get_emergency();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_emergency;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 52: 	//patientaccumulateddap varchar
            {
                data_patientaccumulateddap = src.get_patientaccumulateddap();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientaccumulateddap.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientaccumulateddap.size();
            }
            break;
        case 53: 	//patientaccumulateddapunit varchar
            {
                data_patientaccumulateddapunit = src.get_patientaccumulateddapunit();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientaccumulateddapunit.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientaccumulateddapunit.size();
            }
            break;
        case 54: 	//voicelanguage varchar
            {
                data_voicelanguage = src.get_voicelanguage();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_voicelanguage.c_str();
                bind[iCount].buffer_length = (unsigned long)data_voicelanguage.size();
            }
            break;
        case 55: 	//allergies varchar
            {
                data_allergies = src.get_allergies();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_allergies.c_str();
                bind[iCount].buffer_length = (unsigned long)data_allergies.size();
            }
            break;
        case 56: 	//lastmenstrualdate date
            {
                ConvertDateTime2DB(src.get_lastmenstrualdate(), &data_lastmenstrualdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_lastmenstrualdate;
                if (src.get_lastmenstrualdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 57: 	//patientstate varchar
            {
                data_patientstate = src.get_patientstate();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientstate.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientstate.size();
            }
            break;
        case 58: 	//patientreserved0 varchar
            {
                data_patientreserved0 = src.get_patientreserved0();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientreserved0.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientreserved0.size();
            }
            break;
        case 59: 	//patientreserved1 varchar
            {
                data_patientreserved1 = src.get_patientreserved1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientreserved1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientreserved1.size();
            }
            break;
        case 60: 	//isactive tinyint
            {
                data_isactive = src.get_isactive();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isactive;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 61: 	//country int
            {
                data_country = src.get_country();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_country;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 62: 	//province int
            {
                data_province = src.get_province();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_province;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 63: 	//city varchar
            {
                data_city = src.get_city();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_city.c_str();
                bind[iCount].buffer_length = (unsigned long)data_city.size();
            }
            break;
        case 64: 	//postcode varchar
            {
                data_postcode = src.get_postcode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_postcode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_postcode.size();
            }
            break;
        case 65: 	//address varchar
            {
                data_address = src.get_address();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_address.c_str();
                bind[iCount].buffer_length = (unsigned long)data_address.size();
            }
            break;
        case 66: 	//originalcountry int
            {
                data_originalcountry = src.get_originalcountry();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_originalcountry;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 67: 	//originalprovince int
            {
                data_originalprovince = src.get_originalprovince();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_originalprovince;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 68: 	//originalcity varchar
            {
                data_originalcity = src.get_originalcity();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_originalcity.c_str();
                bind[iCount].buffer_length = (unsigned long)data_originalcity.size();
            }
            break;
        case 69: 	//originalpostcode varchar
            {
                data_originalpostcode = src.get_originalpostcode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_originalpostcode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_originalpostcode.size();
            }
            break;
        case 70: 	//originaladdress varchar
            {
                data_originaladdress = src.get_originaladdress();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_originaladdress.c_str();
                bind[iCount].buffer_length = (unsigned long)data_originaladdress.size();
            }
            break;
        case 71: 	//email varchar
            {
                data_email = src.get_email();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_email.c_str();
                bind[iCount].buffer_length = (unsigned long)data_email.size();
            }
            break;
        case 72: 	//telephone varchar
            {
                data_telephone = src.get_telephone();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_telephone.c_str();
                bind[iCount].buffer_length = (unsigned long)data_telephone.size();
            }
            break;
        case 73: 	//countrycode varchar
            {
                data_countrycode = src.get_countrycode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_countrycode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_countrycode.size();
            }
            break;
        case 74: 	//areacode varchar
            {
                data_areacode = src.get_areacode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_areacode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_areacode.size();
            }
            break;
        case 75: 	//mobile varchar
            {
                data_mobile = src.get_mobile();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mobile.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mobile.size();
            }
            break;
        case 76: 	//emergencycontactfirstname varchar
            {
                data_emergencycontactfirstname = src.get_emergencycontactfirstname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactfirstname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactfirstname.size();
            }
            break;
        case 77: 	//emergencycontactlastname varchar
            {
                data_emergencycontactlastname = src.get_emergencycontactlastname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactlastname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactlastname.size();
            }
            break;
        case 78: 	//emergencycontactrelationship int
            {
                data_emergencycontactrelationship = src.get_emergencycontactrelationship();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_emergencycontactrelationship;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 79: 	//emergencycontactcountry int
            {
                data_emergencycontactcountry = src.get_emergencycontactcountry();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_emergencycontactcountry;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 80: 	//emergencycontactprovince int
            {
                data_emergencycontactprovince = src.get_emergencycontactprovince();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_emergencycontactprovince;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 81: 	//emergencycontactcity varchar
            {
                data_emergencycontactcity = src.get_emergencycontactcity();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactcity.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactcity.size();
            }
            break;
        case 82: 	//emergencycontactpostcode varchar
            {
                data_emergencycontactpostcode = src.get_emergencycontactpostcode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactpostcode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactpostcode.size();
            }
            break;
        case 83: 	//emergencycontactaddress varchar
            {
                data_emergencycontactaddress = src.get_emergencycontactaddress();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactaddress.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactaddress.size();
            }
            break;
        case 84: 	//emergencycontactemail varchar
            {
                data_emergencycontactemail = src.get_emergencycontactemail();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactemail.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactemail.size();
            }
            break;
        case 85: 	//emergencycontacttelephone varchar
            {
                data_emergencycontacttelephone = src.get_emergencycontacttelephone();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontacttelephone.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontacttelephone.size();
            }
            break;
        case 86: 	//emergencycontactmobile varchar
            {
                data_emergencycontactmobile = src.get_emergencycontactmobile();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactmobile.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactmobile.size();
            }
            break;
        case 87: 	//emergencycontactcountrycode varchar
            {
                data_emergencycontactcountrycode = src.get_emergencycontactcountrycode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactcountrycode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactcountrycode.size();
            }
            break;
        case 88: 	//emergencycontactareacode varchar
            {
                data_emergencycontactareacode = src.get_emergencycontactareacode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencycontactareacode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencycontactareacode.size();
            }
            break;
        case 89: 	//contactfirstname varchar
            {
                data_contactfirstname = src.get_contactfirstname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactfirstname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactfirstname.size();
            }
            break;
        case 90: 	//contactlastname varchar
            {
                data_contactlastname = src.get_contactlastname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactlastname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactlastname.size();
            }
            break;
        case 91: 	//contactrelationship int
            {
                data_contactrelationship = src.get_contactrelationship();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_contactrelationship;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 92: 	//contactcountry int
            {
                data_contactcountry = src.get_contactcountry();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_contactcountry;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 93: 	//contactprovince int
            {
                data_contactprovince = src.get_contactprovince();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_contactprovince;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 94: 	//contactcity varchar
            {
                data_contactcity = src.get_contactcity();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactcity.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactcity.size();
            }
            break;
        case 95: 	//contactpostcode varchar
            {
                data_contactpostcode = src.get_contactpostcode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactpostcode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactpostcode.size();
            }
            break;
        case 96: 	//contactaddress varchar
            {
                data_contactaddress = src.get_contactaddress();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactaddress.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactaddress.size();
            }
            break;
        case 97: 	//contactemail varchar
            {
                data_contactemail = src.get_contactemail();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactemail.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactemail.size();
            }
            break;
        case 98: 	//contacttelephone varchar
            {
                data_contacttelephone = src.get_contacttelephone();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contacttelephone.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contacttelephone.size();
            }
            break;
        case 99: 	//contactmobile varchar
            {
                data_contactmobile = src.get_contactmobile();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactmobile.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactmobile.size();
            }
            break;
        case 100: 	//contactcountrycode varchar
            {
                data_contactcountrycode = src.get_contactcountrycode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactcountrycode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactcountrycode.size();
            }
            break;
        case 101: 	//contactareacode varchar
            {
                data_contactareacode = src.get_contactareacode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactareacode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactareacode.size();
            }
            break;
        case 102: 	//state varchar
            {
                data_state = src.get_state();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_state.c_str();
                bind[iCount].buffer_length = (unsigned long)data_state.size();
            }
            break;
        case 103: 	//emergencystate varchar
            {
                data_emergencystate = src.get_emergencystate();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_emergencystate.c_str();
                bind[iCount].buffer_length = (unsigned long)data_emergencystate.size();
            }
            break;
        case 104: 	//contactstate varchar
            {
                data_contactstate = src.get_contactstate();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_contactstate.c_str();
                bind[iCount].buffer_length = (unsigned long)data_contactstate.size();
            }
            break;
        case 105: 	//originalstate varchar
            {
                data_originalstate = src.get_originalstate();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_originalstate.c_str();
                bind[iCount].buffer_length = (unsigned long)data_originalstate.size();
            }
            break;
        case 106: 	//weighthistory varchar
            {
                data_weighthistory = src.get_weighthistory();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_weighthistory.c_str();
                bind[iCount].buffer_length = (unsigned long)data_weighthistory.size();
            }
            break;
        case 107: 	//clincalhistory varchar
            {
                data_clincalhistory = src.get_clincalhistory();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_clincalhistory.c_str();
                bind[iCount].buffer_length = (unsigned long)data_clincalhistory.size();
            }
            break;
        case 108: 	//crc varchar
            {
                data_crc = src.get_crc();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_crc.c_str();
                bind[iCount].buffer_length = (unsigned long)data_crc.size();
            }
            break;
        case 109: 	//isfromhis tinyint
            {
                data_isfromhis = src.get_isfromhis();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isfromhis;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 110: 	//occupation int
            {
                data_occupation = src.get_occupation();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_occupation;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 111: 	//patientcardphotofilepath varchar
            {
                data_patientcardphotofilepath = src.get_patientcardphotofilepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientcardphotofilepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientcardphotofilepath.size();
            }
            break;
        case 112: 	//registerdate datetime
            {
                ConvertDateTime2DB(src.get_registerdate(), &data_registerdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_registerdate;
                if (src.get_registerdate().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 113: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 114: 	//risk varchar
            {
                data_risk = src.get_risk();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_risk.c_str();
                bind[iCount].buffer_length = (unsigned long)data_risk.size();
            }
            break;
        case 115: 	//enableweightlimit tinyint
            {
                data_enableweightlimit = src.get_enableweightlimit();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_enableweightlimit;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 116: 	//weightuplimit double
            {
                data_weightuplimit = src.get_weightuplimit();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_weightuplimit;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 117: 	//weightdownlimit double
            {
                data_weightdownlimit = src.get_weightdownlimit();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_weightdownlimit;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 118: 	//restoredatetime datetime
            {
                ConvertDateTime2DB(src.get_restoredatetime(), &data_restoredatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_restoredatetime;
                if (src.get_restoredatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 119: 	//backupdatetime datetime
            {
                ConvertDateTime2DB(src.get_backupdatetime(), &data_backupdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_backupdatetime;
                if (src.get_backupdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtPatient*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtPatient*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmspatient    120 parameters
    const int field_num = PATIENT_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 0;
    MAX_LENGTH[3] = 64;
    MAX_LENGTH[4] = 64;
    MAX_LENGTH[5] = 0;
    MAX_LENGTH[6] = 64;
    MAX_LENGTH[7] = 256;
    MAX_LENGTH[8] = 64;
    MAX_LENGTH[9] = 64;
    MAX_LENGTH[10] = 64;
    MAX_LENGTH[11] = 64;
    MAX_LENGTH[12] = 64;
    MAX_LENGTH[13] = 1024;
    MAX_LENGTH[14] = 64;
    MAX_LENGTH[15] = 64;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 0;
    MAX_LENGTH[19] = 0;
    MAX_LENGTH[20] = 64;
    MAX_LENGTH[21] = 64;
    MAX_LENGTH[22] = 64;
    MAX_LENGTH[23] = 1024;
    MAX_LENGTH[24] = 64;
    MAX_LENGTH[25] = 64;
    MAX_LENGTH[26] = 64;
    MAX_LENGTH[27] = 64;
    MAX_LENGTH[28] = 64;
    MAX_LENGTH[29] = 64;
    MAX_LENGTH[30] = 64;
    MAX_LENGTH[31] = 64;
    MAX_LENGTH[32] = 64;
    MAX_LENGTH[33] = 64;
    MAX_LENGTH[34] = 64;
    MAX_LENGTH[35] = 64;
    MAX_LENGTH[36] = 64;
    MAX_LENGTH[37] = 64;
    MAX_LENGTH[38] = 1024;
    MAX_LENGTH[39] = 1024;
    MAX_LENGTH[40] = 1024;
    MAX_LENGTH[41] = 0;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 1024;
    MAX_LENGTH[44] = 0;
    MAX_LENGTH[45] = 16;
    MAX_LENGTH[46] = 64;
    MAX_LENGTH[47] = 64;
    MAX_LENGTH[48] = 0;
    MAX_LENGTH[49] = 255;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 0;
    MAX_LENGTH[52] = 16;
    MAX_LENGTH[53] = 16;
    MAX_LENGTH[54] = 64;
    MAX_LENGTH[55] = 1024;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 64;
    MAX_LENGTH[58] = 64;
    MAX_LENGTH[59] = 64;
    MAX_LENGTH[60] = 0;
    MAX_LENGTH[61] = 0;
    MAX_LENGTH[62] = 0;
    MAX_LENGTH[63] = 64;
    MAX_LENGTH[64] = 64;
    MAX_LENGTH[65] = 1024;
    MAX_LENGTH[66] = 0;
    MAX_LENGTH[67] = 0;
    MAX_LENGTH[68] = 64;
    MAX_LENGTH[69] = 64;
    MAX_LENGTH[70] = 1024;
    MAX_LENGTH[71] = 256;
    MAX_LENGTH[72] = 64;
    MAX_LENGTH[73] = 64;
    MAX_LENGTH[74] = 64;
    MAX_LENGTH[75] = 64;
    MAX_LENGTH[76] = 64;
    MAX_LENGTH[77] = 64;
    MAX_LENGTH[78] = 0;
    MAX_LENGTH[79] = 0;
    MAX_LENGTH[80] = 0;
    MAX_LENGTH[81] = 64;
    MAX_LENGTH[82] = 64;
    MAX_LENGTH[83] = 1024;
    MAX_LENGTH[84] = 256;
    MAX_LENGTH[85] = 64;
    MAX_LENGTH[86] = 64;
    MAX_LENGTH[87] = 64;
    MAX_LENGTH[88] = 64;
    MAX_LENGTH[89] = 64;
    MAX_LENGTH[90] = 64;
    MAX_LENGTH[91] = 0;
    MAX_LENGTH[92] = 0;
    MAX_LENGTH[93] = 0;
    MAX_LENGTH[94] = 64;
    MAX_LENGTH[95] = 64;
    MAX_LENGTH[96] = 1024;
    MAX_LENGTH[97] = 256;
    MAX_LENGTH[98] = 64;
    MAX_LENGTH[99] = 64;
    MAX_LENGTH[100] = 64;
    MAX_LENGTH[101] = 64;
    MAX_LENGTH[102] = 64;
    MAX_LENGTH[103] = 64;
    MAX_LENGTH[104] = 64;
    MAX_LENGTH[105] = 64;
    MAX_LENGTH[106] = 1024;
    MAX_LENGTH[107] = 1024;
    MAX_LENGTH[108] = 64;
    MAX_LENGTH[109] = 0;
    MAX_LENGTH[110] = 0;
    MAX_LENGTH[111] = 1024;
    MAX_LENGTH[112] = 0;
    MAX_LENGTH[113] = 0;
    MAX_LENGTH[114] = 1024;
    MAX_LENGTH[115] = 0;
    MAX_LENGTH[116] = 0;
    MAX_LENGTH[117] = 0;
    MAX_LENGTH[118] = 0;
    MAX_LENGTH[119] = 0;

    //std::string	data_uid
    //std::string	data_patientid
    int	data_patientbarcode = 0;
    //std::string	data_clinicaluid
    //std::string	data_issuerofpatientid
    bool	data_isinternal = false;
    //std::string	data_attdoctorid
    //std::string	data_refdoctorname
    //std::string	data_firstname
    //std::string	data_middlename
    //std::string	data_nameprefix
    //std::string	data_namesuffix
    //std::string	data_lastname
    //std::string	data_photofilepath
    //std::string	data_ssn
    //std::string	data_cardid
    int	data_patienttype = 0;
    int	data_weightunit = 0;
    int	data_heightunit = 0;
    float	data_height = 0.f;
    //std::string	data_phone1
    //std::string	data_phone2
    //std::string	data_emailaddress
    //std::string	data_homeaddress
    //std::string	data_homeaddressprovince
    //std::string	data_nation
    //std::string	data_nationality
    //std::string	data_nativeplace
    //std::string	data_nativeplaceprovince
    //std::string	data_emergencycontactname
    //std::string	data_emergencycontactphone
    //std::string	data_oldadmissionno
    //std::string	data_inpatientarea
    //std::string	data_association
    //std::string	data_pathologyno
    //std::string	data_hospitalcardid
    //std::string	data_roomno
    //std::string	data_bedno
    //std::string	data_description
    //std::string	data_otherpatientnames
    //std::string	data_otherpatientids
    MYSQL_TIME	data_patientbirthdate;
    int	data_patientsex = 0;
    //std::string	data_patientcomments
    int	data_patientcardtype = 0;
    //std::string	data_ethnicgroup
    //std::string	data_militaryrank
    //std::string	data_patientprotect
    int	data_patientconfirmstatus = 0;
    //std::string	data_patientrejectreason
    MYSQL_TIME	data_patientconfirmdatetime;
    bool	data_emergency = false;
    //std::string	data_patientaccumulateddap
    //std::string	data_patientaccumulateddapunit
    //std::string	data_voicelanguage
    //std::string	data_allergies
    MYSQL_TIME	data_lastmenstrualdate;
    //std::string	data_patientstate
    //std::string	data_patientreserved0
    //std::string	data_patientreserved1
    bool	data_isactive = false;
    int	data_country = 0;
    int	data_province = 0;
    //std::string	data_city
    //std::string	data_postcode
    //std::string	data_address
    int	data_originalcountry = 0;
    int	data_originalprovince = 0;
    //std::string	data_originalcity
    //std::string	data_originalpostcode
    //std::string	data_originaladdress
    //std::string	data_email
    //std::string	data_telephone
    //std::string	data_countrycode
    //std::string	data_areacode
    //std::string	data_mobile
    //std::string	data_emergencycontactfirstname
    //std::string	data_emergencycontactlastname
    int	data_emergencycontactrelationship = 0;
    int	data_emergencycontactcountry = 0;
    int	data_emergencycontactprovince = 0;
    //std::string	data_emergencycontactcity
    //std::string	data_emergencycontactpostcode
    //std::string	data_emergencycontactaddress
    //std::string	data_emergencycontactemail
    //std::string	data_emergencycontacttelephone
    //std::string	data_emergencycontactmobile
    //std::string	data_emergencycontactcountrycode
    //std::string	data_emergencycontactareacode
    //std::string	data_contactfirstname
    //std::string	data_contactlastname
    int	data_contactrelationship = 0;
    int	data_contactcountry = 0;
    int	data_contactprovince = 0;
    //std::string	data_contactcity
    //std::string	data_contactpostcode
    //std::string	data_contactaddress
    //std::string	data_contactemail
    //std::string	data_contacttelephone
    //std::string	data_contactmobile
    //std::string	data_contactcountrycode
    //std::string	data_contactareacode
    //std::string	data_state
    //std::string	data_emergencystate
    //std::string	data_contactstate
    //std::string	data_originalstate
    //std::string	data_weighthistory
    //std::string	data_clincalhistory
    //std::string	data_crc
    bool	data_isfromhis = false;
    int	data_occupation = 0;
    //std::string	data_patientcardphotofilepath
    MYSQL_TIME	data_registerdate;
    MYSQL_TIME	data_updatetime;
    //std::string	data_risk
    bool	data_enableweightlimit = false;
    double	data_weightuplimit = 0.;
    double	data_weightdownlimit = 0.;
    MYSQL_TIME	data_restoredatetime;
    MYSQL_TIME	data_backupdatetime;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 2: 	//patientbarcode int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientbarcode;
            break;
        case 5: 	//isinternal tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isinternal;
            break;
        case 16: 	//patienttype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patienttype;
            break;
        case 17: 	//weightunit int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_weightunit;
            break;
        case 18: 	//heightunit int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_heightunit;
            break;
        case 19: 	//height float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_height;
            break;
        case 41: 	//patientbirthdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_patientbirthdate;
            break;
        case 42: 	//patientsex int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientsex;
            break;
        case 44: 	//patientcardtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientcardtype;
            break;
        case 48: 	//patientconfirmstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientconfirmstatus;
            break;
        case 50: 	//patientconfirmdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_patientconfirmdatetime;
            break;
        case 51: 	//emergency tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_emergency;
            break;
        case 56: 	//lastmenstrualdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_lastmenstrualdate;
            break;
        case 60: 	//isactive tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isactive;
            break;
        case 61: 	//country int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_country;
            break;
        case 62: 	//province int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_province;
            break;
        case 66: 	//originalcountry int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_originalcountry;
            break;
        case 67: 	//originalprovince int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_originalprovince;
            break;
        case 78: 	//emergencycontactrelationship int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_emergencycontactrelationship;
            break;
        case 79: 	//emergencycontactcountry int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_emergencycontactcountry;
            break;
        case 80: 	//emergencycontactprovince int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_emergencycontactprovince;
            break;
        case 91: 	//contactrelationship int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_contactrelationship;
            break;
        case 92: 	//contactcountry int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_contactcountry;
            break;
        case 93: 	//contactprovince int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_contactprovince;
            break;
        case 109: 	//isfromhis tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isfromhis;
            break;
        case 110: 	//occupation int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_occupation;
            break;
        case 112: 	//registerdate datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_registerdate;
            break;
        case 113: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        case 115: 	//enableweightlimit tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_enableweightlimit;
            break;
        case 116: 	//weightuplimit double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_weightuplimit;
            break;
        case 117: 	//weightdownlimit double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_weightdownlimit;
            break;
        case 118: 	//restoredatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_restoredatetime;
            break;
        case 119: 	//backupdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_backupdatetime;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtPatient* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtPatient();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//patientid varchar
                pDis->set_patientid((char *)bind[i].buffer);
                break;
            case 2: 	//patientbarcode int
                pDis->set_patientbarcode(data_patientbarcode);
                break;
            case 3: 	//clinicaluid varchar
                pDis->set_clinicaluid((char *)bind[i].buffer);
                break;
            case 4: 	//issuerofpatientid varchar
                pDis->set_issuerofpatientid((char *)bind[i].buffer);
                break;
            case 5: 	//isinternal tinyint
                pDis->set_isinternal(data_isinternal);
                break;
            case 6: 	//attdoctorid varchar
                pDis->set_attdoctorid((char *)bind[i].buffer);
                break;
            case 7: 	//refdoctorname varchar
                pDis->set_refdoctorname((char *)bind[i].buffer);
                break;
            case 8: 	//firstname varchar
                pDis->set_firstname((char *)bind[i].buffer);
                break;
            case 9: 	//middlename varchar
                pDis->set_middlename((char *)bind[i].buffer);
                break;
            case 10: 	//nameprefix varchar
                pDis->set_nameprefix((char *)bind[i].buffer);
                break;
            case 11: 	//namesuffix varchar
                pDis->set_namesuffix((char *)bind[i].buffer);
                break;
            case 12: 	//lastname varchar
                pDis->set_lastname((char *)bind[i].buffer);
                break;
            case 13: 	//photofilepath varchar
                pDis->set_photofilepath((char *)bind[i].buffer);
                break;
            case 14: 	//ssn varchar
                pDis->set_ssn((char *)bind[i].buffer);
                break;
            case 15: 	//cardid varchar
                pDis->set_cardid((char *)bind[i].buffer);
                break;
            case 16: 	//patienttype int
                pDis->set_patienttype(data_patienttype);
                break;
            case 17: 	//weightunit int
                pDis->set_weightunit(data_weightunit);
                break;
            case 18: 	//heightunit int
                pDis->set_heightunit(data_heightunit);
                break;
            case 19: 	//height float
                pDis->set_height(data_height);
                break;
            case 20: 	//phone1 varchar
                pDis->set_phone1((char *)bind[i].buffer);
                break;
            case 21: 	//phone2 varchar
                pDis->set_phone2((char *)bind[i].buffer);
                break;
            case 22: 	//emailaddress varchar
                pDis->set_emailaddress((char *)bind[i].buffer);
                break;
            case 23: 	//homeaddress varchar
                pDis->set_homeaddress((char *)bind[i].buffer);
                break;
            case 24: 	//homeaddressprovince varchar
                pDis->set_homeaddressprovince((char *)bind[i].buffer);
                break;
            case 25: 	//nation varchar
                pDis->set_nation((char *)bind[i].buffer);
                break;
            case 26: 	//nationality varchar
                pDis->set_nationality((char *)bind[i].buffer);
                break;
            case 27: 	//nativeplace varchar
                pDis->set_nativeplace((char *)bind[i].buffer);
                break;
            case 28: 	//nativeplaceprovince varchar
                pDis->set_nativeplaceprovince((char *)bind[i].buffer);
                break;
            case 29: 	//emergencycontactname varchar
                pDis->set_emergencycontactname((char *)bind[i].buffer);
                break;
            case 30: 	//emergencycontactphone varchar
                pDis->set_emergencycontactphone((char *)bind[i].buffer);
                break;
            case 31: 	//oldadmissionno varchar
                pDis->set_oldadmissionno((char *)bind[i].buffer);
                break;
            case 32: 	//inpatientarea varchar
                pDis->set_inpatientarea((char *)bind[i].buffer);
                break;
            case 33: 	//association varchar
                pDis->set_association((char *)bind[i].buffer);
                break;
            case 34: 	//pathologyno varchar
                pDis->set_pathologyno((char *)bind[i].buffer);
                break;
            case 35: 	//hospitalcardid varchar
                pDis->set_hospitalcardid((char *)bind[i].buffer);
                break;
            case 36: 	//roomno varchar
                pDis->set_roomno((char *)bind[i].buffer);
                break;
            case 37: 	//bedno varchar
                pDis->set_bedno((char *)bind[i].buffer);
                break;
            case 38: 	//description varchar
                pDis->set_description((char *)bind[i].buffer);
                break;
            case 39: 	//otherpatientnames varchar
                pDis->set_otherpatientnames((char *)bind[i].buffer);
                break;
            case 40: 	//otherpatientids varchar
                pDis->set_otherpatientids((char *)bind[i].buffer);
                break;
            case 41: 	//patientbirthdate date
                {
                    DATE_BOOST patientbirthdate;
                    ConvertDateTime2Boost(data_patientbirthdate, &patientbirthdate);
                    pDis->set_patientbirthdate(patientbirthdate);
                }
                break;
            case 42: 	//patientsex int
                pDis->set_patientsex(data_patientsex);
                break;
            case 43: 	//patientcomments varchar
                pDis->set_patientcomments((char *)bind[i].buffer);
                break;
            case 44: 	//patientcardtype int
                pDis->set_patientcardtype(data_patientcardtype);
                break;
            case 45: 	//ethnicgroup varchar
                pDis->set_ethnicgroup((char *)bind[i].buffer);
                break;
            case 46: 	//militaryrank varchar
                pDis->set_militaryrank((char *)bind[i].buffer);
                break;
            case 47: 	//patientprotect varchar
                pDis->set_patientprotect((char *)bind[i].buffer);
                break;
            case 48: 	//patientconfirmstatus int
                pDis->set_patientconfirmstatus(data_patientconfirmstatus);
                break;
            case 49: 	//patientrejectreason varchar
                pDis->set_patientrejectreason((char *)bind[i].buffer);
                break;
            case 50: 	//patientconfirmdatetime datetime
                {
                    DATETIME_BOOST patientconfirmdatetime;
                    ConvertDateTime2Boost(data_patientconfirmdatetime, &patientconfirmdatetime);
                    pDis->set_patientconfirmdatetime(patientconfirmdatetime);
                }
                break;
            case 51: 	//emergency tinyint
                pDis->set_emergency(data_emergency);
                break;
            case 52: 	//patientaccumulateddap varchar
                pDis->set_patientaccumulateddap((char *)bind[i].buffer);
                break;
            case 53: 	//patientaccumulateddapunit varchar
                pDis->set_patientaccumulateddapunit((char *)bind[i].buffer);
                break;
            case 54: 	//voicelanguage varchar
                pDis->set_voicelanguage((char *)bind[i].buffer);
                break;
            case 55: 	//allergies varchar
                pDis->set_allergies((char *)bind[i].buffer);
                break;
            case 56: 	//lastmenstrualdate date
                {
                    DATE_BOOST lastmenstrualdate;
                    ConvertDateTime2Boost(data_lastmenstrualdate, &lastmenstrualdate);
                    pDis->set_lastmenstrualdate(lastmenstrualdate);
                }
                break;
            case 57: 	//patientstate varchar
                pDis->set_patientstate((char *)bind[i].buffer);
                break;
            case 58: 	//patientreserved0 varchar
                pDis->set_patientreserved0((char *)bind[i].buffer);
                break;
            case 59: 	//patientreserved1 varchar
                pDis->set_patientreserved1((char *)bind[i].buffer);
                break;
            case 60: 	//isactive tinyint
                pDis->set_isactive(data_isactive);
                break;
            case 61: 	//country int
                pDis->set_country(data_country);
                break;
            case 62: 	//province int
                pDis->set_province(data_province);
                break;
            case 63: 	//city varchar
                pDis->set_city((char *)bind[i].buffer);
                break;
            case 64: 	//postcode varchar
                pDis->set_postcode((char *)bind[i].buffer);
                break;
            case 65: 	//address varchar
                pDis->set_address((char *)bind[i].buffer);
                break;
            case 66: 	//originalcountry int
                pDis->set_originalcountry(data_originalcountry);
                break;
            case 67: 	//originalprovince int
                pDis->set_originalprovince(data_originalprovince);
                break;
            case 68: 	//originalcity varchar
                pDis->set_originalcity((char *)bind[i].buffer);
                break;
            case 69: 	//originalpostcode varchar
                pDis->set_originalpostcode((char *)bind[i].buffer);
                break;
            case 70: 	//originaladdress varchar
                pDis->set_originaladdress((char *)bind[i].buffer);
                break;
            case 71: 	//email varchar
                pDis->set_email((char *)bind[i].buffer);
                break;
            case 72: 	//telephone varchar
                pDis->set_telephone((char *)bind[i].buffer);
                break;
            case 73: 	//countrycode varchar
                pDis->set_countrycode((char *)bind[i].buffer);
                break;
            case 74: 	//areacode varchar
                pDis->set_areacode((char *)bind[i].buffer);
                break;
            case 75: 	//mobile varchar
                pDis->set_mobile((char *)bind[i].buffer);
                break;
            case 76: 	//emergencycontactfirstname varchar
                pDis->set_emergencycontactfirstname((char *)bind[i].buffer);
                break;
            case 77: 	//emergencycontactlastname varchar
                pDis->set_emergencycontactlastname((char *)bind[i].buffer);
                break;
            case 78: 	//emergencycontactrelationship int
                pDis->set_emergencycontactrelationship(data_emergencycontactrelationship);
                break;
            case 79: 	//emergencycontactcountry int
                pDis->set_emergencycontactcountry(data_emergencycontactcountry);
                break;
            case 80: 	//emergencycontactprovince int
                pDis->set_emergencycontactprovince(data_emergencycontactprovince);
                break;
            case 81: 	//emergencycontactcity varchar
                pDis->set_emergencycontactcity((char *)bind[i].buffer);
                break;
            case 82: 	//emergencycontactpostcode varchar
                pDis->set_emergencycontactpostcode((char *)bind[i].buffer);
                break;
            case 83: 	//emergencycontactaddress varchar
                pDis->set_emergencycontactaddress((char *)bind[i].buffer);
                break;
            case 84: 	//emergencycontactemail varchar
                pDis->set_emergencycontactemail((char *)bind[i].buffer);
                break;
            case 85: 	//emergencycontacttelephone varchar
                pDis->set_emergencycontacttelephone((char *)bind[i].buffer);
                break;
            case 86: 	//emergencycontactmobile varchar
                pDis->set_emergencycontactmobile((char *)bind[i].buffer);
                break;
            case 87: 	//emergencycontactcountrycode varchar
                pDis->set_emergencycontactcountrycode((char *)bind[i].buffer);
                break;
            case 88: 	//emergencycontactareacode varchar
                pDis->set_emergencycontactareacode((char *)bind[i].buffer);
                break;
            case 89: 	//contactfirstname varchar
                pDis->set_contactfirstname((char *)bind[i].buffer);
                break;
            case 90: 	//contactlastname varchar
                pDis->set_contactlastname((char *)bind[i].buffer);
                break;
            case 91: 	//contactrelationship int
                pDis->set_contactrelationship(data_contactrelationship);
                break;
            case 92: 	//contactcountry int
                pDis->set_contactcountry(data_contactcountry);
                break;
            case 93: 	//contactprovince int
                pDis->set_contactprovince(data_contactprovince);
                break;
            case 94: 	//contactcity varchar
                pDis->set_contactcity((char *)bind[i].buffer);
                break;
            case 95: 	//contactpostcode varchar
                pDis->set_contactpostcode((char *)bind[i].buffer);
                break;
            case 96: 	//contactaddress varchar
                pDis->set_contactaddress((char *)bind[i].buffer);
                break;
            case 97: 	//contactemail varchar
                pDis->set_contactemail((char *)bind[i].buffer);
                break;
            case 98: 	//contacttelephone varchar
                pDis->set_contacttelephone((char *)bind[i].buffer);
                break;
            case 99: 	//contactmobile varchar
                pDis->set_contactmobile((char *)bind[i].buffer);
                break;
            case 100: 	//contactcountrycode varchar
                pDis->set_contactcountrycode((char *)bind[i].buffer);
                break;
            case 101: 	//contactareacode varchar
                pDis->set_contactareacode((char *)bind[i].buffer);
                break;
            case 102: 	//state varchar
                pDis->set_state((char *)bind[i].buffer);
                break;
            case 103: 	//emergencystate varchar
                pDis->set_emergencystate((char *)bind[i].buffer);
                break;
            case 104: 	//contactstate varchar
                pDis->set_contactstate((char *)bind[i].buffer);
                break;
            case 105: 	//originalstate varchar
                pDis->set_originalstate((char *)bind[i].buffer);
                break;
            case 106: 	//weighthistory varchar
                pDis->set_weighthistory((char *)bind[i].buffer);
                break;
            case 107: 	//clincalhistory varchar
                pDis->set_clincalhistory((char *)bind[i].buffer);
                break;
            case 108: 	//crc varchar
                pDis->set_crc((char *)bind[i].buffer);
                break;
            case 109: 	//isfromhis tinyint
                pDis->set_isfromhis(data_isfromhis);
                break;
            case 110: 	//occupation int
                pDis->set_occupation(data_occupation);
                break;
            case 111: 	//patientcardphotofilepath varchar
                pDis->set_patientcardphotofilepath((char *)bind[i].buffer);
                break;
            case 112: 	//registerdate datetime
                {
                    DATETIME_BOOST registerdate;
                    ConvertDateTime2Boost(data_registerdate, &registerdate);
                    pDis->set_registerdate(registerdate);
                }
                break;
            case 113: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            case 114: 	//risk varchar
                pDis->set_risk((char *)bind[i].buffer);
                break;
            case 115: 	//enableweightlimit tinyint
                pDis->set_enableweightlimit(data_enableweightlimit);
                break;
            case 116: 	//weightuplimit double
                pDis->set_weightuplimit(data_weightuplimit);
                break;
            case 117: 	//weightdownlimit double
                pDis->set_weightdownlimit(data_weightdownlimit);
                break;
            case 118: 	//restoredatetime datetime
                {
                    DATETIME_BOOST restoredatetime;
                    ConvertDateTime2Boost(data_restoredatetime, &restoredatetime);
                    pDis->set_restoredatetime(restoredatetime);
                }
                break;
            case 119: 	//backupdatetime datetime
                {
                    DATETIME_BOOST backupdatetime;
                    ConvertDateTime2Boost(data_backupdatetime, &backupdatetime);
                    pDis->set_backupdatetime(backupdatetime);
                }
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

void RtDatabaseHelper::CalcHash(const RtPatient& src, std::string* pHash)
{
    if(nullptr == pHash) return;

    std::string columndata("");
    std::string itemdata("");
    std::string columnname("");
    std::string columnvalue("");

    for (unsigned int i(0); i < PATIENT_FIELD_MAX; ++i)
    {
        columnvalue = ""; //每次读取字段前，需要重新赋空，否则保留上个字段的值，可能出错
        switch (i)
        {
        case 0: 	//uid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_uid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 1: 	//patientid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 2: 	//patientbarcode int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_patientbarcode());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 3: 	//clinicaluid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_clinicaluid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 4: 	//issuerofpatientid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_issuerofpatientid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 5: 	//isinternal tinyint
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_isinternal());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 6: 	//attdoctorid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_attdoctorid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 7: 	//refdoctorname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_refdoctorname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 8: 	//firstname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_firstname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 9: 	//middlename varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_middlename();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 10: 	//nameprefix varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_nameprefix();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 11: 	//namesuffix varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_namesuffix();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 12: 	//lastname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_lastname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 13: 	//photofilepath varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_photofilepath();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 14: 	//ssn varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_ssn();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 15: 	//cardid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_cardid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 16: 	//patienttype int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_patienttype());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 17: 	//weightunit int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_weightunit());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 18: 	//heightunit int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_heightunit());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 19: 	//height float
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = ToString(src.get_height());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 20: 	//phone1 varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_phone1();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 21: 	//phone2 varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_phone2();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 22: 	//emailaddress varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emailaddress();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 23: 	//homeaddress varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_homeaddress();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 24: 	//homeaddressprovince varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_homeaddressprovince();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 25: 	//nation varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_nation();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 26: 	//nationality varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_nationality();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 27: 	//nativeplace varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_nativeplace();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 28: 	//nativeplaceprovince varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_nativeplaceprovince();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 29: 	//emergencycontactname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 30: 	//emergencycontactphone varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactphone();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 31: 	//oldadmissionno varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_oldadmissionno();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 32: 	//inpatientarea varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_inpatientarea();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 33: 	//association varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_association();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 34: 	//pathologyno varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_pathologyno();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 35: 	//hospitalcardid varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_hospitalcardid();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 36: 	//roomno varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_roomno();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 37: 	//bedno varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_bedno();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 38: 	//description varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_description();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 39: 	//otherpatientnames varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_otherpatientnames();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 40: 	//otherpatientids varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_otherpatientids();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 41: 	//patientbirthdate date
            {
            }
            break;
        case 42: 	//patientsex int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_patientsex());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 43: 	//patientcomments varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientcomments();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 44: 	//patientcardtype int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_patientcardtype());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 45: 	//ethnicgroup varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_ethnicgroup();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 46: 	//militaryrank varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_militaryrank();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 47: 	//patientprotect varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientprotect();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 48: 	//patientconfirmstatus int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_patientconfirmstatus());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 49: 	//patientrejectreason varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientrejectreason();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 50: 	//patientconfirmdatetime datetime
            {
            }
            break;
        case 51: 	//emergency tinyint
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_emergency());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 52: 	//patientaccumulateddap varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientaccumulateddap();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 53: 	//patientaccumulateddapunit varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientaccumulateddapunit();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 54: 	//voicelanguage varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_voicelanguage();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 55: 	//allergies varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_allergies();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 56: 	//lastmenstrualdate date
            {
            }
            break;
        case 57: 	//patientstate varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientstate();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 58: 	//patientreserved0 varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientreserved0();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 59: 	//patientreserved1 varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientreserved1();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 60: 	//isactive tinyint
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_isactive());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 61: 	//country int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_country());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 62: 	//province int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_province());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 63: 	//city varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_city();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 64: 	//postcode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_postcode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 65: 	//address varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_address();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 66: 	//originalcountry int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_originalcountry());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 67: 	//originalprovince int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_originalprovince());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 68: 	//originalcity varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_originalcity();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 69: 	//originalpostcode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_originalpostcode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 70: 	//originaladdress varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_originaladdress();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 71: 	//email varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_email();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 72: 	//telephone varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_telephone();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 73: 	//countrycode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_countrycode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 74: 	//areacode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_areacode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 75: 	//mobile varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_mobile();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 76: 	//emergencycontactfirstname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactfirstname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 77: 	//emergencycontactlastname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactlastname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 78: 	//emergencycontactrelationship int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_emergencycontactrelationship());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 79: 	//emergencycontactcountry int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_emergencycontactcountry());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 80: 	//emergencycontactprovince int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_emergencycontactprovince());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 81: 	//emergencycontactcity varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactcity();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 82: 	//emergencycontactpostcode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactpostcode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 83: 	//emergencycontactaddress varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactaddress();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 84: 	//emergencycontactemail varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactemail();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 85: 	//emergencycontacttelephone varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontacttelephone();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 86: 	//emergencycontactmobile varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactmobile();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 87: 	//emergencycontactcountrycode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactcountrycode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 88: 	//emergencycontactareacode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencycontactareacode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 89: 	//contactfirstname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactfirstname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 90: 	//contactlastname varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactlastname();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 91: 	//contactrelationship int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_contactrelationship());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 92: 	//contactcountry int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_contactcountry());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 93: 	//contactprovince int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_contactprovince());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 94: 	//contactcity varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactcity();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 95: 	//contactpostcode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactpostcode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 96: 	//contactaddress varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactaddress();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 97: 	//contactemail varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactemail();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 98: 	//contacttelephone varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contacttelephone();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 99: 	//contactmobile varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactmobile();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 100: 	//contactcountrycode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactcountrycode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 101: 	//contactareacode varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactareacode();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 102: 	//state varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_state();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 103: 	//emergencystate varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_emergencystate();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 104: 	//contactstate varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_contactstate();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 105: 	//originalstate varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_originalstate();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 106: 	//weighthistory varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_weighthistory();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 107: 	//clincalhistory varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_clincalhistory();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 108: 	//crc varchar
            {
            }
            break;
        case 109: 	//isfromhis tinyint
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_isfromhis());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 110: 	//occupation int
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_occupation());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 111: 	//patientcardphotofilepath varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_patientcardphotofilepath();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 112: 	//registerdate datetime
            {
            }
            break;
        case 113: 	//updatetime timestamp
            {
            }
            break;
        case 114: 	//risk varchar
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = src.get_risk();
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 115: 	//enableweightlimit tinyint
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = std::to_string((long long)src.get_enableweightlimit());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 116: 	//weightuplimit double
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = ToString(src.get_weightuplimit());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 117: 	//weightdownlimit double
            {
                if(!src.has_field(i))
                {
                    columnvalue = "";
                }
                else
                {
                    columnvalue = ToString(src.get_weightdownlimit());
                    RemoveSlash(columnvalue);
                }
                columndata = columnvalue + "|";
                itemdata += columndata;
            }
            break;
        case 118: 	//restoredatetime datetime
            {
            }
            break;
        case 119: 	//backupdatetime datetime
            {
            }
            break;
        default:
            break;
        }
    }
    md5_helper_t hhelper;
    //printf("\n%s\n",itemdata.c_str());
    std::string hash = hhelper.hexdigesttext(itemdata);
    errorinfo_t lasterror = hhelper.lasterror();
    if(0 == lasterror.errorCode ) 
    {
        *pHash = hash;
    }
    else
    {
        *pHash = "";
    }
}
RT_TPS_DATABASE_END_NAMESPACE