//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_doseoptendcriterionbytime.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_doseoptendcriterionbytime.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDoseoptendcriterionbytimeImp::RtDoseoptendcriterionbytimeImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_optendcriteriontype(0),
    m_runtime(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDoseoptendcriterionbytimeImp::RtDoseoptendcriterionbytimeImp(const RtDoseoptendcriterionbytimeImp& doseoptendcriterionbytime):
    m_uid(doseoptendcriterionbytime.get_uid()),
    m_optendcriteriontype(doseoptendcriterionbytime.get_optendcriteriontype()),
    m_runtime(doseoptendcriterionbytime.get_runtime()),
    m_updatetime(doseoptendcriterionbytime.get_updatetime())
{
}

RtDoseoptendcriterionbytimeImp& RtDoseoptendcriterionbytimeImp::operator=(const RtDoseoptendcriterionbytimeImp& doseoptendcriterionbytime)
{
    if (this != &doseoptendcriterionbytime){
        this->m_uid = doseoptendcriterionbytime.get_uid();
        this->m_optendcriteriontype = doseoptendcriterionbytime.get_optendcriteriontype();
        this->m_runtime = doseoptendcriterionbytime.get_runtime();
        this->m_updatetime = doseoptendcriterionbytime.get_updatetime();
    }
    return *this;
}

RtDoseoptendcriterionbytimeImp::~RtDoseoptendcriterionbytimeImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDoseoptendcriterionbytime::RtDoseoptendcriterionbytime(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDoseoptendcriterionbytimeImp(bGeneraterUid);
    set_flags(DOSEOPTENDCRITERIONBYTIME_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DOSEOPTENDCRITERIONBYTIME_FIELD_NULL);
}

RtDoseoptendcriterionbytime::RtDoseoptendcriterionbytime(const RtDoseoptendcriterionbytime& doseoptendcriterionbytime): RtDatabaseObject(doseoptendcriterionbytime),
   m_pImp(new RtDoseoptendcriterionbytimeImp(*doseoptendcriterionbytime.m_pImp))
{
}

RtDoseoptendcriterionbytime& RtDoseoptendcriterionbytime::operator = (const RtDoseoptendcriterionbytime& doseoptendcriterionbytime)
{
    if(this != &doseoptendcriterionbytime)
    {
        RtDatabaseObject::operator=(doseoptendcriterionbytime);
        *this->m_pImp = *doseoptendcriterionbytime.m_pImp;
    }
    return *this;
}

RtDoseoptendcriterionbytime::~RtDoseoptendcriterionbytime()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDoseoptendcriterionbytime::get_uid() const { return m_pImp->get_uid();}
void RtDoseoptendcriterionbytime::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DOSEOPTENDCRITERIONBYTIME_UID);
    setdirty_field(DOSEOPTENDCRITERIONBYTIME_UID, true);
}

//optendcriteriontype
int RtDoseoptendcriterionbytime::get_optendcriteriontype() const { return m_pImp->get_optendcriteriontype();}
void RtDoseoptendcriterionbytime::set_optendcriteriontype(const int& optendcriteriontype)
{
    m_pImp->set_optendcriteriontype(optendcriteriontype);
    enable_field(DOSEOPTENDCRITERIONBYTIME_OPTENDCRITERIONTYPE);
    setdirty_field(DOSEOPTENDCRITERIONBYTIME_OPTENDCRITERIONTYPE, true);
}

//runtime
float RtDoseoptendcriterionbytime::get_runtime() const { return m_pImp->get_runtime();}
void RtDoseoptendcriterionbytime::set_runtime(const float& runtime)
{
    m_pImp->set_runtime(runtime);
    enable_field(DOSEOPTENDCRITERIONBYTIME_RUNTIME);
    setdirty_field(DOSEOPTENDCRITERIONBYTIME_RUNTIME, true);
}

//updatetime
DATETIME_BOOST RtDoseoptendcriterionbytime::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDoseoptendcriterionbytime::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DOSEOPTENDCRITERIONBYTIME_UPDATETIME);
    setdirty_field(DOSEOPTENDCRITERIONBYTIME_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE