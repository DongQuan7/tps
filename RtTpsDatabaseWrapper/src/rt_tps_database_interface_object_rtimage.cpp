//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_rtimage.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_rtimage.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtRtimageImp::RtRtimageImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_sopinstanceuid(""),
    m_courseuid(""),
    m_isocenteruid(""),
    m_seriesuid(""),
    m_drrsettinguid(""),
    m_planuid(""),
    m_beamuid(""),
    m_treatmentbeamuid(""),
    m_sessionuid(""),
    m_fbctuid(""),
    m_imagebeamuid(""),
    m_portimagebeamuid(""),
    m_samplesperpixel(0),
    m_photometricinterpretation(""),
    m_bitsallocated(0),
    m_bitsstored(0),
    m_highbit(0),
    m_pixelrepresentation(""),
    m_name(""),
    m_rtimagelabel(""),
    m_description(""),
    m_imagetype(0),
    m_conversiontype(0),
    m_rtimageplane(0),
    m_xrimagereceptorangle(0.),
    m_firstimageplanepixelspacing(0.f),
    m_secondimageplanepixelspacing(0.f),
    m_firstrtimageposition(0.f),
    m_secondrtimageposition(0.f),
    m_machinename(""),
    m_primarydosimeterunit(""),
    m_sad(0.f),
    m_ssd(0.f),
    m_sid(0.f),
    m_rows(0),
    m_columns(0),
    m_frame(0),
    m_pixeldata(nullptr),
    m_ximagexorientation(0.f),
    m_yimagexorientation(0.f),
    m_zimagexorientation(0.f),
    m_ximageyorientation(0.f),
    m_yimageyorientation(0.f),
    m_zimageyorientation(0.f),
    m_angle(0.f),
    m_windowwidth(0.),
    m_windowcenter(0.),
    m_acquisitiondatetime(boost::date_time::not_a_date_time),
    m_rescaleintercept(0.),
    m_rescaleslope(0.),
    m_xrayimagereceptortranslationx(0.f),
    m_xrayimagereceptortranslationy(0.f),
    m_xrayimagereceptortranslationz(0.f),
    m_isselected(false),
    m_collimatorangle(0.),
    m_updatetime(boost::date_time::not_a_date_time),
    m_patientname(""),
    m_patientid(""),
    m_patientsex(0),
    m_patientbirthdate(boost::date_time::not_a_date_time),
    m_patientage(0),
    m_dicomimagetype(""),
    m_patientposition(0)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtRtimageImp::RtRtimageImp(const RtRtimageImp& rtimage):
    m_uid(rtimage.get_uid()),
    m_sopinstanceuid(rtimage.get_sopinstanceuid()),
    m_courseuid(rtimage.get_courseuid()),
    m_isocenteruid(rtimage.get_isocenteruid()),
    m_seriesuid(rtimage.get_seriesuid()),
    m_drrsettinguid(rtimage.get_drrsettinguid()),
    m_planuid(rtimage.get_planuid()),
    m_beamuid(rtimage.get_beamuid()),
    m_treatmentbeamuid(rtimage.get_treatmentbeamuid()),
    m_sessionuid(rtimage.get_sessionuid()),
    m_fbctuid(rtimage.get_fbctuid()),
    m_imagebeamuid(rtimage.get_imagebeamuid()),
    m_portimagebeamuid(rtimage.get_portimagebeamuid()),
    m_samplesperpixel(rtimage.get_samplesperpixel()),
    m_photometricinterpretation(rtimage.get_photometricinterpretation()),
    m_bitsallocated(rtimage.get_bitsallocated()),
    m_bitsstored(rtimage.get_bitsstored()),
    m_highbit(rtimage.get_highbit()),
    m_pixelrepresentation(rtimage.get_pixelrepresentation()),
    m_name(rtimage.get_name()),
    m_rtimagelabel(rtimage.get_rtimagelabel()),
    m_description(rtimage.get_description()),
    m_imagetype(rtimage.get_imagetype()),
    m_conversiontype(rtimage.get_conversiontype()),
    m_rtimageplane(rtimage.get_rtimageplane()),
    m_xrimagereceptorangle(rtimage.get_xrimagereceptorangle()),
    m_firstimageplanepixelspacing(rtimage.get_firstimageplanepixelspacing()),
    m_secondimageplanepixelspacing(rtimage.get_secondimageplanepixelspacing()),
    m_firstrtimageposition(rtimage.get_firstrtimageposition()),
    m_secondrtimageposition(rtimage.get_secondrtimageposition()),
    m_machinename(rtimage.get_machinename()),
    m_primarydosimeterunit(rtimage.get_primarydosimeterunit()),
    m_sad(rtimage.get_sad()),
    m_ssd(rtimage.get_ssd()),
    m_sid(rtimage.get_sid()),
    m_rows(rtimage.get_rows()),
    m_columns(rtimage.get_columns()),
    m_frame(rtimage.get_frame()),
    m_ximagexorientation(rtimage.get_ximagexorientation()),
    m_yimagexorientation(rtimage.get_yimagexorientation()),
    m_zimagexorientation(rtimage.get_zimagexorientation()),
    m_ximageyorientation(rtimage.get_ximageyorientation()),
    m_yimageyorientation(rtimage.get_yimageyorientation()),
    m_zimageyorientation(rtimage.get_zimageyorientation()),
    m_angle(rtimage.get_angle()),
    m_windowwidth(rtimage.get_windowwidth()),
    m_windowcenter(rtimage.get_windowcenter()),
    m_acquisitiondatetime(rtimage.get_acquisitiondatetime()),
    m_rescaleintercept(rtimage.get_rescaleintercept()),
    m_rescaleslope(rtimage.get_rescaleslope()),
    m_xrayimagereceptortranslationx(rtimage.get_xrayimagereceptortranslationx()),
    m_xrayimagereceptortranslationy(rtimage.get_xrayimagereceptortranslationy()),
    m_xrayimagereceptortranslationz(rtimage.get_xrayimagereceptortranslationz()),
    m_isselected(rtimage.get_isselected()),
    m_collimatorangle(rtimage.get_collimatorangle()),
    m_updatetime(rtimage.get_updatetime()),
    m_patientname(rtimage.get_patientname()),
    m_patientid(rtimage.get_patientid()),
    m_patientsex(rtimage.get_patientsex()),
    m_patientbirthdate(rtimage.get_patientbirthdate()),
    m_patientage(rtimage.get_patientage()),
    m_dicomimagetype(rtimage.get_dicomimagetype()),
    m_patientposition(rtimage.get_patientposition())
{
    unsigned long len;
    char* buffer = rtimage.get_pixel_data_buffer(&len);
    m_pixeldata = nullptr;
    if (len > 0 && nullptr != buffer){
        m_pixeldata = new char[len];
        memcpy(m_pixeldata, buffer, len);
    }
}

RtRtimageImp& RtRtimageImp::operator=(const RtRtimageImp& rtimage)
{
    if (this != &rtimage){
        this->m_uid = rtimage.get_uid();
        this->m_sopinstanceuid = rtimage.get_sopinstanceuid();
        this->m_courseuid = rtimage.get_courseuid();
        this->m_isocenteruid = rtimage.get_isocenteruid();
        this->m_seriesuid = rtimage.get_seriesuid();
        this->m_drrsettinguid = rtimage.get_drrsettinguid();
        this->m_planuid = rtimage.get_planuid();
        this->m_beamuid = rtimage.get_beamuid();
        this->m_treatmentbeamuid = rtimage.get_treatmentbeamuid();
        this->m_sessionuid = rtimage.get_sessionuid();
        this->m_fbctuid = rtimage.get_fbctuid();
        this->m_imagebeamuid = rtimage.get_imagebeamuid();
        this->m_portimagebeamuid = rtimage.get_portimagebeamuid();
        this->m_samplesperpixel = rtimage.get_samplesperpixel();
        this->m_photometricinterpretation = rtimage.get_photometricinterpretation();
        this->m_bitsallocated = rtimage.get_bitsallocated();
        this->m_bitsstored = rtimage.get_bitsstored();
        this->m_highbit = rtimage.get_highbit();
        this->m_pixelrepresentation = rtimage.get_pixelrepresentation();
        this->m_name = rtimage.get_name();
        this->m_rtimagelabel = rtimage.get_rtimagelabel();
        this->m_description = rtimage.get_description();
        this->m_imagetype = rtimage.get_imagetype();
        this->m_conversiontype = rtimage.get_conversiontype();
        this->m_rtimageplane = rtimage.get_rtimageplane();
        this->m_xrimagereceptorangle = rtimage.get_xrimagereceptorangle();
        this->m_firstimageplanepixelspacing = rtimage.get_firstimageplanepixelspacing();
        this->m_secondimageplanepixelspacing = rtimage.get_secondimageplanepixelspacing();
        this->m_firstrtimageposition = rtimage.get_firstrtimageposition();
        this->m_secondrtimageposition = rtimage.get_secondrtimageposition();
        this->m_machinename = rtimage.get_machinename();
        this->m_primarydosimeterunit = rtimage.get_primarydosimeterunit();
        this->m_sad = rtimage.get_sad();
        this->m_ssd = rtimage.get_ssd();
        this->m_sid = rtimage.get_sid();
        this->m_rows = rtimage.get_rows();
        this->m_columns = rtimage.get_columns();
        this->m_frame = rtimage.get_frame();
        this->m_ximagexorientation = rtimage.get_ximagexorientation();
        this->m_yimagexorientation = rtimage.get_yimagexorientation();
        this->m_zimagexorientation = rtimage.get_zimagexorientation();
        this->m_ximageyorientation = rtimage.get_ximageyorientation();
        this->m_yimageyorientation = rtimage.get_yimageyorientation();
        this->m_zimageyorientation = rtimage.get_zimageyorientation();
        this->m_angle = rtimage.get_angle();
        this->m_windowwidth = rtimage.get_windowwidth();
        this->m_windowcenter = rtimage.get_windowcenter();
        this->m_acquisitiondatetime = rtimage.get_acquisitiondatetime();
        this->m_rescaleintercept = rtimage.get_rescaleintercept();
        this->m_rescaleslope = rtimage.get_rescaleslope();
        this->m_xrayimagereceptortranslationx = rtimage.get_xrayimagereceptortranslationx();
        this->m_xrayimagereceptortranslationy = rtimage.get_xrayimagereceptortranslationy();
        this->m_xrayimagereceptortranslationz = rtimage.get_xrayimagereceptortranslationz();
        this->m_isselected = rtimage.get_isselected();
        this->m_collimatorangle = rtimage.get_collimatorangle();
        this->m_updatetime = rtimage.get_updatetime();
        this->m_patientname = rtimage.get_patientname();
        this->m_patientid = rtimage.get_patientid();
        this->m_patientsex = rtimage.get_patientsex();
        this->m_patientbirthdate = rtimage.get_patientbirthdate();
        this->m_patientage = rtimage.get_patientage();
        this->m_dicomimagetype = rtimage.get_dicomimagetype();
        this->m_patientposition = rtimage.get_patientposition();
        unsigned long len;
        char* buffer = rtimage.get_pixel_data_buffer(&len);
        m_pixeldata = nullptr;
        if (len > 0 && nullptr != buffer){
            m_pixeldata = new char[len];
            memcpy(m_pixeldata, buffer, len);
        }
    }
    return *this;
}

RtRtimageImp::~RtRtimageImp()
{
    DEL_ARRAY(m_pixeldata);
}

//////////////////////////////////////////////////////////////////////////
void RtRtimageImp::set_pixel_data_buffer(char* pBuffer, unsigned long lLen)
{
    if (lLen > 0)
    {
        DEL_ARRAY(m_pixeldata);
        m_pixeldata = new char[lLen];
        memcpy(m_pixeldata, pBuffer, lLen*sizeof(char));
    }
}

char* RtRtimageImp::get_pixel_data_buffer(unsigned long* lLen) const
{
    *lLen = m_rows * m_columns * m_frame * m_bitsallocated/8 * m_samplesperpixel;
    return m_pixeldata;
}

//////////////////////////////////////////////////////////////////////////
RtRtimage::RtRtimage(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtRtimageImp(bGeneraterUid);
    set_flags(RTIMAGE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_RTIMAGE_FIELD_NULL);
}

RtRtimage::RtRtimage(const RtRtimage& rtimage): RtDatabaseObject(rtimage),
   m_pImp(new RtRtimageImp(*rtimage.m_pImp))
{
}

RtRtimage& RtRtimage::operator = (const RtRtimage& rtimage)
{
    if(this != &rtimage)
    {
        RtDatabaseObject::operator=(rtimage);
        *this->m_pImp = *rtimage.m_pImp;
    }
    return *this;
}

RtRtimage::~RtRtimage()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtRtimage::get_uid() const { return m_pImp->get_uid();}
void RtRtimage::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(RTIMAGE_UID);
    setdirty_field(RTIMAGE_UID, true);
}

//sopinstanceuid
std::string RtRtimage::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtRtimage::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(RTIMAGE_SOPINSTANCEUID);
    setdirty_field(RTIMAGE_SOPINSTANCEUID, true);
}

//courseuid
std::string RtRtimage::get_courseuid() const { return m_pImp->get_courseuid();}
void RtRtimage::set_courseuid(const std::string& courseuid)
{
    m_pImp->set_courseuid(courseuid);
    enable_field(RTIMAGE_COURSEUID);
    setdirty_field(RTIMAGE_COURSEUID, true);
}

//isocenteruid
std::string RtRtimage::get_isocenteruid() const { return m_pImp->get_isocenteruid();}
void RtRtimage::set_isocenteruid(const std::string& isocenteruid)
{
    m_pImp->set_isocenteruid(isocenteruid);
    enable_field(RTIMAGE_ISOCENTERUID);
    setdirty_field(RTIMAGE_ISOCENTERUID, true);
}

//seriesuid
std::string RtRtimage::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtRtimage::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(RTIMAGE_SERIESUID);
    setdirty_field(RTIMAGE_SERIESUID, true);
}

//drrsettinguid
std::string RtRtimage::get_drrsettinguid() const { return m_pImp->get_drrsettinguid();}
void RtRtimage::set_drrsettinguid(const std::string& drrsettinguid)
{
    m_pImp->set_drrsettinguid(drrsettinguid);
    enable_field(RTIMAGE_DRRSETTINGUID);
    setdirty_field(RTIMAGE_DRRSETTINGUID, true);
}

//planuid
std::string RtRtimage::get_planuid() const { return m_pImp->get_planuid();}
void RtRtimage::set_planuid(const std::string& planuid)
{
    m_pImp->set_planuid(planuid);
    enable_field(RTIMAGE_PLANUID);
    setdirty_field(RTIMAGE_PLANUID, true);
}

//beamuid
std::string RtRtimage::get_beamuid() const { return m_pImp->get_beamuid();}
void RtRtimage::set_beamuid(const std::string& beamuid)
{
    m_pImp->set_beamuid(beamuid);
    enable_field(RTIMAGE_BEAMUID);
    setdirty_field(RTIMAGE_BEAMUID, true);
}

//treatmentbeamuid
std::string RtRtimage::get_treatmentbeamuid() const { return m_pImp->get_treatmentbeamuid();}
void RtRtimage::set_treatmentbeamuid(const std::string& treatmentbeamuid)
{
    m_pImp->set_treatmentbeamuid(treatmentbeamuid);
    enable_field(RTIMAGE_TREATMENTBEAMUID);
    setdirty_field(RTIMAGE_TREATMENTBEAMUID, true);
}

//sessionuid
std::string RtRtimage::get_sessionuid() const { return m_pImp->get_sessionuid();}
void RtRtimage::set_sessionuid(const std::string& sessionuid)
{
    m_pImp->set_sessionuid(sessionuid);
    enable_field(RTIMAGE_SESSIONUID);
    setdirty_field(RTIMAGE_SESSIONUID, true);
}

//fbctuid
std::string RtRtimage::get_fbctuid() const { return m_pImp->get_fbctuid();}
void RtRtimage::set_fbctuid(const std::string& fbctuid)
{
    m_pImp->set_fbctuid(fbctuid);
    enable_field(RTIMAGE_FBCTUID);
    setdirty_field(RTIMAGE_FBCTUID, true);
}

//imagebeamuid
std::string RtRtimage::get_imagebeamuid() const { return m_pImp->get_imagebeamuid();}
void RtRtimage::set_imagebeamuid(const std::string& imagebeamuid)
{
    m_pImp->set_imagebeamuid(imagebeamuid);
    enable_field(RTIMAGE_IMAGEBEAMUID);
    setdirty_field(RTIMAGE_IMAGEBEAMUID, true);
}

//portimagebeamuid
std::string RtRtimage::get_portimagebeamuid() const { return m_pImp->get_portimagebeamuid();}
void RtRtimage::set_portimagebeamuid(const std::string& portimagebeamuid)
{
    m_pImp->set_portimagebeamuid(portimagebeamuid);
    enable_field(RTIMAGE_PORTIMAGEBEAMUID);
    setdirty_field(RTIMAGE_PORTIMAGEBEAMUID, true);
}

//samplesperpixel
int RtRtimage::get_samplesperpixel() const { return m_pImp->get_samplesperpixel();}
void RtRtimage::set_samplesperpixel(const int& samplesperpixel)
{
    m_pImp->set_samplesperpixel(samplesperpixel);
    enable_field(RTIMAGE_SAMPLESPERPIXEL);
    setdirty_field(RTIMAGE_SAMPLESPERPIXEL, true);
}

//photometricinterpretation
std::string RtRtimage::get_photometricinterpretation() const { return m_pImp->get_photometricinterpretation();}
void RtRtimage::set_photometricinterpretation(const std::string& photometricinterpretation)
{
    m_pImp->set_photometricinterpretation(photometricinterpretation);
    enable_field(RTIMAGE_PHOTOMETRICINTERPRETATION);
    setdirty_field(RTIMAGE_PHOTOMETRICINTERPRETATION, true);
}

//bitsallocated
int RtRtimage::get_bitsallocated() const { return m_pImp->get_bitsallocated();}
void RtRtimage::set_bitsallocated(const int& bitsallocated)
{
    m_pImp->set_bitsallocated(bitsallocated);
    enable_field(RTIMAGE_BITSALLOCATED);
    setdirty_field(RTIMAGE_BITSALLOCATED, true);
}

//bitsstored
int RtRtimage::get_bitsstored() const { return m_pImp->get_bitsstored();}
void RtRtimage::set_bitsstored(const int& bitsstored)
{
    m_pImp->set_bitsstored(bitsstored);
    enable_field(RTIMAGE_BITSSTORED);
    setdirty_field(RTIMAGE_BITSSTORED, true);
}

//highbit
int RtRtimage::get_highbit() const { return m_pImp->get_highbit();}
void RtRtimage::set_highbit(const int& highbit)
{
    m_pImp->set_highbit(highbit);
    enable_field(RTIMAGE_HIGHBIT);
    setdirty_field(RTIMAGE_HIGHBIT, true);
}

//pixelrepresentation
std::string RtRtimage::get_pixelrepresentation() const { return m_pImp->get_pixelrepresentation();}
void RtRtimage::set_pixelrepresentation(const std::string& pixelrepresentation)
{
    m_pImp->set_pixelrepresentation(pixelrepresentation);
    enable_field(RTIMAGE_PIXELREPRESENTATION);
    setdirty_field(RTIMAGE_PIXELREPRESENTATION, true);
}

//name
std::string RtRtimage::get_name() const { return m_pImp->get_name();}
void RtRtimage::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(RTIMAGE_NAME);
    setdirty_field(RTIMAGE_NAME, true);
}

//rtimagelabel
std::string RtRtimage::get_rtimagelabel() const { return m_pImp->get_rtimagelabel();}
void RtRtimage::set_rtimagelabel(const std::string& rtimagelabel)
{
    m_pImp->set_rtimagelabel(rtimagelabel);
    enable_field(RTIMAGE_RTIMAGELABEL);
    setdirty_field(RTIMAGE_RTIMAGELABEL, true);
}

//description
std::string RtRtimage::get_description() const { return m_pImp->get_description();}
void RtRtimage::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(RTIMAGE_DESCRIPTION);
    setdirty_field(RTIMAGE_DESCRIPTION, true);
}

//imagetype
int RtRtimage::get_imagetype() const { return m_pImp->get_imagetype();}
void RtRtimage::set_imagetype(const int& imagetype)
{
    m_pImp->set_imagetype(imagetype);
    enable_field(RTIMAGE_IMAGETYPE);
    setdirty_field(RTIMAGE_IMAGETYPE, true);
}

//conversiontype
int RtRtimage::get_conversiontype() const { return m_pImp->get_conversiontype();}
void RtRtimage::set_conversiontype(const int& conversiontype)
{
    m_pImp->set_conversiontype(conversiontype);
    enable_field(RTIMAGE_CONVERSIONTYPE);
    setdirty_field(RTIMAGE_CONVERSIONTYPE, true);
}

//rtimageplane
int RtRtimage::get_rtimageplane() const { return m_pImp->get_rtimageplane();}
void RtRtimage::set_rtimageplane(const int& rtimageplane)
{
    m_pImp->set_rtimageplane(rtimageplane);
    enable_field(RTIMAGE_RTIMAGEPLANE);
    setdirty_field(RTIMAGE_RTIMAGEPLANE, true);
}

//xrimagereceptorangle
double RtRtimage::get_xrimagereceptorangle() const { return m_pImp->get_xrimagereceptorangle();}
void RtRtimage::set_xrimagereceptorangle(const double& xrimagereceptorangle)
{
    m_pImp->set_xrimagereceptorangle(xrimagereceptorangle);
    enable_field(RTIMAGE_XRIMAGERECEPTORANGLE);
    setdirty_field(RTIMAGE_XRIMAGERECEPTORANGLE, true);
}

//firstimageplanepixelspacing
float RtRtimage::get_firstimageplanepixelspacing() const { return m_pImp->get_firstimageplanepixelspacing();}
void RtRtimage::set_firstimageplanepixelspacing(const float& firstimageplanepixelspacing)
{
    m_pImp->set_firstimageplanepixelspacing(firstimageplanepixelspacing);
    enable_field(RTIMAGE_FIRSTIMAGEPLANEPIXELSPACING);
    setdirty_field(RTIMAGE_FIRSTIMAGEPLANEPIXELSPACING, true);
}

//secondimageplanepixelspacing
float RtRtimage::get_secondimageplanepixelspacing() const { return m_pImp->get_secondimageplanepixelspacing();}
void RtRtimage::set_secondimageplanepixelspacing(const float& secondimageplanepixelspacing)
{
    m_pImp->set_secondimageplanepixelspacing(secondimageplanepixelspacing);
    enable_field(RTIMAGE_SECONDIMAGEPLANEPIXELSPACING);
    setdirty_field(RTIMAGE_SECONDIMAGEPLANEPIXELSPACING, true);
}

//firstrtimageposition
float RtRtimage::get_firstrtimageposition() const { return m_pImp->get_firstrtimageposition();}
void RtRtimage::set_firstrtimageposition(const float& firstrtimageposition)
{
    m_pImp->set_firstrtimageposition(firstrtimageposition);
    enable_field(RTIMAGE_FIRSTRTIMAGEPOSITION);
    setdirty_field(RTIMAGE_FIRSTRTIMAGEPOSITION, true);
}

//secondrtimageposition
float RtRtimage::get_secondrtimageposition() const { return m_pImp->get_secondrtimageposition();}
void RtRtimage::set_secondrtimageposition(const float& secondrtimageposition)
{
    m_pImp->set_secondrtimageposition(secondrtimageposition);
    enable_field(RTIMAGE_SECONDRTIMAGEPOSITION);
    setdirty_field(RTIMAGE_SECONDRTIMAGEPOSITION, true);
}

//machinename
std::string RtRtimage::get_machinename() const { return m_pImp->get_machinename();}
void RtRtimage::set_machinename(const std::string& machinename)
{
    m_pImp->set_machinename(machinename);
    enable_field(RTIMAGE_MACHINENAME);
    setdirty_field(RTIMAGE_MACHINENAME, true);
}

//primarydosimeterunit
std::string RtRtimage::get_primarydosimeterunit() const { return m_pImp->get_primarydosimeterunit();}
void RtRtimage::set_primarydosimeterunit(const std::string& primarydosimeterunit)
{
    m_pImp->set_primarydosimeterunit(primarydosimeterunit);
    enable_field(RTIMAGE_PRIMARYDOSIMETERUNIT);
    setdirty_field(RTIMAGE_PRIMARYDOSIMETERUNIT, true);
}

//sad
float RtRtimage::get_sad() const { return m_pImp->get_sad();}
void RtRtimage::set_sad(const float& sad)
{
    m_pImp->set_sad(sad);
    enable_field(RTIMAGE_SAD);
    setdirty_field(RTIMAGE_SAD, true);
}

//ssd
float RtRtimage::get_ssd() const { return m_pImp->get_ssd();}
void RtRtimage::set_ssd(const float& ssd)
{
    m_pImp->set_ssd(ssd);
    enable_field(RTIMAGE_SSD);
    setdirty_field(RTIMAGE_SSD, true);
}

//sid
float RtRtimage::get_sid() const { return m_pImp->get_sid();}
void RtRtimage::set_sid(const float& sid)
{
    m_pImp->set_sid(sid);
    enable_field(RTIMAGE_SID);
    setdirty_field(RTIMAGE_SID, true);
}

//rows
int RtRtimage::get_rows() const { return m_pImp->get_rows();}
void RtRtimage::set_rows(const int& rows)
{
    m_pImp->set_rows(rows);
    enable_field(RTIMAGE_ROWS);
    setdirty_field(RTIMAGE_ROWS, true);
}

//columns
int RtRtimage::get_columns() const { return m_pImp->get_columns();}
void RtRtimage::set_columns(const int& columns)
{
    m_pImp->set_columns(columns);
    enable_field(RTIMAGE_COLUMNS);
    setdirty_field(RTIMAGE_COLUMNS, true);
}

//frame
int RtRtimage::get_frame() const { return m_pImp->get_frame();}
void RtRtimage::set_frame(const int& frame)
{
    m_pImp->set_frame(frame);
    enable_field(RTIMAGE_FRAME);
    setdirty_field(RTIMAGE_FRAME, true);
}

//pixeldata
void RtRtimage::set_pixel_data_buffer(char* pBuffer, unsigned long lLen)
{
    m_pImp->set_pixel_data_buffer(pBuffer, lLen);
    enable_field(RTIMAGE_PIXELDATA);
    setdirty_field(RTIMAGE_PIXELDATA, true);
}

char* RtRtimage::get_pixel_data_buffer(unsigned long* lLen) const { return m_pImp->get_pixel_data_buffer(lLen);}

//ximagexorientation
float RtRtimage::get_ximagexorientation() const { return m_pImp->get_ximagexorientation();}
void RtRtimage::set_ximagexorientation(const float& ximagexorientation)
{
    m_pImp->set_ximagexorientation(ximagexorientation);
    enable_field(RTIMAGE_XIMAGEXORIENTATION);
    setdirty_field(RTIMAGE_XIMAGEXORIENTATION, true);
}

//yimagexorientation
float RtRtimage::get_yimagexorientation() const { return m_pImp->get_yimagexorientation();}
void RtRtimage::set_yimagexorientation(const float& yimagexorientation)
{
    m_pImp->set_yimagexorientation(yimagexorientation);
    enable_field(RTIMAGE_YIMAGEXORIENTATION);
    setdirty_field(RTIMAGE_YIMAGEXORIENTATION, true);
}

//zimagexorientation
float RtRtimage::get_zimagexorientation() const { return m_pImp->get_zimagexorientation();}
void RtRtimage::set_zimagexorientation(const float& zimagexorientation)
{
    m_pImp->set_zimagexorientation(zimagexorientation);
    enable_field(RTIMAGE_ZIMAGEXORIENTATION);
    setdirty_field(RTIMAGE_ZIMAGEXORIENTATION, true);
}

//ximageyorientation
float RtRtimage::get_ximageyorientation() const { return m_pImp->get_ximageyorientation();}
void RtRtimage::set_ximageyorientation(const float& ximageyorientation)
{
    m_pImp->set_ximageyorientation(ximageyorientation);
    enable_field(RTIMAGE_XIMAGEYORIENTATION);
    setdirty_field(RTIMAGE_XIMAGEYORIENTATION, true);
}

//yimageyorientation
float RtRtimage::get_yimageyorientation() const { return m_pImp->get_yimageyorientation();}
void RtRtimage::set_yimageyorientation(const float& yimageyorientation)
{
    m_pImp->set_yimageyorientation(yimageyorientation);
    enable_field(RTIMAGE_YIMAGEYORIENTATION);
    setdirty_field(RTIMAGE_YIMAGEYORIENTATION, true);
}

//zimageyorientation
float RtRtimage::get_zimageyorientation() const { return m_pImp->get_zimageyorientation();}
void RtRtimage::set_zimageyorientation(const float& zimageyorientation)
{
    m_pImp->set_zimageyorientation(zimageyorientation);
    enable_field(RTIMAGE_ZIMAGEYORIENTATION);
    setdirty_field(RTIMAGE_ZIMAGEYORIENTATION, true);
}

//angle
float RtRtimage::get_angle() const { return m_pImp->get_angle();}
void RtRtimage::set_angle(const float& angle)
{
    m_pImp->set_angle(angle);
    enable_field(RTIMAGE_ANGLE);
    setdirty_field(RTIMAGE_ANGLE, true);
}

//windowwidth
double RtRtimage::get_windowwidth() const { return m_pImp->get_windowwidth();}
void RtRtimage::set_windowwidth(const double& windowwidth)
{
    m_pImp->set_windowwidth(windowwidth);
    enable_field(RTIMAGE_WINDOWWIDTH);
    setdirty_field(RTIMAGE_WINDOWWIDTH, true);
}

//windowcenter
double RtRtimage::get_windowcenter() const { return m_pImp->get_windowcenter();}
void RtRtimage::set_windowcenter(const double& windowcenter)
{
    m_pImp->set_windowcenter(windowcenter);
    enable_field(RTIMAGE_WINDOWCENTER);
    setdirty_field(RTIMAGE_WINDOWCENTER, true);
}

//acquisitiondatetime
DATETIME_BOOST RtRtimage::get_acquisitiondatetime() const { return m_pImp->get_acquisitiondatetime();}
void RtRtimage::set_acquisitiondatetime(const DATETIME_BOOST& acquisitiondatetime)
{
    m_pImp->set_acquisitiondatetime(acquisitiondatetime);
    enable_field(RTIMAGE_ACQUISITIONDATETIME);
    setdirty_field(RTIMAGE_ACQUISITIONDATETIME, true);
}

//rescaleintercept
double RtRtimage::get_rescaleintercept() const { return m_pImp->get_rescaleintercept();}
void RtRtimage::set_rescaleintercept(const double& rescaleintercept)
{
    m_pImp->set_rescaleintercept(rescaleintercept);
    enable_field(RTIMAGE_RESCALEINTERCEPT);
    setdirty_field(RTIMAGE_RESCALEINTERCEPT, true);
}

//rescaleslope
double RtRtimage::get_rescaleslope() const { return m_pImp->get_rescaleslope();}
void RtRtimage::set_rescaleslope(const double& rescaleslope)
{
    m_pImp->set_rescaleslope(rescaleslope);
    enable_field(RTIMAGE_RESCALESLOPE);
    setdirty_field(RTIMAGE_RESCALESLOPE, true);
}

//xrayimagereceptortranslationx
float RtRtimage::get_xrayimagereceptortranslationx() const { return m_pImp->get_xrayimagereceptortranslationx();}
void RtRtimage::set_xrayimagereceptortranslationx(const float& xrayimagereceptortranslationx)
{
    m_pImp->set_xrayimagereceptortranslationx(xrayimagereceptortranslationx);
    enable_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONX);
    setdirty_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONX, true);
}

//xrayimagereceptortranslationy
float RtRtimage::get_xrayimagereceptortranslationy() const { return m_pImp->get_xrayimagereceptortranslationy();}
void RtRtimage::set_xrayimagereceptortranslationy(const float& xrayimagereceptortranslationy)
{
    m_pImp->set_xrayimagereceptortranslationy(xrayimagereceptortranslationy);
    enable_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONY);
    setdirty_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONY, true);
}

//xrayimagereceptortranslationz
float RtRtimage::get_xrayimagereceptortranslationz() const { return m_pImp->get_xrayimagereceptortranslationz();}
void RtRtimage::set_xrayimagereceptortranslationz(const float& xrayimagereceptortranslationz)
{
    m_pImp->set_xrayimagereceptortranslationz(xrayimagereceptortranslationz);
    enable_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONZ);
    setdirty_field(RTIMAGE_XRAYIMAGERECEPTORTRANSLATIONZ, true);
}

//isselected
bool RtRtimage::get_isselected() const { return m_pImp->get_isselected();}
void RtRtimage::set_isselected(const bool& isselected)
{
    m_pImp->set_isselected(isselected);
    enable_field(RTIMAGE_ISSELECTED);
    setdirty_field(RTIMAGE_ISSELECTED, true);
}

//collimatorangle
double RtRtimage::get_collimatorangle() const { return m_pImp->get_collimatorangle();}
void RtRtimage::set_collimatorangle(const double& collimatorangle)
{
    m_pImp->set_collimatorangle(collimatorangle);
    enable_field(RTIMAGE_COLLIMATORANGLE);
    setdirty_field(RTIMAGE_COLLIMATORANGLE, true);
}

//updatetime
DATETIME_BOOST RtRtimage::get_updatetime() const { return m_pImp->get_updatetime();}
void RtRtimage::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(RTIMAGE_UPDATETIME);
    setdirty_field(RTIMAGE_UPDATETIME, true);
}

//patientname
std::string RtRtimage::get_patientname() const { return m_pImp->get_patientname();}
void RtRtimage::set_patientname(const std::string& patientname)
{
    m_pImp->set_patientname(patientname);
    enable_field(RTIMAGE_PATIENTNAME);
    setdirty_field(RTIMAGE_PATIENTNAME, true);
}

//patientid
std::string RtRtimage::get_patientid() const { return m_pImp->get_patientid();}
void RtRtimage::set_patientid(const std::string& patientid)
{
    m_pImp->set_patientid(patientid);
    enable_field(RTIMAGE_PATIENTID);
    setdirty_field(RTIMAGE_PATIENTID, true);
}

//patientsex
int RtRtimage::get_patientsex() const { return m_pImp->get_patientsex();}
void RtRtimage::set_patientsex(const int& patientsex)
{
    m_pImp->set_patientsex(patientsex);
    enable_field(RTIMAGE_PATIENTSEX);
    setdirty_field(RTIMAGE_PATIENTSEX, true);
}

//patientbirthdate
DATETIME_BOOST RtRtimage::get_patientbirthdate() const { return m_pImp->get_patientbirthdate();}
void RtRtimage::set_patientbirthdate(const DATETIME_BOOST& patientbirthdate)
{
    m_pImp->set_patientbirthdate(patientbirthdate);
    enable_field(RTIMAGE_PATIENTBIRTHDATE);
    setdirty_field(RTIMAGE_PATIENTBIRTHDATE, true);
}

//patientage
int RtRtimage::get_patientage() const { return m_pImp->get_patientage();}
void RtRtimage::set_patientage(const int& patientage)
{
    m_pImp->set_patientage(patientage);
    enable_field(RTIMAGE_PATIENTAGE);
    setdirty_field(RTIMAGE_PATIENTAGE, true);
}

//dicomimagetype
std::string RtRtimage::get_dicomimagetype() const { return m_pImp->get_dicomimagetype();}
void RtRtimage::set_dicomimagetype(const std::string& dicomimagetype)
{
    m_pImp->set_dicomimagetype(dicomimagetype);
    enable_field(RTIMAGE_DICOMIMAGETYPE);
    setdirty_field(RTIMAGE_DICOMIMAGETYPE, true);
}

//patientposition
int RtRtimage::get_patientposition() const { return m_pImp->get_patientposition();}
void RtRtimage::set_patientposition(const int& patientposition)
{
    m_pImp->set_patientposition(patientposition);
    enable_field(RTIMAGE_PATIENTPOSITION);
    setdirty_field(RTIMAGE_PATIENTPOSITION, true);
}

RT_TPS_DATABASE_END_NAMESPACE