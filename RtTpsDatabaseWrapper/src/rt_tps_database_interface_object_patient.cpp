//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_patient.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.11
///
///  \version 1.0
///  \date    7/24/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_patient.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtPatientImp::RtPatientImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_patientid(""),
    m_patientbarcode(0),
    m_clinicaluid(""),
    m_issuerofpatientid(""),
    m_isinternal(false),
    m_attdoctorid(""),
    m_refdoctorname(""),
    m_firstname(""),
    m_middlename(""),
    m_nameprefix(""),
    m_namesuffix(""),
    m_lastname(""),
    m_photofilepath(""),
    m_ssn(""),
    m_cardid(""),
    m_patienttype(0),
    m_weightunit(0),
    m_heightunit(0),
    m_height(0.f),
    m_phone1(""),
    m_phone2(""),
    m_emailaddress(""),
    m_homeaddress(""),
    m_homeaddressprovince(""),
    m_nation(""),
    m_nationality(""),
    m_nativeplace(""),
    m_nativeplaceprovince(""),
    m_emergencycontactname(""),
    m_emergencycontactphone(""),
    m_oldadmissionno(""),
    m_inpatientarea(""),
    m_association(""),
    m_pathologyno(""),
    m_hospitalcardid(""),
    m_roomno(""),
    m_bedno(""),
    m_description(""),
    m_otherpatientnames(""),
    m_otherpatientids(""),
    m_patientbirthdate(boost::date_time::not_a_date_time),
    m_patientsex(0),
    m_patientcomments(""),
    m_patientcardtype(0),
    m_ethnicgroup(""),
    m_militaryrank(""),
    m_patientprotect(""),
    m_patientconfirmstatus(0),
    m_patientrejectreason(""),
    m_patientconfirmdatetime(boost::date_time::not_a_date_time),
    m_emergency(false),
    m_patientaccumulateddap(""),
    m_patientaccumulateddapunit(""),
    m_voicelanguage(""),
    m_allergies(""),
    m_lastmenstrualdate(boost::date_time::not_a_date_time),
    m_patientstate(""),
    m_patientreserved0(""),
    m_patientreserved1(""),
    m_isactive(false),
    m_country(0),
    m_province(0),
    m_city(""),
    m_postcode(""),
    m_address(""),
    m_originalcountry(0),
    m_originalprovince(0),
    m_originalcity(""),
    m_originalpostcode(""),
    m_originaladdress(""),
    m_email(""),
    m_telephone(""),
    m_countrycode(""),
    m_areacode(""),
    m_mobile(""),
    m_emergencycontactfirstname(""),
    m_emergencycontactlastname(""),
    m_emergencycontactrelationship(0),
    m_emergencycontactcountry(0),
    m_emergencycontactprovince(0),
    m_emergencycontactcity(""),
    m_emergencycontactpostcode(""),
    m_emergencycontactaddress(""),
    m_emergencycontactemail(""),
    m_emergencycontacttelephone(""),
    m_emergencycontactmobile(""),
    m_emergencycontactcountrycode(""),
    m_emergencycontactareacode(""),
    m_contactfirstname(""),
    m_contactlastname(""),
    m_contactrelationship(0),
    m_contactcountry(0),
    m_contactprovince(0),
    m_contactcity(""),
    m_contactpostcode(""),
    m_contactaddress(""),
    m_contactemail(""),
    m_contacttelephone(""),
    m_contactmobile(""),
    m_contactcountrycode(""),
    m_contactareacode(""),
    m_state(""),
    m_emergencystate(""),
    m_contactstate(""),
    m_originalstate(""),
    m_weighthistory(""),
    m_clincalhistory(""),
    m_crc(""),
    m_isfromhis(false),
    m_occupation(0),
    m_patientcardphotofilepath(""),
    m_registerdate(boost::date_time::not_a_date_time),
    m_updatetime(boost::date_time::not_a_date_time),
    m_risk(""),
    m_enableweightlimit(false),
    m_weightuplimit(0.),
    m_weightdownlimit(0.),
    m_restoredatetime(boost::date_time::not_a_date_time),
    m_backupdatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtPatientImp::RtPatientImp(const RtPatientImp& patient):
    m_uid(patient.get_uid()),
    m_patientid(patient.get_patientid()),
    m_patientbarcode(patient.get_patientbarcode()),
    m_clinicaluid(patient.get_clinicaluid()),
    m_issuerofpatientid(patient.get_issuerofpatientid()),
    m_isinternal(patient.get_isinternal()),
    m_attdoctorid(patient.get_attdoctorid()),
    m_refdoctorname(patient.get_refdoctorname()),
    m_firstname(patient.get_firstname()),
    m_middlename(patient.get_middlename()),
    m_nameprefix(patient.get_nameprefix()),
    m_namesuffix(patient.get_namesuffix()),
    m_lastname(patient.get_lastname()),
    m_photofilepath(patient.get_photofilepath()),
    m_ssn(patient.get_ssn()),
    m_cardid(patient.get_cardid()),
    m_patienttype(patient.get_patienttype()),
    m_weightunit(patient.get_weightunit()),
    m_heightunit(patient.get_heightunit()),
    m_height(patient.get_height()),
    m_phone1(patient.get_phone1()),
    m_phone2(patient.get_phone2()),
    m_emailaddress(patient.get_emailaddress()),
    m_homeaddress(patient.get_homeaddress()),
    m_homeaddressprovince(patient.get_homeaddressprovince()),
    m_nation(patient.get_nation()),
    m_nationality(patient.get_nationality()),
    m_nativeplace(patient.get_nativeplace()),
    m_nativeplaceprovince(patient.get_nativeplaceprovince()),
    m_emergencycontactname(patient.get_emergencycontactname()),
    m_emergencycontactphone(patient.get_emergencycontactphone()),
    m_oldadmissionno(patient.get_oldadmissionno()),
    m_inpatientarea(patient.get_inpatientarea()),
    m_association(patient.get_association()),
    m_pathologyno(patient.get_pathologyno()),
    m_hospitalcardid(patient.get_hospitalcardid()),
    m_roomno(patient.get_roomno()),
    m_bedno(patient.get_bedno()),
    m_description(patient.get_description()),
    m_otherpatientnames(patient.get_otherpatientnames()),
    m_otherpatientids(patient.get_otherpatientids()),
    m_patientbirthdate(patient.get_patientbirthdate()),
    m_patientsex(patient.get_patientsex()),
    m_patientcomments(patient.get_patientcomments()),
    m_patientcardtype(patient.get_patientcardtype()),
    m_ethnicgroup(patient.get_ethnicgroup()),
    m_militaryrank(patient.get_militaryrank()),
    m_patientprotect(patient.get_patientprotect()),
    m_patientconfirmstatus(patient.get_patientconfirmstatus()),
    m_patientrejectreason(patient.get_patientrejectreason()),
    m_patientconfirmdatetime(patient.get_patientconfirmdatetime()),
    m_emergency(patient.get_emergency()),
    m_patientaccumulateddap(patient.get_patientaccumulateddap()),
    m_patientaccumulateddapunit(patient.get_patientaccumulateddapunit()),
    m_voicelanguage(patient.get_voicelanguage()),
    m_allergies(patient.get_allergies()),
    m_lastmenstrualdate(patient.get_lastmenstrualdate()),
    m_patientstate(patient.get_patientstate()),
    m_patientreserved0(patient.get_patientreserved0()),
    m_patientreserved1(patient.get_patientreserved1()),
    m_isactive(patient.get_isactive()),
    m_country(patient.get_country()),
    m_province(patient.get_province()),
    m_city(patient.get_city()),
    m_postcode(patient.get_postcode()),
    m_address(patient.get_address()),
    m_originalcountry(patient.get_originalcountry()),
    m_originalprovince(patient.get_originalprovince()),
    m_originalcity(patient.get_originalcity()),
    m_originalpostcode(patient.get_originalpostcode()),
    m_originaladdress(patient.get_originaladdress()),
    m_email(patient.get_email()),
    m_telephone(patient.get_telephone()),
    m_countrycode(patient.get_countrycode()),
    m_areacode(patient.get_areacode()),
    m_mobile(patient.get_mobile()),
    m_emergencycontactfirstname(patient.get_emergencycontactfirstname()),
    m_emergencycontactlastname(patient.get_emergencycontactlastname()),
    m_emergencycontactrelationship(patient.get_emergencycontactrelationship()),
    m_emergencycontactcountry(patient.get_emergencycontactcountry()),
    m_emergencycontactprovince(patient.get_emergencycontactprovince()),
    m_emergencycontactcity(patient.get_emergencycontactcity()),
    m_emergencycontactpostcode(patient.get_emergencycontactpostcode()),
    m_emergencycontactaddress(patient.get_emergencycontactaddress()),
    m_emergencycontactemail(patient.get_emergencycontactemail()),
    m_emergencycontacttelephone(patient.get_emergencycontacttelephone()),
    m_emergencycontactmobile(patient.get_emergencycontactmobile()),
    m_emergencycontactcountrycode(patient.get_emergencycontactcountrycode()),
    m_emergencycontactareacode(patient.get_emergencycontactareacode()),
    m_contactfirstname(patient.get_contactfirstname()),
    m_contactlastname(patient.get_contactlastname()),
    m_contactrelationship(patient.get_contactrelationship()),
    m_contactcountry(patient.get_contactcountry()),
    m_contactprovince(patient.get_contactprovince()),
    m_contactcity(patient.get_contactcity()),
    m_contactpostcode(patient.get_contactpostcode()),
    m_contactaddress(patient.get_contactaddress()),
    m_contactemail(patient.get_contactemail()),
    m_contacttelephone(patient.get_contacttelephone()),
    m_contactmobile(patient.get_contactmobile()),
    m_contactcountrycode(patient.get_contactcountrycode()),
    m_contactareacode(patient.get_contactareacode()),
    m_state(patient.get_state()),
    m_emergencystate(patient.get_emergencystate()),
    m_contactstate(patient.get_contactstate()),
    m_originalstate(patient.get_originalstate()),
    m_weighthistory(patient.get_weighthistory()),
    m_clincalhistory(patient.get_clincalhistory()),
    m_crc(patient.get_crc()),
    m_isfromhis(patient.get_isfromhis()),
    m_occupation(patient.get_occupation()),
    m_patientcardphotofilepath(patient.get_patientcardphotofilepath()),
    m_registerdate(patient.get_registerdate()),
    m_updatetime(patient.get_updatetime()),
    m_risk(patient.get_risk()),
    m_enableweightlimit(patient.get_enableweightlimit()),
    m_weightuplimit(patient.get_weightuplimit()),
    m_weightdownlimit(patient.get_weightdownlimit()),
    m_restoredatetime(patient.get_restoredatetime()),
    m_backupdatetime(patient.get_backupdatetime())
{
}

RtPatientImp& RtPatientImp::operator=(const RtPatientImp& patient)
{
    if (this != &patient){
        this->m_uid = patient.get_uid();
        this->m_patientid = patient.get_patientid();
        this->m_patientbarcode = patient.get_patientbarcode();
        this->m_clinicaluid = patient.get_clinicaluid();
        this->m_issuerofpatientid = patient.get_issuerofpatientid();
        this->m_isinternal = patient.get_isinternal();
        this->m_attdoctorid = patient.get_attdoctorid();
        this->m_refdoctorname = patient.get_refdoctorname();
        this->m_firstname = patient.get_firstname();
        this->m_middlename = patient.get_middlename();
        this->m_nameprefix = patient.get_nameprefix();
        this->m_namesuffix = patient.get_namesuffix();
        this->m_lastname = patient.get_lastname();
        this->m_photofilepath = patient.get_photofilepath();
        this->m_ssn = patient.get_ssn();
        this->m_cardid = patient.get_cardid();
        this->m_patienttype = patient.get_patienttype();
        this->m_weightunit = patient.get_weightunit();
        this->m_heightunit = patient.get_heightunit();
        this->m_height = patient.get_height();
        this->m_phone1 = patient.get_phone1();
        this->m_phone2 = patient.get_phone2();
        this->m_emailaddress = patient.get_emailaddress();
        this->m_homeaddress = patient.get_homeaddress();
        this->m_homeaddressprovince = patient.get_homeaddressprovince();
        this->m_nation = patient.get_nation();
        this->m_nationality = patient.get_nationality();
        this->m_nativeplace = patient.get_nativeplace();
        this->m_nativeplaceprovince = patient.get_nativeplaceprovince();
        this->m_emergencycontactname = patient.get_emergencycontactname();
        this->m_emergencycontactphone = patient.get_emergencycontactphone();
        this->m_oldadmissionno = patient.get_oldadmissionno();
        this->m_inpatientarea = patient.get_inpatientarea();
        this->m_association = patient.get_association();
        this->m_pathologyno = patient.get_pathologyno();
        this->m_hospitalcardid = patient.get_hospitalcardid();
        this->m_roomno = patient.get_roomno();
        this->m_bedno = patient.get_bedno();
        this->m_description = patient.get_description();
        this->m_otherpatientnames = patient.get_otherpatientnames();
        this->m_otherpatientids = patient.get_otherpatientids();
        this->m_patientbirthdate = patient.get_patientbirthdate();
        this->m_patientsex = patient.get_patientsex();
        this->m_patientcomments = patient.get_patientcomments();
        this->m_patientcardtype = patient.get_patientcardtype();
        this->m_ethnicgroup = patient.get_ethnicgroup();
        this->m_militaryrank = patient.get_militaryrank();
        this->m_patientprotect = patient.get_patientprotect();
        this->m_patientconfirmstatus = patient.get_patientconfirmstatus();
        this->m_patientrejectreason = patient.get_patientrejectreason();
        this->m_patientconfirmdatetime = patient.get_patientconfirmdatetime();
        this->m_emergency = patient.get_emergency();
        this->m_patientaccumulateddap = patient.get_patientaccumulateddap();
        this->m_patientaccumulateddapunit = patient.get_patientaccumulateddapunit();
        this->m_voicelanguage = patient.get_voicelanguage();
        this->m_allergies = patient.get_allergies();
        this->m_lastmenstrualdate = patient.get_lastmenstrualdate();
        this->m_patientstate = patient.get_patientstate();
        this->m_patientreserved0 = patient.get_patientreserved0();
        this->m_patientreserved1 = patient.get_patientreserved1();
        this->m_isactive = patient.get_isactive();
        this->m_country = patient.get_country();
        this->m_province = patient.get_province();
        this->m_city = patient.get_city();
        this->m_postcode = patient.get_postcode();
        this->m_address = patient.get_address();
        this->m_originalcountry = patient.get_originalcountry();
        this->m_originalprovince = patient.get_originalprovince();
        this->m_originalcity = patient.get_originalcity();
        this->m_originalpostcode = patient.get_originalpostcode();
        this->m_originaladdress = patient.get_originaladdress();
        this->m_email = patient.get_email();
        this->m_telephone = patient.get_telephone();
        this->m_countrycode = patient.get_countrycode();
        this->m_areacode = patient.get_areacode();
        this->m_mobile = patient.get_mobile();
        this->m_emergencycontactfirstname = patient.get_emergencycontactfirstname();
        this->m_emergencycontactlastname = patient.get_emergencycontactlastname();
        this->m_emergencycontactrelationship = patient.get_emergencycontactrelationship();
        this->m_emergencycontactcountry = patient.get_emergencycontactcountry();
        this->m_emergencycontactprovince = patient.get_emergencycontactprovince();
        this->m_emergencycontactcity = patient.get_emergencycontactcity();
        this->m_emergencycontactpostcode = patient.get_emergencycontactpostcode();
        this->m_emergencycontactaddress = patient.get_emergencycontactaddress();
        this->m_emergencycontactemail = patient.get_emergencycontactemail();
        this->m_emergencycontacttelephone = patient.get_emergencycontacttelephone();
        this->m_emergencycontactmobile = patient.get_emergencycontactmobile();
        this->m_emergencycontactcountrycode = patient.get_emergencycontactcountrycode();
        this->m_emergencycontactareacode = patient.get_emergencycontactareacode();
        this->m_contactfirstname = patient.get_contactfirstname();
        this->m_contactlastname = patient.get_contactlastname();
        this->m_contactrelationship = patient.get_contactrelationship();
        this->m_contactcountry = patient.get_contactcountry();
        this->m_contactprovince = patient.get_contactprovince();
        this->m_contactcity = patient.get_contactcity();
        this->m_contactpostcode = patient.get_contactpostcode();
        this->m_contactaddress = patient.get_contactaddress();
        this->m_contactemail = patient.get_contactemail();
        this->m_contacttelephone = patient.get_contacttelephone();
        this->m_contactmobile = patient.get_contactmobile();
        this->m_contactcountrycode = patient.get_contactcountrycode();
        this->m_contactareacode = patient.get_contactareacode();
        this->m_state = patient.get_state();
        this->m_emergencystate = patient.get_emergencystate();
        this->m_contactstate = patient.get_contactstate();
        this->m_originalstate = patient.get_originalstate();
        this->m_weighthistory = patient.get_weighthistory();
        this->m_clincalhistory = patient.get_clincalhistory();
        this->m_crc = patient.get_crc();
        this->m_isfromhis = patient.get_isfromhis();
        this->m_occupation = patient.get_occupation();
        this->m_patientcardphotofilepath = patient.get_patientcardphotofilepath();
        this->m_registerdate = patient.get_registerdate();
        this->m_updatetime = patient.get_updatetime();
        this->m_risk = patient.get_risk();
        this->m_enableweightlimit = patient.get_enableweightlimit();
        this->m_weightuplimit = patient.get_weightuplimit();
        this->m_weightdownlimit = patient.get_weightdownlimit();
        this->m_restoredatetime = patient.get_restoredatetime();
        this->m_backupdatetime = patient.get_backupdatetime();
    }
    return *this;
}

RtPatientImp::~RtPatientImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtPatient::RtPatient(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtPatientImp(bGeneraterUid);
    set_flags(PATIENT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_PATIENT_FIELD_NULL);
}

RtPatient::RtPatient(const RtPatient& patient): RtDatabaseObject(patient),
   m_pImp(new RtPatientImp(*patient.m_pImp))
{
}

RtPatient& RtPatient::operator = (const RtPatient& patient)
{
    if(this != &patient)
    {
        RtDatabaseObject::operator=(patient);
        *this->m_pImp = *patient.m_pImp;
    }
    return *this;
}

RtPatient::~RtPatient()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtPatient::get_uid() const { return m_pImp->get_uid();}
void RtPatient::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(PATIENT_UID);
    setdirty_field(PATIENT_UID, true);
}

//patientid
std::string RtPatient::get_patientid() const { return m_pImp->get_patientid();}
void RtPatient::set_patientid(const std::string& patientid)
{
    m_pImp->set_patientid(patientid);
    enable_field(PATIENT_PATIENTID);
    setdirty_field(PATIENT_PATIENTID, true);
}

//patientbarcode
int RtPatient::get_patientbarcode() const { return m_pImp->get_patientbarcode();}
void RtPatient::set_patientbarcode(const int& patientbarcode)
{
    m_pImp->set_patientbarcode(patientbarcode);
    enable_field(PATIENT_PATIENTBARCODE);
    setdirty_field(PATIENT_PATIENTBARCODE, true);
}

//clinicaluid
std::string RtPatient::get_clinicaluid() const { return m_pImp->get_clinicaluid();}
void RtPatient::set_clinicaluid(const std::string& clinicaluid)
{
    m_pImp->set_clinicaluid(clinicaluid);
    enable_field(PATIENT_CLINICALUID);
    setdirty_field(PATIENT_CLINICALUID, true);
}

//issuerofpatientid
std::string RtPatient::get_issuerofpatientid() const { return m_pImp->get_issuerofpatientid();}
void RtPatient::set_issuerofpatientid(const std::string& issuerofpatientid)
{
    m_pImp->set_issuerofpatientid(issuerofpatientid);
    enable_field(PATIENT_ISSUEROFPATIENTID);
    setdirty_field(PATIENT_ISSUEROFPATIENTID, true);
}

//isinternal
bool RtPatient::get_isinternal() const { return m_pImp->get_isinternal();}
void RtPatient::set_isinternal(const bool& isinternal)
{
    m_pImp->set_isinternal(isinternal);
    enable_field(PATIENT_ISINTERNAL);
    setdirty_field(PATIENT_ISINTERNAL, true);
}

//attdoctorid
std::string RtPatient::get_attdoctorid() const { return m_pImp->get_attdoctorid();}
void RtPatient::set_attdoctorid(const std::string& attdoctorid)
{
    m_pImp->set_attdoctorid(attdoctorid);
    enable_field(PATIENT_ATTDOCTORID);
    setdirty_field(PATIENT_ATTDOCTORID, true);
}

//refdoctorname
std::string RtPatient::get_refdoctorname() const { return m_pImp->get_refdoctorname();}
void RtPatient::set_refdoctorname(const std::string& refdoctorname)
{
    m_pImp->set_refdoctorname(refdoctorname);
    enable_field(PATIENT_REFDOCTORNAME);
    setdirty_field(PATIENT_REFDOCTORNAME, true);
}

//firstname
std::string RtPatient::get_firstname() const { return m_pImp->get_firstname();}
void RtPatient::set_firstname(const std::string& firstname)
{
    m_pImp->set_firstname(firstname);
    enable_field(PATIENT_FIRSTNAME);
    setdirty_field(PATIENT_FIRSTNAME, true);
}

//middlename
std::string RtPatient::get_middlename() const { return m_pImp->get_middlename();}
void RtPatient::set_middlename(const std::string& middlename)
{
    m_pImp->set_middlename(middlename);
    enable_field(PATIENT_MIDDLENAME);
    setdirty_field(PATIENT_MIDDLENAME, true);
}

//nameprefix
std::string RtPatient::get_nameprefix() const { return m_pImp->get_nameprefix();}
void RtPatient::set_nameprefix(const std::string& nameprefix)
{
    m_pImp->set_nameprefix(nameprefix);
    enable_field(PATIENT_NAMEPREFIX);
    setdirty_field(PATIENT_NAMEPREFIX, true);
}

//namesuffix
std::string RtPatient::get_namesuffix() const { return m_pImp->get_namesuffix();}
void RtPatient::set_namesuffix(const std::string& namesuffix)
{
    m_pImp->set_namesuffix(namesuffix);
    enable_field(PATIENT_NAMESUFFIX);
    setdirty_field(PATIENT_NAMESUFFIX, true);
}

//lastname
std::string RtPatient::get_lastname() const { return m_pImp->get_lastname();}
void RtPatient::set_lastname(const std::string& lastname)
{
    m_pImp->set_lastname(lastname);
    enable_field(PATIENT_LASTNAME);
    setdirty_field(PATIENT_LASTNAME, true);
}

//photofilepath
std::string RtPatient::get_photofilepath() const { return m_pImp->get_photofilepath();}
void RtPatient::set_photofilepath(const std::string& photofilepath)
{
    m_pImp->set_photofilepath(photofilepath);
    enable_field(PATIENT_PHOTOFILEPATH);
    setdirty_field(PATIENT_PHOTOFILEPATH, true);
}

//ssn
std::string RtPatient::get_ssn() const { return m_pImp->get_ssn();}
void RtPatient::set_ssn(const std::string& ssn)
{
    m_pImp->set_ssn(ssn);
    enable_field(PATIENT_SSN);
    setdirty_field(PATIENT_SSN, true);
}

//cardid
std::string RtPatient::get_cardid() const { return m_pImp->get_cardid();}
void RtPatient::set_cardid(const std::string& cardid)
{
    m_pImp->set_cardid(cardid);
    enable_field(PATIENT_CARDID);
    setdirty_field(PATIENT_CARDID, true);
}

//patienttype
int RtPatient::get_patienttype() const { return m_pImp->get_patienttype();}
void RtPatient::set_patienttype(const int& patienttype)
{
    m_pImp->set_patienttype(patienttype);
    enable_field(PATIENT_PATIENTTYPE);
    setdirty_field(PATIENT_PATIENTTYPE, true);
}

//weightunit
int RtPatient::get_weightunit() const { return m_pImp->get_weightunit();}
void RtPatient::set_weightunit(const int& weightunit)
{
    m_pImp->set_weightunit(weightunit);
    enable_field(PATIENT_WEIGHTUNIT);
    setdirty_field(PATIENT_WEIGHTUNIT, true);
}

//heightunit
int RtPatient::get_heightunit() const { return m_pImp->get_heightunit();}
void RtPatient::set_heightunit(const int& heightunit)
{
    m_pImp->set_heightunit(heightunit);
    enable_field(PATIENT_HEIGHTUNIT);
    setdirty_field(PATIENT_HEIGHTUNIT, true);
}

//height
float RtPatient::get_height() const { return m_pImp->get_height();}
void RtPatient::set_height(const float& height)
{
    m_pImp->set_height(height);
    enable_field(PATIENT_HEIGHT);
    setdirty_field(PATIENT_HEIGHT, true);
}

//phone1
std::string RtPatient::get_phone1() const { return m_pImp->get_phone1();}
void RtPatient::set_phone1(const std::string& phone1)
{
    m_pImp->set_phone1(phone1);
    enable_field(PATIENT_PHONE1);
    setdirty_field(PATIENT_PHONE1, true);
}

//phone2
std::string RtPatient::get_phone2() const { return m_pImp->get_phone2();}
void RtPatient::set_phone2(const std::string& phone2)
{
    m_pImp->set_phone2(phone2);
    enable_field(PATIENT_PHONE2);
    setdirty_field(PATIENT_PHONE2, true);
}

//emailaddress
std::string RtPatient::get_emailaddress() const { return m_pImp->get_emailaddress();}
void RtPatient::set_emailaddress(const std::string& emailaddress)
{
    m_pImp->set_emailaddress(emailaddress);
    enable_field(PATIENT_EMAILADDRESS);
    setdirty_field(PATIENT_EMAILADDRESS, true);
}

//homeaddress
std::string RtPatient::get_homeaddress() const { return m_pImp->get_homeaddress();}
void RtPatient::set_homeaddress(const std::string& homeaddress)
{
    m_pImp->set_homeaddress(homeaddress);
    enable_field(PATIENT_HOMEADDRESS);
    setdirty_field(PATIENT_HOMEADDRESS, true);
}

//homeaddressprovince
std::string RtPatient::get_homeaddressprovince() const { return m_pImp->get_homeaddressprovince();}
void RtPatient::set_homeaddressprovince(const std::string& homeaddressprovince)
{
    m_pImp->set_homeaddressprovince(homeaddressprovince);
    enable_field(PATIENT_HOMEADDRESSPROVINCE);
    setdirty_field(PATIENT_HOMEADDRESSPROVINCE, true);
}

//nation
std::string RtPatient::get_nation() const { return m_pImp->get_nation();}
void RtPatient::set_nation(const std::string& nation)
{
    m_pImp->set_nation(nation);
    enable_field(PATIENT_NATION);
    setdirty_field(PATIENT_NATION, true);
}

//nationality
std::string RtPatient::get_nationality() const { return m_pImp->get_nationality();}
void RtPatient::set_nationality(const std::string& nationality)
{
    m_pImp->set_nationality(nationality);
    enable_field(PATIENT_NATIONALITY);
    setdirty_field(PATIENT_NATIONALITY, true);
}

//nativeplace
std::string RtPatient::get_nativeplace() const { return m_pImp->get_nativeplace();}
void RtPatient::set_nativeplace(const std::string& nativeplace)
{
    m_pImp->set_nativeplace(nativeplace);
    enable_field(PATIENT_NATIVEPLACE);
    setdirty_field(PATIENT_NATIVEPLACE, true);
}

//nativeplaceprovince
std::string RtPatient::get_nativeplaceprovince() const { return m_pImp->get_nativeplaceprovince();}
void RtPatient::set_nativeplaceprovince(const std::string& nativeplaceprovince)
{
    m_pImp->set_nativeplaceprovince(nativeplaceprovince);
    enable_field(PATIENT_NATIVEPLACEPROVINCE);
    setdirty_field(PATIENT_NATIVEPLACEPROVINCE, true);
}

//emergencycontactname
std::string RtPatient::get_emergencycontactname() const { return m_pImp->get_emergencycontactname();}
void RtPatient::set_emergencycontactname(const std::string& emergencycontactname)
{
    m_pImp->set_emergencycontactname(emergencycontactname);
    enable_field(PATIENT_EMERGENCYCONTACTNAME);
    setdirty_field(PATIENT_EMERGENCYCONTACTNAME, true);
}

//emergencycontactphone
std::string RtPatient::get_emergencycontactphone() const { return m_pImp->get_emergencycontactphone();}
void RtPatient::set_emergencycontactphone(const std::string& emergencycontactphone)
{
    m_pImp->set_emergencycontactphone(emergencycontactphone);
    enable_field(PATIENT_EMERGENCYCONTACTPHONE);
    setdirty_field(PATIENT_EMERGENCYCONTACTPHONE, true);
}

//oldadmissionno
std::string RtPatient::get_oldadmissionno() const { return m_pImp->get_oldadmissionno();}
void RtPatient::set_oldadmissionno(const std::string& oldadmissionno)
{
    m_pImp->set_oldadmissionno(oldadmissionno);
    enable_field(PATIENT_OLDADMISSIONNO);
    setdirty_field(PATIENT_OLDADMISSIONNO, true);
}

//inpatientarea
std::string RtPatient::get_inpatientarea() const { return m_pImp->get_inpatientarea();}
void RtPatient::set_inpatientarea(const std::string& inpatientarea)
{
    m_pImp->set_inpatientarea(inpatientarea);
    enable_field(PATIENT_INPATIENTAREA);
    setdirty_field(PATIENT_INPATIENTAREA, true);
}

//association
std::string RtPatient::get_association() const { return m_pImp->get_association();}
void RtPatient::set_association(const std::string& association)
{
    m_pImp->set_association(association);
    enable_field(PATIENT_ASSOCIATION);
    setdirty_field(PATIENT_ASSOCIATION, true);
}

//pathologyno
std::string RtPatient::get_pathologyno() const { return m_pImp->get_pathologyno();}
void RtPatient::set_pathologyno(const std::string& pathologyno)
{
    m_pImp->set_pathologyno(pathologyno);
    enable_field(PATIENT_PATHOLOGYNO);
    setdirty_field(PATIENT_PATHOLOGYNO, true);
}

//hospitalcardid
std::string RtPatient::get_hospitalcardid() const { return m_pImp->get_hospitalcardid();}
void RtPatient::set_hospitalcardid(const std::string& hospitalcardid)
{
    m_pImp->set_hospitalcardid(hospitalcardid);
    enable_field(PATIENT_HOSPITALCARDID);
    setdirty_field(PATIENT_HOSPITALCARDID, true);
}

//roomno
std::string RtPatient::get_roomno() const { return m_pImp->get_roomno();}
void RtPatient::set_roomno(const std::string& roomno)
{
    m_pImp->set_roomno(roomno);
    enable_field(PATIENT_ROOMNO);
    setdirty_field(PATIENT_ROOMNO, true);
}

//bedno
std::string RtPatient::get_bedno() const { return m_pImp->get_bedno();}
void RtPatient::set_bedno(const std::string& bedno)
{
    m_pImp->set_bedno(bedno);
    enable_field(PATIENT_BEDNO);
    setdirty_field(PATIENT_BEDNO, true);
}

//description
std::string RtPatient::get_description() const { return m_pImp->get_description();}
void RtPatient::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(PATIENT_DESCRIPTION);
    setdirty_field(PATIENT_DESCRIPTION, true);
}

//otherpatientnames
std::string RtPatient::get_otherpatientnames() const { return m_pImp->get_otherpatientnames();}
void RtPatient::set_otherpatientnames(const std::string& otherpatientnames)
{
    m_pImp->set_otherpatientnames(otherpatientnames);
    enable_field(PATIENT_OTHERPATIENTNAMES);
    setdirty_field(PATIENT_OTHERPATIENTNAMES, true);
}

//otherpatientids
std::string RtPatient::get_otherpatientids() const { return m_pImp->get_otherpatientids();}
void RtPatient::set_otherpatientids(const std::string& otherpatientids)
{
    m_pImp->set_otherpatientids(otherpatientids);
    enable_field(PATIENT_OTHERPATIENTIDS);
    setdirty_field(PATIENT_OTHERPATIENTIDS, true);
}

//patientbirthdate
DATE_BOOST RtPatient::get_patientbirthdate() const { return m_pImp->get_patientbirthdate();}
void RtPatient::set_patientbirthdate(const DATE_BOOST& patientbirthdate)
{
    m_pImp->set_patientbirthdate(patientbirthdate);
    enable_field(PATIENT_PATIENTBIRTHDATE);
    setdirty_field(PATIENT_PATIENTBIRTHDATE, true);
}

//patientsex
int RtPatient::get_patientsex() const { return m_pImp->get_patientsex();}
void RtPatient::set_patientsex(const int& patientsex)
{
    m_pImp->set_patientsex(patientsex);
    enable_field(PATIENT_PATIENTSEX);
    setdirty_field(PATIENT_PATIENTSEX, true);
}

//patientcomments
std::string RtPatient::get_patientcomments() const { return m_pImp->get_patientcomments();}
void RtPatient::set_patientcomments(const std::string& patientcomments)
{
    m_pImp->set_patientcomments(patientcomments);
    enable_field(PATIENT_PATIENTCOMMENTS);
    setdirty_field(PATIENT_PATIENTCOMMENTS, true);
}

//patientcardtype
int RtPatient::get_patientcardtype() const { return m_pImp->get_patientcardtype();}
void RtPatient::set_patientcardtype(const int& patientcardtype)
{
    m_pImp->set_patientcardtype(patientcardtype);
    enable_field(PATIENT_PATIENTCARDTYPE);
    setdirty_field(PATIENT_PATIENTCARDTYPE, true);
}

//ethnicgroup
std::string RtPatient::get_ethnicgroup() const { return m_pImp->get_ethnicgroup();}
void RtPatient::set_ethnicgroup(const std::string& ethnicgroup)
{
    m_pImp->set_ethnicgroup(ethnicgroup);
    enable_field(PATIENT_ETHNICGROUP);
    setdirty_field(PATIENT_ETHNICGROUP, true);
}

//militaryrank
std::string RtPatient::get_militaryrank() const { return m_pImp->get_militaryrank();}
void RtPatient::set_militaryrank(const std::string& militaryrank)
{
    m_pImp->set_militaryrank(militaryrank);
    enable_field(PATIENT_MILITARYRANK);
    setdirty_field(PATIENT_MILITARYRANK, true);
}

//patientprotect
std::string RtPatient::get_patientprotect() const { return m_pImp->get_patientprotect();}
void RtPatient::set_patientprotect(const std::string& patientprotect)
{
    m_pImp->set_patientprotect(patientprotect);
    enable_field(PATIENT_PATIENTPROTECT);
    setdirty_field(PATIENT_PATIENTPROTECT, true);
}

//patientconfirmstatus
int RtPatient::get_patientconfirmstatus() const { return m_pImp->get_patientconfirmstatus();}
void RtPatient::set_patientconfirmstatus(const int& patientconfirmstatus)
{
    m_pImp->set_patientconfirmstatus(patientconfirmstatus);
    enable_field(PATIENT_PATIENTCONFIRMSTATUS);
    setdirty_field(PATIENT_PATIENTCONFIRMSTATUS, true);
}

//patientrejectreason
std::string RtPatient::get_patientrejectreason() const { return m_pImp->get_patientrejectreason();}
void RtPatient::set_patientrejectreason(const std::string& patientrejectreason)
{
    m_pImp->set_patientrejectreason(patientrejectreason);
    enable_field(PATIENT_PATIENTREJECTREASON);
    setdirty_field(PATIENT_PATIENTREJECTREASON, true);
}

//patientconfirmdatetime
DATETIME_BOOST RtPatient::get_patientconfirmdatetime() const { return m_pImp->get_patientconfirmdatetime();}
void RtPatient::set_patientconfirmdatetime(const DATETIME_BOOST& patientconfirmdatetime)
{
    m_pImp->set_patientconfirmdatetime(patientconfirmdatetime);
    enable_field(PATIENT_PATIENTCONFIRMDATETIME);
    setdirty_field(PATIENT_PATIENTCONFIRMDATETIME, true);
}

//emergency
bool RtPatient::get_emergency() const { return m_pImp->get_emergency();}
void RtPatient::set_emergency(const bool& emergency)
{
    m_pImp->set_emergency(emergency);
    enable_field(PATIENT_EMERGENCY);
    setdirty_field(PATIENT_EMERGENCY, true);
}

//patientaccumulateddap
std::string RtPatient::get_patientaccumulateddap() const { return m_pImp->get_patientaccumulateddap();}
void RtPatient::set_patientaccumulateddap(const std::string& patientaccumulateddap)
{
    m_pImp->set_patientaccumulateddap(patientaccumulateddap);
    enable_field(PATIENT_PATIENTACCUMULATEDDAP);
    setdirty_field(PATIENT_PATIENTACCUMULATEDDAP, true);
}

//patientaccumulateddapunit
std::string RtPatient::get_patientaccumulateddapunit() const { return m_pImp->get_patientaccumulateddapunit();}
void RtPatient::set_patientaccumulateddapunit(const std::string& patientaccumulateddapunit)
{
    m_pImp->set_patientaccumulateddapunit(patientaccumulateddapunit);
    enable_field(PATIENT_PATIENTACCUMULATEDDAPUNIT);
    setdirty_field(PATIENT_PATIENTACCUMULATEDDAPUNIT, true);
}

//voicelanguage
std::string RtPatient::get_voicelanguage() const { return m_pImp->get_voicelanguage();}
void RtPatient::set_voicelanguage(const std::string& voicelanguage)
{
    m_pImp->set_voicelanguage(voicelanguage);
    enable_field(PATIENT_VOICELANGUAGE);
    setdirty_field(PATIENT_VOICELANGUAGE, true);
}

//allergies
std::string RtPatient::get_allergies() const { return m_pImp->get_allergies();}
void RtPatient::set_allergies(const std::string& allergies)
{
    m_pImp->set_allergies(allergies);
    enable_field(PATIENT_ALLERGIES);
    setdirty_field(PATIENT_ALLERGIES, true);
}

//lastmenstrualdate
DATE_BOOST RtPatient::get_lastmenstrualdate() const { return m_pImp->get_lastmenstrualdate();}
void RtPatient::set_lastmenstrualdate(const DATE_BOOST& lastmenstrualdate)
{
    m_pImp->set_lastmenstrualdate(lastmenstrualdate);
    enable_field(PATIENT_LASTMENSTRUALDATE);
    setdirty_field(PATIENT_LASTMENSTRUALDATE, true);
}

//patientstate
std::string RtPatient::get_patientstate() const { return m_pImp->get_patientstate();}
void RtPatient::set_patientstate(const std::string& patientstate)
{
    m_pImp->set_patientstate(patientstate);
    enable_field(PATIENT_PATIENTSTATE);
    setdirty_field(PATIENT_PATIENTSTATE, true);
}

//patientreserved0
std::string RtPatient::get_patientreserved0() const { return m_pImp->get_patientreserved0();}
void RtPatient::set_patientreserved0(const std::string& patientreserved0)
{
    m_pImp->set_patientreserved0(patientreserved0);
    enable_field(PATIENT_PATIENTRESERVED0);
    setdirty_field(PATIENT_PATIENTRESERVED0, true);
}

//patientreserved1
std::string RtPatient::get_patientreserved1() const { return m_pImp->get_patientreserved1();}
void RtPatient::set_patientreserved1(const std::string& patientreserved1)
{
    m_pImp->set_patientreserved1(patientreserved1);
    enable_field(PATIENT_PATIENTRESERVED1);
    setdirty_field(PATIENT_PATIENTRESERVED1, true);
}

//isactive
bool RtPatient::get_isactive() const { return m_pImp->get_isactive();}
void RtPatient::set_isactive(const bool& isactive)
{
    m_pImp->set_isactive(isactive);
    enable_field(PATIENT_ISACTIVE);
    setdirty_field(PATIENT_ISACTIVE, true);
}

//country
int RtPatient::get_country() const { return m_pImp->get_country();}
void RtPatient::set_country(const int& country)
{
    m_pImp->set_country(country);
    enable_field(PATIENT_COUNTRY);
    setdirty_field(PATIENT_COUNTRY, true);
}

//province
int RtPatient::get_province() const { return m_pImp->get_province();}
void RtPatient::set_province(const int& province)
{
    m_pImp->set_province(province);
    enable_field(PATIENT_PROVINCE);
    setdirty_field(PATIENT_PROVINCE, true);
}

//city
std::string RtPatient::get_city() const { return m_pImp->get_city();}
void RtPatient::set_city(const std::string& city)
{
    m_pImp->set_city(city);
    enable_field(PATIENT_CITY);
    setdirty_field(PATIENT_CITY, true);
}

//postcode
std::string RtPatient::get_postcode() const { return m_pImp->get_postcode();}
void RtPatient::set_postcode(const std::string& postcode)
{
    m_pImp->set_postcode(postcode);
    enable_field(PATIENT_POSTCODE);
    setdirty_field(PATIENT_POSTCODE, true);
}

//address
std::string RtPatient::get_address() const { return m_pImp->get_address();}
void RtPatient::set_address(const std::string& address)
{
    m_pImp->set_address(address);
    enable_field(PATIENT_ADDRESS);
    setdirty_field(PATIENT_ADDRESS, true);
}

//originalcountry
int RtPatient::get_originalcountry() const { return m_pImp->get_originalcountry();}
void RtPatient::set_originalcountry(const int& originalcountry)
{
    m_pImp->set_originalcountry(originalcountry);
    enable_field(PATIENT_ORIGINALCOUNTRY);
    setdirty_field(PATIENT_ORIGINALCOUNTRY, true);
}

//originalprovince
int RtPatient::get_originalprovince() const { return m_pImp->get_originalprovince();}
void RtPatient::set_originalprovince(const int& originalprovince)
{
    m_pImp->set_originalprovince(originalprovince);
    enable_field(PATIENT_ORIGINALPROVINCE);
    setdirty_field(PATIENT_ORIGINALPROVINCE, true);
}

//originalcity
std::string RtPatient::get_originalcity() const { return m_pImp->get_originalcity();}
void RtPatient::set_originalcity(const std::string& originalcity)
{
    m_pImp->set_originalcity(originalcity);
    enable_field(PATIENT_ORIGINALCITY);
    setdirty_field(PATIENT_ORIGINALCITY, true);
}

//originalpostcode
std::string RtPatient::get_originalpostcode() const { return m_pImp->get_originalpostcode();}
void RtPatient::set_originalpostcode(const std::string& originalpostcode)
{
    m_pImp->set_originalpostcode(originalpostcode);
    enable_field(PATIENT_ORIGINALPOSTCODE);
    setdirty_field(PATIENT_ORIGINALPOSTCODE, true);
}

//originaladdress
std::string RtPatient::get_originaladdress() const { return m_pImp->get_originaladdress();}
void RtPatient::set_originaladdress(const std::string& originaladdress)
{
    m_pImp->set_originaladdress(originaladdress);
    enable_field(PATIENT_ORIGINALADDRESS);
    setdirty_field(PATIENT_ORIGINALADDRESS, true);
}

//email
std::string RtPatient::get_email() const { return m_pImp->get_email();}
void RtPatient::set_email(const std::string& email)
{
    m_pImp->set_email(email);
    enable_field(PATIENT_EMAIL);
    setdirty_field(PATIENT_EMAIL, true);
}

//telephone
std::string RtPatient::get_telephone() const { return m_pImp->get_telephone();}
void RtPatient::set_telephone(const std::string& telephone)
{
    m_pImp->set_telephone(telephone);
    enable_field(PATIENT_TELEPHONE);
    setdirty_field(PATIENT_TELEPHONE, true);
}

//countrycode
std::string RtPatient::get_countrycode() const { return m_pImp->get_countrycode();}
void RtPatient::set_countrycode(const std::string& countrycode)
{
    m_pImp->set_countrycode(countrycode);
    enable_field(PATIENT_COUNTRYCODE);
    setdirty_field(PATIENT_COUNTRYCODE, true);
}

//areacode
std::string RtPatient::get_areacode() const { return m_pImp->get_areacode();}
void RtPatient::set_areacode(const std::string& areacode)
{
    m_pImp->set_areacode(areacode);
    enable_field(PATIENT_AREACODE);
    setdirty_field(PATIENT_AREACODE, true);
}

//mobile
std::string RtPatient::get_mobile() const { return m_pImp->get_mobile();}
void RtPatient::set_mobile(const std::string& mobile)
{
    m_pImp->set_mobile(mobile);
    enable_field(PATIENT_MOBILE);
    setdirty_field(PATIENT_MOBILE, true);
}

//emergencycontactfirstname
std::string RtPatient::get_emergencycontactfirstname() const { return m_pImp->get_emergencycontactfirstname();}
void RtPatient::set_emergencycontactfirstname(const std::string& emergencycontactfirstname)
{
    m_pImp->set_emergencycontactfirstname(emergencycontactfirstname);
    enable_field(PATIENT_EMERGENCYCONTACTFIRSTNAME);
    setdirty_field(PATIENT_EMERGENCYCONTACTFIRSTNAME, true);
}

//emergencycontactlastname
std::string RtPatient::get_emergencycontactlastname() const { return m_pImp->get_emergencycontactlastname();}
void RtPatient::set_emergencycontactlastname(const std::string& emergencycontactlastname)
{
    m_pImp->set_emergencycontactlastname(emergencycontactlastname);
    enable_field(PATIENT_EMERGENCYCONTACTLASTNAME);
    setdirty_field(PATIENT_EMERGENCYCONTACTLASTNAME, true);
}

//emergencycontactrelationship
int RtPatient::get_emergencycontactrelationship() const { return m_pImp->get_emergencycontactrelationship();}
void RtPatient::set_emergencycontactrelationship(const int& emergencycontactrelationship)
{
    m_pImp->set_emergencycontactrelationship(emergencycontactrelationship);
    enable_field(PATIENT_EMERGENCYCONTACTRELATIONSHIP);
    setdirty_field(PATIENT_EMERGENCYCONTACTRELATIONSHIP, true);
}

//emergencycontactcountry
int RtPatient::get_emergencycontactcountry() const { return m_pImp->get_emergencycontactcountry();}
void RtPatient::set_emergencycontactcountry(const int& emergencycontactcountry)
{
    m_pImp->set_emergencycontactcountry(emergencycontactcountry);
    enable_field(PATIENT_EMERGENCYCONTACTCOUNTRY);
    setdirty_field(PATIENT_EMERGENCYCONTACTCOUNTRY, true);
}

//emergencycontactprovince
int RtPatient::get_emergencycontactprovince() const { return m_pImp->get_emergencycontactprovince();}
void RtPatient::set_emergencycontactprovince(const int& emergencycontactprovince)
{
    m_pImp->set_emergencycontactprovince(emergencycontactprovince);
    enable_field(PATIENT_EMERGENCYCONTACTPROVINCE);
    setdirty_field(PATIENT_EMERGENCYCONTACTPROVINCE, true);
}

//emergencycontactcity
std::string RtPatient::get_emergencycontactcity() const { return m_pImp->get_emergencycontactcity();}
void RtPatient::set_emergencycontactcity(const std::string& emergencycontactcity)
{
    m_pImp->set_emergencycontactcity(emergencycontactcity);
    enable_field(PATIENT_EMERGENCYCONTACTCITY);
    setdirty_field(PATIENT_EMERGENCYCONTACTCITY, true);
}

//emergencycontactpostcode
std::string RtPatient::get_emergencycontactpostcode() const { return m_pImp->get_emergencycontactpostcode();}
void RtPatient::set_emergencycontactpostcode(const std::string& emergencycontactpostcode)
{
    m_pImp->set_emergencycontactpostcode(emergencycontactpostcode);
    enable_field(PATIENT_EMERGENCYCONTACTPOSTCODE);
    setdirty_field(PATIENT_EMERGENCYCONTACTPOSTCODE, true);
}

//emergencycontactaddress
std::string RtPatient::get_emergencycontactaddress() const { return m_pImp->get_emergencycontactaddress();}
void RtPatient::set_emergencycontactaddress(const std::string& emergencycontactaddress)
{
    m_pImp->set_emergencycontactaddress(emergencycontactaddress);
    enable_field(PATIENT_EMERGENCYCONTACTADDRESS);
    setdirty_field(PATIENT_EMERGENCYCONTACTADDRESS, true);
}

//emergencycontactemail
std::string RtPatient::get_emergencycontactemail() const { return m_pImp->get_emergencycontactemail();}
void RtPatient::set_emergencycontactemail(const std::string& emergencycontactemail)
{
    m_pImp->set_emergencycontactemail(emergencycontactemail);
    enable_field(PATIENT_EMERGENCYCONTACTEMAIL);
    setdirty_field(PATIENT_EMERGENCYCONTACTEMAIL, true);
}

//emergencycontacttelephone
std::string RtPatient::get_emergencycontacttelephone() const { return m_pImp->get_emergencycontacttelephone();}
void RtPatient::set_emergencycontacttelephone(const std::string& emergencycontacttelephone)
{
    m_pImp->set_emergencycontacttelephone(emergencycontacttelephone);
    enable_field(PATIENT_EMERGENCYCONTACTTELEPHONE);
    setdirty_field(PATIENT_EMERGENCYCONTACTTELEPHONE, true);
}

//emergencycontactmobile
std::string RtPatient::get_emergencycontactmobile() const { return m_pImp->get_emergencycontactmobile();}
void RtPatient::set_emergencycontactmobile(const std::string& emergencycontactmobile)
{
    m_pImp->set_emergencycontactmobile(emergencycontactmobile);
    enable_field(PATIENT_EMERGENCYCONTACTMOBILE);
    setdirty_field(PATIENT_EMERGENCYCONTACTMOBILE, true);
}

//emergencycontactcountrycode
std::string RtPatient::get_emergencycontactcountrycode() const { return m_pImp->get_emergencycontactcountrycode();}
void RtPatient::set_emergencycontactcountrycode(const std::string& emergencycontactcountrycode)
{
    m_pImp->set_emergencycontactcountrycode(emergencycontactcountrycode);
    enable_field(PATIENT_EMERGENCYCONTACTCOUNTRYCODE);
    setdirty_field(PATIENT_EMERGENCYCONTACTCOUNTRYCODE, true);
}

//emergencycontactareacode
std::string RtPatient::get_emergencycontactareacode() const { return m_pImp->get_emergencycontactareacode();}
void RtPatient::set_emergencycontactareacode(const std::string& emergencycontactareacode)
{
    m_pImp->set_emergencycontactareacode(emergencycontactareacode);
    enable_field(PATIENT_EMERGENCYCONTACTAREACODE);
    setdirty_field(PATIENT_EMERGENCYCONTACTAREACODE, true);
}

//contactfirstname
std::string RtPatient::get_contactfirstname() const { return m_pImp->get_contactfirstname();}
void RtPatient::set_contactfirstname(const std::string& contactfirstname)
{
    m_pImp->set_contactfirstname(contactfirstname);
    enable_field(PATIENT_CONTACTFIRSTNAME);
    setdirty_field(PATIENT_CONTACTFIRSTNAME, true);
}

//contactlastname
std::string RtPatient::get_contactlastname() const { return m_pImp->get_contactlastname();}
void RtPatient::set_contactlastname(const std::string& contactlastname)
{
    m_pImp->set_contactlastname(contactlastname);
    enable_field(PATIENT_CONTACTLASTNAME);
    setdirty_field(PATIENT_CONTACTLASTNAME, true);
}

//contactrelationship
int RtPatient::get_contactrelationship() const { return m_pImp->get_contactrelationship();}
void RtPatient::set_contactrelationship(const int& contactrelationship)
{
    m_pImp->set_contactrelationship(contactrelationship);
    enable_field(PATIENT_CONTACTRELATIONSHIP);
    setdirty_field(PATIENT_CONTACTRELATIONSHIP, true);
}

//contactcountry
int RtPatient::get_contactcountry() const { return m_pImp->get_contactcountry();}
void RtPatient::set_contactcountry(const int& contactcountry)
{
    m_pImp->set_contactcountry(contactcountry);
    enable_field(PATIENT_CONTACTCOUNTRY);
    setdirty_field(PATIENT_CONTACTCOUNTRY, true);
}

//contactprovince
int RtPatient::get_contactprovince() const { return m_pImp->get_contactprovince();}
void RtPatient::set_contactprovince(const int& contactprovince)
{
    m_pImp->set_contactprovince(contactprovince);
    enable_field(PATIENT_CONTACTPROVINCE);
    setdirty_field(PATIENT_CONTACTPROVINCE, true);
}

//contactcity
std::string RtPatient::get_contactcity() const { return m_pImp->get_contactcity();}
void RtPatient::set_contactcity(const std::string& contactcity)
{
    m_pImp->set_contactcity(contactcity);
    enable_field(PATIENT_CONTACTCITY);
    setdirty_field(PATIENT_CONTACTCITY, true);
}

//contactpostcode
std::string RtPatient::get_contactpostcode() const { return m_pImp->get_contactpostcode();}
void RtPatient::set_contactpostcode(const std::string& contactpostcode)
{
    m_pImp->set_contactpostcode(contactpostcode);
    enable_field(PATIENT_CONTACTPOSTCODE);
    setdirty_field(PATIENT_CONTACTPOSTCODE, true);
}

//contactaddress
std::string RtPatient::get_contactaddress() const { return m_pImp->get_contactaddress();}
void RtPatient::set_contactaddress(const std::string& contactaddress)
{
    m_pImp->set_contactaddress(contactaddress);
    enable_field(PATIENT_CONTACTADDRESS);
    setdirty_field(PATIENT_CONTACTADDRESS, true);
}

//contactemail
std::string RtPatient::get_contactemail() const { return m_pImp->get_contactemail();}
void RtPatient::set_contactemail(const std::string& contactemail)
{
    m_pImp->set_contactemail(contactemail);
    enable_field(PATIENT_CONTACTEMAIL);
    setdirty_field(PATIENT_CONTACTEMAIL, true);
}

//contacttelephone
std::string RtPatient::get_contacttelephone() const { return m_pImp->get_contacttelephone();}
void RtPatient::set_contacttelephone(const std::string& contacttelephone)
{
    m_pImp->set_contacttelephone(contacttelephone);
    enable_field(PATIENT_CONTACTTELEPHONE);
    setdirty_field(PATIENT_CONTACTTELEPHONE, true);
}

//contactmobile
std::string RtPatient::get_contactmobile() const { return m_pImp->get_contactmobile();}
void RtPatient::set_contactmobile(const std::string& contactmobile)
{
    m_pImp->set_contactmobile(contactmobile);
    enable_field(PATIENT_CONTACTMOBILE);
    setdirty_field(PATIENT_CONTACTMOBILE, true);
}

//contactcountrycode
std::string RtPatient::get_contactcountrycode() const { return m_pImp->get_contactcountrycode();}
void RtPatient::set_contactcountrycode(const std::string& contactcountrycode)
{
    m_pImp->set_contactcountrycode(contactcountrycode);
    enable_field(PATIENT_CONTACTCOUNTRYCODE);
    setdirty_field(PATIENT_CONTACTCOUNTRYCODE, true);
}

//contactareacode
std::string RtPatient::get_contactareacode() const { return m_pImp->get_contactareacode();}
void RtPatient::set_contactareacode(const std::string& contactareacode)
{
    m_pImp->set_contactareacode(contactareacode);
    enable_field(PATIENT_CONTACTAREACODE);
    setdirty_field(PATIENT_CONTACTAREACODE, true);
}

//state
std::string RtPatient::get_state() const { return m_pImp->get_state();}
void RtPatient::set_state(const std::string& state)
{
    m_pImp->set_state(state);
    enable_field(PATIENT_STATE);
    setdirty_field(PATIENT_STATE, true);
}

//emergencystate
std::string RtPatient::get_emergencystate() const { return m_pImp->get_emergencystate();}
void RtPatient::set_emergencystate(const std::string& emergencystate)
{
    m_pImp->set_emergencystate(emergencystate);
    enable_field(PATIENT_EMERGENCYSTATE);
    setdirty_field(PATIENT_EMERGENCYSTATE, true);
}

//contactstate
std::string RtPatient::get_contactstate() const { return m_pImp->get_contactstate();}
void RtPatient::set_contactstate(const std::string& contactstate)
{
    m_pImp->set_contactstate(contactstate);
    enable_field(PATIENT_CONTACTSTATE);
    setdirty_field(PATIENT_CONTACTSTATE, true);
}

//originalstate
std::string RtPatient::get_originalstate() const { return m_pImp->get_originalstate();}
void RtPatient::set_originalstate(const std::string& originalstate)
{
    m_pImp->set_originalstate(originalstate);
    enable_field(PATIENT_ORIGINALSTATE);
    setdirty_field(PATIENT_ORIGINALSTATE, true);
}

//weighthistory
std::string RtPatient::get_weighthistory() const { return m_pImp->get_weighthistory();}
void RtPatient::set_weighthistory(const std::string& weighthistory)
{
    m_pImp->set_weighthistory(weighthistory);
    enable_field(PATIENT_WEIGHTHISTORY);
    setdirty_field(PATIENT_WEIGHTHISTORY, true);
}

//clincalhistory
std::string RtPatient::get_clincalhistory() const { return m_pImp->get_clincalhistory();}
void RtPatient::set_clincalhistory(const std::string& clincalhistory)
{
    m_pImp->set_clincalhistory(clincalhistory);
    enable_field(PATIENT_CLINCALHISTORY);
    setdirty_field(PATIENT_CLINCALHISTORY, true);
}

//crc
std::string RtPatient::get_crc() const { return m_pImp->get_crc();}
void RtPatient::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(PATIENT_CRC);
    setdirty_field(PATIENT_CRC, true);
}

//isfromhis
bool RtPatient::get_isfromhis() const { return m_pImp->get_isfromhis();}
void RtPatient::set_isfromhis(const bool& isfromhis)
{
    m_pImp->set_isfromhis(isfromhis);
    enable_field(PATIENT_ISFROMHIS);
    setdirty_field(PATIENT_ISFROMHIS, true);
}

//occupation
int RtPatient::get_occupation() const { return m_pImp->get_occupation();}
void RtPatient::set_occupation(const int& occupation)
{
    m_pImp->set_occupation(occupation);
    enable_field(PATIENT_OCCUPATION);
    setdirty_field(PATIENT_OCCUPATION, true);
}

//patientcardphotofilepath
std::string RtPatient::get_patientcardphotofilepath() const { return m_pImp->get_patientcardphotofilepath();}
void RtPatient::set_patientcardphotofilepath(const std::string& patientcardphotofilepath)
{
    m_pImp->set_patientcardphotofilepath(patientcardphotofilepath);
    enable_field(PATIENT_PATIENTCARDPHOTOFILEPATH);
    setdirty_field(PATIENT_PATIENTCARDPHOTOFILEPATH, true);
}

//registerdate
DATETIME_BOOST RtPatient::get_registerdate() const { return m_pImp->get_registerdate();}
void RtPatient::set_registerdate(const DATETIME_BOOST& registerdate)
{
    m_pImp->set_registerdate(registerdate);
    enable_field(PATIENT_REGISTERDATE);
    setdirty_field(PATIENT_REGISTERDATE, true);
}

//updatetime
DATETIME_BOOST RtPatient::get_updatetime() const { return m_pImp->get_updatetime();}
void RtPatient::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(PATIENT_UPDATETIME);
    setdirty_field(PATIENT_UPDATETIME, true);
}

//risk
std::string RtPatient::get_risk() const { return m_pImp->get_risk();}
void RtPatient::set_risk(const std::string& risk)
{
    m_pImp->set_risk(risk);
    enable_field(PATIENT_RISK);
    setdirty_field(PATIENT_RISK, true);
}

//enableweightlimit
bool RtPatient::get_enableweightlimit() const { return m_pImp->get_enableweightlimit();}
void RtPatient::set_enableweightlimit(const bool& enableweightlimit)
{
    m_pImp->set_enableweightlimit(enableweightlimit);
    enable_field(PATIENT_ENABLEWEIGHTLIMIT);
    setdirty_field(PATIENT_ENABLEWEIGHTLIMIT, true);
}

//weightuplimit
double RtPatient::get_weightuplimit() const { return m_pImp->get_weightuplimit();}
void RtPatient::set_weightuplimit(const double& weightuplimit)
{
    m_pImp->set_weightuplimit(weightuplimit);
    enable_field(PATIENT_WEIGHTUPLIMIT);
    setdirty_field(PATIENT_WEIGHTUPLIMIT, true);
}

//weightdownlimit
double RtPatient::get_weightdownlimit() const { return m_pImp->get_weightdownlimit();}
void RtPatient::set_weightdownlimit(const double& weightdownlimit)
{
    m_pImp->set_weightdownlimit(weightdownlimit);
    enable_field(PATIENT_WEIGHTDOWNLIMIT);
    setdirty_field(PATIENT_WEIGHTDOWNLIMIT, true);
}

//restoredatetime
DATETIME_BOOST RtPatient::get_restoredatetime() const { return m_pImp->get_restoredatetime();}
void RtPatient::set_restoredatetime(const DATETIME_BOOST& restoredatetime)
{
    m_pImp->set_restoredatetime(restoredatetime);
    enable_field(PATIENT_RESTOREDATETIME);
    setdirty_field(PATIENT_RESTOREDATETIME, true);
}

//backupdatetime
DATETIME_BOOST RtPatient::get_backupdatetime() const { return m_pImp->get_backupdatetime();}
void RtPatient::set_backupdatetime(const DATETIME_BOOST& backupdatetime)
{
    m_pImp->set_backupdatetime(backupdatetime);
    enable_field(PATIENT_BACKUPDATETIME);
    setdirty_field(PATIENT_BACKUPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE