//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_doseoptendcriterionbyinteration.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_doseoptendcriterionbyinteration.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDoseoptendcriterionbyinterationImp::RtDoseoptendcriterionbyinterationImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_optendcriteriontype(0),
    m_iternum(0),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDoseoptendcriterionbyinterationImp::RtDoseoptendcriterionbyinterationImp(const RtDoseoptendcriterionbyinterationImp& doseoptendcriterionbyinteration):
    m_uid(doseoptendcriterionbyinteration.get_uid()),
    m_optendcriteriontype(doseoptendcriterionbyinteration.get_optendcriteriontype()),
    m_iternum(doseoptendcriterionbyinteration.get_iternum()),
    m_updatetime(doseoptendcriterionbyinteration.get_updatetime())
{
}

RtDoseoptendcriterionbyinterationImp& RtDoseoptendcriterionbyinterationImp::operator=(const RtDoseoptendcriterionbyinterationImp& doseoptendcriterionbyinteration)
{
    if (this != &doseoptendcriterionbyinteration){
        this->m_uid = doseoptendcriterionbyinteration.get_uid();
        this->m_optendcriteriontype = doseoptendcriterionbyinteration.get_optendcriteriontype();
        this->m_iternum = doseoptendcriterionbyinteration.get_iternum();
        this->m_updatetime = doseoptendcriterionbyinteration.get_updatetime();
    }
    return *this;
}

RtDoseoptendcriterionbyinterationImp::~RtDoseoptendcriterionbyinterationImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDoseoptendcriterionbyinteration::RtDoseoptendcriterionbyinteration(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDoseoptendcriterionbyinterationImp(bGeneraterUid);
    set_flags(DOSEOPTENDCRITERIONBYINTERATION_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DOSEOPTENDCRITERIONBYINTERATION_FIELD_NULL);
}

RtDoseoptendcriterionbyinteration::RtDoseoptendcriterionbyinteration(const RtDoseoptendcriterionbyinteration& doseoptendcriterionbyinteration): RtDatabaseObject(doseoptendcriterionbyinteration),
   m_pImp(new RtDoseoptendcriterionbyinterationImp(*doseoptendcriterionbyinteration.m_pImp))
{
}

RtDoseoptendcriterionbyinteration& RtDoseoptendcriterionbyinteration::operator = (const RtDoseoptendcriterionbyinteration& doseoptendcriterionbyinteration)
{
    if(this != &doseoptendcriterionbyinteration)
    {
        RtDatabaseObject::operator=(doseoptendcriterionbyinteration);
        *this->m_pImp = *doseoptendcriterionbyinteration.m_pImp;
    }
    return *this;
}

RtDoseoptendcriterionbyinteration::~RtDoseoptendcriterionbyinteration()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDoseoptendcriterionbyinteration::get_uid() const { return m_pImp->get_uid();}
void RtDoseoptendcriterionbyinteration::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DOSEOPTENDCRITERIONBYINTERATION_UID);
    setdirty_field(DOSEOPTENDCRITERIONBYINTERATION_UID, true);
}

//optendcriteriontype
int RtDoseoptendcriterionbyinteration::get_optendcriteriontype() const { return m_pImp->get_optendcriteriontype();}
void RtDoseoptendcriterionbyinteration::set_optendcriteriontype(const int& optendcriteriontype)
{
    m_pImp->set_optendcriteriontype(optendcriteriontype);
    enable_field(DOSEOPTENDCRITERIONBYINTERATION_OPTENDCRITERIONTYPE);
    setdirty_field(DOSEOPTENDCRITERIONBYINTERATION_OPTENDCRITERIONTYPE, true);
}

//iternum
int RtDoseoptendcriterionbyinteration::get_iternum() const { return m_pImp->get_iternum();}
void RtDoseoptendcriterionbyinteration::set_iternum(const int& iternum)
{
    m_pImp->set_iternum(iternum);
    enable_field(DOSEOPTENDCRITERIONBYINTERATION_ITERNUM);
    setdirty_field(DOSEOPTENDCRITERIONBYINTERATION_ITERNUM, true);
}

//updatetime
DATETIME_BOOST RtDoseoptendcriterionbyinteration::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDoseoptendcriterionbyinteration::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DOSEOPTENDCRITERIONBYINTERATION_UPDATETIME);
    setdirty_field(DOSEOPTENDCRITERIONBYINTERATION_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE