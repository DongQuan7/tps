//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_drrsetting.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_drrsetting.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDrrsettingImp::RtDrrsettingImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_normalgroupuid(""),
    m_electronenergy(0.f),
    m_ct2densityuid(""),
    m_ctthresholdminvalue(0.f),
    m_ctthresholdmaxvalue(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDrrsettingImp::RtDrrsettingImp(const RtDrrsettingImp& drrsetting):
    m_uid(drrsetting.get_uid()),
    m_normalgroupuid(drrsetting.get_normalgroupuid()),
    m_electronenergy(drrsetting.get_electronenergy()),
    m_ct2densityuid(drrsetting.get_ct2densityuid()),
    m_ctthresholdminvalue(drrsetting.get_ctthresholdminvalue()),
    m_ctthresholdmaxvalue(drrsetting.get_ctthresholdmaxvalue()),
    m_updatetime(drrsetting.get_updatetime())
{
}

RtDrrsettingImp& RtDrrsettingImp::operator=(const RtDrrsettingImp& drrsetting)
{
    if (this != &drrsetting){
        this->m_uid = drrsetting.get_uid();
        this->m_normalgroupuid = drrsetting.get_normalgroupuid();
        this->m_electronenergy = drrsetting.get_electronenergy();
        this->m_ct2densityuid = drrsetting.get_ct2densityuid();
        this->m_ctthresholdminvalue = drrsetting.get_ctthresholdminvalue();
        this->m_ctthresholdmaxvalue = drrsetting.get_ctthresholdmaxvalue();
        this->m_updatetime = drrsetting.get_updatetime();
    }
    return *this;
}

RtDrrsettingImp::~RtDrrsettingImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDrrsetting::RtDrrsetting(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDrrsettingImp(bGeneraterUid);
    set_flags(DRRSETTING_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DRRSETTING_FIELD_NULL);
}

RtDrrsetting::RtDrrsetting(const RtDrrsetting& drrsetting): RtDatabaseObject(drrsetting),
   m_pImp(new RtDrrsettingImp(*drrsetting.m_pImp))
{
}

RtDrrsetting& RtDrrsetting::operator = (const RtDrrsetting& drrsetting)
{
    if(this != &drrsetting)
    {
        RtDatabaseObject::operator=(drrsetting);
        *this->m_pImp = *drrsetting.m_pImp;
    }
    return *this;
}

RtDrrsetting::~RtDrrsetting()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDrrsetting::get_uid() const { return m_pImp->get_uid();}
void RtDrrsetting::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DRRSETTING_UID);
    setdirty_field(DRRSETTING_UID, true);
}

//normalgroupuid
std::string RtDrrsetting::get_normalgroupuid() const { return m_pImp->get_normalgroupuid();}
void RtDrrsetting::set_normalgroupuid(const std::string& normalgroupuid)
{
    m_pImp->set_normalgroupuid(normalgroupuid);
    enable_field(DRRSETTING_NORMALGROUPUID);
    setdirty_field(DRRSETTING_NORMALGROUPUID, true);
}

//electronenergy
float RtDrrsetting::get_electronenergy() const { return m_pImp->get_electronenergy();}
void RtDrrsetting::set_electronenergy(const float& electronenergy)
{
    m_pImp->set_electronenergy(electronenergy);
    enable_field(DRRSETTING_ELECTRONENERGY);
    setdirty_field(DRRSETTING_ELECTRONENERGY, true);
}

//ct2densityuid
std::string RtDrrsetting::get_ct2densityuid() const { return m_pImp->get_ct2densityuid();}
void RtDrrsetting::set_ct2densityuid(const std::string& ct2densityuid)
{
    m_pImp->set_ct2densityuid(ct2densityuid);
    enable_field(DRRSETTING_CT2DENSITYUID);
    setdirty_field(DRRSETTING_CT2DENSITYUID, true);
}

//ctthresholdminvalue
float RtDrrsetting::get_ctthresholdminvalue() const { return m_pImp->get_ctthresholdminvalue();}
void RtDrrsetting::set_ctthresholdminvalue(const float& ctthresholdminvalue)
{
    m_pImp->set_ctthresholdminvalue(ctthresholdminvalue);
    enable_field(DRRSETTING_CTTHRESHOLDMINVALUE);
    setdirty_field(DRRSETTING_CTTHRESHOLDMINVALUE, true);
}

//ctthresholdmaxvalue
float RtDrrsetting::get_ctthresholdmaxvalue() const { return m_pImp->get_ctthresholdmaxvalue();}
void RtDrrsetting::set_ctthresholdmaxvalue(const float& ctthresholdmaxvalue)
{
    m_pImp->set_ctthresholdmaxvalue(ctthresholdmaxvalue);
    enable_field(DRRSETTING_CTTHRESHOLDMAXVALUE);
    setdirty_field(DRRSETTING_CTTHRESHOLDMAXVALUE, true);
}

//updatetime
DATETIME_BOOST RtDrrsetting::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDrrsetting::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DRRSETTING_UPDATETIME);
    setdirty_field(DRRSETTING_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE