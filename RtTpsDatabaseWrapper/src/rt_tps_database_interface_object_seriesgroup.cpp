//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_seriesgroup.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_seriesgroup.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtSeriesgroupImp::RtSeriesgroupImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_patientuid(""),
    m_name(""),
    m_grouptype(0),
    m_mainseriesuid(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtSeriesgroupImp::RtSeriesgroupImp(const RtSeriesgroupImp& seriesgroup):
    m_uid(seriesgroup.get_uid()),
    m_patientuid(seriesgroup.get_patientuid()),
    m_name(seriesgroup.get_name()),
    m_grouptype(seriesgroup.get_grouptype()),
    m_mainseriesuid(seriesgroup.get_mainseriesuid()),
    m_updatetime(seriesgroup.get_updatetime())
{
}

RtSeriesgroupImp& RtSeriesgroupImp::operator=(const RtSeriesgroupImp& seriesgroup)
{
    if (this != &seriesgroup){
        this->m_uid = seriesgroup.get_uid();
        this->m_patientuid = seriesgroup.get_patientuid();
        this->m_name = seriesgroup.get_name();
        this->m_grouptype = seriesgroup.get_grouptype();
        this->m_mainseriesuid = seriesgroup.get_mainseriesuid();
        this->m_updatetime = seriesgroup.get_updatetime();
    }
    return *this;
}

RtSeriesgroupImp::~RtSeriesgroupImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtSeriesgroup::RtSeriesgroup(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtSeriesgroupImp(bGeneraterUid);
    set_flags(SERIESGROUP_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_SERIESGROUP_FIELD_NULL);
}

RtSeriesgroup::RtSeriesgroup(const RtSeriesgroup& seriesgroup): RtDatabaseObject(seriesgroup),
   m_pImp(new RtSeriesgroupImp(*seriesgroup.m_pImp))
{
}

RtSeriesgroup& RtSeriesgroup::operator = (const RtSeriesgroup& seriesgroup)
{
    if(this != &seriesgroup)
    {
        RtDatabaseObject::operator=(seriesgroup);
        *this->m_pImp = *seriesgroup.m_pImp;
    }
    return *this;
}

RtSeriesgroup::~RtSeriesgroup()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtSeriesgroup::get_uid() const { return m_pImp->get_uid();}
void RtSeriesgroup::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(SERIESGROUP_UID);
    setdirty_field(SERIESGROUP_UID, true);
}

//patientuid
std::string RtSeriesgroup::get_patientuid() const { return m_pImp->get_patientuid();}
void RtSeriesgroup::set_patientuid(const std::string& patientuid)
{
    m_pImp->set_patientuid(patientuid);
    enable_field(SERIESGROUP_PATIENTUID);
    setdirty_field(SERIESGROUP_PATIENTUID, true);
}

//name
std::string RtSeriesgroup::get_name() const { return m_pImp->get_name();}
void RtSeriesgroup::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(SERIESGROUP_NAME);
    setdirty_field(SERIESGROUP_NAME, true);
}

//grouptype
int RtSeriesgroup::get_grouptype() const { return m_pImp->get_grouptype();}
void RtSeriesgroup::set_grouptype(const int& grouptype)
{
    m_pImp->set_grouptype(grouptype);
    enable_field(SERIESGROUP_GROUPTYPE);
    setdirty_field(SERIESGROUP_GROUPTYPE, true);
}

//mainseriesuid
std::string RtSeriesgroup::get_mainseriesuid() const { return m_pImp->get_mainseriesuid();}
void RtSeriesgroup::set_mainseriesuid(const std::string& mainseriesuid)
{
    m_pImp->set_mainseriesuid(mainseriesuid);
    enable_field(SERIESGROUP_MAINSERIESUID);
    setdirty_field(SERIESGROUP_MAINSERIESUID, true);
}

//updatetime
DATETIME_BOOST RtSeriesgroup::get_updatetime() const { return m_pImp->get_updatetime();}
void RtSeriesgroup::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(SERIESGROUP_UPDATETIME);
    setdirty_field(SERIESGROUP_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE