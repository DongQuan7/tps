//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_course.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_course.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtCourseImp::RtCourseImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_patientuid(""),
    m_coursename(""),
    m_creationdatetime(boost::date_time::not_a_date_time),
    m_scopeindicator(0),
    m_prescriptionpresenceflag(false),
    m_radiationsetpresenceflag(false),
    m_isdefault(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtCourseImp::RtCourseImp(const RtCourseImp& course):
    m_uid(course.get_uid()),
    m_patientuid(course.get_patientuid()),
    m_coursename(course.get_coursename()),
    m_creationdatetime(course.get_creationdatetime()),
    m_scopeindicator(course.get_scopeindicator()),
    m_prescriptionpresenceflag(course.get_prescriptionpresenceflag()),
    m_radiationsetpresenceflag(course.get_radiationsetpresenceflag()),
    m_isdefault(course.get_isdefault()),
    m_updatetime(course.get_updatetime())
{
}

RtCourseImp& RtCourseImp::operator=(const RtCourseImp& course)
{
    if (this != &course){
        this->m_uid = course.get_uid();
        this->m_patientuid = course.get_patientuid();
        this->m_coursename = course.get_coursename();
        this->m_creationdatetime = course.get_creationdatetime();
        this->m_scopeindicator = course.get_scopeindicator();
        this->m_prescriptionpresenceflag = course.get_prescriptionpresenceflag();
        this->m_radiationsetpresenceflag = course.get_radiationsetpresenceflag();
        this->m_isdefault = course.get_isdefault();
        this->m_updatetime = course.get_updatetime();
    }
    return *this;
}

RtCourseImp::~RtCourseImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtCourse::RtCourse(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtCourseImp(bGeneraterUid);
    set_flags(COURSE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_COURSE_FIELD_NULL);
}

RtCourse::RtCourse(const RtCourse& course): RtDatabaseObject(course),
   m_pImp(new RtCourseImp(*course.m_pImp))
{
}

RtCourse& RtCourse::operator = (const RtCourse& course)
{
    if(this != &course)
    {
        RtDatabaseObject::operator=(course);
        *this->m_pImp = *course.m_pImp;
    }
    return *this;
}

RtCourse::~RtCourse()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtCourse::get_uid() const { return m_pImp->get_uid();}
void RtCourse::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(COURSE_UID);
    setdirty_field(COURSE_UID, true);
}

//patientuid
std::string RtCourse::get_patientuid() const { return m_pImp->get_patientuid();}
void RtCourse::set_patientuid(const std::string& patientuid)
{
    m_pImp->set_patientuid(patientuid);
    enable_field(COURSE_PATIENTUID);
    setdirty_field(COURSE_PATIENTUID, true);
}

//coursename
std::string RtCourse::get_coursename() const { return m_pImp->get_coursename();}
void RtCourse::set_coursename(const std::string& coursename)
{
    m_pImp->set_coursename(coursename);
    enable_field(COURSE_COURSENAME);
    setdirty_field(COURSE_COURSENAME, true);
}

//creationdatetime
DATE_BOOST RtCourse::get_creationdatetime() const { return m_pImp->get_creationdatetime();}
void RtCourse::set_creationdatetime(const DATE_BOOST& creationdatetime)
{
    m_pImp->set_creationdatetime(creationdatetime);
    enable_field(COURSE_CREATIONDATETIME);
    setdirty_field(COURSE_CREATIONDATETIME, true);
}

//scopeindicator
int RtCourse::get_scopeindicator() const { return m_pImp->get_scopeindicator();}
void RtCourse::set_scopeindicator(const int& scopeindicator)
{
    m_pImp->set_scopeindicator(scopeindicator);
    enable_field(COURSE_SCOPEINDICATOR);
    setdirty_field(COURSE_SCOPEINDICATOR, true);
}

//prescriptionpresenceflag
bool RtCourse::get_prescriptionpresenceflag() const { return m_pImp->get_prescriptionpresenceflag();}
void RtCourse::set_prescriptionpresenceflag(const bool& prescriptionpresenceflag)
{
    m_pImp->set_prescriptionpresenceflag(prescriptionpresenceflag);
    enable_field(COURSE_PRESCRIPTIONPRESENCEFLAG);
    setdirty_field(COURSE_PRESCRIPTIONPRESENCEFLAG, true);
}

//radiationsetpresenceflag
bool RtCourse::get_radiationsetpresenceflag() const { return m_pImp->get_radiationsetpresenceflag();}
void RtCourse::set_radiationsetpresenceflag(const bool& radiationsetpresenceflag)
{
    m_pImp->set_radiationsetpresenceflag(radiationsetpresenceflag);
    enable_field(COURSE_RADIATIONSETPRESENCEFLAG);
    setdirty_field(COURSE_RADIATIONSETPRESENCEFLAG, true);
}

//isdefault
bool RtCourse::get_isdefault() const { return m_pImp->get_isdefault();}
void RtCourse::set_isdefault(const bool& isdefault)
{
    m_pImp->set_isdefault(isdefault);
    enable_field(COURSE_ISDEFAULT);
    setdirty_field(COURSE_ISDEFAULT, true);
}

//updatetime
DATETIME_BOOST RtCourse::get_updatetime() const { return m_pImp->get_updatetime();}
void RtCourse::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(COURSE_UPDATETIME);
    setdirty_field(COURSE_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE