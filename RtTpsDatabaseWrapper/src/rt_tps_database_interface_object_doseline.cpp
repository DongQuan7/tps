//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_doseline.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_doseline.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDoselineImp::RtDoselineImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_planuid(""),
    m_doseratio(0.f),
    m_isvisible(false),
    m_red(0.f),
    m_green(0.f),
    m_blue(0.f),
    m_alpha(0.f),
    m_isvisible3d(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDoselineImp::RtDoselineImp(const RtDoselineImp& doseline):
    m_uid(doseline.get_uid()),
    m_planuid(doseline.get_planuid()),
    m_doseratio(doseline.get_doseratio()),
    m_isvisible(doseline.get_isvisible()),
    m_red(doseline.get_red()),
    m_green(doseline.get_green()),
    m_blue(doseline.get_blue()),
    m_alpha(doseline.get_alpha()),
    m_isvisible3d(doseline.get_isvisible3d()),
    m_updatetime(doseline.get_updatetime())
{
}

RtDoselineImp& RtDoselineImp::operator=(const RtDoselineImp& doseline)
{
    if (this != &doseline){
        this->m_uid = doseline.get_uid();
        this->m_planuid = doseline.get_planuid();
        this->m_doseratio = doseline.get_doseratio();
        this->m_isvisible = doseline.get_isvisible();
        this->m_red = doseline.get_red();
        this->m_green = doseline.get_green();
        this->m_blue = doseline.get_blue();
        this->m_alpha = doseline.get_alpha();
        this->m_isvisible3d = doseline.get_isvisible3d();
        this->m_updatetime = doseline.get_updatetime();
    }
    return *this;
}

RtDoselineImp::~RtDoselineImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDoseline::RtDoseline(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDoselineImp(bGeneraterUid);
    set_flags(DOSELINE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DOSELINE_FIELD_NULL);
}

RtDoseline::RtDoseline(const RtDoseline& doseline): RtDatabaseObject(doseline),
   m_pImp(new RtDoselineImp(*doseline.m_pImp))
{
}

RtDoseline& RtDoseline::operator = (const RtDoseline& doseline)
{
    if(this != &doseline)
    {
        RtDatabaseObject::operator=(doseline);
        *this->m_pImp = *doseline.m_pImp;
    }
    return *this;
}

RtDoseline::~RtDoseline()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDoseline::get_uid() const { return m_pImp->get_uid();}
void RtDoseline::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DOSELINE_UID);
    setdirty_field(DOSELINE_UID, true);
}

//planuid
std::string RtDoseline::get_planuid() const { return m_pImp->get_planuid();}
void RtDoseline::set_planuid(const std::string& planuid)
{
    m_pImp->set_planuid(planuid);
    enable_field(DOSELINE_PLANUID);
    setdirty_field(DOSELINE_PLANUID, true);
}

//doseratio
float RtDoseline::get_doseratio() const { return m_pImp->get_doseratio();}
void RtDoseline::set_doseratio(const float& doseratio)
{
    m_pImp->set_doseratio(doseratio);
    enable_field(DOSELINE_DOSERATIO);
    setdirty_field(DOSELINE_DOSERATIO, true);
}

//isvisible
bool RtDoseline::get_isvisible() const { return m_pImp->get_isvisible();}
void RtDoseline::set_isvisible(const bool& isvisible)
{
    m_pImp->set_isvisible(isvisible);
    enable_field(DOSELINE_ISVISIBLE);
    setdirty_field(DOSELINE_ISVISIBLE, true);
}

//red
float RtDoseline::get_red() const { return m_pImp->get_red();}
void RtDoseline::set_red(const float& red)
{
    m_pImp->set_red(red);
    enable_field(DOSELINE_RED);
    setdirty_field(DOSELINE_RED, true);
}

//green
float RtDoseline::get_green() const { return m_pImp->get_green();}
void RtDoseline::set_green(const float& green)
{
    m_pImp->set_green(green);
    enable_field(DOSELINE_GREEN);
    setdirty_field(DOSELINE_GREEN, true);
}

//blue
float RtDoseline::get_blue() const { return m_pImp->get_blue();}
void RtDoseline::set_blue(const float& blue)
{
    m_pImp->set_blue(blue);
    enable_field(DOSELINE_BLUE);
    setdirty_field(DOSELINE_BLUE, true);
}

//alpha
float RtDoseline::get_alpha() const { return m_pImp->get_alpha();}
void RtDoseline::set_alpha(const float& alpha)
{
    m_pImp->set_alpha(alpha);
    enable_field(DOSELINE_ALPHA);
    setdirty_field(DOSELINE_ALPHA, true);
}

//isvisible3d
bool RtDoseline::get_isvisible3d() const { return m_pImp->get_isvisible3d();}
void RtDoseline::set_isvisible3d(const bool& isvisible3d)
{
    m_pImp->set_isvisible3d(isvisible3d);
    enable_field(DOSELINE_ISVISIBLE3D);
    setdirty_field(DOSELINE_ISVISIBLE3D, true);
}

//updatetime
DATETIME_BOOST RtDoseline::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDoseline::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DOSELINE_UPDATETIME);
    setdirty_field(DOSELINE_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE