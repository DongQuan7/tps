//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_approverecord.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_approverecord.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtApproverecordImp::RtApproverecordImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_objectuid(""),
    m_objecttype(0),
    m_approver(""),
    m_approvedatetime(boost::date_time::not_a_date_time),
    m_isapproved(false),
    m_changeset(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtApproverecordImp::RtApproverecordImp(const RtApproverecordImp& approverecord):
    m_uid(approverecord.get_uid()),
    m_objectuid(approverecord.get_objectuid()),
    m_objecttype(approverecord.get_objecttype()),
    m_approver(approverecord.get_approver()),
    m_approvedatetime(approverecord.get_approvedatetime()),
    m_isapproved(approverecord.get_isapproved()),
    m_changeset(approverecord.get_changeset()),
    m_updatetime(approverecord.get_updatetime())
{
}

RtApproverecordImp& RtApproverecordImp::operator=(const RtApproverecordImp& approverecord)
{
    if (this != &approverecord){
        this->m_uid = approverecord.get_uid();
        this->m_objectuid = approverecord.get_objectuid();
        this->m_objecttype = approverecord.get_objecttype();
        this->m_approver = approverecord.get_approver();
        this->m_approvedatetime = approverecord.get_approvedatetime();
        this->m_isapproved = approverecord.get_isapproved();
        this->m_changeset = approverecord.get_changeset();
        this->m_updatetime = approverecord.get_updatetime();
    }
    return *this;
}

RtApproverecordImp::~RtApproverecordImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtApproverecord::RtApproverecord(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtApproverecordImp(bGeneraterUid);
    set_flags(APPROVERECORD_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_APPROVERECORD_FIELD_NULL);
}

RtApproverecord::RtApproverecord(const RtApproverecord& approverecord): RtDatabaseObject(approverecord),
   m_pImp(new RtApproverecordImp(*approverecord.m_pImp))
{
}

RtApproverecord& RtApproverecord::operator = (const RtApproverecord& approverecord)
{
    if(this != &approverecord)
    {
        RtDatabaseObject::operator=(approverecord);
        *this->m_pImp = *approverecord.m_pImp;
    }
    return *this;
}

RtApproverecord::~RtApproverecord()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtApproverecord::get_uid() const { return m_pImp->get_uid();}
void RtApproverecord::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(APPROVERECORD_UID);
    setdirty_field(APPROVERECORD_UID, true);
}

//objectuid
std::string RtApproverecord::get_objectuid() const { return m_pImp->get_objectuid();}
void RtApproverecord::set_objectuid(const std::string& objectuid)
{
    m_pImp->set_objectuid(objectuid);
    enable_field(APPROVERECORD_OBJECTUID);
    setdirty_field(APPROVERECORD_OBJECTUID, true);
}

//objecttype
int RtApproverecord::get_objecttype() const { return m_pImp->get_objecttype();}
void RtApproverecord::set_objecttype(const int& objecttype)
{
    m_pImp->set_objecttype(objecttype);
    enable_field(APPROVERECORD_OBJECTTYPE);
    setdirty_field(APPROVERECORD_OBJECTTYPE, true);
}

//approver
std::string RtApproverecord::get_approver() const { return m_pImp->get_approver();}
void RtApproverecord::set_approver(const std::string& approver)
{
    m_pImp->set_approver(approver);
    enable_field(APPROVERECORD_APPROVER);
    setdirty_field(APPROVERECORD_APPROVER, true);
}

//approvedatetime
DATETIME_BOOST RtApproverecord::get_approvedatetime() const { return m_pImp->get_approvedatetime();}
void RtApproverecord::set_approvedatetime(const DATETIME_BOOST& approvedatetime)
{
    m_pImp->set_approvedatetime(approvedatetime);
    enable_field(APPROVERECORD_APPROVEDATETIME);
    setdirty_field(APPROVERECORD_APPROVEDATETIME, true);
}

//isapproved
bool RtApproverecord::get_isapproved() const { return m_pImp->get_isapproved();}
void RtApproverecord::set_isapproved(const bool& isapproved)
{
    m_pImp->set_isapproved(isapproved);
    enable_field(APPROVERECORD_ISAPPROVED);
    setdirty_field(APPROVERECORD_ISAPPROVED, true);
}

//changeset
std::string RtApproverecord::get_changeset() const { return m_pImp->get_changeset();}
void RtApproverecord::set_changeset(const std::string& changeset)
{
    m_pImp->set_changeset(changeset);
    enable_field(APPROVERECORD_CHANGESET);
    setdirty_field(APPROVERECORD_CHANGESET, true);
}

//updatetime
DATETIME_BOOST RtApproverecord::get_updatetime() const { return m_pImp->get_updatetime();}
void RtApproverecord::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(APPROVERECORD_UPDATETIME);
    setdirty_field(APPROVERECORD_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE