//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_poiex.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.9
///
///  \version 1.0
///  \date    6/22/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_poi.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtPoiImp::RtPoiImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_seriesuid(""),
    m_name(""),
    m_coordinate3dx(0.f),
    m_coordinate3dy(0.f),
    m_coordinate3dz(0.f),
    m_type(0),
    m_red(0.f),
    m_green(0.f),
    m_blue(0.f),
    m_alpha(0.f),
    m_isvisible(false),
    m_locktype(0),
    m_dosecalcmethod(0),
    m_roinumberindcm(0),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtPoiImp::RtPoiImp(const RtPoiImp& poi):
    m_uid(poi.get_uid()),
    m_seriesuid(poi.get_seriesuid()),
    m_name(poi.get_name()),
    m_coordinate3dx(poi.get_coordinate3dx()),
    m_coordinate3dy(poi.get_coordinate3dy()),
    m_coordinate3dz(poi.get_coordinate3dz()),
    m_type(poi.get_type()),
    m_red(poi.get_red()),
    m_green(poi.get_green()),
    m_blue(poi.get_blue()),
    m_alpha(poi.get_alpha()),
    m_isvisible(poi.get_isvisible()),
    m_locktype(poi.get_locktype()),
    m_dosecalcmethod(poi.get_dosecalcmethod()),
    m_roinumberindcm(poi.get_roinumberindcm()),
    m_updatetime(poi.get_updatetime())
{
}

RtPoiImp& RtPoiImp::operator=(const RtPoiImp& poi)
{
    if (this != &poi){
        this->m_uid = poi.get_uid();
        this->m_seriesuid = poi.get_seriesuid();
        this->m_name = poi.get_name();
        this->m_coordinate3dx = poi.get_coordinate3dx();
        this->m_coordinate3dy = poi.get_coordinate3dy();
        this->m_coordinate3dz = poi.get_coordinate3dz();
        this->m_type = poi.get_type();
        this->m_red = poi.get_red();
        this->m_green = poi.get_green();
        this->m_blue = poi.get_blue();
        this->m_alpha = poi.get_alpha();
        this->m_isvisible = poi.get_isvisible();
        this->m_locktype = poi.get_locktype();
        this->m_dosecalcmethod = poi.get_dosecalcmethod();
        this->m_roinumberindcm = poi.get_roinumberindcm();
        this->m_updatetime = poi.get_updatetime();
    }
    return *this;
}

RtPoiImp::~RtPoiImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtPoi::RtPoi(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtPoiImp(bGeneraterUid);
    set_flags(POI_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_POI_FIELD_NULL);
}

RtPoi::RtPoi(const RtPoi& poiex): RtDatabaseObject(poiex),
   m_pImp(new RtPoiImp(*poiex.m_pImp))
{
}

RtPoi& RtPoi::operator = (const RtPoi& poiex)
{
    if(this != &poiex)
    {
        RtDatabaseObject::operator=(poiex);
        *this->m_pImp = *poiex.m_pImp;
    }
    return *this;
}

RtPoi::~RtPoi()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtPoi::get_uid() const { return m_pImp->get_uid();}
void RtPoi::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(POI_UID);
    setdirty_field(POI_UID, true);
}

//seriesuid
std::string RtPoi::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtPoi::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(POI_SERIESUID);
    setdirty_field(POI_SERIESUID, true);
}

//name
std::string RtPoi::get_name() const { return m_pImp->get_name();}
void RtPoi::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(POI_NAME);
    setdirty_field(POI_NAME, true);
}

//coordinate3dx
float RtPoi::get_coordinate3dx() const { return m_pImp->get_coordinate3dx();}
void RtPoi::set_coordinate3dx(const float& coordinate3dx)
{
    m_pImp->set_coordinate3dx(coordinate3dx);
    enable_field(POI_COORDINATE3DX);
    setdirty_field(POI_COORDINATE3DX, true);
}

//coordinate3dy
float RtPoi::get_coordinate3dy() const { return m_pImp->get_coordinate3dy();}
void RtPoi::set_coordinate3dy(const float& coordinate3dy)
{
    m_pImp->set_coordinate3dy(coordinate3dy);
    enable_field(POI_COORDINATE3DY);
    setdirty_field(POI_COORDINATE3DY, true);
}

//coordinate3dz
float RtPoi::get_coordinate3dz() const { return m_pImp->get_coordinate3dz();}
void RtPoi::set_coordinate3dz(const float& coordinate3dz)
{
    m_pImp->set_coordinate3dz(coordinate3dz);
    enable_field(POI_COORDINATE3DZ);
    setdirty_field(POI_COORDINATE3DZ, true);
}

//type
int RtPoi::get_type() const { return m_pImp->get_type();}
void RtPoi::set_type(const int& type)
{
    m_pImp->set_type(type);
    enable_field(POI_TYPE);
    setdirty_field(POI_TYPE, true);
}

//red
float RtPoi::get_red() const { return m_pImp->get_red();}
void RtPoi::set_red(const float& red)
{
    m_pImp->set_red(red);
    enable_field(POI_RED);
    setdirty_field(POI_RED, true);
}

//green
float RtPoi::get_green() const { return m_pImp->get_green();}
void RtPoi::set_green(const float& green)
{
    m_pImp->set_green(green);
    enable_field(POI_GREEN);
    setdirty_field(POI_GREEN, true);
}

//blue
float RtPoi::get_blue() const { return m_pImp->get_blue();}
void RtPoi::set_blue(const float& blue)
{
    m_pImp->set_blue(blue);
    enable_field(POI_BLUE);
    setdirty_field(POI_BLUE, true);
}

//alpha
float RtPoi::get_alpha() const { return m_pImp->get_alpha();}
void RtPoi::set_alpha(const float& alpha)
{
    m_pImp->set_alpha(alpha);
    enable_field(POI_ALPHA);
    setdirty_field(POI_ALPHA, true);
}

//isvisible
bool RtPoi::get_isvisible() const { return m_pImp->get_isvisible();}
void RtPoi::set_isvisible(const bool& isvisible)
{
    m_pImp->set_isvisible(isvisible);
    enable_field(POI_ISVISIBLE);
    setdirty_field(POI_ISVISIBLE, true);
}

//locktype
int RtPoi::get_locktype() const { return m_pImp->get_locktype();}
void RtPoi::set_locktype(const int& locktype)
{
    m_pImp->set_locktype(locktype);
    enable_field(POI_LOCKTYPE);
    setdirty_field(POI_LOCKTYPE, true);
}

//dosecalcmethod
int RtPoi::get_dosecalcmethod() const { return m_pImp->get_dosecalcmethod();}
void RtPoi::set_dosecalcmethod(const int& dosecalcmethod)
{
    m_pImp->set_dosecalcmethod(dosecalcmethod);
    enable_field(POI_DOSECALCMETHOD);
    setdirty_field(POI_DOSECALCMETHOD, true);
}

//roinumberindcm
int RtPoi::get_roinumberindcm() const { return m_pImp->get_roinumberindcm();}
void RtPoi::set_roinumberindcm(const int& roinumberindcm)
{
    m_pImp->set_roinumberindcm(roinumberindcm);
    enable_field(POI_ROINUMBERINDCM);
    setdirty_field(POI_ROINUMBERINDCM, true);
}

//updatetime
DATETIME_BOOST RtPoi::get_updatetime() const { return m_pImp->get_updatetime();}
void RtPoi::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(POI_UPDATETIME);
    setdirty_field(POI_UPDATETIME, true);
}

//////////////////////////////////////////////////////////////////////////
std::map<std::string, float> RtPoi::get_poidosemap() const { return m_pImp->get_poidosemap();}
void RtPoi::set_poidosemap(std::map<std::string, float>& poi_dosemap) { m_pImp->set_poidosemap(poi_dosemap);}
bool RtPoi::get_poidose(const std::string& beamuid, float& dose) const { return m_pImp->get_poidose(beamuid, dose);}
void RtPoi::set_poidose(const std::string& beamuid, float poi_dose) { m_pImp->set_poidose(beamuid, poi_dose);}

std::map<std::string, RtDbDef::PoiDoseInfo> RtPoi::get_plandosemap() const { return m_pImp->get_plandosemap();}
void RtPoi::set_plandosemap(std::map<std::string, RtDbDef::PoiDoseInfo>& poi_dosemap) { m_pImp->set_plandosemap(poi_dosemap);}
float RtPoi::get_plandose(const std::string& planuid) const { return m_pImp->get_plandose(planuid);}
RtDbDef::PoiDoseCaclMethod RtPoi::get_plancalcmethod(const std::string& planuid) const { return m_pImp->get_plancalcmehtod(planuid);}
void RtPoi::set_plandoseinfo(const std::string& planuid, float poi_dose, RtDbDef::PoiDoseCaclMethod poi_calcmethod) { m_pImp->set_plandoseinfo(planuid, poi_dose, poi_calcmethod);}


RT_TPS_DATABASE_END_NAMESPACE
