//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_prescription.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_prescription.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtPrescriptionImp::RtPrescriptionImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_siteuid(""),
    m_name(""),
    m_technical(0),
    m_notes(""),
    m_doseperfraction(0.),
    m_fractionsnumber(0),
    m_createdtime(boost::date_time::not_a_date_time),
    m_radiationtype(0),
    m_beammode(""),
    m_relatedprescriptionuid(""),
    m_relatedprescriptionduration(0),
    m_durationtype(0),
    m_afterfractionnumber(0),
    m_treatmentordertype(0),
    m_ismondayselected(false),
    m_istuesdayselected(false),
    m_iswednesdayselected(false),
    m_isthursdayselected(false),
    m_isfridayselected(false),
    m_issaturdayselected(false),
    m_issundayselected(false),
    m_isincludeholiday(false),
    m_timesperday(0),
    m_intervalhour(0.f),
    m_other(""),
    m_targettype(""),
    m_targeteffecttype(0),
    m_targeteffectpercent(0.f),
    m_isdefault(false),
    m_sitename(""),
    m_istxpatternofrxchanged(false),
    m_istxpatternofplangoalchanged(false),
    m_treatmenttarget(0),
    m_depth(0.f),
    m_planningroletype(0),
    m_crc(""),
    m_totaldose(0.),
    m_isgating(false),
    m_updatetime(boost::date_time::not_a_date_time),
    m_binmode(0),
    m_beamonrangestart(0.),
    m_beamonrangeend(0.),
    m_imageguidepattern("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtPrescriptionImp::RtPrescriptionImp(const RtPrescriptionImp& prescription):
    m_uid(prescription.get_uid()),
    m_siteuid(prescription.get_siteuid()),
    m_name(prescription.get_name()),
    m_technical(prescription.get_technical()),
    m_notes(prescription.get_notes()),
    m_doseperfraction(prescription.get_doseperfraction()),
    m_fractionsnumber(prescription.get_fractionsnumber()),
    m_createdtime(prescription.get_createdtime()),
    m_radiationtype(prescription.get_radiationtype()),
    m_beammode(prescription.get_beammode()),
    m_relatedprescriptionuid(prescription.get_relatedprescriptionuid()),
    m_relatedprescriptionduration(prescription.get_relatedprescriptionduration()),
    m_durationtype(prescription.get_durationtype()),
    m_afterfractionnumber(prescription.get_afterfractionnumber()),
    m_treatmentordertype(prescription.get_treatmentordertype()),
    m_ismondayselected(prescription.get_ismondayselected()),
    m_istuesdayselected(prescription.get_istuesdayselected()),
    m_iswednesdayselected(prescription.get_iswednesdayselected()),
    m_isthursdayselected(prescription.get_isthursdayselected()),
    m_isfridayselected(prescription.get_isfridayselected()),
    m_issaturdayselected(prescription.get_issaturdayselected()),
    m_issundayselected(prescription.get_issundayselected()),
    m_isincludeholiday(prescription.get_isincludeholiday()),
    m_timesperday(prescription.get_timesperday()),
    m_intervalhour(prescription.get_intervalhour()),
    m_other(prescription.get_other()),
    m_targettype(prescription.get_targettype()),
    m_targeteffecttype(prescription.get_targeteffecttype()),
    m_targeteffectpercent(prescription.get_targeteffectpercent()),
    m_isdefault(prescription.get_isdefault()),
    m_sitename(prescription.get_sitename()),
    m_istxpatternofrxchanged(prescription.get_istxpatternofrxchanged()),
    m_istxpatternofplangoalchanged(prescription.get_istxpatternofplangoalchanged()),
    m_treatmenttarget(prescription.get_treatmenttarget()),
    m_depth(prescription.get_depth()),
    m_planningroletype(prescription.get_planningroletype()),
    m_crc(prescription.get_crc()),
    m_totaldose(prescription.get_totaldose()),
    m_isgating(prescription.get_isgating()),
    m_updatetime(prescription.get_updatetime()),
    m_binmode(prescription.get_binmode()),
    m_beamonrangestart(prescription.get_beamonrangestart()),
    m_beamonrangeend(prescription.get_beamonrangeend()),
    m_imageguidepattern(prescription.get_imageguidepattern())
{
}

RtPrescriptionImp& RtPrescriptionImp::operator=(const RtPrescriptionImp& prescription)
{
    if (this != &prescription){
        this->m_uid = prescription.get_uid();
        this->m_siteuid = prescription.get_siteuid();
        this->m_name = prescription.get_name();
        this->m_technical = prescription.get_technical();
        this->m_notes = prescription.get_notes();
        this->m_doseperfraction = prescription.get_doseperfraction();
        this->m_fractionsnumber = prescription.get_fractionsnumber();
        this->m_createdtime = prescription.get_createdtime();
        this->m_radiationtype = prescription.get_radiationtype();
        this->m_beammode = prescription.get_beammode();
        this->m_relatedprescriptionuid = prescription.get_relatedprescriptionuid();
        this->m_relatedprescriptionduration = prescription.get_relatedprescriptionduration();
        this->m_durationtype = prescription.get_durationtype();
        this->m_afterfractionnumber = prescription.get_afterfractionnumber();
        this->m_treatmentordertype = prescription.get_treatmentordertype();
        this->m_ismondayselected = prescription.get_ismondayselected();
        this->m_istuesdayselected = prescription.get_istuesdayselected();
        this->m_iswednesdayselected = prescription.get_iswednesdayselected();
        this->m_isthursdayselected = prescription.get_isthursdayselected();
        this->m_isfridayselected = prescription.get_isfridayselected();
        this->m_issaturdayselected = prescription.get_issaturdayselected();
        this->m_issundayselected = prescription.get_issundayselected();
        this->m_isincludeholiday = prescription.get_isincludeholiday();
        this->m_timesperday = prescription.get_timesperday();
        this->m_intervalhour = prescription.get_intervalhour();
        this->m_other = prescription.get_other();
        this->m_targettype = prescription.get_targettype();
        this->m_targeteffecttype = prescription.get_targeteffecttype();
        this->m_targeteffectpercent = prescription.get_targeteffectpercent();
        this->m_isdefault = prescription.get_isdefault();
        this->m_sitename = prescription.get_sitename();
        this->m_istxpatternofrxchanged = prescription.get_istxpatternofrxchanged();
        this->m_istxpatternofplangoalchanged = prescription.get_istxpatternofplangoalchanged();
        this->m_treatmenttarget = prescription.get_treatmenttarget();
        this->m_depth = prescription.get_depth();
        this->m_planningroletype = prescription.get_planningroletype();
        this->m_crc = prescription.get_crc();
        this->m_totaldose = prescription.get_totaldose();
        this->m_isgating = prescription.get_isgating();
        this->m_updatetime = prescription.get_updatetime();
        this->m_binmode = prescription.get_binmode();
        this->m_beamonrangestart = prescription.get_beamonrangestart();
        this->m_beamonrangeend = prescription.get_beamonrangeend();
        this->m_imageguidepattern = prescription.get_imageguidepattern();
    }
    return *this;
}

RtPrescriptionImp::~RtPrescriptionImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtPrescription::RtPrescription(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtPrescriptionImp(bGeneraterUid);
    set_flags(PRESCRIPTION_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_PRESCRIPTION_FIELD_NULL);
}

RtPrescription::RtPrescription(const RtPrescription& prescription): RtDatabaseObject(prescription),
   m_pImp(new RtPrescriptionImp(*prescription.m_pImp))
{
}

RtPrescription& RtPrescription::operator = (const RtPrescription& prescription)
{
    if(this != &prescription)
    {
        RtDatabaseObject::operator=(prescription);
        *this->m_pImp = *prescription.m_pImp;
    }
    return *this;
}

RtPrescription::~RtPrescription()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtPrescription::get_uid() const { return m_pImp->get_uid();}
void RtPrescription::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(PRESCRIPTION_UID);
    setdirty_field(PRESCRIPTION_UID, true);
}

//siteuid
std::string RtPrescription::get_siteuid() const { return m_pImp->get_siteuid();}
void RtPrescription::set_siteuid(const std::string& siteuid)
{
    m_pImp->set_siteuid(siteuid);
    enable_field(PRESCRIPTION_SITEUID);
    setdirty_field(PRESCRIPTION_SITEUID, true);
}

//name
std::string RtPrescription::get_name() const { return m_pImp->get_name();}
void RtPrescription::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(PRESCRIPTION_NAME);
    setdirty_field(PRESCRIPTION_NAME, true);
}

//technical
int RtPrescription::get_technical() const { return m_pImp->get_technical();}
void RtPrescription::set_technical(const int& technical)
{
    m_pImp->set_technical(technical);
    enable_field(PRESCRIPTION_TECHNICAL);
    setdirty_field(PRESCRIPTION_TECHNICAL, true);
}

//notes
std::string RtPrescription::get_notes() const { return m_pImp->get_notes();}
void RtPrescription::set_notes(const std::string& notes)
{
    m_pImp->set_notes(notes);
    enable_field(PRESCRIPTION_NOTES);
    setdirty_field(PRESCRIPTION_NOTES, true);
}

//doseperfraction
double RtPrescription::get_doseperfraction() const { return m_pImp->get_doseperfraction();}
void RtPrescription::set_doseperfraction(const double& doseperfraction)
{
    m_pImp->set_doseperfraction(doseperfraction);
    enable_field(PRESCRIPTION_DOSEPERFRACTION);
    setdirty_field(PRESCRIPTION_DOSEPERFRACTION, true);
}

//fractionsnumber
int RtPrescription::get_fractionsnumber() const { return m_pImp->get_fractionsnumber();}
void RtPrescription::set_fractionsnumber(const int& fractionsnumber)
{
    m_pImp->set_fractionsnumber(fractionsnumber);
    enable_field(PRESCRIPTION_FRACTIONSNUMBER);
    setdirty_field(PRESCRIPTION_FRACTIONSNUMBER, true);
}

//createdtime
DATETIME_BOOST RtPrescription::get_createdtime() const { return m_pImp->get_createdtime();}
void RtPrescription::set_createdtime(const DATETIME_BOOST& createdtime)
{
    m_pImp->set_createdtime(createdtime);
    enable_field(PRESCRIPTION_CREATEDTIME);
    setdirty_field(PRESCRIPTION_CREATEDTIME, true);
}

//radiationtype
int RtPrescription::get_radiationtype() const { return m_pImp->get_radiationtype();}
void RtPrescription::set_radiationtype(const int& radiationtype)
{
    m_pImp->set_radiationtype(radiationtype);
    enable_field(PRESCRIPTION_RADIATIONTYPE);
    setdirty_field(PRESCRIPTION_RADIATIONTYPE, true);
}

//beammode
std::string RtPrescription::get_beammode() const { return m_pImp->get_beammode();}
void RtPrescription::set_beammode(const std::string& beammode)
{
    m_pImp->set_beammode(beammode);
    enable_field(PRESCRIPTION_BEAMMODE);
    setdirty_field(PRESCRIPTION_BEAMMODE, true);
}

//relatedprescriptionuid
std::string RtPrescription::get_relatedprescriptionuid() const { return m_pImp->get_relatedprescriptionuid();}
void RtPrescription::set_relatedprescriptionuid(const std::string& relatedprescriptionuid)
{
    m_pImp->set_relatedprescriptionuid(relatedprescriptionuid);
    enable_field(PRESCRIPTION_RELATEDPRESCRIPTIONUID);
    setdirty_field(PRESCRIPTION_RELATEDPRESCRIPTIONUID, true);
}

//relatedprescriptionduration
int RtPrescription::get_relatedprescriptionduration() const { return m_pImp->get_relatedprescriptionduration();}
void RtPrescription::set_relatedprescriptionduration(const int& relatedprescriptionduration)
{
    m_pImp->set_relatedprescriptionduration(relatedprescriptionduration);
    enable_field(PRESCRIPTION_RELATEDPRESCRIPTIONDURATION);
    setdirty_field(PRESCRIPTION_RELATEDPRESCRIPTIONDURATION, true);
}

//durationtype
int RtPrescription::get_durationtype() const { return m_pImp->get_durationtype();}
void RtPrescription::set_durationtype(const int& durationtype)
{
    m_pImp->set_durationtype(durationtype);
    enable_field(PRESCRIPTION_DURATIONTYPE);
    setdirty_field(PRESCRIPTION_DURATIONTYPE, true);
}

//afterfractionnumber
int RtPrescription::get_afterfractionnumber() const { return m_pImp->get_afterfractionnumber();}
void RtPrescription::set_afterfractionnumber(const int& afterfractionnumber)
{
    m_pImp->set_afterfractionnumber(afterfractionnumber);
    enable_field(PRESCRIPTION_AFTERFRACTIONNUMBER);
    setdirty_field(PRESCRIPTION_AFTERFRACTIONNUMBER, true);
}

//treatmentordertype
int RtPrescription::get_treatmentordertype() const { return m_pImp->get_treatmentordertype();}
void RtPrescription::set_treatmentordertype(const int& treatmentordertype)
{
    m_pImp->set_treatmentordertype(treatmentordertype);
    enable_field(PRESCRIPTION_TREATMENTORDERTYPE);
    setdirty_field(PRESCRIPTION_TREATMENTORDERTYPE, true);
}

//ismondayselected
bool RtPrescription::get_ismondayselected() const { return m_pImp->get_ismondayselected();}
void RtPrescription::set_ismondayselected(const bool& ismondayselected)
{
    m_pImp->set_ismondayselected(ismondayselected);
    enable_field(PRESCRIPTION_ISMONDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISMONDAYSELECTED, true);
}

//istuesdayselected
bool RtPrescription::get_istuesdayselected() const { return m_pImp->get_istuesdayselected();}
void RtPrescription::set_istuesdayselected(const bool& istuesdayselected)
{
    m_pImp->set_istuesdayselected(istuesdayselected);
    enable_field(PRESCRIPTION_ISTUESDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISTUESDAYSELECTED, true);
}

//iswednesdayselected
bool RtPrescription::get_iswednesdayselected() const { return m_pImp->get_iswednesdayselected();}
void RtPrescription::set_iswednesdayselected(const bool& iswednesdayselected)
{
    m_pImp->set_iswednesdayselected(iswednesdayselected);
    enable_field(PRESCRIPTION_ISWEDNESDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISWEDNESDAYSELECTED, true);
}

//isthursdayselected
bool RtPrescription::get_isthursdayselected() const { return m_pImp->get_isthursdayselected();}
void RtPrescription::set_isthursdayselected(const bool& isthursdayselected)
{
    m_pImp->set_isthursdayselected(isthursdayselected);
    enable_field(PRESCRIPTION_ISTHURSDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISTHURSDAYSELECTED, true);
}

//isfridayselected
bool RtPrescription::get_isfridayselected() const { return m_pImp->get_isfridayselected();}
void RtPrescription::set_isfridayselected(const bool& isfridayselected)
{
    m_pImp->set_isfridayselected(isfridayselected);
    enable_field(PRESCRIPTION_ISFRIDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISFRIDAYSELECTED, true);
}

//issaturdayselected
bool RtPrescription::get_issaturdayselected() const { return m_pImp->get_issaturdayselected();}
void RtPrescription::set_issaturdayselected(const bool& issaturdayselected)
{
    m_pImp->set_issaturdayselected(issaturdayselected);
    enable_field(PRESCRIPTION_ISSATURDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISSATURDAYSELECTED, true);
}

//issundayselected
bool RtPrescription::get_issundayselected() const { return m_pImp->get_issundayselected();}
void RtPrescription::set_issundayselected(const bool& issundayselected)
{
    m_pImp->set_issundayselected(issundayselected);
    enable_field(PRESCRIPTION_ISSUNDAYSELECTED);
    setdirty_field(PRESCRIPTION_ISSUNDAYSELECTED, true);
}

//isincludeholiday
bool RtPrescription::get_isincludeholiday() const { return m_pImp->get_isincludeholiday();}
void RtPrescription::set_isincludeholiday(const bool& isincludeholiday)
{
    m_pImp->set_isincludeholiday(isincludeholiday);
    enable_field(PRESCRIPTION_ISINCLUDEHOLIDAY);
    setdirty_field(PRESCRIPTION_ISINCLUDEHOLIDAY, true);
}

//timesperday
int RtPrescription::get_timesperday() const { return m_pImp->get_timesperday();}
void RtPrescription::set_timesperday(const int& timesperday)
{
    m_pImp->set_timesperday(timesperday);
    enable_field(PRESCRIPTION_TIMESPERDAY);
    setdirty_field(PRESCRIPTION_TIMESPERDAY, true);
}

//intervalhour
float RtPrescription::get_intervalhour() const { return m_pImp->get_intervalhour();}
void RtPrescription::set_intervalhour(const float& intervalhour)
{
    m_pImp->set_intervalhour(intervalhour);
    enable_field(PRESCRIPTION_INTERVALHOUR);
    setdirty_field(PRESCRIPTION_INTERVALHOUR, true);
}

//other
std::string RtPrescription::get_other() const { return m_pImp->get_other();}
void RtPrescription::set_other(const std::string& other)
{
    m_pImp->set_other(other);
    enable_field(PRESCRIPTION_OTHER);
    setdirty_field(PRESCRIPTION_OTHER, true);
}

//targettype
std::string RtPrescription::get_targettype() const { return m_pImp->get_targettype();}
void RtPrescription::set_targettype(const std::string& targettype)
{
    m_pImp->set_targettype(targettype);
    enable_field(PRESCRIPTION_TARGETTYPE);
    setdirty_field(PRESCRIPTION_TARGETTYPE, true);
}

//targeteffecttype
int RtPrescription::get_targeteffecttype() const { return m_pImp->get_targeteffecttype();}
void RtPrescription::set_targeteffecttype(const int& targeteffecttype)
{
    m_pImp->set_targeteffecttype(targeteffecttype);
    enable_field(PRESCRIPTION_TARGETEFFECTTYPE);
    setdirty_field(PRESCRIPTION_TARGETEFFECTTYPE, true);
}

//targeteffectpercent
float RtPrescription::get_targeteffectpercent() const { return m_pImp->get_targeteffectpercent();}
void RtPrescription::set_targeteffectpercent(const float& targeteffectpercent)
{
    m_pImp->set_targeteffectpercent(targeteffectpercent);
    enable_field(PRESCRIPTION_TARGETEFFECTPERCENT);
    setdirty_field(PRESCRIPTION_TARGETEFFECTPERCENT, true);
}

//isdefault
bool RtPrescription::get_isdefault() const { return m_pImp->get_isdefault();}
void RtPrescription::set_isdefault(const bool& isdefault)
{
    m_pImp->set_isdefault(isdefault);
    enable_field(PRESCRIPTION_ISDEFAULT);
    setdirty_field(PRESCRIPTION_ISDEFAULT, true);
}

//sitename
std::string RtPrescription::get_sitename() const { return m_pImp->get_sitename();}
void RtPrescription::set_sitename(const std::string& sitename)
{
    m_pImp->set_sitename(sitename);
    enable_field(PRESCRIPTION_SITENAME);
    setdirty_field(PRESCRIPTION_SITENAME, true);
}

//istxpatternofrxchanged
bool RtPrescription::get_istxpatternofrxchanged() const { return m_pImp->get_istxpatternofrxchanged();}
void RtPrescription::set_istxpatternofrxchanged(const bool& istxpatternofrxchanged)
{
    m_pImp->set_istxpatternofrxchanged(istxpatternofrxchanged);
    enable_field(PRESCRIPTION_ISTXPATTERNOFRXCHANGED);
    setdirty_field(PRESCRIPTION_ISTXPATTERNOFRXCHANGED, true);
}

//istxpatternofplangoalchanged
bool RtPrescription::get_istxpatternofplangoalchanged() const { return m_pImp->get_istxpatternofplangoalchanged();}
void RtPrescription::set_istxpatternofplangoalchanged(const bool& istxpatternofplangoalchanged)
{
    m_pImp->set_istxpatternofplangoalchanged(istxpatternofplangoalchanged);
    enable_field(PRESCRIPTION_ISTXPATTERNOFPLANGOALCHANGED);
    setdirty_field(PRESCRIPTION_ISTXPATTERNOFPLANGOALCHANGED, true);
}

//treatmenttarget
int RtPrescription::get_treatmenttarget() const { return m_pImp->get_treatmenttarget();}
void RtPrescription::set_treatmenttarget(const int& treatmenttarget)
{
    m_pImp->set_treatmenttarget(treatmenttarget);
    enable_field(PRESCRIPTION_TREATMENTTARGET);
    setdirty_field(PRESCRIPTION_TREATMENTTARGET, true);
}

//depth
float RtPrescription::get_depth() const { return m_pImp->get_depth();}
void RtPrescription::set_depth(const float& depth)
{
    m_pImp->set_depth(depth);
    enable_field(PRESCRIPTION_DEPTH);
    setdirty_field(PRESCRIPTION_DEPTH, true);
}

//planningroletype
int RtPrescription::get_planningroletype() const { return m_pImp->get_planningroletype();}
void RtPrescription::set_planningroletype(const int& planningroletype)
{
    m_pImp->set_planningroletype(planningroletype);
    enable_field(PRESCRIPTION_PLANNINGROLETYPE);
    setdirty_field(PRESCRIPTION_PLANNINGROLETYPE, true);
}

//crc
std::string RtPrescription::get_crc() const { return m_pImp->get_crc();}
void RtPrescription::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(PRESCRIPTION_CRC);
    setdirty_field(PRESCRIPTION_CRC, true);
}

//totaldose
double RtPrescription::get_totaldose() const { return m_pImp->get_totaldose();}
void RtPrescription::set_totaldose(const double& totaldose)
{
    m_pImp->set_totaldose(totaldose);
    enable_field(PRESCRIPTION_TOTALDOSE);
    setdirty_field(PRESCRIPTION_TOTALDOSE, true);
}

//isgating
bool RtPrescription::get_isgating() const { return m_pImp->get_isgating();}
void RtPrescription::set_isgating(const bool& isgating)
{
    m_pImp->set_isgating(isgating);
    enable_field(PRESCRIPTION_ISGATING);
    setdirty_field(PRESCRIPTION_ISGATING, true);
}

//updatetime
DATETIME_BOOST RtPrescription::get_updatetime() const { return m_pImp->get_updatetime();}
void RtPrescription::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(PRESCRIPTION_UPDATETIME);
    setdirty_field(PRESCRIPTION_UPDATETIME, true);
}

//binmode
int RtPrescription::get_binmode() const { return m_pImp->get_binmode();}
void RtPrescription::set_binmode(const int& binmode)
{
    m_pImp->set_binmode(binmode);
    enable_field(PRESCRIPTION_BINMODE);
    setdirty_field(PRESCRIPTION_BINMODE, true);
}

//beamonrangestart
double RtPrescription::get_beamonrangestart() const { return m_pImp->get_beamonrangestart();}
void RtPrescription::set_beamonrangestart(const double& beamonrangestart)
{
    m_pImp->set_beamonrangestart(beamonrangestart);
    enable_field(PRESCRIPTION_BEAMONRANGESTART);
    setdirty_field(PRESCRIPTION_BEAMONRANGESTART, true);
}

//beamonrangeend
double RtPrescription::get_beamonrangeend() const { return m_pImp->get_beamonrangeend();}
void RtPrescription::set_beamonrangeend(const double& beamonrangeend)
{
    m_pImp->set_beamonrangeend(beamonrangeend);
    enable_field(PRESCRIPTION_BEAMONRANGEEND);
    setdirty_field(PRESCRIPTION_BEAMONRANGEEND, true);
}

//imageguidepattern
std::string RtPrescription::get_imageguidepattern() const { return m_pImp->get_imageguidepattern();}
void RtPrescription::set_imageguidepattern(const std::string& imageguidepattern)
{
    m_pImp->set_imageguidepattern(imageguidepattern);
    enable_field(PRESCRIPTION_IMAGEGUIDEPATTERN);
    setdirty_field(PRESCRIPTION_IMAGEGUIDEPATTERN, true);
}

RT_TPS_DATABASE_END_NAMESPACE