//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_constrainttemplate.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_constrainttemplate.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtConstrainttemplateImp::RtConstrainttemplateImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_voiuid(""),
    m_protocoltemplateuid(""),
    m_dosevolume(0.f),
    m_name(""),
    m_maxdvh(""),
    m_mindvh(""),
    m_comments(""),
    m_ingrid(0.f),
    m_isachieved(false),
    m_dosetype(0),
    m_dose(0.),
    m_tendencytype(0),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtConstrainttemplateImp::RtConstrainttemplateImp(const RtConstrainttemplateImp& constrainttemplate):
    m_uid(constrainttemplate.get_uid()),
    m_voiuid(constrainttemplate.get_voiuid()),
    m_protocoltemplateuid(constrainttemplate.get_protocoltemplateuid()),
    m_dosevolume(constrainttemplate.get_dosevolume()),
    m_name(constrainttemplate.get_name()),
    m_maxdvh(constrainttemplate.get_maxdvh()),
    m_mindvh(constrainttemplate.get_mindvh()),
    m_comments(constrainttemplate.get_comments()),
    m_ingrid(constrainttemplate.get_ingrid()),
    m_isachieved(constrainttemplate.get_isachieved()),
    m_dosetype(constrainttemplate.get_dosetype()),
    m_dose(constrainttemplate.get_dose()),
    m_tendencytype(constrainttemplate.get_tendencytype()),
    m_updatetime(constrainttemplate.get_updatetime())
{
}

RtConstrainttemplateImp& RtConstrainttemplateImp::operator=(const RtConstrainttemplateImp& constrainttemplate)
{
    if (this != &constrainttemplate){
        this->m_uid = constrainttemplate.get_uid();
        this->m_voiuid = constrainttemplate.get_voiuid();
        this->m_protocoltemplateuid = constrainttemplate.get_protocoltemplateuid();
        this->m_dosevolume = constrainttemplate.get_dosevolume();
        this->m_name = constrainttemplate.get_name();
        this->m_maxdvh = constrainttemplate.get_maxdvh();
        this->m_mindvh = constrainttemplate.get_mindvh();
        this->m_comments = constrainttemplate.get_comments();
        this->m_ingrid = constrainttemplate.get_ingrid();
        this->m_isachieved = constrainttemplate.get_isachieved();
        this->m_dosetype = constrainttemplate.get_dosetype();
        this->m_dose = constrainttemplate.get_dose();
        this->m_tendencytype = constrainttemplate.get_tendencytype();
        this->m_updatetime = constrainttemplate.get_updatetime();
    }
    return *this;
}

RtConstrainttemplateImp::~RtConstrainttemplateImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtConstrainttemplate::RtConstrainttemplate(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtConstrainttemplateImp(bGeneraterUid);
    set_flags(CONSTRAINTTEMPLATE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_CONSTRAINTTEMPLATE_FIELD_NULL);
}

RtConstrainttemplate::RtConstrainttemplate(const RtConstrainttemplate& constrainttemplate): RtDatabaseObject(constrainttemplate),
   m_pImp(new RtConstrainttemplateImp(*constrainttemplate.m_pImp))
{
}

RtConstrainttemplate& RtConstrainttemplate::operator = (const RtConstrainttemplate& constrainttemplate)
{
    if(this != &constrainttemplate)
    {
        RtDatabaseObject::operator=(constrainttemplate);
        *this->m_pImp = *constrainttemplate.m_pImp;
    }
    return *this;
}

RtConstrainttemplate::~RtConstrainttemplate()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtConstrainttemplate::get_uid() const { return m_pImp->get_uid();}
void RtConstrainttemplate::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(CONSTRAINTTEMPLATE_UID);
    setdirty_field(CONSTRAINTTEMPLATE_UID, true);
}

//voiuid
std::string RtConstrainttemplate::get_voiuid() const { return m_pImp->get_voiuid();}
void RtConstrainttemplate::set_voiuid(const std::string& voiuid)
{
    m_pImp->set_voiuid(voiuid);
    enable_field(CONSTRAINTTEMPLATE_VOIUID);
    setdirty_field(CONSTRAINTTEMPLATE_VOIUID, true);
}

//protocoltemplateuid
std::string RtConstrainttemplate::get_protocoltemplateuid() const { return m_pImp->get_protocoltemplateuid();}
void RtConstrainttemplate::set_protocoltemplateuid(const std::string& protocoltemplateuid)
{
    m_pImp->set_protocoltemplateuid(protocoltemplateuid);
    enable_field(CONSTRAINTTEMPLATE_PROTOCOLTEMPLATEUID);
    setdirty_field(CONSTRAINTTEMPLATE_PROTOCOLTEMPLATEUID, true);
}

//dosevolume
float RtConstrainttemplate::get_dosevolume() const { return m_pImp->get_dosevolume();}
void RtConstrainttemplate::set_dosevolume(const float& dosevolume)
{
    m_pImp->set_dosevolume(dosevolume);
    enable_field(CONSTRAINTTEMPLATE_DOSEVOLUME);
    setdirty_field(CONSTRAINTTEMPLATE_DOSEVOLUME, true);
}

//name
std::string RtConstrainttemplate::get_name() const { return m_pImp->get_name();}
void RtConstrainttemplate::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(CONSTRAINTTEMPLATE_NAME);
    setdirty_field(CONSTRAINTTEMPLATE_NAME, true);
}

//maxdvh
std::string RtConstrainttemplate::get_maxdvh() const { return m_pImp->get_maxdvh();}
void RtConstrainttemplate::set_maxdvh(const std::string& maxdvh)
{
    m_pImp->set_maxdvh(maxdvh);
    enable_field(CONSTRAINTTEMPLATE_MAXDVH);
    setdirty_field(CONSTRAINTTEMPLATE_MAXDVH, true);
}

//mindvh
std::string RtConstrainttemplate::get_mindvh() const { return m_pImp->get_mindvh();}
void RtConstrainttemplate::set_mindvh(const std::string& mindvh)
{
    m_pImp->set_mindvh(mindvh);
    enable_field(CONSTRAINTTEMPLATE_MINDVH);
    setdirty_field(CONSTRAINTTEMPLATE_MINDVH, true);
}

//comments
std::string RtConstrainttemplate::get_comments() const { return m_pImp->get_comments();}
void RtConstrainttemplate::set_comments(const std::string& comments)
{
    m_pImp->set_comments(comments);
    enable_field(CONSTRAINTTEMPLATE_COMMENTS);
    setdirty_field(CONSTRAINTTEMPLATE_COMMENTS, true);
}

//ingrid
float RtConstrainttemplate::get_ingrid() const { return m_pImp->get_ingrid();}
void RtConstrainttemplate::set_ingrid(const float& ingrid)
{
    m_pImp->set_ingrid(ingrid);
    enable_field(CONSTRAINTTEMPLATE_INGRID);
    setdirty_field(CONSTRAINTTEMPLATE_INGRID, true);
}

//isachieved
bool RtConstrainttemplate::get_isachieved() const { return m_pImp->get_isachieved();}
void RtConstrainttemplate::set_isachieved(const bool& isachieved)
{
    m_pImp->set_isachieved(isachieved);
    enable_field(CONSTRAINTTEMPLATE_ISACHIEVED);
    setdirty_field(CONSTRAINTTEMPLATE_ISACHIEVED, true);
}

//dosetype
int RtConstrainttemplate::get_dosetype() const { return m_pImp->get_dosetype();}
void RtConstrainttemplate::set_dosetype(const int& dosetype)
{
    m_pImp->set_dosetype(dosetype);
    enable_field(CONSTRAINTTEMPLATE_DOSETYPE);
    setdirty_field(CONSTRAINTTEMPLATE_DOSETYPE, true);
}

//dose
double RtConstrainttemplate::get_dose() const { return m_pImp->get_dose();}
void RtConstrainttemplate::set_dose(const double& dose)
{
    m_pImp->set_dose(dose);
    enable_field(CONSTRAINTTEMPLATE_DOSE);
    setdirty_field(CONSTRAINTTEMPLATE_DOSE, true);
}

//tendencytype
int RtConstrainttemplate::get_tendencytype() const { return m_pImp->get_tendencytype();}
void RtConstrainttemplate::set_tendencytype(const int& tendencytype)
{
    m_pImp->set_tendencytype(tendencytype);
    enable_field(CONSTRAINTTEMPLATE_TENDENCYTYPE);
    setdirty_field(CONSTRAINTTEMPLATE_TENDENCYTYPE, true);
}

//updatetime
DATETIME_BOOST RtConstrainttemplate::get_updatetime() const { return m_pImp->get_updatetime();}
void RtConstrainttemplate::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(CONSTRAINTTEMPLATE_UPDATETIME);
    setdirty_field(CONSTRAINTTEMPLATE_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE