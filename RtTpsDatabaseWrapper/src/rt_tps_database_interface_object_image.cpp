//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_image.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_image.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtImageImp::RtImageImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_sopinstanceuid(""),
    m_seriesuid(""),
    m_dcmfiledata(nullptr),
    m_size(0),
    m_dcmfilepath(""),
    m_instancenumber(0),
    m_sopclassuid(""),
    m_patientorientation(""),
    m_imagetype(""),
    m_acquisitionnumber(0),
    m_acquisitiondatetime(boost::date_time::not_a_date_time),
    m_contentdate(boost::date_time::not_a_date_time),
    m_contenttime(boost::date_time::not_a_date_time),
    m_instancecreationdate(boost::date_time::not_a_date_time),
    m_instancecreationtime(boost::date_time::not_a_date_time),
    m_qualitycontrolimage(""),
    m_rows(0),
    m_columns(0),
    m_bitsallocated(0),
    m_windowwidth(""),
    m_windowcenter(""),
    m_exposureindex(""),
    m_targetexposureindex(""),
    m_deviationindex(""),
    m_imagesinacquisition(0),
    m_imagecomments(""),
    m_lossyimagecompression(""),
    m_lossyimagecompressionratio(""),
    m_pixelspacing(""),
    m_imageorientationpatient(""),
    m_imagepositionpatient(""),
    m_slicethickness(""),
    m_slicelocation(""),
    m_printstatus(""),
    m_archivestatus(""),
    m_imageconfirmstatus(0),
    m_imagerejectreason(""),
    m_imageconfirmdatetime(boost::date_time::not_a_date_time),
    m_imagesendstatus(""),
    m_imagestoredindvd(""),
    m_imagestoredinusb(""),
    m_imagemark(""),
    m_imageprotect(""),
    m_imageiscached(false),
    m_acquisitionfov(""),
    m_acquisitionmatrixinterpolated(""),
    m_imageorientationlabel(""),
    m_tableofposition(0),
    m_isfreecassete(0),
    m_photometricinterpretation(""),
    m_numberofframes(""),
    m_samplesperpixel(0),
    m_pixelrepresentation(0),
    m_rescaleslope(""),
    m_rescaleintercept(""),
    m_imagereserved0(""),
    m_imagereserved1(""),
    m_bitsstored(0),
    m_highbit(0),
    m_kvp(0.),
    m_couchsagoffset(0.f),
    m_endposition(0.f),
    m_startposition(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtImageImp::RtImageImp(const RtImageImp& image):
    m_uid(image.get_uid()),
    m_sopinstanceuid(image.get_sopinstanceuid()),
    m_seriesuid(image.get_seriesuid()),
    m_dcmfilepath(image.get_dcmfilepath()),
    m_instancenumber(image.get_instancenumber()),
    m_sopclassuid(image.get_sopclassuid()),
    m_patientorientation(image.get_patientorientation()),
    m_imagetype(image.get_imagetype()),
    m_acquisitionnumber(image.get_acquisitionnumber()),
    m_acquisitiondatetime(image.get_acquisitiondatetime()),
    m_contentdate(image.get_contentdate()),
    m_contenttime(image.get_contenttime()),
    m_instancecreationdate(image.get_instancecreationdate()),
    m_instancecreationtime(image.get_instancecreationtime()),
    m_qualitycontrolimage(image.get_qualitycontrolimage()),
    m_rows(image.get_rows()),
    m_columns(image.get_columns()),
    m_bitsallocated(image.get_bitsallocated()),
    m_windowwidth(image.get_windowwidth()),
    m_windowcenter(image.get_windowcenter()),
    m_exposureindex(image.get_exposureindex()),
    m_targetexposureindex(image.get_targetexposureindex()),
    m_deviationindex(image.get_deviationindex()),
    m_imagesinacquisition(image.get_imagesinacquisition()),
    m_imagecomments(image.get_imagecomments()),
    m_lossyimagecompression(image.get_lossyimagecompression()),
    m_lossyimagecompressionratio(image.get_lossyimagecompressionratio()),
    m_pixelspacing(image.get_pixelspacing()),
    m_imageorientationpatient(image.get_imageorientationpatient()),
    m_imagepositionpatient(image.get_imagepositionpatient()),
    m_slicethickness(image.get_slicethickness()),
    m_slicelocation(image.get_slicelocation()),
    m_printstatus(image.get_printstatus()),
    m_archivestatus(image.get_archivestatus()),
    m_imageconfirmstatus(image.get_imageconfirmstatus()),
    m_imagerejectreason(image.get_imagerejectreason()),
    m_imageconfirmdatetime(image.get_imageconfirmdatetime()),
    m_imagesendstatus(image.get_imagesendstatus()),
    m_imagestoredindvd(image.get_imagestoredindvd()),
    m_imagestoredinusb(image.get_imagestoredinusb()),
    m_imagemark(image.get_imagemark()),
    m_imageprotect(image.get_imageprotect()),
    m_imageiscached(image.get_imageiscached()),
    m_acquisitionfov(image.get_acquisitionfov()),
    m_acquisitionmatrixinterpolated(image.get_acquisitionmatrixinterpolated()),
    m_imageorientationlabel(image.get_imageorientationlabel()),
    m_tableofposition(image.get_tableofposition()),
    m_isfreecassete(image.get_isfreecassete()),
    m_photometricinterpretation(image.get_photometricinterpretation()),
    m_numberofframes(image.get_numberofframes()),
    m_samplesperpixel(image.get_samplesperpixel()),
    m_pixelrepresentation(image.get_pixelrepresentation()),
    m_rescaleslope(image.get_rescaleslope()),
    m_rescaleintercept(image.get_rescaleintercept()),
    m_imagereserved0(image.get_imagereserved0()),
    m_imagereserved1(image.get_imagereserved1()),
    m_bitsstored(image.get_bitsstored()),
    m_highbit(image.get_highbit()),
    m_kvp(image.get_kvp()),
    m_couchsagoffset(image.get_couchsagoffset()),
    m_endposition(image.get_endposition()),
    m_startposition(image.get_startposition()),
    m_updatetime(image.get_updatetime())
{
    char* data = image.get_dcmfiledata(&m_size);
    if (m_size > 0 && nullptr != data){
        m_dcmfiledata = new char[m_size];
        memcpy(m_dcmfiledata, data, m_size * sizeof(char));
    }
}

RtImageImp& RtImageImp::operator=(const RtImageImp& image)
{
    if (this != &image){
        this->m_uid = image.get_uid();
        this->m_sopinstanceuid = image.get_sopinstanceuid();
        this->m_seriesuid = image.get_seriesuid();
        this->m_dcmfilepath = image.get_dcmfilepath();
        this->m_instancenumber = image.get_instancenumber();
        this->m_sopclassuid = image.get_sopclassuid();
        this->m_patientorientation = image.get_patientorientation();
        this->m_imagetype = image.get_imagetype();
        this->m_acquisitionnumber = image.get_acquisitionnumber();
        this->m_acquisitiondatetime = image.get_acquisitiondatetime();
        this->m_contentdate = image.get_contentdate();
        this->m_contenttime = image.get_contenttime();
        this->m_instancecreationdate = image.get_instancecreationdate();
        this->m_instancecreationtime = image.get_instancecreationtime();
        this->m_qualitycontrolimage = image.get_qualitycontrolimage();
        this->m_rows = image.get_rows();
        this->m_columns = image.get_columns();
        this->m_bitsallocated = image.get_bitsallocated();
        this->m_windowwidth = image.get_windowwidth();
        this->m_windowcenter = image.get_windowcenter();
        this->m_exposureindex = image.get_exposureindex();
        this->m_targetexposureindex = image.get_targetexposureindex();
        this->m_deviationindex = image.get_deviationindex();
        this->m_imagesinacquisition = image.get_imagesinacquisition();
        this->m_imagecomments = image.get_imagecomments();
        this->m_lossyimagecompression = image.get_lossyimagecompression();
        this->m_lossyimagecompressionratio = image.get_lossyimagecompressionratio();
        this->m_pixelspacing = image.get_pixelspacing();
        this->m_imageorientationpatient = image.get_imageorientationpatient();
        this->m_imagepositionpatient = image.get_imagepositionpatient();
        this->m_slicethickness = image.get_slicethickness();
        this->m_slicelocation = image.get_slicelocation();
        this->m_printstatus = image.get_printstatus();
        this->m_archivestatus = image.get_archivestatus();
        this->m_imageconfirmstatus = image.get_imageconfirmstatus();
        this->m_imagerejectreason = image.get_imagerejectreason();
        this->m_imageconfirmdatetime = image.get_imageconfirmdatetime();
        this->m_imagesendstatus = image.get_imagesendstatus();
        this->m_imagestoredindvd = image.get_imagestoredindvd();
        this->m_imagestoredinusb = image.get_imagestoredinusb();
        this->m_imagemark = image.get_imagemark();
        this->m_imageprotect = image.get_imageprotect();
        this->m_imageiscached = image.get_imageiscached();
        this->m_acquisitionfov = image.get_acquisitionfov();
        this->m_acquisitionmatrixinterpolated = image.get_acquisitionmatrixinterpolated();
        this->m_imageorientationlabel = image.get_imageorientationlabel();
        this->m_tableofposition = image.get_tableofposition();
        this->m_isfreecassete = image.get_isfreecassete();
        this->m_photometricinterpretation = image.get_photometricinterpretation();
        this->m_numberofframes = image.get_numberofframes();
        this->m_samplesperpixel = image.get_samplesperpixel();
        this->m_pixelrepresentation = image.get_pixelrepresentation();
        this->m_rescaleslope = image.get_rescaleslope();
        this->m_rescaleintercept = image.get_rescaleintercept();
        this->m_imagereserved0 = image.get_imagereserved0();
        this->m_imagereserved1 = image.get_imagereserved1();
        this->m_bitsstored = image.get_bitsstored();
        this->m_highbit = image.get_highbit();
        this->m_kvp = image.get_kvp();
        this->m_couchsagoffset = image.get_couchsagoffset();
        this->m_endposition = image.get_endposition();
        this->m_startposition = image.get_startposition();
        this->m_updatetime = image.get_updatetime();
        char* data = image.get_dcmfiledata(&this->m_size);
        if (this->m_size > 0 && nullptr != data){
            this->m_dcmfiledata = new char[m_size];
            memcpy(this->m_dcmfiledata, data, m_size * sizeof(char));
        }
    }
    return *this;
}

RtImageImp::~RtImageImp()
{
    DEL_ARRAY(m_dcmfiledata);
}


//////////////////////////////////////////////////////////////////////////
RtImage::RtImage(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtImageImp(bGeneraterUid);
    set_flags(IMAGE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_IMAGE_FIELD_NULL);
}

RtImage::RtImage(const RtImage& image): RtDatabaseObject(image),
   m_pImp(new RtImageImp(*image.m_pImp))
{
}

RtImage& RtImage::operator = (const RtImage& image)
{
    if(this != &image)
    {
        RtDatabaseObject::operator=(image);
        *this->m_pImp = *image.m_pImp;
    }
    return *this;
}

RtImage::~RtImage()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtImage::get_uid() const { return m_pImp->get_uid();}
void RtImage::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(IMAGE_UID);
    setdirty_field(IMAGE_UID, true);
}

//sopinstanceuid
std::string RtImage::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtImage::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(IMAGE_SOPINSTANCEUID);
    setdirty_field(IMAGE_SOPINSTANCEUID, true);
}

//seriesuid
std::string RtImage::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtImage::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(IMAGE_SERIESUID);
    setdirty_field(IMAGE_SERIESUID, true);
}

//dcmfilepath
std::string RtImage::get_dcmfilepath() const { return m_pImp->get_dcmfilepath();}
void RtImage::set_dcmfilepath(const std::string& dcmfilepath)
{
    m_pImp->set_dcmfilepath(dcmfilepath);
    enable_field(IMAGE_DCMFILEPATH);
    setdirty_field(IMAGE_DCMFILEPATH, true);
}

//instancenumber
int RtImage::get_instancenumber() const { return m_pImp->get_instancenumber();}
void RtImage::set_instancenumber(const int& instancenumber)
{
    m_pImp->set_instancenumber(instancenumber);
    enable_field(IMAGE_INSTANCENUMBER);
    setdirty_field(IMAGE_INSTANCENUMBER, true);
}

//sopclassuid
std::string RtImage::get_sopclassuid() const { return m_pImp->get_sopclassuid();}
void RtImage::set_sopclassuid(const std::string& sopclassuid)
{
    m_pImp->set_sopclassuid(sopclassuid);
    enable_field(IMAGE_SOPCLASSUID);
    setdirty_field(IMAGE_SOPCLASSUID, true);
}

//patientorientation
std::string RtImage::get_patientorientation() const { return m_pImp->get_patientorientation();}
void RtImage::set_patientorientation(const std::string& patientorientation)
{
    m_pImp->set_patientorientation(patientorientation);
    enable_field(IMAGE_PATIENTORIENTATION);
    setdirty_field(IMAGE_PATIENTORIENTATION, true);
}

//imagetype
std::string RtImage::get_imagetype() const { return m_pImp->get_imagetype();}
void RtImage::set_imagetype(const std::string& imagetype)
{
    m_pImp->set_imagetype(imagetype);
    enable_field(IMAGE_IMAGETYPE);
    setdirty_field(IMAGE_IMAGETYPE, true);
}

//acquisitionnumber
int RtImage::get_acquisitionnumber() const { return m_pImp->get_acquisitionnumber();}
void RtImage::set_acquisitionnumber(const int& acquisitionnumber)
{
    m_pImp->set_acquisitionnumber(acquisitionnumber);
    enable_field(IMAGE_ACQUISITIONNUMBER);
    setdirty_field(IMAGE_ACQUISITIONNUMBER, true);
}

//acquisitiondatetime
DATETIME_BOOST RtImage::get_acquisitiondatetime() const { return m_pImp->get_acquisitiondatetime();}
void RtImage::set_acquisitiondatetime(const DATETIME_BOOST& acquisitiondatetime)
{
    m_pImp->set_acquisitiondatetime(acquisitiondatetime);
    enable_field(IMAGE_ACQUISITIONDATETIME);
    setdirty_field(IMAGE_ACQUISITIONDATETIME, true);
}

//contentdate
DATE_BOOST RtImage::get_contentdate() const { return m_pImp->get_contentdate();}
void RtImage::set_contentdate(const DATE_BOOST& contentdate)
{
    m_pImp->set_contentdate(contentdate);
    enable_field(IMAGE_CONTENTDATE);
    setdirty_field(IMAGE_CONTENTDATE, true);
}

//contenttime
TIME_BOOST RtImage::get_contenttime() const { return m_pImp->get_contenttime();}
void RtImage::set_contenttime(const TIME_BOOST& contenttime)
{
    m_pImp->set_contenttime(contenttime);
    enable_field(IMAGE_CONTENTTIME);
    setdirty_field(IMAGE_CONTENTTIME, true);
}

//instancecreationdate
DATE_BOOST RtImage::get_instancecreationdate() const { return m_pImp->get_instancecreationdate();}
void RtImage::set_instancecreationdate(const DATE_BOOST& instancecreationdate)
{
    m_pImp->set_instancecreationdate(instancecreationdate);
    enable_field(IMAGE_INSTANCECREATIONDATE);
    setdirty_field(IMAGE_INSTANCECREATIONDATE, true);
}

//instancecreationtime
TIME_BOOST RtImage::get_instancecreationtime() const { return m_pImp->get_instancecreationtime();}
void RtImage::set_instancecreationtime(const TIME_BOOST& instancecreationtime)
{
    m_pImp->set_instancecreationtime(instancecreationtime);
    enable_field(IMAGE_INSTANCECREATIONTIME);
    setdirty_field(IMAGE_INSTANCECREATIONTIME, true);
}

//qualitycontrolimage
std::string RtImage::get_qualitycontrolimage() const { return m_pImp->get_qualitycontrolimage();}
void RtImage::set_qualitycontrolimage(const std::string& qualitycontrolimage)
{
    m_pImp->set_qualitycontrolimage(qualitycontrolimage);
    enable_field(IMAGE_QUALITYCONTROLIMAGE);
    setdirty_field(IMAGE_QUALITYCONTROLIMAGE, true);
}

//rows
int RtImage::get_rows() const { return m_pImp->get_rows();}
void RtImage::set_rows(const int& rows)
{
    m_pImp->set_rows(rows);
    enable_field(IMAGE_ROWS);
    setdirty_field(IMAGE_ROWS, true);
}

//columns
int RtImage::get_columns() const { return m_pImp->get_columns();}
void RtImage::set_columns(const int& columns)
{
    m_pImp->set_columns(columns);
    enable_field(IMAGE_COLUMNS);
    setdirty_field(IMAGE_COLUMNS, true);
}

//bitsallocated
int RtImage::get_bitsallocated() const { return m_pImp->get_bitsallocated();}
void RtImage::set_bitsallocated(const int& bitsallocated)
{
    m_pImp->set_bitsallocated(bitsallocated);
    enable_field(IMAGE_BITSALLOCATED);
    setdirty_field(IMAGE_BITSALLOCATED, true);
}

//windowwidth
std::string RtImage::get_windowwidth() const { return m_pImp->get_windowwidth();}
void RtImage::set_windowwidth(const std::string& windowwidth)
{
    m_pImp->set_windowwidth(windowwidth);
    enable_field(IMAGE_WINDOWWIDTH);
    setdirty_field(IMAGE_WINDOWWIDTH, true);
}

//windowcenter
std::string RtImage::get_windowcenter() const { return m_pImp->get_windowcenter();}
void RtImage::set_windowcenter(const std::string& windowcenter)
{
    m_pImp->set_windowcenter(windowcenter);
    enable_field(IMAGE_WINDOWCENTER);
    setdirty_field(IMAGE_WINDOWCENTER, true);
}

//exposureindex
std::string RtImage::get_exposureindex() const { return m_pImp->get_exposureindex();}
void RtImage::set_exposureindex(const std::string& exposureindex)
{
    m_pImp->set_exposureindex(exposureindex);
    enable_field(IMAGE_EXPOSUREINDEX);
    setdirty_field(IMAGE_EXPOSUREINDEX, true);
}

//targetexposureindex
std::string RtImage::get_targetexposureindex() const { return m_pImp->get_targetexposureindex();}
void RtImage::set_targetexposureindex(const std::string& targetexposureindex)
{
    m_pImp->set_targetexposureindex(targetexposureindex);
    enable_field(IMAGE_TARGETEXPOSUREINDEX);
    setdirty_field(IMAGE_TARGETEXPOSUREINDEX, true);
}

//deviationindex
std::string RtImage::get_deviationindex() const { return m_pImp->get_deviationindex();}
void RtImage::set_deviationindex(const std::string& deviationindex)
{
    m_pImp->set_deviationindex(deviationindex);
    enable_field(IMAGE_DEVIATIONINDEX);
    setdirty_field(IMAGE_DEVIATIONINDEX, true);
}

//imagesinacquisition
int RtImage::get_imagesinacquisition() const { return m_pImp->get_imagesinacquisition();}
void RtImage::set_imagesinacquisition(const int& imagesinacquisition)
{
    m_pImp->set_imagesinacquisition(imagesinacquisition);
    enable_field(IMAGE_IMAGESINACQUISITION);
    setdirty_field(IMAGE_IMAGESINACQUISITION, true);
}

//imagecomments
std::string RtImage::get_imagecomments() const { return m_pImp->get_imagecomments();}
void RtImage::set_imagecomments(const std::string& imagecomments)
{
    m_pImp->set_imagecomments(imagecomments);
    enable_field(IMAGE_IMAGECOMMENTS);
    setdirty_field(IMAGE_IMAGECOMMENTS, true);
}

//lossyimagecompression
std::string RtImage::get_lossyimagecompression() const { return m_pImp->get_lossyimagecompression();}
void RtImage::set_lossyimagecompression(const std::string& lossyimagecompression)
{
    m_pImp->set_lossyimagecompression(lossyimagecompression);
    enable_field(IMAGE_LOSSYIMAGECOMPRESSION);
    setdirty_field(IMAGE_LOSSYIMAGECOMPRESSION, true);
}

//lossyimagecompressionratio
std::string RtImage::get_lossyimagecompressionratio() const { return m_pImp->get_lossyimagecompressionratio();}
void RtImage::set_lossyimagecompressionratio(const std::string& lossyimagecompressionratio)
{
    m_pImp->set_lossyimagecompressionratio(lossyimagecompressionratio);
    enable_field(IMAGE_LOSSYIMAGECOMPRESSIONRATIO);
    setdirty_field(IMAGE_LOSSYIMAGECOMPRESSIONRATIO, true);
}

//pixelspacing
std::string RtImage::get_pixelspacing() const { return m_pImp->get_pixelspacing();}
void RtImage::set_pixelspacing(const std::string& pixelspacing)
{
    m_pImp->set_pixelspacing(pixelspacing);
    enable_field(IMAGE_PIXELSPACING);
    setdirty_field(IMAGE_PIXELSPACING, true);
}

//imageorientationpatient
std::string RtImage::get_imageorientationpatient() const { return m_pImp->get_imageorientationpatient();}
void RtImage::set_imageorientationpatient(const std::string& imageorientationpatient)
{
    m_pImp->set_imageorientationpatient(imageorientationpatient);
    enable_field(IMAGE_IMAGEORIENTATIONPATIENT);
    setdirty_field(IMAGE_IMAGEORIENTATIONPATIENT, true);
}

//imagepositionpatient
std::string RtImage::get_imagepositionpatient() const { return m_pImp->get_imagepositionpatient();}
void RtImage::set_imagepositionpatient(const std::string& imagepositionpatient)
{
    m_pImp->set_imagepositionpatient(imagepositionpatient);
    enable_field(IMAGE_IMAGEPOSITIONPATIENT);
    setdirty_field(IMAGE_IMAGEPOSITIONPATIENT, true);
}

//slicethickness
std::string RtImage::get_slicethickness() const { return m_pImp->get_slicethickness();}
void RtImage::set_slicethickness(const std::string& slicethickness)
{
    m_pImp->set_slicethickness(slicethickness);
    enable_field(IMAGE_SLICETHICKNESS);
    setdirty_field(IMAGE_SLICETHICKNESS, true);
}

//slicelocation
std::string RtImage::get_slicelocation() const { return m_pImp->get_slicelocation();}
void RtImage::set_slicelocation(const std::string& slicelocation)
{
    m_pImp->set_slicelocation(slicelocation);
    enable_field(IMAGE_SLICELOCATION);
    setdirty_field(IMAGE_SLICELOCATION, true);
}

//printstatus
std::string RtImage::get_printstatus() const { return m_pImp->get_printstatus();}
void RtImage::set_printstatus(const std::string& printstatus)
{
    m_pImp->set_printstatus(printstatus);
    enable_field(IMAGE_PRINTSTATUS);
    setdirty_field(IMAGE_PRINTSTATUS, true);
}

//archivestatus
std::string RtImage::get_archivestatus() const { return m_pImp->get_archivestatus();}
void RtImage::set_archivestatus(const std::string& archivestatus)
{
    m_pImp->set_archivestatus(archivestatus);
    enable_field(IMAGE_ARCHIVESTATUS);
    setdirty_field(IMAGE_ARCHIVESTATUS, true);
}

//imageconfirmstatus
int RtImage::get_imageconfirmstatus() const { return m_pImp->get_imageconfirmstatus();}
void RtImage::set_imageconfirmstatus(const int& imageconfirmstatus)
{
    m_pImp->set_imageconfirmstatus(imageconfirmstatus);
    enable_field(IMAGE_IMAGECONFIRMSTATUS);
    setdirty_field(IMAGE_IMAGECONFIRMSTATUS, true);
}

//imagerejectreason
std::string RtImage::get_imagerejectreason() const { return m_pImp->get_imagerejectreason();}
void RtImage::set_imagerejectreason(const std::string& imagerejectreason)
{
    m_pImp->set_imagerejectreason(imagerejectreason);
    enable_field(IMAGE_IMAGEREJECTREASON);
    setdirty_field(IMAGE_IMAGEREJECTREASON, true);
}

//imageconfirmdatetime
DATETIME_BOOST RtImage::get_imageconfirmdatetime() const { return m_pImp->get_imageconfirmdatetime();}
void RtImage::set_imageconfirmdatetime(const DATETIME_BOOST& imageconfirmdatetime)
{
    m_pImp->set_imageconfirmdatetime(imageconfirmdatetime);
    enable_field(IMAGE_IMAGECONFIRMDATETIME);
    setdirty_field(IMAGE_IMAGECONFIRMDATETIME, true);
}

//imagesendstatus
std::string RtImage::get_imagesendstatus() const { return m_pImp->get_imagesendstatus();}
void RtImage::set_imagesendstatus(const std::string& imagesendstatus)
{
    m_pImp->set_imagesendstatus(imagesendstatus);
    enable_field(IMAGE_IMAGESENDSTATUS);
    setdirty_field(IMAGE_IMAGESENDSTATUS, true);
}

//imagestoredindvd
std::string RtImage::get_imagestoredindvd() const { return m_pImp->get_imagestoredindvd();}
void RtImage::set_imagestoredindvd(const std::string& imagestoredindvd)
{
    m_pImp->set_imagestoredindvd(imagestoredindvd);
    enable_field(IMAGE_IMAGESTOREDINDVD);
    setdirty_field(IMAGE_IMAGESTOREDINDVD, true);
}

//imagestoredinusb
std::string RtImage::get_imagestoredinusb() const { return m_pImp->get_imagestoredinusb();}
void RtImage::set_imagestoredinusb(const std::string& imagestoredinusb)
{
    m_pImp->set_imagestoredinusb(imagestoredinusb);
    enable_field(IMAGE_IMAGESTOREDINUSB);
    setdirty_field(IMAGE_IMAGESTOREDINUSB, true);
}

//imagemark
std::string RtImage::get_imagemark() const { return m_pImp->get_imagemark();}
void RtImage::set_imagemark(const std::string& imagemark)
{
    m_pImp->set_imagemark(imagemark);
    enable_field(IMAGE_IMAGEMARK);
    setdirty_field(IMAGE_IMAGEMARK, true);
}

//imageprotect
std::string RtImage::get_imageprotect() const { return m_pImp->get_imageprotect();}
void RtImage::set_imageprotect(const std::string& imageprotect)
{
    m_pImp->set_imageprotect(imageprotect);
    enable_field(IMAGE_IMAGEPROTECT);
    setdirty_field(IMAGE_IMAGEPROTECT, true);
}

//imageiscached
bool RtImage::get_imageiscached() const { return m_pImp->get_imageiscached();}
void RtImage::set_imageiscached(const bool& imageiscached)
{
    m_pImp->set_imageiscached(imageiscached);
    enable_field(IMAGE_IMAGEISCACHED);
    setdirty_field(IMAGE_IMAGEISCACHED, true);
}

//acquisitionfov
std::string RtImage::get_acquisitionfov() const { return m_pImp->get_acquisitionfov();}
void RtImage::set_acquisitionfov(const std::string& acquisitionfov)
{
    m_pImp->set_acquisitionfov(acquisitionfov);
    enable_field(IMAGE_ACQUISITIONFOV);
    setdirty_field(IMAGE_ACQUISITIONFOV, true);
}

//acquisitionmatrixinterpolated
std::string RtImage::get_acquisitionmatrixinterpolated() const { return m_pImp->get_acquisitionmatrixinterpolated();}
void RtImage::set_acquisitionmatrixinterpolated(const std::string& acquisitionmatrixinterpolated)
{
    m_pImp->set_acquisitionmatrixinterpolated(acquisitionmatrixinterpolated);
    enable_field(IMAGE_ACQUISITIONMATRIXINTERPOLATED);
    setdirty_field(IMAGE_ACQUISITIONMATRIXINTERPOLATED, true);
}

//imageorientationlabel
std::string RtImage::get_imageorientationlabel() const { return m_pImp->get_imageorientationlabel();}
void RtImage::set_imageorientationlabel(const std::string& imageorientationlabel)
{
    m_pImp->set_imageorientationlabel(imageorientationlabel);
    enable_field(IMAGE_IMAGEORIENTATIONLABEL);
    setdirty_field(IMAGE_IMAGEORIENTATIONLABEL, true);
}

//tableofposition
int RtImage::get_tableofposition() const { return m_pImp->get_tableofposition();}
void RtImage::set_tableofposition(const int& tableofposition)
{
    m_pImp->set_tableofposition(tableofposition);
    enable_field(IMAGE_TABLEOFPOSITION);
    setdirty_field(IMAGE_TABLEOFPOSITION, true);
}

//isfreecassete
int RtImage::get_isfreecassete() const { return m_pImp->get_isfreecassete();}
void RtImage::set_isfreecassete(const int& isfreecassete)
{
    m_pImp->set_isfreecassete(isfreecassete);
    enable_field(IMAGE_ISFREECASSETE);
    setdirty_field(IMAGE_ISFREECASSETE, true);
}

//photometricinterpretation
std::string RtImage::get_photometricinterpretation() const { return m_pImp->get_photometricinterpretation();}
void RtImage::set_photometricinterpretation(const std::string& photometricinterpretation)
{
    m_pImp->set_photometricinterpretation(photometricinterpretation);
    enable_field(IMAGE_PHOTOMETRICINTERPRETATION);
    setdirty_field(IMAGE_PHOTOMETRICINTERPRETATION, true);
}

//numberofframes
std::string RtImage::get_numberofframes() const { return m_pImp->get_numberofframes();}
void RtImage::set_numberofframes(const std::string& numberofframes)
{
    m_pImp->set_numberofframes(numberofframes);
    enable_field(IMAGE_NUMBEROFFRAMES);
    setdirty_field(IMAGE_NUMBEROFFRAMES, true);
}

//samplesperpixel
int RtImage::get_samplesperpixel() const { return m_pImp->get_samplesperpixel();}
void RtImage::set_samplesperpixel(const int& samplesperpixel)
{
    m_pImp->set_samplesperpixel(samplesperpixel);
    enable_field(IMAGE_SAMPLESPERPIXEL);
    setdirty_field(IMAGE_SAMPLESPERPIXEL, true);
}

//pixelrepresentation
int RtImage::get_pixelrepresentation() const { return m_pImp->get_pixelrepresentation();}
void RtImage::set_pixelrepresentation(const int& pixelrepresentation)
{
    m_pImp->set_pixelrepresentation(pixelrepresentation);
    enable_field(IMAGE_PIXELREPRESENTATION);
    setdirty_field(IMAGE_PIXELREPRESENTATION, true);
}

//rescaleslope
std::string RtImage::get_rescaleslope() const { return m_pImp->get_rescaleslope();}
void RtImage::set_rescaleslope(const std::string& rescaleslope)
{
    m_pImp->set_rescaleslope(rescaleslope);
    enable_field(IMAGE_RESCALESLOPE);
    setdirty_field(IMAGE_RESCALESLOPE, true);
}

//rescaleintercept
std::string RtImage::get_rescaleintercept() const { return m_pImp->get_rescaleintercept();}
void RtImage::set_rescaleintercept(const std::string& rescaleintercept)
{
    m_pImp->set_rescaleintercept(rescaleintercept);
    enable_field(IMAGE_RESCALEINTERCEPT);
    setdirty_field(IMAGE_RESCALEINTERCEPT, true);
}

//imagereserved0
std::string RtImage::get_imagereserved0() const { return m_pImp->get_imagereserved0();}
void RtImage::set_imagereserved0(const std::string& imagereserved0)
{
    m_pImp->set_imagereserved0(imagereserved0);
    enable_field(IMAGE_IMAGERESERVED0);
    setdirty_field(IMAGE_IMAGERESERVED0, true);
}

//imagereserved1
std::string RtImage::get_imagereserved1() const { return m_pImp->get_imagereserved1();}
void RtImage::set_imagereserved1(const std::string& imagereserved1)
{
    m_pImp->set_imagereserved1(imagereserved1);
    enable_field(IMAGE_IMAGERESERVED1);
    setdirty_field(IMAGE_IMAGERESERVED1, true);
}

//bitsstored
int RtImage::get_bitsstored() const { return m_pImp->get_bitsstored();}
void RtImage::set_bitsstored(const int& bitsstored)
{
    m_pImp->set_bitsstored(bitsstored);
    enable_field(IMAGE_BITSSTORED);
    setdirty_field(IMAGE_BITSSTORED, true);
}

//highbit
int RtImage::get_highbit() const { return m_pImp->get_highbit();}
void RtImage::set_highbit(const int& highbit)
{
    m_pImp->set_highbit(highbit);
    enable_field(IMAGE_HIGHBIT);
    setdirty_field(IMAGE_HIGHBIT, true);
}

//kvp
double RtImage::get_kvp() const { return m_pImp->get_kvp();}
void RtImage::set_kvp(const double& kvp)
{
    m_pImp->set_kvp(kvp);
    enable_field(IMAGE_KVP);
    setdirty_field(IMAGE_KVP, true);
}

//couchsagoffset
float RtImage::get_couchsagoffset() const { return m_pImp->get_couchsagoffset();}
void RtImage::set_couchsagoffset(const float& couchsagoffset)
{
    m_pImp->set_couchsagoffset(couchsagoffset);
    enable_field(IMAGE_COUCHSAGOFFSET);
    setdirty_field(IMAGE_COUCHSAGOFFSET, true);
}

//endposition
float RtImage::get_endposition() const { return m_pImp->get_endposition();}
void RtImage::set_endposition(const float& endposition)
{
    m_pImp->set_endposition(endposition);
    enable_field(IMAGE_ENDPOSITION);
    setdirty_field(IMAGE_ENDPOSITION, true);
}

//startposition
float RtImage::get_startposition() const { return m_pImp->get_startposition();}
void RtImage::set_startposition(const float& startposition)
{
    m_pImp->set_startposition(startposition);
    enable_field(IMAGE_STARTPOSITION);
    setdirty_field(IMAGE_STARTPOSITION, true);
}

//updatetime
DATETIME_BOOST RtImage::get_updatetime() const { return m_pImp->get_updatetime();}
void RtImage::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(IMAGE_UPDATETIME);
    setdirty_field(IMAGE_UPDATETIME, true);
}
//////////////////////////////////////////////////////////////////////////
//dcmfiledata
char* RtImage::get_dcmfiledata(unsigned long* ulSize) const { return m_pImp->get_dcmfiledata(ulSize);}
void RtImage::set_dcmfiledata(char* pData, unsigned long ulSize) { m_pImp->set_dcmfiledata(pData, ulSize);}

RT_TPS_DATABASE_END_NAMESPACE