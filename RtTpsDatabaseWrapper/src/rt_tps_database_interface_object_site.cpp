//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_site.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_site.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtSiteImp::RtSiteImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_sitetemplateuid(""),
    m_courseuid(""),
    m_name(""),
    m_diagnosistype(0),
    m_stage(""),
    m_stagedetail(""),
    m_scanareatype(0),
    m_tumorlength(0.f),
    m_tumorwidth(0.f),
    m_tumorheight(0.f),
    m_tumorvolume(0.f),
    m_marker(0),
    m_simoperatoruid(""),
    m_simulationnotes(""),
    m_patientpositiontype(0),
    m_armspositiontype(0),
    m_legs(""),
    m_other(""),
    m_comments(""),
    m_needcreatebeam(false),
    m_needcreatvoi(false),
    m_needgating(false),
    m_planningimagingtype(0),
    m_needplanningimagemrit2(false),
    m_needplanningimagemrit1(false),
    m_needplanningimagemridwi(false),
    m_needplanningimagemriother(false),
    m_needplanningimagemripi(false),
    m_planningimageoption(0),
    m_needsecondaryct(false),
    m_secondaryctoption(0),
    m_needsecondary4dct(false),
    m_needsim(false),
    m_needsecondarymr(false),
    m_secondarymroption(0),
    m_needsecondarypetct(false),
    m_secondarypetctoption(0),
    m_immobilization(""),
    m_isdefault(false),
    m_setupphotouid(""),
    m_surfacerenderingphotouid(""),
    m_otherplanningimagemri(""),
    m_startposition(0.),
    m_percent(0.),
    m_scanpicturetype(0),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtSiteImp::RtSiteImp(const RtSiteImp& site):
    m_uid(site.get_uid()),
    m_sitetemplateuid(site.get_sitetemplateuid()),
    m_courseuid(site.get_courseuid()),
    m_name(site.get_name()),
    m_diagnosistype(site.get_diagnosistype()),
    m_stage(site.get_stage()),
    m_stagedetail(site.get_stagedetail()),
    m_scanareatype(site.get_scanareatype()),
    m_tumorlength(site.get_tumorlength()),
    m_tumorwidth(site.get_tumorwidth()),
    m_tumorheight(site.get_tumorheight()),
    m_tumorvolume(site.get_tumorvolume()),
    m_marker(site.get_marker()),
    m_simoperatoruid(site.get_simoperatoruid()),
    m_simulationnotes(site.get_simulationnotes()),
    m_patientpositiontype(site.get_patientpositiontype()),
    m_armspositiontype(site.get_armspositiontype()),
    m_legs(site.get_legs()),
    m_other(site.get_other()),
    m_comments(site.get_comments()),
    m_needcreatebeam(site.get_needcreatebeam()),
    m_needcreatvoi(site.get_needcreatvoi()),
    m_needgating(site.get_needgating()),
    m_planningimagingtype(site.get_planningimagingtype()),
    m_needplanningimagemrit2(site.get_needplanningimagemrit2()),
    m_needplanningimagemrit1(site.get_needplanningimagemrit1()),
    m_needplanningimagemridwi(site.get_needplanningimagemridwi()),
    m_needplanningimagemriother(site.get_needplanningimagemriother()),
    m_needplanningimagemripi(site.get_needplanningimagemripi()),
    m_planningimageoption(site.get_planningimageoption()),
    m_needsecondaryct(site.get_needsecondaryct()),
    m_secondaryctoption(site.get_secondaryctoption()),
    m_needsecondary4dct(site.get_needsecondary4dct()),
    m_needsim(site.get_needsim()),
    m_needsecondarymr(site.get_needsecondarymr()),
    m_secondarymroption(site.get_secondarymroption()),
    m_needsecondarypetct(site.get_needsecondarypetct()),
    m_secondarypetctoption(site.get_secondarypetctoption()),
    m_immobilization(site.get_immobilization()),
    m_isdefault(site.get_isdefault()),
    m_setupphotouid(site.get_setupphotouid()),
    m_surfacerenderingphotouid(site.get_surfacerenderingphotouid()),
    m_otherplanningimagemri(site.get_otherplanningimagemri()),
    m_startposition(site.get_startposition()),
    m_percent(site.get_percent()),
    m_scanpicturetype(site.get_scanpicturetype()),
    m_crc(site.get_crc()),
    m_updatetime(site.get_updatetime())
{
}

RtSiteImp& RtSiteImp::operator=(const RtSiteImp& site)
{
    if (this != &site){
        this->m_uid = site.get_uid();
        this->m_sitetemplateuid = site.get_sitetemplateuid();
        this->m_courseuid = site.get_courseuid();
        this->m_name = site.get_name();
        this->m_diagnosistype = site.get_diagnosistype();
        this->m_stage = site.get_stage();
        this->m_stagedetail = site.get_stagedetail();
        this->m_scanareatype = site.get_scanareatype();
        this->m_tumorlength = site.get_tumorlength();
        this->m_tumorwidth = site.get_tumorwidth();
        this->m_tumorheight = site.get_tumorheight();
        this->m_tumorvolume = site.get_tumorvolume();
        this->m_marker = site.get_marker();
        this->m_simoperatoruid = site.get_simoperatoruid();
        this->m_simulationnotes = site.get_simulationnotes();
        this->m_patientpositiontype = site.get_patientpositiontype();
        this->m_armspositiontype = site.get_armspositiontype();
        this->m_legs = site.get_legs();
        this->m_other = site.get_other();
        this->m_comments = site.get_comments();
        this->m_needcreatebeam = site.get_needcreatebeam();
        this->m_needcreatvoi = site.get_needcreatvoi();
        this->m_needgating = site.get_needgating();
        this->m_planningimagingtype = site.get_planningimagingtype();
        this->m_needplanningimagemrit2 = site.get_needplanningimagemrit2();
        this->m_needplanningimagemrit1 = site.get_needplanningimagemrit1();
        this->m_needplanningimagemridwi = site.get_needplanningimagemridwi();
        this->m_needplanningimagemriother = site.get_needplanningimagemriother();
        this->m_needplanningimagemripi = site.get_needplanningimagemripi();
        this->m_planningimageoption = site.get_planningimageoption();
        this->m_needsecondaryct = site.get_needsecondaryct();
        this->m_secondaryctoption = site.get_secondaryctoption();
        this->m_needsecondary4dct = site.get_needsecondary4dct();
        this->m_needsim = site.get_needsim();
        this->m_needsecondarymr = site.get_needsecondarymr();
        this->m_secondarymroption = site.get_secondarymroption();
        this->m_needsecondarypetct = site.get_needsecondarypetct();
        this->m_secondarypetctoption = site.get_secondarypetctoption();
        this->m_immobilization = site.get_immobilization();
        this->m_isdefault = site.get_isdefault();
        this->m_setupphotouid = site.get_setupphotouid();
        this->m_surfacerenderingphotouid = site.get_surfacerenderingphotouid();
        this->m_otherplanningimagemri = site.get_otherplanningimagemri();
        this->m_startposition = site.get_startposition();
        this->m_percent = site.get_percent();
        this->m_scanpicturetype = site.get_scanpicturetype();
        this->m_crc = site.get_crc();
        this->m_updatetime = site.get_updatetime();
    }
    return *this;
}

RtSiteImp::~RtSiteImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtSite::RtSite(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtSiteImp(bGeneraterUid);
    set_flags(SITE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_SITE_FIELD_NULL);
}

RtSite::RtSite(const RtSite& site): RtDatabaseObject(site),
   m_pImp(new RtSiteImp(*site.m_pImp))
{
}

RtSite& RtSite::operator = (const RtSite& site)
{
    if(this != &site)
    {
        RtDatabaseObject::operator=(site);
        *this->m_pImp = *site.m_pImp;
    }
    return *this;
}

RtSite::~RtSite()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtSite::get_uid() const { return m_pImp->get_uid();}
void RtSite::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(SITE_UID);
    setdirty_field(SITE_UID, true);
}

//sitetemplateuid
std::string RtSite::get_sitetemplateuid() const { return m_pImp->get_sitetemplateuid();}
void RtSite::set_sitetemplateuid(const std::string& sitetemplateuid)
{
    m_pImp->set_sitetemplateuid(sitetemplateuid);
    enable_field(SITE_SITETEMPLATEUID);
    setdirty_field(SITE_SITETEMPLATEUID, true);
}

//courseuid
std::string RtSite::get_courseuid() const { return m_pImp->get_courseuid();}
void RtSite::set_courseuid(const std::string& courseuid)
{
    m_pImp->set_courseuid(courseuid);
    enable_field(SITE_COURSEUID);
    setdirty_field(SITE_COURSEUID, true);
}

//name
std::string RtSite::get_name() const { return m_pImp->get_name();}
void RtSite::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(SITE_NAME);
    setdirty_field(SITE_NAME, true);
}

//diagnosistype
int RtSite::get_diagnosistype() const { return m_pImp->get_diagnosistype();}
void RtSite::set_diagnosistype(const int& diagnosistype)
{
    m_pImp->set_diagnosistype(diagnosistype);
    enable_field(SITE_DIAGNOSISTYPE);
    setdirty_field(SITE_DIAGNOSISTYPE, true);
}

//stage
std::string RtSite::get_stage() const { return m_pImp->get_stage();}
void RtSite::set_stage(const std::string& stage)
{
    m_pImp->set_stage(stage);
    enable_field(SITE_STAGE);
    setdirty_field(SITE_STAGE, true);
}

//stagedetail
std::string RtSite::get_stagedetail() const { return m_pImp->get_stagedetail();}
void RtSite::set_stagedetail(const std::string& stagedetail)
{
    m_pImp->set_stagedetail(stagedetail);
    enable_field(SITE_STAGEDETAIL);
    setdirty_field(SITE_STAGEDETAIL, true);
}

//scanareatype
int RtSite::get_scanareatype() const { return m_pImp->get_scanareatype();}
void RtSite::set_scanareatype(const int& scanareatype)
{
    m_pImp->set_scanareatype(scanareatype);
    enable_field(SITE_SCANAREATYPE);
    setdirty_field(SITE_SCANAREATYPE, true);
}

//tumorlength
float RtSite::get_tumorlength() const { return m_pImp->get_tumorlength();}
void RtSite::set_tumorlength(const float& tumorlength)
{
    m_pImp->set_tumorlength(tumorlength);
    enable_field(SITE_TUMORLENGTH);
    setdirty_field(SITE_TUMORLENGTH, true);
}

//tumorwidth
float RtSite::get_tumorwidth() const { return m_pImp->get_tumorwidth();}
void RtSite::set_tumorwidth(const float& tumorwidth)
{
    m_pImp->set_tumorwidth(tumorwidth);
    enable_field(SITE_TUMORWIDTH);
    setdirty_field(SITE_TUMORWIDTH, true);
}

//tumorheight
float RtSite::get_tumorheight() const { return m_pImp->get_tumorheight();}
void RtSite::set_tumorheight(const float& tumorheight)
{
    m_pImp->set_tumorheight(tumorheight);
    enable_field(SITE_TUMORHEIGHT);
    setdirty_field(SITE_TUMORHEIGHT, true);
}

//tumorvolume
float RtSite::get_tumorvolume() const { return m_pImp->get_tumorvolume();}
void RtSite::set_tumorvolume(const float& tumorvolume)
{
    m_pImp->set_tumorvolume(tumorvolume);
    enable_field(SITE_TUMORVOLUME);
    setdirty_field(SITE_TUMORVOLUME, true);
}

//marker
int RtSite::get_marker() const { return m_pImp->get_marker();}
void RtSite::set_marker(const int& marker)
{
    m_pImp->set_marker(marker);
    enable_field(SITE_MARKER);
    setdirty_field(SITE_MARKER, true);
}

//simoperatoruid
std::string RtSite::get_simoperatoruid() const { return m_pImp->get_simoperatoruid();}
void RtSite::set_simoperatoruid(const std::string& simoperatoruid)
{
    m_pImp->set_simoperatoruid(simoperatoruid);
    enable_field(SITE_SIMOPERATORUID);
    setdirty_field(SITE_SIMOPERATORUID, true);
}

//simulationnotes
std::string RtSite::get_simulationnotes() const { return m_pImp->get_simulationnotes();}
void RtSite::set_simulationnotes(const std::string& simulationnotes)
{
    m_pImp->set_simulationnotes(simulationnotes);
    enable_field(SITE_SIMULATIONNOTES);
    setdirty_field(SITE_SIMULATIONNOTES, true);
}

//patientpositiontype
int RtSite::get_patientpositiontype() const { return m_pImp->get_patientpositiontype();}
void RtSite::set_patientpositiontype(const int& patientpositiontype)
{
    m_pImp->set_patientpositiontype(patientpositiontype);
    enable_field(SITE_PATIENTPOSITIONTYPE);
    setdirty_field(SITE_PATIENTPOSITIONTYPE, true);
}

//armspositiontype
int RtSite::get_armspositiontype() const { return m_pImp->get_armspositiontype();}
void RtSite::set_armspositiontype(const int& armspositiontype)
{
    m_pImp->set_armspositiontype(armspositiontype);
    enable_field(SITE_ARMSPOSITIONTYPE);
    setdirty_field(SITE_ARMSPOSITIONTYPE, true);
}

//legs
std::string RtSite::get_legs() const { return m_pImp->get_legs();}
void RtSite::set_legs(const std::string& legs)
{
    m_pImp->set_legs(legs);
    enable_field(SITE_LEGS);
    setdirty_field(SITE_LEGS, true);
}

//other
std::string RtSite::get_other() const { return m_pImp->get_other();}
void RtSite::set_other(const std::string& other)
{
    m_pImp->set_other(other);
    enable_field(SITE_OTHER);
    setdirty_field(SITE_OTHER, true);
}

//comments
std::string RtSite::get_comments() const { return m_pImp->get_comments();}
void RtSite::set_comments(const std::string& comments)
{
    m_pImp->set_comments(comments);
    enable_field(SITE_COMMENTS);
    setdirty_field(SITE_COMMENTS, true);
}

//needcreatebeam
bool RtSite::get_needcreatebeam() const { return m_pImp->get_needcreatebeam();}
void RtSite::set_needcreatebeam(const bool& needcreatebeam)
{
    m_pImp->set_needcreatebeam(needcreatebeam);
    enable_field(SITE_NEEDCREATEBEAM);
    setdirty_field(SITE_NEEDCREATEBEAM, true);
}

//needcreatvoi
bool RtSite::get_needcreatvoi() const { return m_pImp->get_needcreatvoi();}
void RtSite::set_needcreatvoi(const bool& needcreatvoi)
{
    m_pImp->set_needcreatvoi(needcreatvoi);
    enable_field(SITE_NEEDCREATVOI);
    setdirty_field(SITE_NEEDCREATVOI, true);
}

//needgating
bool RtSite::get_needgating() const { return m_pImp->get_needgating();}
void RtSite::set_needgating(const bool& needgating)
{
    m_pImp->set_needgating(needgating);
    enable_field(SITE_NEEDGATING);
    setdirty_field(SITE_NEEDGATING, true);
}

//planningimagingtype
int RtSite::get_planningimagingtype() const { return m_pImp->get_planningimagingtype();}
void RtSite::set_planningimagingtype(const int& planningimagingtype)
{
    m_pImp->set_planningimagingtype(planningimagingtype);
    enable_field(SITE_PLANNINGIMAGINGTYPE);
    setdirty_field(SITE_PLANNINGIMAGINGTYPE, true);
}

//needplanningimagemrit2
bool RtSite::get_needplanningimagemrit2() const { return m_pImp->get_needplanningimagemrit2();}
void RtSite::set_needplanningimagemrit2(const bool& needplanningimagemrit2)
{
    m_pImp->set_needplanningimagemrit2(needplanningimagemrit2);
    enable_field(SITE_NEEDPLANNINGIMAGEMRIT2);
    setdirty_field(SITE_NEEDPLANNINGIMAGEMRIT2, true);
}

//needplanningimagemrit1
bool RtSite::get_needplanningimagemrit1() const { return m_pImp->get_needplanningimagemrit1();}
void RtSite::set_needplanningimagemrit1(const bool& needplanningimagemrit1)
{
    m_pImp->set_needplanningimagemrit1(needplanningimagemrit1);
    enable_field(SITE_NEEDPLANNINGIMAGEMRIT1);
    setdirty_field(SITE_NEEDPLANNINGIMAGEMRIT1, true);
}

//needplanningimagemridwi
bool RtSite::get_needplanningimagemridwi() const { return m_pImp->get_needplanningimagemridwi();}
void RtSite::set_needplanningimagemridwi(const bool& needplanningimagemridwi)
{
    m_pImp->set_needplanningimagemridwi(needplanningimagemridwi);
    enable_field(SITE_NEEDPLANNINGIMAGEMRIDWI);
    setdirty_field(SITE_NEEDPLANNINGIMAGEMRIDWI, true);
}

//needplanningimagemriother
bool RtSite::get_needplanningimagemriother() const { return m_pImp->get_needplanningimagemriother();}
void RtSite::set_needplanningimagemriother(const bool& needplanningimagemriother)
{
    m_pImp->set_needplanningimagemriother(needplanningimagemriother);
    enable_field(SITE_NEEDPLANNINGIMAGEMRIOTHER);
    setdirty_field(SITE_NEEDPLANNINGIMAGEMRIOTHER, true);
}

//needplanningimagemripi
bool RtSite::get_needplanningimagemripi() const { return m_pImp->get_needplanningimagemripi();}
void RtSite::set_needplanningimagemripi(const bool& needplanningimagemripi)
{
    m_pImp->set_needplanningimagemripi(needplanningimagemripi);
    enable_field(SITE_NEEDPLANNINGIMAGEMRIPI);
    setdirty_field(SITE_NEEDPLANNINGIMAGEMRIPI, true);
}

//planningimageoption
int RtSite::get_planningimageoption() const { return m_pImp->get_planningimageoption();}
void RtSite::set_planningimageoption(const int& planningimageoption)
{
    m_pImp->set_planningimageoption(planningimageoption);
    enable_field(SITE_PLANNINGIMAGEOPTION);
    setdirty_field(SITE_PLANNINGIMAGEOPTION, true);
}

//needsecondaryct
bool RtSite::get_needsecondaryct() const { return m_pImp->get_needsecondaryct();}
void RtSite::set_needsecondaryct(const bool& needsecondaryct)
{
    m_pImp->set_needsecondaryct(needsecondaryct);
    enable_field(SITE_NEEDSECONDARYCT);
    setdirty_field(SITE_NEEDSECONDARYCT, true);
}

//secondaryctoption
int RtSite::get_secondaryctoption() const { return m_pImp->get_secondaryctoption();}
void RtSite::set_secondaryctoption(const int& secondaryctoption)
{
    m_pImp->set_secondaryctoption(secondaryctoption);
    enable_field(SITE_SECONDARYCTOPTION);
    setdirty_field(SITE_SECONDARYCTOPTION, true);
}

//needsecondary4dct
bool RtSite::get_needsecondary4dct() const { return m_pImp->get_needsecondary4dct();}
void RtSite::set_needsecondary4dct(const bool& needsecondary4dct)
{
    m_pImp->set_needsecondary4dct(needsecondary4dct);
    enable_field(SITE_NEEDSECONDARY4DCT);
    setdirty_field(SITE_NEEDSECONDARY4DCT, true);
}

//needsim
bool RtSite::get_needsim() const { return m_pImp->get_needsim();}
void RtSite::set_needsim(const bool& needsim)
{
    m_pImp->set_needsim(needsim);
    enable_field(SITE_NEEDSIM);
    setdirty_field(SITE_NEEDSIM, true);
}

//needsecondarymr
bool RtSite::get_needsecondarymr() const { return m_pImp->get_needsecondarymr();}
void RtSite::set_needsecondarymr(const bool& needsecondarymr)
{
    m_pImp->set_needsecondarymr(needsecondarymr);
    enable_field(SITE_NEEDSECONDARYMR);
    setdirty_field(SITE_NEEDSECONDARYMR, true);
}

//secondarymroption
int RtSite::get_secondarymroption() const { return m_pImp->get_secondarymroption();}
void RtSite::set_secondarymroption(const int& secondarymroption)
{
    m_pImp->set_secondarymroption(secondarymroption);
    enable_field(SITE_SECONDARYMROPTION);
    setdirty_field(SITE_SECONDARYMROPTION, true);
}

//needsecondarypetct
bool RtSite::get_needsecondarypetct() const { return m_pImp->get_needsecondarypetct();}
void RtSite::set_needsecondarypetct(const bool& needsecondarypetct)
{
    m_pImp->set_needsecondarypetct(needsecondarypetct);
    enable_field(SITE_NEEDSECONDARYPETCT);
    setdirty_field(SITE_NEEDSECONDARYPETCT, true);
}

//secondarypetctoption
int RtSite::get_secondarypetctoption() const { return m_pImp->get_secondarypetctoption();}
void RtSite::set_secondarypetctoption(const int& secondarypetctoption)
{
    m_pImp->set_secondarypetctoption(secondarypetctoption);
    enable_field(SITE_SECONDARYPETCTOPTION);
    setdirty_field(SITE_SECONDARYPETCTOPTION, true);
}

//immobilization
std::string RtSite::get_immobilization() const { return m_pImp->get_immobilization();}
void RtSite::set_immobilization(const std::string& immobilization)
{
    m_pImp->set_immobilization(immobilization);
    enable_field(SITE_IMMOBILIZATION);
    setdirty_field(SITE_IMMOBILIZATION, true);
}

//isdefault
bool RtSite::get_isdefault() const { return m_pImp->get_isdefault();}
void RtSite::set_isdefault(const bool& isdefault)
{
    m_pImp->set_isdefault(isdefault);
    enable_field(SITE_ISDEFAULT);
    setdirty_field(SITE_ISDEFAULT, true);
}

//setupphotouid
std::string RtSite::get_setupphotouid() const { return m_pImp->get_setupphotouid();}
void RtSite::set_setupphotouid(const std::string& setupphotouid)
{
    m_pImp->set_setupphotouid(setupphotouid);
    enable_field(SITE_SETUPPHOTOUID);
    setdirty_field(SITE_SETUPPHOTOUID, true);
}

//surfacerenderingphotouid
std::string RtSite::get_surfacerenderingphotouid() const { return m_pImp->get_surfacerenderingphotouid();}
void RtSite::set_surfacerenderingphotouid(const std::string& surfacerenderingphotouid)
{
    m_pImp->set_surfacerenderingphotouid(surfacerenderingphotouid);
    enable_field(SITE_SURFACERENDERINGPHOTOUID);
    setdirty_field(SITE_SURFACERENDERINGPHOTOUID, true);
}

//otherplanningimagemri
std::string RtSite::get_otherplanningimagemri() const { return m_pImp->get_otherplanningimagemri();}
void RtSite::set_otherplanningimagemri(const std::string& otherplanningimagemri)
{
    m_pImp->set_otherplanningimagemri(otherplanningimagemri);
    enable_field(SITE_OTHERPLANNINGIMAGEMRI);
    setdirty_field(SITE_OTHERPLANNINGIMAGEMRI, true);
}

//startposition
double RtSite::get_startposition() const { return m_pImp->get_startposition();}
void RtSite::set_startposition(const double& startposition)
{
    m_pImp->set_startposition(startposition);
    enable_field(SITE_STARTPOSITION);
    setdirty_field(SITE_STARTPOSITION, true);
}

//percent
double RtSite::get_percent() const { return m_pImp->get_percent();}
void RtSite::set_percent(const double& percent)
{
    m_pImp->set_percent(percent);
    enable_field(SITE_PERCENT);
    setdirty_field(SITE_PERCENT, true);
}

//scanpicturetype
int RtSite::get_scanpicturetype() const { return m_pImp->get_scanpicturetype();}
void RtSite::set_scanpicturetype(const int& scanpicturetype)
{
    m_pImp->set_scanpicturetype(scanpicturetype);
    enable_field(SITE_SCANPICTURETYPE);
    setdirty_field(SITE_SCANPICTURETYPE, true);
}

//crc
std::string RtSite::get_crc() const { return m_pImp->get_crc();}
void RtSite::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(SITE_CRC);
    setdirty_field(SITE_CRC, true);
}

//updatetime
DATETIME_BOOST RtSite::get_updatetime() const { return m_pImp->get_updatetime();}
void RtSite::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(SITE_UPDATETIME);
    setdirty_field(SITE_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE