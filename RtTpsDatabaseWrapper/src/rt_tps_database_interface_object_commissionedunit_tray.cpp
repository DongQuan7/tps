//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2015
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_commissionedunit_tray.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016/1/18 15:03:26
///
///  \version 1.0
///  \date    1/19/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_commissionedunit_tray.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtCommissionedunit_trayImp::RtCommissionedunit_trayImp():
    m_commissionedunituid(""),
    m_trayuid(""),
    m_trayfactor(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
}

RtCommissionedunit_trayImp::RtCommissionedunit_trayImp(const RtCommissionedunit_trayImp& commissionedunit_tray):
    m_commissionedunituid(commissionedunit_tray.get_commissionedunituid()),
    m_trayuid(commissionedunit_tray.get_trayuid()),
    m_trayfactor(commissionedunit_tray.get_trayfactor()),
    m_updatetime(commissionedunit_tray.get_updatetime())
{
}

RtCommissionedunit_trayImp& RtCommissionedunit_trayImp::operator=(const RtCommissionedunit_trayImp& commissionedunit_tray)
{
    if (this != &commissionedunit_tray){
        this->m_commissionedunituid = commissionedunit_tray.get_commissionedunituid();
        this->m_trayuid = commissionedunit_tray.get_trayuid();
        this->m_trayfactor = commissionedunit_tray.get_trayfactor();
        this->m_updatetime = commissionedunit_tray.get_updatetime();
    }
    return *this;
}

RtCommissionedunit_trayImp::~RtCommissionedunit_trayImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtCommissionedunit_tray::RtCommissionedunit_tray()
{
    m_pImp = new RtCommissionedunit_trayImp();
}

RtCommissionedunit_tray::RtCommissionedunit_tray(const RtCommissionedunit_tray& commissionedunit_tray):
   m_pImp(new RtCommissionedunit_trayImp(*commissionedunit_tray.m_pImp))
{
}

RtCommissionedunit_tray& RtCommissionedunit_tray::operator = (const RtCommissionedunit_tray& commissionedunit_tray)
{
    if(this != &commissionedunit_tray) *this->m_pImp = *commissionedunit_tray.m_pImp;
    return *this;
}

RtCommissionedunit_tray::~RtCommissionedunit_tray()
{
    DEL_PTR(m_pImp);
}

//commissionedunituid
std::string RtCommissionedunit_tray::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtCommissionedunit_tray::set_commissionedunituid(const std::string& commissionedunituid) { m_pImp->set_commissionedunituid(commissionedunituid);}

//trayuid
std::string RtCommissionedunit_tray::get_trayuid() const { return m_pImp->get_trayuid();}
void RtCommissionedunit_tray::set_trayuid(const std::string& trayuid) { m_pImp->set_trayuid(trayuid);}

//trayfactor
float RtCommissionedunit_tray::get_trayfactor() const { return m_pImp->get_trayfactor();}
void RtCommissionedunit_tray::set_trayfactor(const float& trayfactor) { m_pImp->set_trayfactor(trayfactor);}

//updatetime
DATETIME_BOOST RtCommissionedunit_tray::get_updatetime() const { return m_pImp->get_updatetime();}
void RtCommissionedunit_tray::set_updatetime(const DATETIME_BOOST& updatetime) { m_pImp->set_updatetime(updatetime);}

RT_TPS_DATABASE_END_NAMESPACE