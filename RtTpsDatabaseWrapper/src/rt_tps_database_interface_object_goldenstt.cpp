//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_goldenstt.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_goldenstt.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtGoldensttImp::RtGoldensttImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_accessoryuid(""),
    m_commissionedunituid(""),
    m_wedgefactor(0.f),
    m_wedgeangle(0.f),
    m_fixjawpos(0.f),
    m_accumulatedmu(""),
    m_correctionfactorpencilbeam(""),
    m_correctionfactorconvolution(""),
    m_correctionfactormontecarlo(""),
    m_movjawpos(""),
    m_exppara(""),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtGoldensttImp::RtGoldensttImp(const RtGoldensttImp& goldenstt):
    m_uid(goldenstt.get_uid()),
    m_accessoryuid(goldenstt.get_accessoryuid()),
    m_commissionedunituid(goldenstt.get_commissionedunituid()),
    m_wedgefactor(goldenstt.get_wedgefactor()),
    m_wedgeangle(goldenstt.get_wedgeangle()),
    m_fixjawpos(goldenstt.get_fixjawpos()),
    m_accumulatedmu(goldenstt.get_accumulatedmu()),
    m_correctionfactorpencilbeam(goldenstt.get_correctionfactorpencilbeam()),
    m_correctionfactorconvolution(goldenstt.get_correctionfactorconvolution()),
    m_correctionfactormontecarlo(goldenstt.get_correctionfactormontecarlo()),
    m_movjawpos(goldenstt.get_movjawpos()),
    m_exppara(goldenstt.get_exppara()),
    m_crc(goldenstt.get_crc()),
    m_updatetime(goldenstt.get_updatetime())
{
}

RtGoldensttImp& RtGoldensttImp::operator=(const RtGoldensttImp& goldenstt)
{
    if (this != &goldenstt){
        this->m_uid = goldenstt.get_uid();
        this->m_accessoryuid = goldenstt.get_accessoryuid();
        this->m_commissionedunituid = goldenstt.get_commissionedunituid();
        this->m_wedgefactor = goldenstt.get_wedgefactor();
        this->m_wedgeangle = goldenstt.get_wedgeangle();
        this->m_fixjawpos = goldenstt.get_fixjawpos();
        this->m_accumulatedmu = goldenstt.get_accumulatedmu();
        this->m_correctionfactorpencilbeam = goldenstt.get_correctionfactorpencilbeam();
        this->m_correctionfactorconvolution = goldenstt.get_correctionfactorconvolution();
        this->m_correctionfactormontecarlo = goldenstt.get_correctionfactormontecarlo();
        this->m_movjawpos = goldenstt.get_movjawpos();
        this->m_exppara = goldenstt.get_exppara();
        this->m_crc = goldenstt.get_crc();
        this->m_updatetime = goldenstt.get_updatetime();
    }
    return *this;
}

RtGoldensttImp::~RtGoldensttImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtGoldenstt::RtGoldenstt(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtGoldensttImp(bGeneraterUid);
    set_flags(GOLDENSTT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_GOLDENSTT_FIELD_NULL);
}

RtGoldenstt::RtGoldenstt(const RtGoldenstt& goldenstt): RtDatabaseObject(goldenstt),
   m_pImp(new RtGoldensttImp(*goldenstt.m_pImp))
{
}

RtGoldenstt& RtGoldenstt::operator = (const RtGoldenstt& goldenstt)
{
    if(this != &goldenstt)
    {
        RtDatabaseObject::operator=(goldenstt);
        *this->m_pImp = *goldenstt.m_pImp;
    }
    return *this;
}

RtGoldenstt::~RtGoldenstt()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtGoldenstt::get_uid() const { return m_pImp->get_uid();}
void RtGoldenstt::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(GOLDENSTT_UID);
    setdirty_field(GOLDENSTT_UID, true);
}

//accessoryuid
std::string RtGoldenstt::get_accessoryuid() const { return m_pImp->get_accessoryuid();}
void RtGoldenstt::set_accessoryuid(const std::string& accessoryuid)
{
    m_pImp->set_accessoryuid(accessoryuid);
    enable_field(GOLDENSTT_ACCESSORYUID);
    setdirty_field(GOLDENSTT_ACCESSORYUID, true);
}

//commissionedunituid
std::string RtGoldenstt::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtGoldenstt::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(GOLDENSTT_COMMISSIONEDUNITUID);
    setdirty_field(GOLDENSTT_COMMISSIONEDUNITUID, true);
}

//wedgefactor
float RtGoldenstt::get_wedgefactor() const { return m_pImp->get_wedgefactor();}
void RtGoldenstt::set_wedgefactor(const float& wedgefactor)
{
    m_pImp->set_wedgefactor(wedgefactor);
    enable_field(GOLDENSTT_WEDGEFACTOR);
    setdirty_field(GOLDENSTT_WEDGEFACTOR, true);
}

//wedgeangle
float RtGoldenstt::get_wedgeangle() const { return m_pImp->get_wedgeangle();}
void RtGoldenstt::set_wedgeangle(const float& wedgeangle)
{
    m_pImp->set_wedgeangle(wedgeangle);
    enable_field(GOLDENSTT_WEDGEANGLE);
    setdirty_field(GOLDENSTT_WEDGEANGLE, true);
}

//fixjawpos
float RtGoldenstt::get_fixjawpos() const { return m_pImp->get_fixjawpos();}
void RtGoldenstt::set_fixjawpos(const float& fixjawpos)
{
    m_pImp->set_fixjawpos(fixjawpos);
    enable_field(GOLDENSTT_FIXJAWPOS);
    setdirty_field(GOLDENSTT_FIXJAWPOS, true);
}

//accumulatedmu
std::string RtGoldenstt::get_accumulatedmu() const { return m_pImp->get_accumulatedmu();}
void RtGoldenstt::set_accumulatedmu(const std::string& accumulatedmu)
{
    m_pImp->set_accumulatedmu(accumulatedmu);
    enable_field(GOLDENSTT_ACCUMULATEDMU);
    setdirty_field(GOLDENSTT_ACCUMULATEDMU, true);
}

//correctionfactorpencilbeam
std::string RtGoldenstt::get_correctionfactorpencilbeam() const { return m_pImp->get_correctionfactorpencilbeam();}
void RtGoldenstt::set_correctionfactorpencilbeam(const std::string& correctionfactorpencilbeam)
{
    m_pImp->set_correctionfactorpencilbeam(correctionfactorpencilbeam);
    enable_field(GOLDENSTT_CORRECTIONFACTORPENCILBEAM);
    setdirty_field(GOLDENSTT_CORRECTIONFACTORPENCILBEAM, true);
}

//correctionfactorconvolution
std::string RtGoldenstt::get_correctionfactorconvolution() const { return m_pImp->get_correctionfactorconvolution();}
void RtGoldenstt::set_correctionfactorconvolution(const std::string& correctionfactorconvolution)
{
    m_pImp->set_correctionfactorconvolution(correctionfactorconvolution);
    enable_field(GOLDENSTT_CORRECTIONFACTORCONVOLUTION);
    setdirty_field(GOLDENSTT_CORRECTIONFACTORCONVOLUTION, true);
}

//correctionfactormontecarlo
std::string RtGoldenstt::get_correctionfactormontecarlo() const { return m_pImp->get_correctionfactormontecarlo();}
void RtGoldenstt::set_correctionfactormontecarlo(const std::string& correctionfactormontecarlo)
{
    m_pImp->set_correctionfactormontecarlo(correctionfactormontecarlo);
    enable_field(GOLDENSTT_CORRECTIONFACTORMONTECARLO);
    setdirty_field(GOLDENSTT_CORRECTIONFACTORMONTECARLO, true);
}

//movjawpos
std::string RtGoldenstt::get_movjawpos() const { return m_pImp->get_movjawpos();}
void RtGoldenstt::set_movjawpos(const std::string& movjawpos)
{
    m_pImp->set_movjawpos(movjawpos);
    enable_field(GOLDENSTT_MOVJAWPOS);
    setdirty_field(GOLDENSTT_MOVJAWPOS, true);
}

//exppara
std::string RtGoldenstt::get_exppara() const { return m_pImp->get_exppara();}
void RtGoldenstt::set_exppara(const std::string& exppara)
{
    m_pImp->set_exppara(exppara);
    enable_field(GOLDENSTT_EXPPARA);
    setdirty_field(GOLDENSTT_EXPPARA, true);
}

//crc
std::string RtGoldenstt::get_crc() const { return m_pImp->get_crc();}
void RtGoldenstt::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(GOLDENSTT_CRC);
    setdirty_field(GOLDENSTT_CRC, true);
}

//updatetime
DATETIME_BOOST RtGoldenstt::get_updatetime() const { return m_pImp->get_updatetime();}
void RtGoldenstt::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(GOLDENSTT_UPDATETIME);
    setdirty_field(GOLDENSTT_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE