//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_tcp.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_tcp.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtTcpImp::RtTcpImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_sitetemplateuid(""),
    m_name(""),
    m_biomodel(""),
    m_d50(0.),
    m_gamma(0.f),
    m_alpha(0.f),
    m_e(0.f),
    m_m(0.f),
    m_n(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtTcpImp::RtTcpImp(const RtTcpImp& tcp):
    m_uid(tcp.get_uid()),
    m_sitetemplateuid(tcp.get_sitetemplateuid()),
    m_name(tcp.get_name()),
    m_biomodel(tcp.get_biomodel()),
    m_d50(tcp.get_d50()),
    m_gamma(tcp.get_gamma()),
    m_alpha(tcp.get_alpha()),
    m_e(tcp.get_e()),
    m_m(tcp.get_m()),
    m_n(tcp.get_n()),
    m_updatetime(tcp.get_updatetime())
{
}

RtTcpImp& RtTcpImp::operator=(const RtTcpImp& tcp)
{
    if (this != &tcp){
        this->m_uid = tcp.get_uid();
        this->m_sitetemplateuid = tcp.get_sitetemplateuid();
        this->m_name = tcp.get_name();
        this->m_biomodel = tcp.get_biomodel();
        this->m_d50 = tcp.get_d50();
        this->m_gamma = tcp.get_gamma();
        this->m_alpha = tcp.get_alpha();
        this->m_e = tcp.get_e();
        this->m_m = tcp.get_m();
        this->m_n = tcp.get_n();
        this->m_updatetime = tcp.get_updatetime();
    }
    return *this;
}

RtTcpImp::~RtTcpImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtTcp::RtTcp(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtTcpImp(bGeneraterUid);
    set_flags(TCP_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_TCP_FIELD_NULL);
}

RtTcp::RtTcp(const RtTcp& tcp): RtDatabaseObject(tcp),
   m_pImp(new RtTcpImp(*tcp.m_pImp))
{
}

RtTcp& RtTcp::operator = (const RtTcp& tcp)
{
    if(this != &tcp)
    {
        RtDatabaseObject::operator=(tcp);
        *this->m_pImp = *tcp.m_pImp;
    }
    return *this;
}

RtTcp::~RtTcp()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtTcp::get_uid() const { return m_pImp->get_uid();}
void RtTcp::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(TCP_UID);
    setdirty_field(TCP_UID, true);
}

//sitetemplateuid
std::string RtTcp::get_sitetemplateuid() const { return m_pImp->get_sitetemplateuid();}
void RtTcp::set_sitetemplateuid(const std::string& sitetemplateuid)
{
    m_pImp->set_sitetemplateuid(sitetemplateuid);
    enable_field(TCP_SITETEMPLATEUID);
    setdirty_field(TCP_SITETEMPLATEUID, true);
}

//name
std::string RtTcp::get_name() const { return m_pImp->get_name();}
void RtTcp::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(TCP_NAME);
    setdirty_field(TCP_NAME, true);
}

//biomodel
std::string RtTcp::get_biomodel() const { return m_pImp->get_biomodel();}
void RtTcp::set_biomodel(const std::string& biomodel)
{
    m_pImp->set_biomodel(biomodel);
    enable_field(TCP_BIOMODEL);
    setdirty_field(TCP_BIOMODEL, true);
}

//d50
double RtTcp::get_d50() const { return m_pImp->get_d50();}
void RtTcp::set_d50(const double& d50)
{
    m_pImp->set_d50(d50);
    enable_field(TCP_D50);
    setdirty_field(TCP_D50, true);
}

//gamma
float RtTcp::get_gamma() const { return m_pImp->get_gamma();}
void RtTcp::set_gamma(const float& gamma)
{
    m_pImp->set_gamma(gamma);
    enable_field(TCP_GAMMA);
    setdirty_field(TCP_GAMMA, true);
}

//alpha
float RtTcp::get_alpha() const { return m_pImp->get_alpha();}
void RtTcp::set_alpha(const float& alpha)
{
    m_pImp->set_alpha(alpha);
    enable_field(TCP_ALPHA);
    setdirty_field(TCP_ALPHA, true);
}

//e
float RtTcp::get_e() const { return m_pImp->get_e();}
void RtTcp::set_e(const float& e)
{
    m_pImp->set_e(e);
    enable_field(TCP_E);
    setdirty_field(TCP_E, true);
}

//m
float RtTcp::get_m() const { return m_pImp->get_m();}
void RtTcp::set_m(const float& m)
{
    m_pImp->set_m(m);
    enable_field(TCP_M);
    setdirty_field(TCP_M, true);
}

//n
float RtTcp::get_n() const { return m_pImp->get_n();}
void RtTcp::set_n(const float& n)
{
    m_pImp->set_n(n);
    enable_field(TCP_N);
    setdirty_field(TCP_N, true);
}

//updatetime
DATETIME_BOOST RtTcp::get_updatetime() const { return m_pImp->get_updatetime();}
void RtTcp::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(TCP_UPDATETIME);
    setdirty_field(TCP_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE