//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_applicator.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_applicator.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtApplicatorImp::RtApplicatorImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_machineuid(""),
    m_name(""),
    m_sourcetobottomdistance(0.f),
    m_applicatorid(""),
    m_applicatortype(0),
    m_applicatorapertureshape(0),
    m_applicatoropening(0.f),
    m_applicatoropeningx(0.f),
    m_applicatoropeningy(0.f),
    m_applicatordescription(""),
    m_mlcdirectiontype(0),
    m_jawxissymmetry(false),
    m_jawyissymmetry(false),
    m_xupperjawpos(0.),
    m_xlowerjawpos(0.),
    m_yupperjawpos(0.),
    m_ylowerjawpos(0.),
    m_accuracy(0),
    m_isstartmlcshape(false),
    m_code(""),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtApplicatorImp::RtApplicatorImp(const RtApplicatorImp& applicator):
    m_uid(applicator.get_uid()),
    m_machineuid(applicator.get_machineuid()),
    m_name(applicator.get_name()),
    m_sourcetobottomdistance(applicator.get_sourcetobottomdistance()),
    m_applicatorid(applicator.get_applicatorid()),
    m_applicatortype(applicator.get_applicatortype()),
    m_applicatorapertureshape(applicator.get_applicatorapertureshape()),
    m_applicatoropening(applicator.get_applicatoropening()),
    m_applicatoropeningx(applicator.get_applicatoropeningx()),
    m_applicatoropeningy(applicator.get_applicatoropeningy()),
    m_applicatordescription(applicator.get_applicatordescription()),
    m_mlcdirectiontype(applicator.get_mlcdirectiontype()),
    m_jawxissymmetry(applicator.get_jawxissymmetry()),
    m_jawyissymmetry(applicator.get_jawyissymmetry()),
    m_xupperjawpos(applicator.get_xupperjawpos()),
    m_xlowerjawpos(applicator.get_xlowerjawpos()),
    m_yupperjawpos(applicator.get_yupperjawpos()),
    m_ylowerjawpos(applicator.get_ylowerjawpos()),
    m_accuracy(applicator.get_accuracy()),
    m_leafpositions(applicator.get_leafpositions()),
    m_isstartmlcshape(applicator.get_isstartmlcshape()),
    m_code(applicator.get_code()),
    m_crc(applicator.get_crc()),
    m_updatetime(applicator.get_updatetime())
{
}

RtApplicatorImp& RtApplicatorImp::operator=(const RtApplicatorImp& applicator)
{
    if (this != &applicator){
        this->m_uid = applicator.get_uid();
        this->m_machineuid = applicator.get_machineuid();
        this->m_name = applicator.get_name();
        this->m_sourcetobottomdistance = applicator.get_sourcetobottomdistance();
        this->m_applicatorid = applicator.get_applicatorid();
        this->m_applicatortype = applicator.get_applicatortype();
        this->m_applicatorapertureshape = applicator.get_applicatorapertureshape();
        this->m_applicatoropening = applicator.get_applicatoropening();
        this->m_applicatoropeningx = applicator.get_applicatoropeningx();
        this->m_applicatoropeningy = applicator.get_applicatoropeningy();
        this->m_applicatordescription = applicator.get_applicatordescription();
        this->m_mlcdirectiontype = applicator.get_mlcdirectiontype();
        this->m_jawxissymmetry = applicator.get_jawxissymmetry();
        this->m_jawyissymmetry = applicator.get_jawyissymmetry();
        this->m_xupperjawpos = applicator.get_xupperjawpos();
        this->m_xlowerjawpos = applicator.get_xlowerjawpos();
        this->m_yupperjawpos = applicator.get_yupperjawpos();
        this->m_ylowerjawpos = applicator.get_ylowerjawpos();
        this->m_accuracy = applicator.get_accuracy();
        this->m_leafpositions = applicator.get_leafpositions();
        this->m_isstartmlcshape = applicator.get_isstartmlcshape();
        this->m_code = applicator.get_code();
        this->m_crc = applicator.get_crc();
        this->m_updatetime = applicator.get_updatetime();
    }
    return *this;
}

RtApplicatorImp::~RtApplicatorImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtApplicator::RtApplicator(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtApplicatorImp(bGeneraterUid);
    set_flags(APPLICATOR_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_APPLICATOR_FIELD_NULL);
}

RtApplicator::RtApplicator(const RtApplicator& applicator): RtDatabaseObject(applicator),
   m_pImp(new RtApplicatorImp(*applicator.m_pImp))
{
}

RtApplicator& RtApplicator::operator = (const RtApplicator& applicator)
{
    if(this != &applicator)
    {
        RtDatabaseObject::operator=(applicator);
        *this->m_pImp = *applicator.m_pImp;
    }
    return *this;
}

RtApplicator::~RtApplicator()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtApplicator::get_uid() const { return m_pImp->get_uid();}
void RtApplicator::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(APPLICATOR_UID);
    setdirty_field(APPLICATOR_UID, true);
}

//machineuid
std::string RtApplicator::get_machineuid() const { return m_pImp->get_machineuid();}
void RtApplicator::set_machineuid(const std::string& machineuid)
{
    m_pImp->set_machineuid(machineuid);
    enable_field(APPLICATOR_MACHINEUID);
    setdirty_field(APPLICATOR_MACHINEUID, true);
}

//name
std::string RtApplicator::get_name() const { return m_pImp->get_name();}
void RtApplicator::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(APPLICATOR_NAME);
    setdirty_field(APPLICATOR_NAME, true);
}

//sourcetobottomdistance
float RtApplicator::get_sourcetobottomdistance() const { return m_pImp->get_sourcetobottomdistance();}
void RtApplicator::set_sourcetobottomdistance(const float& sourcetobottomdistance)
{
    m_pImp->set_sourcetobottomdistance(sourcetobottomdistance);
    enable_field(APPLICATOR_SOURCETOBOTTOMDISTANCE);
    setdirty_field(APPLICATOR_SOURCETOBOTTOMDISTANCE, true);
}

//applicatorid
std::string RtApplicator::get_applicatorid() const { return m_pImp->get_applicatorid();}
void RtApplicator::set_applicatorid(const std::string& applicatorid)
{
    m_pImp->set_applicatorid(applicatorid);
    enable_field(APPLICATOR_APPLICATORID);
    setdirty_field(APPLICATOR_APPLICATORID, true);
}

//applicatortype
int RtApplicator::get_applicatortype() const { return m_pImp->get_applicatortype();}
void RtApplicator::set_applicatortype(const int& applicatortype)
{
    m_pImp->set_applicatortype(applicatortype);
    enable_field(APPLICATOR_APPLICATORTYPE);
    setdirty_field(APPLICATOR_APPLICATORTYPE, true);
}

//applicatorapertureshape
int RtApplicator::get_applicatorapertureshape() const { return m_pImp->get_applicatorapertureshape();}
void RtApplicator::set_applicatorapertureshape(const int& applicatorapertureshape)
{
    m_pImp->set_applicatorapertureshape(applicatorapertureshape);
    enable_field(APPLICATOR_APPLICATORAPERTURESHAPE);
    setdirty_field(APPLICATOR_APPLICATORAPERTURESHAPE, true);
}

//applicatoropening
float RtApplicator::get_applicatoropening() const { return m_pImp->get_applicatoropening();}
void RtApplicator::set_applicatoropening(const float& applicatoropening)
{
    m_pImp->set_applicatoropening(applicatoropening);
    enable_field(APPLICATOR_APPLICATOROPENING);
    setdirty_field(APPLICATOR_APPLICATOROPENING, true);
}

//applicatoropeningx
float RtApplicator::get_applicatoropeningx() const { return m_pImp->get_applicatoropeningx();}
void RtApplicator::set_applicatoropeningx(const float& applicatoropeningx)
{
    m_pImp->set_applicatoropeningx(applicatoropeningx);
    enable_field(APPLICATOR_APPLICATOROPENINGX);
    setdirty_field(APPLICATOR_APPLICATOROPENINGX, true);
}

//applicatoropeningy
float RtApplicator::get_applicatoropeningy() const { return m_pImp->get_applicatoropeningy();}
void RtApplicator::set_applicatoropeningy(const float& applicatoropeningy)
{
    m_pImp->set_applicatoropeningy(applicatoropeningy);
    enable_field(APPLICATOR_APPLICATOROPENINGY);
    setdirty_field(APPLICATOR_APPLICATOROPENINGY, true);
}

//applicatordescription
std::string RtApplicator::get_applicatordescription() const { return m_pImp->get_applicatordescription();}
void RtApplicator::set_applicatordescription(const std::string& applicatordescription)
{
    m_pImp->set_applicatordescription(applicatordescription);
    enable_field(APPLICATOR_APPLICATORDESCRIPTION);
    setdirty_field(APPLICATOR_APPLICATORDESCRIPTION, true);
}

//mlcdirectiontype
int RtApplicator::get_mlcdirectiontype() const { return m_pImp->get_mlcdirectiontype();}
void RtApplicator::set_mlcdirectiontype(const int& mlcdirectiontype)
{
    m_pImp->set_mlcdirectiontype(mlcdirectiontype);
    enable_field(APPLICATOR_MLCDIRECTIONTYPE);
    setdirty_field(APPLICATOR_MLCDIRECTIONTYPE, true);
}

//jawxissymmetry
bool RtApplicator::get_jawxissymmetry() const { return m_pImp->get_jawxissymmetry();}
void RtApplicator::set_jawxissymmetry(const bool& jawxissymmetry)
{
    m_pImp->set_jawxissymmetry(jawxissymmetry);
    enable_field(APPLICATOR_JAWXISSYMMETRY);
    setdirty_field(APPLICATOR_JAWXISSYMMETRY, true);
}

//jawyissymmetry
bool RtApplicator::get_jawyissymmetry() const { return m_pImp->get_jawyissymmetry();}
void RtApplicator::set_jawyissymmetry(const bool& jawyissymmetry)
{
    m_pImp->set_jawyissymmetry(jawyissymmetry);
    enable_field(APPLICATOR_JAWYISSYMMETRY);
    setdirty_field(APPLICATOR_JAWYISSYMMETRY, true);
}

//xupperjawpos
double RtApplicator::get_xupperjawpos() const { return m_pImp->get_xupperjawpos();}
void RtApplicator::set_xupperjawpos(const double& xupperjawpos)
{
    m_pImp->set_xupperjawpos(xupperjawpos);
    enable_field(APPLICATOR_XUPPERJAWPOS);
    setdirty_field(APPLICATOR_XUPPERJAWPOS, true);
}

//xlowerjawpos
double RtApplicator::get_xlowerjawpos() const { return m_pImp->get_xlowerjawpos();}
void RtApplicator::set_xlowerjawpos(const double& xlowerjawpos)
{
    m_pImp->set_xlowerjawpos(xlowerjawpos);
    enable_field(APPLICATOR_XLOWERJAWPOS);
    setdirty_field(APPLICATOR_XLOWERJAWPOS, true);
}

//yupperjawpos
double RtApplicator::get_yupperjawpos() const { return m_pImp->get_yupperjawpos();}
void RtApplicator::set_yupperjawpos(const double& yupperjawpos)
{
    m_pImp->set_yupperjawpos(yupperjawpos);
    enable_field(APPLICATOR_YUPPERJAWPOS);
    setdirty_field(APPLICATOR_YUPPERJAWPOS, true);
}

//ylowerjawpos
double RtApplicator::get_ylowerjawpos() const { return m_pImp->get_ylowerjawpos();}
void RtApplicator::set_ylowerjawpos(const double& ylowerjawpos)
{
    m_pImp->set_ylowerjawpos(ylowerjawpos);
    enable_field(APPLICATOR_YLOWERJAWPOS);
    setdirty_field(APPLICATOR_YLOWERJAWPOS, true);
}

//accuracy
int RtApplicator::get_accuracy() const { return m_pImp->get_accuracy();}
void RtApplicator::set_accuracy(const int& accuracy)
{
    m_pImp->set_accuracy(accuracy);
    enable_field(APPLICATOR_ACCURACY);
    setdirty_field(APPLICATOR_ACCURACY, true);
}

//leafpositions
//dLeafLowerPos dLeafUpperPos
std::vector<db_Point2d> RtApplicator::get_leafpositions() const { return m_pImp->get_leafpositions();}
std::vector<db_Point2d> RtApplicator::get_leafpositions() { return m_pImp->get_leafpositions();}
void RtApplicator::set_leafpositions(const std::vector<db_Point2d>& vLeafPos) { m_pImp->set_leafpositions(vLeafPos);}

//isstartmlcshape
bool RtApplicator::get_isstartmlcshape() const { return m_pImp->get_isstartmlcshape();}
void RtApplicator::set_isstartmlcshape(const bool& isstartmlcshape)
{
    m_pImp->set_isstartmlcshape(isstartmlcshape);
    enable_field(APPLICATOR_ISSTARTMLCSHAPE);
    setdirty_field(APPLICATOR_ISSTARTMLCSHAPE, true);
}

//code
std::string RtApplicator::get_code() const { return m_pImp->get_code();}
void RtApplicator::set_code(const std::string& code)
{
    m_pImp->set_code(code);
    enable_field(APPLICATOR_CODE);
    setdirty_field(APPLICATOR_CODE, true);
}

//crc
std::string RtApplicator::get_crc() const { return m_pImp->get_crc();}
void RtApplicator::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(APPLICATOR_CRC);
    setdirty_field(APPLICATOR_CRC, true);
}

//updatetime
DATETIME_BOOST RtApplicator::get_updatetime() const { return m_pImp->get_updatetime();}
void RtApplicator::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(APPLICATOR_UPDATETIME);
    setdirty_field(APPLICATOR_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE