//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_globalconfig.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_globalconfig.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtGlobalconfigImp::RtGlobalconfigImp():
    m_name(""),
    m_valuefilepath(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
}

RtGlobalconfigImp::RtGlobalconfigImp(const RtGlobalconfigImp& globalconfig):
    m_name(globalconfig.get_name()),
    m_valuefilepath(globalconfig.get_valuefilepath()),
    m_updatetime(globalconfig.get_updatetime())
{
}

RtGlobalconfigImp& RtGlobalconfigImp::operator=(const RtGlobalconfigImp& globalconfig)
{
    if (this != &globalconfig){
        this->m_name = globalconfig.get_name();
        this->m_valuefilepath = globalconfig.get_valuefilepath();
        this->m_updatetime = globalconfig.get_updatetime();
    }
    return *this;
}

RtGlobalconfigImp::~RtGlobalconfigImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtGlobalconfig::RtGlobalconfig()
{
    m_pImp = new RtGlobalconfigImp();
    set_flags(GLOBALCONFIG_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_GLOBALCONFIG_FIELD_NULL);
}

RtGlobalconfig::RtGlobalconfig(const RtGlobalconfig& globalconfig): RtDatabaseObject(globalconfig),
   m_pImp(new RtGlobalconfigImp(*globalconfig.m_pImp))
{
}

RtGlobalconfig& RtGlobalconfig::operator = (const RtGlobalconfig& globalconfig)
{
    if(this != &globalconfig)
    {
        RtDatabaseObject::operator=(globalconfig);
        *this->m_pImp = *globalconfig.m_pImp;
    }
    return *this;
}

RtGlobalconfig::~RtGlobalconfig()
{
    DEL_PTR(m_pImp);
}

//name
std::string RtGlobalconfig::get_name() const { return m_pImp->get_name();}
void RtGlobalconfig::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(GLOBALCONFIG_NAME);
    setdirty_field(GLOBALCONFIG_NAME, true);
}

//valuefilepath
std::string RtGlobalconfig::get_valuefilepath() const { return m_pImp->get_valuefilepath();}
void RtGlobalconfig::set_valuefilepath(const std::string& valuefilepath)
{
    m_pImp->set_valuefilepath(valuefilepath);
    enable_field(GLOBALCONFIG_VALUEFILEPATH);
    setdirty_field(GLOBALCONFIG_VALUEFILEPATH, true);
}

//updatetime
DATETIME_BOOST RtGlobalconfig::get_updatetime() const { return m_pImp->get_updatetime();}
void RtGlobalconfig::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(GLOBALCONFIG_UPDATETIME);
    setdirty_field(GLOBALCONFIG_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE