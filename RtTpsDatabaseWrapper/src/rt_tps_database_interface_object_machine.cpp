//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_machine.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.5
///
///  \version 1.0
///  \date    4/18/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_machine.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtMachineImp::RtMachineImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_name(""),
    m_type(""),
    m_manufacturer(""),
    m_gantrymax(0.),
    m_gantrymin(0.),
    m_sad(0.),
    m_tablelateralmax(0.),
    m_tablelateralmin(0.),
    m_tablelongitudinalmax(0.),
    m_tablelongitudinalmin(0.),
    m_tableverticalmax(0.),
    m_tableverticalmin(0.),
    m_tableanglemax(0.),
    m_tableanglemin(0.),
    m_collimatordirection(0),
    m_mlcdirectiontype(0),
    m_jawxissymmetry(false),
    m_jawyissymmetry(false),
    m_xjawnum(0),
    m_yjawnum(0),
    m_leafnum(0),
    m_negativeleafrangemin(0.),
    m_negativeleafrangemax(0.),
    m_positiveleafrangemin(0.),
    m_positiveleafrangemax(0.),
    m_isinterdigitation(false),
    m_leafspan(0.f),
    m_minleafendgap(0.f),
    m_sdd(0.f),
    m_sourcetobeamlimitingdevicedistance(0.f),
    m_xindependent(0),
    m_xmin_1(0.f),
    m_xmax_1(0.f),
    m_xmin_2(0.f),
    m_xmax_2(0.f),
    m_xmin_w(0.f),
    m_xmax_w(0.f),
    m_xsdd(0.f),
    m_xname_1(""),
    m_xname_2(""),
    m_xisxjawlimit(false),
    m_yindependent(0),
    m_ymin_1(0.f),
    m_ymax_1(0.f),
    m_ymin_2(0.f),
    m_ymax_2(0.f),
    m_ymin_w(0.f),
    m_ymax_w(0.f),
    m_ysdd(0.f),
    m_yname_1(""),
    m_yname_2(""),
    m_yisxjawlimit(false),
    m_maximumgantryspeed_degreepersecond(0.f),
    m_maximumleafspeed_mmpersecond(0.f),
    m_deviceid(""),
    m_comments(""),
    m_collimatoranglemin(0.),
    m_collimatoranglemax(0.),
    m_gantryclockwiserange(0.),
    m_gantrycounterclockwiserange(0.),
    m_availableplantype(""),
    m_maximumjawspeed_mmpersecond(0.f),
    m_minimumjawgap(0.f),
    m_dynamictrackingjawx(false),
    m_dynamictrackingjawy(false),
    m_sourcetomlctopdistance(0.f),
    m_jawtrackinggap(0.f),
    m_supportapetureblock(false),
    m_supportshieldblock(false),
    m_sourcetoblocktraydistance(0.f),
    m_blockheight(0.f),
    m_maxpatientperhour(0),
    m_blockthickness(0.f),
    m_sourcetowedgetopdistance(0.f),
    m_sourcetoapplicatordistance(0.f),
    m_crc(""),
    m_state(0),
    m_forcejawfollow(false),
    m_inactivereason(""),
    m_inactivetime(boost::date_time::not_a_date_time),
    m_inactiveuser(""),
    m_updatetime(boost::date_time::not_a_date_time),
	m_mingantryspeed_degreepersecond(0.f),
    m_maxleafacc_mmpersec2(0.f),
	m_crc_valid(false)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtMachineImp::RtMachineImp(const RtMachineImp& machine):
    m_uid(machine.get_uid()),
    m_name(machine.get_name()),
    m_type(machine.get_type()),
    m_manufacturer(machine.get_manufacturer()),
    m_gantrymax(machine.get_gantrymax()),
    m_gantrymin(machine.get_gantrymin()),
    m_sad(machine.get_sad()),
    m_tablelateralmax(machine.get_tablelateralmax()),
    m_tablelateralmin(machine.get_tablelateralmin()),
    m_tablelongitudinalmax(machine.get_tablelongitudinalmax()),
    m_tablelongitudinalmin(machine.get_tablelongitudinalmin()),
    m_tableverticalmax(machine.get_tableverticalmax()),
    m_tableverticalmin(machine.get_tableverticalmin()),
    m_tableanglemax(machine.get_tableanglemax()),
    m_tableanglemin(machine.get_tableanglemin()),
    m_collimatordirection(machine.get_collimatordirection()),
    m_mlcdirectiontype(machine.get_mlcdirectiontype()),
    m_jawxissymmetry(machine.get_jawxissymmetry()),
    m_jawyissymmetry(machine.get_jawyissymmetry()),
    m_xjawnum(machine.get_xjawnum()),
    m_yjawnum(machine.get_yjawnum()),
    m_leafnum(machine.get_leafnum()),
    m_leafboundaries(machine.get_leafboundaries()),
    m_leafboundaries_list(machine.get_leafboundaries_list()),
    m_negativeleafrangemin(machine.get_negativeleafrangemin()),
    m_negativeleafrangemax(machine.get_negativeleafrangemax()),
    m_positiveleafrangemin(machine.get_positiveleafrangemin()),
    m_positiveleafrangemax(machine.get_positiveleafrangemax()),
    m_isinterdigitation(machine.get_isinterdigitation()),
    m_leafspan(machine.get_leafspan()),
    m_minleafendgap(machine.get_minleafendgap()),
    m_sdd(machine.get_sdd()),
    m_sourcetobeamlimitingdevicedistance(machine.get_sourcetobeamlimitingdevicedistance()),
    m_xindependent(machine.get_xindependent()),
    m_xmin_1(machine.get_xmin_1()),
    m_xmax_1(machine.get_xmax_1()),
    m_xmin_2(machine.get_xmin_2()),
    m_xmax_2(machine.get_xmax_2()),
    m_xmin_w(machine.get_xmin_w()),
    m_xmax_w(machine.get_xmax_w()),
    m_xsdd(machine.get_xsdd()),
    m_xname_1(machine.get_xname_1()),
    m_xname_2(machine.get_xname_2()),
    m_xisxjawlimit(machine.get_xisxjawlimit()),
    m_yindependent(machine.get_yindependent()),
    m_ymin_1(machine.get_ymin_1()),
    m_ymax_1(machine.get_ymax_1()),
    m_ymin_2(machine.get_ymin_2()),
    m_ymax_2(machine.get_ymax_2()),
    m_ymin_w(machine.get_ymin_w()),
    m_ymax_w(machine.get_ymax_w()),
    m_ysdd(machine.get_ysdd()),
    m_yname_1(machine.get_yname_1()),
    m_yname_2(machine.get_yname_2()),
    m_yisxjawlimit(machine.get_yisxjawlimit()),
    m_maximumgantryspeed_degreepersecond(machine.get_maximumgantryspeed_degreepersecond()),
    m_maximumleafspeed_mmpersecond(machine.get_maximumleafspeed_mmpersecond()),
    m_deviceid(machine.get_deviceid()),
    m_comments(machine.get_comments()),
    m_collimatoranglemin(machine.get_collimatoranglemin()),
    m_collimatoranglemax(machine.get_collimatoranglemax()),
    m_gantryclockwiserange(machine.get_gantryclockwiserange()),
    m_gantrycounterclockwiserange(machine.get_gantrycounterclockwiserange()),
    m_availableplantype(machine.get_availableplantype()),
    m_maximumjawspeed_mmpersecond(machine.get_maximumjawspeed_mmpersecond()),
    m_minimumjawgap(machine.get_minimumjawgap()),
    m_dynamictrackingjawx(machine.get_dynamictrackingjawx()),
    m_dynamictrackingjawy(machine.get_dynamictrackingjawy()),
    m_sourcetomlctopdistance(machine.get_sourcetomlctopdistance()),
    m_jawtrackinggap(machine.get_jawtrackinggap()),
    m_supportapetureblock(machine.get_supportapetureblock()),
    m_supportshieldblock(machine.get_supportshieldblock()),
    m_sourcetoblocktraydistance(machine.get_sourcetoblocktraydistance()),
    m_blockheight(machine.get_blockheight()),
    m_maxpatientperhour(machine.get_maxpatientperhour()),
    m_blockthickness(machine.get_blockthickness()),
    m_sourcetowedgetopdistance(machine.get_sourcetowedgetopdistance()),
    m_sourcetoapplicatordistance(machine.get_sourcetoapplicatordistance()),
    m_crc(machine.get_crc()),
    m_state(machine.get_state()),
    m_forcejawfollow(machine.get_forcejawfollow()),
    m_inactivereason(machine.get_inactivereason()),
    m_inactivetime(machine.get_inactivetime()),
    m_inactiveuser(machine.get_inactiveuser()),
    m_updatetime(machine.get_updatetime()),
	m_mingantryspeed_degreepersecond(machine.get_mingantryspeed_degreepersecond()),
    m_maxleafacc_mmpersec2(machine.get_maxleafacc_mmpersec2()),
	m_crc_valid(machine.get_crc_valid())
{
}

RtMachineImp& RtMachineImp::operator=(const RtMachineImp& machine)
{
    if (this != &machine){
        this->m_uid = machine.get_uid();
        this->m_name = machine.get_name();
        this->m_type = machine.get_type();
        this->m_manufacturer = machine.get_manufacturer();
        this->m_gantrymax = machine.get_gantrymax();
        this->m_gantrymin = machine.get_gantrymin();
        this->m_sad = machine.get_sad();
        this->m_tablelateralmax = machine.get_tablelateralmax();
        this->m_tablelateralmin = machine.get_tablelateralmin();
        this->m_tablelongitudinalmax = machine.get_tablelongitudinalmax();
        this->m_tablelongitudinalmin = machine.get_tablelongitudinalmin();
        this->m_tableverticalmax = machine.get_tableverticalmax();
        this->m_tableverticalmin = machine.get_tableverticalmin();
        this->m_tableanglemax = machine.get_tableanglemax();
        this->m_tableanglemin = machine.get_tableanglemin();
        this->m_collimatordirection = machine.get_collimatordirection();
        this->m_mlcdirectiontype = machine.get_mlcdirectiontype();
        this->m_jawxissymmetry = machine.get_jawxissymmetry();
        this->m_jawyissymmetry = machine.get_jawyissymmetry();
        this->m_xjawnum = machine.get_xjawnum();
        this->m_yjawnum = machine.get_yjawnum();
        this->m_leafnum = machine.get_leafnum();
        this->m_leafboundaries = machine.get_leafboundaries();
        this->m_leafboundaries_list = machine.get_leafboundaries_list();

        this->m_negativeleafrangemin = machine.get_negativeleafrangemin();
        this->m_negativeleafrangemax = machine.get_negativeleafrangemax();
        this->m_positiveleafrangemin = machine.get_positiveleafrangemin();
        this->m_positiveleafrangemax = machine.get_positiveleafrangemax();
        this->m_isinterdigitation = machine.get_isinterdigitation();
        this->m_leafspan = machine.get_leafspan();
        this->m_minleafendgap = machine.get_minleafendgap();
        this->m_sdd = machine.get_sdd();
        this->m_sourcetobeamlimitingdevicedistance = machine.get_sourcetobeamlimitingdevicedistance();
        this->m_xindependent = machine.get_xindependent();
        this->m_xmin_1 = machine.get_xmin_1();
        this->m_xmax_1 = machine.get_xmax_1();
        this->m_xmin_2 = machine.get_xmin_2();
        this->m_xmax_2 = machine.get_xmax_2();
        this->m_xmin_w = machine.get_xmin_w();
        this->m_xmax_w = machine.get_xmax_w();
        this->m_xsdd = machine.get_xsdd();
        this->m_xname_1 = machine.get_xname_1();
        this->m_xname_2 = machine.get_xname_2();
        this->m_xisxjawlimit = machine.get_xisxjawlimit();
        this->m_yindependent = machine.get_yindependent();
        this->m_ymin_1 = machine.get_ymin_1();
        this->m_ymax_1 = machine.get_ymax_1();
        this->m_ymin_2 = machine.get_ymin_2();
        this->m_ymax_2 = machine.get_ymax_2();
        this->m_ymin_w = machine.get_ymin_w();
        this->m_ymax_w = machine.get_ymax_w();
        this->m_ysdd = machine.get_ysdd();
        this->m_yname_1 = machine.get_yname_1();
        this->m_yname_2 = machine.get_yname_2();
        this->m_yisxjawlimit = machine.get_yisxjawlimit();
        this->m_maximumgantryspeed_degreepersecond = machine.get_maximumgantryspeed_degreepersecond();
        this->m_maximumleafspeed_mmpersecond = machine.get_maximumleafspeed_mmpersecond();
        this->m_deviceid = machine.get_deviceid();
        this->m_comments = machine.get_comments();
        this->m_collimatoranglemin = machine.get_collimatoranglemin();
        this->m_collimatoranglemax = machine.get_collimatoranglemax();
        this->m_gantryclockwiserange = machine.get_gantryclockwiserange();
        this->m_gantrycounterclockwiserange = machine.get_gantrycounterclockwiserange();
        this->m_availableplantype = machine.get_availableplantype();
        this->m_maximumjawspeed_mmpersecond = machine.get_maximumjawspeed_mmpersecond();
        this->m_minimumjawgap = machine.get_minimumjawgap();
        this->m_dynamictrackingjawx = machine.get_dynamictrackingjawx();
        this->m_dynamictrackingjawy = machine.get_dynamictrackingjawy();
        this->m_sourcetomlctopdistance = machine.get_sourcetomlctopdistance();
        this->m_jawtrackinggap = machine.get_jawtrackinggap();
        this->m_supportapetureblock = machine.get_supportapetureblock();
        this->m_supportshieldblock = machine.get_supportshieldblock();
        this->m_sourcetoblocktraydistance = machine.get_sourcetoblocktraydistance();
        this->m_blockheight = machine.get_blockheight();
        this->m_maxpatientperhour = machine.get_maxpatientperhour();
        this->m_blockthickness = machine.get_blockthickness();
        this->m_sourcetowedgetopdistance = machine.get_sourcetowedgetopdistance();
        this->m_sourcetoapplicatordistance = machine.get_sourcetoapplicatordistance();
        this->m_crc = machine.get_crc();
        this->m_state = machine.get_state();
        this->m_forcejawfollow = machine.get_forcejawfollow();
        this->m_inactivereason = machine.get_inactivereason();
        this->m_inactivetime = machine.get_inactivetime();
        this->m_inactiveuser = machine.get_inactiveuser();
        this->m_updatetime = machine.get_updatetime();
		this->m_mingantryspeed_degreepersecond = machine.get_mingantryspeed_degreepersecond();
        this->m_maxleafacc_mmpersec2 = machine.get_maxleafacc_mmpersec2();
        this->m_crc_valid = machine.get_crc_valid();
    }
    return *this;
}

RtMachineImp::~RtMachineImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtMachine::RtMachine(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtMachineImp(bGeneraterUid);
    set_flags(MACHINE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_MACHINE_FIELD_NULL);
}

RtMachine::RtMachine(const RtMachine& machine): RtDatabaseObject(machine),
   m_pImp(new RtMachineImp(*machine.m_pImp))
{
}

RtMachine& RtMachine::operator = (const RtMachine& machine)
{
    if(this != &machine)
    {
        RtDatabaseObject::operator=(machine);
        *this->m_pImp = *machine.m_pImp;
    }
    return *this;
}

RtMachine::~RtMachine()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtMachine::get_uid() const { return m_pImp->get_uid();}
void RtMachine::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(MACHINE_UID);
    setdirty_field(MACHINE_UID, true);
}

//name
std::string RtMachine::get_name() const { return m_pImp->get_name();}
void RtMachine::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(MACHINE_NAME);
    setdirty_field(MACHINE_NAME, true);
}

//type
std::string RtMachine::get_type() const { return m_pImp->get_type();}
void RtMachine::set_type(const std::string& type)
{
    m_pImp->set_type(type);
    enable_field(MACHINE_TYPE);
    setdirty_field(MACHINE_TYPE, true);
}

//manufacturer
std::string RtMachine::get_manufacturer() const { return m_pImp->get_manufacturer();}
void RtMachine::set_manufacturer(const std::string& manufacturer)
{
    m_pImp->set_manufacturer(manufacturer);
    enable_field(MACHINE_MANUFACTURER);
    setdirty_field(MACHINE_MANUFACTURER, true);
}

//gantrymax
double RtMachine::get_gantrymax() const { return m_pImp->get_gantrymax();}
void RtMachine::set_gantrymax(const double& gantrymax)
{
    m_pImp->set_gantrymax(gantrymax);
    enable_field(MACHINE_GANTRYMAX);
    setdirty_field(MACHINE_GANTRYMAX, true);
}

//gantrymin
double RtMachine::get_gantrymin() const { return m_pImp->get_gantrymin();}
void RtMachine::set_gantrymin(const double& gantrymin)
{
    m_pImp->set_gantrymin(gantrymin);
    enable_field(MACHINE_GANTRYMIN);
    setdirty_field(MACHINE_GANTRYMIN, true);
}

//sad
double RtMachine::get_sad() const { return m_pImp->get_sad();}
void RtMachine::set_sad(const double& sad)
{
    m_pImp->set_sad(sad);
    enable_field(MACHINE_SAD);
    setdirty_field(MACHINE_SAD, true);
}

//tablelateralmax
double RtMachine::get_tablelateralmax() const { return m_pImp->get_tablelateralmax();}
void RtMachine::set_tablelateralmax(const double& tablelateralmax)
{
    m_pImp->set_tablelateralmax(tablelateralmax);
    enable_field(MACHINE_TABLELATERALMAX);
    setdirty_field(MACHINE_TABLELATERALMAX, true);
}

//tablelateralmin
double RtMachine::get_tablelateralmin() const { return m_pImp->get_tablelateralmin();}
void RtMachine::set_tablelateralmin(const double& tablelateralmin)
{
    m_pImp->set_tablelateralmin(tablelateralmin);
    enable_field(MACHINE_TABLELATERALMIN);
    setdirty_field(MACHINE_TABLELATERALMIN, true);
}

//tablelongitudinalmax
double RtMachine::get_tablelongitudinalmax() const { return m_pImp->get_tablelongitudinalmax();}
void RtMachine::set_tablelongitudinalmax(const double& tablelongitudinalmax)
{
    m_pImp->set_tablelongitudinalmax(tablelongitudinalmax);
    enable_field(MACHINE_TABLELONGITUDINALMAX);
    setdirty_field(MACHINE_TABLELONGITUDINALMAX, true);
}

//tablelongitudinalmin
double RtMachine::get_tablelongitudinalmin() const { return m_pImp->get_tablelongitudinalmin();}
void RtMachine::set_tablelongitudinalmin(const double& tablelongitudinalmin)
{
    m_pImp->set_tablelongitudinalmin(tablelongitudinalmin);
    enable_field(MACHINE_TABLELONGITUDINALMIN);
    setdirty_field(MACHINE_TABLELONGITUDINALMIN, true);
}

//tableverticalmax
double RtMachine::get_tableverticalmax() const { return m_pImp->get_tableverticalmax();}
void RtMachine::set_tableverticalmax(const double& tableverticalmax)
{
    m_pImp->set_tableverticalmax(tableverticalmax);
    enable_field(MACHINE_TABLEVERTICALMAX);
    setdirty_field(MACHINE_TABLEVERTICALMAX, true);
}

//tableverticalmin
double RtMachine::get_tableverticalmin() const { return m_pImp->get_tableverticalmin();}
void RtMachine::set_tableverticalmin(const double& tableverticalmin)
{
    m_pImp->set_tableverticalmin(tableverticalmin);
    enable_field(MACHINE_TABLEVERTICALMIN);
    setdirty_field(MACHINE_TABLEVERTICALMIN, true);
}

//tableanglemax
double RtMachine::get_tableanglemax() const { return m_pImp->get_tableanglemax();}
void RtMachine::set_tableanglemax(const double& tableanglemax)
{
    m_pImp->set_tableanglemax(tableanglemax);
    enable_field(MACHINE_TABLEANGLEMAX);
    setdirty_field(MACHINE_TABLEANGLEMAX, true);
}

//tableanglemin
double RtMachine::get_tableanglemin() const { return m_pImp->get_tableanglemin();}
void RtMachine::set_tableanglemin(const double& tableanglemin)
{
    m_pImp->set_tableanglemin(tableanglemin);
    enable_field(MACHINE_TABLEANGLEMIN);
    setdirty_field(MACHINE_TABLEANGLEMIN, true);
}

//collimatordirection
int RtMachine::get_collimatordirection() const { return m_pImp->get_collimatordirection();}
void RtMachine::set_collimatordirection(const int& collimatordirection)
{
    m_pImp->set_collimatordirection(collimatordirection);
    enable_field(MACHINE_COLLIMATORDIRECTION);
    setdirty_field(MACHINE_COLLIMATORDIRECTION, true);
}

//mlcdirectiontype
int RtMachine::get_mlcdirectiontype() const { return m_pImp->get_mlcdirectiontype();}
void RtMachine::set_mlcdirectiontype(const int& mlcdirectiontype)
{
    m_pImp->set_mlcdirectiontype(mlcdirectiontype);
    enable_field(MACHINE_MLCDIRECTIONTYPE);
    setdirty_field(MACHINE_MLCDIRECTIONTYPE, true);
}

//jawxissymmetry
bool RtMachine::get_jawxissymmetry() const { return m_pImp->get_jawxissymmetry();}
void RtMachine::set_jawxissymmetry(const bool& jawxissymmetry)
{
    m_pImp->set_jawxissymmetry(jawxissymmetry);
    enable_field(MACHINE_JAWXISSYMMETRY);
    setdirty_field(MACHINE_JAWXISSYMMETRY, true);
}

//jawyissymmetry
bool RtMachine::get_jawyissymmetry() const { return m_pImp->get_jawyissymmetry();}
void RtMachine::set_jawyissymmetry(const bool& jawyissymmetry)
{
    m_pImp->set_jawyissymmetry(jawyissymmetry);
    enable_field(MACHINE_JAWYISSYMMETRY);
    setdirty_field(MACHINE_JAWYISSYMMETRY, true);
}

//xjawnum
int RtMachine::get_xjawnum() const { return m_pImp->get_xjawnum();}
void RtMachine::set_xjawnum(const int& xjawnum)
{
    m_pImp->set_xjawnum(xjawnum);
    enable_field(MACHINE_XJAWNUM);
    setdirty_field(MACHINE_XJAWNUM, true);
}

//yjawnum
int RtMachine::get_yjawnum() const { return m_pImp->get_yjawnum();}
void RtMachine::set_yjawnum(const int& yjawnum)
{
    m_pImp->set_yjawnum(yjawnum);
    enable_field(MACHINE_YJAWNUM);
    setdirty_field(MACHINE_YJAWNUM, true);
}

//leafnum
int RtMachine::get_leafnum() const { return m_pImp->get_leafnum();}
void RtMachine::set_leafnum(const int& leafnum)
{
    m_pImp->set_leafnum(leafnum);
    enable_field(MACHINE_LEAFNUM);
    setdirty_field(MACHINE_LEAFNUM, true);
}

//leafboundaries
std::string RtMachine::get_leafboundaries() const { return m_pImp->get_leafboundaries();}
void RtMachine::set_leafboundaries(const std::string& leafboundaries)
{
    m_pImp->set_leafboundaries(leafboundaries);
    enable_field(MACHINE_LEAFBOUNDARIES);
    setdirty_field(MACHINE_LEAFBOUNDARIES, true);
}

std::vector<double> RtMachine::get_leafboundaries_list() const { return m_pImp->get_leafboundaries_list();}
void RtMachine::set_leafboundaries_list(const std::vector<double>& leafboundaries)
{
    m_pImp->set_leafboundaries_list(leafboundaries);
    enable_field(MACHINE_LEAFBOUNDARIES);
    setdirty_field(MACHINE_LEAFBOUNDARIES, true);
}

//negativeleafrangemin
double RtMachine::get_negativeleafrangemin() const { return m_pImp->get_negativeleafrangemin();}
void RtMachine::set_negativeleafrangemin(const double& negativeleafrangemin)
{
    m_pImp->set_negativeleafrangemin(negativeleafrangemin);
    enable_field(MACHINE_NEGATIVELEAFRANGEMIN);
    setdirty_field(MACHINE_NEGATIVELEAFRANGEMIN, true);
}

//negativeleafrangemax
double RtMachine::get_negativeleafrangemax() const { return m_pImp->get_negativeleafrangemax();}
void RtMachine::set_negativeleafrangemax(const double& negativeleafrangemax)
{
    m_pImp->set_negativeleafrangemax(negativeleafrangemax);
    enable_field(MACHINE_NEGATIVELEAFRANGEMAX);
    setdirty_field(MACHINE_NEGATIVELEAFRANGEMAX, true);
}

//positiveleafrangemin
double RtMachine::get_positiveleafrangemin() const { return m_pImp->get_positiveleafrangemin();}
void RtMachine::set_positiveleafrangemin(const double& positiveleafrangemin)
{
    m_pImp->set_positiveleafrangemin(positiveleafrangemin);
    enable_field(MACHINE_POSITIVELEAFRANGEMIN);
    setdirty_field(MACHINE_POSITIVELEAFRANGEMIN, true);
}

//positiveleafrangemax
double RtMachine::get_positiveleafrangemax() const { return m_pImp->get_positiveleafrangemax();}
void RtMachine::set_positiveleafrangemax(const double& positiveleafrangemax)
{
    m_pImp->set_positiveleafrangemax(positiveleafrangemax);
    enable_field(MACHINE_POSITIVELEAFRANGEMAX);
    setdirty_field(MACHINE_POSITIVELEAFRANGEMAX, true);
}

//isinterdigitation
bool RtMachine::get_isinterdigitation() const { return m_pImp->get_isinterdigitation();}
void RtMachine::set_isinterdigitation(const bool& isinterdigitation)
{
    m_pImp->set_isinterdigitation(isinterdigitation);
    enable_field(MACHINE_ISINTERDIGITATION);
    setdirty_field(MACHINE_ISINTERDIGITATION, true);
}

//leafspan
float RtMachine::get_leafspan() const { return m_pImp->get_leafspan();}
void RtMachine::set_leafspan(const float& leafspan)
{
    m_pImp->set_leafspan(leafspan);
    enable_field(MACHINE_LEAFSPAN);
    setdirty_field(MACHINE_LEAFSPAN, true);
}

//minleafendgap
float RtMachine::get_minleafendgap() const { return m_pImp->get_minleafendgap();}
void RtMachine::set_minleafendgap(const float& minleafendgap)
{
    m_pImp->set_minleafendgap(minleafendgap);
    enable_field(MACHINE_MINLEAFENDGAP);
    setdirty_field(MACHINE_MINLEAFENDGAP, true);
}

//sdd
float RtMachine::get_sdd() const { return m_pImp->get_sdd();}
void RtMachine::set_sdd(const float& sdd)
{
    m_pImp->set_sdd(sdd);
    enable_field(MACHINE_SDD);
    setdirty_field(MACHINE_SDD, true);
}

//sourcetobeamlimitingdevicedistance
float RtMachine::get_sourcetobeamlimitingdevicedistance() const { return m_pImp->get_sourcetobeamlimitingdevicedistance();}
void RtMachine::set_sourcetobeamlimitingdevicedistance(const float& sourcetobeamlimitingdevicedistance)
{
    m_pImp->set_sourcetobeamlimitingdevicedistance(sourcetobeamlimitingdevicedistance);
    enable_field(MACHINE_SOURCETOBEAMLIMITINGDEVICEDISTANCE);
    setdirty_field(MACHINE_SOURCETOBEAMLIMITINGDEVICEDISTANCE, true);
}

//xindependent
int RtMachine::get_xindependent() const { return m_pImp->get_xindependent();}
void RtMachine::set_xindependent(const int& xindependent)
{
    m_pImp->set_xindependent(xindependent);
    enable_field(MACHINE_XINDEPENDENT);
    setdirty_field(MACHINE_XINDEPENDENT, true);
}

//xmin_1
float RtMachine::get_xmin_1() const { return m_pImp->get_xmin_1();}
void RtMachine::set_xmin_1(const float& xmin_1)
{
    m_pImp->set_xmin_1(xmin_1);
    enable_field(MACHINE_XMIN_1);
    setdirty_field(MACHINE_XMIN_1, true);
}

//xmax_1
float RtMachine::get_xmax_1() const { return m_pImp->get_xmax_1();}
void RtMachine::set_xmax_1(const float& xmax_1)
{
    m_pImp->set_xmax_1(xmax_1);
    enable_field(MACHINE_XMAX_1);
    setdirty_field(MACHINE_XMAX_1, true);
}

//xmin_2
float RtMachine::get_xmin_2() const { return m_pImp->get_xmin_2();}
void RtMachine::set_xmin_2(const float& xmin_2)
{
    m_pImp->set_xmin_2(xmin_2);
    enable_field(MACHINE_XMIN_2);
    setdirty_field(MACHINE_XMIN_2, true);
}

//xmax_2
float RtMachine::get_xmax_2() const { return m_pImp->get_xmax_2();}
void RtMachine::set_xmax_2(const float& xmax_2)
{
    m_pImp->set_xmax_2(xmax_2);
    enable_field(MACHINE_XMAX_2);
    setdirty_field(MACHINE_XMAX_2, true);
}

//xmin_w
float RtMachine::get_xmin_w() const { return m_pImp->get_xmin_w();}
void RtMachine::set_xmin_w(const float& xmin_w)
{
    m_pImp->set_xmin_w(xmin_w);
    enable_field(MACHINE_XMIN_W);
    setdirty_field(MACHINE_XMIN_W, true);
}

//xmax_w
float RtMachine::get_xmax_w() const { return m_pImp->get_xmax_w();}
void RtMachine::set_xmax_w(const float& xmax_w)
{
    m_pImp->set_xmax_w(xmax_w);
    enable_field(MACHINE_XMAX_W);
    setdirty_field(MACHINE_XMAX_W, true);
}

//xsdd
float RtMachine::get_xsdd() const { return m_pImp->get_xsdd();}
void RtMachine::set_xsdd(const float& xsdd)
{
    m_pImp->set_xsdd(xsdd);
    enable_field(MACHINE_XSDD);
    setdirty_field(MACHINE_XSDD, true);
}

//xname_1
std::string RtMachine::get_xname_1() const { return m_pImp->get_xname_1();}
void RtMachine::set_xname_1(const std::string& xname_1)
{
    m_pImp->set_xname_1(xname_1);
    enable_field(MACHINE_XNAME_1);
    setdirty_field(MACHINE_XNAME_1, true);
}

//xname_2
std::string RtMachine::get_xname_2() const { return m_pImp->get_xname_2();}
void RtMachine::set_xname_2(const std::string& xname_2)
{
    m_pImp->set_xname_2(xname_2);
    enable_field(MACHINE_XNAME_2);
    setdirty_field(MACHINE_XNAME_2, true);
}

//xisxjawlimit
bool RtMachine::get_xisxjawlimit() const { return m_pImp->get_xisxjawlimit();}
void RtMachine::set_xisxjawlimit(const bool& xisxjawlimit)
{
    m_pImp->set_xisxjawlimit(xisxjawlimit);
    enable_field(MACHINE_XISXJAWLIMIT);
    setdirty_field(MACHINE_XISXJAWLIMIT, true);
}

//yindependent
int RtMachine::get_yindependent() const { return m_pImp->get_yindependent();}
void RtMachine::set_yindependent(const int& yindependent)
{
    m_pImp->set_yindependent(yindependent);
    enable_field(MACHINE_YINDEPENDENT);
    setdirty_field(MACHINE_YINDEPENDENT, true);
}

//ymin_1
float RtMachine::get_ymin_1() const { return m_pImp->get_ymin_1();}
void RtMachine::set_ymin_1(const float& ymin_1)
{
    m_pImp->set_ymin_1(ymin_1);
    enable_field(MACHINE_YMIN_1);
    setdirty_field(MACHINE_YMIN_1, true);
}

//ymax_1
float RtMachine::get_ymax_1() const { return m_pImp->get_ymax_1();}
void RtMachine::set_ymax_1(const float& ymax_1)
{
    m_pImp->set_ymax_1(ymax_1);
    enable_field(MACHINE_YMAX_1);
    setdirty_field(MACHINE_YMAX_1, true);
}

//ymin_2
float RtMachine::get_ymin_2() const { return m_pImp->get_ymin_2();}
void RtMachine::set_ymin_2(const float& ymin_2)
{
    m_pImp->set_ymin_2(ymin_2);
    enable_field(MACHINE_YMIN_2);
    setdirty_field(MACHINE_YMIN_2, true);
}

//ymax_2
float RtMachine::get_ymax_2() const { return m_pImp->get_ymax_2();}
void RtMachine::set_ymax_2(const float& ymax_2)
{
    m_pImp->set_ymax_2(ymax_2);
    enable_field(MACHINE_YMAX_2);
    setdirty_field(MACHINE_YMAX_2, true);
}

//ymin_w
float RtMachine::get_ymin_w() const { return m_pImp->get_ymin_w();}
void RtMachine::set_ymin_w(const float& ymin_w)
{
    m_pImp->set_ymin_w(ymin_w);
    enable_field(MACHINE_YMIN_W);
    setdirty_field(MACHINE_YMIN_W, true);
}

//ymax_w
float RtMachine::get_ymax_w() const { return m_pImp->get_ymax_w();}
void RtMachine::set_ymax_w(const float& ymax_w)
{
    m_pImp->set_ymax_w(ymax_w);
    enable_field(MACHINE_YMAX_W);
    setdirty_field(MACHINE_YMAX_W, true);
}

//ysdd
float RtMachine::get_ysdd() const { return m_pImp->get_ysdd();}
void RtMachine::set_ysdd(const float& ysdd)
{
    m_pImp->set_ysdd(ysdd);
    enable_field(MACHINE_YSDD);
    setdirty_field(MACHINE_YSDD, true);
}

//yname_1
std::string RtMachine::get_yname_1() const { return m_pImp->get_yname_1();}
void RtMachine::set_yname_1(const std::string& yname_1)
{
    m_pImp->set_yname_1(yname_1);
    enable_field(MACHINE_YNAME_1);
    setdirty_field(MACHINE_YNAME_1, true);
}

//yname_2
std::string RtMachine::get_yname_2() const { return m_pImp->get_yname_2();}
void RtMachine::set_yname_2(const std::string& yname_2)
{
    m_pImp->set_yname_2(yname_2);
    enable_field(MACHINE_YNAME_2);
    setdirty_field(MACHINE_YNAME_2, true);
}

//yisxjawlimit
bool RtMachine::get_yisxjawlimit() const { return m_pImp->get_yisxjawlimit();}
void RtMachine::set_yisxjawlimit(const bool& yisxjawlimit)
{
    m_pImp->set_yisxjawlimit(yisxjawlimit);
    enable_field(MACHINE_YISXJAWLIMIT);
    setdirty_field(MACHINE_YISXJAWLIMIT, true);
}

//maximumgantryspeed_degreepersecond
float RtMachine::get_maximumgantryspeed_degreepersecond() const { return m_pImp->get_maximumgantryspeed_degreepersecond();}
void RtMachine::set_maximumgantryspeed_degreepersecond(const float& maximumgantryspeed_degreepersecond)
{
    m_pImp->set_maximumgantryspeed_degreepersecond(maximumgantryspeed_degreepersecond);
    enable_field(MACHINE_MAXIMUMGANTRYSPEED_DEGREEPERSECOND);
    setdirty_field(MACHINE_MAXIMUMGANTRYSPEED_DEGREEPERSECOND, true);
}

//maximumleafspeed_mmpersecond
float RtMachine::get_maximumleafspeed_mmpersecond() const { return m_pImp->get_maximumleafspeed_mmpersecond();}
void RtMachine::set_maximumleafspeed_mmpersecond(const float& maximumleafspeed_mmpersecond)
{
    m_pImp->set_maximumleafspeed_mmpersecond(maximumleafspeed_mmpersecond);
    enable_field(MACHINE_MAXIMUMLEAFSPEED_MMPERSECOND);
    setdirty_field(MACHINE_MAXIMUMLEAFSPEED_MMPERSECOND, true);
}

//deviceid
std::string RtMachine::get_deviceid() const { return m_pImp->get_deviceid();}
void RtMachine::set_deviceid(const std::string& deviceid)
{
    m_pImp->set_deviceid(deviceid);
    enable_field(MACHINE_DEVICEID);
    setdirty_field(MACHINE_DEVICEID, true);
}

//comments
std::string RtMachine::get_comments() const { return m_pImp->get_comments();}
void RtMachine::set_comments(const std::string& comments)
{
    m_pImp->set_comments(comments);
    enable_field(MACHINE_COMMENTS);
    setdirty_field(MACHINE_COMMENTS, true);
}

//collimatoranglemin
double RtMachine::get_collimatoranglemin() const { return m_pImp->get_collimatoranglemin();}
void RtMachine::set_collimatoranglemin(const double& collimatoranglemin)
{
    m_pImp->set_collimatoranglemin(collimatoranglemin);
    enable_field(MACHINE_COLLIMATORANGLEMIN);
    setdirty_field(MACHINE_COLLIMATORANGLEMIN, true);
}

//collimatoranglemax
double RtMachine::get_collimatoranglemax() const { return m_pImp->get_collimatoranglemax();}
void RtMachine::set_collimatoranglemax(const double& collimatoranglemax)
{
    m_pImp->set_collimatoranglemax(collimatoranglemax);
    enable_field(MACHINE_COLLIMATORANGLEMAX);
    setdirty_field(MACHINE_COLLIMATORANGLEMAX, true);
}

//gantryclockwiserange
double RtMachine::get_gantryclockwiserange() const { return m_pImp->get_gantryclockwiserange();}
void RtMachine::set_gantryclockwiserange(const double& gantryclockwiserange)
{
    m_pImp->set_gantryclockwiserange(gantryclockwiserange);
    enable_field(MACHINE_GANTRYCLOCKWISERANGE);
    setdirty_field(MACHINE_GANTRYCLOCKWISERANGE, true);
}

//gantrycounterclockwiserange
double RtMachine::get_gantrycounterclockwiserange() const { return m_pImp->get_gantrycounterclockwiserange();}
void RtMachine::set_gantrycounterclockwiserange(const double& gantrycounterclockwiserange)
{
    m_pImp->set_gantrycounterclockwiserange(gantrycounterclockwiserange);
    enable_field(MACHINE_GANTRYCOUNTERCLOCKWISERANGE);
    setdirty_field(MACHINE_GANTRYCOUNTERCLOCKWISERANGE, true);
}

//availableplantype
std::string RtMachine::get_availableplantype() const { return m_pImp->get_availableplantype();}
void RtMachine::set_availableplantype(const std::string& availableplantype)
{
    m_pImp->set_availableplantype(availableplantype);
    enable_field(MACHINE_AVAILABLEPLANTYPE);
    setdirty_field(MACHINE_AVAILABLEPLANTYPE, true);
}

//maximumjawspeed_mmpersecond
float RtMachine::get_maximumjawspeed_mmpersecond() const { return m_pImp->get_maximumjawspeed_mmpersecond();}
void RtMachine::set_maximumjawspeed_mmpersecond(const float& maximumjawspeed_mmpersecond)
{
    m_pImp->set_maximumjawspeed_mmpersecond(maximumjawspeed_mmpersecond);
    enable_field(MACHINE_MAXIMUMJAWSPEED_MMPERSECOND);
    setdirty_field(MACHINE_MAXIMUMJAWSPEED_MMPERSECOND, true);
}

//minimumjawgap
float RtMachine::get_minimumjawgap() const { return m_pImp->get_minimumjawgap();}
void RtMachine::set_minimumjawgap(const float& minimumjawgap)
{
    m_pImp->set_minimumjawgap(minimumjawgap);
    enable_field(MACHINE_MINIMUMJAWGAP);
    setdirty_field(MACHINE_MINIMUMJAWGAP, true);
}

//dynamictrackingjawx
bool RtMachine::get_dynamictrackingjawx() const { return m_pImp->get_dynamictrackingjawx();}
void RtMachine::set_dynamictrackingjawx(const bool& dynamictrackingjawx)
{
    m_pImp->set_dynamictrackingjawx(dynamictrackingjawx);
    enable_field(MACHINE_DYNAMICTRACKINGJAWX);
    setdirty_field(MACHINE_DYNAMICTRACKINGJAWX, true);
}

//dynamictrackingjawy
bool RtMachine::get_dynamictrackingjawy() const { return m_pImp->get_dynamictrackingjawy();}
void RtMachine::set_dynamictrackingjawy(const bool& dynamictrackingjawy)
{
    m_pImp->set_dynamictrackingjawy(dynamictrackingjawy);
    enable_field(MACHINE_DYNAMICTRACKINGJAWY);
    setdirty_field(MACHINE_DYNAMICTRACKINGJAWY, true);
}

//sourcetomlctopdistance
float RtMachine::get_sourcetomlctopdistance() const { return m_pImp->get_sourcetomlctopdistance();}
void RtMachine::set_sourcetomlctopdistance(const float& sourcetomlctopdistance)
{
    m_pImp->set_sourcetomlctopdistance(sourcetomlctopdistance);
    enable_field(MACHINE_SOURCETOMLCTOPDISTANCE);
    setdirty_field(MACHINE_SOURCETOMLCTOPDISTANCE, true);
}

//jawtrackinggap
float RtMachine::get_jawtrackinggap() const { return m_pImp->get_jawtrackinggap();}
void RtMachine::set_jawtrackinggap(const float& jawtrackinggap)
{
    m_pImp->set_jawtrackinggap(jawtrackinggap);
    enable_field(MACHINE_JAWTRACKINGGAP);
    setdirty_field(MACHINE_JAWTRACKINGGAP, true);
}

//supportapetureblock
bool RtMachine::get_supportapetureblock() const { return m_pImp->get_supportapetureblock();}
void RtMachine::set_supportapetureblock(const bool& supportapetureblock)
{
    m_pImp->set_supportapetureblock(supportapetureblock);
    enable_field(MACHINE_SUPPORTAPETUREBLOCK);
    setdirty_field(MACHINE_SUPPORTAPETUREBLOCK, true);
}

//supportshieldblock
bool RtMachine::get_supportshieldblock() const { return m_pImp->get_supportshieldblock();}
void RtMachine::set_supportshieldblock(const bool& supportshieldblock)
{
    m_pImp->set_supportshieldblock(supportshieldblock);
    enable_field(MACHINE_SUPPORTSHIELDBLOCK);
    setdirty_field(MACHINE_SUPPORTSHIELDBLOCK, true);
}

//sourcetoblocktraydistance
float RtMachine::get_sourcetoblocktraydistance() const { return m_pImp->get_sourcetoblocktraydistance();}
void RtMachine::set_sourcetoblocktraydistance(const float& sourcetoblocktraydistance)
{
    m_pImp->set_sourcetoblocktraydistance(sourcetoblocktraydistance);
    enable_field(MACHINE_SOURCETOBLOCKTRAYDISTANCE);
    setdirty_field(MACHINE_SOURCETOBLOCKTRAYDISTANCE, true);
}

//blockheight
float RtMachine::get_blockheight() const { return m_pImp->get_blockheight();}
void RtMachine::set_blockheight(const float& blockheight)
{
    m_pImp->set_blockheight(blockheight);
    enable_field(MACHINE_BLOCKHEIGHT);
    setdirty_field(MACHINE_BLOCKHEIGHT, true);
}

//maxpatientperhour
int RtMachine::get_maxpatientperhour() const { return m_pImp->get_maxpatientperhour();}
void RtMachine::set_maxpatientperhour(const int& maxpatientperhour)
{
    m_pImp->set_maxpatientperhour(maxpatientperhour);
    enable_field(MACHINE_MAXPATIENTPERHOUR);
    setdirty_field(MACHINE_MAXPATIENTPERHOUR, true);
}

//blockthickness
float RtMachine::get_blockthickness() const { return m_pImp->get_blockthickness();}
void RtMachine::set_blockthickness(const float& blockthickness)
{
    m_pImp->set_blockthickness(blockthickness);
    enable_field(MACHINE_BLOCKTHICKNESS);
    setdirty_field(MACHINE_BLOCKTHICKNESS, true);
}

//sourcetowedgetopdistance
float RtMachine::get_sourcetowedgetopdistance() const { return m_pImp->get_sourcetowedgetopdistance();}
void RtMachine::set_sourcetowedgetopdistance(const float& sourcetowedgetopdistance)
{
    m_pImp->set_sourcetowedgetopdistance(sourcetowedgetopdistance);
    enable_field(MACHINE_SOURCETOWEDGETOPDISTANCE);
    setdirty_field(MACHINE_SOURCETOWEDGETOPDISTANCE, true);
}

//sourcetoapplicatordistance
float RtMachine::get_sourcetoapplicatordistance() const { return m_pImp->get_sourcetoapplicatordistance();}
void RtMachine::set_sourcetoapplicatordistance(const float& sourcetoapplicatordistance)
{
    m_pImp->set_sourcetoapplicatordistance(sourcetoapplicatordistance);
    enable_field(MACHINE_SOURCETOAPPLICATORDISTANCE);
    setdirty_field(MACHINE_SOURCETOAPPLICATORDISTANCE, true);
}

//crc
std::string RtMachine::get_crc() const { return m_pImp->get_crc();}
void RtMachine::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(MACHINE_CRC);
    setdirty_field(MACHINE_CRC, true);
}

//state
int RtMachine::get_state() const { return m_pImp->get_state();}
void RtMachine::set_state(const int& state)
{
    m_pImp->set_state(state);
    enable_field(MACHINE_STATE);
    setdirty_field(MACHINE_STATE, true);
}

//forcejawfollow
bool RtMachine::get_forcejawfollow() const { return m_pImp->get_forcejawfollow();}
void RtMachine::set_forcejawfollow(const bool& forcejawfollow)
{
    m_pImp->set_forcejawfollow(forcejawfollow);
    enable_field(MACHINE_FORCEJAWFOLLOW);
    setdirty_field(MACHINE_FORCEJAWFOLLOW, true);
}

//inactivereason
std::string RtMachine::get_inactivereason() const { return m_pImp->get_inactivereason();}
void RtMachine::set_inactivereason(const std::string& inactivereason)
{
    m_pImp->set_inactivereason(inactivereason);
    enable_field(MACHINE_INACTIVEREASON);
    setdirty_field(MACHINE_INACTIVEREASON, true);
}

//inactivetime
DATETIME_BOOST RtMachine::get_inactivetime() const { return m_pImp->get_inactivetime();}
void RtMachine::set_inactivetime(const DATETIME_BOOST& inactivetime)
{
    m_pImp->set_inactivetime(inactivetime);
    enable_field(MACHINE_INACTIVETIME);
    setdirty_field(MACHINE_INACTIVETIME, true);
}

//inactiveuser
std::string RtMachine::get_inactiveuser() const { return m_pImp->get_inactiveuser();}
void RtMachine::set_inactiveuser(const std::string& inactiveuser)
{
    m_pImp->set_inactiveuser(inactiveuser);
    enable_field(MACHINE_INACTIVEUSER);
    setdirty_field(MACHINE_INACTIVEUSER, true);
}

//updatetime
DATETIME_BOOST RtMachine::get_updatetime() const { return m_pImp->get_updatetime();}
void RtMachine::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(MACHINE_UPDATETIME);
    setdirty_field(MACHINE_UPDATETIME, true);
}

//mingantryspeed_degreepersecond
float RtMachine::get_mingantryspeed_degreepersecond() const { return m_pImp->get_mingantryspeed_degreepersecond();}
void RtMachine::set_mingantryspeed_degreepersecond(const float& mingantryspeed_degreepersecond)
{
    m_pImp->set_mingantryspeed_degreepersecond(mingantryspeed_degreepersecond);
    enable_field(MACHINE_MINGANTRYSPEED_DEGREEPERSECOND);
    setdirty_field(MACHINE_MINGANTRYSPEED_DEGREEPERSECOND, true);
}

//maxleafacc_mmpersec2
float RtMachine::get_maxleafacc_mmpersec2() const { return m_pImp->get_maxleafacc_mmpersec2();}
void RtMachine::set_maxleafacc_mmpersec2(const float& maxleafacc_mmpersec2)
{
    m_pImp->set_maxleafacc_mmpersec2(maxleafacc_mmpersec2);
    enable_field(MACHINE_MAXLEAFACC_MMPERSEC2);
    setdirty_field(MACHINE_MAXLEAFACC_MMPERSEC2, true);
}

//////////////////////////////////////////////////////////////////////////
bool RtMachine::get_crc_valid() const { return m_pImp->get_crc_valid();}
void RtMachine::set_crc_valid(const bool& crc_valid) { m_pImp->set_crc_valid(crc_valid);}

RT_TPS_DATABASE_END_NAMESPACE