//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_voi.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_voi.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_contour.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtVoiImp::RtVoiImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_structuresetuid(""),
    m_conceptualvolumeuid(""),
    m_name(""),
    m_isbolus(false),
    m_xcoordinate3dmax(0.f),
    m_ycoordinate3dmax(0.f),
    m_zcoordinate3dmax(0.f),
    m_xcoordinate3dmin(0.f),
    m_ycoordinate3dmin(0.f),
    m_zcoordinate3dmin(0.f),
    m_orientation(0),
    m_volume(0.f),
    m_density(0.f),
    m_lockuseruid(""),
    m_locktime(boost::date_time::not_a_date_time),
    m_lockmacaddress(""),
    m_averagedensity(0.f),
    m_maxdensity(0.f),
    m_mindensity(0.f),
    m_surfacearea(0.f),
    m_centroidx(0.f),
    m_centroidy(0.f),
    m_centroidz(0.f),
    m_voirole(0),
    m_standarddeviation(0.f),
    m_isvisible(false),
    m_rtroiinterpretedtype(0),
    m_roiinterpreter(""),
    m_referencesubvolumeoffsetx(0),
    m_referencesubvolumeoffsety(0),
    m_referencesubvolumeoffsetz(0),
    m_referencesubvolumesizex(0),
    m_referencesubvolumesizey(0),
    m_referencesubvolumesizez(0),
    m_referencesubvolumedatafilepath(""),
    m_locktype(0),
    m_planningrole(0),
    m_subrole(0),
    m_overridedenstiy(0.f),
    m_tcpntcp(0.f),
    m_isoverride(false),
    m_description(""),
    m_alpha3d(0.f),
    m_roinumberindcm(0),
    m_updatetime(boost::date_time::not_a_date_time),
    m_softwareversionno(""),
    m_isshaded(false)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    memset(m_color, 0, sizeof(float)*4);
    memset(m_pat2volumematrix, 0, sizeof(float)*16);
    m_vInterpolate.clear();
    m_vtContour.clear();
    m_seriesuid = "";
}

RtVoiImp::RtVoiImp(const RtVoiImp& voi):
    m_uid(voi.get_uid()),
    m_structuresetuid(voi.get_structuresetuid()),
    m_conceptualvolumeuid(voi.get_conceptualvolumeuid()),
    m_name(voi.get_name()),
    m_isbolus(voi.get_isbolus()),
    m_xcoordinate3dmax(voi.get_xcoordinate3dmax()),
    m_ycoordinate3dmax(voi.get_ycoordinate3dmax()),
    m_zcoordinate3dmax(voi.get_zcoordinate3dmax()),
    m_xcoordinate3dmin(voi.get_xcoordinate3dmin()),
    m_ycoordinate3dmin(voi.get_ycoordinate3dmin()),
    m_zcoordinate3dmin(voi.get_zcoordinate3dmin()),
    m_orientation(voi.get_orientation()),
    m_volume(voi.get_volume()),
    m_density(voi.get_density()),
    m_lockuseruid(voi.get_lockuseruid()),
    m_locktime(voi.get_locktime()),
    m_lockmacaddress(voi.get_lockmacaddress()),
    m_averagedensity(voi.get_averagedensity()),
    m_maxdensity(voi.get_maxdensity()),
    m_mindensity(voi.get_mindensity()),
    m_surfacearea(voi.get_surfacearea()),
    m_centroidx(voi.get_centroidx()),
    m_centroidy(voi.get_centroidy()),
    m_centroidz(voi.get_centroidz()),
    m_voirole(voi.get_voirole()),
    m_standarddeviation(voi.get_standarddeviation()),
    m_isvisible(voi.get_isvisible()),
    m_rtroiinterpretedtype(voi.get_rtroiinterpretedtype()),
    m_roiinterpreter(voi.get_roiinterpreter()),
    m_referencesubvolumeoffsetx(voi.get_referencesubvolumeoffsetx()),
    m_referencesubvolumeoffsety(voi.get_referencesubvolumeoffsety()),
    m_referencesubvolumeoffsetz(voi.get_referencesubvolumeoffsetz()),
    m_referencesubvolumesizex(voi.get_referencesubvolumesizex()),
    m_referencesubvolumesizey(voi.get_referencesubvolumesizey()),
    m_referencesubvolumesizez(voi.get_referencesubvolumesizez()),
    m_referencesubvolumedatafilepath(voi.get_referencesubvolumedatafilepath()),
    m_locktype(voi.get_locktype()),
    m_planningrole(voi.get_planningrole()),
    m_subrole(voi.get_subrole()),
    m_overridedenstiy(voi.get_overridedenstiy()),
    m_tcpntcp(voi.get_tcpntcp()),
    m_isoverride(voi.get_isoverride()),
    m_description(voi.get_description()),
    m_alpha3d(voi.get_alpha3d()),
    m_roinumberindcm(voi.get_roinumberindcm()),
    m_updatetime(voi.get_updatetime()),
    m_softwareversionno(voi.get_softwareversionno()),
    m_isshaded(voi.get_isshaded())
{
    this->set_color(voi.get_color());
    this->set_pat2volumematrix(voi.get_pat2volumematrix());
    this->set_interpolate(voi.get_interpolate());
    this->set_seriesuid(voi.get_seriesuid());
    std::vector<RtContour*> cons = voi.get_contours();
    std::vector<RtContour*> cons_new;
    for (auto itr=cons.cbegin(); itr!=cons.cend(); ++itr) cons_new.push_back(new RtContour(*(*itr)));
    this->set_contours(cons_new);
}

RtVoiImp& RtVoiImp::operator=(const RtVoiImp& voi)
{
    if (this != &voi){
        this->m_uid = voi.get_uid();
        this->m_structuresetuid = voi.get_structuresetuid();
        this->m_conceptualvolumeuid = voi.get_conceptualvolumeuid();
        this->m_name = voi.get_name();
        this->m_isbolus = voi.get_isbolus();
        this->m_xcoordinate3dmax = voi.get_xcoordinate3dmax();
        this->m_ycoordinate3dmax = voi.get_ycoordinate3dmax();
        this->m_zcoordinate3dmax = voi.get_zcoordinate3dmax();
        this->m_xcoordinate3dmin = voi.get_xcoordinate3dmin();
        this->m_ycoordinate3dmin = voi.get_ycoordinate3dmin();
        this->m_zcoordinate3dmin = voi.get_zcoordinate3dmin();
        this->m_orientation = voi.get_orientation();
        this->m_volume = voi.get_volume();
        this->m_density = voi.get_density();
        this->m_lockuseruid = voi.get_lockuseruid();
        this->m_locktime = voi.get_locktime();
        this->m_lockmacaddress = voi.get_lockmacaddress();
        this->m_averagedensity = voi.get_averagedensity();
        this->m_maxdensity = voi.get_maxdensity();
        this->m_mindensity = voi.get_mindensity();
        this->m_surfacearea = voi.get_surfacearea();
        this->m_centroidx = voi.get_centroidx();
        this->m_centroidy = voi.get_centroidy();
        this->m_centroidz = voi.get_centroidz();
        this->m_voirole = voi.get_voirole();
        this->m_standarddeviation = voi.get_standarddeviation();
        this->m_isvisible = voi.get_isvisible();
        this->m_rtroiinterpretedtype = voi.get_rtroiinterpretedtype();
        this->m_roiinterpreter = voi.get_roiinterpreter();
        this->m_referencesubvolumeoffsetx = voi.get_referencesubvolumeoffsetx();
        this->m_referencesubvolumeoffsety = voi.get_referencesubvolumeoffsety();
        this->m_referencesubvolumeoffsetz = voi.get_referencesubvolumeoffsetz();
        this->m_referencesubvolumesizex = voi.get_referencesubvolumesizex();
        this->m_referencesubvolumesizey = voi.get_referencesubvolumesizey();
        this->m_referencesubvolumesizez = voi.get_referencesubvolumesizez();
        this->m_referencesubvolumedatafilepath = voi.get_referencesubvolumedatafilepath();
        this->set_pat2volumematrix(voi.get_pat2volumematrix());
        this->set_interpolate(voi.get_interpolate());
        this->m_locktype = voi.get_locktype();
        this->m_planningrole = voi.get_planningrole();
        this->m_subrole = voi.get_subrole();
        this->m_overridedenstiy = voi.get_overridedenstiy();
        this->m_tcpntcp = voi.get_tcpntcp();
        this->m_isoverride = voi.get_isoverride();
        this->m_description = voi.get_description();
        this->m_alpha3d = voi.get_alpha3d();
        this->m_roinumberindcm = voi.get_roinumberindcm();
        this->m_updatetime = voi.get_updatetime();
        this->m_softwareversionno = voi.get_softwareversionno();
        this->m_isshaded = voi.get_isshaded();
        this->set_color(voi.get_color());
        this->set_seriesuid(voi.get_seriesuid());
        std::vector<RtContour*> cons = voi.get_contours();
        std::vector<RtContour*> cons_new;
        for (auto itr=cons.cbegin(); itr!=cons.cend(); ++itr) cons_new.push_back(new RtContour(*(*itr)));
        this->set_contours(cons_new);
    }
    return *this;
}

RtVoiImp::~RtVoiImp()
{
    for (auto itr=m_vtContour.begin(); itr!=m_vtContour.end(); ++itr) DEL_PTR(*itr);
    m_vtContour.clear();
}


//////////////////////////////////////////////////////////////////////////
RtVoi::RtVoi(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtVoiImp(bGeneraterUid);
    set_flags(VOI_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_VOI_FIELD_NULL);
}

RtVoi::RtVoi(const RtVoi& voi): RtDatabaseObject(voi),
   m_pImp(new RtVoiImp(*voi.m_pImp))
{
}

RtVoi& RtVoi::operator = (const RtVoi& voi)
{
    if(this != &voi)
    {
        RtDatabaseObject::operator=(voi);
        *this->m_pImp = *voi.m_pImp;
    }
    return *this;
}

RtVoi::~RtVoi()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtVoi::get_uid() const { return m_pImp->get_uid();}
void RtVoi::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(VOI_UID);
    setdirty_field(VOI_UID, true);
}

//structuresetuid
std::string RtVoi::get_structuresetuid() const { return m_pImp->get_structuresetuid();}
void RtVoi::set_structuresetuid(const std::string& structuresetuid)
{
    m_pImp->set_structuresetuid(structuresetuid);
    enable_field(VOI_STRUCTURESETUID);
    setdirty_field(VOI_STRUCTURESETUID, true);
}

//conceptualvolumeuid
std::string RtVoi::get_conceptualvolumeuid() const { return m_pImp->get_conceptualvolumeuid();}
void RtVoi::set_conceptualvolumeuid(const std::string& conceptualvolumeuid)
{
    m_pImp->set_conceptualvolumeuid(conceptualvolumeuid);
    enable_field(VOI_CONCEPTUALVOLUMEUID);
    setdirty_field(VOI_CONCEPTUALVOLUMEUID, true);
}

//name
std::string RtVoi::get_name() const { return m_pImp->get_name();}
void RtVoi::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(VOI_NAME);
    setdirty_field(VOI_NAME, true);
}

//isbolus
bool RtVoi::get_isbolus() const { return m_pImp->get_isbolus();}
void RtVoi::set_isbolus(const bool& isbolus)
{
    m_pImp->set_isbolus(isbolus);
    enable_field(VOI_ISBOLUS);
    setdirty_field(VOI_ISBOLUS, true);
}

//xcoordinate3dmax
float RtVoi::get_xcoordinate3dmax() const { return m_pImp->get_xcoordinate3dmax();}
void RtVoi::set_xcoordinate3dmax(const float& xcoordinate3dmax)
{
    m_pImp->set_xcoordinate3dmax(xcoordinate3dmax);
    enable_field(VOI_XCOORDINATE3DMAX);
    setdirty_field(VOI_XCOORDINATE3DMAX, true);
}

//ycoordinate3dmax
float RtVoi::get_ycoordinate3dmax() const { return m_pImp->get_ycoordinate3dmax();}
void RtVoi::set_ycoordinate3dmax(const float& ycoordinate3dmax)
{
    m_pImp->set_ycoordinate3dmax(ycoordinate3dmax);
    enable_field(VOI_YCOORDINATE3DMAX);
    setdirty_field(VOI_YCOORDINATE3DMAX, true);
}

//zcoordinate3dmax
float RtVoi::get_zcoordinate3dmax() const { return m_pImp->get_zcoordinate3dmax();}
void RtVoi::set_zcoordinate3dmax(const float& zcoordinate3dmax)
{
    m_pImp->set_zcoordinate3dmax(zcoordinate3dmax);
    enable_field(VOI_ZCOORDINATE3DMAX);
    setdirty_field(VOI_ZCOORDINATE3DMAX, true);
}

//xcoordinate3dmin
float RtVoi::get_xcoordinate3dmin() const { return m_pImp->get_xcoordinate3dmin();}
void RtVoi::set_xcoordinate3dmin(const float& xcoordinate3dmin)
{
    m_pImp->set_xcoordinate3dmin(xcoordinate3dmin);
    enable_field(VOI_XCOORDINATE3DMIN);
    setdirty_field(VOI_XCOORDINATE3DMIN, true);
}

//ycoordinate3dmin
float RtVoi::get_ycoordinate3dmin() const { return m_pImp->get_ycoordinate3dmin();}
void RtVoi::set_ycoordinate3dmin(const float& ycoordinate3dmin)
{
    m_pImp->set_ycoordinate3dmin(ycoordinate3dmin);
    enable_field(VOI_YCOORDINATE3DMIN);
    setdirty_field(VOI_YCOORDINATE3DMIN, true);
}

//zcoordinate3dmin
float RtVoi::get_zcoordinate3dmin() const { return m_pImp->get_zcoordinate3dmin();}
void RtVoi::set_zcoordinate3dmin(const float& zcoordinate3dmin)
{
    m_pImp->set_zcoordinate3dmin(zcoordinate3dmin);
    enable_field(VOI_ZCOORDINATE3DMIN);
    setdirty_field(VOI_ZCOORDINATE3DMIN, true);
}

//orientation
int RtVoi::get_orientation() const { return m_pImp->get_orientation();}
void RtVoi::set_orientation(const int& orientation)
{
    m_pImp->set_orientation(orientation);
    enable_field(VOI_ORIENTATION);
    setdirty_field(VOI_ORIENTATION, true);
}

//volume
float RtVoi::get_volume() const { return m_pImp->get_volume();}
void RtVoi::set_volume(const float& volume)
{
    m_pImp->set_volume(volume);
    enable_field(VOI_VOLUME);
    setdirty_field(VOI_VOLUME, true);
}

//density
float RtVoi::get_density() const { return m_pImp->get_density();}
void RtVoi::set_density(const float& density)
{
    m_pImp->set_density(density);
    enable_field(VOI_DENSITY);
    setdirty_field(VOI_DENSITY, true);
}

//lockuseruid
std::string RtVoi::get_lockuseruid() const { return m_pImp->get_lockuseruid();}
void RtVoi::set_lockuseruid(const std::string& lockuseruid)
{
    m_pImp->set_lockuseruid(lockuseruid);
    enable_field(VOI_LOCKUSERUID);
    setdirty_field(VOI_LOCKUSERUID, true);
}

//locktime
DATETIME_BOOST RtVoi::get_locktime() const { return m_pImp->get_locktime();}
void RtVoi::set_locktime(const DATETIME_BOOST& locktime)
{
    m_pImp->set_locktime(locktime);
    enable_field(VOI_LOCKTIME);
    setdirty_field(VOI_LOCKTIME, true);
}

//lockmacaddress
std::string RtVoi::get_lockmacaddress() const { return m_pImp->get_lockmacaddress();}
void RtVoi::set_lockmacaddress(const std::string& lockmacaddress)
{
    m_pImp->set_lockmacaddress(lockmacaddress);
    enable_field(VOI_LOCKMACADDRESS);
    setdirty_field(VOI_LOCKMACADDRESS, true);
}

//red

//green

//blue

//alpha

//averagedensity
float RtVoi::get_averagedensity() const { return m_pImp->get_averagedensity();}
void RtVoi::set_averagedensity(const float& averagedensity)
{
    m_pImp->set_averagedensity(averagedensity);
    enable_field(VOI_AVERAGEDENSITY);
    setdirty_field(VOI_AVERAGEDENSITY, true);
}

//maxdensity
float RtVoi::get_maxdensity() const { return m_pImp->get_maxdensity();}
void RtVoi::set_maxdensity(const float& maxdensity)
{
    m_pImp->set_maxdensity(maxdensity);
    enable_field(VOI_MAXDENSITY);
    setdirty_field(VOI_MAXDENSITY, true);
}

//mindensity
float RtVoi::get_mindensity() const { return m_pImp->get_mindensity();}
void RtVoi::set_mindensity(const float& mindensity)
{
    m_pImp->set_mindensity(mindensity);
    enable_field(VOI_MINDENSITY);
    setdirty_field(VOI_MINDENSITY, true);
}

//surfacearea
float RtVoi::get_surfacearea() const { return m_pImp->get_surfacearea();}
void RtVoi::set_surfacearea(const float& surfacearea)
{
    m_pImp->set_surfacearea(surfacearea);
    enable_field(VOI_SURFACEAREA);
    setdirty_field(VOI_SURFACEAREA, true);
}

//centroidx
float RtVoi::get_centroidx() const { return m_pImp->get_centroidx();}
void RtVoi::set_centroidx(const float& centroidx)
{
    m_pImp->set_centroidx(centroidx);
    enable_field(VOI_CENTROIDX);
    setdirty_field(VOI_CENTROIDX, true);
}

//centroidy
float RtVoi::get_centroidy() const { return m_pImp->get_centroidy();}
void RtVoi::set_centroidy(const float& centroidy)
{
    m_pImp->set_centroidy(centroidy);
    enable_field(VOI_CENTROIDY);
    setdirty_field(VOI_CENTROIDY, true);
}

//centroidz
float RtVoi::get_centroidz() const { return m_pImp->get_centroidz();}
void RtVoi::set_centroidz(const float& centroidz)
{
    m_pImp->set_centroidz(centroidz);
    enable_field(VOI_CENTROIDZ);
    setdirty_field(VOI_CENTROIDZ, true);
}

//voirole
int RtVoi::get_voirole() const { return m_pImp->get_voirole();}
void RtVoi::set_voirole(const int& voirole)
{
    m_pImp->set_voirole(voirole);
    enable_field(VOI_VOIROLE);
    setdirty_field(VOI_VOIROLE, true);
}

//standarddeviation
float RtVoi::get_standarddeviation() const { return m_pImp->get_standarddeviation();}
void RtVoi::set_standarddeviation(const float& standarddeviation)
{
    m_pImp->set_standarddeviation(standarddeviation);
    enable_field(VOI_STANDARDDEVIATION);
    setdirty_field(VOI_STANDARDDEVIATION, true);
}

//isvisible
bool RtVoi::get_isvisible() const { return m_pImp->get_isvisible();}
void RtVoi::set_isvisible(const bool& isvisible)
{
    m_pImp->set_isvisible(isvisible);
    enable_field(VOI_ISVISIBLE);
    setdirty_field(VOI_ISVISIBLE, true);
}

//rtroiinterpretedtype
int RtVoi::get_rtroiinterpretedtype() const { return m_pImp->get_rtroiinterpretedtype();}
void RtVoi::set_rtroiinterpretedtype(const int& rtroiinterpretedtype)
{
    m_pImp->set_rtroiinterpretedtype(rtroiinterpretedtype);
    enable_field(VOI_RTROIINTERPRETEDTYPE);
    setdirty_field(VOI_RTROIINTERPRETEDTYPE, true);
}

//roiinterpreter
std::string RtVoi::get_roiinterpreter() const { return m_pImp->get_roiinterpreter();}
void RtVoi::set_roiinterpreter(const std::string& roiinterpreter)
{
    m_pImp->set_roiinterpreter(roiinterpreter);
    enable_field(VOI_ROIINTERPRETER);
    setdirty_field(VOI_ROIINTERPRETER, true);
}

//referencesubvolumeoffsetx
int RtVoi::get_referencesubvolumeoffsetx() const { return m_pImp->get_referencesubvolumeoffsetx();}
void RtVoi::set_referencesubvolumeoffsetx(const int& referencesubvolumeoffsetx)
{
    m_pImp->set_referencesubvolumeoffsetx(referencesubvolumeoffsetx);
    enable_field(VOI_REFERENCESUBVOLUMEOFFSETX);
    setdirty_field(VOI_REFERENCESUBVOLUMEOFFSETX, true);
}

//referencesubvolumeoffsety
int RtVoi::get_referencesubvolumeoffsety() const { return m_pImp->get_referencesubvolumeoffsety();}
void RtVoi::set_referencesubvolumeoffsety(const int& referencesubvolumeoffsety)
{
    m_pImp->set_referencesubvolumeoffsety(referencesubvolumeoffsety);
    enable_field(VOI_REFERENCESUBVOLUMEOFFSETY);
    setdirty_field(VOI_REFERENCESUBVOLUMEOFFSETY, true);
}

//referencesubvolumeoffsetz
int RtVoi::get_referencesubvolumeoffsetz() const { return m_pImp->get_referencesubvolumeoffsetz();}
void RtVoi::set_referencesubvolumeoffsetz(const int& referencesubvolumeoffsetz)
{
    m_pImp->set_referencesubvolumeoffsetz(referencesubvolumeoffsetz);
    enable_field(VOI_REFERENCESUBVOLUMEOFFSETZ);
    setdirty_field(VOI_REFERENCESUBVOLUMEOFFSETZ, true);
}

//referencesubvolumesizex
int RtVoi::get_referencesubvolumesizex() const { return m_pImp->get_referencesubvolumesizex();}
void RtVoi::set_referencesubvolumesizex(const int& referencesubvolumesizex)
{
    m_pImp->set_referencesubvolumesizex(referencesubvolumesizex);
    enable_field(VOI_REFERENCESUBVOLUMESIZEX);
    setdirty_field(VOI_REFERENCESUBVOLUMESIZEX, true);
}

//referencesubvolumesizey
int RtVoi::get_referencesubvolumesizey() const { return m_pImp->get_referencesubvolumesizey();}
void RtVoi::set_referencesubvolumesizey(const int& referencesubvolumesizey)
{
    m_pImp->set_referencesubvolumesizey(referencesubvolumesizey);
    enable_field(VOI_REFERENCESUBVOLUMESIZEY);
    setdirty_field(VOI_REFERENCESUBVOLUMESIZEY, true);
}

//referencesubvolumesizez
int RtVoi::get_referencesubvolumesizez() const { return m_pImp->get_referencesubvolumesizez();}
void RtVoi::set_referencesubvolumesizez(const int& referencesubvolumesizez)
{
    m_pImp->set_referencesubvolumesizez(referencesubvolumesizez);
    enable_field(VOI_REFERENCESUBVOLUMESIZEZ);
    setdirty_field(VOI_REFERENCESUBVOLUMESIZEZ, true);
}

//referencesubvolumedatafilepath
std::string RtVoi::get_referencesubvolumedatafilepath() const { return m_pImp->get_referencesubvolumedatafilepath();}
void RtVoi::set_referencesubvolumedatafilepath(const std::string& referencesubvolumedatafilepath)
{
    m_pImp->set_referencesubvolumedatafilepath(referencesubvolumedatafilepath);
    enable_field(VOI_REFERENCESUBVOLUMEDATAFILEPATH);
    setdirty_field(VOI_REFERENCESUBVOLUMEDATAFILEPATH, true);
}

//pat2volumematrix

//interpolate

//locktype
int RtVoi::get_locktype() const { return m_pImp->get_locktype();}
void RtVoi::set_locktype(const int& locktype)
{
    m_pImp->set_locktype(locktype);
    enable_field(VOI_LOCKTYPE);
    setdirty_field(VOI_LOCKTYPE, true);
}

//planningrole
int RtVoi::get_planningrole() const { return m_pImp->get_planningrole();}
void RtVoi::set_planningrole(const int& planningrole)
{
    m_pImp->set_planningrole(planningrole);
    enable_field(VOI_PLANNINGROLE);
    setdirty_field(VOI_PLANNINGROLE, true);
}

//subrole
int RtVoi::get_subrole() const { return m_pImp->get_subrole();}
void RtVoi::set_subrole(const int& subrole)
{
    m_pImp->set_subrole(subrole);
    enable_field(VOI_SUBROLE);
    setdirty_field(VOI_SUBROLE, true);
}

//overridedenstiy
float RtVoi::get_overridedenstiy() const { return m_pImp->get_overridedenstiy();}
void RtVoi::set_overridedenstiy(const float& overridedenstiy)
{
    m_pImp->set_overridedenstiy(overridedenstiy);
    enable_field(VOI_OVERRIDEDENSTIY);
    setdirty_field(VOI_OVERRIDEDENSTIY, true);
}

//tcpntcp
float RtVoi::get_tcpntcp() const { return m_pImp->get_tcpntcp();}
void RtVoi::set_tcpntcp(const float& tcpntcp)
{
    m_pImp->set_tcpntcp(tcpntcp);
    enable_field(VOI_TCPNTCP);
    setdirty_field(VOI_TCPNTCP, true);
}

//isoverride
bool RtVoi::get_isoverride() const { return m_pImp->get_isoverride();}
void RtVoi::set_isoverride(const bool& isoverride)
{
    m_pImp->set_isoverride(isoverride);
    enable_field(VOI_ISOVERRIDE);
    setdirty_field(VOI_ISOVERRIDE, true);
}

//description
std::string RtVoi::get_description() const { return m_pImp->get_description();}
void RtVoi::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(VOI_DESCRIPTION);
    setdirty_field(VOI_DESCRIPTION, true);
}

//alpha3d
float RtVoi::get_alpha3d() const { return m_pImp->get_alpha3d();}
void RtVoi::set_alpha3d(const float& alpha3d)
{
    m_pImp->set_alpha3d(alpha3d);
    enable_field(VOI_ALPHA3D);
    setdirty_field(VOI_ALPHA3D, true);
}

//roinumberindcm
int RtVoi::get_roinumberindcm() const { return m_pImp->get_roinumberindcm();}
void RtVoi::set_roinumberindcm(const int& roinumberindcm)
{
    m_pImp->set_roinumberindcm(roinumberindcm);
    enable_field(VOI_ROINUMBERINDCM);
    setdirty_field(VOI_ROINUMBERINDCM, true);
}

//updatetime
DATETIME_BOOST RtVoi::get_updatetime() const { return m_pImp->get_updatetime();}
void RtVoi::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(VOI_UPDATETIME);
    setdirty_field(VOI_UPDATETIME, true);
}

//softwareversionno
std::string RtVoi::get_softwareversionno() const { return m_pImp->get_softwareversionno();}
void RtVoi::set_softwareversionno(const std::string& softwareversionno)
{
    m_pImp->set_softwareversionno(softwareversionno);
    enable_field(VOI_SOFTWAREVERSIONNO);
    setdirty_field(VOI_SOFTWAREVERSIONNO, true);
}

//isshaded
bool RtVoi::get_isshaded() const { return m_pImp->get_isshaded();}
void RtVoi::set_isshaded(const bool& isshaded)
{
    m_pImp->set_isshaded(isshaded);
    enable_field(VOI_ISSHADED);
    setdirty_field(VOI_ISSHADED, true);
}
//////////////////////////////////////////////////////////////////////////
const float* RtVoi::get_color() const { return m_pImp->get_color();}
void RtVoi::set_color(const float* color) 
{
    m_pImp->set_color(color);
    enable_field(VOI_RED);
    setdirty_field(VOI_RED, true);
    enable_field(VOI_GREEN);
    setdirty_field(VOI_GREEN, true);
    enable_field(VOI_BLUE);
    setdirty_field(VOI_BLUE, true);
}

const float* RtVoi::get_pat2volumematrix() const {return m_pImp->get_pat2volumematrix();}
void RtVoi::set_pat2volumematrix(const float* value) 
{
    m_pImp->set_pat2volumematrix(value);
    enable_field(VOI_PAT2VOLUMEMATRIX);
    setdirty_field(VOI_PAT2VOLUMEMATRIX, true);
}

std::vector<bool> RtVoi::get_interpolate() const {return m_pImp->get_interpolate();}
void RtVoi::set_interpolate(const std::vector<bool>& value) 
{
    m_pImp->set_interpolate(value);
    enable_field(VOI_INTERPOLATE);
    setdirty_field(VOI_INTERPOLATE, true);
}

std::vector<RtContour*> RtVoi::get_contours() const {return m_pImp->get_contours();}
std::vector<RtContour*> RtVoi::get_contours() {return m_pImp->get_contours();}
void RtVoi::set_contours(const std::vector<RtContour*>& vtContour) 
{
    m_pImp->set_contours(vtContour);
}

std::string RtVoi::get_seriesuid() const {return m_pImp->get_seriesuid();}
void RtVoi::set_seriesuid(const std::string& seriesuid) 
{
    m_pImp->set_seriesuid(seriesuid);
}

RT_TPS_DATABASE_END_NAMESPACE