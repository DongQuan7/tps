//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_accessory.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_accessory.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtAccessoryImp::RtAccessoryImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_machineuid(""),
    m_name(""),
    m_code(""),
    m_accessorytype(0),
    m_wedgeorientation(0),
    m_independent_jaw1(0),
    m_min1_jaw1(0.f),
    m_max1_jaw1(0.f),
    m_min2_jaw1(0.f),
    m_max2_jaw1(0.f),
    m_minw_jaw1(0.f),
    m_maxw_jaw1(0.f),
    m_sdd_jaw1(0.f),
    m_name1_jaw1(""),
    m_name2_jaw1(""),
    m_min1_jaw2(0.f),
    m_max1_jaw2(0.f),
    m_min2_jaw2(0.f),
    m_max2_jaw2(0.f),
    m_minw_jaw2(0.f),
    m_maxw_jaw2(0.f),
    m_sdd_jaw2(0.f),
    m_name1_jaw2(""),
    m_name2_jaw2(""),
    m_filtertobeam(""),
    m_beamtofilter(""),
    m_wedgeangle(0.f),
    m_datatype(0),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtAccessoryImp::RtAccessoryImp(const RtAccessoryImp& accessory):
    m_uid(accessory.get_uid()),
    m_machineuid(accessory.get_machineuid()),
    m_name(accessory.get_name()),
    m_code(accessory.get_code()),
    m_accessorytype(accessory.get_accessorytype()),
    m_wedgeorientation(accessory.get_wedgeorientation()),
    m_independent_jaw1(accessory.get_independent_jaw1()),
    m_min1_jaw1(accessory.get_min1_jaw1()),
    m_max1_jaw1(accessory.get_max1_jaw1()),
    m_min2_jaw1(accessory.get_min2_jaw1()),
    m_max2_jaw1(accessory.get_max2_jaw1()),
    m_minw_jaw1(accessory.get_minw_jaw1()),
    m_maxw_jaw1(accessory.get_maxw_jaw1()),
    m_sdd_jaw1(accessory.get_sdd_jaw1()),
    m_name1_jaw1(accessory.get_name1_jaw1()),
    m_name2_jaw1(accessory.get_name2_jaw1()),
    m_min1_jaw2(accessory.get_min1_jaw2()),
    m_max1_jaw2(accessory.get_max1_jaw2()),
    m_min2_jaw2(accessory.get_min2_jaw2()),
    m_max2_jaw2(accessory.get_max2_jaw2()),
    m_minw_jaw2(accessory.get_minw_jaw2()),
    m_maxw_jaw2(accessory.get_maxw_jaw2()),
    m_sdd_jaw2(accessory.get_sdd_jaw2()),
    m_name1_jaw2(accessory.get_name1_jaw2()),
    m_name2_jaw2(accessory.get_name2_jaw2()),
    m_filtertobeam(accessory.get_filtertobeam()),
    m_beamtofilter(accessory.get_beamtofilter()),
    m_wedgeangle(accessory.get_wedgeangle()),
    m_datatype(accessory.get_datatype()),
    m_crc(accessory.get_crc()),
    m_updatetime(accessory.get_updatetime())
{
}

RtAccessoryImp& RtAccessoryImp::operator=(const RtAccessoryImp& accessory)
{
    if (this != &accessory){
        this->m_uid = accessory.get_uid();
        this->m_machineuid = accessory.get_machineuid();
        this->m_name = accessory.get_name();
        this->m_code = accessory.get_code();
        this->m_accessorytype = accessory.get_accessorytype();
        this->m_wedgeorientation = accessory.get_wedgeorientation();
        this->m_independent_jaw1 = accessory.get_independent_jaw1();
        this->m_min1_jaw1 = accessory.get_min1_jaw1();
        this->m_max1_jaw1 = accessory.get_max1_jaw1();
        this->m_min2_jaw1 = accessory.get_min2_jaw1();
        this->m_max2_jaw1 = accessory.get_max2_jaw1();
        this->m_minw_jaw1 = accessory.get_minw_jaw1();
        this->m_maxw_jaw1 = accessory.get_maxw_jaw1();
        this->m_sdd_jaw1 = accessory.get_sdd_jaw1();
        this->m_name1_jaw1 = accessory.get_name1_jaw1();
        this->m_name2_jaw1 = accessory.get_name2_jaw1();
        this->m_min1_jaw2 = accessory.get_min1_jaw2();
        this->m_max1_jaw2 = accessory.get_max1_jaw2();
        this->m_min2_jaw2 = accessory.get_min2_jaw2();
        this->m_max2_jaw2 = accessory.get_max2_jaw2();
        this->m_minw_jaw2 = accessory.get_minw_jaw2();
        this->m_maxw_jaw2 = accessory.get_maxw_jaw2();
        this->m_sdd_jaw2 = accessory.get_sdd_jaw2();
        this->m_name1_jaw2 = accessory.get_name1_jaw2();
        this->m_name2_jaw2 = accessory.get_name2_jaw2();
        this->m_filtertobeam = accessory.get_filtertobeam();
        this->m_beamtofilter = accessory.get_beamtofilter();
        this->m_wedgeangle = accessory.get_wedgeangle();
        this->m_datatype = accessory.get_datatype();
        this->m_crc = accessory.get_crc();
        this->m_updatetime = accessory.get_updatetime();
    }
    return *this;
}

RtAccessoryImp::~RtAccessoryImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtAccessory::RtAccessory(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtAccessoryImp(bGeneraterUid);
    set_flags(ACCESSORY_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_ACCESSORY_FIELD_NULL);
}

RtAccessory::RtAccessory(const RtAccessory& accessory): RtDatabaseObject(accessory),
   m_pImp(new RtAccessoryImp(*accessory.m_pImp))
{
}

RtAccessory& RtAccessory::operator = (const RtAccessory& accessory)
{
    if(this != &accessory)
    {
        RtDatabaseObject::operator=(accessory);
        *this->m_pImp = *accessory.m_pImp;
    }
    return *this;
}

RtAccessory::~RtAccessory()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtAccessory::get_uid() const { return m_pImp->get_uid();}
void RtAccessory::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(ACCESSORY_UID);
    setdirty_field(ACCESSORY_UID, true);
}

//machineuid
std::string RtAccessory::get_machineuid() const { return m_pImp->get_machineuid();}
void RtAccessory::set_machineuid(const std::string& machineuid)
{
    m_pImp->set_machineuid(machineuid);
    enable_field(ACCESSORY_MACHINEUID);
    setdirty_field(ACCESSORY_MACHINEUID, true);
}

//name
std::string RtAccessory::get_name() const { return m_pImp->get_name();}
void RtAccessory::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(ACCESSORY_NAME);
    setdirty_field(ACCESSORY_NAME, true);
}

//code
std::string RtAccessory::get_code() const { return m_pImp->get_code();}
void RtAccessory::set_code(const std::string& code)
{
    m_pImp->set_code(code);
    enable_field(ACCESSORY_CODE);
    setdirty_field(ACCESSORY_CODE, true);
}

//accessorytype
int RtAccessory::get_accessorytype() const { return m_pImp->get_accessorytype();}
void RtAccessory::set_accessorytype(const int& accessorytype)
{
    m_pImp->set_accessorytype(accessorytype);
    enable_field(ACCESSORY_ACCESSORYTYPE);
    setdirty_field(ACCESSORY_ACCESSORYTYPE, true);
}

//wedgeorientation
int RtAccessory::get_wedgeorientation() const { return m_pImp->get_wedgeorientation();}
void RtAccessory::set_wedgeorientation(const int& wedgeorientation)
{
    m_pImp->set_wedgeorientation(wedgeorientation);
    enable_field(ACCESSORY_WEDGEORIENTATION);
    setdirty_field(ACCESSORY_WEDGEORIENTATION, true);
}

//independent_jaw1
int RtAccessory::get_independent_jaw1() const { return m_pImp->get_independent_jaw1();}
void RtAccessory::set_independent_jaw1(const int& independent_jaw1)
{
    m_pImp->set_independent_jaw1(independent_jaw1);
    enable_field(ACCESSORY_INDEPENDENT_JAW1);
    setdirty_field(ACCESSORY_INDEPENDENT_JAW1, true);
}

//min1_jaw1
float RtAccessory::get_min1_jaw1() const { return m_pImp->get_min1_jaw1();}
void RtAccessory::set_min1_jaw1(const float& min1_jaw1)
{
    m_pImp->set_min1_jaw1(min1_jaw1);
    enable_field(ACCESSORY_MIN1_JAW1);
    setdirty_field(ACCESSORY_MIN1_JAW1, true);
}

//max1_jaw1
float RtAccessory::get_max1_jaw1() const { return m_pImp->get_max1_jaw1();}
void RtAccessory::set_max1_jaw1(const float& max1_jaw1)
{
    m_pImp->set_max1_jaw1(max1_jaw1);
    enable_field(ACCESSORY_MAX1_JAW1);
    setdirty_field(ACCESSORY_MAX1_JAW1, true);
}

//min2_jaw1
float RtAccessory::get_min2_jaw1() const { return m_pImp->get_min2_jaw1();}
void RtAccessory::set_min2_jaw1(const float& min2_jaw1)
{
    m_pImp->set_min2_jaw1(min2_jaw1);
    enable_field(ACCESSORY_MIN2_JAW1);
    setdirty_field(ACCESSORY_MIN2_JAW1, true);
}

//max2_jaw1
float RtAccessory::get_max2_jaw1() const { return m_pImp->get_max2_jaw1();}
void RtAccessory::set_max2_jaw1(const float& max2_jaw1)
{
    m_pImp->set_max2_jaw1(max2_jaw1);
    enable_field(ACCESSORY_MAX2_JAW1);
    setdirty_field(ACCESSORY_MAX2_JAW1, true);
}

//minw_jaw1
float RtAccessory::get_minw_jaw1() const { return m_pImp->get_minw_jaw1();}
void RtAccessory::set_minw_jaw1(const float& minw_jaw1)
{
    m_pImp->set_minw_jaw1(minw_jaw1);
    enable_field(ACCESSORY_MINW_JAW1);
    setdirty_field(ACCESSORY_MINW_JAW1, true);
}

//maxw_jaw1
float RtAccessory::get_maxw_jaw1() const { return m_pImp->get_maxw_jaw1();}
void RtAccessory::set_maxw_jaw1(const float& maxw_jaw1)
{
    m_pImp->set_maxw_jaw1(maxw_jaw1);
    enable_field(ACCESSORY_MAXW_JAW1);
    setdirty_field(ACCESSORY_MAXW_JAW1, true);
}

//sdd_jaw1
float RtAccessory::get_sdd_jaw1() const { return m_pImp->get_sdd_jaw1();}
void RtAccessory::set_sdd_jaw1(const float& sdd_jaw1)
{
    m_pImp->set_sdd_jaw1(sdd_jaw1);
    enable_field(ACCESSORY_SDD_JAW1);
    setdirty_field(ACCESSORY_SDD_JAW1, true);
}

//name1_jaw1
std::string RtAccessory::get_name1_jaw1() const { return m_pImp->get_name1_jaw1();}
void RtAccessory::set_name1_jaw1(const std::string& name1_jaw1)
{
    m_pImp->set_name1_jaw1(name1_jaw1);
    enable_field(ACCESSORY_NAME1_JAW1);
    setdirty_field(ACCESSORY_NAME1_JAW1, true);
}

//name2_jaw1
std::string RtAccessory::get_name2_jaw1() const { return m_pImp->get_name2_jaw1();}
void RtAccessory::set_name2_jaw1(const std::string& name2_jaw1)
{
    m_pImp->set_name2_jaw1(name2_jaw1);
    enable_field(ACCESSORY_NAME2_JAW1);
    setdirty_field(ACCESSORY_NAME2_JAW1, true);
}

//min1_jaw2
float RtAccessory::get_min1_jaw2() const { return m_pImp->get_min1_jaw2();}
void RtAccessory::set_min1_jaw2(const float& min1_jaw2)
{
    m_pImp->set_min1_jaw2(min1_jaw2);
    enable_field(ACCESSORY_MIN1_JAW2);
    setdirty_field(ACCESSORY_MIN1_JAW2, true);
}

//max1_jaw2
float RtAccessory::get_max1_jaw2() const { return m_pImp->get_max1_jaw2();}
void RtAccessory::set_max1_jaw2(const float& max1_jaw2)
{
    m_pImp->set_max1_jaw2(max1_jaw2);
    enable_field(ACCESSORY_MAX1_JAW2);
    setdirty_field(ACCESSORY_MAX1_JAW2, true);
}

//min2_jaw2
float RtAccessory::get_min2_jaw2() const { return m_pImp->get_min2_jaw2();}
void RtAccessory::set_min2_jaw2(const float& min2_jaw2)
{
    m_pImp->set_min2_jaw2(min2_jaw2);
    enable_field(ACCESSORY_MIN2_JAW2);
    setdirty_field(ACCESSORY_MIN2_JAW2, true);
}

//max2_jaw2
float RtAccessory::get_max2_jaw2() const { return m_pImp->get_max2_jaw2();}
void RtAccessory::set_max2_jaw2(const float& max2_jaw2)
{
    m_pImp->set_max2_jaw2(max2_jaw2);
    enable_field(ACCESSORY_MAX2_JAW2);
    setdirty_field(ACCESSORY_MAX2_JAW2, true);
}

//minw_jaw2
float RtAccessory::get_minw_jaw2() const { return m_pImp->get_minw_jaw2();}
void RtAccessory::set_minw_jaw2(const float& minw_jaw2)
{
    m_pImp->set_minw_jaw2(minw_jaw2);
    enable_field(ACCESSORY_MINW_JAW2);
    setdirty_field(ACCESSORY_MINW_JAW2, true);
}

//maxw_jaw2
float RtAccessory::get_maxw_jaw2() const { return m_pImp->get_maxw_jaw2();}
void RtAccessory::set_maxw_jaw2(const float& maxw_jaw2)
{
    m_pImp->set_maxw_jaw2(maxw_jaw2);
    enable_field(ACCESSORY_MAXW_JAW2);
    setdirty_field(ACCESSORY_MAXW_JAW2, true);
}

//sdd_jaw2
float RtAccessory::get_sdd_jaw2() const { return m_pImp->get_sdd_jaw2();}
void RtAccessory::set_sdd_jaw2(const float& sdd_jaw2)
{
    m_pImp->set_sdd_jaw2(sdd_jaw2);
    enable_field(ACCESSORY_SDD_JAW2);
    setdirty_field(ACCESSORY_SDD_JAW2, true);
}

//name1_jaw2
std::string RtAccessory::get_name1_jaw2() const { return m_pImp->get_name1_jaw2();}
void RtAccessory::set_name1_jaw2(const std::string& name1_jaw2)
{
    m_pImp->set_name1_jaw2(name1_jaw2);
    enable_field(ACCESSORY_NAME1_JAW2);
    setdirty_field(ACCESSORY_NAME1_JAW2, true);
}

//name2_jaw2
std::string RtAccessory::get_name2_jaw2() const { return m_pImp->get_name2_jaw2();}
void RtAccessory::set_name2_jaw2(const std::string& name2_jaw2)
{
    m_pImp->set_name2_jaw2(name2_jaw2);
    enable_field(ACCESSORY_NAME2_JAW2);
    setdirty_field(ACCESSORY_NAME2_JAW2, true);
}

//filtertobeam
std::string RtAccessory::get_filtertobeam() const { return m_pImp->get_filtertobeam();}
void RtAccessory::set_filtertobeam(const std::string& filtertobeam)
{
    m_pImp->set_filtertobeam(filtertobeam);
    enable_field(ACCESSORY_FILTERTOBEAM);
    setdirty_field(ACCESSORY_FILTERTOBEAM, true);
}

//beamtofilter
std::string RtAccessory::get_beamtofilter() const { return m_pImp->get_beamtofilter();}
void RtAccessory::set_beamtofilter(const std::string& beamtofilter)
{
    m_pImp->set_beamtofilter(beamtofilter);
    enable_field(ACCESSORY_BEAMTOFILTER);
    setdirty_field(ACCESSORY_BEAMTOFILTER, true);
}

//wedgeangle
float RtAccessory::get_wedgeangle() const { return m_pImp->get_wedgeangle();}
void RtAccessory::set_wedgeangle(const float& wedgeangle)
{
    m_pImp->set_wedgeangle(wedgeangle);
    enable_field(ACCESSORY_WEDGEANGLE);
    setdirty_field(ACCESSORY_WEDGEANGLE, true);
}

//datatype
int RtAccessory::get_datatype() const { return m_pImp->get_datatype();}
void RtAccessory::set_datatype(const int& datatype)
{
    m_pImp->set_datatype(datatype);
    enable_field(ACCESSORY_DATATYPE);
    setdirty_field(ACCESSORY_DATATYPE, true);
}

//crc
std::string RtAccessory::get_crc() const { return m_pImp->get_crc();}
void RtAccessory::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(ACCESSORY_CRC);
    setdirty_field(ACCESSORY_CRC, true);
}

//updatetime
DATETIME_BOOST RtAccessory::get_updatetime() const { return m_pImp->get_updatetime();}
void RtAccessory::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(ACCESSORY_UPDATETIME);
    setdirty_field(ACCESSORY_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE