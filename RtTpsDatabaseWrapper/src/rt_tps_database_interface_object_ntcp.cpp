//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_ntcp.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_ntcp.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtNtcpImp::RtNtcpImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_name(""),
    m_biomodel(""),
    m_d50(0.),
    m_m(0.f),
    m_n(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtNtcpImp::RtNtcpImp(const RtNtcpImp& ntcp):
    m_uid(ntcp.get_uid()),
    m_name(ntcp.get_name()),
    m_biomodel(ntcp.get_biomodel()),
    m_d50(ntcp.get_d50()),
    m_m(ntcp.get_m()),
    m_n(ntcp.get_n()),
    m_updatetime(ntcp.get_updatetime())
{
}

RtNtcpImp& RtNtcpImp::operator=(const RtNtcpImp& ntcp)
{
    if (this != &ntcp){
        this->m_uid = ntcp.get_uid();
        this->m_name = ntcp.get_name();
        this->m_biomodel = ntcp.get_biomodel();
        this->m_d50 = ntcp.get_d50();
        this->m_m = ntcp.get_m();
        this->m_n = ntcp.get_n();
        this->m_updatetime = ntcp.get_updatetime();
    }
    return *this;
}

RtNtcpImp::~RtNtcpImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtNtcp::RtNtcp(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtNtcpImp(bGeneraterUid);
    set_flags(NTCP_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_NTCP_FIELD_NULL);
}

RtNtcp::RtNtcp(const RtNtcp& ntcp): RtDatabaseObject(ntcp),
   m_pImp(new RtNtcpImp(*ntcp.m_pImp))
{
}

RtNtcp& RtNtcp::operator = (const RtNtcp& ntcp)
{
    if(this != &ntcp)
    {
        RtDatabaseObject::operator=(ntcp);
        *this->m_pImp = *ntcp.m_pImp;
    }
    return *this;
}

RtNtcp::~RtNtcp()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtNtcp::get_uid() const { return m_pImp->get_uid();}
void RtNtcp::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(NTCP_UID);
    setdirty_field(NTCP_UID, true);
}

//name
std::string RtNtcp::get_name() const { return m_pImp->get_name();}
void RtNtcp::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(NTCP_NAME);
    setdirty_field(NTCP_NAME, true);
}

//biomodel
std::string RtNtcp::get_biomodel() const { return m_pImp->get_biomodel();}
void RtNtcp::set_biomodel(const std::string& biomodel)
{
    m_pImp->set_biomodel(biomodel);
    enable_field(NTCP_BIOMODEL);
    setdirty_field(NTCP_BIOMODEL, true);
}

//d50
double RtNtcp::get_d50() const { return m_pImp->get_d50();}
void RtNtcp::set_d50(const double& d50)
{
    m_pImp->set_d50(d50);
    enable_field(NTCP_D50);
    setdirty_field(NTCP_D50, true);
}

//m
float RtNtcp::get_m() const { return m_pImp->get_m();}
void RtNtcp::set_m(const float& m)
{
    m_pImp->set_m(m);
    enable_field(NTCP_M);
    setdirty_field(NTCP_M, true);
}

//n
float RtNtcp::get_n() const { return m_pImp->get_n();}
void RtNtcp::set_n(const float& n)
{
    m_pImp->set_n(n);
    enable_field(NTCP_N);
    setdirty_field(NTCP_N, true);
}

//updatetime
DATETIME_BOOST RtNtcp::get_updatetime() const { return m_pImp->get_updatetime();}
void RtNtcp::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(NTCP_UPDATETIME);
    setdirty_field(NTCP_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE