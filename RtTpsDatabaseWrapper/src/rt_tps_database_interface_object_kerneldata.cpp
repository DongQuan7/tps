//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_kerneldata.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_kerneldata.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtKerneldataImp::RtKerneldataImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_energyofbeam(0),
    m_kerneldataid(0),
    m_kerneldata(""),
    m_kerneldatalength(0),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtKerneldataImp::RtKerneldataImp(const RtKerneldataImp& kerneldata):
    m_uid(kerneldata.get_uid()),
    m_energyofbeam(kerneldata.get_energyofbeam()),
    m_kerneldataid(kerneldata.get_kerneldataid()),
    m_kerneldata(kerneldata.get_kerneldata()),
    m_kerneldatalength(kerneldata.get_kerneldatalength()),
    m_crc(kerneldata.get_crc()),
    m_updatetime(kerneldata.get_updatetime())
{
}

RtKerneldataImp& RtKerneldataImp::operator=(const RtKerneldataImp& kerneldata)
{
    if (this != &kerneldata){
        this->m_uid = kerneldata.get_uid();
        this->m_energyofbeam = kerneldata.get_energyofbeam();
        this->m_kerneldataid = kerneldata.get_kerneldataid();
        this->m_kerneldata = kerneldata.get_kerneldata();
        this->m_kerneldatalength = kerneldata.get_kerneldatalength();
        this->m_crc = kerneldata.get_crc();
        this->m_updatetime = kerneldata.get_updatetime();
    }
    return *this;
}

RtKerneldataImp::~RtKerneldataImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtKerneldata::RtKerneldata(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtKerneldataImp(bGeneraterUid);
    set_flags(KERNELDATA_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_KERNELDATA_FIELD_NULL);
}

RtKerneldata::RtKerneldata(const RtKerneldata& kerneldata): RtDatabaseObject(kerneldata),
   m_pImp(new RtKerneldataImp(*kerneldata.m_pImp))
{
}

RtKerneldata& RtKerneldata::operator = (const RtKerneldata& kerneldata)
{
    if(this != &kerneldata)
    {
        RtDatabaseObject::operator=(kerneldata);
        *this->m_pImp = *kerneldata.m_pImp;
    }
    return *this;
}

RtKerneldata::~RtKerneldata()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtKerneldata::get_uid() const { return m_pImp->get_uid();}
void RtKerneldata::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(KERNELDATA_UID);
    setdirty_field(KERNELDATA_UID, true);
}

//energyofbeam
int RtKerneldata::get_energyofbeam() const { return m_pImp->get_energyofbeam();}
void RtKerneldata::set_energyofbeam(const int& energyofbeam)
{
    m_pImp->set_energyofbeam(energyofbeam);
    enable_field(KERNELDATA_ENERGYOFBEAM);
    setdirty_field(KERNELDATA_ENERGYOFBEAM, true);
}

//kerneldataid
int RtKerneldata::get_kerneldataid() const { return m_pImp->get_kerneldataid();}
void RtKerneldata::set_kerneldataid(const int& kerneldataid)
{
    m_pImp->set_kerneldataid(kerneldataid);
    enable_field(KERNELDATA_KERNELDATAID);
    setdirty_field(KERNELDATA_KERNELDATAID, true);
}

//kerneldata
std::string RtKerneldata::get_kerneldata() const { return m_pImp->get_kerneldata();}
void RtKerneldata::set_kerneldata(const std::string& kerneldata)
{
    m_pImp->set_kerneldata(kerneldata);
    enable_field(KERNELDATA_KERNELDATA);
    setdirty_field(KERNELDATA_KERNELDATA, true);
}

//kerneldatalength
int RtKerneldata::get_kerneldatalength() const { return m_pImp->get_kerneldatalength();}
void RtKerneldata::set_kerneldatalength(const int& kerneldatalength)
{
    m_pImp->set_kerneldatalength(kerneldatalength);
    enable_field(KERNELDATA_KERNELDATALENGTH);
    setdirty_field(KERNELDATA_KERNELDATALENGTH, true);
}

//crc
std::string RtKerneldata::get_crc() const { return m_pImp->get_crc();}
void RtKerneldata::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(KERNELDATA_CRC);
    setdirty_field(KERNELDATA_CRC, true);
}

//updatetime
DATETIME_BOOST RtKerneldata::get_updatetime() const { return m_pImp->get_updatetime();}
void RtKerneldata::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(KERNELDATA_UPDATETIME);
    setdirty_field(KERNELDATA_UPDATETIME, true);
}

//////////////////////////////////////////////////////////////////////////
std::vector<float> RtKerneldata::get_kerneldata_list() const { return m_pImp->get_kerneldata_list();}
void RtKerneldata::set_kerneldata_list(const std::vector<float>& kernaldata) 
{
    m_pImp->set_kerneldata_list(kernaldata);
    enable_field(KERNELDATA_KERNELDATA);
    setdirty_field(KERNELDATA_KERNELDATA, true);
}


RT_TPS_DATABASE_END_NAMESPACE