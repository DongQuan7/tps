//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_commissionedunit.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.5
///
///  \version 1.0
///  \date    4/18/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_commissionedunit.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtCommissionedunitImp::RtCommissionedunitImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_machineuid(""),
    m_kerneldatalistuid(""),
    m_energy(0.f),
    m_radiationtype(0),
    m_maximumdoserate_muperminute(0.f),
    m_doserate(0.f),
    m_calibrationdate(boost::date_time::not_a_date_time),
    m_decayconstant(0.f),
    m_cal_dist(0.f),
    m_cal_depth(0.f),
    m_endeffect(0.f),
    m_timeunits(0),
    m_scxcount(0),
    m_scycount(0),
    m_scxpositions(""),
    m_scypositions(""),
    m_sc(""),
    m_type(0),
    m_version(0),
    m_tran(0.f),
    m_flatnessdepthcount(0),
    m_flatnessradiuscount(0),
    m_flatnessdepthvec(""),
    m_flatnessradiusvec(""),
    m_depthcount(0),
    m_radiuscount(0),
    m_depthvec(""),
    m_radiusvec(""),
    m_sar(""),
    m_tar0depthcount(0),
    m_tar0_depth_vec(""),
    m_flatness(""),
    m_tar0(""),
    m_sp(""),
    m_sp0(0.f),
    m_sp_prime(""),
    m_hidden(0),
    m_name(""),
    m_dmax(0.f),
    m_sad(0.f),
    m_psd(0.f),
    m_srcdiam1(0.f),
    m_srcdiam2(0.f),
    m_srcdiam3(0.f),
    m_srcratio1(0.f),
    m_srcratio3(0.f),
    m_eeqdiam(0.f),
    m_xjawcount(0),
    m_yjawcount(0),
    m_xjawtype(0),
    m_yjawtype(0),
    m_xsdd(0.f),
    m_ysdd(0.f),
    m_gantrysense(0),
    m_gantryoffset(0.f),
    m_tablesense(0),
    m_tableoffset(0.f),
    m_collimatorsense(0),
    m_collimatoroffset(0.f),
    m_referencefluence(0.f),
    m_referencedose(0.f),
    m_diam1(0.f),
    m_diam2(0.f),
    m_ratio1(0.f),
    m_transmission(0.f),
    m_mu(0.f),
    m_dmu_dx(0.f),
    m_dmu_dr(0.f),
    m_offaxisdatax(""),
    m_offaxisdatay(""),
    m_mudatax(""),
    m_mudatay(""),
    m_dmudatay(""),
    m_outputmuy(""),
    m_src_d(0.f),
    m_src_atten(0.f),
    m_norm_10x10(0.f),
    m_ion(0),
    m_dm(0.f),
    m_c1(0.f),
    m_c2(0.f),
    m_c3(0.f),
    m_ffs10(0.f),
    m_k(0.f),
    m_a(0.f),
    m_df(0.f),
    m_sf(0.f),
    m_allowcontinuousdoserate(false),
    m_commissionunitname(""),
    m_isflattened(false),
    m_isconvolutionsupport(false),
    m_ispencilebeamsupport(false),
    m_ismontecarlosupport(false),
    m_availablephotonplantype(""),
    m_availableelectronplantype(""),
    m_datatemplatetypename(""),
    m_calibrationfsx(0.f),
    m_calibrationfsy(0.f),
    m_ssd(0.f),
    m_phantomsizelateral(0.f),
    m_phantomsizedepth(0.f),
    m_viewcustomizedepth(0.f),
    m_blocktraypenumbra(0.f),
    m_blockattenfactor(0.f),
    m_viewhalfprofile(false),
    m_convdatastruct_sdd1(0.f),
    m_convdatastruct_sdd2(0.f),
    m_convdatastruct_psd(0.f),
    m_commissionedunit_dmax(0.f),
    m_datatype(0),
    m_normalizeddose(0.f),
    m_xjawfactor(0.f),
    m_yjawfactor(0.f),
    m_mlcfactor(0.f),
    m_ddmudr(""),
    m_defaultdoserateindex(0),
    m_calcmode(false),
    m_updatetime(boost::date_time::not_a_date_time),
    m_cctonguewidth(0.f),
    m_ccgroovewidth(0.f),
    m_ccleaftipwidth(0.f),
    m_reservecc(""),
    m_pbtonguewidth(0.f),
    m_pbgroovewidth(0.f),
    m_pbleaftipwidth(0.f),
    m_reservepb(""),
    m_cctransmission(0.f),
    m_pbtransmission(0.f),
    m_mindoserate_mupermin(0.f)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtCommissionedunitImp::RtCommissionedunitImp(const RtCommissionedunitImp& commissionedunit):
    m_uid(commissionedunit.get_uid()),
    m_machineuid(commissionedunit.get_machineuid()),
    m_kerneldatalistuid(commissionedunit.get_kerneldatalistuid()),
    m_energy(commissionedunit.get_energy()),
    m_radiationtype(commissionedunit.get_radiationtype()),
    m_maximumdoserate_muperminute(commissionedunit.get_maximumdoserate_muperminute()),
    m_doserate(commissionedunit.get_doserate()),
    m_calibrationdate(commissionedunit.get_calibrationdate()),
    m_decayconstant(commissionedunit.get_decayconstant()),
    m_cal_dist(commissionedunit.get_cal_dist()),
    m_cal_depth(commissionedunit.get_cal_depth()),
    m_endeffect(commissionedunit.get_endeffect()),
    m_timeunits(commissionedunit.get_timeunits()),
    m_scxcount(commissionedunit.get_scxcount()),
    m_scycount(commissionedunit.get_scycount()),
    m_scxpositions(commissionedunit.get_scxpositions()),
    m_scypositions(commissionedunit.get_scypositions()),
    m_sc(commissionedunit.get_sc()),
    m_type(commissionedunit.get_type()),
    m_version(commissionedunit.get_version()),
    m_tran(commissionedunit.get_tran()),
    m_flatnessdepthcount(commissionedunit.get_flatnessdepthcount()),
    m_flatnessradiuscount(commissionedunit.get_flatnessradiuscount()),
    m_flatnessdepthvec(commissionedunit.get_flatnessdepthvec()),
    m_flatnessradiusvec(commissionedunit.get_flatnessradiusvec()),
    m_depthcount(commissionedunit.get_depthcount()),
    m_radiuscount(commissionedunit.get_radiuscount()),
    m_depthvec(commissionedunit.get_depthvec()),
    m_radiusvec(commissionedunit.get_radiusvec()),
    m_sar(commissionedunit.get_sar()),
    m_tar0depthcount(commissionedunit.get_tar0depthcount()),
    m_tar0_depth_vec(commissionedunit.get_tar0_depth_vec()),
    m_flatness(commissionedunit.get_flatness()),
    m_tar0(commissionedunit.get_tar0()),
    m_sp(commissionedunit.get_sp()),
    m_sp0(commissionedunit.get_sp0()),
    m_sp_prime(commissionedunit.get_sp_prime()),
    m_hidden(commissionedunit.get_hidden()),
    m_name(commissionedunit.get_name()),
    m_dmax(commissionedunit.get_dmax()),
    m_sad(commissionedunit.get_sad()),
    m_psd(commissionedunit.get_psd()),
    m_srcdiam1(commissionedunit.get_srcdiam1()),
    m_srcdiam2(commissionedunit.get_srcdiam2()),
    m_srcdiam3(commissionedunit.get_srcdiam3()),
    m_srcratio1(commissionedunit.get_srcratio1()),
    m_srcratio3(commissionedunit.get_srcratio3()),
    m_eeqdiam(commissionedunit.get_eeqdiam()),
    m_xjawcount(commissionedunit.get_xjawcount()),
    m_yjawcount(commissionedunit.get_yjawcount()),
    m_xjawtype(commissionedunit.get_xjawtype()),
    m_yjawtype(commissionedunit.get_yjawtype()),
    m_xsdd(commissionedunit.get_xsdd()),
    m_ysdd(commissionedunit.get_ysdd()),
    m_gantrysense(commissionedunit.get_gantrysense()),
    m_gantryoffset(commissionedunit.get_gantryoffset()),
    m_tablesense(commissionedunit.get_tablesense()),
    m_tableoffset(commissionedunit.get_tableoffset()),
    m_collimatorsense(commissionedunit.get_collimatorsense()),
    m_collimatoroffset(commissionedunit.get_collimatoroffset()),
    m_referencefluence(commissionedunit.get_referencefluence()),
    m_referencedose(commissionedunit.get_referencedose()),
    m_diam1(commissionedunit.get_diam1()),
    m_diam2(commissionedunit.get_diam2()),
    m_ratio1(commissionedunit.get_ratio1()),
    m_transmission(commissionedunit.get_transmission()),
    m_mu(commissionedunit.get_mu()),
    m_dmu_dx(commissionedunit.get_dmu_dx()),
    m_dmu_dr(commissionedunit.get_dmu_dr()),
    m_offaxisdatax(commissionedunit.get_offaxisdatax()),
    m_offaxisdatay(commissionedunit.get_offaxisdatay()),
    m_mudatax(commissionedunit.get_mudatax()),
    m_mudatay(commissionedunit.get_mudatay()),
    m_dmudatay(commissionedunit.get_dmudatay()),
    m_outputmuy(commissionedunit.get_outputmuy()),
    m_src_d(commissionedunit.get_src_d()),
    m_src_atten(commissionedunit.get_src_atten()),
    m_norm_10x10(commissionedunit.get_norm_10x10()),
    m_ion(commissionedunit.get_ion()),
    m_dm(commissionedunit.get_dm()),
    m_c1(commissionedunit.get_c1()),
    m_c2(commissionedunit.get_c2()),
    m_c3(commissionedunit.get_c3()),
    m_ffs10(commissionedunit.get_ffs10()),
    m_k(commissionedunit.get_k()),
    m_a(commissionedunit.get_a()),
    m_df(commissionedunit.get_df()),
    m_sf(commissionedunit.get_sf()),
    m_allowcontinuousdoserate(commissionedunit.get_allowcontinuousdoserate()),
    m_discretedoserate(commissionedunit.get_discretedoserate()),
    m_commissionunitname(commissionedunit.get_commissionunitname()),
    m_isflattened(commissionedunit.get_isflattened()),
    m_isconvolutionsupport(commissionedunit.get_isconvolutionsupport()),
    m_ispencilebeamsupport(commissionedunit.get_ispencilebeamsupport()),
    m_ismontecarlosupport(commissionedunit.get_ismontecarlosupport()),
    m_availablephotonplantype(commissionedunit.get_availablephotonplantype()),
    m_availableelectronplantype(commissionedunit.get_availableelectronplantype()),
    m_datatemplatetypename(commissionedunit.get_datatemplatetypename()),
    m_calibrationfsx(commissionedunit.get_calibrationfsx()),
    m_calibrationfsy(commissionedunit.get_calibrationfsy()),
    m_ssd(commissionedunit.get_ssd()),
    m_phantomsizelateral(commissionedunit.get_phantomsizelateral()),
    m_phantomsizedepth(commissionedunit.get_phantomsizedepth()),
    m_viewcustomizedepth(commissionedunit.get_viewcustomizedepth()),
    m_blocktraypenumbra(commissionedunit.get_blocktraypenumbra()),
    m_blockattenfactor(commissionedunit.get_blockattenfactor()),
    m_viewhalfprofile(commissionedunit.get_viewhalfprofile()),
    m_convdatastruct_sdd1(commissionedunit.get_convdatastruct_sdd1()),
    m_convdatastruct_sdd2(commissionedunit.get_convdatastruct_sdd2()),
    m_convdatastruct_psd(commissionedunit.get_convdatastruct_psd()),
    m_commissionedunit_dmax(commissionedunit.get_commissionedunit_dmax()),
    m_datatype(commissionedunit.get_datatype()),
    m_normalizeddose(commissionedunit.get_normalizeddose()),
    m_xjawfactor(commissionedunit.get_xjawfactor()),
    m_yjawfactor(commissionedunit.get_yjawfactor()),
    m_mlcfactor(commissionedunit.get_mlcfactor()),
    m_ddmudr(commissionedunit.get_ddmudr()),
    m_defaultdoserateindex(commissionedunit.get_defaultdoserateindex()),
    m_calcmode(commissionedunit.get_calcmode()),
    m_updatetime(commissionedunit.get_updatetime()),
    m_cctonguewidth(commissionedunit.get_cctonguewidth()),
    m_ccgroovewidth(commissionedunit.get_ccgroovewidth()),
    m_ccleaftipwidth(commissionedunit.get_ccleaftipwidth()),
    m_reservecc(commissionedunit.get_reservecc()),
    m_pbtonguewidth(commissionedunit.get_pbtonguewidth()),
    m_pbgroovewidth(commissionedunit.get_pbgroovewidth()),
    m_pbleaftipwidth(commissionedunit.get_pbleaftipwidth()),
    m_reservepb(commissionedunit.get_reservepb()),
    m_cctransmission(commissionedunit.get_cctransmission()),
    m_pbtransmission(commissionedunit.get_pbtransmission()),
    m_mindoserate_mupermin(commissionedunit.get_mindoserate_mupermin())
{
    m_map_trayfactors = commissionedunit.get_discrete_trayfactor();
}

RtCommissionedunitImp& RtCommissionedunitImp::operator=(const RtCommissionedunitImp& commissionedunit)
{
    if (this != &commissionedunit){
        this->m_uid = commissionedunit.get_uid();
        this->m_machineuid = commissionedunit.get_machineuid();
        this->m_kerneldatalistuid = commissionedunit.get_kerneldatalistuid();
        this->m_energy = commissionedunit.get_energy();
        this->m_radiationtype = commissionedunit.get_radiationtype();
        this->m_maximumdoserate_muperminute = commissionedunit.get_maximumdoserate_muperminute();
        this->m_doserate = commissionedunit.get_doserate();
        this->m_calibrationdate = commissionedunit.get_calibrationdate();
        this->m_decayconstant = commissionedunit.get_decayconstant();
        this->m_cal_dist = commissionedunit.get_cal_dist();
        this->m_cal_depth = commissionedunit.get_cal_depth();
        this->m_endeffect = commissionedunit.get_endeffect();
        this->m_timeunits = commissionedunit.get_timeunits();
        this->m_scxcount = commissionedunit.get_scxcount();
        this->m_scycount = commissionedunit.get_scycount();
        this->m_scxpositions = commissionedunit.get_scxpositions();
        this->m_scypositions = commissionedunit.get_scypositions();
        this->m_sc = commissionedunit.get_sc();
        this->m_type = commissionedunit.get_type();
        this->m_version = commissionedunit.get_version();
        this->m_tran = commissionedunit.get_tran();
        this->m_flatnessdepthcount = commissionedunit.get_flatnessdepthcount();
        this->m_flatnessradiuscount = commissionedunit.get_flatnessradiuscount();
        this->m_flatnessdepthvec = commissionedunit.get_flatnessdepthvec();
        this->m_flatnessradiusvec = commissionedunit.get_flatnessradiusvec();
        this->m_depthcount = commissionedunit.get_depthcount();
        this->m_radiuscount = commissionedunit.get_radiuscount();
        this->m_depthvec = commissionedunit.get_depthvec();
        this->m_radiusvec = commissionedunit.get_radiusvec();
        this->m_sar = commissionedunit.get_sar();
        this->m_tar0depthcount = commissionedunit.get_tar0depthcount();
        this->m_tar0_depth_vec = commissionedunit.get_tar0_depth_vec();
        this->m_flatness = commissionedunit.get_flatness();
        this->m_tar0 = commissionedunit.get_tar0();
        this->m_sp = commissionedunit.get_sp();
        this->m_sp0 = commissionedunit.get_sp0();
        this->m_sp_prime = commissionedunit.get_sp_prime();
        this->m_hidden = commissionedunit.get_hidden();
        this->m_name = commissionedunit.get_name();
        this->m_dmax = commissionedunit.get_dmax();
        this->m_sad = commissionedunit.get_sad();
        this->m_psd = commissionedunit.get_psd();
        this->m_srcdiam1 = commissionedunit.get_srcdiam1();
        this->m_srcdiam2 = commissionedunit.get_srcdiam2();
        this->m_srcdiam3 = commissionedunit.get_srcdiam3();
        this->m_srcratio1 = commissionedunit.get_srcratio1();
        this->m_srcratio3 = commissionedunit.get_srcratio3();
        this->m_eeqdiam = commissionedunit.get_eeqdiam();
        this->m_xjawcount = commissionedunit.get_xjawcount();
        this->m_yjawcount = commissionedunit.get_yjawcount();
        this->m_xjawtype = commissionedunit.get_xjawtype();
        this->m_yjawtype = commissionedunit.get_yjawtype();
        this->m_xsdd = commissionedunit.get_xsdd();
        this->m_ysdd = commissionedunit.get_ysdd();
        this->m_gantrysense = commissionedunit.get_gantrysense();
        this->m_gantryoffset = commissionedunit.get_gantryoffset();
        this->m_tablesense = commissionedunit.get_tablesense();
        this->m_tableoffset = commissionedunit.get_tableoffset();
        this->m_collimatorsense = commissionedunit.get_collimatorsense();
        this->m_collimatoroffset = commissionedunit.get_collimatoroffset();
        this->m_referencefluence = commissionedunit.get_referencefluence();
        this->m_referencedose = commissionedunit.get_referencedose();
        this->m_diam1 = commissionedunit.get_diam1();
        this->m_diam2 = commissionedunit.get_diam2();
        this->m_ratio1 = commissionedunit.get_ratio1();
        this->m_transmission = commissionedunit.get_transmission();
        this->m_mu = commissionedunit.get_mu();
        this->m_dmu_dx = commissionedunit.get_dmu_dx();
        this->m_dmu_dr = commissionedunit.get_dmu_dr();
        this->m_offaxisdatax = commissionedunit.get_offaxisdatax();
        this->m_offaxisdatay = commissionedunit.get_offaxisdatay();
        this->m_mudatax = commissionedunit.get_mudatax();
        this->m_mudatay = commissionedunit.get_mudatay();
        this->m_dmudatay = commissionedunit.get_dmudatay();
        this->m_outputmuy = commissionedunit.get_outputmuy();
        this->m_src_d = commissionedunit.get_src_d();
        this->m_src_atten = commissionedunit.get_src_atten();
        this->m_norm_10x10 = commissionedunit.get_norm_10x10();
        this->m_ion = commissionedunit.get_ion();
        this->m_dm = commissionedunit.get_dm();
        this->m_c1 = commissionedunit.get_c1();
        this->m_c2 = commissionedunit.get_c2();
        this->m_c3 = commissionedunit.get_c3();
        this->m_ffs10 = commissionedunit.get_ffs10();
        this->m_k = commissionedunit.get_k();
        this->m_a = commissionedunit.get_a();
        this->m_df = commissionedunit.get_df();
        this->m_sf = commissionedunit.get_sf();
        this->m_allowcontinuousdoserate = commissionedunit.get_allowcontinuousdoserate();
        this->m_discretedoserate = commissionedunit.get_discretedoserate();
        this->m_commissionunitname = commissionedunit.get_commissionunitname();
        this->m_isflattened = commissionedunit.get_isflattened();
        this->m_isconvolutionsupport = commissionedunit.get_isconvolutionsupport();
        this->m_ispencilebeamsupport = commissionedunit.get_ispencilebeamsupport();
        this->m_ismontecarlosupport = commissionedunit.get_ismontecarlosupport();
        this->m_availablephotonplantype = commissionedunit.get_availablephotonplantype();
        this->m_availableelectronplantype = commissionedunit.get_availableelectronplantype();
        this->m_datatemplatetypename = commissionedunit.get_datatemplatetypename();
        this->m_calibrationfsx = commissionedunit.get_calibrationfsx();
        this->m_calibrationfsy = commissionedunit.get_calibrationfsy();
        this->m_ssd = commissionedunit.get_ssd();
        this->m_phantomsizelateral = commissionedunit.get_phantomsizelateral();
        this->m_phantomsizedepth = commissionedunit.get_phantomsizedepth();
        this->m_viewcustomizedepth = commissionedunit.get_viewcustomizedepth();
        this->m_blocktraypenumbra = commissionedunit.get_blocktraypenumbra();
        this->m_blockattenfactor = commissionedunit.get_blockattenfactor();
        this->m_viewhalfprofile = commissionedunit.get_viewhalfprofile();
        this->m_convdatastruct_sdd1 = commissionedunit.get_convdatastruct_sdd1();
        this->m_convdatastruct_sdd2 = commissionedunit.get_convdatastruct_sdd2();
        this->m_convdatastruct_psd = commissionedunit.get_convdatastruct_psd();
        this->m_commissionedunit_dmax = commissionedunit.get_commissionedunit_dmax();
        this->m_datatype = commissionedunit.get_datatype();
        this->m_normalizeddose = commissionedunit.get_normalizeddose();
        this->m_xjawfactor = commissionedunit.get_xjawfactor();
        this->m_yjawfactor = commissionedunit.get_yjawfactor();
        this->m_mlcfactor = commissionedunit.get_mlcfactor();
        this->m_ddmudr = commissionedunit.get_ddmudr();
        this->m_defaultdoserateindex = commissionedunit.get_defaultdoserateindex();
        this->m_calcmode = commissionedunit.get_calcmode();
        this->m_updatetime = commissionedunit.get_updatetime();
        this->m_cctonguewidth = commissionedunit.get_cctonguewidth();
        this->m_ccgroovewidth = commissionedunit.get_ccgroovewidth();
        this->m_ccleaftipwidth = commissionedunit.get_ccleaftipwidth();
        this->m_reservecc = commissionedunit.get_reservecc();
        this->m_pbtonguewidth = commissionedunit.get_pbtonguewidth();
        this->m_pbgroovewidth = commissionedunit.get_pbgroovewidth();
        this->m_pbleaftipwidth = commissionedunit.get_pbleaftipwidth();
        this->m_reservepb = commissionedunit.get_reservepb();
        this->m_cctransmission = commissionedunit.get_cctransmission();
        this->m_pbtransmission = commissionedunit.get_pbtransmission();
        this->m_mindoserate_mupermin = commissionedunit.get_mindoserate_mupermin();
        this->m_map_trayfactors = commissionedunit.get_discrete_trayfactor();
    }
    return *this;
}

RtCommissionedunitImp::~RtCommissionedunitImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtCommissionedunit::RtCommissionedunit(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtCommissionedunitImp(bGeneraterUid);
    set_flags(COMMISSIONEDUNIT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_COMMISSIONEDUNIT_FIELD_NULL);
}

RtCommissionedunit::RtCommissionedunit(const RtCommissionedunit& commissionedunit): RtDatabaseObject(commissionedunit),
   m_pImp(new RtCommissionedunitImp(*commissionedunit.m_pImp))
{
}

RtCommissionedunit& RtCommissionedunit::operator = (const RtCommissionedunit& commissionedunit)
{
    if(this != &commissionedunit)
    {
        RtDatabaseObject::operator=(commissionedunit);
        *this->m_pImp = *commissionedunit.m_pImp;
    }
    return *this;
}

RtCommissionedunit::~RtCommissionedunit()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtCommissionedunit::get_uid() const { return m_pImp->get_uid();}
void RtCommissionedunit::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(COMMISSIONEDUNIT_UID);
    setdirty_field(COMMISSIONEDUNIT_UID, true);
}

//machineuid
std::string RtCommissionedunit::get_machineuid() const { return m_pImp->get_machineuid();}
void RtCommissionedunit::set_machineuid(const std::string& machineuid)
{
    m_pImp->set_machineuid(machineuid);
    enable_field(COMMISSIONEDUNIT_MACHINEUID);
    setdirty_field(COMMISSIONEDUNIT_MACHINEUID, true);
}

//kerneldatalistuid
std::string RtCommissionedunit::get_kerneldatalistuid() const { return m_pImp->get_kerneldatalistuid();}
void RtCommissionedunit::set_kerneldatalistuid(const std::string& kerneldatalistuid)
{
    m_pImp->set_kerneldatalistuid(kerneldatalistuid);
    enable_field(COMMISSIONEDUNIT_KERNELDATALISTUID);
    setdirty_field(COMMISSIONEDUNIT_KERNELDATALISTUID, true);
}

//energy
float RtCommissionedunit::get_energy() const { return m_pImp->get_energy();}
void RtCommissionedunit::set_energy(const float& energy)
{
    m_pImp->set_energy(energy);
    enable_field(COMMISSIONEDUNIT_ENERGY);
    setdirty_field(COMMISSIONEDUNIT_ENERGY, true);
}

//radiationtype
int RtCommissionedunit::get_radiationtype() const { return m_pImp->get_radiationtype();}
void RtCommissionedunit::set_radiationtype(const int& radiationtype)
{
    m_pImp->set_radiationtype(radiationtype);
    enable_field(COMMISSIONEDUNIT_RADIATIONTYPE);
    setdirty_field(COMMISSIONEDUNIT_RADIATIONTYPE, true);
}

//maximumdoserate_muperminute
float RtCommissionedunit::get_maximumdoserate_muperminute() const { return m_pImp->get_maximumdoserate_muperminute();}
void RtCommissionedunit::set_maximumdoserate_muperminute(const float& maximumdoserate_muperminute)
{
    m_pImp->set_maximumdoserate_muperminute(maximumdoserate_muperminute);
    enable_field(COMMISSIONEDUNIT_MAXIMUMDOSERATE_MUPERMINUTE);
    setdirty_field(COMMISSIONEDUNIT_MAXIMUMDOSERATE_MUPERMINUTE, true);
}

//doserate
float RtCommissionedunit::get_doserate() const { return m_pImp->get_doserate();}
void RtCommissionedunit::set_doserate(const float& doserate)
{
    m_pImp->set_doserate(doserate);
    enable_field(COMMISSIONEDUNIT_DOSERATE);
    setdirty_field(COMMISSIONEDUNIT_DOSERATE, true);
}

//calibrationdate
DATE_BOOST RtCommissionedunit::get_calibrationdate() const { return m_pImp->get_calibrationdate();}
void RtCommissionedunit::set_calibrationdate(const DATE_BOOST& calibrationdate)
{
    m_pImp->set_calibrationdate(calibrationdate);
    enable_field(COMMISSIONEDUNIT_CALIBRATIONDATE);
    setdirty_field(COMMISSIONEDUNIT_CALIBRATIONDATE, true);
}

//decayconstant
float RtCommissionedunit::get_decayconstant() const { return m_pImp->get_decayconstant();}
void RtCommissionedunit::set_decayconstant(const float& decayconstant)
{
    m_pImp->set_decayconstant(decayconstant);
    enable_field(COMMISSIONEDUNIT_DECAYCONSTANT);
    setdirty_field(COMMISSIONEDUNIT_DECAYCONSTANT, true);
}

//cal_dist
float RtCommissionedunit::get_cal_dist() const { return m_pImp->get_cal_dist();}
void RtCommissionedunit::set_cal_dist(const float& cal_dist)
{
    m_pImp->set_cal_dist(cal_dist);
    enable_field(COMMISSIONEDUNIT_CAL_DIST);
    setdirty_field(COMMISSIONEDUNIT_CAL_DIST, true);
}

//cal_depth
float RtCommissionedunit::get_cal_depth() const { return m_pImp->get_cal_depth();}
void RtCommissionedunit::set_cal_depth(const float& cal_depth)
{
    m_pImp->set_cal_depth(cal_depth);
    enable_field(COMMISSIONEDUNIT_CAL_DEPTH);
    setdirty_field(COMMISSIONEDUNIT_CAL_DEPTH, true);
}

//endeffect
float RtCommissionedunit::get_endeffect() const { return m_pImp->get_endeffect();}
void RtCommissionedunit::set_endeffect(const float& endeffect)
{
    m_pImp->set_endeffect(endeffect);
    enable_field(COMMISSIONEDUNIT_ENDEFFECT);
    setdirty_field(COMMISSIONEDUNIT_ENDEFFECT, true);
}

//timeunits
int RtCommissionedunit::get_timeunits() const { return m_pImp->get_timeunits();}
void RtCommissionedunit::set_timeunits(const int& timeunits)
{
    m_pImp->set_timeunits(timeunits);
    enable_field(COMMISSIONEDUNIT_TIMEUNITS);
    setdirty_field(COMMISSIONEDUNIT_TIMEUNITS, true);
}

//scxcount
int RtCommissionedunit::get_scxcount() const { return m_pImp->get_scxcount();}
void RtCommissionedunit::set_scxcount(const int& scxcount)
{
    m_pImp->set_scxcount(scxcount);
    enable_field(COMMISSIONEDUNIT_SCXCOUNT);
    setdirty_field(COMMISSIONEDUNIT_SCXCOUNT, true);
}

//scycount
int RtCommissionedunit::get_scycount() const { return m_pImp->get_scycount();}
void RtCommissionedunit::set_scycount(const int& scycount)
{
    m_pImp->set_scycount(scycount);
    enable_field(COMMISSIONEDUNIT_SCYCOUNT);
    setdirty_field(COMMISSIONEDUNIT_SCYCOUNT, true);
}

//scxpositions
std::string RtCommissionedunit::get_scxpositions() const { return m_pImp->get_scxpositions();}
void RtCommissionedunit::set_scxpositions(const std::string& scxpositions)
{
    m_pImp->set_scxpositions(scxpositions);
    enable_field(COMMISSIONEDUNIT_SCXPOSITIONS);
    setdirty_field(COMMISSIONEDUNIT_SCXPOSITIONS, true);
}

//scypositions
std::string RtCommissionedunit::get_scypositions() const { return m_pImp->get_scypositions();}
void RtCommissionedunit::set_scypositions(const std::string& scypositions)
{
    m_pImp->set_scypositions(scypositions);
    enable_field(COMMISSIONEDUNIT_SCYPOSITIONS);
    setdirty_field(COMMISSIONEDUNIT_SCYPOSITIONS, true);
}

//sc
std::string RtCommissionedunit::get_sc() const { return m_pImp->get_sc();}
void RtCommissionedunit::set_sc(const std::string& sc)
{
    m_pImp->set_sc(sc);
    enable_field(COMMISSIONEDUNIT_SC);
    setdirty_field(COMMISSIONEDUNIT_SC, true);
}

//type
int RtCommissionedunit::get_type() const { return m_pImp->get_type();}
void RtCommissionedunit::set_type(const int& type)
{
    m_pImp->set_type(type);
    enable_field(COMMISSIONEDUNIT_TYPE);
    setdirty_field(COMMISSIONEDUNIT_TYPE, true);
}

//version
int RtCommissionedunit::get_version() const { return m_pImp->get_version();}
void RtCommissionedunit::set_version(const int& version)
{
    m_pImp->set_version(version);
    enable_field(COMMISSIONEDUNIT_VERSION);
    setdirty_field(COMMISSIONEDUNIT_VERSION, true);
}

//tran
float RtCommissionedunit::get_tran() const { return m_pImp->get_tran();}
void RtCommissionedunit::set_tran(const float& tran)
{
    m_pImp->set_tran(tran);
    enable_field(COMMISSIONEDUNIT_TRAN);
    setdirty_field(COMMISSIONEDUNIT_TRAN, true);
}

//flatnessdepthcount
int RtCommissionedunit::get_flatnessdepthcount() const { return m_pImp->get_flatnessdepthcount();}
void RtCommissionedunit::set_flatnessdepthcount(const int& flatnessdepthcount)
{
    m_pImp->set_flatnessdepthcount(flatnessdepthcount);
    enable_field(COMMISSIONEDUNIT_FLATNESSDEPTHCOUNT);
    setdirty_field(COMMISSIONEDUNIT_FLATNESSDEPTHCOUNT, true);
}

//flatnessradiuscount
int RtCommissionedunit::get_flatnessradiuscount() const { return m_pImp->get_flatnessradiuscount();}
void RtCommissionedunit::set_flatnessradiuscount(const int& flatnessradiuscount)
{
    m_pImp->set_flatnessradiuscount(flatnessradiuscount);
    enable_field(COMMISSIONEDUNIT_FLATNESSRADIUSCOUNT);
    setdirty_field(COMMISSIONEDUNIT_FLATNESSRADIUSCOUNT, true);
}

//flatnessdepthvec
std::string RtCommissionedunit::get_flatnessdepthvec() const { return m_pImp->get_flatnessdepthvec();}
void RtCommissionedunit::set_flatnessdepthvec(const std::string& flatnessdepthvec)
{
    m_pImp->set_flatnessdepthvec(flatnessdepthvec);
    enable_field(COMMISSIONEDUNIT_FLATNESSDEPTHVEC);
    setdirty_field(COMMISSIONEDUNIT_FLATNESSDEPTHVEC, true);
}

//flatnessradiusvec
std::string RtCommissionedunit::get_flatnessradiusvec() const { return m_pImp->get_flatnessradiusvec();}
void RtCommissionedunit::set_flatnessradiusvec(const std::string& flatnessradiusvec)
{
    m_pImp->set_flatnessradiusvec(flatnessradiusvec);
    enable_field(COMMISSIONEDUNIT_FLATNESSRADIUSVEC);
    setdirty_field(COMMISSIONEDUNIT_FLATNESSRADIUSVEC, true);
}

//depthcount
int RtCommissionedunit::get_depthcount() const { return m_pImp->get_depthcount();}
void RtCommissionedunit::set_depthcount(const int& depthcount)
{
    m_pImp->set_depthcount(depthcount);
    enable_field(COMMISSIONEDUNIT_DEPTHCOUNT);
    setdirty_field(COMMISSIONEDUNIT_DEPTHCOUNT, true);
}

//radiuscount
int RtCommissionedunit::get_radiuscount() const { return m_pImp->get_radiuscount();}
void RtCommissionedunit::set_radiuscount(const int& radiuscount)
{
    m_pImp->set_radiuscount(radiuscount);
    enable_field(COMMISSIONEDUNIT_RADIUSCOUNT);
    setdirty_field(COMMISSIONEDUNIT_RADIUSCOUNT, true);
}

//depthvec
std::string RtCommissionedunit::get_depthvec() const { return m_pImp->get_depthvec();}
void RtCommissionedunit::set_depthvec(const std::string& depthvec)
{
    m_pImp->set_depthvec(depthvec);
    enable_field(COMMISSIONEDUNIT_DEPTHVEC);
    setdirty_field(COMMISSIONEDUNIT_DEPTHVEC, true);
}

//radiusvec
std::string RtCommissionedunit::get_radiusvec() const { return m_pImp->get_radiusvec();}
void RtCommissionedunit::set_radiusvec(const std::string& radiusvec)
{
    m_pImp->set_radiusvec(radiusvec);
    enable_field(COMMISSIONEDUNIT_RADIUSVEC);
    setdirty_field(COMMISSIONEDUNIT_RADIUSVEC, true);
}

//sar
std::string RtCommissionedunit::get_sar() const { return m_pImp->get_sar();}
void RtCommissionedunit::set_sar(const std::string& sar)
{
    m_pImp->set_sar(sar);
    enable_field(COMMISSIONEDUNIT_SAR);
    setdirty_field(COMMISSIONEDUNIT_SAR, true);
}

//tar0depthcount
int RtCommissionedunit::get_tar0depthcount() const { return m_pImp->get_tar0depthcount();}
void RtCommissionedunit::set_tar0depthcount(const int& tar0depthcount)
{
    m_pImp->set_tar0depthcount(tar0depthcount);
    enable_field(COMMISSIONEDUNIT_TAR0DEPTHCOUNT);
    setdirty_field(COMMISSIONEDUNIT_TAR0DEPTHCOUNT, true);
}

//tar0_depth_vec
std::string RtCommissionedunit::get_tar0_depth_vec() const { return m_pImp->get_tar0_depth_vec();}
void RtCommissionedunit::set_tar0_depth_vec(const std::string& tar0_depth_vec)
{
    m_pImp->set_tar0_depth_vec(tar0_depth_vec);
    enable_field(COMMISSIONEDUNIT_TAR0_DEPTH_VEC);
    setdirty_field(COMMISSIONEDUNIT_TAR0_DEPTH_VEC, true);
}

//flatness
std::string RtCommissionedunit::get_flatness() const { return m_pImp->get_flatness();}
void RtCommissionedunit::set_flatness(const std::string& flatness)
{
    m_pImp->set_flatness(flatness);
    enable_field(COMMISSIONEDUNIT_FLATNESS);
    setdirty_field(COMMISSIONEDUNIT_FLATNESS, true);
}

//tar0
std::string RtCommissionedunit::get_tar0() const { return m_pImp->get_tar0();}
void RtCommissionedunit::set_tar0(const std::string& tar0)
{
    m_pImp->set_tar0(tar0);
    enable_field(COMMISSIONEDUNIT_TAR0);
    setdirty_field(COMMISSIONEDUNIT_TAR0, true);
}

//sp
std::string RtCommissionedunit::get_sp() const { return m_pImp->get_sp();}
void RtCommissionedunit::set_sp(const std::string& sp)
{
    m_pImp->set_sp(sp);
    enable_field(COMMISSIONEDUNIT_SP);
    setdirty_field(COMMISSIONEDUNIT_SP, true);
}

//sp0
float RtCommissionedunit::get_sp0() const { return m_pImp->get_sp0();}
void RtCommissionedunit::set_sp0(const float& sp0)
{
    m_pImp->set_sp0(sp0);
    enable_field(COMMISSIONEDUNIT_SP0);
    setdirty_field(COMMISSIONEDUNIT_SP0, true);
}

//sp_prime
std::string RtCommissionedunit::get_sp_prime() const { return m_pImp->get_sp_prime();}
void RtCommissionedunit::set_sp_prime(const std::string& sp_prime)
{
    m_pImp->set_sp_prime(sp_prime);
    enable_field(COMMISSIONEDUNIT_SP_PRIME);
    setdirty_field(COMMISSIONEDUNIT_SP_PRIME, true);
}

//hidden
int RtCommissionedunit::get_hidden() const { return m_pImp->get_hidden();}
void RtCommissionedunit::set_hidden(const int& hidden)
{
    m_pImp->set_hidden(hidden);
    enable_field(COMMISSIONEDUNIT_HIDDEN);
    setdirty_field(COMMISSIONEDUNIT_HIDDEN, true);
}

//name
std::string RtCommissionedunit::get_name() const { return m_pImp->get_name();}
void RtCommissionedunit::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(COMMISSIONEDUNIT_NAME);
    setdirty_field(COMMISSIONEDUNIT_NAME, true);
}

//dmax
float RtCommissionedunit::get_dmax() const { return m_pImp->get_dmax();}
void RtCommissionedunit::set_dmax(const float& dmax)
{
    m_pImp->set_dmax(dmax);
    enable_field(COMMISSIONEDUNIT_DMAX);
    setdirty_field(COMMISSIONEDUNIT_DMAX, true);
}

//sad
float RtCommissionedunit::get_sad() const { return m_pImp->get_sad();}
void RtCommissionedunit::set_sad(const float& sad)
{
    m_pImp->set_sad(sad);
    enable_field(COMMISSIONEDUNIT_SAD);
    setdirty_field(COMMISSIONEDUNIT_SAD, true);
}

//psd
float RtCommissionedunit::get_psd() const { return m_pImp->get_psd();}
void RtCommissionedunit::set_psd(const float& psd)
{
    m_pImp->set_psd(psd);
    enable_field(COMMISSIONEDUNIT_PSD);
    setdirty_field(COMMISSIONEDUNIT_PSD, true);
}

//srcdiam1
float RtCommissionedunit::get_srcdiam1() const { return m_pImp->get_srcdiam1();}
void RtCommissionedunit::set_srcdiam1(const float& srcdiam1)
{
    m_pImp->set_srcdiam1(srcdiam1);
    enable_field(COMMISSIONEDUNIT_SRCDIAM1);
    setdirty_field(COMMISSIONEDUNIT_SRCDIAM1, true);
}

//srcdiam2
float RtCommissionedunit::get_srcdiam2() const { return m_pImp->get_srcdiam2();}
void RtCommissionedunit::set_srcdiam2(const float& srcdiam2)
{
    m_pImp->set_srcdiam2(srcdiam2);
    enable_field(COMMISSIONEDUNIT_SRCDIAM2);
    setdirty_field(COMMISSIONEDUNIT_SRCDIAM2, true);
}

//srcdiam3
float RtCommissionedunit::get_srcdiam3() const { return m_pImp->get_srcdiam3();}
void RtCommissionedunit::set_srcdiam3(const float& srcdiam3)
{
    m_pImp->set_srcdiam3(srcdiam3);
    enable_field(COMMISSIONEDUNIT_SRCDIAM3);
    setdirty_field(COMMISSIONEDUNIT_SRCDIAM3, true);
}

//srcratio1
float RtCommissionedunit::get_srcratio1() const { return m_pImp->get_srcratio1();}
void RtCommissionedunit::set_srcratio1(const float& srcratio1)
{
    m_pImp->set_srcratio1(srcratio1);
    enable_field(COMMISSIONEDUNIT_SRCRATIO1);
    setdirty_field(COMMISSIONEDUNIT_SRCRATIO1, true);
}

//srcratio3
float RtCommissionedunit::get_srcratio3() const { return m_pImp->get_srcratio3();}
void RtCommissionedunit::set_srcratio3(const float& srcratio3)
{
    m_pImp->set_srcratio3(srcratio3);
    enable_field(COMMISSIONEDUNIT_SRCRATIO3);
    setdirty_field(COMMISSIONEDUNIT_SRCRATIO3, true);
}

//eeqdiam
float RtCommissionedunit::get_eeqdiam() const { return m_pImp->get_eeqdiam();}
void RtCommissionedunit::set_eeqdiam(const float& eeqdiam)
{
    m_pImp->set_eeqdiam(eeqdiam);
    enable_field(COMMISSIONEDUNIT_EEQDIAM);
    setdirty_field(COMMISSIONEDUNIT_EEQDIAM, true);
}

//xjawcount
int RtCommissionedunit::get_xjawcount() const { return m_pImp->get_xjawcount();}
void RtCommissionedunit::set_xjawcount(const int& xjawcount)
{
    m_pImp->set_xjawcount(xjawcount);
    enable_field(COMMISSIONEDUNIT_XJAWCOUNT);
    setdirty_field(COMMISSIONEDUNIT_XJAWCOUNT, true);
}

//yjawcount
int RtCommissionedunit::get_yjawcount() const { return m_pImp->get_yjawcount();}
void RtCommissionedunit::set_yjawcount(const int& yjawcount)
{
    m_pImp->set_yjawcount(yjawcount);
    enable_field(COMMISSIONEDUNIT_YJAWCOUNT);
    setdirty_field(COMMISSIONEDUNIT_YJAWCOUNT, true);
}

//xjawtype
int RtCommissionedunit::get_xjawtype() const { return m_pImp->get_xjawtype();}
void RtCommissionedunit::set_xjawtype(const int& xjawtype)
{
    m_pImp->set_xjawtype(xjawtype);
    enable_field(COMMISSIONEDUNIT_XJAWTYPE);
    setdirty_field(COMMISSIONEDUNIT_XJAWTYPE, true);
}

//yjawtype
int RtCommissionedunit::get_yjawtype() const { return m_pImp->get_yjawtype();}
void RtCommissionedunit::set_yjawtype(const int& yjawtype)
{
    m_pImp->set_yjawtype(yjawtype);
    enable_field(COMMISSIONEDUNIT_YJAWTYPE);
    setdirty_field(COMMISSIONEDUNIT_YJAWTYPE, true);
}

//xsdd
float RtCommissionedunit::get_xsdd() const { return m_pImp->get_xsdd();}
void RtCommissionedunit::set_xsdd(const float& xsdd)
{
    m_pImp->set_xsdd(xsdd);
    enable_field(COMMISSIONEDUNIT_XSDD);
    setdirty_field(COMMISSIONEDUNIT_XSDD, true);
}

//ysdd
float RtCommissionedunit::get_ysdd() const { return m_pImp->get_ysdd();}
void RtCommissionedunit::set_ysdd(const float& ysdd)
{
    m_pImp->set_ysdd(ysdd);
    enable_field(COMMISSIONEDUNIT_YSDD);
    setdirty_field(COMMISSIONEDUNIT_YSDD, true);
}

//gantrysense
int RtCommissionedunit::get_gantrysense() const { return m_pImp->get_gantrysense();}
void RtCommissionedunit::set_gantrysense(const int& gantrysense)
{
    m_pImp->set_gantrysense(gantrysense);
    enable_field(COMMISSIONEDUNIT_GANTRYSENSE);
    setdirty_field(COMMISSIONEDUNIT_GANTRYSENSE, true);
}

//gantryoffset
float RtCommissionedunit::get_gantryoffset() const { return m_pImp->get_gantryoffset();}
void RtCommissionedunit::set_gantryoffset(const float& gantryoffset)
{
    m_pImp->set_gantryoffset(gantryoffset);
    enable_field(COMMISSIONEDUNIT_GANTRYOFFSET);
    setdirty_field(COMMISSIONEDUNIT_GANTRYOFFSET, true);
}

//tablesense
int RtCommissionedunit::get_tablesense() const { return m_pImp->get_tablesense();}
void RtCommissionedunit::set_tablesense(const int& tablesense)
{
    m_pImp->set_tablesense(tablesense);
    enable_field(COMMISSIONEDUNIT_TABLESENSE);
    setdirty_field(COMMISSIONEDUNIT_TABLESENSE, true);
}

//tableoffset
float RtCommissionedunit::get_tableoffset() const { return m_pImp->get_tableoffset();}
void RtCommissionedunit::set_tableoffset(const float& tableoffset)
{
    m_pImp->set_tableoffset(tableoffset);
    enable_field(COMMISSIONEDUNIT_TABLEOFFSET);
    setdirty_field(COMMISSIONEDUNIT_TABLEOFFSET, true);
}

//collimatorsense
int RtCommissionedunit::get_collimatorsense() const { return m_pImp->get_collimatorsense();}
void RtCommissionedunit::set_collimatorsense(const int& collimatorsense)
{
    m_pImp->set_collimatorsense(collimatorsense);
    enable_field(COMMISSIONEDUNIT_COLLIMATORSENSE);
    setdirty_field(COMMISSIONEDUNIT_COLLIMATORSENSE, true);
}

//collimatoroffset
float RtCommissionedunit::get_collimatoroffset() const { return m_pImp->get_collimatoroffset();}
void RtCommissionedunit::set_collimatoroffset(const float& collimatoroffset)
{
    m_pImp->set_collimatoroffset(collimatoroffset);
    enable_field(COMMISSIONEDUNIT_COLLIMATOROFFSET);
    setdirty_field(COMMISSIONEDUNIT_COLLIMATOROFFSET, true);
}

//referencefluence
float RtCommissionedunit::get_referencefluence() const { return m_pImp->get_referencefluence();}
void RtCommissionedunit::set_referencefluence(const float& referencefluence)
{
    m_pImp->set_referencefluence(referencefluence);
    enable_field(COMMISSIONEDUNIT_REFERENCEFLUENCE);
    setdirty_field(COMMISSIONEDUNIT_REFERENCEFLUENCE, true);
}

//referencedose
float RtCommissionedunit::get_referencedose() const { return m_pImp->get_referencedose();}
void RtCommissionedunit::set_referencedose(const float& referencedose)
{
    m_pImp->set_referencedose(referencedose);
    enable_field(COMMISSIONEDUNIT_REFERENCEDOSE);
    setdirty_field(COMMISSIONEDUNIT_REFERENCEDOSE, true);
}

//diam1
float RtCommissionedunit::get_diam1() const { return m_pImp->get_diam1();}
void RtCommissionedunit::set_diam1(const float& diam1)
{
    m_pImp->set_diam1(diam1);
    enable_field(COMMISSIONEDUNIT_DIAM1);
    setdirty_field(COMMISSIONEDUNIT_DIAM1, true);
}

//diam2
float RtCommissionedunit::get_diam2() const { return m_pImp->get_diam2();}
void RtCommissionedunit::set_diam2(const float& diam2)
{
    m_pImp->set_diam2(diam2);
    enable_field(COMMISSIONEDUNIT_DIAM2);
    setdirty_field(COMMISSIONEDUNIT_DIAM2, true);
}

//ratio1
float RtCommissionedunit::get_ratio1() const { return m_pImp->get_ratio1();}
void RtCommissionedunit::set_ratio1(const float& ratio1)
{
    m_pImp->set_ratio1(ratio1);
    enable_field(COMMISSIONEDUNIT_RATIO1);
    setdirty_field(COMMISSIONEDUNIT_RATIO1, true);
}

//transmission
float RtCommissionedunit::get_transmission() const { return m_pImp->get_transmission();}
void RtCommissionedunit::set_transmission(const float& transmission)
{
    m_pImp->set_transmission(transmission);
    enable_field(COMMISSIONEDUNIT_TRANSMISSION);
    setdirty_field(COMMISSIONEDUNIT_TRANSMISSION, true);
}

//mu
float RtCommissionedunit::get_mu() const { return m_pImp->get_mu();}
void RtCommissionedunit::set_mu(const float& mu)
{
    m_pImp->set_mu(mu);
    enable_field(COMMISSIONEDUNIT_MU);
    setdirty_field(COMMISSIONEDUNIT_MU, true);
}

//dmu_dx
float RtCommissionedunit::get_dmu_dx() const { return m_pImp->get_dmu_dx();}
void RtCommissionedunit::set_dmu_dx(const float& dmu_dx)
{
    m_pImp->set_dmu_dx(dmu_dx);
    enable_field(COMMISSIONEDUNIT_DMU_DX);
    setdirty_field(COMMISSIONEDUNIT_DMU_DX, true);
}

//dmu_dr
float RtCommissionedunit::get_dmu_dr() const { return m_pImp->get_dmu_dr();}
void RtCommissionedunit::set_dmu_dr(const float& dmu_dr)
{
    m_pImp->set_dmu_dr(dmu_dr);
    enable_field(COMMISSIONEDUNIT_DMU_DR);
    setdirty_field(COMMISSIONEDUNIT_DMU_DR, true);
}

//offaxisdatax
std::string RtCommissionedunit::get_offaxisdatax() const { return m_pImp->get_offaxisdatax();}
void RtCommissionedunit::set_offaxisdatax(const std::string& offaxisdatax)
{
    m_pImp->set_offaxisdatax(offaxisdatax);
    enable_field(COMMISSIONEDUNIT_OFFAXISDATAX);
    setdirty_field(COMMISSIONEDUNIT_OFFAXISDATAX, true);
}

//offaxisdatay
std::string RtCommissionedunit::get_offaxisdatay() const { return m_pImp->get_offaxisdatay();}
void RtCommissionedunit::set_offaxisdatay(const std::string& offaxisdatay)
{
    m_pImp->set_offaxisdatay(offaxisdatay);
    enable_field(COMMISSIONEDUNIT_OFFAXISDATAY);
    setdirty_field(COMMISSIONEDUNIT_OFFAXISDATAY, true);
}

//mudatax
std::string RtCommissionedunit::get_mudatax() const { return m_pImp->get_mudatax();}
void RtCommissionedunit::set_mudatax(const std::string& mudatax)
{
    m_pImp->set_mudatax(mudatax);
    enable_field(COMMISSIONEDUNIT_MUDATAX);
    setdirty_field(COMMISSIONEDUNIT_MUDATAX, true);
}

//mudatay
std::string RtCommissionedunit::get_mudatay() const { return m_pImp->get_mudatay();}
void RtCommissionedunit::set_mudatay(const std::string& mudatay)
{
    m_pImp->set_mudatay(mudatay);
    enable_field(COMMISSIONEDUNIT_MUDATAY);
    setdirty_field(COMMISSIONEDUNIT_MUDATAY, true);
}

//dmudatay
std::string RtCommissionedunit::get_dmudatay() const { return m_pImp->get_dmudatay();}
void RtCommissionedunit::set_dmudatay(const std::string& dmudatay)
{
    m_pImp->set_dmudatay(dmudatay);
    enable_field(COMMISSIONEDUNIT_DMUDATAY);
    setdirty_field(COMMISSIONEDUNIT_DMUDATAY, true);
}

//outputmuy
std::string RtCommissionedunit::get_outputmuy() const { return m_pImp->get_outputmuy();}
void RtCommissionedunit::set_outputmuy(const std::string& outputmuy)
{
    m_pImp->set_outputmuy(outputmuy);
    enable_field(COMMISSIONEDUNIT_OUTPUTMUY);
    setdirty_field(COMMISSIONEDUNIT_OUTPUTMUY, true);
}

//src_d
float RtCommissionedunit::get_src_d() const { return m_pImp->get_src_d();}
void RtCommissionedunit::set_src_d(const float& src_d)
{
    m_pImp->set_src_d(src_d);
    enable_field(COMMISSIONEDUNIT_SRC_D);
    setdirty_field(COMMISSIONEDUNIT_SRC_D, true);
}

//src_atten
float RtCommissionedunit::get_src_atten() const { return m_pImp->get_src_atten();}
void RtCommissionedunit::set_src_atten(const float& src_atten)
{
    m_pImp->set_src_atten(src_atten);
    enable_field(COMMISSIONEDUNIT_SRC_ATTEN);
    setdirty_field(COMMISSIONEDUNIT_SRC_ATTEN, true);
}

//norm_10x10
float RtCommissionedunit::get_norm_10x10() const { return m_pImp->get_norm_10x10();}
void RtCommissionedunit::set_norm_10x10(const float& norm_10x10)
{
    m_pImp->set_norm_10x10(norm_10x10);
    enable_field(COMMISSIONEDUNIT_NORM_10X10);
    setdirty_field(COMMISSIONEDUNIT_NORM_10X10, true);
}

//ion
int RtCommissionedunit::get_ion() const { return m_pImp->get_ion();}
void RtCommissionedunit::set_ion(const int& ion)
{
    m_pImp->set_ion(ion);
    enable_field(COMMISSIONEDUNIT_ION);
    setdirty_field(COMMISSIONEDUNIT_ION, true);
}

//dm
float RtCommissionedunit::get_dm() const { return m_pImp->get_dm();}
void RtCommissionedunit::set_dm(const float& dm)
{
    m_pImp->set_dm(dm);
    enable_field(COMMISSIONEDUNIT_DM);
    setdirty_field(COMMISSIONEDUNIT_DM, true);
}

//c1
float RtCommissionedunit::get_c1() const { return m_pImp->get_c1();}
void RtCommissionedunit::set_c1(const float& c1)
{
    m_pImp->set_c1(c1);
    enable_field(COMMISSIONEDUNIT_C1);
    setdirty_field(COMMISSIONEDUNIT_C1, true);
}

//c2
float RtCommissionedunit::get_c2() const { return m_pImp->get_c2();}
void RtCommissionedunit::set_c2(const float& c2)
{
    m_pImp->set_c2(c2);
    enable_field(COMMISSIONEDUNIT_C2);
    setdirty_field(COMMISSIONEDUNIT_C2, true);
}

//c3
float RtCommissionedunit::get_c3() const { return m_pImp->get_c3();}
void RtCommissionedunit::set_c3(const float& c3)
{
    m_pImp->set_c3(c3);
    enable_field(COMMISSIONEDUNIT_C3);
    setdirty_field(COMMISSIONEDUNIT_C3, true);
}

//ffs10
float RtCommissionedunit::get_ffs10() const { return m_pImp->get_ffs10();}
void RtCommissionedunit::set_ffs10(const float& ffs10)
{
    m_pImp->set_ffs10(ffs10);
    enable_field(COMMISSIONEDUNIT_FFS10);
    setdirty_field(COMMISSIONEDUNIT_FFS10, true);
}

//k
float RtCommissionedunit::get_k() const { return m_pImp->get_k();}
void RtCommissionedunit::set_k(const float& k)
{
    m_pImp->set_k(k);
    enable_field(COMMISSIONEDUNIT_K);
    setdirty_field(COMMISSIONEDUNIT_K, true);
}

//a
float RtCommissionedunit::get_a() const { return m_pImp->get_a();}
void RtCommissionedunit::set_a(const float& a)
{
    m_pImp->set_a(a);
    enable_field(COMMISSIONEDUNIT_A);
    setdirty_field(COMMISSIONEDUNIT_A, true);
}

//df
float RtCommissionedunit::get_df() const { return m_pImp->get_df();}
void RtCommissionedunit::set_df(const float& df)
{
    m_pImp->set_df(df);
    enable_field(COMMISSIONEDUNIT_DF);
    setdirty_field(COMMISSIONEDUNIT_DF, true);
}

//sf
float RtCommissionedunit::get_sf() const { return m_pImp->get_sf();}
void RtCommissionedunit::set_sf(const float& sf)
{
    m_pImp->set_sf(sf);
    enable_field(COMMISSIONEDUNIT_SF);
    setdirty_field(COMMISSIONEDUNIT_SF, true);
}

//allowcontinuousdoserate
bool RtCommissionedunit::get_allowcontinuousdoserate() const { return m_pImp->get_allowcontinuousdoserate();}
void RtCommissionedunit::set_allowcontinuousdoserate(const bool& allowcontinuousdoserate)
{
    m_pImp->set_allowcontinuousdoserate(allowcontinuousdoserate);
    enable_field(COMMISSIONEDUNIT_ALLOWCONTINUOUSDOSERATE);
    setdirty_field(COMMISSIONEDUNIT_ALLOWCONTINUOUSDOSERATE, true);
}

//discretedoserate
std::vector<float> RtCommissionedunit::get_discretedoserate() const { return m_pImp->get_discretedoserate();}
void RtCommissionedunit::set_discretedoserate(const std::vector<float>& discretedoserate)
{
    m_pImp->set_discretedoserate(discretedoserate);
    enable_field(COMMISSIONEDUNIT_DISCRETEDOSERATE);
    setdirty_field(COMMISSIONEDUNIT_DISCRETEDOSERATE, true);
}

//commissionunitname
std::string RtCommissionedunit::get_commissionunitname() const { return m_pImp->get_commissionunitname();}
void RtCommissionedunit::set_commissionunitname(const std::string& commissionunitname)
{
    m_pImp->set_commissionunitname(commissionunitname);
    enable_field(COMMISSIONEDUNIT_COMMISSIONUNITNAME);
    setdirty_field(COMMISSIONEDUNIT_COMMISSIONUNITNAME, true);
}

//isflattened
bool RtCommissionedunit::get_isflattened() const { return m_pImp->get_isflattened();}
void RtCommissionedunit::set_isflattened(const bool& isflattened)
{
    m_pImp->set_isflattened(isflattened);
    enable_field(COMMISSIONEDUNIT_ISFLATTENED);
    setdirty_field(COMMISSIONEDUNIT_ISFLATTENED, true);
}

//isconvolutionsupport
bool RtCommissionedunit::get_isconvolutionsupport() const { return m_pImp->get_isconvolutionsupport();}
void RtCommissionedunit::set_isconvolutionsupport(const bool& isconvolutionsupport)
{
    m_pImp->set_isconvolutionsupport(isconvolutionsupport);
    enable_field(COMMISSIONEDUNIT_ISCONVOLUTIONSUPPORT);
    setdirty_field(COMMISSIONEDUNIT_ISCONVOLUTIONSUPPORT, true);
}

//ispencilebeamsupport
bool RtCommissionedunit::get_ispencilebeamsupport() const { return m_pImp->get_ispencilebeamsupport();}
void RtCommissionedunit::set_ispencilebeamsupport(const bool& ispencilebeamsupport)
{
    m_pImp->set_ispencilebeamsupport(ispencilebeamsupport);
    enable_field(COMMISSIONEDUNIT_ISPENCILEBEAMSUPPORT);
    setdirty_field(COMMISSIONEDUNIT_ISPENCILEBEAMSUPPORT, true);
}

//ismontecarlosupport
bool RtCommissionedunit::get_ismontecarlosupport() const { return m_pImp->get_ismontecarlosupport();}
void RtCommissionedunit::set_ismontecarlosupport(const bool& ismontecarlosupport)
{
    m_pImp->set_ismontecarlosupport(ismontecarlosupport);
    enable_field(COMMISSIONEDUNIT_ISMONTECARLOSUPPORT);
    setdirty_field(COMMISSIONEDUNIT_ISMONTECARLOSUPPORT, true);
}

//availablephotonplantype
std::string RtCommissionedunit::get_availablephotonplantype() const { return m_pImp->get_availablephotonplantype();}
void RtCommissionedunit::set_availablephotonplantype(const std::string& availablephotonplantype)
{
    m_pImp->set_availablephotonplantype(availablephotonplantype);
    enable_field(COMMISSIONEDUNIT_AVAILABLEPHOTONPLANTYPE);
    setdirty_field(COMMISSIONEDUNIT_AVAILABLEPHOTONPLANTYPE, true);
}

//availableelectronplantype
std::string RtCommissionedunit::get_availableelectronplantype() const { return m_pImp->get_availableelectronplantype();}
void RtCommissionedunit::set_availableelectronplantype(const std::string& availableelectronplantype)
{
    m_pImp->set_availableelectronplantype(availableelectronplantype);
    enable_field(COMMISSIONEDUNIT_AVAILABLEELECTRONPLANTYPE);
    setdirty_field(COMMISSIONEDUNIT_AVAILABLEELECTRONPLANTYPE, true);
}

//datatemplatetypename
std::string RtCommissionedunit::get_datatemplatetypename() const { return m_pImp->get_datatemplatetypename();}
void RtCommissionedunit::set_datatemplatetypename(const std::string& datatemplatetypename)
{
    m_pImp->set_datatemplatetypename(datatemplatetypename);
    enable_field(COMMISSIONEDUNIT_DATATEMPLATETYPENAME);
    setdirty_field(COMMISSIONEDUNIT_DATATEMPLATETYPENAME, true);
}

//calibrationfsx
float RtCommissionedunit::get_calibrationfsx() const { return m_pImp->get_calibrationfsx();}
void RtCommissionedunit::set_calibrationfsx(const float& calibrationfsx)
{
    m_pImp->set_calibrationfsx(calibrationfsx);
    enable_field(COMMISSIONEDUNIT_CALIBRATIONFSX);
    setdirty_field(COMMISSIONEDUNIT_CALIBRATIONFSX, true);
}

//calibrationfsy
float RtCommissionedunit::get_calibrationfsy() const { return m_pImp->get_calibrationfsy();}
void RtCommissionedunit::set_calibrationfsy(const float& calibrationfsy)
{
    m_pImp->set_calibrationfsy(calibrationfsy);
    enable_field(COMMISSIONEDUNIT_CALIBRATIONFSY);
    setdirty_field(COMMISSIONEDUNIT_CALIBRATIONFSY, true);
}

//ssd
float RtCommissionedunit::get_ssd() const { return m_pImp->get_ssd();}
void RtCommissionedunit::set_ssd(const float& ssd)
{
    m_pImp->set_ssd(ssd);
    enable_field(COMMISSIONEDUNIT_SSD);
    setdirty_field(COMMISSIONEDUNIT_SSD, true);
}

//phantomsizelateral
float RtCommissionedunit::get_phantomsizelateral() const { return m_pImp->get_phantomsizelateral();}
void RtCommissionedunit::set_phantomsizelateral(const float& phantomsizelateral)
{
    m_pImp->set_phantomsizelateral(phantomsizelateral);
    enable_field(COMMISSIONEDUNIT_PHANTOMSIZELATERAL);
    setdirty_field(COMMISSIONEDUNIT_PHANTOMSIZELATERAL, true);
}

//phantomsizedepth
float RtCommissionedunit::get_phantomsizedepth() const { return m_pImp->get_phantomsizedepth();}
void RtCommissionedunit::set_phantomsizedepth(const float& phantomsizedepth)
{
    m_pImp->set_phantomsizedepth(phantomsizedepth);
    enable_field(COMMISSIONEDUNIT_PHANTOMSIZEDEPTH);
    setdirty_field(COMMISSIONEDUNIT_PHANTOMSIZEDEPTH, true);
}

//viewcustomizedepth
float RtCommissionedunit::get_viewcustomizedepth() const { return m_pImp->get_viewcustomizedepth();}
void RtCommissionedunit::set_viewcustomizedepth(const float& viewcustomizedepth)
{
    m_pImp->set_viewcustomizedepth(viewcustomizedepth);
    enable_field(COMMISSIONEDUNIT_VIEWCUSTOMIZEDEPTH);
    setdirty_field(COMMISSIONEDUNIT_VIEWCUSTOMIZEDEPTH, true);
}

//blocktraypenumbra
float RtCommissionedunit::get_blocktraypenumbra() const { return m_pImp->get_blocktraypenumbra();}
void RtCommissionedunit::set_blocktraypenumbra(const float& blocktraypenumbra)
{
    m_pImp->set_blocktraypenumbra(blocktraypenumbra);
    enable_field(COMMISSIONEDUNIT_BLOCKTRAYPENUMBRA);
    setdirty_field(COMMISSIONEDUNIT_BLOCKTRAYPENUMBRA, true);
}

//blockattenfactor
float RtCommissionedunit::get_blockattenfactor() const { return m_pImp->get_blockattenfactor();}
void RtCommissionedunit::set_blockattenfactor(const float& blockattenfactor)
{
    m_pImp->set_blockattenfactor(blockattenfactor);
    enable_field(COMMISSIONEDUNIT_BLOCKATTENFACTOR);
    setdirty_field(COMMISSIONEDUNIT_BLOCKATTENFACTOR, true);
}

//viewhalfprofile
bool RtCommissionedunit::get_viewhalfprofile() const { return m_pImp->get_viewhalfprofile();}
void RtCommissionedunit::set_viewhalfprofile(const bool& viewhalfprofile)
{
    m_pImp->set_viewhalfprofile(viewhalfprofile);
    enable_field(COMMISSIONEDUNIT_VIEWHALFPROFILE);
    setdirty_field(COMMISSIONEDUNIT_VIEWHALFPROFILE, true);
}

//convdatastruct_sdd1
float RtCommissionedunit::get_convdatastruct_sdd1() const { return m_pImp->get_convdatastruct_sdd1();}
void RtCommissionedunit::set_convdatastruct_sdd1(const float& convdatastruct_sdd1)
{
    m_pImp->set_convdatastruct_sdd1(convdatastruct_sdd1);
    enable_field(COMMISSIONEDUNIT_CONVDATASTRUCT_SDD1);
    setdirty_field(COMMISSIONEDUNIT_CONVDATASTRUCT_SDD1, true);
}

//convdatastruct_sdd2
float RtCommissionedunit::get_convdatastruct_sdd2() const { return m_pImp->get_convdatastruct_sdd2();}
void RtCommissionedunit::set_convdatastruct_sdd2(const float& convdatastruct_sdd2)
{
    m_pImp->set_convdatastruct_sdd2(convdatastruct_sdd2);
    enable_field(COMMISSIONEDUNIT_CONVDATASTRUCT_SDD2);
    setdirty_field(COMMISSIONEDUNIT_CONVDATASTRUCT_SDD2, true);
}

//convdatastruct_psd
float RtCommissionedunit::get_convdatastruct_psd() const { return m_pImp->get_convdatastruct_psd();}
void RtCommissionedunit::set_convdatastruct_psd(const float& convdatastruct_psd)
{
    m_pImp->set_convdatastruct_psd(convdatastruct_psd);
    enable_field(COMMISSIONEDUNIT_CONVDATASTRUCT_PSD);
    setdirty_field(COMMISSIONEDUNIT_CONVDATASTRUCT_PSD, true);
}

//commissionedunit_dmax
float RtCommissionedunit::get_commissionedunit_dmax() const { return m_pImp->get_commissionedunit_dmax();}
void RtCommissionedunit::set_commissionedunit_dmax(const float& commissionedunit_dmax)
{
    m_pImp->set_commissionedunit_dmax(commissionedunit_dmax);
    enable_field(COMMISSIONEDUNIT_COMMISSIONEDUNIT_DMAX);
    setdirty_field(COMMISSIONEDUNIT_COMMISSIONEDUNIT_DMAX, true);
}

//datatype
int RtCommissionedunit::get_datatype() const { return m_pImp->get_datatype();}
void RtCommissionedunit::set_datatype(const int& datatype)
{
    m_pImp->set_datatype(datatype);
    enable_field(COMMISSIONEDUNIT_DATATYPE);
    setdirty_field(COMMISSIONEDUNIT_DATATYPE, true);
}

//normalizeddose
float RtCommissionedunit::get_normalizeddose() const { return m_pImp->get_normalizeddose();}
void RtCommissionedunit::set_normalizeddose(const float& normalizeddose)
{
    m_pImp->set_normalizeddose(normalizeddose);
    enable_field(COMMISSIONEDUNIT_NORMALIZEDDOSE);
    setdirty_field(COMMISSIONEDUNIT_NORMALIZEDDOSE, true);
}

//xjawfactor
float RtCommissionedunit::get_xjawfactor() const { return m_pImp->get_xjawfactor();}
void RtCommissionedunit::set_xjawfactor(const float& xjawfactor)
{
    m_pImp->set_xjawfactor(xjawfactor);
    enable_field(COMMISSIONEDUNIT_XJAWFACTOR);
    setdirty_field(COMMISSIONEDUNIT_XJAWFACTOR, true);
}

//yjawfactor
float RtCommissionedunit::get_yjawfactor() const { return m_pImp->get_yjawfactor();}
void RtCommissionedunit::set_yjawfactor(const float& yjawfactor)
{
    m_pImp->set_yjawfactor(yjawfactor);
    enable_field(COMMISSIONEDUNIT_YJAWFACTOR);
    setdirty_field(COMMISSIONEDUNIT_YJAWFACTOR, true);
}

//mlcfactor
float RtCommissionedunit::get_mlcfactor() const { return m_pImp->get_mlcfactor();}
void RtCommissionedunit::set_mlcfactor(const float& mlcfactor)
{
    m_pImp->set_mlcfactor(mlcfactor);
    enable_field(COMMISSIONEDUNIT_MLCFACTOR);
    setdirty_field(COMMISSIONEDUNIT_MLCFACTOR, true);
}

//ddmudr
std::string RtCommissionedunit::get_ddmudr() const { return m_pImp->get_ddmudr();}
void RtCommissionedunit::set_ddmudr(const std::string& ddmudr)
{
    m_pImp->set_ddmudr(ddmudr);
    enable_field(COMMISSIONEDUNIT_DDMUDR);
    setdirty_field(COMMISSIONEDUNIT_DDMUDR, true);
}

//defaultdoserateindex
int RtCommissionedunit::get_defaultdoserateindex() const { return m_pImp->get_defaultdoserateindex();}
void RtCommissionedunit::set_defaultdoserateindex(const int& defaultdoserateindex)
{
    m_pImp->set_defaultdoserateindex(defaultdoserateindex);
    enable_field(COMMISSIONEDUNIT_DEFAULTDOSERATEINDEX);
    setdirty_field(COMMISSIONEDUNIT_DEFAULTDOSERATEINDEX, true);
}

//calcmode
bool RtCommissionedunit::get_calcmode() const { return m_pImp->get_calcmode();}
void RtCommissionedunit::set_calcmode(const bool& calcmode)
{
    m_pImp->set_calcmode(calcmode);
    enable_field(COMMISSIONEDUNIT_CALCMODE);
    setdirty_field(COMMISSIONEDUNIT_CALCMODE, true);
}

//updatetime
DATETIME_BOOST RtCommissionedunit::get_updatetime() const { return m_pImp->get_updatetime();}
void RtCommissionedunit::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(COMMISSIONEDUNIT_UPDATETIME);
    setdirty_field(COMMISSIONEDUNIT_UPDATETIME, true);
}

//cctonguewidth
float RtCommissionedunit::get_cctonguewidth() const { return m_pImp->get_cctonguewidth();}
void RtCommissionedunit::set_cctonguewidth(const float& cctonguewidth)
{
    m_pImp->set_cctonguewidth(cctonguewidth);
    enable_field(COMMISSIONEDUNIT_CCTONGUEWIDTH);
    setdirty_field(COMMISSIONEDUNIT_CCTONGUEWIDTH, true);
}

//ccgroovewidth
float RtCommissionedunit::get_ccgroovewidth() const { return m_pImp->get_ccgroovewidth();}
void RtCommissionedunit::set_ccgroovewidth(const float& ccgroovewidth)
{
    m_pImp->set_ccgroovewidth(ccgroovewidth);
    enable_field(COMMISSIONEDUNIT_CCGROOVEWIDTH);
    setdirty_field(COMMISSIONEDUNIT_CCGROOVEWIDTH, true);
}

//ccleaftipwidth
float RtCommissionedunit::get_ccleaftipwidth() const { return m_pImp->get_ccleaftipwidth();}
void RtCommissionedunit::set_ccleaftipwidth(const float& ccleaftipwidth)
{
    m_pImp->set_ccleaftipwidth(ccleaftipwidth);
    enable_field(COMMISSIONEDUNIT_CCLEAFTIPWIDTH);
    setdirty_field(COMMISSIONEDUNIT_CCLEAFTIPWIDTH, true);
}

//reservecc
std::string RtCommissionedunit::get_reservecc() const { return m_pImp->get_reservecc();}
void RtCommissionedunit::set_reservecc(const std::string& reservecc)
{
    m_pImp->set_reservecc(reservecc);
    enable_field(COMMISSIONEDUNIT_RESERVECC);
    setdirty_field(COMMISSIONEDUNIT_RESERVECC, true);
}

//pbtonguewidth
float RtCommissionedunit::get_pbtonguewidth() const { return m_pImp->get_pbtonguewidth();}
void RtCommissionedunit::set_pbtonguewidth(const float& pbtonguewidth)
{
    m_pImp->set_pbtonguewidth(pbtonguewidth);
    enable_field(COMMISSIONEDUNIT_PBTONGUEWIDTH);
    setdirty_field(COMMISSIONEDUNIT_PBTONGUEWIDTH, true);
}

//pbgroovewidth
float RtCommissionedunit::get_pbgroovewidth() const { return m_pImp->get_pbgroovewidth();}
void RtCommissionedunit::set_pbgroovewidth(const float& pbgroovewidth)
{
    m_pImp->set_pbgroovewidth(pbgroovewidth);
    enable_field(COMMISSIONEDUNIT_PBGROOVEWIDTH);
    setdirty_field(COMMISSIONEDUNIT_PBGROOVEWIDTH, true);
}

//pbleaftipwidth
float RtCommissionedunit::get_pbleaftipwidth() const { return m_pImp->get_pbleaftipwidth();}
void RtCommissionedunit::set_pbleaftipwidth(const float& pbleaftipwidth)
{
    m_pImp->set_pbleaftipwidth(pbleaftipwidth);
    enable_field(COMMISSIONEDUNIT_PBLEAFTIPWIDTH);
    setdirty_field(COMMISSIONEDUNIT_PBLEAFTIPWIDTH, true);
}

//reservepb
std::string RtCommissionedunit::get_reservepb() const { return m_pImp->get_reservepb();}
void RtCommissionedunit::set_reservepb(const std::string& reservepb)
{
    m_pImp->set_reservepb(reservepb);
    enable_field(COMMISSIONEDUNIT_RESERVEPB);
    setdirty_field(COMMISSIONEDUNIT_RESERVEPB, true);
}

//cctransmission
float RtCommissionedunit::get_cctransmission() const { return m_pImp->get_cctransmission();}
void RtCommissionedunit::set_cctransmission(const float& cctransmission)
{
    m_pImp->set_cctransmission(cctransmission);
    enable_field(COMMISSIONEDUNIT_CCTRANSMISSION);
    setdirty_field(COMMISSIONEDUNIT_CCTRANSMISSION, true);
}

//pbtransmission
float RtCommissionedunit::get_pbtransmission() const { return m_pImp->get_pbtransmission();}
void RtCommissionedunit::set_pbtransmission(const float& pbtransmission)
{
    m_pImp->set_pbtransmission(pbtransmission);
    enable_field(COMMISSIONEDUNIT_PBTRANSMISSION);
    setdirty_field(COMMISSIONEDUNIT_PBTRANSMISSION, true);
}

//mindoserate_mupermin
float RtCommissionedunit::get_mindoserate_mupermin() const { return m_pImp->get_mindoserate_mupermin();}
void RtCommissionedunit::set_mindoserate_mupermin(const float& mindoserate_mupermin)
{
    m_pImp->set_mindoserate_mupermin(mindoserate_mupermin);
    enable_field(COMMISSIONEDUNIT_MINDOSERATE_MUPERMIN);
    setdirty_field(COMMISSIONEDUNIT_MINDOSERATE_MUPERMIN, true);
}
//////////////////////////////////////////////////////////////////////////
const std::map<std::string, float>& RtCommissionedunit::get_discrete_trayfactor() const { return m_pImp->get_discrete_trayfactor(); }
void RtCommissionedunit::set_discrete_trayfactor(std::map<std::string, float>& mapTrayfactors) { m_pImp->set_discrete_trayfactor(mapTrayfactors); }

RT_TPS_DATABASE_END_NAMESPACE