//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_dosegrid.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_dosegrid.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDosegridImp::RtDosegridImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_planuid(""),
    m_normgroupuid(""),
    m_beamuid(""),
    m_xcoordinate3dstart(0.f),
    m_ycoordinate3dstart(0.f),
    m_zcoordinate3dstart(0.f),
    m_xcoordinate3dinc(0.f),
    m_ycoordinate3dinc(0.f),
    m_zcoordinate3dinc(0.f),
    m_xcount(0),
    m_ycount(0),
    m_zcount(0),
    m_max(0.f),
    m_min(0.f),
    m_accuracy(0.),
	m_dosegridfilepath(""),
    m_dosegridvalue(nullptr),
    m_doseunit(0),
    m_dosesummationtype(0),
    m_bitsallocated(0),
    m_bitsstored(0),
    m_highbits(0),
    m_sopinstanceuid(""),
    m_isdosevalid(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    memset(m_grid_to_pat_t, 0, sizeof(float)*16);
}

RtDosegridImp::RtDosegridImp(const RtDosegridImp& dosegrid):
    m_uid(dosegrid.get_uid()),
    m_planuid(dosegrid.get_planuid()),
    m_normgroupuid(dosegrid.get_normgroupuid()),
    m_beamuid(dosegrid.get_beamuid()),
    m_xcoordinate3dstart(dosegrid.get_xcoordinate3dstart()),
    m_ycoordinate3dstart(dosegrid.get_ycoordinate3dstart()),
    m_zcoordinate3dstart(dosegrid.get_zcoordinate3dstart()),
    m_xcoordinate3dinc(dosegrid.get_xcoordinate3dinc()),
    m_ycoordinate3dinc(dosegrid.get_ycoordinate3dinc()),
    m_zcoordinate3dinc(dosegrid.get_zcoordinate3dinc()),
    m_xcount(dosegrid.get_xcount()),
    m_ycount(dosegrid.get_ycount()),
    m_zcount(dosegrid.get_zcount()),
    m_max(dosegrid.get_max()),
    m_min(dosegrid.get_min()),
    m_accuracy(dosegrid.get_accuracy()),
	m_dosegridfilepath(dosegrid.get_dosegridfilepath()),
    m_dosegridvalue(nullptr),
    m_doseunit(dosegrid.get_doseunit()),
    m_dosesummationtype(dosegrid.get_dosesummationtype()),
    m_bitsallocated(dosegrid.get_bitsallocated()),
    m_bitsstored(dosegrid.get_bitsstored()),
    m_highbits(dosegrid.get_highbits()),
    m_sopinstanceuid(dosegrid.get_sopinstanceuid()),
    m_isdosevalid(dosegrid.get_isdosevalid()),
    m_updatetime(dosegrid.get_updatetime())
{
    this->set_grid_to_pat_t(dosegrid.get_grid_to_pat_t());
    if (nullptr != dosegrid.get_dosegrid_buffer()){
        const int iSize = m_xcount * m_ycount * m_zcount;
        if (iSize > 0 ){
            this->create_dosegrid_buffer();
            memcpy(m_dosegridvalue, dosegrid.get_dosegrid_buffer(),sizeof(float) * iSize);
        }
    }
}

RtDosegridImp& RtDosegridImp::operator=(const RtDosegridImp& dosegrid)
{
    if (this != &dosegrid){
        this->m_uid = dosegrid.get_uid();
        this->m_planuid = dosegrid.get_planuid();
        this->m_normgroupuid = dosegrid.get_normgroupuid();
        this->m_beamuid = dosegrid.get_beamuid();
        this->m_xcoordinate3dstart = dosegrid.get_xcoordinate3dstart();
        this->m_ycoordinate3dstart = dosegrid.get_ycoordinate3dstart();
        this->m_zcoordinate3dstart = dosegrid.get_zcoordinate3dstart();
        this->m_xcoordinate3dinc = dosegrid.get_xcoordinate3dinc();
        this->m_ycoordinate3dinc = dosegrid.get_ycoordinate3dinc();
        this->m_zcoordinate3dinc = dosegrid.get_zcoordinate3dinc();
        this->m_xcount = dosegrid.get_xcount();
        this->m_ycount = dosegrid.get_ycount();
        this->m_zcount = dosegrid.get_zcount();
        this->m_max = dosegrid.get_max();
        this->m_min = dosegrid.get_min();
        this->m_accuracy = dosegrid.get_accuracy();
        this->m_dosegridfilepath = dosegrid.get_dosegridfilepath();
        this->m_doseunit = dosegrid.get_doseunit();
        this->m_dosesummationtype = dosegrid.get_dosesummationtype();
        this->m_bitsallocated = dosegrid.get_bitsallocated();
        this->m_bitsstored = dosegrid.get_bitsstored();
        this->m_highbits = dosegrid.get_highbits();
        this->m_sopinstanceuid = dosegrid.get_sopinstanceuid();
        this->set_grid_to_pat_t(dosegrid.get_grid_to_pat_t());
        this->m_isdosevalid = dosegrid.get_isdosevalid();
        this->m_updatetime = dosegrid.get_updatetime();
        //DEL_ARRAY(m_dosegridvalue);
        if (nullptr != dosegrid.get_dosegrid_buffer())
        {
            const int iSize = m_xcount * m_ycount * m_zcount;
            if (iSize > 0)
            {
                this->create_dosegrid_buffer();
                memcpy(m_dosegridvalue, dosegrid.get_dosegrid_buffer(), sizeof(float) * iSize);
            }
        }
    }
    return *this;
}

RtDosegridImp::~RtDosegridImp()
{
    DEL_ARRAY(m_dosegridvalue);
}


//////////////////////////////////////////////////////////////////////////
RtDosegrid::RtDosegrid(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDosegridImp(bGeneraterUid);
    set_flags(DOSEGRID_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DOSEGRID_FIELD_NULL);
}

RtDosegrid::RtDosegrid(const RtDosegrid& dosegrid): RtDatabaseObject(dosegrid),
   m_pImp(new RtDosegridImp(*dosegrid.m_pImp))
{
}

RtDosegrid& RtDosegrid::operator = (const RtDosegrid& dosegrid)
{
    if(this != &dosegrid)
    {
        RtDatabaseObject::operator=(dosegrid);
        *this->m_pImp = *dosegrid.m_pImp;
    }
    return *this;
}

RtDosegrid::~RtDosegrid()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDosegrid::get_uid() const { return m_pImp->get_uid();}
void RtDosegrid::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DOSEGRID_UID);
    setdirty_field(DOSEGRID_UID, true);
}

//planuid
std::string RtDosegrid::get_planuid() const { return m_pImp->get_planuid();}
void RtDosegrid::set_planuid(const std::string& planuid)
{
    m_pImp->set_planuid(planuid);
    enable_field(DOSEGRID_PLANUID);
    setdirty_field(DOSEGRID_PLANUID, true);
}

//normgroupuid
std::string RtDosegrid::get_normgroupuid() const { return m_pImp->get_normgroupuid();}
void RtDosegrid::set_normgroupuid(const std::string& normgroupuid)
{
    m_pImp->set_normgroupuid(normgroupuid);
    enable_field(DOSEGRID_NORMGROUPUID);
    setdirty_field(DOSEGRID_NORMGROUPUID, true);
}

//beamuid
std::string RtDosegrid::get_beamuid() const { return m_pImp->get_beamuid();}
void RtDosegrid::set_beamuid(const std::string& beamuid)
{
    m_pImp->set_beamuid(beamuid);
    enable_field(DOSEGRID_BEAMUID);
    setdirty_field(DOSEGRID_BEAMUID, true);
}

//xcoordinate3dstart
float RtDosegrid::get_xcoordinate3dstart() const { return m_pImp->get_xcoordinate3dstart();}
void RtDosegrid::set_xcoordinate3dstart(const float& xcoordinate3dstart)
{
    m_pImp->set_xcoordinate3dstart(xcoordinate3dstart);
    enable_field(DOSEGRID_XCOORDINATE3DSTART);
    setdirty_field(DOSEGRID_XCOORDINATE3DSTART, true);
}

//ycoordinate3dstart
float RtDosegrid::get_ycoordinate3dstart() const { return m_pImp->get_ycoordinate3dstart();}
void RtDosegrid::set_ycoordinate3dstart(const float& ycoordinate3dstart)
{
    m_pImp->set_ycoordinate3dstart(ycoordinate3dstart);
    enable_field(DOSEGRID_YCOORDINATE3DSTART);
    setdirty_field(DOSEGRID_YCOORDINATE3DSTART, true);
}

//zcoordinate3dstart
float RtDosegrid::get_zcoordinate3dstart() const { return m_pImp->get_zcoordinate3dstart();}
void RtDosegrid::set_zcoordinate3dstart(const float& zcoordinate3dstart)
{
    m_pImp->set_zcoordinate3dstart(zcoordinate3dstart);
    enable_field(DOSEGRID_ZCOORDINATE3DSTART);
    setdirty_field(DOSEGRID_ZCOORDINATE3DSTART, true);
}

//xcoordinate3dinc
float RtDosegrid::get_xcoordinate3dinc() const { return m_pImp->get_xcoordinate3dinc();}
void RtDosegrid::set_xcoordinate3dinc(const float& xcoordinate3dinc)
{
    m_pImp->set_xcoordinate3dinc(xcoordinate3dinc);
    enable_field(DOSEGRID_XCOORDINATE3DINC);
    setdirty_field(DOSEGRID_XCOORDINATE3DINC, true);
}

//ycoordinate3dinc
float RtDosegrid::get_ycoordinate3dinc() const { return m_pImp->get_ycoordinate3dinc();}
void RtDosegrid::set_ycoordinate3dinc(const float& ycoordinate3dinc)
{
    m_pImp->set_ycoordinate3dinc(ycoordinate3dinc);
    enable_field(DOSEGRID_YCOORDINATE3DINC);
    setdirty_field(DOSEGRID_YCOORDINATE3DINC, true);
}

//zcoordinate3dinc
float RtDosegrid::get_zcoordinate3dinc() const { return m_pImp->get_zcoordinate3dinc();}
void RtDosegrid::set_zcoordinate3dinc(const float& zcoordinate3dinc)
{
    m_pImp->set_zcoordinate3dinc(zcoordinate3dinc);
    enable_field(DOSEGRID_ZCOORDINATE3DINC);
    setdirty_field(DOSEGRID_ZCOORDINATE3DINC, true);
}

//xcount
int RtDosegrid::get_xcount() const { return m_pImp->get_xcount();}
void RtDosegrid::set_xcount(const int& xcount)
{
    m_pImp->set_xcount(xcount);
    enable_field(DOSEGRID_XCOUNT);
    setdirty_field(DOSEGRID_XCOUNT, true);
}

//ycount
int RtDosegrid::get_ycount() const { return m_pImp->get_ycount();}
void RtDosegrid::set_ycount(const int& ycount)
{
    m_pImp->set_ycount(ycount);
    enable_field(DOSEGRID_YCOUNT);
    setdirty_field(DOSEGRID_YCOUNT, true);
}

//zcount
int RtDosegrid::get_zcount() const { return m_pImp->get_zcount();}
void RtDosegrid::set_zcount(const int& zcount)
{
    m_pImp->set_zcount(zcount);
    enable_field(DOSEGRID_ZCOUNT);
    setdirty_field(DOSEGRID_ZCOUNT, true);
}

//max
float RtDosegrid::get_max() const { return m_pImp->get_max();}
void RtDosegrid::set_max(const float& max)
{
    m_pImp->set_max(max);
    enable_field(DOSEGRID_MAX);
    setdirty_field(DOSEGRID_MAX, true);
}

//min
float RtDosegrid::get_min() const { return m_pImp->get_min();}
void RtDosegrid::set_min(const float& min)
{
    m_pImp->set_min(min);
    enable_field(DOSEGRID_MIN);
    setdirty_field(DOSEGRID_MIN, true);
}

//accuracy
double RtDosegrid::get_accuracy() const { return m_pImp->get_accuracy();}
void RtDosegrid::set_accuracy(const double& accuracy)
{
    m_pImp->set_accuracy(accuracy);
    enable_field(DOSEGRID_ACCURACY);
    setdirty_field(DOSEGRID_ACCURACY, true);
}

//dosegridfilepath
std::string RtDosegrid::get_dosegridfilepath() const { return m_pImp->get_dosegridfilepath();}
void RtDosegrid::set_dosegridfilepath(const std::string& dosegridfilepath)
{
    m_pImp->set_dosegridfilepath(dosegridfilepath);
    enable_field(DOSEGRID_DOSEGRIDFILEPATH);
    setdirty_field(DOSEGRID_DOSEGRIDFILEPATH, true);
}

//dosegridvalue
const float* RtDosegrid::get_dosegrid_buffer() const { return m_pImp->get_dosegrid_buffer(); }
float* RtDosegrid::get_dosegrid_buffer() { return m_pImp->get_dosegrid_buffer(); }
void RtDosegrid::clear_dosegrid_buffer() 
{
    m_pImp->clear_dosegrid_buffer(); 
    enable_field(DOSEGRID_DOSEGRIDFILEPATH);
    setdirty_field(DOSEGRID_DOSEGRIDFILEPATH, true);
}
float* RtDosegrid::create_dosegrid_buffer() 
{
    float* fBuffer = m_pImp->create_dosegrid_buffer(); 
    enable_field(DOSEGRID_DOSEGRIDFILEPATH);
    setdirty_field(DOSEGRID_DOSEGRIDFILEPATH, true);
    return fBuffer;
}



//doseunit
int RtDosegrid::get_doseunit() const { return m_pImp->get_doseunit();}
void RtDosegrid::set_doseunit(const int& doseunit)
{
    m_pImp->set_doseunit(doseunit);
    enable_field(DOSEGRID_DOSEUNIT);
    setdirty_field(DOSEGRID_DOSEUNIT, true);
}

//dosesummationtype
int RtDosegrid::get_dosesummationtype() const { return m_pImp->get_dosesummationtype();}
void RtDosegrid::set_dosesummationtype(const int& dosesummationtype)
{
    m_pImp->set_dosesummationtype(dosesummationtype);
    enable_field(DOSEGRID_DOSESUMMATIONTYPE);
    setdirty_field(DOSEGRID_DOSESUMMATIONTYPE, true);
}

//bitsallocated
int RtDosegrid::get_bitsallocated() const { return m_pImp->get_bitsallocated();}
void RtDosegrid::set_bitsallocated(const int& bitsallocated)
{
    m_pImp->set_bitsallocated(bitsallocated);
    enable_field(DOSEGRID_BITSALLOCATED);
    setdirty_field(DOSEGRID_BITSALLOCATED, true);
}

//bitsstored
int RtDosegrid::get_bitsstored() const { return m_pImp->get_bitsstored();}
void RtDosegrid::set_bitsstored(const int& bitsstored)
{
    m_pImp->set_bitsstored(bitsstored);
    enable_field(DOSEGRID_BITSSTORED);
    setdirty_field(DOSEGRID_BITSSTORED, true);
}

//highbits
int RtDosegrid::get_highbits() const { return m_pImp->get_highbits();}
void RtDosegrid::set_highbits(const int& highbits)
{
    m_pImp->set_highbits(highbits);
    enable_field(DOSEGRID_HIGHBITS);
    setdirty_field(DOSEGRID_HIGHBITS, true);
}

//sopinstanceuid
std::string RtDosegrid::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtDosegrid::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(DOSEGRID_SOPINSTANCEUID);
    setdirty_field(DOSEGRID_SOPINSTANCEUID, true);
}

//grid_to_pat_t
const float* RtDosegrid::get_grid_to_pat_t() const { return m_pImp->get_grid_to_pat_t(); }
void RtDosegrid::set_grid_to_pat_t(const float* grid_to_pat_t) 
{
    m_pImp->set_grid_to_pat_t(grid_to_pat_t); 
    enable_field(DOSEGRID_GRID_TO_PAT_T);
    setdirty_field(DOSEGRID_GRID_TO_PAT_T, true);
}

//isdosevalid
bool RtDosegrid::get_isdosevalid() const { return m_pImp->get_isdosevalid();}
void RtDosegrid::set_isdosevalid(const bool& isdosevalid)
{
    m_pImp->set_isdosevalid(isdosevalid);
    enable_field(DOSEGRID_ISDOSEVALID);
    setdirty_field(DOSEGRID_ISDOSEVALID, true);
}

//updatetime
DATETIME_BOOST RtDosegrid::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDosegrid::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DOSEGRID_UPDATETIME);
    setdirty_field(DOSEGRID_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE
