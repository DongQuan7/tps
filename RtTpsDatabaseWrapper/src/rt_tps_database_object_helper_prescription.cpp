//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_prescription.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_prescription.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtPrescription& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //44 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < PRESCRIPTION_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_PRESCRIPTION_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsprescription SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < PRESCRIPTION_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_PRESCRIPTION_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsprescription (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_siteuid = "";
    std::string	data_name = "";
    int			data_technical = 0;
    std::string	data_notes = "";
    double		data_doseperfraction = 0.;
    int			data_fractionsnumber = 0;
    MYSQL_TIME	data_createdtime;
    int			data_radiationtype = 0;
    std::string	data_beammode = "";
    std::string	data_relatedprescriptionuid = "";
    int			data_relatedprescriptionduration = 0;
    int			data_durationtype = 0;
    int			data_afterfractionnumber = 0;
    int			data_treatmentordertype = 0;
    bool		data_ismondayselected = false;
    bool		data_istuesdayselected = false;
    bool		data_iswednesdayselected = false;
    bool		data_isthursdayselected = false;
    bool		data_isfridayselected = false;
    bool		data_issaturdayselected = false;
    bool		data_issundayselected = false;
    bool		data_isincludeholiday = false;
    int			data_timesperday = 0;
    float		data_intervalhour = 0.f;
    std::string	data_other = "";
    std::string	data_targettype = "";
    int			data_targeteffecttype = 0;
    float		data_targeteffectpercent = 0.f;
    bool		data_isdefault = false;
    std::string	data_sitename = "";
    bool		data_istxpatternofrxchanged = false;
    bool		data_istxpatternofplangoalchanged = false;
    int			data_treatmenttarget = 0;
    float		data_depth = 0.f;
    int			data_planningroletype = 0;
    std::string	data_crc = "";
    double		data_totaldose = 0.;
    bool		data_isgating = false;
    MYSQL_TIME	data_updatetime;
    int			data_binmode = 0;
    double		data_beamonrangestart = 0.;
    double		data_beamonrangeend = 0.;
    std::string	data_imageguidepattern = "";

    unsigned int iCount = 0;
    for (unsigned int i(0); i < PRESCRIPTION_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//siteuid varchar
            {
                data_siteuid = src.get_siteuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_siteuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_siteuid.size();
            }
            break;
        case 2: 	//name varchar
            {
                data_name = src.get_name();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name.size();
            }
            break;
        case 3: 	//technical int
            {
                data_technical = src.get_technical();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_technical;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 4: 	//notes varchar
            {
                data_notes = src.get_notes();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_notes.c_str();
                bind[iCount].buffer_length = (unsigned long)data_notes.size();
            }
            break;
        case 5: 	//doseperfraction double
            {
                data_doseperfraction = src.get_doseperfraction();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_doseperfraction;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 6: 	//fractionsnumber int
            {
                data_fractionsnumber = src.get_fractionsnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_fractionsnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 7: 	//createdtime datetime
            {
                ConvertDateTime2DB(src.get_createdtime(), &data_createdtime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_createdtime;
                if (src.get_createdtime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 8: 	//radiationtype int
            {
                data_radiationtype = src.get_radiationtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_radiationtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 9: 	//beammode varchar
            {
                data_beammode = src.get_beammode();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_beammode.c_str();
                bind[iCount].buffer_length = (unsigned long)data_beammode.size();
            }
            break;
        case 10: 	//relatedprescriptionuid varchar
            {
                data_relatedprescriptionuid = src.get_relatedprescriptionuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_relatedprescriptionuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_relatedprescriptionuid.size();
            }
            break;
        case 11: 	//relatedprescriptionduration int
            {
                data_relatedprescriptionduration = src.get_relatedprescriptionduration();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_relatedprescriptionduration;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 12: 	//durationtype int
            {
                data_durationtype = src.get_durationtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_durationtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 13: 	//afterfractionnumber int
            {
                data_afterfractionnumber = src.get_afterfractionnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_afterfractionnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 14: 	//treatmentordertype int
            {
                data_treatmentordertype = src.get_treatmentordertype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_treatmentordertype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 15: 	//ismondayselected tinyint
            {
                data_ismondayselected = src.get_ismondayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_ismondayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 16: 	//istuesdayselected tinyint
            {
                data_istuesdayselected = src.get_istuesdayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_istuesdayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 17: 	//iswednesdayselected tinyint
            {
                data_iswednesdayselected = src.get_iswednesdayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_iswednesdayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 18: 	//isthursdayselected tinyint
            {
                data_isthursdayselected = src.get_isthursdayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isthursdayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 19: 	//isfridayselected tinyint
            {
                data_isfridayselected = src.get_isfridayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isfridayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 20: 	//issaturdayselected tinyint
            {
                data_issaturdayselected = src.get_issaturdayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_issaturdayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 21: 	//issundayselected tinyint
            {
                data_issundayselected = src.get_issundayselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_issundayselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 22: 	//isincludeholiday tinyint
            {
                data_isincludeholiday = src.get_isincludeholiday();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isincludeholiday;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 23: 	//timesperday int
            {
                data_timesperday = src.get_timesperday();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_timesperday;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 24: 	//intervalhour float
            {
                data_intervalhour = src.get_intervalhour();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_intervalhour;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 25: 	//other varchar
            {
                data_other = src.get_other();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_other.c_str();
                bind[iCount].buffer_length = (unsigned long)data_other.size();
            }
            break;
        case 26: 	//targettype varchar
            {
                data_targettype = src.get_targettype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_targettype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_targettype.size();
            }
            break;
        case 27: 	//targeteffecttype int
            {
                data_targeteffecttype = src.get_targeteffecttype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_targeteffecttype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 28: 	//targeteffectpercent float
            {
                data_targeteffectpercent = src.get_targeteffectpercent();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_targeteffectpercent;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 29: 	//isdefault tinyint
            {
                data_isdefault = src.get_isdefault();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isdefault;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 30: 	//sitename varchar
            {
                data_sitename = src.get_sitename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sitename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sitename.size();
            }
            break;
        case 31: 	//istxpatternofrxchanged tinyint
            {
                data_istxpatternofrxchanged = src.get_istxpatternofrxchanged();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_istxpatternofrxchanged;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 32: 	//istxpatternofplangoalchanged tinyint
            {
                data_istxpatternofplangoalchanged = src.get_istxpatternofplangoalchanged();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_istxpatternofplangoalchanged;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 33: 	//treatmenttarget int
            {
                data_treatmenttarget = src.get_treatmenttarget();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_treatmenttarget;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 34: 	//depth float
            {
                data_depth = src.get_depth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_depth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 35: 	//planningroletype int
            {
                data_planningroletype = src.get_planningroletype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_planningroletype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 36: 	//crc varchar
            {
                data_crc = src.get_crc();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_crc.c_str();
                bind[iCount].buffer_length = (unsigned long)data_crc.size();
            }
            break;
        case 37: 	//totaldose double
            {
                data_totaldose = src.get_totaldose();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_totaldose;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 38: 	//isgating tinyint
            {
                data_isgating = src.get_isgating();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isgating;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 39: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 40: 	//binmode int
            {
                data_binmode = src.get_binmode();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_binmode;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 41: 	//beamonrangestart double
            {
                data_beamonrangestart = src.get_beamonrangestart();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_beamonrangestart;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 42: 	//beamonrangeend double
            {
                data_beamonrangeend = src.get_beamonrangeend();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_beamonrangeend;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 43: 	//imageguidepattern varchar
            {
                data_imageguidepattern = src.get_imageguidepattern();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imageguidepattern.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imageguidepattern.size();
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtPrescription*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtPrescription*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsprescription    44 parameters
    const int field_num = PRESCRIPTION_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 100;
    MAX_LENGTH[3] = 0;
    MAX_LENGTH[4] = 1024;
    MAX_LENGTH[5] = 0;
    MAX_LENGTH[6] = 0;
    MAX_LENGTH[7] = 0;
    MAX_LENGTH[8] = 0;
    MAX_LENGTH[9] = 64;
    MAX_LENGTH[10] = 64;
    MAX_LENGTH[11] = 0;
    MAX_LENGTH[12] = 0;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 0;
    MAX_LENGTH[15] = 0;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 0;
    MAX_LENGTH[19] = 0;
    MAX_LENGTH[20] = 0;
    MAX_LENGTH[21] = 0;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 0;
    MAX_LENGTH[24] = 0;
    MAX_LENGTH[25] = 1024;
    MAX_LENGTH[26] = 64;
    MAX_LENGTH[27] = 0;
    MAX_LENGTH[28] = 0;
    MAX_LENGTH[29] = 0;
    MAX_LENGTH[30] = 64;
    MAX_LENGTH[31] = 0;
    MAX_LENGTH[32] = 0;
    MAX_LENGTH[33] = 0;
    MAX_LENGTH[34] = 0;
    MAX_LENGTH[35] = 0;
    MAX_LENGTH[36] = 64;
    MAX_LENGTH[37] = 0;
    MAX_LENGTH[38] = 0;
    MAX_LENGTH[39] = 0;
    MAX_LENGTH[40] = 0;
    MAX_LENGTH[41] = 0;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 2048;

    //std::string	data_uid
    //std::string	data_siteuid
    //std::string	data_name
    int	data_technical = 0;
    //std::string	data_notes
    double	data_doseperfraction = 0.;
    int	data_fractionsnumber = 0;
    MYSQL_TIME	data_createdtime;
    int	data_radiationtype = 0;
    //std::string	data_beammode
    //std::string	data_relatedprescriptionuid
    int	data_relatedprescriptionduration = 0;
    int	data_durationtype = 0;
    int	data_afterfractionnumber = 0;
    int	data_treatmentordertype = 0;
    bool	data_ismondayselected = false;
    bool	data_istuesdayselected = false;
    bool	data_iswednesdayselected = false;
    bool	data_isthursdayselected = false;
    bool	data_isfridayselected = false;
    bool	data_issaturdayselected = false;
    bool	data_issundayselected = false;
    bool	data_isincludeholiday = false;
    int	data_timesperday = 0;
    float	data_intervalhour = 0.f;
    //std::string	data_other
    //std::string	data_targettype
    int	data_targeteffecttype = 0;
    float	data_targeteffectpercent = 0.f;
    bool	data_isdefault = false;
    //std::string	data_sitename
    bool	data_istxpatternofrxchanged = false;
    bool	data_istxpatternofplangoalchanged = false;
    int	data_treatmenttarget = 0;
    float	data_depth = 0.f;
    int	data_planningroletype = 0;
    //std::string	data_crc
    double	data_totaldose = 0.;
    bool	data_isgating = false;
    MYSQL_TIME	data_updatetime;
    int	data_binmode = 0;
    double	data_beamonrangestart = 0.;
    double	data_beamonrangeend = 0.;
    //std::string	data_imageguidepattern

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 3: 	//technical int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_technical;
            break;
        case 5: 	//doseperfraction double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_doseperfraction;
            break;
        case 6: 	//fractionsnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_fractionsnumber;
            break;
        case 7: 	//createdtime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_createdtime;
            break;
        case 8: 	//radiationtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_radiationtype;
            break;
        case 11: 	//relatedprescriptionduration int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_relatedprescriptionduration;
            break;
        case 12: 	//durationtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_durationtype;
            break;
        case 13: 	//afterfractionnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_afterfractionnumber;
            break;
        case 14: 	//treatmentordertype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_treatmentordertype;
            break;
        case 15: 	//ismondayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_ismondayselected;
            break;
        case 16: 	//istuesdayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_istuesdayselected;
            break;
        case 17: 	//iswednesdayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_iswednesdayselected;
            break;
        case 18: 	//isthursdayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isthursdayselected;
            break;
        case 19: 	//isfridayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isfridayselected;
            break;
        case 20: 	//issaturdayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_issaturdayselected;
            break;
        case 21: 	//issundayselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_issundayselected;
            break;
        case 22: 	//isincludeholiday tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isincludeholiday;
            break;
        case 23: 	//timesperday int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_timesperday;
            break;
        case 24: 	//intervalhour float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_intervalhour;
            break;
        case 27: 	//targeteffecttype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_targeteffecttype;
            break;
        case 28: 	//targeteffectpercent float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_targeteffectpercent;
            break;
        case 29: 	//isdefault tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isdefault;
            break;
        case 31: 	//istxpatternofrxchanged tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_istxpatternofrxchanged;
            break;
        case 32: 	//istxpatternofplangoalchanged tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_istxpatternofplangoalchanged;
            break;
        case 33: 	//treatmenttarget int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_treatmenttarget;
            break;
        case 34: 	//depth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_depth;
            break;
        case 35: 	//planningroletype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_planningroletype;
            break;
        case 37: 	//totaldose double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_totaldose;
            break;
        case 38: 	//isgating tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isgating;
            break;
        case 39: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        case 40: 	//binmode int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_binmode;
            break;
        case 41: 	//beamonrangestart double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_beamonrangestart;
            break;
        case 42: 	//beamonrangeend double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_beamonrangeend;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtPrescription* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtPrescription();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//siteuid varchar
                pDis->set_siteuid((char *)bind[i].buffer);
                break;
            case 2: 	//name varchar
                pDis->set_name((char *)bind[i].buffer);
                break;
            case 3: 	//technical int
                pDis->set_technical(data_technical);
                break;
            case 4: 	//notes varchar
                pDis->set_notes((char *)bind[i].buffer);
                break;
            case 5: 	//doseperfraction double
                pDis->set_doseperfraction(data_doseperfraction);
                break;
            case 6: 	//fractionsnumber int
                pDis->set_fractionsnumber(data_fractionsnumber);
                break;
            case 7: 	//createdtime datetime
                {
                    DATETIME_BOOST createdtime;
                    ConvertDateTime2Boost(data_createdtime, &createdtime);
                    pDis->set_createdtime(createdtime);
                }
                break;
            case 8: 	//radiationtype int
                pDis->set_radiationtype(data_radiationtype);
                break;
            case 9: 	//beammode varchar
                pDis->set_beammode((char *)bind[i].buffer);
                break;
            case 10: 	//relatedprescriptionuid varchar
                pDis->set_relatedprescriptionuid((char *)bind[i].buffer);
                break;
            case 11: 	//relatedprescriptionduration int
                pDis->set_relatedprescriptionduration(data_relatedprescriptionduration);
                break;
            case 12: 	//durationtype int
                pDis->set_durationtype(data_durationtype);
                break;
            case 13: 	//afterfractionnumber int
                pDis->set_afterfractionnumber(data_afterfractionnumber);
                break;
            case 14: 	//treatmentordertype int
                pDis->set_treatmentordertype(data_treatmentordertype);
                break;
            case 15: 	//ismondayselected tinyint
                pDis->set_ismondayselected(data_ismondayselected);
                break;
            case 16: 	//istuesdayselected tinyint
                pDis->set_istuesdayselected(data_istuesdayselected);
                break;
            case 17: 	//iswednesdayselected tinyint
                pDis->set_iswednesdayselected(data_iswednesdayselected);
                break;
            case 18: 	//isthursdayselected tinyint
                pDis->set_isthursdayselected(data_isthursdayselected);
                break;
            case 19: 	//isfridayselected tinyint
                pDis->set_isfridayselected(data_isfridayselected);
                break;
            case 20: 	//issaturdayselected tinyint
                pDis->set_issaturdayselected(data_issaturdayselected);
                break;
            case 21: 	//issundayselected tinyint
                pDis->set_issundayselected(data_issundayselected);
                break;
            case 22: 	//isincludeholiday tinyint
                pDis->set_isincludeholiday(data_isincludeholiday);
                break;
            case 23: 	//timesperday int
                pDis->set_timesperday(data_timesperday);
                break;
            case 24: 	//intervalhour float
                pDis->set_intervalhour(data_intervalhour);
                break;
            case 25: 	//other varchar
                pDis->set_other((char *)bind[i].buffer);
                break;
            case 26: 	//targettype varchar
                pDis->set_targettype((char *)bind[i].buffer);
                break;
            case 27: 	//targeteffecttype int
                pDis->set_targeteffecttype(data_targeteffecttype);
                break;
            case 28: 	//targeteffectpercent float
                pDis->set_targeteffectpercent(data_targeteffectpercent);
                break;
            case 29: 	//isdefault tinyint
                pDis->set_isdefault(data_isdefault);
                break;
            case 30: 	//sitename varchar
                pDis->set_sitename((char *)bind[i].buffer);
                break;
            case 31: 	//istxpatternofrxchanged tinyint
                pDis->set_istxpatternofrxchanged(data_istxpatternofrxchanged);
                break;
            case 32: 	//istxpatternofplangoalchanged tinyint
                pDis->set_istxpatternofplangoalchanged(data_istxpatternofplangoalchanged);
                break;
            case 33: 	//treatmenttarget int
                pDis->set_treatmenttarget(data_treatmenttarget);
                break;
            case 34: 	//depth float
                pDis->set_depth(data_depth);
                break;
            case 35: 	//planningroletype int
                pDis->set_planningroletype(data_planningroletype);
                break;
            case 36: 	//crc varchar
                pDis->set_crc((char *)bind[i].buffer);
                break;
            case 37: 	//totaldose double
                pDis->set_totaldose(data_totaldose);
                break;
            case 38: 	//isgating tinyint
                pDis->set_isgating(data_isgating);
                break;
            case 39: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            case 40: 	//binmode int
                pDis->set_binmode(data_binmode);
                break;
            case 41: 	//beamonrangestart double
                pDis->set_beamonrangestart(data_beamonrangestart);
                break;
            case 42: 	//beamonrangeend double
                pDis->set_beamonrangeend(data_beamonrangeend);
                break;
            case 43: 	//imageguidepattern varchar
                pDis->set_imageguidepattern((char *)bind[i].buffer);
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE