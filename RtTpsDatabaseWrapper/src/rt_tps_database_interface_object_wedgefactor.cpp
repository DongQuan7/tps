//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_wedgefactor.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_wedgefactor.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtWedgefactorImp::RtWedgefactorImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_commissionedunituid(""),
    m_wedgefactorlist(""),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtWedgefactorImp::RtWedgefactorImp(const RtWedgefactorImp& wedgefactor):
    m_uid(wedgefactor.get_uid()),
    m_commissionedunituid(wedgefactor.get_commissionedunituid()),
    m_wedgefactorlist(wedgefactor.get_wedgefactorlist()),
    m_crc(wedgefactor.get_crc()),
    m_updatetime(wedgefactor.get_updatetime())
{
}

RtWedgefactorImp& RtWedgefactorImp::operator=(const RtWedgefactorImp& wedgefactor)
{
    if (this != &wedgefactor){
        this->m_uid = wedgefactor.get_uid();
        this->m_commissionedunituid = wedgefactor.get_commissionedunituid();
        this->m_wedgefactorlist = wedgefactor.get_wedgefactorlist();
        this->m_crc = wedgefactor.get_crc();
        this->m_updatetime = wedgefactor.get_updatetime();
    }
    return *this;
}

RtWedgefactorImp::~RtWedgefactorImp()
{
}

std::vector<DBWedgeInfo*> RtWedgefactorImp::GetWedgeFactorList() const
{
    return m_vWedgeFactorList;
}

////////////////////////////////////////////
///  \brief      SetWedgeFactorList 
////////////////////////////////////////////
void RtWedgefactorImp::SetWedgeFactorList(const std::vector<DBWedgeInfo*>& vWedgeFactorList)
{
    for (std::vector<DBWedgeInfo*>::iterator it = m_vWedgeFactorList.begin();it != m_vWedgeFactorList.end();it++)
    {
        delete *it;
    }
    size_t iLen = vWedgeFactorList.size();
    m_vWedgeFactorList.resize(iLen);
    for (int i = 0;i < iLen;i++)
    {
        m_vWedgeFactorList[i] = new DBWedgeInfo(*vWedgeFactorList[i]);
    }
}


//////////////////////////////////////////////////////////////////////////
RtWedgefactor::RtWedgefactor(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtWedgefactorImp(bGeneraterUid);
    set_flags(WEDGEFACTOR_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_WEDGEFACTOR_FIELD_NULL);
}

RtWedgefactor::RtWedgefactor(const RtWedgefactor& wedgefactor): RtDatabaseObject(wedgefactor),
   m_pImp(new RtWedgefactorImp(*wedgefactor.m_pImp))
{
}

RtWedgefactor& RtWedgefactor::operator = (const RtWedgefactor& wedgefactor)
{
    if(this != &wedgefactor)
    {
        RtDatabaseObject::operator=(wedgefactor);
        *this->m_pImp = *wedgefactor.m_pImp;
    }
    return *this;
}

RtWedgefactor::~RtWedgefactor()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtWedgefactor::get_uid() const { return m_pImp->get_uid();}
void RtWedgefactor::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(WEDGEFACTOR_UID);
    setdirty_field(WEDGEFACTOR_UID, true);
}

//commissionedunituid
std::string RtWedgefactor::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtWedgefactor::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(WEDGEFACTOR_COMMISSIONEDUNITUID);
    setdirty_field(WEDGEFACTOR_COMMISSIONEDUNITUID, true);
}

//wedgefactorlist
std::string RtWedgefactor::get_wedgefactorlist() const { return m_pImp->get_wedgefactorlist();}
void RtWedgefactor::set_wedgefactorlist(const std::string& wedgefactorlist)
{
    m_pImp->set_wedgefactorlist(wedgefactorlist);
    enable_field(WEDGEFACTOR_WEDGEFACTORLIST);
    setdirty_field(WEDGEFACTOR_WEDGEFACTORLIST, true);
}

//crc
std::string RtWedgefactor::get_crc() const { return m_pImp->get_crc();}
void RtWedgefactor::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(WEDGEFACTOR_CRC);
    setdirty_field(WEDGEFACTOR_CRC, true);
}

//updatetime
DATETIME_BOOST RtWedgefactor::get_updatetime() const { return m_pImp->get_updatetime();}
void RtWedgefactor::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(WEDGEFACTOR_UPDATETIME);
    setdirty_field(WEDGEFACTOR_UPDATETIME, true);
}



std::vector<DBWedgeInfo*> RtWedgefactor::GetWedgeFactorList() const{
    return m_pImp->GetWedgeFactorList();
}
void RtWedgefactor::SetWedgeFactorList(const std::vector<DBWedgeInfo*>& vWedgeFactorList){
    m_pImp->SetWedgeFactorList(vWedgeFactorList);
}

RT_TPS_DATABASE_END_NAMESPACE