//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_ct2density.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_ct2density.h"
#include <map>
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtCt2densityImp::RtCt2densityImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_tablename(""),
    m_isdefault(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    m_ct2densityMap.clear();
    m_ct2referencedensityMap.clear();
    memset(m_ct2densityBuffer, 0, sizeof(float) * 6025);
    memset(m_ct2referencedensityBuffer, 0, sizeof(float) * 6025);
}

RtCt2densityImp::RtCt2densityImp(const RtCt2densityImp& ct2density):
    m_uid(ct2density.get_uid()),
    m_tablename(ct2density.get_tablename()),
    m_isdefault(ct2density.get_isdefault()),
    m_updatetime(ct2density.get_updatetime())
{
    m_ct2densityMap = ct2density.get_ct2densitymap();
    m_ct2referencedensityMap = ct2density.get_ct2referencedensitymap();
    if (nullptr != ct2density.get_ct2densitybuffer())
    {
        memcpy(m_ct2densityBuffer, ct2density.get_ct2densitybuffer(), sizeof(float) * 6025);
    }
    if (nullptr != ct2density.get_ct2referencedensitybuffer())
    {
        memcpy(m_ct2referencedensityBuffer, ct2density.get_ct2referencedensitybuffer(), sizeof(float) * 6025);
    }
}

RtCt2densityImp& RtCt2densityImp::operator=(const RtCt2densityImp& ct2density)
{
    if (this != &ct2density)
    {
        this->m_uid = ct2density.get_uid();
        this->m_tablename = ct2density.get_tablename();
        this->m_isdefault = ct2density.get_isdefault();
        this->m_updatetime = ct2density.get_updatetime();
        m_ct2densityMap = ct2density.get_ct2densitymap();
        m_ct2referencedensityMap = ct2density.get_ct2referencedensitymap();
        if (nullptr != ct2density.get_ct2densitybuffer())
        {
            memcpy(m_ct2densityBuffer, ct2density.get_ct2densitybuffer(), sizeof(float) * 6025);
        }
        if (nullptr != ct2density.get_ct2referencedensitybuffer())
        {
            memcpy(m_ct2referencedensityBuffer, ct2density.get_ct2referencedensitybuffer(), sizeof(float) * 6025);
        }
    }
    return *this;
}

RtCt2densityImp::~RtCt2densityImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtCt2density::RtCt2density(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtCt2densityImp(bGeneraterUid);
    set_flags(CT2DENSITY_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_CT2DENSITY_FIELD_NULL);
}

RtCt2density::RtCt2density(const RtCt2density& ct2density): RtDatabaseObject(ct2density),
   m_pImp(new RtCt2densityImp(*ct2density.m_pImp))
{
}

RtCt2density& RtCt2density::operator = (const RtCt2density& ct2density)
{
    if(this != &ct2density)
    {
        RtDatabaseObject::operator=(ct2density);
        *this->m_pImp = *ct2density.m_pImp;
    }
    return *this;
}

RtCt2density::~RtCt2density()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtCt2density::get_uid() const { return m_pImp->get_uid();}
void RtCt2density::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(CT2DENSITY_UID);
    setdirty_field(CT2DENSITY_UID, true);
}

//tablename
std::string RtCt2density::get_tablename() const { return m_pImp->get_tablename();}
void RtCt2density::set_tablename(const std::string& tablename)
{
    m_pImp->set_tablename(tablename);
    enable_field(CT2DENSITY_TABLENAME);
    setdirty_field(CT2DENSITY_TABLENAME, true);
}

//ct2densityvalue
const std::map<int, float>& RtCt2density::get_ct2densitymap() const {return m_pImp->get_ct2densitymap();}
const float* RtCt2density::get_ct2densitybuffer() const {return m_pImp->get_ct2densitybuffer();}
void RtCt2density::set_ct2densitymap(const std::map<int, float>& ct2densityMap)
{
    m_pImp->set_ct2densitymap(ct2densityMap);
    enable_field(CT2DENSITY_CT2DENSITYVALUE);
    setdirty_field(CT2DENSITY_CT2DENSITYVALUE, true);
}

const std::map<int, float>& RtCt2density::get_ct2referencedensitymap() const {return m_pImp->get_ct2referencedensitymap();}
const float* RtCt2density::get_ct2referencedensitybuffer() const {return m_pImp->get_ct2referencedensitybuffer();}
void RtCt2density::set_ct2referencedensitymap(const std::map<int, float>& ct2referencedensityMap)
{
    m_pImp->set_ct2referencedensitymap(ct2referencedensityMap);
    enable_field(CT2DENSITY_CT2DENSITYVALUE);
    setdirty_field(CT2DENSITY_CT2DENSITYVALUE, true);
}

//isdefault
bool RtCt2density::get_isdefault() const { return m_pImp->get_isdefault();}
void RtCt2density::set_isdefault(const bool& isdefault)
{
    m_pImp->set_isdefault(isdefault);
    enable_field(CT2DENSITY_ISDEFAULT);
    setdirty_field(CT2DENSITY_ISDEFAULT, true);
}

//updatetime
DATETIME_BOOST RtCt2density::get_updatetime() const { return m_pImp->get_updatetime();}
void RtCt2density::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(CT2DENSITY_UPDATETIME);
    setdirty_field(CT2DENSITY_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE