//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_block.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_block.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtBlockImp::RtBlockImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_beamuid(""),
    m_treatmentbeamuid(""),
    m_targetvoiuid(""),
    m_targetmarginx(0.f),
    m_targetmarginy(0.f),
    m_avoidvoiuid(""),
    m_avoidmarginx(0.f),
    m_avoidmarginy(0.f),
    m_isautoshape(false),
    m_blocknumber(0),
    m_blocktype(0),
    m_blockname(""),
    m_sourcetotraydistance(0.f),
    m_blockdivergence(0),
    m_blockmountingposition(0),
    m_materialid(""),
    m_blockthickness(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtBlockImp::RtBlockImp(const RtBlockImp& block):
    m_uid(block.get_uid()),
    m_beamuid(block.get_beamuid()),
    m_treatmentbeamuid(block.get_treatmentbeamuid()),
    m_points(block.get_points()),
    m_targetvoiuid(block.get_targetvoiuid()),
    m_targetmarginx(block.get_targetmarginx()),
    m_targetmarginy(block.get_targetmarginy()),
    m_avoidvoiuid(block.get_avoidvoiuid()),
    m_avoidmarginx(block.get_avoidmarginx()),
    m_avoidmarginy(block.get_avoidmarginy()),
    m_isautoshape(block.get_isautoshape()),
    m_blocknumber(block.get_blocknumber()),
    m_blocktype(block.get_blocktype()),
    m_blockname(block.get_blockname()),
    m_sourcetotraydistance(block.get_sourcetotraydistance()),
    m_blockdivergence(block.get_blockdivergence()),
    m_blockmountingposition(block.get_blockmountingposition()),
    m_materialid(block.get_materialid()),
    m_blockthickness(block.get_blockthickness()),
    m_updatetime(block.get_updatetime())
{
    this->m_points = block.get_points();
}

RtBlockImp& RtBlockImp::operator=(const RtBlockImp& block)
{
    if (this != &block){
        this->m_uid = block.get_uid();
        this->m_beamuid = block.get_beamuid();
        this->m_treatmentbeamuid = block.get_treatmentbeamuid();
        this->m_points = block.get_points();
        this->m_targetvoiuid = block.get_targetvoiuid();
        this->m_targetmarginx = block.get_targetmarginx();
        this->m_targetmarginy = block.get_targetmarginy();
        this->m_avoidvoiuid = block.get_avoidvoiuid();
        this->m_avoidmarginx = block.get_avoidmarginx();
        this->m_avoidmarginy = block.get_avoidmarginy();
        this->m_isautoshape = block.get_isautoshape();
        this->m_blocknumber = block.get_blocknumber();
        this->m_blocktype = block.get_blocktype();
        this->m_blockname = block.get_blockname();
        this->m_sourcetotraydistance = block.get_sourcetotraydistance();
        this->m_blockdivergence = block.get_blockdivergence();
        this->m_blockmountingposition = block.get_blockmountingposition();
        this->m_materialid = block.get_materialid();
        this->m_blockthickness = block.get_blockthickness();
        this->m_updatetime = block.get_updatetime();
        this->m_points = block.get_points();
    }
    return *this;
}

RtBlockImp::~RtBlockImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtBlock::RtBlock(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtBlockImp(bGeneraterUid);
    set_flags(BLOCK_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_BLOCK_FIELD_NULL);
}

RtBlock::RtBlock(const RtBlock& block): RtDatabaseObject(block),
   m_pImp(new RtBlockImp(*block.m_pImp))
{
}

RtBlock& RtBlock::operator = (const RtBlock& block)
{
    if(this != &block)
    {
        RtDatabaseObject::operator=(block);
        *this->m_pImp = *block.m_pImp;
    }
    return *this;
}

RtBlock::~RtBlock()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtBlock::get_uid() const { return m_pImp->get_uid();}
void RtBlock::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(BLOCK_UID);
    setdirty_field(BLOCK_UID, true);
}

//beamuid
std::string RtBlock::get_beamuid() const { return m_pImp->get_beamuid();}
void RtBlock::set_beamuid(const std::string& beamuid)
{
    m_pImp->set_beamuid(beamuid);
    enable_field(BLOCK_BEAMUID);
    setdirty_field(BLOCK_BEAMUID, true);
}

//treatmentbeamuid
std::string RtBlock::get_treatmentbeamuid() const { return m_pImp->get_treatmentbeamuid();}
void RtBlock::set_treatmentbeamuid(const std::string& treatmentbeamuid)
{
    m_pImp->set_treatmentbeamuid(treatmentbeamuid);
    enable_field(BLOCK_TREATMENTBEAMUID);
    setdirty_field(BLOCK_TREATMENTBEAMUID, true);
}

//points
const std::vector<db_Point2f> RtBlock::get_points() const { return m_pImp->get_points();}
std::vector<db_Point2f> RtBlock::get_points() { return m_pImp->get_points();}
void RtBlock::set_points(const std::vector<db_Point2f>& vPoints) 
{
    m_pImp->set_points(vPoints);
    enable_field(BLOCK_POINTS);
    setdirty_field(BLOCK_POINTS, true);
}

//targetvoiuid
std::string RtBlock::get_targetvoiuid() const { return m_pImp->get_targetvoiuid();}
void RtBlock::set_targetvoiuid(const std::string& targetvoiuid)
{
    m_pImp->set_targetvoiuid(targetvoiuid);
    enable_field(BLOCK_TARGETVOIUID);
    setdirty_field(BLOCK_TARGETVOIUID, true);
}

//targetmarginx
float RtBlock::get_targetmarginx() const { return m_pImp->get_targetmarginx();}
void RtBlock::set_targetmarginx(const float& targetmarginx)
{
    m_pImp->set_targetmarginx(targetmarginx);
    enable_field(BLOCK_TARGETMARGINX);
    setdirty_field(BLOCK_TARGETMARGINX, true);
}

//targetmarginy
float RtBlock::get_targetmarginy() const { return m_pImp->get_targetmarginy();}
void RtBlock::set_targetmarginy(const float& targetmarginy)
{
    m_pImp->set_targetmarginy(targetmarginy);
    enable_field(BLOCK_TARGETMARGINY);
    setdirty_field(BLOCK_TARGETMARGINY, true);
}

//avoidvoiuid
std::string RtBlock::get_avoidvoiuid() const { return m_pImp->get_avoidvoiuid();}
void RtBlock::set_avoidvoiuid(const std::string& avoidvoiuid)
{
    m_pImp->set_avoidvoiuid(avoidvoiuid);
    enable_field(BLOCK_AVOIDVOIUID);
    setdirty_field(BLOCK_AVOIDVOIUID, true);
}

//avoidmarginx
float RtBlock::get_avoidmarginx() const { return m_pImp->get_avoidmarginx();}
void RtBlock::set_avoidmarginx(const float& avoidmarginx)
{
    m_pImp->set_avoidmarginx(avoidmarginx);
    enable_field(BLOCK_AVOIDMARGINX);
    setdirty_field(BLOCK_AVOIDMARGINX, true);
}

//avoidmarginy
float RtBlock::get_avoidmarginy() const { return m_pImp->get_avoidmarginy();}
void RtBlock::set_avoidmarginy(const float& avoidmarginy)
{
    m_pImp->set_avoidmarginy(avoidmarginy);
    enable_field(BLOCK_AVOIDMARGINY);
    setdirty_field(BLOCK_AVOIDMARGINY, true);
}

//isautoshape
bool RtBlock::get_isautoshape() const { return m_pImp->get_isautoshape();}
void RtBlock::set_isautoshape(const bool& isautoshape)
{
    m_pImp->set_isautoshape(isautoshape);
    enable_field(BLOCK_ISAUTOSHAPE);
    setdirty_field(BLOCK_ISAUTOSHAPE, true);
}

//blocknumber
int RtBlock::get_blocknumber() const { return m_pImp->get_blocknumber();}
void RtBlock::set_blocknumber(const int& blocknumber)
{
    m_pImp->set_blocknumber(blocknumber);
    enable_field(BLOCK_BLOCKNUMBER);
    setdirty_field(BLOCK_BLOCKNUMBER, true);
}

//blocktype
int RtBlock::get_blocktype() const { return m_pImp->get_blocktype();}
void RtBlock::set_blocktype(const int& blocktype)
{
    m_pImp->set_blocktype(blocktype);
    enable_field(BLOCK_BLOCKTYPE);
    setdirty_field(BLOCK_BLOCKTYPE, true);
}

//blockname
std::string RtBlock::get_blockname() const { return m_pImp->get_blockname();}
void RtBlock::set_blockname(const std::string& blockname)
{
    m_pImp->set_blockname(blockname);
    enable_field(BLOCK_BLOCKNAME);
    setdirty_field(BLOCK_BLOCKNAME, true);
}

//sourcetotraydistance
float RtBlock::get_sourcetotraydistance() const { return m_pImp->get_sourcetotraydistance();}
void RtBlock::set_sourcetotraydistance(const float& sourcetotraydistance)
{
    m_pImp->set_sourcetotraydistance(sourcetotraydistance);
    enable_field(BLOCK_SOURCETOTRAYDISTANCE);
    setdirty_field(BLOCK_SOURCETOTRAYDISTANCE, true);
}

//blockdivergence
int RtBlock::get_blockdivergence() const { return m_pImp->get_blockdivergence();}
void RtBlock::set_blockdivergence(const int& blockdivergence)
{
    m_pImp->set_blockdivergence(blockdivergence);
    enable_field(BLOCK_BLOCKDIVERGENCE);
    setdirty_field(BLOCK_BLOCKDIVERGENCE, true);
}

//blockmountingposition
int RtBlock::get_blockmountingposition() const { return m_pImp->get_blockmountingposition();}
void RtBlock::set_blockmountingposition(const int& blockmountingposition)
{
    m_pImp->set_blockmountingposition(blockmountingposition);
    enable_field(BLOCK_BLOCKMOUNTINGPOSITION);
    setdirty_field(BLOCK_BLOCKMOUNTINGPOSITION, true);
}

//materialid
std::string RtBlock::get_materialid() const { return m_pImp->get_materialid();}
void RtBlock::set_materialid(const std::string& materialid)
{
    m_pImp->set_materialid(materialid);
    enable_field(BLOCK_MATERIALID);
    setdirty_field(BLOCK_MATERIALID, true);
}

//blockthickness
float RtBlock::get_blockthickness() const { return m_pImp->get_blockthickness();}
void RtBlock::set_blockthickness(const float& blockthickness)
{
    m_pImp->set_blockthickness(blockthickness);
    enable_field(BLOCK_BLOCKTHICKNESS);
    setdirty_field(BLOCK_BLOCKTHICKNESS, true);
}

//updatetime
DATETIME_BOOST RtBlock::get_updatetime() const { return m_pImp->get_updatetime();}
void RtBlock::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(BLOCK_UPDATETIME);
    setdirty_field(BLOCK_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE