//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_series.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_series.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_image3d.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtSeriesImp::RtSeriesImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_sopinstanceuid(""),
    m_studyuid(""),
    m_seriesgroupuid(""),
    m_courseuid(""),
    m_ct2densityuid(""),
    m_modality(""),
    m_relatedcbctuid(""),
    m_relatedfbctuid(""),
    m_sessionuid(""),
    m_seriesname(""),
    m_seriespixeldatafilepath(""),
    m_seriesnumber(0),
    m_imagelaterality(""),
    m_seriesdate(boost::date_time::not_a_date_time),
    m_seriestime(boost::date_time::not_a_date_time),
    m_performingphysicianname(""),
    m_protocolname(""),
    m_seriesdescription(""),
    m_operatorsname(""),
    m_bodypartexamined(""),
    m_patientposition(""),
    m_manufacturer(""),
    m_institutionname(""),
    m_smallestpixelvalueinseries(0),
    m_largestpixelvalueinseries(0),
    m_laterality(""),
    m_performedprocedurestepstartdate(boost::date_time::not_a_date_time),
    m_performedprocedurestepstarttime(boost::date_time::not_a_date_time),
    m_performedprocedurestepid(""),
    m_performedprocedurestepdescription(""),
    m_seriestype(""),
    m_sourceisotopename(""),
    m_radionuclidetotaldose(""),
    m_radiopharmaceuticalstartdatetime(boost::date_time::not_a_date_time),
    m_radiopharmaceutical(""),
    m_seriesprintstatus(""),
    m_seriessendstatus(""),
    m_seriesstoredindvd(""),
    m_seriesstoredinusb(""),
    m_seriespatientagegroup(""),
    m_seriesprotect(""),
    m_seriesconfirmstatus(0),
    m_seriesrejectreason(""),
    m_seriesconfirmdatetime(boost::date_time::not_a_date_time),
    m_resolution(""),
    m_recincrement(""),
    m_scantype(""),
    m_presentationintenttype(""),
    m_seriesscanid(""),
    m_seriesaprid(""),
    m_seriesaprgroupname(""),
    m_seriesaprgroupid(""),
    m_seriesisfavourite(""),
    m_isfreecassette(0),
    m_seriesexamplefigurepath(""),
    m_seriespsasid(""),
    m_seriespatienttypeid(""),
    m_seriesissecondcaptured(0),
    m_seriesisexamed(0),
    m_rawdataacquisitionnumber(0),
    m_rawdataacquisitiondate(boost::date_time::not_a_date_time),
    m_rawdataacquisitiontime(boost::date_time::not_a_date_time),
    m_rawdatainstanceuid(""),
    m_reconresult(0),
    m_seriesthumbnail(""),
    m_seriescomments(""),
    m_protocolid(""),
    m_procedurename(""),
    m_protocollink(""),
    m_imagetype(0),
    m_seriesreserved0(""),
    m_seriesreserved1(""),
    m_patientname(""),
    m_manufacturermodelname(""),
    m_acquisitiontime(boost::date_time::not_a_date_time),
    m_frameofreferenceuid(""),
    m_isphantom(false),
    m_tabletopposition(0.f),
    m_phase(0),
    m_ismainphase(false),
    m_relatedwavedatafilepath(""),
    m_isselected(false),
    m_gatingtype(0),
    m_binscope(0),
    m_currentbininfo(""),
    m_respiratorytype(0),
    m_breathrate(0.f),
    m_imagesize(0),
    m_binmode(0),
    m_totalbinnumber(0),
    m_binimagetotalnumber(0),
    m_isqa(false),
    m_convolutionkernal(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    m_header = new RtImage3DHeader();
    m_imagedata = nullptr; 
}

RtSeriesImp::RtSeriesImp(const RtSeriesImp& series):
    m_uid(series.get_uid()),
    m_sopinstanceuid(series.get_sopinstanceuid()),
    m_studyuid(series.get_studyuid()),
    m_seriesgroupuid(series.get_seriesgroupuid()),
    m_courseuid(series.get_courseuid()),
    m_ct2densityuid(series.get_ct2densityuid()),
    m_modality(series.get_modality()),
    m_relatedcbctuid(series.get_relatedcbctuid()),
    m_relatedfbctuid(series.get_relatedfbctuid()),
    m_sessionuid(series.get_sessionuid()),
    m_seriesname(series.get_seriesname()),
    m_seriespixeldatafilepath(series.get_seriespixeldatafilepath()),
    m_seriesnumber(series.get_seriesnumber()),
    m_imagelaterality(series.get_imagelaterality()),
    m_seriesdate(series.get_seriesdate()),
    m_seriestime(series.get_seriestime()),
    m_performingphysicianname(series.get_performingphysicianname()),
    m_protocolname(series.get_protocolname()),
    m_seriesdescription(series.get_seriesdescription()),
    m_operatorsname(series.get_operatorsname()),
    m_bodypartexamined(series.get_bodypartexamined()),
    m_patientposition(series.get_patientposition()),
    m_manufacturer(series.get_manufacturer()),
    m_institutionname(series.get_institutionname()),
    m_smallestpixelvalueinseries(series.get_smallestpixelvalueinseries()),
    m_largestpixelvalueinseries(series.get_largestpixelvalueinseries()),
    m_laterality(series.get_laterality()),
    m_performedprocedurestepstartdate(series.get_performedprocedurestepstartdate()),
    m_performedprocedurestepstarttime(series.get_performedprocedurestepstarttime()),
    m_performedprocedurestepid(series.get_performedprocedurestepid()),
    m_performedprocedurestepdescription(series.get_performedprocedurestepdescription()),
    m_seriestype(series.get_seriestype()),
    m_sourceisotopename(series.get_sourceisotopename()),
    m_radionuclidetotaldose(series.get_radionuclidetotaldose()),
    m_radiopharmaceuticalstartdatetime(series.get_radiopharmaceuticalstartdatetime()),
    m_radiopharmaceutical(series.get_radiopharmaceutical()),
    m_seriesprintstatus(series.get_seriesprintstatus()),
    m_seriessendstatus(series.get_seriessendstatus()),
    m_seriesstoredindvd(series.get_seriesstoredindvd()),
    m_seriesstoredinusb(series.get_seriesstoredinusb()),
    m_seriespatientagegroup(series.get_seriespatientagegroup()),
    m_seriesprotect(series.get_seriesprotect()),
    m_seriesconfirmstatus(series.get_seriesconfirmstatus()),
    m_seriesrejectreason(series.get_seriesrejectreason()),
    m_seriesconfirmdatetime(series.get_seriesconfirmdatetime()),
    m_resolution(series.get_resolution()),
    m_recincrement(series.get_recincrement()),
    m_scantype(series.get_scantype()),
    m_presentationintenttype(series.get_presentationintenttype()),
    m_seriesscanid(series.get_seriesscanid()),
    m_seriesaprid(series.get_seriesaprid()),
    m_seriesaprgroupname(series.get_seriesaprgroupname()),
    m_seriesaprgroupid(series.get_seriesaprgroupid()),
    m_seriesisfavourite(series.get_seriesisfavourite()),
    m_isfreecassette(series.get_isfreecassette()),
    m_seriesexamplefigurepath(series.get_seriesexamplefigurepath()),
    m_seriespsasid(series.get_seriespsasid()),
    m_seriespatienttypeid(series.get_seriespatienttypeid()),
    m_seriesissecondcaptured(series.get_seriesissecondcaptured()),
    m_seriesisexamed(series.get_seriesisexamed()),
    m_rawdataacquisitionnumber(series.get_rawdataacquisitionnumber()),
    m_rawdataacquisitiondate(series.get_rawdataacquisitiondate()),
    m_rawdataacquisitiontime(series.get_rawdataacquisitiontime()),
    m_rawdatainstanceuid(series.get_rawdatainstanceuid()),
    m_reconresult(series.get_reconresult()),
    m_seriesthumbnail(series.get_seriesthumbnail()),
    m_seriescomments(series.get_seriescomments()),
    m_protocolid(series.get_protocolid()),
    m_procedurename(series.get_procedurename()),
    m_protocollink(series.get_protocollink()),
    m_imagetype(series.get_imagetype()),
    m_seriesreserved0(series.get_seriesreserved0()),
    m_seriesreserved1(series.get_seriesreserved1()),
    m_patientname(series.get_patientname()),
    m_manufacturermodelname(series.get_manufacturermodelname()),
    m_acquisitiontime(series.get_acquisitiontime()),
    m_frameofreferenceuid(series.get_frameofreferenceuid()),
    m_isphantom(series.get_isphantom()),
    m_tabletopposition(series.get_tabletopposition()),
    m_phase(series.get_phase()),
    m_ismainphase(series.get_ismainphase()),
    m_relatedwavedatafilepath(series.get_relatedwavedatafilepath()),
    m_isselected(series.get_isselected()),
    m_gatingtype(series.get_gatingtype()),
    m_binscope(series.get_binscope()),
    m_currentbininfo(series.get_currentbininfo()),
    m_respiratorytype(series.get_respiratorytype()),
    m_breathrate(series.get_breathrate()),
    m_binmode(series.get_binmode()),
    m_totalbinnumber(series.get_totalbinnumber()),
    m_binimagetotalnumber(series.get_binimagetotalnumber()),
    m_isqa(series.get_isqa()),
    m_convolutionkernal(series.get_convolutionkernal()),
    m_slicethickness(series.get_slicethickness()),
    m_updatetime(series.get_updatetime())
{
    m_header = new RtImage3DHeader(*series.get_header());

    const RtImage3DHeader* pOld = series.get_header();
    if (nullptr != pOld)
	{
        int iXDim = pOld->m_iXDim;
        int iYDim = pOld->m_iYDim;
        int iSliceCount = pOld->m_iSliceCount;
        int iBitsAllocated = pOld->m_iBitsAllocated;
        // Total size of all Pixel Data 
        long lTotalSize = iXDim * iYDim * iSliceCount * (iBitsAllocated >> 3);
        m_imagesize = lTotalSize;
        m_imagedata = nullptr;
        if (lTotalSize > 0)
        {
            m_imagedata = new char[lTotalSize]();
            unsigned long ulSize(0);
            memcpy(m_imagedata, series.get_imagedata(&ulSize), lTotalSize);
        }
    }
}

RtSeriesImp& RtSeriesImp::operator=(const RtSeriesImp& series)
{
    if (this != &series){
        this->m_uid = series.get_uid();
        this->m_sopinstanceuid = series.get_sopinstanceuid();
        this->m_studyuid = series.get_studyuid();
        this->m_seriesgroupuid = series.get_seriesgroupuid();
        this->m_courseuid = series.get_courseuid();
        this->m_ct2densityuid = series.get_ct2densityuid();
        this->m_modality = series.get_modality();
        this->m_relatedcbctuid = series.get_relatedcbctuid();
        this->m_relatedfbctuid = series.get_relatedfbctuid();
        this->m_sessionuid = series.get_sessionuid();
        this->m_seriesname = series.get_seriesname();
        this->m_seriespixeldatafilepath = series.get_seriespixeldatafilepath();
        this->m_seriesnumber = series.get_seriesnumber();
        this->m_imagelaterality = series.get_imagelaterality();
        this->m_seriesdate = series.get_seriesdate();
        this->m_seriestime = series.get_seriestime();
        this->m_performingphysicianname = series.get_performingphysicianname();
        this->m_protocolname = series.get_protocolname();
        this->m_seriesdescription = series.get_seriesdescription();
        this->m_operatorsname = series.get_operatorsname();
        this->m_bodypartexamined = series.get_bodypartexamined();
        this->m_patientposition = series.get_patientposition();
        this->m_manufacturer = series.get_manufacturer();
        this->m_institutionname = series.get_institutionname();
        this->m_smallestpixelvalueinseries = series.get_smallestpixelvalueinseries();
        this->m_largestpixelvalueinseries = series.get_largestpixelvalueinseries();
        this->m_laterality = series.get_laterality();
        this->m_performedprocedurestepstartdate = series.get_performedprocedurestepstartdate();
        this->m_performedprocedurestepstarttime = series.get_performedprocedurestepstarttime();
        this->m_performedprocedurestepid = series.get_performedprocedurestepid();
        this->m_performedprocedurestepdescription = series.get_performedprocedurestepdescription();
        this->m_seriestype = series.get_seriestype();
        this->m_sourceisotopename = series.get_sourceisotopename();
        this->m_radionuclidetotaldose = series.get_radionuclidetotaldose();
        this->m_radiopharmaceuticalstartdatetime = series.get_radiopharmaceuticalstartdatetime();
        this->m_radiopharmaceutical = series.get_radiopharmaceutical();
        this->m_seriesprintstatus = series.get_seriesprintstatus();
        this->m_seriessendstatus = series.get_seriessendstatus();
        this->m_seriesstoredindvd = series.get_seriesstoredindvd();
        this->m_seriesstoredinusb = series.get_seriesstoredinusb();
        this->m_seriespatientagegroup = series.get_seriespatientagegroup();
        this->m_seriesprotect = series.get_seriesprotect();
        this->m_seriesconfirmstatus = series.get_seriesconfirmstatus();
        this->m_seriesrejectreason = series.get_seriesrejectreason();
        this->m_seriesconfirmdatetime = series.get_seriesconfirmdatetime();
        this->m_resolution = series.get_resolution();
        this->m_recincrement = series.get_recincrement();
        this->m_scantype = series.get_scantype();
        this->m_presentationintenttype = series.get_presentationintenttype();
        this->m_seriesscanid = series.get_seriesscanid();
        this->m_seriesaprid = series.get_seriesaprid();
        this->m_seriesaprgroupname = series.get_seriesaprgroupname();
        this->m_seriesaprgroupid = series.get_seriesaprgroupid();
        this->m_seriesisfavourite = series.get_seriesisfavourite();
        this->m_isfreecassette = series.get_isfreecassette();
        this->m_seriesexamplefigurepath = series.get_seriesexamplefigurepath();
        this->m_seriespsasid = series.get_seriespsasid();
        this->m_seriespatienttypeid = series.get_seriespatienttypeid();
        this->m_seriesissecondcaptured = series.get_seriesissecondcaptured();
        this->m_seriesisexamed = series.get_seriesisexamed();
        this->m_rawdataacquisitionnumber = series.get_rawdataacquisitionnumber();
        this->m_rawdataacquisitiondate = series.get_rawdataacquisitiondate();
        this->m_rawdataacquisitiontime = series.get_rawdataacquisitiontime();
        this->m_rawdatainstanceuid = series.get_rawdatainstanceuid();
        this->m_reconresult = series.get_reconresult();
        this->m_seriesthumbnail = series.get_seriesthumbnail();
        this->m_seriescomments = series.get_seriescomments();
        this->m_protocolid = series.get_protocolid();
        this->m_procedurename = series.get_procedurename();
        this->m_protocollink = series.get_protocollink();
        this->m_imagetype = series.get_imagetype();
        this->m_seriesreserved0 = series.get_seriesreserved0();
        this->m_seriesreserved1 = series.get_seriesreserved1();
        this->m_patientname = series.get_patientname();
        this->m_manufacturermodelname = series.get_manufacturermodelname();
        this->m_acquisitiontime = series.get_acquisitiontime();
        this->m_frameofreferenceuid = series.get_frameofreferenceuid();
        this->m_isphantom = series.get_isphantom();
        this->m_tabletopposition = series.get_tabletopposition();
        this->m_phase = series.get_phase();
        this->m_ismainphase = series.get_ismainphase();
        this->m_relatedwavedatafilepath = series.get_relatedwavedatafilepath();
        this->m_isselected = series.get_isselected();
        this->m_gatingtype = series.get_gatingtype();
        this->m_binscope = series.get_binscope();
        this->m_currentbininfo = series.get_currentbininfo();
        this->m_respiratorytype = series.get_respiratorytype();
        this->m_breathrate = series.get_breathrate();
        this->m_binmode = series.get_binmode();
        this->m_totalbinnumber = series.get_totalbinnumber();
        this->m_binimagetotalnumber = series.get_binimagetotalnumber();
        this->m_isqa = series.get_isqa();
        this->m_convolutionkernal = series.get_convolutionkernal();
        this->m_updatetime = series.get_updatetime();
        this->m_slicethickness = series.get_slicethickness();
      
        *m_header = *series.get_header();
        if (nullptr != m_header)
		{
            m_imagedata = new char[this->m_imagesize]();
            unsigned long ulSize(0);
            char* pData =  series.get_imagedata(&ulSize);
            this->m_imagesize = ulSize;
            if(nullptr != pData && ulSize >0 )
                memcpy(m_imagedata, pData, this->m_imagesize);
        }
    }
    return *this;
}

RtSeriesImp::~RtSeriesImp()
{
    DEL_PTR(m_header);
    DEL_ARRAY(m_imagedata);
}


//////////////////////////////////////////////////////////////////////////
RtSeries::RtSeries(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtSeriesImp(bGeneraterUid);
    set_flags(SERIES_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_SERIES_FIELD_NULL);
}

RtSeries::RtSeries(const RtSeries& series): RtDatabaseObject(series),
   m_pImp(new RtSeriesImp(*series.m_pImp))
{
}

RtSeries& RtSeries::operator = (const RtSeries& series)
{
    if(this != &series)
    {
        RtDatabaseObject::operator=(series);
        *this->m_pImp = *series.m_pImp;
    }
    return *this;
}

RtSeries::~RtSeries()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtSeries::get_uid() const { return m_pImp->get_uid();}
void RtSeries::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(SERIES_UID);
    setdirty_field(SERIES_UID, true);
}

//sopinstanceuid
std::string RtSeries::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtSeries::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(SERIES_SOPINSTANCEUID);
    setdirty_field(SERIES_SOPINSTANCEUID, true);
}

//studyuid
std::string RtSeries::get_studyuid() const { return m_pImp->get_studyuid();}
void RtSeries::set_studyuid(const std::string& studyuid)
{
    m_pImp->set_studyuid(studyuid);
    enable_field(SERIES_STUDYUID);
    setdirty_field(SERIES_STUDYUID, true);
}

//seriesgroupuid
std::string RtSeries::get_seriesgroupuid() const { return m_pImp->get_seriesgroupuid();}
void RtSeries::set_seriesgroupuid(const std::string& seriesgroupuid)
{
    m_pImp->set_seriesgroupuid(seriesgroupuid);
    enable_field(SERIES_SERIESGROUPUID);
    setdirty_field(SERIES_SERIESGROUPUID, true);
}

//courseuid
std::string RtSeries::get_courseuid() const { return m_pImp->get_courseuid();}
void RtSeries::set_courseuid(const std::string& courseuid)
{
    m_pImp->set_courseuid(courseuid);
    enable_field(SERIES_COURSEUID);
    setdirty_field(SERIES_COURSEUID, true);
}

//ct2densityuid
std::string RtSeries::get_ct2densityuid() const { return m_pImp->get_ct2densityuid();}
void RtSeries::set_ct2densityuid(const std::string& ct2densityuid)
{
    m_pImp->set_ct2densityuid(ct2densityuid);
    enable_field(SERIES_CT2DENSITYUID);
    setdirty_field(SERIES_CT2DENSITYUID, true);
}

//modality
std::string RtSeries::get_modality() const { return m_pImp->get_modality();}
void RtSeries::set_modality(const std::string& modality)
{
    m_pImp->set_modality(modality);
    enable_field(SERIES_MODALITY);
    setdirty_field(SERIES_MODALITY, true);
}

//relatedcbctuid
std::string RtSeries::get_relatedcbctuid() const { return m_pImp->get_relatedcbctuid();}
void RtSeries::set_relatedcbctuid(const std::string& relatedcbctuid)
{
    m_pImp->set_relatedcbctuid(relatedcbctuid);
    enable_field(SERIES_RELATEDCBCTUID);
    setdirty_field(SERIES_RELATEDCBCTUID, true);
}

//relatedfbctuid
std::string RtSeries::get_relatedfbctuid() const { return m_pImp->get_relatedfbctuid();}
void RtSeries::set_relatedfbctuid(const std::string& relatedfbctuid)
{
    m_pImp->set_relatedfbctuid(relatedfbctuid);
    enable_field(SERIES_RELATEDFBCTUID);
    setdirty_field(SERIES_RELATEDFBCTUID, true);
}

//sessionuid
std::string RtSeries::get_sessionuid() const { return m_pImp->get_sessionuid();}
void RtSeries::set_sessionuid(const std::string& sessionuid)
{
    m_pImp->set_sessionuid(sessionuid);
    enable_field(SERIES_SESSIONUID);
    setdirty_field(SERIES_SESSIONUID, true);
}

//seriesname
std::string RtSeries::get_seriesname() const { return m_pImp->get_seriesname();}
void RtSeries::set_seriesname(const std::string& seriesname)
{
    m_pImp->set_seriesname(seriesname);
    enable_field(SERIES_SERIESNAME);
    setdirty_field(SERIES_SERIESNAME, true);
}

//seriespixeldatafilepath
std::string RtSeries::get_seriespixeldatafilepath() const { return m_pImp->get_seriespixeldatafilepath();}
void RtSeries::set_seriespixeldatafilepath(const std::string& seriespixeldatafilepath)
{
    m_pImp->set_seriespixeldatafilepath(seriespixeldatafilepath);
    enable_field(SERIES_SERIESPIXELDATAFILEPATH);
    setdirty_field(SERIES_SERIESPIXELDATAFILEPATH, true);
}

//seriesnumber
int RtSeries::get_seriesnumber() const { return m_pImp->get_seriesnumber();}
void RtSeries::set_seriesnumber(const int& seriesnumber)
{
    m_pImp->set_seriesnumber(seriesnumber);
    enable_field(SERIES_SERIESNUMBER);
    setdirty_field(SERIES_SERIESNUMBER, true);
}

//imagelaterality
std::string RtSeries::get_imagelaterality() const { return m_pImp->get_imagelaterality();}
void RtSeries::set_imagelaterality(const std::string& imagelaterality)
{
    m_pImp->set_imagelaterality(imagelaterality);
    enable_field(SERIES_IMAGELATERALITY);
    setdirty_field(SERIES_IMAGELATERALITY, true);
}

//seriesdate
DATE_BOOST RtSeries::get_seriesdate() const { return m_pImp->get_seriesdate();}
void RtSeries::set_seriesdate(const DATE_BOOST& seriesdate)
{
    m_pImp->set_seriesdate(seriesdate);
    enable_field(SERIES_SERIESDATE);
    setdirty_field(SERIES_SERIESDATE, true);
}

//seriestime
TIME_BOOST RtSeries::get_seriestime() const { return m_pImp->get_seriestime();}
void RtSeries::set_seriestime(const TIME_BOOST& seriestime)
{
    m_pImp->set_seriestime(seriestime);
    enable_field(SERIES_SERIESTIME);
    setdirty_field(SERIES_SERIESTIME, true);
}

//performingphysicianname
std::string RtSeries::get_performingphysicianname() const { return m_pImp->get_performingphysicianname();}
void RtSeries::set_performingphysicianname(const std::string& performingphysicianname)
{
    m_pImp->set_performingphysicianname(performingphysicianname);
    enable_field(SERIES_PERFORMINGPHYSICIANNAME);
    setdirty_field(SERIES_PERFORMINGPHYSICIANNAME, true);
}

//protocolname
std::string RtSeries::get_protocolname() const { return m_pImp->get_protocolname();}
void RtSeries::set_protocolname(const std::string& protocolname)
{
    m_pImp->set_protocolname(protocolname);
    enable_field(SERIES_PROTOCOLNAME);
    setdirty_field(SERIES_PROTOCOLNAME, true);
}

//seriesdescription
std::string RtSeries::get_seriesdescription() const { return m_pImp->get_seriesdescription();}
void RtSeries::set_seriesdescription(const std::string& seriesdescription)
{
    m_pImp->set_seriesdescription(seriesdescription);
    enable_field(SERIES_SERIESDESCRIPTION);
    setdirty_field(SERIES_SERIESDESCRIPTION, true);
}

//operatorsname
std::string RtSeries::get_operatorsname() const { return m_pImp->get_operatorsname();}
void RtSeries::set_operatorsname(const std::string& operatorsname)
{
    m_pImp->set_operatorsname(operatorsname);
    enable_field(SERIES_OPERATORSNAME);
    setdirty_field(SERIES_OPERATORSNAME, true);
}

//bodypartexamined
std::string RtSeries::get_bodypartexamined() const { return m_pImp->get_bodypartexamined();}
void RtSeries::set_bodypartexamined(const std::string& bodypartexamined)
{
    m_pImp->set_bodypartexamined(bodypartexamined);
    enable_field(SERIES_BODYPARTEXAMINED);
    setdirty_field(SERIES_BODYPARTEXAMINED, true);
}

//patientposition
std::string RtSeries::get_patientposition() const { return m_pImp->get_patientposition();}
void RtSeries::set_patientposition(const std::string& patientposition)
{
    m_pImp->set_patientposition(patientposition);
    enable_field(SERIES_PATIENTPOSITION);
    setdirty_field(SERIES_PATIENTPOSITION, true);
}

//manufacturer
std::string RtSeries::get_manufacturer() const { return m_pImp->get_manufacturer();}
void RtSeries::set_manufacturer(const std::string& manufacturer)
{
    m_pImp->set_manufacturer(manufacturer);
    enable_field(SERIES_MANUFACTURER);
    setdirty_field(SERIES_MANUFACTURER, true);
}

//institutionname
std::string RtSeries::get_institutionname() const { return m_pImp->get_institutionname();}
void RtSeries::set_institutionname(const std::string& institutionname)
{
    m_pImp->set_institutionname(institutionname);
    enable_field(SERIES_INSTITUTIONNAME);
    setdirty_field(SERIES_INSTITUTIONNAME, true);
}

//smallestpixelvalueinseries
int RtSeries::get_smallestpixelvalueinseries() const { return m_pImp->get_smallestpixelvalueinseries();}
void RtSeries::set_smallestpixelvalueinseries(const int& smallestpixelvalueinseries)
{
    m_pImp->set_smallestpixelvalueinseries(smallestpixelvalueinseries);
    enable_field(SERIES_SMALLESTPIXELVALUEINSERIES);
    setdirty_field(SERIES_SMALLESTPIXELVALUEINSERIES, true);
}

//largestpixelvalueinseries
int RtSeries::get_largestpixelvalueinseries() const { return m_pImp->get_largestpixelvalueinseries();}
void RtSeries::set_largestpixelvalueinseries(const int& largestpixelvalueinseries)
{
    m_pImp->set_largestpixelvalueinseries(largestpixelvalueinseries);
    enable_field(SERIES_LARGESTPIXELVALUEINSERIES);
    setdirty_field(SERIES_LARGESTPIXELVALUEINSERIES, true);
}

//laterality
std::string RtSeries::get_laterality() const { return m_pImp->get_laterality();}
void RtSeries::set_laterality(const std::string& laterality)
{
    m_pImp->set_laterality(laterality);
    enable_field(SERIES_LATERALITY);
    setdirty_field(SERIES_LATERALITY, true);
}

//performedprocedurestepstartdate
DATE_BOOST RtSeries::get_performedprocedurestepstartdate() const { return m_pImp->get_performedprocedurestepstartdate();}
void RtSeries::set_performedprocedurestepstartdate(const DATE_BOOST& performedprocedurestepstartdate)
{
    m_pImp->set_performedprocedurestepstartdate(performedprocedurestepstartdate);
    enable_field(SERIES_PERFORMEDPROCEDURESTEPSTARTDATE);
    setdirty_field(SERIES_PERFORMEDPROCEDURESTEPSTARTDATE, true);
}

//performedprocedurestepstarttime
TIME_BOOST RtSeries::get_performedprocedurestepstarttime() const { return m_pImp->get_performedprocedurestepstarttime();}
void RtSeries::set_performedprocedurestepstarttime(const TIME_BOOST& performedprocedurestepstarttime)
{
    m_pImp->set_performedprocedurestepstarttime(performedprocedurestepstarttime);
    enable_field(SERIES_PERFORMEDPROCEDURESTEPSTARTTIME);
    setdirty_field(SERIES_PERFORMEDPROCEDURESTEPSTARTTIME, true);
}

//performedprocedurestepid
std::string RtSeries::get_performedprocedurestepid() const { return m_pImp->get_performedprocedurestepid();}
void RtSeries::set_performedprocedurestepid(const std::string& performedprocedurestepid)
{
    m_pImp->set_performedprocedurestepid(performedprocedurestepid);
    enable_field(SERIES_PERFORMEDPROCEDURESTEPID);
    setdirty_field(SERIES_PERFORMEDPROCEDURESTEPID, true);
}

//performedprocedurestepdescription
std::string RtSeries::get_performedprocedurestepdescription() const { return m_pImp->get_performedprocedurestepdescription();}
void RtSeries::set_performedprocedurestepdescription(const std::string& performedprocedurestepdescription)
{
    m_pImp->set_performedprocedurestepdescription(performedprocedurestepdescription);
    enable_field(SERIES_PERFORMEDPROCEDURESTEPDESCRIPTION);
    setdirty_field(SERIES_PERFORMEDPROCEDURESTEPDESCRIPTION, true);
}

//seriestype
std::string RtSeries::get_seriestype() const { return m_pImp->get_seriestype();}
void RtSeries::set_seriestype(const std::string& seriestype)
{
    m_pImp->set_seriestype(seriestype);
    enable_field(SERIES_SERIESTYPE);
    setdirty_field(SERIES_SERIESTYPE, true);
}

//sourceisotopename
std::string RtSeries::get_sourceisotopename() const { return m_pImp->get_sourceisotopename();}
void RtSeries::set_sourceisotopename(const std::string& sourceisotopename)
{
    m_pImp->set_sourceisotopename(sourceisotopename);
    enable_field(SERIES_SOURCEISOTOPENAME);
    setdirty_field(SERIES_SOURCEISOTOPENAME, true);
}

//radionuclidetotaldose
std::string RtSeries::get_radionuclidetotaldose() const { return m_pImp->get_radionuclidetotaldose();}
void RtSeries::set_radionuclidetotaldose(const std::string& radionuclidetotaldose)
{
    m_pImp->set_radionuclidetotaldose(radionuclidetotaldose);
    enable_field(SERIES_RADIONUCLIDETOTALDOSE);
    setdirty_field(SERIES_RADIONUCLIDETOTALDOSE, true);
}

//radiopharmaceuticalstartdatetime
DATETIME_BOOST RtSeries::get_radiopharmaceuticalstartdatetime() const { return m_pImp->get_radiopharmaceuticalstartdatetime();}
void RtSeries::set_radiopharmaceuticalstartdatetime(const DATETIME_BOOST& radiopharmaceuticalstartdatetime)
{
    m_pImp->set_radiopharmaceuticalstartdatetime(radiopharmaceuticalstartdatetime);
    enable_field(SERIES_RADIOPHARMACEUTICALSTARTDATETIME);
    setdirty_field(SERIES_RADIOPHARMACEUTICALSTARTDATETIME, true);
}

//radiopharmaceutical
std::string RtSeries::get_radiopharmaceutical() const { return m_pImp->get_radiopharmaceutical();}
void RtSeries::set_radiopharmaceutical(const std::string& radiopharmaceutical)
{
    m_pImp->set_radiopharmaceutical(radiopharmaceutical);
    enable_field(SERIES_RADIOPHARMACEUTICAL);
    setdirty_field(SERIES_RADIOPHARMACEUTICAL, true);
}

//seriesprintstatus
std::string RtSeries::get_seriesprintstatus() const { return m_pImp->get_seriesprintstatus();}
void RtSeries::set_seriesprintstatus(const std::string& seriesprintstatus)
{
    m_pImp->set_seriesprintstatus(seriesprintstatus);
    enable_field(SERIES_SERIESPRINTSTATUS);
    setdirty_field(SERIES_SERIESPRINTSTATUS, true);
}

//seriessendstatus
std::string RtSeries::get_seriessendstatus() const { return m_pImp->get_seriessendstatus();}
void RtSeries::set_seriessendstatus(const std::string& seriessendstatus)
{
    m_pImp->set_seriessendstatus(seriessendstatus);
    enable_field(SERIES_SERIESSENDSTATUS);
    setdirty_field(SERIES_SERIESSENDSTATUS, true);
}

//seriesstoredindvd
std::string RtSeries::get_seriesstoredindvd() const { return m_pImp->get_seriesstoredindvd();}
void RtSeries::set_seriesstoredindvd(const std::string& seriesstoredindvd)
{
    m_pImp->set_seriesstoredindvd(seriesstoredindvd);
    enable_field(SERIES_SERIESSTOREDINDVD);
    setdirty_field(SERIES_SERIESSTOREDINDVD, true);
}

//seriesstoredinusb
std::string RtSeries::get_seriesstoredinusb() const { return m_pImp->get_seriesstoredinusb();}
void RtSeries::set_seriesstoredinusb(const std::string& seriesstoredinusb)
{
    m_pImp->set_seriesstoredinusb(seriesstoredinusb);
    enable_field(SERIES_SERIESSTOREDINUSB);
    setdirty_field(SERIES_SERIESSTOREDINUSB, true);
}

//seriespatientagegroup
std::string RtSeries::get_seriespatientagegroup() const { return m_pImp->get_seriespatientagegroup();}
void RtSeries::set_seriespatientagegroup(const std::string& seriespatientagegroup)
{
    m_pImp->set_seriespatientagegroup(seriespatientagegroup);
    enable_field(SERIES_SERIESPATIENTAGEGROUP);
    setdirty_field(SERIES_SERIESPATIENTAGEGROUP, true);
}

//seriesprotect
std::string RtSeries::get_seriesprotect() const { return m_pImp->get_seriesprotect();}
void RtSeries::set_seriesprotect(const std::string& seriesprotect)
{
    m_pImp->set_seriesprotect(seriesprotect);
    enable_field(SERIES_SERIESPROTECT);
    setdirty_field(SERIES_SERIESPROTECT, true);
}

//seriesconfirmstatus
int RtSeries::get_seriesconfirmstatus() const { return m_pImp->get_seriesconfirmstatus();}
void RtSeries::set_seriesconfirmstatus(const int& seriesconfirmstatus)
{
    m_pImp->set_seriesconfirmstatus(seriesconfirmstatus);
    enable_field(SERIES_SERIESCONFIRMSTATUS);
    setdirty_field(SERIES_SERIESCONFIRMSTATUS, true);
}

//seriesrejectreason
std::string RtSeries::get_seriesrejectreason() const { return m_pImp->get_seriesrejectreason();}
void RtSeries::set_seriesrejectreason(const std::string& seriesrejectreason)
{
    m_pImp->set_seriesrejectreason(seriesrejectreason);
    enable_field(SERIES_SERIESREJECTREASON);
    setdirty_field(SERIES_SERIESREJECTREASON, true);
}

//seriesconfirmdatetime
DATETIME_BOOST RtSeries::get_seriesconfirmdatetime() const { return m_pImp->get_seriesconfirmdatetime();}
void RtSeries::set_seriesconfirmdatetime(const DATETIME_BOOST& seriesconfirmdatetime)
{
    m_pImp->set_seriesconfirmdatetime(seriesconfirmdatetime);
    enable_field(SERIES_SERIESCONFIRMDATETIME);
    setdirty_field(SERIES_SERIESCONFIRMDATETIME, true);
}

//resolution
std::string RtSeries::get_resolution() const { return m_pImp->get_resolution();}
void RtSeries::set_resolution(const std::string& resolution)
{
    m_pImp->set_resolution(resolution);
    enable_field(SERIES_RESOLUTION);
    setdirty_field(SERIES_RESOLUTION, true);
}

//recincrement
std::string RtSeries::get_recincrement() const { return m_pImp->get_recincrement();}
void RtSeries::set_recincrement(const std::string& recincrement)
{
    m_pImp->set_recincrement(recincrement);
    enable_field(SERIES_RECINCREMENT);
    setdirty_field(SERIES_RECINCREMENT, true);
}

//scantype
std::string RtSeries::get_scantype() const { return m_pImp->get_scantype();}
void RtSeries::set_scantype(const std::string& scantype)
{
    m_pImp->set_scantype(scantype);
    enable_field(SERIES_SCANTYPE);
    setdirty_field(SERIES_SCANTYPE, true);
}

//presentationintenttype
std::string RtSeries::get_presentationintenttype() const { return m_pImp->get_presentationintenttype();}
void RtSeries::set_presentationintenttype(const std::string& presentationintenttype)
{
    m_pImp->set_presentationintenttype(presentationintenttype);
    enable_field(SERIES_PRESENTATIONINTENTTYPE);
    setdirty_field(SERIES_PRESENTATIONINTENTTYPE, true);
}

//seriesscanid
std::string RtSeries::get_seriesscanid() const { return m_pImp->get_seriesscanid();}
void RtSeries::set_seriesscanid(const std::string& seriesscanid)
{
    m_pImp->set_seriesscanid(seriesscanid);
    enable_field(SERIES_SERIESSCANID);
    setdirty_field(SERIES_SERIESSCANID, true);
}

//seriesaprid
std::string RtSeries::get_seriesaprid() const { return m_pImp->get_seriesaprid();}
void RtSeries::set_seriesaprid(const std::string& seriesaprid)
{
    m_pImp->set_seriesaprid(seriesaprid);
    enable_field(SERIES_SERIESAPRID);
    setdirty_field(SERIES_SERIESAPRID, true);
}

//seriesaprgroupname
std::string RtSeries::get_seriesaprgroupname() const { return m_pImp->get_seriesaprgroupname();}
void RtSeries::set_seriesaprgroupname(const std::string& seriesaprgroupname)
{
    m_pImp->set_seriesaprgroupname(seriesaprgroupname);
    enable_field(SERIES_SERIESAPRGROUPNAME);
    setdirty_field(SERIES_SERIESAPRGROUPNAME, true);
}

//seriesaprgroupid
std::string RtSeries::get_seriesaprgroupid() const { return m_pImp->get_seriesaprgroupid();}
void RtSeries::set_seriesaprgroupid(const std::string& seriesaprgroupid)
{
    m_pImp->set_seriesaprgroupid(seriesaprgroupid);
    enable_field(SERIES_SERIESAPRGROUPID);
    setdirty_field(SERIES_SERIESAPRGROUPID, true);
}

//seriesisfavourite
std::string RtSeries::get_seriesisfavourite() const { return m_pImp->get_seriesisfavourite();}
void RtSeries::set_seriesisfavourite(const std::string& seriesisfavourite)
{
    m_pImp->set_seriesisfavourite(seriesisfavourite);
    enable_field(SERIES_SERIESISFAVOURITE);
    setdirty_field(SERIES_SERIESISFAVOURITE, true);
}

//isfreecassette
int RtSeries::get_isfreecassette() const { return m_pImp->get_isfreecassette();}
void RtSeries::set_isfreecassette(const int& isfreecassette)
{
    m_pImp->set_isfreecassette(isfreecassette);
    enable_field(SERIES_ISFREECASSETTE);
    setdirty_field(SERIES_ISFREECASSETTE, true);
}

//seriesexamplefigurepath
std::string RtSeries::get_seriesexamplefigurepath() const { return m_pImp->get_seriesexamplefigurepath();}
void RtSeries::set_seriesexamplefigurepath(const std::string& seriesexamplefigurepath)
{
    m_pImp->set_seriesexamplefigurepath(seriesexamplefigurepath);
    enable_field(SERIES_SERIESEXAMPLEFIGUREPATH);
    setdirty_field(SERIES_SERIESEXAMPLEFIGUREPATH, true);
}

//seriespsasid
std::string RtSeries::get_seriespsasid() const { return m_pImp->get_seriespsasid();}
void RtSeries::set_seriespsasid(const std::string& seriespsasid)
{
    m_pImp->set_seriespsasid(seriespsasid);
    enable_field(SERIES_SERIESPSASID);
    setdirty_field(SERIES_SERIESPSASID, true);
}

//seriespatienttypeid
std::string RtSeries::get_seriespatienttypeid() const { return m_pImp->get_seriespatienttypeid();}
void RtSeries::set_seriespatienttypeid(const std::string& seriespatienttypeid)
{
    m_pImp->set_seriespatienttypeid(seriespatienttypeid);
    enable_field(SERIES_SERIESPATIENTTYPEID);
    setdirty_field(SERIES_SERIESPATIENTTYPEID, true);
}

//seriesissecondcaptured
int RtSeries::get_seriesissecondcaptured() const { return m_pImp->get_seriesissecondcaptured();}
void RtSeries::set_seriesissecondcaptured(const int& seriesissecondcaptured)
{
    m_pImp->set_seriesissecondcaptured(seriesissecondcaptured);
    enable_field(SERIES_SERIESISSECONDCAPTURED);
    setdirty_field(SERIES_SERIESISSECONDCAPTURED, true);
}

//seriesisexamed
int RtSeries::get_seriesisexamed() const { return m_pImp->get_seriesisexamed();}
void RtSeries::set_seriesisexamed(const int& seriesisexamed)
{
    m_pImp->set_seriesisexamed(seriesisexamed);
    enable_field(SERIES_SERIESISEXAMED);
    setdirty_field(SERIES_SERIESISEXAMED, true);
}

//rawdataacquisitionnumber
int RtSeries::get_rawdataacquisitionnumber() const { return m_pImp->get_rawdataacquisitionnumber();}
void RtSeries::set_rawdataacquisitionnumber(const int& rawdataacquisitionnumber)
{
    m_pImp->set_rawdataacquisitionnumber(rawdataacquisitionnumber);
    enable_field(SERIES_RAWDATAACQUISITIONNUMBER);
    setdirty_field(SERIES_RAWDATAACQUISITIONNUMBER, true);
}

//rawdataacquisitiondate
DATE_BOOST RtSeries::get_rawdataacquisitiondate() const { return m_pImp->get_rawdataacquisitiondate();}
void RtSeries::set_rawdataacquisitiondate(const DATE_BOOST& rawdataacquisitiondate)
{
    m_pImp->set_rawdataacquisitiondate(rawdataacquisitiondate);
    enable_field(SERIES_RAWDATAACQUISITIONDATE);
    setdirty_field(SERIES_RAWDATAACQUISITIONDATE, true);
}

//rawdataacquisitiontime
TIME_BOOST RtSeries::get_rawdataacquisitiontime() const { return m_pImp->get_rawdataacquisitiontime();}
void RtSeries::set_rawdataacquisitiontime(const TIME_BOOST& rawdataacquisitiontime)
{
    m_pImp->set_rawdataacquisitiontime(rawdataacquisitiontime);
    enable_field(SERIES_RAWDATAACQUISITIONTIME);
    setdirty_field(SERIES_RAWDATAACQUISITIONTIME, true);
}

//rawdatainstanceuid
std::string RtSeries::get_rawdatainstanceuid() const { return m_pImp->get_rawdatainstanceuid();}
void RtSeries::set_rawdatainstanceuid(const std::string& rawdatainstanceuid)
{
    m_pImp->set_rawdatainstanceuid(rawdatainstanceuid);
    enable_field(SERIES_RAWDATAINSTANCEUID);
    setdirty_field(SERIES_RAWDATAINSTANCEUID, true);
}

//reconresult
int RtSeries::get_reconresult() const { return m_pImp->get_reconresult();}
void RtSeries::set_reconresult(const int& reconresult)
{
    m_pImp->set_reconresult(reconresult);
    enable_field(SERIES_RECONRESULT);
    setdirty_field(SERIES_RECONRESULT, true);
}

//seriesthumbnail
std::string RtSeries::get_seriesthumbnail() const { return m_pImp->get_seriesthumbnail();}
void RtSeries::set_seriesthumbnail(const std::string& seriesthumbnail)
{
    m_pImp->set_seriesthumbnail(seriesthumbnail);
    enable_field(SERIES_SERIESTHUMBNAIL);
    setdirty_field(SERIES_SERIESTHUMBNAIL, true);
}

//seriescomments
std::string RtSeries::get_seriescomments() const { return m_pImp->get_seriescomments();}
void RtSeries::set_seriescomments(const std::string& seriescomments)
{
    m_pImp->set_seriescomments(seriescomments);
    enable_field(SERIES_SERIESCOMMENTS);
    setdirty_field(SERIES_SERIESCOMMENTS, true);
}

//protocolid
std::string RtSeries::get_protocolid() const { return m_pImp->get_protocolid();}
void RtSeries::set_protocolid(const std::string& protocolid)
{
    m_pImp->set_protocolid(protocolid);
    enable_field(SERIES_PROTOCOLID);
    setdirty_field(SERIES_PROTOCOLID, true);
}

//procedurename
std::string RtSeries::get_procedurename() const { return m_pImp->get_procedurename();}
void RtSeries::set_procedurename(const std::string& procedurename)
{
    m_pImp->set_procedurename(procedurename);
    enable_field(SERIES_PROCEDURENAME);
    setdirty_field(SERIES_PROCEDURENAME, true);
}

//protocollink
std::string RtSeries::get_protocollink() const { return m_pImp->get_protocollink();}
void RtSeries::set_protocollink(const std::string& protocollink)
{
    m_pImp->set_protocollink(protocollink);
    enable_field(SERIES_PROTOCOLLINK);
    setdirty_field(SERIES_PROTOCOLLINK, true);
}

//imagetype
int RtSeries::get_imagetype() const { return m_pImp->get_imagetype();}
void RtSeries::set_imagetype(const int& imagetype)
{
    m_pImp->set_imagetype(imagetype);
    enable_field(SERIES_IMAGETYPE);
    setdirty_field(SERIES_IMAGETYPE, true);
}

//seriesreserved0
std::string RtSeries::get_seriesreserved0() const { return m_pImp->get_seriesreserved0();}
void RtSeries::set_seriesreserved0(const std::string& seriesreserved0)
{
    m_pImp->set_seriesreserved0(seriesreserved0);
    enable_field(SERIES_SERIESRESERVED0);
    setdirty_field(SERIES_SERIESRESERVED0, true);
}

//seriesreserved1
std::string RtSeries::get_seriesreserved1() const { return m_pImp->get_seriesreserved1();}
void RtSeries::set_seriesreserved1(const std::string& seriesreserved1)
{
    m_pImp->set_seriesreserved1(seriesreserved1);
    enable_field(SERIES_SERIESRESERVED1);
    setdirty_field(SERIES_SERIESRESERVED1, true);
}

//patientname
std::string RtSeries::get_patientname() const { return m_pImp->get_patientname();}
void RtSeries::set_patientname(const std::string& patientname)
{
    m_pImp->set_patientname(patientname);
    enable_field(SERIES_PATIENTNAME);
    setdirty_field(SERIES_PATIENTNAME, true);
}

//manufacturermodelname
std::string RtSeries::get_manufacturermodelname() const { return m_pImp->get_manufacturermodelname();}
void RtSeries::set_manufacturermodelname(const std::string& manufacturermodelname)
{
    m_pImp->set_manufacturermodelname(manufacturermodelname);
    enable_field(SERIES_MANUFACTURERMODELNAME);
    setdirty_field(SERIES_MANUFACTURERMODELNAME, true);
}

//acquisitiontime
DATETIME_BOOST RtSeries::get_acquisitiontime() const { return m_pImp->get_acquisitiontime();}
void RtSeries::set_acquisitiontime(const DATETIME_BOOST& acquisitiontime)
{
    m_pImp->set_acquisitiontime(acquisitiontime);
    enable_field(SERIES_ACQUISITIONTIME);
    setdirty_field(SERIES_ACQUISITIONTIME, true);
}

//frameofreferenceuid
std::string RtSeries::get_frameofreferenceuid() const { return m_pImp->get_frameofreferenceuid();}
void RtSeries::set_frameofreferenceuid(const std::string& frameofreferenceuid)
{
    m_pImp->set_frameofreferenceuid(frameofreferenceuid);
    enable_field(SERIES_FRAMEOFREFERENCEUID);
    setdirty_field(SERIES_FRAMEOFREFERENCEUID, true);
}

//isphantom
bool RtSeries::get_isphantom() const { return m_pImp->get_isphantom();}
void RtSeries::set_isphantom(const bool& isphantom)
{
    m_pImp->set_isphantom(isphantom);
    enable_field(SERIES_ISPHANTOM);
    setdirty_field(SERIES_ISPHANTOM, true);
}

//tabletopposition
float RtSeries::get_tabletopposition() const { return m_pImp->get_tabletopposition();}
void RtSeries::set_tabletopposition(const float& tabletopposition)
{
    m_pImp->set_tabletopposition(tabletopposition);
    enable_field(SERIES_TABLETOPPOSITION);
    setdirty_field(SERIES_TABLETOPPOSITION, true);
}

//phase
int RtSeries::get_phase() const { return m_pImp->get_phase();}
void RtSeries::set_phase(const int& phase)
{
    m_pImp->set_phase(phase);
    enable_field(SERIES_PHASE);
    setdirty_field(SERIES_PHASE, true);
}

//ismainphase
bool RtSeries::get_ismainphase() const { return m_pImp->get_ismainphase();}
void RtSeries::set_ismainphase(const bool& ismainphase)
{
    m_pImp->set_ismainphase(ismainphase);
    enable_field(SERIES_ISMAINPHASE);
    setdirty_field(SERIES_ISMAINPHASE, true);
}

//relatedwavedatafilepath
std::string RtSeries::get_relatedwavedatafilepath() const { return m_pImp->get_relatedwavedatafilepath();}
void RtSeries::set_relatedwavedatafilepath(const std::string& relatedwavedatafilepath)
{
    m_pImp->set_relatedwavedatafilepath(relatedwavedatafilepath);
    enable_field(SERIES_RELATEDWAVEDATAFILEPATH);
    setdirty_field(SERIES_RELATEDWAVEDATAFILEPATH, true);
}

//isselected
bool RtSeries::get_isselected() const { return m_pImp->get_isselected();}
void RtSeries::set_isselected(const bool& isselected)
{
    m_pImp->set_isselected(isselected);
    enable_field(SERIES_ISSELECTED);
    setdirty_field(SERIES_ISSELECTED, true);
}

//gatingtype
int RtSeries::get_gatingtype() const { return m_pImp->get_gatingtype();}
void RtSeries::set_gatingtype(const int& gatingtype)
{
    m_pImp->set_gatingtype(gatingtype);
    enable_field(SERIES_GATINGTYPE);
    setdirty_field(SERIES_GATINGTYPE, true);
}

//binscope
int RtSeries::get_binscope() const { return m_pImp->get_binscope();}
void RtSeries::set_binscope(const int& binscope)
{
    m_pImp->set_binscope(binscope);
    enable_field(SERIES_BINSCOPE);
    setdirty_field(SERIES_BINSCOPE, true);
}

//currentbininfo
std::string RtSeries::get_currentbininfo() const { return m_pImp->get_currentbininfo();}
void RtSeries::set_currentbininfo(const std::string& currentbininfo)
{
    m_pImp->set_currentbininfo(currentbininfo);
    enable_field(SERIES_CURRENTBININFO);
    setdirty_field(SERIES_CURRENTBININFO, true);
}

//respiratorytype
int RtSeries::get_respiratorytype() const { return m_pImp->get_respiratorytype();}
void RtSeries::set_respiratorytype(const int& respiratorytype)
{
    m_pImp->set_respiratorytype(respiratorytype);
    enable_field(SERIES_RESPIRATORYTYPE);
    setdirty_field(SERIES_RESPIRATORYTYPE, true);
}

//breathrate
float RtSeries::get_breathrate() const { return m_pImp->get_breathrate();}
void RtSeries::set_breathrate(const float& breathrate)
{
    m_pImp->set_breathrate(breathrate);
    enable_field(SERIES_BREATHRATE);
    setdirty_field(SERIES_BREATHRATE, true);
}

//binmode
int RtSeries::get_binmode() const { return m_pImp->get_binmode();}
void RtSeries::set_binmode(const int& binmode)
{
    m_pImp->set_binmode(binmode);
    enable_field(SERIES_BINMODE);
    setdirty_field(SERIES_BINMODE, true);
}

//totalbinnumber
int RtSeries::get_totalbinnumber() const { return m_pImp->get_totalbinnumber();}
void RtSeries::set_totalbinnumber(const int& totalbinnumber)
{
    m_pImp->set_totalbinnumber(totalbinnumber);
    enable_field(SERIES_TOTALBINNUMBER);
    setdirty_field(SERIES_TOTALBINNUMBER, true);
}

//binimagetotalnumber
int RtSeries::get_binimagetotalnumber() const { return m_pImp->get_binimagetotalnumber();}
void RtSeries::set_binimagetotalnumber(const int& binimagetotalnumber)
{
    m_pImp->set_binimagetotalnumber(binimagetotalnumber);
    enable_field(SERIES_BINIMAGETOTALNUMBER);
    setdirty_field(SERIES_BINIMAGETOTALNUMBER, true);
}

//isqa
bool RtSeries::get_isqa() const { return m_pImp->get_isqa();}
void RtSeries::set_isqa(const bool& isqa)
{
    m_pImp->set_isqa(isqa);
    enable_field(SERIES_ISQA);
    setdirty_field(SERIES_ISQA, true);
}

//convolutionkernal
std::string RtSeries::get_convolutionkernal() const { return m_pImp->get_convolutionkernal();}
void RtSeries::set_convolutionkernal(const std::string& convolutionkernal)
{
    m_pImp->set_convolutionkernal(convolutionkernal);
    enable_field(SERIES_CONVOLUTIONKERNAL);
    setdirty_field(SERIES_CONVOLUTIONKERNAL, true);
}

//updatetime
DATETIME_BOOST RtSeries::get_updatetime() const { return m_pImp->get_updatetime();}
void RtSeries::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(SERIES_UPDATETIME);
    setdirty_field(SERIES_UPDATETIME, true);
}
//////////////////////////////////////////////////////////////////////////
//RtImage3D* RtSeries::get_image3d() const { return m_pImp->get_image3d();}
//void RtSeries::set_image3d(RtImage3D* image3d) { auto p = m_pImp->get_image3d(); DEL_PTR(p); m_pImp->set_image3d(image3d);}

RtImage3DHeader* RtSeries::get_header() { return m_pImp->get_header();}
const RtImage3DHeader* RtSeries::get_header() const { return m_pImp->get_header();}

char* RtSeries::get_imagedata(unsigned long* ulSize) const { return m_pImp->get_imagedata(ulSize);}
void RtSeries::set_imagedata(char* imagedata, unsigned long ulSize) { m_pImp->set_imagedata(imagedata, ulSize);}

std::string RtSeries::get_slicethickness() const { return m_pImp->get_slicethickness();}
void RtSeries::set_slicethickness(const std::string& slicethickness) { m_pImp->set_slicethickness(slicethickness);}

std::string RtSeries::get_studyid() const { return m_pImp->get_studyid();}
void RtSeries::set_studyid(const std::string& studyid) { m_pImp->set_studyid(studyid);}

std::string RtSeries::get_studydescription() const { return m_pImp->get_studydescription();}
void RtSeries::set_studydescription(const std::string& studydescription) { m_pImp->set_studydescription(studydescription);}

std::string RtSeries::get_patientid() const { return m_pImp->get_patientid();}
void RtSeries::set_patientid(const std::string& patientid) { m_pImp->set_patientid(patientid);}

std::string RtSeries::get_patientbirthdate() const { return m_pImp->get_patientbirthdate();}
void RtSeries::set_patientbirthdate(const std::string& patientbirthdate) { m_pImp->set_patientbirthdate(patientbirthdate);}

std::string RtSeries::get_patientage() const { return m_pImp->get_patientage();}
void RtSeries::set_patientage(const std::string& patientage) { m_pImp->set_patientage(patientage);}

std::string RtSeries::get_patientsex() const { return m_pImp->get_patientsex();}
void RtSeries::set_patientsex(const std::string& patientsex) { m_pImp->set_patientsex(patientsex);}

std::string RtSeries::get_patientuid() const { return m_pImp->get_patientuid();}
void RtSeries::set_patientuid(const std::string& patientuid) { m_pImp->set_patientuid(patientuid);}

RT_TPS_DATABASE_END_NAMESPACE
