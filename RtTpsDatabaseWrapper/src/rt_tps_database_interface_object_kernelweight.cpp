//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_kernelweight.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_kernelweight.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtKernelweightImp::RtKernelweightImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_commissionedunituid(""),
    m_fieldsize(0.f),
    m_kernelidlist(""),
    m_kernelweightlist(""),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtKernelweightImp::RtKernelweightImp(const RtKernelweightImp& kernelweight):
    m_uid(kernelweight.get_uid()),
    m_commissionedunituid(kernelweight.get_commissionedunituid()),
    m_fieldsize(kernelweight.get_fieldsize()),
    m_kernelidlist(kernelweight.get_kernelidlist()),
    m_kernelweightlist(kernelweight.get_kernelweightlist()),
    m_crc(kernelweight.get_crc()),
    m_updatetime(kernelweight.get_updatetime())
{
}

RtKernelweightImp& RtKernelweightImp::operator=(const RtKernelweightImp& kernelweight)
{
    if (this != &kernelweight){
        this->m_uid = kernelweight.get_uid();
        this->m_commissionedunituid = kernelweight.get_commissionedunituid();
        this->m_fieldsize = kernelweight.get_fieldsize();
        this->m_kernelidlist = kernelweight.get_kernelidlist();
        this->m_kernelweightlist = kernelweight.get_kernelweightlist();
        this->m_crc = kernelweight.get_crc();
        this->m_updatetime = kernelweight.get_updatetime();
        this->m_kernelid = kernelweight.get_kernelid_list();
        this->m_kernelweight = kernelweight.get_kernelweight_list();
    }
    return *this;
}

RtKernelweightImp::~RtKernelweightImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtKernelweight::RtKernelweight(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtKernelweightImp(bGeneraterUid);
    set_flags(KERNELWEIGHT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_KERNELWEIGHT_FIELD_NULL);
}

RtKernelweight::RtKernelweight(const RtKernelweight& kernelweight): RtDatabaseObject(kernelweight),
   m_pImp(new RtKernelweightImp(*kernelweight.m_pImp))
{
}

RtKernelweight& RtKernelweight::operator = (const RtKernelweight& kernelweight)
{
    if(this != &kernelweight)
    {
        RtDatabaseObject::operator=(kernelweight);
        *this->m_pImp = *kernelweight.m_pImp;
    }
    return *this;
}

RtKernelweight::~RtKernelweight()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtKernelweight::get_uid() const { return m_pImp->get_uid();}
void RtKernelweight::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(KERNELWEIGHT_UID);
    setdirty_field(KERNELWEIGHT_UID, true);
}

//commissionedunituid
std::string RtKernelweight::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtKernelweight::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(KERNELWEIGHT_COMMISSIONEDUNITUID);
    setdirty_field(KERNELWEIGHT_COMMISSIONEDUNITUID, true);
}

//fieldsize
float RtKernelweight::get_fieldsize() const { return m_pImp->get_fieldsize();}
void RtKernelweight::set_fieldsize(const float& fieldsize)
{
    m_pImp->set_fieldsize(fieldsize);
    enable_field(KERNELWEIGHT_FIELDSIZE);
    setdirty_field(KERNELWEIGHT_FIELDSIZE, true);
}

//kernelidlist
std::string RtKernelweight::get_kernelidlist() const { return m_pImp->get_kernelidlist();}
void RtKernelweight::set_kernelidlist(const std::string& kernelidlist)
{
    m_pImp->set_kernelidlist(kernelidlist);
    enable_field(KERNELWEIGHT_KERNELIDLIST);
    setdirty_field(KERNELWEIGHT_KERNELIDLIST, true);
}

//kernelweightlist
std::string RtKernelweight::get_kernelweightlist() const { return m_pImp->get_kernelweightlist();}
void RtKernelweight::set_kernelweightlist(const std::string& kernelweightlist)
{
    m_pImp->set_kernelweightlist(kernelweightlist);
    enable_field(KERNELWEIGHT_KERNELWEIGHTLIST);
    setdirty_field(KERNELWEIGHT_KERNELWEIGHTLIST, true);
}

//crc
std::string RtKernelweight::get_crc() const { return m_pImp->get_crc();}
void RtKernelweight::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(KERNELWEIGHT_CRC);
    setdirty_field(KERNELWEIGHT_CRC, true);
}

//updatetime
DATETIME_BOOST RtKernelweight::get_updatetime() const { return m_pImp->get_updatetime();}
void RtKernelweight::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(KERNELWEIGHT_UPDATETIME);
    setdirty_field(KERNELWEIGHT_UPDATETIME, true);
}

//////////////////////////////////////////////////////////////////////////
std::vector<int> RtKernelweight::get_kernelid_list() const { return m_pImp->get_kernelid_list();}
void RtKernelweight::set_kernelid_list(const std::vector<int>& kernelid) { m_pImp->set_kernelid_list(kernelid);}

std::vector<float> RtKernelweight::get_kernelweight_list() const { return m_pImp->get_kernelweight_list();}
void RtKernelweight::set_kernelweight_list(const std::vector<float>& kernelweight) { m_pImp->set_kernelweight_list(kernelweight);}
RT_TPS_DATABASE_END_NAMESPACE