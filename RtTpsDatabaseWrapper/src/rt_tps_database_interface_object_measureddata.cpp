//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_measureddata.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_measureddata.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtMeasureddataImp::RtMeasureddataImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_commissionedunituid(""),
    m_outputinwaterlist(""),
    m_outputinairlist(""),
    m_phantomagle(0.f),
    m_scpdepth(0.f),
    m_wedgefactordepth(0.f),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtMeasureddataImp::RtMeasureddataImp(const RtMeasureddataImp& measureddata):
    m_uid(measureddata.get_uid()),
    m_commissionedunituid(measureddata.get_commissionedunituid()),
    m_outputinwaterlist(measureddata.get_outputinwaterlist()),
    m_outputinairlist(measureddata.get_outputinairlist()),
    m_phantomagle(measureddata.get_phantomagle()),
    m_scpdepth(measureddata.get_scpdepth()),
    m_wedgefactordepth(measureddata.get_wedgefactordepth()),
    m_crc(measureddata.get_crc()),
    m_updatetime(measureddata.get_updatetime())
{
}

RtMeasureddataImp& RtMeasureddataImp::operator=(const RtMeasureddataImp& measureddata)
{
    if (this != &measureddata){
        this->m_uid = measureddata.get_uid();
        this->m_commissionedunituid = measureddata.get_commissionedunituid();
        this->m_outputinwaterlist = measureddata.get_outputinwaterlist();
        this->m_outputinairlist = measureddata.get_outputinairlist();
        this->m_phantomagle = measureddata.get_phantomagle();
        this->m_scpdepth = measureddata.get_scpdepth();
        this->m_wedgefactordepth = measureddata.get_wedgefactordepth();
        this->m_crc = measureddata.get_crc();
        this->m_updatetime = measureddata.get_updatetime();
    }
    return *this;
}

RtMeasureddataImp::~RtMeasureddataImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtMeasureddata::RtMeasureddata(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtMeasureddataImp(bGeneraterUid);
    set_flags(MEASUREDDATA_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_MEASUREDDATA_FIELD_NULL);
}

RtMeasureddata::RtMeasureddata(const RtMeasureddata& measureddata): RtDatabaseObject(measureddata),
   m_pImp(new RtMeasureddataImp(*measureddata.m_pImp))
{
}

RtMeasureddata& RtMeasureddata::operator = (const RtMeasureddata& measureddata)
{
    if(this != &measureddata)
    {
        RtDatabaseObject::operator=(measureddata);
        *this->m_pImp = *measureddata.m_pImp;
    }
    return *this;
}

RtMeasureddata::~RtMeasureddata()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtMeasureddata::get_uid() const { return m_pImp->get_uid();}
void RtMeasureddata::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(MEASUREDDATA_UID);
    setdirty_field(MEASUREDDATA_UID, true);
}

//commissionedunituid
std::string RtMeasureddata::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtMeasureddata::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(MEASUREDDATA_COMMISSIONEDUNITUID);
    setdirty_field(MEASUREDDATA_COMMISSIONEDUNITUID, true);
}

//outputinwaterlist
std::string RtMeasureddata::get_outputinwaterlist() const { return m_pImp->get_outputinwaterlist();}
void RtMeasureddata::set_outputinwaterlist(const std::string& outputinwaterlist)
{
    m_pImp->set_outputinwaterlist(outputinwaterlist);
    enable_field(MEASUREDDATA_OUTPUTINWATERLIST);
    setdirty_field(MEASUREDDATA_OUTPUTINWATERLIST, true);
}

//outputinairlist
std::string RtMeasureddata::get_outputinairlist() const { return m_pImp->get_outputinairlist();}
void RtMeasureddata::set_outputinairlist(const std::string& outputinairlist)
{
    m_pImp->set_outputinairlist(outputinairlist);
    enable_field(MEASUREDDATA_OUTPUTINAIRLIST);
    setdirty_field(MEASUREDDATA_OUTPUTINAIRLIST, true);
}

//phantomagle
float RtMeasureddata::get_phantomagle() const { return m_pImp->get_phantomagle();}
void RtMeasureddata::set_phantomagle(const float& phantomagle)
{
    m_pImp->set_phantomagle(phantomagle);
    enable_field(MEASUREDDATA_PHANTOMAGLE);
    setdirty_field(MEASUREDDATA_PHANTOMAGLE, true);
}

//scpdepth
float RtMeasureddata::get_scpdepth() const { return m_pImp->get_scpdepth();}
void RtMeasureddata::set_scpdepth(const float& scpdepth)
{
    m_pImp->set_scpdepth(scpdepth);
    enable_field(MEASUREDDATA_SCPDEPTH);
    setdirty_field(MEASUREDDATA_SCPDEPTH, true);
}

//wedgefactordepth
float RtMeasureddata::get_wedgefactordepth() const { return m_pImp->get_wedgefactordepth();}
void RtMeasureddata::set_wedgefactordepth(const float& wedgefactordepth)
{
    m_pImp->set_wedgefactordepth(wedgefactordepth);
    enable_field(MEASUREDDATA_WEDGEFACTORDEPTH);
    setdirty_field(MEASUREDDATA_WEDGEFACTORDEPTH, true);
}

//crc
std::string RtMeasureddata::get_crc() const { return m_pImp->get_crc();}
void RtMeasureddata::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(MEASUREDDATA_CRC);
    setdirty_field(MEASUREDDATA_CRC, true);
}

//updatetime
DATETIME_BOOST RtMeasureddata::get_updatetime() const { return m_pImp->get_updatetime();}
void RtMeasureddata::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(MEASUREDDATA_UPDATETIME);
    setdirty_field(MEASUREDDATA_UPDATETIME, true);
}

std::map<FieldSize, float> RtMeasureddata::GetOutputInWaterList() const{

    return m_pImp->GetOutputInWaterList();
}
void RtMeasureddata::SetOutputInWaterList(const std::map<FieldSize, float>& vOutputInWaterList){

    m_pImp->SetOutputInWaterList(vOutputInWaterList);
}

RT_TPS_DATABASE_END_NAMESPACE