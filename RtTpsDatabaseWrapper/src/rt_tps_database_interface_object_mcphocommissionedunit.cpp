//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_mcphocommissionedunit.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_mcphocommissionedunit.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtMcphocommissionedunitImp::RtMcphocommissionedunitImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_commissionedunituid(""),
    m_mcphoxjawupposition(0.f),
    m_mcphoxjawthickness(0.f),
    m_mcphoyjawupposition(0.f),
    m_mcphoyjawthickness(0.f),
    m_mcphomlccenterposition(0.f),
    m_mcphomlcthickness(0.f),
    m_mcphomlctgwidth(0.f),
    m_mcphomlcairgapwidth(0.f),
    m_mcphomlleafendradius(0.f),
    m_mcphomufactor(0.f),
    m_mcpholist(""),
    m_phspdistancefromtarget(0.f),
    m_mcphonorm10x10(0.f),
    m_mcphoabscorrectionfactor(""),
    m_mcphoenergy(""),
    m_phoflulist(""),
    m_eneoffaxisradiusveclist(""),
    m_eneoffaxisenergyvec(""),
    m_eneoffaxisvaluelist(""),
    m_mcphoon(0),
    m_mcphodm(0.f),
    m_mcphoc1(0.f),
    m_mcphoc2(0.f),
    m_mcphoc3(0.f),
    m_mcphoffs10(0.f),
    m_mcphok(0.f),
    m_mcphoa(0.f),
    m_mcphodf(0.f),
    m_mcphosf(0.f),
    m_mlcleafshapenum(0),
    m_mlcleafyleafposlist(""),
    m_mlcleafthetalist(""),
    m_mlcleafshapeidxlist(""),
    m_meanleaforishift(0.f),
    m_fringe(0.f),
    m_mcpholeafmaplist(""),
    m_mcphoparam1(""),
    m_mcphoparam2(""),
    m_mcphoparam3(""),
    m_mcphoparam4(""),
    m_mcphoparam5(""),
    m_mcphoparam6(""),
    m_mcphoparam7(""),
    m_mcphoparam8(""),
    m_mcphoparam9(""),
    m_mcphoparam10(""),
    m_mcprimaryenergystart(0.f),
    m_mcprimaryenergyend(0.f),
    m_mcprimaryenergybin(0),
    m_mcprimaryenergyrestart(0.f),
    m_mcsecondaryenergystart(0.f),
    m_mcsecondaryenergyend(0.f),
    m_mcsecondaryenergybin(0),
    m_mcsecondaryenergyrestart(0.f),
    m_mcelectronenergy(0.f),
    m_mccommiparticlenumber(0),
    m_mcprimaryenergylist(""),
    m_mcprimaryweightlist(""),
    m_mcsecondaryenergylist(""),
    m_mcsecondaryweightlist(""),
    m_mcelecenergylist(""),
    m_mcelecweightlist(""),
    m_mcprimaryflatfilterdist(0.f),
    m_mcprimaryjawdistance(0.f),
    m_mcsourcesigmaprimary(0.f),
    m_mcsourcesigmasecondary(0.f),
    m_mcprimarysoftening(false),
    m_mcsofteningtunningf(0.f),
    m_mcscatteringcompton(false),
    m_mcsecondarysourcetype(0),
    m_mcsecondarysourcepara(""),
    m_mceleccorfieldsize(""),
    m_mcphotonfluence(""),
    m_mcrectanglescacor(0.f),
    m_mclargefieldtailcor(0.f),
    m_mcmlcleakage(0.f),
    m_mcgaussianblurswitch(false),
    m_mcgaussiansigmax(0.f),
    m_mcgaussiansigmay(0.f),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time),
    m_mcjawleakage(0.f),
    m_mctonguewidth(0.f),
    m_mcgroovewidth(0.f),
    m_mcleaftipwidth(0.f),
    m_mctransmission(0.f),
    m_reserve("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtMcphocommissionedunitImp::RtMcphocommissionedunitImp(const RtMcphocommissionedunitImp& mcphocommissionedunit):
    m_uid(mcphocommissionedunit.get_uid()),
    m_commissionedunituid(mcphocommissionedunit.get_commissionedunituid()),
    m_mcphoxjawupposition(mcphocommissionedunit.get_mcphoxjawupposition()),
    m_mcphoxjawthickness(mcphocommissionedunit.get_mcphoxjawthickness()),
    m_mcphoyjawupposition(mcphocommissionedunit.get_mcphoyjawupposition()),
    m_mcphoyjawthickness(mcphocommissionedunit.get_mcphoyjawthickness()),
    m_mcphomlccenterposition(mcphocommissionedunit.get_mcphomlccenterposition()),
    m_mcphomlcthickness(mcphocommissionedunit.get_mcphomlcthickness()),
    m_mcphomlctgwidth(mcphocommissionedunit.get_mcphomlctgwidth()),
    m_mcphomlcairgapwidth(mcphocommissionedunit.get_mcphomlcairgapwidth()),
    m_mcphomlleafendradius(mcphocommissionedunit.get_mcphomlleafendradius()),
    m_mcphomufactor(mcphocommissionedunit.get_mcphomufactor()),
    m_mcpholist(mcphocommissionedunit.get_mcpholist()),
    m_phspdistancefromtarget(mcphocommissionedunit.get_phspdistancefromtarget()),
    m_mcphonorm10x10(mcphocommissionedunit.get_mcphonorm10x10()),
    m_mcphoabscorrectionfactor(mcphocommissionedunit.get_mcphoabscorrectionfactor()),
    m_mcphoenergy(mcphocommissionedunit.get_mcphoenergy()),
    m_phoflulist(mcphocommissionedunit.get_phoflulist()),
    m_eneoffaxisradiusveclist(mcphocommissionedunit.get_eneoffaxisradiusveclist()),
    m_eneoffaxisenergyvec(mcphocommissionedunit.get_eneoffaxisenergyvec()),
    m_eneoffaxisvaluelist(mcphocommissionedunit.get_eneoffaxisvaluelist()),
    m_mcphoon(mcphocommissionedunit.get_mcphoon()),
    m_mcphodm(mcphocommissionedunit.get_mcphodm()),
    m_mcphoc1(mcphocommissionedunit.get_mcphoc1()),
    m_mcphoc2(mcphocommissionedunit.get_mcphoc2()),
    m_mcphoc3(mcphocommissionedunit.get_mcphoc3()),
    m_mcphoffs10(mcphocommissionedunit.get_mcphoffs10()),
    m_mcphok(mcphocommissionedunit.get_mcphok()),
    m_mcphoa(mcphocommissionedunit.get_mcphoa()),
    m_mcphodf(mcphocommissionedunit.get_mcphodf()),
    m_mcphosf(mcphocommissionedunit.get_mcphosf()),
    m_mlcleafshapenum(mcphocommissionedunit.get_mlcleafshapenum()),
    m_mlcleafyleafposlist(mcphocommissionedunit.get_mlcleafyleafposlist()),
    m_mlcleafthetalist(mcphocommissionedunit.get_mlcleafthetalist()),
    m_mlcleafshapeidxlist(mcphocommissionedunit.get_mlcleafshapeidxlist()),
    m_meanleaforishift(mcphocommissionedunit.get_meanleaforishift()),
    m_fringe(mcphocommissionedunit.get_fringe()),
    m_mcpholeafmaplist(mcphocommissionedunit.get_mcpholeafmaplist()),
    m_mcphoparam1(mcphocommissionedunit.get_mcphoparam1()),
    m_mcphoparam2(mcphocommissionedunit.get_mcphoparam2()),
    m_mcphoparam3(mcphocommissionedunit.get_mcphoparam3()),
    m_mcphoparam4(mcphocommissionedunit.get_mcphoparam4()),
    m_mcphoparam5(mcphocommissionedunit.get_mcphoparam5()),
    m_mcphoparam6(mcphocommissionedunit.get_mcphoparam6()),
    m_mcphoparam7(mcphocommissionedunit.get_mcphoparam7()),
    m_mcphoparam8(mcphocommissionedunit.get_mcphoparam8()),
    m_mcphoparam9(mcphocommissionedunit.get_mcphoparam9()),
    m_mcphoparam10(mcphocommissionedunit.get_mcphoparam10()),
    m_mcprimaryenergystart(mcphocommissionedunit.get_mcprimaryenergystart()),
    m_mcprimaryenergyend(mcphocommissionedunit.get_mcprimaryenergyend()),
    m_mcprimaryenergybin(mcphocommissionedunit.get_mcprimaryenergybin()),
    m_mcprimaryenergyrestart(mcphocommissionedunit.get_mcprimaryenergyrestart()),
    m_mcsecondaryenergystart(mcphocommissionedunit.get_mcsecondaryenergystart()),
    m_mcsecondaryenergyend(mcphocommissionedunit.get_mcsecondaryenergyend()),
    m_mcsecondaryenergybin(mcphocommissionedunit.get_mcsecondaryenergybin()),
    m_mcsecondaryenergyrestart(mcphocommissionedunit.get_mcsecondaryenergyrestart()),
    m_mcelectronenergy(mcphocommissionedunit.get_mcelectronenergy()),
    m_mccommiparticlenumber(mcphocommissionedunit.get_mccommiparticlenumber()),
    m_mcprimaryenergylist(mcphocommissionedunit.get_mcprimaryenergylist()),
    m_mcprimaryweightlist(mcphocommissionedunit.get_mcprimaryweightlist()),
    m_mcsecondaryenergylist(mcphocommissionedunit.get_mcsecondaryenergylist()),
    m_mcsecondaryweightlist(mcphocommissionedunit.get_mcsecondaryweightlist()),
    m_mcelecenergylist(mcphocommissionedunit.get_mcelecenergylist()),
    m_mcelecweightlist(mcphocommissionedunit.get_mcelecweightlist()),
    m_mcprimaryflatfilterdist(mcphocommissionedunit.get_mcprimaryflatfilterdist()),
    m_mcprimaryjawdistance(mcphocommissionedunit.get_mcprimaryjawdistance()),
    m_mcsourcesigmaprimary(mcphocommissionedunit.get_mcsourcesigmaprimary()),
    m_mcsourcesigmasecondary(mcphocommissionedunit.get_mcsourcesigmasecondary()),
    m_mcprimarysoftening(mcphocommissionedunit.get_mcprimarysoftening()),
    m_mcsofteningtunningf(mcphocommissionedunit.get_mcsofteningtunningf()),
    m_mcscatteringcompton(mcphocommissionedunit.get_mcscatteringcompton()),
    m_mcsecondarysourcetype(mcphocommissionedunit.get_mcsecondarysourcetype()),
    m_mcsecondarysourcepara(mcphocommissionedunit.get_mcsecondarysourcepara()),
    m_mceleccorfieldsize(mcphocommissionedunit.get_mceleccorfieldsize()),
    m_mcphotonfluence(mcphocommissionedunit.get_mcphotonfluence()),
    m_mcrectanglescacor(mcphocommissionedunit.get_mcrectanglescacor()),
    m_mclargefieldtailcor(mcphocommissionedunit.get_mclargefieldtailcor()),
    m_mcmlcleakage(mcphocommissionedunit.get_mcmlcleakage()),
    m_mcgaussianblurswitch(mcphocommissionedunit.get_mcgaussianblurswitch()),
    m_mcgaussiansigmax(mcphocommissionedunit.get_mcgaussiansigmax()),
    m_mcgaussiansigmay(mcphocommissionedunit.get_mcgaussiansigmay()),
    m_crc(mcphocommissionedunit.get_crc()),
    m_updatetime(mcphocommissionedunit.get_updatetime()),
    m_mcjawleakage(mcphocommissionedunit.get_mcjawleakage()),
    m_mctonguewidth(mcphocommissionedunit.get_mctonguewidth()),
    m_mcgroovewidth(mcphocommissionedunit.get_mcgroovewidth()),
    m_mcleaftipwidth(mcphocommissionedunit.get_mcleaftipwidth()),
    m_mctransmission(mcphocommissionedunit.get_mctransmission()),
    m_reserve(mcphocommissionedunit.get_reserve())
{
}

RtMcphocommissionedunitImp& RtMcphocommissionedunitImp::operator=(const RtMcphocommissionedunitImp& mcphocommissionedunit)
{
    if (this != &mcphocommissionedunit){
        this->m_uid = mcphocommissionedunit.get_uid();
        this->m_commissionedunituid = mcphocommissionedunit.get_commissionedunituid();
        this->m_mcphoxjawupposition = mcphocommissionedunit.get_mcphoxjawupposition();
        this->m_mcphoxjawthickness = mcphocommissionedunit.get_mcphoxjawthickness();
        this->m_mcphoyjawupposition = mcphocommissionedunit.get_mcphoyjawupposition();
        this->m_mcphoyjawthickness = mcphocommissionedunit.get_mcphoyjawthickness();
        this->m_mcphomlccenterposition = mcphocommissionedunit.get_mcphomlccenterposition();
        this->m_mcphomlcthickness = mcphocommissionedunit.get_mcphomlcthickness();
        this->m_mcphomlctgwidth = mcphocommissionedunit.get_mcphomlctgwidth();
        this->m_mcphomlcairgapwidth = mcphocommissionedunit.get_mcphomlcairgapwidth();
        this->m_mcphomlleafendradius = mcphocommissionedunit.get_mcphomlleafendradius();
        this->m_mcphomufactor = mcphocommissionedunit.get_mcphomufactor();
        this->m_mcpholist = mcphocommissionedunit.get_mcpholist();
        this->m_phspdistancefromtarget = mcphocommissionedunit.get_phspdistancefromtarget();
        this->m_mcphonorm10x10 = mcphocommissionedunit.get_mcphonorm10x10();
        this->m_mcphoabscorrectionfactor = mcphocommissionedunit.get_mcphoabscorrectionfactor();
        this->m_mcphoenergy = mcphocommissionedunit.get_mcphoenergy();
        this->m_phoflulist = mcphocommissionedunit.get_phoflulist();
        this->m_eneoffaxisradiusveclist = mcphocommissionedunit.get_eneoffaxisradiusveclist();
        this->m_eneoffaxisenergyvec = mcphocommissionedunit.get_eneoffaxisenergyvec();
        this->m_eneoffaxisvaluelist = mcphocommissionedunit.get_eneoffaxisvaluelist();
        this->m_mcphoon = mcphocommissionedunit.get_mcphoon();
        this->m_mcphodm = mcphocommissionedunit.get_mcphodm();
        this->m_mcphoc1 = mcphocommissionedunit.get_mcphoc1();
        this->m_mcphoc2 = mcphocommissionedunit.get_mcphoc2();
        this->m_mcphoc3 = mcphocommissionedunit.get_mcphoc3();
        this->m_mcphoffs10 = mcphocommissionedunit.get_mcphoffs10();
        this->m_mcphok = mcphocommissionedunit.get_mcphok();
        this->m_mcphoa = mcphocommissionedunit.get_mcphoa();
        this->m_mcphodf = mcphocommissionedunit.get_mcphodf();
        this->m_mcphosf = mcphocommissionedunit.get_mcphosf();
        this->m_mlcleafshapenum = mcphocommissionedunit.get_mlcleafshapenum();
        this->m_mlcleafyleafposlist = mcphocommissionedunit.get_mlcleafyleafposlist();
        this->m_mlcleafthetalist = mcphocommissionedunit.get_mlcleafthetalist();
        this->m_mlcleafshapeidxlist = mcphocommissionedunit.get_mlcleafshapeidxlist();
        this->m_meanleaforishift = mcphocommissionedunit.get_meanleaforishift();
        this->m_fringe = mcphocommissionedunit.get_fringe();
        this->m_mcpholeafmaplist = mcphocommissionedunit.get_mcpholeafmaplist();
        this->m_mcphoparam1 = mcphocommissionedunit.get_mcphoparam1();
        this->m_mcphoparam2 = mcphocommissionedunit.get_mcphoparam2();
        this->m_mcphoparam3 = mcphocommissionedunit.get_mcphoparam3();
        this->m_mcphoparam4 = mcphocommissionedunit.get_mcphoparam4();
        this->m_mcphoparam5 = mcphocommissionedunit.get_mcphoparam5();
        this->m_mcphoparam6 = mcphocommissionedunit.get_mcphoparam6();
        this->m_mcphoparam7 = mcphocommissionedunit.get_mcphoparam7();
        this->m_mcphoparam8 = mcphocommissionedunit.get_mcphoparam8();
        this->m_mcphoparam9 = mcphocommissionedunit.get_mcphoparam9();
        this->m_mcphoparam10 = mcphocommissionedunit.get_mcphoparam10();
        this->m_mcprimaryenergystart = mcphocommissionedunit.get_mcprimaryenergystart();
        this->m_mcprimaryenergyend = mcphocommissionedunit.get_mcprimaryenergyend();
        this->m_mcprimaryenergybin = mcphocommissionedunit.get_mcprimaryenergybin();
        this->m_mcprimaryenergyrestart = mcphocommissionedunit.get_mcprimaryenergyrestart();
        this->m_mcsecondaryenergystart = mcphocommissionedunit.get_mcsecondaryenergystart();
        this->m_mcsecondaryenergyend = mcphocommissionedunit.get_mcsecondaryenergyend();
        this->m_mcsecondaryenergybin = mcphocommissionedunit.get_mcsecondaryenergybin();
        this->m_mcsecondaryenergyrestart = mcphocommissionedunit.get_mcsecondaryenergyrestart();
        this->m_mcelectronenergy = mcphocommissionedunit.get_mcelectronenergy();
        this->m_mccommiparticlenumber = mcphocommissionedunit.get_mccommiparticlenumber();
        this->m_mcprimaryenergylist = mcphocommissionedunit.get_mcprimaryenergylist();
        this->m_mcprimaryweightlist = mcphocommissionedunit.get_mcprimaryweightlist();
        this->m_mcsecondaryenergylist = mcphocommissionedunit.get_mcsecondaryenergylist();
        this->m_mcsecondaryweightlist = mcphocommissionedunit.get_mcsecondaryweightlist();
        this->m_mcelecenergylist = mcphocommissionedunit.get_mcelecenergylist();
        this->m_mcelecweightlist = mcphocommissionedunit.get_mcelecweightlist();
        this->m_mcprimaryflatfilterdist = mcphocommissionedunit.get_mcprimaryflatfilterdist();
        this->m_mcprimaryjawdistance = mcphocommissionedunit.get_mcprimaryjawdistance();
        this->m_mcsourcesigmaprimary = mcphocommissionedunit.get_mcsourcesigmaprimary();
        this->m_mcsourcesigmasecondary = mcphocommissionedunit.get_mcsourcesigmasecondary();
        this->m_mcprimarysoftening = mcphocommissionedunit.get_mcprimarysoftening();
        this->m_mcsofteningtunningf = mcphocommissionedunit.get_mcsofteningtunningf();
        this->m_mcscatteringcompton = mcphocommissionedunit.get_mcscatteringcompton();
        this->m_mcsecondarysourcetype = mcphocommissionedunit.get_mcsecondarysourcetype();
        this->m_mcsecondarysourcepara = mcphocommissionedunit.get_mcsecondarysourcepara();
        this->m_mceleccorfieldsize = mcphocommissionedunit.get_mceleccorfieldsize();
        this->m_mcphotonfluence = mcphocommissionedunit.get_mcphotonfluence();
        this->m_mcrectanglescacor = mcphocommissionedunit.get_mcrectanglescacor();
        this->m_mclargefieldtailcor = mcphocommissionedunit.get_mclargefieldtailcor();
        this->m_mcmlcleakage = mcphocommissionedunit.get_mcmlcleakage();
        this->m_mcgaussianblurswitch = mcphocommissionedunit.get_mcgaussianblurswitch();
        this->m_mcgaussiansigmax = mcphocommissionedunit.get_mcgaussiansigmax();
        this->m_mcgaussiansigmay = mcphocommissionedunit.get_mcgaussiansigmay();
        this->m_crc = mcphocommissionedunit.get_crc();
        this->m_updatetime = mcphocommissionedunit.get_updatetime();
        this->m_mcjawleakage = mcphocommissionedunit.get_mcjawleakage();
        this->m_mctonguewidth = mcphocommissionedunit.get_mctonguewidth();
        this->m_mcgroovewidth = mcphocommissionedunit.get_mcgroovewidth();
        this->m_mcleaftipwidth = mcphocommissionedunit.get_mcleaftipwidth();
        this->m_mctransmission = mcphocommissionedunit.get_mctransmission();
        this->m_reserve = mcphocommissionedunit.get_reserve();
    }
    return *this;
}

RtMcphocommissionedunitImp::~RtMcphocommissionedunitImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtMcphocommissionedunit::RtMcphocommissionedunit(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtMcphocommissionedunitImp(bGeneraterUid);
    set_flags(MCPHOCOMMISSIONEDUNIT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_MCPHOCOMMISSIONEDUNIT_FIELD_NULL);
}

RtMcphocommissionedunit::RtMcphocommissionedunit(const RtMcphocommissionedunit& mcphocommissionedunit): RtDatabaseObject(mcphocommissionedunit),
   m_pImp(new RtMcphocommissionedunitImp(*mcphocommissionedunit.m_pImp))
{
}

RtMcphocommissionedunit& RtMcphocommissionedunit::operator = (const RtMcphocommissionedunit& mcphocommissionedunit)
{
    if(this != &mcphocommissionedunit)
    {
        RtDatabaseObject::operator=(mcphocommissionedunit);
        *this->m_pImp = *mcphocommissionedunit.m_pImp;
    }
    return *this;
}

RtMcphocommissionedunit::~RtMcphocommissionedunit()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtMcphocommissionedunit::get_uid() const { return m_pImp->get_uid();}
void RtMcphocommissionedunit::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(MCPHOCOMMISSIONEDUNIT_UID);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_UID, true);
}

//commissionedunituid
std::string RtMcphocommissionedunit::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtMcphocommissionedunit::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(MCPHOCOMMISSIONEDUNIT_COMMISSIONEDUNITUID);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_COMMISSIONEDUNITUID, true);
}

//mcphoxjawupposition
float RtMcphocommissionedunit::get_mcphoxjawupposition() const { return m_pImp->get_mcphoxjawupposition();}
void RtMcphocommissionedunit::set_mcphoxjawupposition(const float& mcphoxjawupposition)
{
    m_pImp->set_mcphoxjawupposition(mcphoxjawupposition);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOXJAWUPPOSITION);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOXJAWUPPOSITION, true);
}

//mcphoxjawthickness
float RtMcphocommissionedunit::get_mcphoxjawthickness() const { return m_pImp->get_mcphoxjawthickness();}
void RtMcphocommissionedunit::set_mcphoxjawthickness(const float& mcphoxjawthickness)
{
    m_pImp->set_mcphoxjawthickness(mcphoxjawthickness);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOXJAWTHICKNESS);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOXJAWTHICKNESS, true);
}

//mcphoyjawupposition
float RtMcphocommissionedunit::get_mcphoyjawupposition() const { return m_pImp->get_mcphoyjawupposition();}
void RtMcphocommissionedunit::set_mcphoyjawupposition(const float& mcphoyjawupposition)
{
    m_pImp->set_mcphoyjawupposition(mcphoyjawupposition);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOYJAWUPPOSITION);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOYJAWUPPOSITION, true);
}

//mcphoyjawthickness
float RtMcphocommissionedunit::get_mcphoyjawthickness() const { return m_pImp->get_mcphoyjawthickness();}
void RtMcphocommissionedunit::set_mcphoyjawthickness(const float& mcphoyjawthickness)
{
    m_pImp->set_mcphoyjawthickness(mcphoyjawthickness);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOYJAWTHICKNESS);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOYJAWTHICKNESS, true);
}

//mcphomlccenterposition
float RtMcphocommissionedunit::get_mcphomlccenterposition() const { return m_pImp->get_mcphomlccenterposition();}
void RtMcphocommissionedunit::set_mcphomlccenterposition(const float& mcphomlccenterposition)
{
    m_pImp->set_mcphomlccenterposition(mcphomlccenterposition);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCCENTERPOSITION);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCCENTERPOSITION, true);
}

//mcphomlcthickness
float RtMcphocommissionedunit::get_mcphomlcthickness() const { return m_pImp->get_mcphomlcthickness();}
void RtMcphocommissionedunit::set_mcphomlcthickness(const float& mcphomlcthickness)
{
    m_pImp->set_mcphomlcthickness(mcphomlcthickness);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCTHICKNESS);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCTHICKNESS, true);
}

//mcphomlctgwidth
float RtMcphocommissionedunit::get_mcphomlctgwidth() const { return m_pImp->get_mcphomlctgwidth();}
void RtMcphocommissionedunit::set_mcphomlctgwidth(const float& mcphomlctgwidth)
{
    m_pImp->set_mcphomlctgwidth(mcphomlctgwidth);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCTGWIDTH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCTGWIDTH, true);
}

//mcphomlcairgapwidth
float RtMcphocommissionedunit::get_mcphomlcairgapwidth() const { return m_pImp->get_mcphomlcairgapwidth();}
void RtMcphocommissionedunit::set_mcphomlcairgapwidth(const float& mcphomlcairgapwidth)
{
    m_pImp->set_mcphomlcairgapwidth(mcphomlcairgapwidth);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCAIRGAPWIDTH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLCAIRGAPWIDTH, true);
}

//mcphomlleafendradius
float RtMcphocommissionedunit::get_mcphomlleafendradius() const { return m_pImp->get_mcphomlleafendradius();}
void RtMcphocommissionedunit::set_mcphomlleafendradius(const float& mcphomlleafendradius)
{
    m_pImp->set_mcphomlleafendradius(mcphomlleafendradius);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLLEAFENDRADIUS);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMLLEAFENDRADIUS, true);
}

//mcphomufactor
float RtMcphocommissionedunit::get_mcphomufactor() const { return m_pImp->get_mcphomufactor();}
void RtMcphocommissionedunit::set_mcphomufactor(const float& mcphomufactor)
{
    m_pImp->set_mcphomufactor(mcphomufactor);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOMUFACTOR);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOMUFACTOR, true);
}

//mcpholist
std::string RtMcphocommissionedunit::get_mcpholist() const { return m_pImp->get_mcpholist();}
void RtMcphocommissionedunit::set_mcpholist(const std::string& mcpholist)
{
    m_pImp->set_mcpholist(mcpholist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOLIST, true);
}

//phspdistancefromtarget
float RtMcphocommissionedunit::get_phspdistancefromtarget() const { return m_pImp->get_phspdistancefromtarget();}
void RtMcphocommissionedunit::set_phspdistancefromtarget(const float& phspdistancefromtarget)
{
    m_pImp->set_phspdistancefromtarget(phspdistancefromtarget);
    enable_field(MCPHOCOMMISSIONEDUNIT_PHSPDISTANCEFROMTARGET);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_PHSPDISTANCEFROMTARGET, true);
}

//mcphonorm10x10
float RtMcphocommissionedunit::get_mcphonorm10x10() const { return m_pImp->get_mcphonorm10x10();}
void RtMcphocommissionedunit::set_mcphonorm10x10(const float& mcphonorm10x10)
{
    m_pImp->set_mcphonorm10x10(mcphonorm10x10);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHONORM10X10);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHONORM10X10, true);
}

//mcphoabscorrectionfactor
std::string RtMcphocommissionedunit::get_mcphoabscorrectionfactor() const { return m_pImp->get_mcphoabscorrectionfactor();}
void RtMcphocommissionedunit::set_mcphoabscorrectionfactor(const std::string& mcphoabscorrectionfactor)
{
    m_pImp->set_mcphoabscorrectionfactor(mcphoabscorrectionfactor);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOABSCORRECTIONFACTOR);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOABSCORRECTIONFACTOR, true);
}

//mcphoenergy
std::string RtMcphocommissionedunit::get_mcphoenergy() const { return m_pImp->get_mcphoenergy();}
void RtMcphocommissionedunit::set_mcphoenergy(const std::string& mcphoenergy)
{
    m_pImp->set_mcphoenergy(mcphoenergy);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOENERGY);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOENERGY, true);
}

//phoflulist
std::string RtMcphocommissionedunit::get_phoflulist() const { return m_pImp->get_phoflulist();}
void RtMcphocommissionedunit::set_phoflulist(const std::string& phoflulist)
{
    m_pImp->set_phoflulist(phoflulist);
    enable_field(MCPHOCOMMISSIONEDUNIT_PHOFLULIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_PHOFLULIST, true);
}

//eneoffaxisradiusveclist
std::string RtMcphocommissionedunit::get_eneoffaxisradiusveclist() const { return m_pImp->get_eneoffaxisradiusveclist();}
void RtMcphocommissionedunit::set_eneoffaxisradiusveclist(const std::string& eneoffaxisradiusveclist)
{
    m_pImp->set_eneoffaxisradiusveclist(eneoffaxisradiusveclist);
    enable_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISRADIUSVECLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISRADIUSVECLIST, true);
}

//eneoffaxisenergyvec
std::string RtMcphocommissionedunit::get_eneoffaxisenergyvec() const { return m_pImp->get_eneoffaxisenergyvec();}
void RtMcphocommissionedunit::set_eneoffaxisenergyvec(const std::string& eneoffaxisenergyvec)
{
    m_pImp->set_eneoffaxisenergyvec(eneoffaxisenergyvec);
    enable_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISENERGYVEC);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISENERGYVEC, true);
}

//eneoffaxisvaluelist
std::string RtMcphocommissionedunit::get_eneoffaxisvaluelist() const { return m_pImp->get_eneoffaxisvaluelist();}
void RtMcphocommissionedunit::set_eneoffaxisvaluelist(const std::string& eneoffaxisvaluelist)
{
    m_pImp->set_eneoffaxisvaluelist(eneoffaxisvaluelist);
    enable_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISVALUELIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_ENEOFFAXISVALUELIST, true);
}

//mcphoon
int RtMcphocommissionedunit::get_mcphoon() const { return m_pImp->get_mcphoon();}
void RtMcphocommissionedunit::set_mcphoon(const int& mcphoon)
{
    m_pImp->set_mcphoon(mcphoon);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOON);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOON, true);
}

//mcphodm
float RtMcphocommissionedunit::get_mcphodm() const { return m_pImp->get_mcphodm();}
void RtMcphocommissionedunit::set_mcphodm(const float& mcphodm)
{
    m_pImp->set_mcphodm(mcphodm);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHODM);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHODM, true);
}

//mcphoc1
float RtMcphocommissionedunit::get_mcphoc1() const { return m_pImp->get_mcphoc1();}
void RtMcphocommissionedunit::set_mcphoc1(const float& mcphoc1)
{
    m_pImp->set_mcphoc1(mcphoc1);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOC1);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOC1, true);
}

//mcphoc2
float RtMcphocommissionedunit::get_mcphoc2() const { return m_pImp->get_mcphoc2();}
void RtMcphocommissionedunit::set_mcphoc2(const float& mcphoc2)
{
    m_pImp->set_mcphoc2(mcphoc2);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOC2);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOC2, true);
}

//mcphoc3
float RtMcphocommissionedunit::get_mcphoc3() const { return m_pImp->get_mcphoc3();}
void RtMcphocommissionedunit::set_mcphoc3(const float& mcphoc3)
{
    m_pImp->set_mcphoc3(mcphoc3);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOC3);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOC3, true);
}

//mcphoffs10
float RtMcphocommissionedunit::get_mcphoffs10() const { return m_pImp->get_mcphoffs10();}
void RtMcphocommissionedunit::set_mcphoffs10(const float& mcphoffs10)
{
    m_pImp->set_mcphoffs10(mcphoffs10);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOFFS10);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOFFS10, true);
}

//mcphok
float RtMcphocommissionedunit::get_mcphok() const { return m_pImp->get_mcphok();}
void RtMcphocommissionedunit::set_mcphok(const float& mcphok)
{
    m_pImp->set_mcphok(mcphok);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOK);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOK, true);
}

//mcphoa
float RtMcphocommissionedunit::get_mcphoa() const { return m_pImp->get_mcphoa();}
void RtMcphocommissionedunit::set_mcphoa(const float& mcphoa)
{
    m_pImp->set_mcphoa(mcphoa);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOA);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOA, true);
}

//mcphodf
float RtMcphocommissionedunit::get_mcphodf() const { return m_pImp->get_mcphodf();}
void RtMcphocommissionedunit::set_mcphodf(const float& mcphodf)
{
    m_pImp->set_mcphodf(mcphodf);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHODF);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHODF, true);
}

//mcphosf
float RtMcphocommissionedunit::get_mcphosf() const { return m_pImp->get_mcphosf();}
void RtMcphocommissionedunit::set_mcphosf(const float& mcphosf)
{
    m_pImp->set_mcphosf(mcphosf);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOSF);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOSF, true);
}

//mlcleafshapenum
int RtMcphocommissionedunit::get_mlcleafshapenum() const { return m_pImp->get_mlcleafshapenum();}
void RtMcphocommissionedunit::set_mlcleafshapenum(const int& mlcleafshapenum)
{
    m_pImp->set_mlcleafshapenum(mlcleafshapenum);
    enable_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPENUM);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPENUM, true);
}

//mlcleafyleafposlist
std::string RtMcphocommissionedunit::get_mlcleafyleafposlist() const { return m_pImp->get_mlcleafyleafposlist();}
void RtMcphocommissionedunit::set_mlcleafyleafposlist(const std::string& mlcleafyleafposlist)
{
    m_pImp->set_mlcleafyleafposlist(mlcleafyleafposlist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFYLEAFPOSLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFYLEAFPOSLIST, true);
}

//mlcleafthetalist
std::string RtMcphocommissionedunit::get_mlcleafthetalist() const { return m_pImp->get_mlcleafthetalist();}
void RtMcphocommissionedunit::set_mlcleafthetalist(const std::string& mlcleafthetalist)
{
    m_pImp->set_mlcleafthetalist(mlcleafthetalist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFTHETALIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFTHETALIST, true);
}

//mlcleafshapeidxlist
std::string RtMcphocommissionedunit::get_mlcleafshapeidxlist() const { return m_pImp->get_mlcleafshapeidxlist();}
void RtMcphocommissionedunit::set_mlcleafshapeidxlist(const std::string& mlcleafshapeidxlist)
{
    m_pImp->set_mlcleafshapeidxlist(mlcleafshapeidxlist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPEIDXLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MLCLEAFSHAPEIDXLIST, true);
}

//meanleaforishift
float RtMcphocommissionedunit::get_meanleaforishift() const { return m_pImp->get_meanleaforishift();}
void RtMcphocommissionedunit::set_meanleaforishift(const float& meanleaforishift)
{
    m_pImp->set_meanleaforishift(meanleaforishift);
    enable_field(MCPHOCOMMISSIONEDUNIT_MEANLEAFORISHIFT);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MEANLEAFORISHIFT, true);
}

//fringe
float RtMcphocommissionedunit::get_fringe() const { return m_pImp->get_fringe();}
void RtMcphocommissionedunit::set_fringe(const float& fringe)
{
    m_pImp->set_fringe(fringe);
    enable_field(MCPHOCOMMISSIONEDUNIT_FRINGE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_FRINGE, true);
}

//mcpholeafmaplist
std::string RtMcphocommissionedunit::get_mcpholeafmaplist() const { return m_pImp->get_mcpholeafmaplist();}
void RtMcphocommissionedunit::set_mcpholeafmaplist(const std::string& mcpholeafmaplist)
{
    m_pImp->set_mcpholeafmaplist(mcpholeafmaplist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOLEAFMAPLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOLEAFMAPLIST, true);
}

//mcphoparam1
std::string RtMcphocommissionedunit::get_mcphoparam1() const { return m_pImp->get_mcphoparam1();}
void RtMcphocommissionedunit::set_mcphoparam1(const std::string& mcphoparam1)
{
    m_pImp->set_mcphoparam1(mcphoparam1);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM1);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM1, true);
}

//mcphoparam2
std::string RtMcphocommissionedunit::get_mcphoparam2() const { return m_pImp->get_mcphoparam2();}
void RtMcphocommissionedunit::set_mcphoparam2(const std::string& mcphoparam2)
{
    m_pImp->set_mcphoparam2(mcphoparam2);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM2);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM2, true);
}

//mcphoparam3
std::string RtMcphocommissionedunit::get_mcphoparam3() const { return m_pImp->get_mcphoparam3();}
void RtMcphocommissionedunit::set_mcphoparam3(const std::string& mcphoparam3)
{
    m_pImp->set_mcphoparam3(mcphoparam3);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM3);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM3, true);
}

//mcphoparam4
std::string RtMcphocommissionedunit::get_mcphoparam4() const { return m_pImp->get_mcphoparam4();}
void RtMcphocommissionedunit::set_mcphoparam4(const std::string& mcphoparam4)
{
    m_pImp->set_mcphoparam4(mcphoparam4);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM4);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM4, true);
}

//mcphoparam5
std::string RtMcphocommissionedunit::get_mcphoparam5() const { return m_pImp->get_mcphoparam5();}
void RtMcphocommissionedunit::set_mcphoparam5(const std::string& mcphoparam5)
{
    m_pImp->set_mcphoparam5(mcphoparam5);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM5);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM5, true);
}

//mcphoparam6
std::string RtMcphocommissionedunit::get_mcphoparam6() const { return m_pImp->get_mcphoparam6();}
void RtMcphocommissionedunit::set_mcphoparam6(const std::string& mcphoparam6)
{
    m_pImp->set_mcphoparam6(mcphoparam6);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM6);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM6, true);
}

//mcphoparam7
std::string RtMcphocommissionedunit::get_mcphoparam7() const { return m_pImp->get_mcphoparam7();}
void RtMcphocommissionedunit::set_mcphoparam7(const std::string& mcphoparam7)
{
    m_pImp->set_mcphoparam7(mcphoparam7);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM7);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM7, true);
}

//mcphoparam8
std::string RtMcphocommissionedunit::get_mcphoparam8() const { return m_pImp->get_mcphoparam8();}
void RtMcphocommissionedunit::set_mcphoparam8(const std::string& mcphoparam8)
{
    m_pImp->set_mcphoparam8(mcphoparam8);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM8);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM8, true);
}

//mcphoparam9
std::string RtMcphocommissionedunit::get_mcphoparam9() const { return m_pImp->get_mcphoparam9();}
void RtMcphocommissionedunit::set_mcphoparam9(const std::string& mcphoparam9)
{
    m_pImp->set_mcphoparam9(mcphoparam9);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM9);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM9, true);
}

//mcphoparam10
std::string RtMcphocommissionedunit::get_mcphoparam10() const { return m_pImp->get_mcphoparam10();}
void RtMcphocommissionedunit::set_mcphoparam10(const std::string& mcphoparam10)
{
    m_pImp->set_mcphoparam10(mcphoparam10);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM10);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOPARAM10, true);
}

//mcprimaryenergystart
float RtMcphocommissionedunit::get_mcprimaryenergystart() const { return m_pImp->get_mcprimaryenergystart();}
void RtMcphocommissionedunit::set_mcprimaryenergystart(const float& mcprimaryenergystart)
{
    m_pImp->set_mcprimaryenergystart(mcprimaryenergystart);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYSTART);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYSTART, true);
}

//mcprimaryenergyend
float RtMcphocommissionedunit::get_mcprimaryenergyend() const { return m_pImp->get_mcprimaryenergyend();}
void RtMcphocommissionedunit::set_mcprimaryenergyend(const float& mcprimaryenergyend)
{
    m_pImp->set_mcprimaryenergyend(mcprimaryenergyend);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYEND);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYEND, true);
}

//mcprimaryenergybin
int RtMcphocommissionedunit::get_mcprimaryenergybin() const { return m_pImp->get_mcprimaryenergybin();}
void RtMcphocommissionedunit::set_mcprimaryenergybin(const int& mcprimaryenergybin)
{
    m_pImp->set_mcprimaryenergybin(mcprimaryenergybin);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYBIN);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYBIN, true);
}

//mcprimaryenergyrestart
float RtMcphocommissionedunit::get_mcprimaryenergyrestart() const { return m_pImp->get_mcprimaryenergyrestart();}
void RtMcphocommissionedunit::set_mcprimaryenergyrestart(const float& mcprimaryenergyrestart)
{
    m_pImp->set_mcprimaryenergyrestart(mcprimaryenergyrestart);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYRESTART);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYRESTART, true);
}

//mcsecondaryenergystart
float RtMcphocommissionedunit::get_mcsecondaryenergystart() const { return m_pImp->get_mcsecondaryenergystart();}
void RtMcphocommissionedunit::set_mcsecondaryenergystart(const float& mcsecondaryenergystart)
{
    m_pImp->set_mcsecondaryenergystart(mcsecondaryenergystart);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYSTART);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYSTART, true);
}

//mcsecondaryenergyend
float RtMcphocommissionedunit::get_mcsecondaryenergyend() const { return m_pImp->get_mcsecondaryenergyend();}
void RtMcphocommissionedunit::set_mcsecondaryenergyend(const float& mcsecondaryenergyend)
{
    m_pImp->set_mcsecondaryenergyend(mcsecondaryenergyend);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYEND);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYEND, true);
}

//mcsecondaryenergybin
int RtMcphocommissionedunit::get_mcsecondaryenergybin() const { return m_pImp->get_mcsecondaryenergybin();}
void RtMcphocommissionedunit::set_mcsecondaryenergybin(const int& mcsecondaryenergybin)
{
    m_pImp->set_mcsecondaryenergybin(mcsecondaryenergybin);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYBIN);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYBIN, true);
}

//mcsecondaryenergyrestart
float RtMcphocommissionedunit::get_mcsecondaryenergyrestart() const { return m_pImp->get_mcsecondaryenergyrestart();}
void RtMcphocommissionedunit::set_mcsecondaryenergyrestart(const float& mcsecondaryenergyrestart)
{
    m_pImp->set_mcsecondaryenergyrestart(mcsecondaryenergyrestart);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYRESTART);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYRESTART, true);
}

//mcelectronenergy
float RtMcphocommissionedunit::get_mcelectronenergy() const { return m_pImp->get_mcelectronenergy();}
void RtMcphocommissionedunit::set_mcelectronenergy(const float& mcelectronenergy)
{
    m_pImp->set_mcelectronenergy(mcelectronenergy);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCELECTRONENERGY);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCELECTRONENERGY, true);
}

//mccommiparticlenumber
long long RtMcphocommissionedunit::get_mccommiparticlenumber() const { return m_pImp->get_mccommiparticlenumber();}
void RtMcphocommissionedunit::set_mccommiparticlenumber(const long long& mccommiparticlenumber)
{
    m_pImp->set_mccommiparticlenumber(mccommiparticlenumber);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCCOMMIPARTICLENUMBER);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCCOMMIPARTICLENUMBER, true);
}

//mcprimaryenergylist
std::string RtMcphocommissionedunit::get_mcprimaryenergylist() const { return m_pImp->get_mcprimaryenergylist();}
void RtMcphocommissionedunit::set_mcprimaryenergylist(const std::string& mcprimaryenergylist)
{
    m_pImp->set_mcprimaryenergylist(mcprimaryenergylist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYENERGYLIST, true);
}

//mcprimaryweightlist
std::string RtMcphocommissionedunit::get_mcprimaryweightlist() const { return m_pImp->get_mcprimaryweightlist();}
void RtMcphocommissionedunit::set_mcprimaryweightlist(const std::string& mcprimaryweightlist)
{
    m_pImp->set_mcprimaryweightlist(mcprimaryweightlist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYWEIGHTLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYWEIGHTLIST, true);
}

//mcsecondaryenergylist
std::string RtMcphocommissionedunit::get_mcsecondaryenergylist() const { return m_pImp->get_mcsecondaryenergylist();}
void RtMcphocommissionedunit::set_mcsecondaryenergylist(const std::string& mcsecondaryenergylist)
{
    m_pImp->set_mcsecondaryenergylist(mcsecondaryenergylist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYENERGYLIST, true);
}

//mcsecondaryweightlist
std::string RtMcphocommissionedunit::get_mcsecondaryweightlist() const { return m_pImp->get_mcsecondaryweightlist();}
void RtMcphocommissionedunit::set_mcsecondaryweightlist(const std::string& mcsecondaryweightlist)
{
    m_pImp->set_mcsecondaryweightlist(mcsecondaryweightlist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYWEIGHTLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYWEIGHTLIST, true);
}

//mcelecenergylist
std::string RtMcphocommissionedunit::get_mcelecenergylist() const { return m_pImp->get_mcelecenergylist();}
void RtMcphocommissionedunit::set_mcelecenergylist(const std::string& mcelecenergylist)
{
    m_pImp->set_mcelecenergylist(mcelecenergylist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCELECENERGYLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCELECENERGYLIST, true);
}

//mcelecweightlist
std::string RtMcphocommissionedunit::get_mcelecweightlist() const { return m_pImp->get_mcelecweightlist();}
void RtMcphocommissionedunit::set_mcelecweightlist(const std::string& mcelecweightlist)
{
    m_pImp->set_mcelecweightlist(mcelecweightlist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCELECWEIGHTLIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCELECWEIGHTLIST, true);
}

//mcprimaryflatfilterdist
float RtMcphocommissionedunit::get_mcprimaryflatfilterdist() const { return m_pImp->get_mcprimaryflatfilterdist();}
void RtMcphocommissionedunit::set_mcprimaryflatfilterdist(const float& mcprimaryflatfilterdist)
{
    m_pImp->set_mcprimaryflatfilterdist(mcprimaryflatfilterdist);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYFLATFILTERDIST);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYFLATFILTERDIST, true);
}

//mcprimaryjawdistance
float RtMcphocommissionedunit::get_mcprimaryjawdistance() const { return m_pImp->get_mcprimaryjawdistance();}
void RtMcphocommissionedunit::set_mcprimaryjawdistance(const float& mcprimaryjawdistance)
{
    m_pImp->set_mcprimaryjawdistance(mcprimaryjawdistance);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYJAWDISTANCE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYJAWDISTANCE, true);
}

//mcsourcesigmaprimary
float RtMcphocommissionedunit::get_mcsourcesigmaprimary() const { return m_pImp->get_mcsourcesigmaprimary();}
void RtMcphocommissionedunit::set_mcsourcesigmaprimary(const float& mcsourcesigmaprimary)
{
    m_pImp->set_mcsourcesigmaprimary(mcsourcesigmaprimary);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMAPRIMARY);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMAPRIMARY, true);
}

//mcsourcesigmasecondary
float RtMcphocommissionedunit::get_mcsourcesigmasecondary() const { return m_pImp->get_mcsourcesigmasecondary();}
void RtMcphocommissionedunit::set_mcsourcesigmasecondary(const float& mcsourcesigmasecondary)
{
    m_pImp->set_mcsourcesigmasecondary(mcsourcesigmasecondary);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMASECONDARY);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSOURCESIGMASECONDARY, true);
}

//mcprimarysoftening
bool RtMcphocommissionedunit::get_mcprimarysoftening() const { return m_pImp->get_mcprimarysoftening();}
void RtMcphocommissionedunit::set_mcprimarysoftening(const bool& mcprimarysoftening)
{
    m_pImp->set_mcprimarysoftening(mcprimarysoftening);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYSOFTENING);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPRIMARYSOFTENING, true);
}

//mcsofteningtunningf
float RtMcphocommissionedunit::get_mcsofteningtunningf() const { return m_pImp->get_mcsofteningtunningf();}
void RtMcphocommissionedunit::set_mcsofteningtunningf(const float& mcsofteningtunningf)
{
    m_pImp->set_mcsofteningtunningf(mcsofteningtunningf);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSOFTENINGTUNNINGF);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSOFTENINGTUNNINGF, true);
}

//mcscatteringcompton
bool RtMcphocommissionedunit::get_mcscatteringcompton() const { return m_pImp->get_mcscatteringcompton();}
void RtMcphocommissionedunit::set_mcscatteringcompton(const bool& mcscatteringcompton)
{
    m_pImp->set_mcscatteringcompton(mcscatteringcompton);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSCATTERINGCOMPTON);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSCATTERINGCOMPTON, true);
}

//mcsecondarysourcetype
int RtMcphocommissionedunit::get_mcsecondarysourcetype() const { return m_pImp->get_mcsecondarysourcetype();}
void RtMcphocommissionedunit::set_mcsecondarysourcetype(const int& mcsecondarysourcetype)
{
    m_pImp->set_mcsecondarysourcetype(mcsecondarysourcetype);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCETYPE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCETYPE, true);
}

//mcsecondarysourcepara
std::string RtMcphocommissionedunit::get_mcsecondarysourcepara() const { return m_pImp->get_mcsecondarysourcepara();}
void RtMcphocommissionedunit::set_mcsecondarysourcepara(const std::string& mcsecondarysourcepara)
{
    m_pImp->set_mcsecondarysourcepara(mcsecondarysourcepara);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCEPARA);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCSECONDARYSOURCEPARA, true);
}

//mceleccorfieldsize
std::string RtMcphocommissionedunit::get_mceleccorfieldsize() const { return m_pImp->get_mceleccorfieldsize();}
void RtMcphocommissionedunit::set_mceleccorfieldsize(const std::string& mceleccorfieldsize)
{
    m_pImp->set_mceleccorfieldsize(mceleccorfieldsize);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCELECCORFIELDSIZE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCELECCORFIELDSIZE, true);
}

//mcphotonfluence
std::string RtMcphocommissionedunit::get_mcphotonfluence() const { return m_pImp->get_mcphotonfluence();}
void RtMcphocommissionedunit::set_mcphotonfluence(const std::string& mcphotonfluence)
{
    m_pImp->set_mcphotonfluence(mcphotonfluence);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCPHOTONFLUENCE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCPHOTONFLUENCE, true);
}

//mcrectanglescacor
float RtMcphocommissionedunit::get_mcrectanglescacor() const { return m_pImp->get_mcrectanglescacor();}
void RtMcphocommissionedunit::set_mcrectanglescacor(const float& mcrectanglescacor)
{
    m_pImp->set_mcrectanglescacor(mcrectanglescacor);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCRECTANGLESCACOR);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCRECTANGLESCACOR, true);
}

//mclargefieldtailcor
float RtMcphocommissionedunit::get_mclargefieldtailcor() const { return m_pImp->get_mclargefieldtailcor();}
void RtMcphocommissionedunit::set_mclargefieldtailcor(const float& mclargefieldtailcor)
{
    m_pImp->set_mclargefieldtailcor(mclargefieldtailcor);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCLARGEFIELDTAILCOR);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCLARGEFIELDTAILCOR, true);
}

//mcmlcleakage
float RtMcphocommissionedunit::get_mcmlcleakage() const { return m_pImp->get_mcmlcleakage();}
void RtMcphocommissionedunit::set_mcmlcleakage(const float& mcmlcleakage)
{
    m_pImp->set_mcmlcleakage(mcmlcleakage);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCMLCLEAKAGE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCMLCLEAKAGE, true);
}

//mcgaussianblurswitch
bool RtMcphocommissionedunit::get_mcgaussianblurswitch() const { return m_pImp->get_mcgaussianblurswitch();}
void RtMcphocommissionedunit::set_mcgaussianblurswitch(const bool& mcgaussianblurswitch)
{
    m_pImp->set_mcgaussianblurswitch(mcgaussianblurswitch);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANBLURSWITCH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANBLURSWITCH, true);
}

//mcgaussiansigmax
float RtMcphocommissionedunit::get_mcgaussiansigmax() const { return m_pImp->get_mcgaussiansigmax();}
void RtMcphocommissionedunit::set_mcgaussiansigmax(const float& mcgaussiansigmax)
{
    m_pImp->set_mcgaussiansigmax(mcgaussiansigmax);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAX);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAX, true);
}

//mcgaussiansigmay
float RtMcphocommissionedunit::get_mcgaussiansigmay() const { return m_pImp->get_mcgaussiansigmay();}
void RtMcphocommissionedunit::set_mcgaussiansigmay(const float& mcgaussiansigmay)
{
    m_pImp->set_mcgaussiansigmay(mcgaussiansigmay);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAY);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCGAUSSIANSIGMAY, true);
}

//crc
std::string RtMcphocommissionedunit::get_crc() const { return m_pImp->get_crc();}
void RtMcphocommissionedunit::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(MCPHOCOMMISSIONEDUNIT_CRC);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_CRC, true);
}

//updatetime
DATETIME_BOOST RtMcphocommissionedunit::get_updatetime() const { return m_pImp->get_updatetime();}
void RtMcphocommissionedunit::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(MCPHOCOMMISSIONEDUNIT_UPDATETIME);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_UPDATETIME, true);
}

//mcjawleakage
float RtMcphocommissionedunit::get_mcjawleakage() const { return m_pImp->get_mcjawleakage();}
void RtMcphocommissionedunit::set_mcjawleakage(const float& mcjawleakage)
{
    m_pImp->set_mcjawleakage(mcjawleakage);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCJAWLEAKAGE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCJAWLEAKAGE, true);
}

//mctonguewidth
float RtMcphocommissionedunit::get_mctonguewidth() const { return m_pImp->get_mctonguewidth();}
void RtMcphocommissionedunit::set_mctonguewidth(const float& mctonguewidth)
{
    m_pImp->set_mctonguewidth(mctonguewidth);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCTONGUEWIDTH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCTONGUEWIDTH, true);
}

//mcgroovewidth
float RtMcphocommissionedunit::get_mcgroovewidth() const { return m_pImp->get_mcgroovewidth();}
void RtMcphocommissionedunit::set_mcgroovewidth(const float& mcgroovewidth)
{
    m_pImp->set_mcgroovewidth(mcgroovewidth);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCGROOVEWIDTH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCGROOVEWIDTH, true);
}

//mcleaftipwidth
float RtMcphocommissionedunit::get_mcleaftipwidth() const { return m_pImp->get_mcleaftipwidth();}
void RtMcphocommissionedunit::set_mcleaftipwidth(const float& mcleaftipwidth)
{
    m_pImp->set_mcleaftipwidth(mcleaftipwidth);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCLEAFTIPWIDTH);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCLEAFTIPWIDTH, true);
}

//mctransmission
float RtMcphocommissionedunit::get_mctransmission() const { return m_pImp->get_mctransmission();}
void RtMcphocommissionedunit::set_mctransmission(const float& mctransmission)
{
    m_pImp->set_mctransmission(mctransmission);
    enable_field(MCPHOCOMMISSIONEDUNIT_MCTRANSMISSION);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_MCTRANSMISSION, true);
}

//reserve
std::string RtMcphocommissionedunit::get_reserve() const { return m_pImp->get_reserve();}
void RtMcphocommissionedunit::set_reserve(const std::string& reserve)
{
    m_pImp->set_reserve(reserve);
    enable_field(MCPHOCOMMISSIONEDUNIT_RESERVE);
    setdirty_field(MCPHOCOMMISSIONEDUNIT_RESERVE, true);
}

RT_TPS_DATABASE_END_NAMESPACE