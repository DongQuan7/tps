//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_contour.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/30/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_contour.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtContourImp::RtContourImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_voiuid(""),
    m_segmentuid(""),
    m_imageuid(""),
    m_accessorychunkuid(""),
    m_sliceindex(0),
    m_accuracy(0),
    m_iscollimatedoutline(false),
    m_contourgeometrictype(0),
    m_thickness(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtContourImp::RtContourImp(const RtContourImp& contour):
    m_uid(contour.get_uid()),
    m_voiuid(contour.get_voiuid()),
    m_segmentuid(contour.get_segmentuid()),
    m_imageuid(contour.get_imageuid()),
    m_accessorychunkuid(contour.get_accessorychunkuid()),
    m_sliceindex(contour.get_sliceindex()),
    m_accuracy(contour.get_accuracy()),
    m_iscollimatedoutline(contour.get_iscollimatedoutline()),
    m_contourgeometrictype(contour.get_contourgeometrictype()),
    m_thickness(contour.get_thickness()),
    m_updatetime(contour.get_updatetime())
{
    m_contour_points = contour.get_contour_points();
}

RtContourImp& RtContourImp::operator=(const RtContourImp& contour)
{
    if (this != &contour){
        this->m_uid = contour.get_uid();
        this->m_voiuid = contour.get_voiuid();
        this->m_segmentuid = contour.get_segmentuid();
        this->m_imageuid = contour.get_imageuid();
        this->m_accessorychunkuid = contour.get_accessorychunkuid();
        this->m_sliceindex = contour.get_sliceindex();
        this->m_accuracy = contour.get_accuracy();
        this->m_iscollimatedoutline = contour.get_iscollimatedoutline();
        this->m_contourgeometrictype = contour.get_contourgeometrictype();
        this->m_thickness = contour.get_thickness();
        this->m_updatetime = contour.get_updatetime();
        this->m_contour_points = contour.get_contour_points();
    }
    return *this;
}

RtContourImp::~RtContourImp()
{
	this->m_contour_points.clear();
}


//////////////////////////////////////////////////////////////////////////
RtContour::RtContour(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtContourImp(bGeneraterUid);
    set_flags(CONTOUR_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_CONTOUR_FIELD_NULL);
    set_contourgeometrictype(RtDbDef::ContourType_Closed_Planar);
}

RtContour::RtContour(const RtContour& contour): RtDatabaseObject(contour),
   m_pImp(new RtContourImp(*contour.m_pImp))
{
}

RtContour& RtContour::operator = (const RtContour& contour)
{
    if(this != &contour)
    {
        RtDatabaseObject::operator=(contour);
        *this->m_pImp = *contour.m_pImp;
    }
    return *this;
}

RtContour::~RtContour()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtContour::get_uid() const { return m_pImp->get_uid();}
void RtContour::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(CONTOUR_UID);
    setdirty_field(CONTOUR_UID, true);
}

//voiuid
std::string RtContour::get_voiuid() const { return m_pImp->get_voiuid();}
void RtContour::set_voiuid(const std::string& voiuid)
{
    m_pImp->set_voiuid(voiuid);
    enable_field(CONTOUR_VOIUID);
    setdirty_field(CONTOUR_VOIUID, true);
}

//segmentuid
std::string RtContour::get_segmentuid() const { return m_pImp->get_segmentuid();}
void RtContour::set_segmentuid(const std::string& segmentuid)
{
    m_pImp->set_segmentuid(segmentuid);
    enable_field(CONTOUR_SEGMENTUID);
    setdirty_field(CONTOUR_SEGMENTUID, true);
}

//imageuid
std::string RtContour::get_imageuid() const { return m_pImp->get_imageuid();}
void RtContour::set_imageuid(const std::string& imageuid)
{
    m_pImp->set_imageuid(imageuid);
    enable_field(CONTOUR_IMAGEUID);
    setdirty_field(CONTOUR_IMAGEUID, true);
}

//accessorychunkuid
std::string RtContour::get_accessorychunkuid() const { return m_pImp->get_accessorychunkuid();}
void RtContour::set_accessorychunkuid(const std::string& accessorychunkuid)
{
    m_pImp->set_accessorychunkuid(accessorychunkuid);
    enable_field(CONTOUR_ACCESSORYCHUNKUID);
    setdirty_field(CONTOUR_ACCESSORYCHUNKUID, true);
}

//sliceindex
int RtContour::get_sliceindex() const { return m_pImp->get_sliceindex();}
void RtContour::set_sliceindex(const int& sliceindex)
{
    m_pImp->set_sliceindex(sliceindex);
    enable_field(CONTOUR_SLICEINDEX);
    setdirty_field(CONTOUR_SLICEINDEX, true);
}

//accuracy
int RtContour::get_accuracy() const { return m_pImp->get_accuracy();}
void RtContour::set_accuracy(const int& accuracy)
{
    m_pImp->set_accuracy(accuracy);
    enable_field(CONTOUR_ACCURACY);
    setdirty_field(CONTOUR_ACCURACY, true);
}

//points
std::vector<db_Point3f> RtContour::get_contour_points() { return m_pImp->get_contour_points();}
std::vector<db_Point3f> RtContour::get_contour_points() const { return m_pImp->get_contour_points();}
void RtContour::set_contour_points(const std::vector<db_Point3f>& vPoints) 
{
    m_pImp->set_contour_points(vPoints);
    enable_field(CONTOUR_POINTS);
    setdirty_field(CONTOUR_POINTS, true);
}

//iscollimatedoutline
bool RtContour::get_iscollimatedoutline() const { return m_pImp->get_iscollimatedoutline();}
void RtContour::set_iscollimatedoutline(const bool& iscollimatedoutline)
{
    m_pImp->set_iscollimatedoutline(iscollimatedoutline);
    enable_field(CONTOUR_ISCOLLIMATEDOUTLINE);
    setdirty_field(CONTOUR_ISCOLLIMATEDOUTLINE, true);
}

//contourgeometrictype
int RtContour::get_contourgeometrictype() const { return m_pImp->get_contourgeometrictype();}
void RtContour::set_contourgeometrictype(const int& contourgeometrictype)
{
    m_pImp->set_contourgeometrictype(contourgeometrictype);
    enable_field(CONTOUR_CONTOURGEOMETRICTYPE);
    setdirty_field(CONTOUR_CONTOURGEOMETRICTYPE, true);
}

//thickness
float RtContour::get_thickness() const { return m_pImp->get_thickness();}
void RtContour::set_thickness(const float& thickness)
{
    m_pImp->set_thickness(thickness);
    enable_field(CONTOUR_THICKNESS);
    setdirty_field(CONTOUR_THICKNESS, true);
}

//updatetime
DATETIME_BOOST RtContour::get_updatetime() const { return m_pImp->get_updatetime();}
void RtContour::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(CONTOUR_UPDATETIME);
    setdirty_field(CONTOUR_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE