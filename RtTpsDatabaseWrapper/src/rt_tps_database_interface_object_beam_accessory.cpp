//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2015
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_beam_accessory.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016/1/26 10:42:55
///
///  \version 1.0
///  \date    1/27/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_beam_accessory.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtBeam_accessoryImp::RtBeam_accessoryImp():
    m_beamuid(""),
    m_accessoryuid(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
}

RtBeam_accessoryImp::RtBeam_accessoryImp(const RtBeam_accessoryImp& beam_accessory):
    m_beamuid(beam_accessory.get_beamuid()),
    m_accessoryuid(beam_accessory.get_accessoryuid()),
    m_updatetime(beam_accessory.get_updatetime())
{
}

RtBeam_accessoryImp& RtBeam_accessoryImp::operator=(const RtBeam_accessoryImp& beam_accessory)
{
    if (this != &beam_accessory){
        this->m_beamuid = beam_accessory.get_beamuid();
        this->m_accessoryuid = beam_accessory.get_accessoryuid();
        this->m_updatetime = beam_accessory.get_updatetime();
    }
    return *this;
}

RtBeam_accessoryImp::~RtBeam_accessoryImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtBeam_accessory::RtBeam_accessory()
{
    m_pImp = new RtBeam_accessoryImp();
}

RtBeam_accessory::RtBeam_accessory(const RtBeam_accessory& beam_accessory):
   m_pImp(new RtBeam_accessoryImp(*beam_accessory.m_pImp))
{
}

RtBeam_accessory& RtBeam_accessory::operator = (const RtBeam_accessory& beam_accessory)
{
    if(this != &beam_accessory) *this->m_pImp = *beam_accessory.m_pImp;
    return *this;
}

RtBeam_accessory::~RtBeam_accessory()
{
    DEL_PTR(m_pImp);
}

//beamuid
std::string RtBeam_accessory::get_beamuid() const { return m_pImp->get_beamuid();}
void RtBeam_accessory::set_beamuid(const std::string& beamuid) { m_pImp->set_beamuid(beamuid);}

//accessoryuid
std::string RtBeam_accessory::get_accessoryuid() const { return m_pImp->get_accessoryuid();}
void RtBeam_accessory::set_accessoryuid(const std::string& accessoryuid) { m_pImp->set_accessoryuid(accessoryuid);}

//updatetime
DATETIME_BOOST RtBeam_accessory::get_updatetime() const { return m_pImp->get_updatetime();}
void RtBeam_accessory::set_updatetime(const DATETIME_BOOST& updatetime) { m_pImp->set_updatetime(updatetime);}

RT_TPS_DATABASE_END_NAMESPACE