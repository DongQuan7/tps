//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_normgroup.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.5
///
///  \version 1.0
///  \date    4/18/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_normgroup.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_dosegrid.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtNormgroupImp::RtNormgroupImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_planuid(""),
    m_normalpointpoiuid(""),
    m_tpsequipmentuid(""),
    m_machineuid(""),
    m_voiuid(""),
    m_optsettinguid(""),
    m_prescriptionuid(""),
    m_plantype(0),
    m_name(""),
    m_planlabel(""),
    m_plandate(boost::date_time::not_a_date_time),
    m_plantime(boost::date_time::not_a_date_time),
    m_doseperfraction(0.),
    m_fraction(0),
    m_percentage(0.f),
    m_rtplangeometry(0),
    m_isjoined(false),
    m_radiationtype(0),
    m_estimatedtime(boost::date_time::not_a_date_time),
    m_description(""),
    m_isnorm2voi(false),
    m_isnorm2voimeandose(false),
    m_normvoipercentagevolume(0.f),
    m_tpsverno(0),
    m_tmsverno(0),
    m_isgating(false),
    m_binmode(0),
    m_beamonrangestart(0.),
    m_beamonrangeend(0.),
    m_updatetime(boost::date_time::not_a_date_time),
    m_operatorid("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
    m_dosegrid = new RtDosegrid(bGeneraterUid);
}

RtNormgroupImp::RtNormgroupImp(const RtNormgroupImp& normgroup):
    m_uid(normgroup.get_uid()),
    m_planuid(normgroup.get_planuid()),
    m_normalpointpoiuid(normgroup.get_normalpointpoiuid()),
    m_tpsequipmentuid(normgroup.get_tpsequipmentuid()),
    m_machineuid(normgroup.get_machineuid()),
    m_voiuid(normgroup.get_voiuid()),
    m_optsettinguid(normgroup.get_optsettinguid()),
    m_prescriptionuid(normgroup.get_prescriptionuid()),
    m_plantype(normgroup.get_plantype()),
    m_name(normgroup.get_name()),
    m_planlabel(normgroup.get_planlabel()),
    m_plandate(normgroup.get_plandate()),
    m_plantime(normgroup.get_plantime()),
    m_doseperfraction(normgroup.get_doseperfraction()),
    m_fraction(normgroup.get_fraction()),
    m_percentage(normgroup.get_percentage()),
    m_rtplangeometry(normgroup.get_rtplangeometry()),
    m_isjoined(normgroup.get_isjoined()),
    m_radiationtype(normgroup.get_radiationtype()),
    m_estimatedtime(normgroup.get_estimatedtime()),
    m_description(normgroup.get_description()),
    m_isnorm2voi(normgroup.get_isnorm2voi()),
    m_isnorm2voimeandose(normgroup.get_isnorm2voimeandose()),
    m_normvoipercentagevolume(normgroup.get_normvoipercentagevolume()),
    m_tpsverno(normgroup.get_tpsverno()),
    m_tmsverno(normgroup.get_tmsverno()),
    m_isgating(normgroup.get_isgating()),
    m_binmode(normgroup.get_binmode()),
    m_beamonrangestart(normgroup.get_beamonrangestart()),
    m_beamonrangeend(normgroup.get_beamonrangeend()),
    m_updatetime(normgroup.get_updatetime()),
    m_operatorid(normgroup.get_operatorid())
{
    m_dosegrid = new RtDosegrid(*normgroup.get_dosegrid());
}

RtNormgroupImp& RtNormgroupImp::operator=(const RtNormgroupImp& normgroup)
{
    if (this != &normgroup){
        this->m_uid = normgroup.get_uid();
        this->m_planuid = normgroup.get_planuid();
        this->m_normalpointpoiuid = normgroup.get_normalpointpoiuid();
        this->m_tpsequipmentuid = normgroup.get_tpsequipmentuid();
        this->m_machineuid = normgroup.get_machineuid();
        this->m_voiuid = normgroup.get_voiuid();
        this->m_optsettinguid = normgroup.get_optsettinguid();
        this->m_prescriptionuid = normgroup.get_prescriptionuid();
        this->m_plantype = normgroup.get_plantype();
        this->m_name = normgroup.get_name();
        this->m_planlabel = normgroup.get_planlabel();
        this->m_plandate = normgroup.get_plandate();
        this->m_plantime = normgroup.get_plantime();
        this->m_doseperfraction = normgroup.get_doseperfraction();
        this->m_fraction = normgroup.get_fraction();
        this->m_percentage = normgroup.get_percentage();
        this->m_rtplangeometry = normgroup.get_rtplangeometry();
        this->m_isjoined = normgroup.get_isjoined();
        this->m_radiationtype = normgroup.get_radiationtype();
        this->m_estimatedtime = normgroup.get_estimatedtime();
        this->m_description = normgroup.get_description();
        this->m_isnorm2voi = normgroup.get_isnorm2voi();
        this->m_isnorm2voimeandose = normgroup.get_isnorm2voimeandose();
        this->m_normvoipercentagevolume = normgroup.get_normvoipercentagevolume();
        this->m_tpsverno = normgroup.get_tpsverno();
        this->m_tmsverno = normgroup.get_tmsverno();
        this->m_isgating = normgroup.get_isgating();
        this->m_binmode = normgroup.get_binmode();
        this->m_beamonrangestart = normgroup.get_beamonrangestart();
        this->m_beamonrangeend = normgroup.get_beamonrangeend();
        this->m_updatetime = normgroup.get_updatetime();
        this->m_operatorid = normgroup.get_operatorid();
        this->m_dosegrid = new RtDosegrid(*normgroup.get_dosegrid());
    }
    return *this;
}

RtNormgroupImp::~RtNormgroupImp()
{
    DEL_PTR(m_dosegrid);
}

RtDosegrid* RtNormgroupImp::get_dosegrid() const {return m_dosegrid;}

//////////////////////////////////////////////////////////////////////////
RtNormgroup::RtNormgroup(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtNormgroupImp(bGeneraterUid);
    set_flags(NORMGROUP_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_NORMGROUP_FIELD_NULL);
}

RtNormgroup::RtNormgroup(const RtNormgroup& normgroup): RtDatabaseObject(normgroup),
   m_pImp(new RtNormgroupImp(*normgroup.m_pImp))
{
}

RtNormgroup& RtNormgroup::operator = (const RtNormgroup& normgroup)
{
    if(this != &normgroup)
    {
        RtDatabaseObject::operator=(normgroup);
        *this->m_pImp = *normgroup.m_pImp;
    }
    return *this;
}

RtNormgroup::~RtNormgroup()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtNormgroup::get_uid() const { return m_pImp->get_uid();}
void RtNormgroup::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(NORMGROUP_UID);
    setdirty_field(NORMGROUP_UID, true);
}

//planuid
std::string RtNormgroup::get_planuid() const { return m_pImp->get_planuid();}
void RtNormgroup::set_planuid(const std::string& planuid)
{
    m_pImp->set_planuid(planuid);
    enable_field(NORMGROUP_PLANUID);
    setdirty_field(NORMGROUP_PLANUID, true);
}

//normalpointpoiuid
std::string RtNormgroup::get_normalpointpoiuid() const { return m_pImp->get_normalpointpoiuid();}
void RtNormgroup::set_normalpointpoiuid(const std::string& normalpointpoiuid)
{
    m_pImp->set_normalpointpoiuid(normalpointpoiuid);
    enable_field(NORMGROUP_NORMALPOINTPOIUID);
    setdirty_field(NORMGROUP_NORMALPOINTPOIUID, true);
}

//tpsequipmentuid
std::string RtNormgroup::get_tpsequipmentuid() const { return m_pImp->get_tpsequipmentuid();}
void RtNormgroup::set_tpsequipmentuid(const std::string& tpsequipmentuid)
{
    m_pImp->set_tpsequipmentuid(tpsequipmentuid);
    enable_field(NORMGROUP_TPSEQUIPMENTUID);
    setdirty_field(NORMGROUP_TPSEQUIPMENTUID, true);
}

//machineuid
std::string RtNormgroup::get_machineuid() const { return m_pImp->get_machineuid();}
void RtNormgroup::set_machineuid(const std::string& machineuid)
{
    m_pImp->set_machineuid(machineuid);
    enable_field(NORMGROUP_MACHINEUID);
    setdirty_field(NORMGROUP_MACHINEUID, true);
}

//voiuid
std::string RtNormgroup::get_voiuid() const { return m_pImp->get_voiuid();}
void RtNormgroup::set_voiuid(const std::string& voiuid)
{
    m_pImp->set_voiuid(voiuid);
    enable_field(NORMGROUP_VOIUID);
    setdirty_field(NORMGROUP_VOIUID, true);
}

//optsettinguid
std::string RtNormgroup::get_optsettinguid() const { return m_pImp->get_optsettinguid();}
void RtNormgroup::set_optsettinguid(const std::string& optsettinguid)
{
    m_pImp->set_optsettinguid(optsettinguid);
    enable_field(NORMGROUP_OPTSETTINGUID);
    setdirty_field(NORMGROUP_OPTSETTINGUID, true);
}

//prescriptionuid
std::string RtNormgroup::get_prescriptionuid() const { return m_pImp->get_prescriptionuid();}
void RtNormgroup::set_prescriptionuid(const std::string& prescriptionuid)
{
    m_pImp->set_prescriptionuid(prescriptionuid);
    enable_field(NORMGROUP_PRESCRIPTIONUID);
    setdirty_field(NORMGROUP_PRESCRIPTIONUID, true);
}

//plantype
int RtNormgroup::get_plantype() const { return m_pImp->get_plantype();}
void RtNormgroup::set_plantype(const int& plantype)
{
    m_pImp->set_plantype(plantype);
    enable_field(NORMGROUP_PLANTYPE);
    setdirty_field(NORMGROUP_PLANTYPE, true);
}

//name
std::string RtNormgroup::get_name() const { return m_pImp->get_name();}
void RtNormgroup::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(NORMGROUP_NAME);
    setdirty_field(NORMGROUP_NAME, true);
}

//planlabel
std::string RtNormgroup::get_planlabel() const { return m_pImp->get_planlabel();}
void RtNormgroup::set_planlabel(const std::string& planlabel)
{
    m_pImp->set_planlabel(planlabel);
    enable_field(NORMGROUP_PLANLABEL);
    setdirty_field(NORMGROUP_PLANLABEL, true);
}

//plandate
DATE_BOOST RtNormgroup::get_plandate() const { return m_pImp->get_plandate();}
void RtNormgroup::set_plandate(const DATE_BOOST& plandate)
{
    m_pImp->set_plandate(plandate);
    enable_field(NORMGROUP_PLANDATE);
    setdirty_field(NORMGROUP_PLANDATE, true);
}

//plantime
TIME_BOOST RtNormgroup::get_plantime() const { return m_pImp->get_plantime();}
void RtNormgroup::set_plantime(const TIME_BOOST& plantime)
{
    m_pImp->set_plantime(plantime);
    enable_field(NORMGROUP_PLANTIME);
    setdirty_field(NORMGROUP_PLANTIME, true);
}

//doseperfraction
double RtNormgroup::get_doseperfraction() const { return m_pImp->get_doseperfraction();}
void RtNormgroup::set_doseperfraction(const double& doseperfraction)
{
    m_pImp->set_doseperfraction(doseperfraction);
    enable_field(NORMGROUP_DOSEPERFRACTION);
    setdirty_field(NORMGROUP_DOSEPERFRACTION, true);
}

//fraction
int RtNormgroup::get_fraction() const { return m_pImp->get_fraction();}
void RtNormgroup::set_fraction(const int& fraction)
{
    m_pImp->set_fraction(fraction);
    enable_field(NORMGROUP_FRACTION);
    setdirty_field(NORMGROUP_FRACTION, true);
}

//percentage
float RtNormgroup::get_percentage() const { return m_pImp->get_percentage();}
void RtNormgroup::set_percentage(const float& percentage)
{
    m_pImp->set_percentage(percentage);
    enable_field(NORMGROUP_PERCENTAGE);
    setdirty_field(NORMGROUP_PERCENTAGE, true);
}

//rtplangeometry
int RtNormgroup::get_rtplangeometry() const { return m_pImp->get_rtplangeometry();}
void RtNormgroup::set_rtplangeometry(const int& rtplangeometry)
{
    m_pImp->set_rtplangeometry(rtplangeometry);
    enable_field(NORMGROUP_RTPLANGEOMETRY);
    setdirty_field(NORMGROUP_RTPLANGEOMETRY, true);
}

//isjoined
bool RtNormgroup::get_isjoined() const { return m_pImp->get_isjoined();}
void RtNormgroup::set_isjoined(const bool& isjoined)
{
    m_pImp->set_isjoined(isjoined);
    enable_field(NORMGROUP_ISJOINED);
    setdirty_field(NORMGROUP_ISJOINED, true);
}

//radiationtype
int RtNormgroup::get_radiationtype() const { return m_pImp->get_radiationtype();}
void RtNormgroup::set_radiationtype(const int& radiationtype)
{
    m_pImp->set_radiationtype(radiationtype);
    enable_field(NORMGROUP_RADIATIONTYPE);
    setdirty_field(NORMGROUP_RADIATIONTYPE, true);
}

//estimatedtime
TIME_BOOST RtNormgroup::get_estimatedtime() const { return m_pImp->get_estimatedtime();}
void RtNormgroup::set_estimatedtime(const TIME_BOOST& estimatedtime)
{
    m_pImp->set_estimatedtime(estimatedtime);
    enable_field(NORMGROUP_ESTIMATEDTIME);
    setdirty_field(NORMGROUP_ESTIMATEDTIME, true);
}

//description
std::string RtNormgroup::get_description() const { return m_pImp->get_description();}
void RtNormgroup::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(NORMGROUP_DESCRIPTION);
    setdirty_field(NORMGROUP_DESCRIPTION, true);
}

//isnorm2voi
bool RtNormgroup::get_isnorm2voi() const { return m_pImp->get_isnorm2voi();}
void RtNormgroup::set_isnorm2voi(const bool& isnorm2voi)
{
    m_pImp->set_isnorm2voi(isnorm2voi);
    enable_field(NORMGROUP_ISNORM2VOI);
    setdirty_field(NORMGROUP_ISNORM2VOI, true);
}

//isnorm2voimeandose
bool RtNormgroup::get_isnorm2voimeandose() const { return m_pImp->get_isnorm2voimeandose();}
void RtNormgroup::set_isnorm2voimeandose(const bool& isnorm2voimeandose)
{
    m_pImp->set_isnorm2voimeandose(isnorm2voimeandose);
    enable_field(NORMGROUP_ISNORM2VOIMEANDOSE);
    setdirty_field(NORMGROUP_ISNORM2VOIMEANDOSE, true);
}

//normvoipercentagevolume
float RtNormgroup::get_normvoipercentagevolume() const { return m_pImp->get_normvoipercentagevolume();}
void RtNormgroup::set_normvoipercentagevolume(const float& normvoipercentagevolume)
{
    m_pImp->set_normvoipercentagevolume(normvoipercentagevolume);
    enable_field(NORMGROUP_NORMVOIPERCENTAGEVOLUME);
    setdirty_field(NORMGROUP_NORMVOIPERCENTAGEVOLUME, true);
}

//tpsverno
int RtNormgroup::get_tpsverno() const { return m_pImp->get_tpsverno();}
void RtNormgroup::set_tpsverno(const int& tpsverno)
{
    m_pImp->set_tpsverno(tpsverno);
    enable_field(NORMGROUP_TPSVERNO);
    setdirty_field(NORMGROUP_TPSVERNO, true);
}

//tmsverno
int RtNormgroup::get_tmsverno() const { return m_pImp->get_tmsverno();}
void RtNormgroup::set_tmsverno(const int& tmsverno)
{
    m_pImp->set_tmsverno(tmsverno);
    enable_field(NORMGROUP_TMSVERNO);
    setdirty_field(NORMGROUP_TMSVERNO, true);
}

//isgating
bool RtNormgroup::get_isgating() const { return m_pImp->get_isgating();}
void RtNormgroup::set_isgating(const bool& isgating)
{
    m_pImp->set_isgating(isgating);
    enable_field(NORMGROUP_ISGATING);
    setdirty_field(NORMGROUP_ISGATING, true);
}

//binmode
int RtNormgroup::get_binmode() const { return m_pImp->get_binmode();}
void RtNormgroup::set_binmode(const int& binmode)
{
    m_pImp->set_binmode(binmode);
    enable_field(NORMGROUP_BINMODE);
    setdirty_field(NORMGROUP_BINMODE, true);
}

//beamonrangestart
double RtNormgroup::get_beamonrangestart() const { return m_pImp->get_beamonrangestart();}
void RtNormgroup::set_beamonrangestart(const double& beamonrangestart)
{
    m_pImp->set_beamonrangestart(beamonrangestart);
    enable_field(NORMGROUP_BEAMONRANGESTART);
    setdirty_field(NORMGROUP_BEAMONRANGESTART, true);
}

//beamonrangeend
double RtNormgroup::get_beamonrangeend() const { return m_pImp->get_beamonrangeend();}
void RtNormgroup::set_beamonrangeend(const double& beamonrangeend)
{
    m_pImp->set_beamonrangeend(beamonrangeend);
    enable_field(NORMGROUP_BEAMONRANGEEND);
    setdirty_field(NORMGROUP_BEAMONRANGEEND, true);
}

//updatetime
DATETIME_BOOST RtNormgroup::get_updatetime() const { return m_pImp->get_updatetime();}
void RtNormgroup::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(NORMGROUP_UPDATETIME);
    setdirty_field(NORMGROUP_UPDATETIME, true);
}

//operatorid
std::string RtNormgroup::get_operatorid() const { return m_pImp->get_operatorid();}
void RtNormgroup::set_operatorid(const std::string& operatorid)
{
    m_pImp->set_operatorid(operatorid);
    enable_field(NORMGROUP_OPERATORID);
    setdirty_field(NORMGROUP_OPERATORID, true);
}
//////////////////////////////////////////////////////////////////////////
RtDosegrid* RtNormgroup::get_dosegrid() const {return m_pImp->get_dosegrid();}

RT_TPS_DATABASE_END_NAMESPACE