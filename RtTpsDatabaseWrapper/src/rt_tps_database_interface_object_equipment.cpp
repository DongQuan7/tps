//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_equipment.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.1
///
///  \version 1.0
///  \date    1/19/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_equipment.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtEquipmentImp::RtEquipmentImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_manufacturer(""),
    m_institutionname(""),
    m_Institutionaddress(""),
    m_stationname(""),
    m_institutionaleepartmentname(""),
    m_manufacturermodelname(""),
    m_deviceserialnumber(""),
    m_gantryid(""),
    m_spatialresolution(0.),
    m_dateoflastcalibration(boost::date_time::not_a_date_time),
    m_timeoflastcalibration(boost::date_time::not_a_date_time),
    m_pixelpaddingvalue(0),
    m_softwareversion("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtEquipmentImp::RtEquipmentImp(const RtEquipmentImp& equipment):
    m_uid(equipment.get_uid()),
    m_manufacturer(equipment.get_manufacturer()),
    m_institutionname(equipment.get_institutionname()),
    m_Institutionaddress(equipment.get_Institutionaddress()),
    m_stationname(equipment.get_stationname()),
    m_institutionaleepartmentname(equipment.get_institutionaleepartmentname()),
    m_manufacturermodelname(equipment.get_manufacturermodelname()),
    m_deviceserialnumber(equipment.get_deviceserialnumber()),
    m_gantryid(equipment.get_gantryid()),
    m_spatialresolution(equipment.get_spatialresolution()),
    m_dateoflastcalibration(equipment.get_dateoflastcalibration()),
    m_timeoflastcalibration(equipment.get_timeoflastcalibration()),
    m_pixelpaddingvalue(equipment.get_pixelpaddingvalue()),
    m_softwareversion(equipment.get_softwareversion())
{
}

RtEquipmentImp& RtEquipmentImp::operator=(const RtEquipmentImp& equipment)
{
    if (this != &equipment){
        this->m_uid = equipment.get_uid();
        this->m_manufacturer = equipment.get_manufacturer();
        this->m_institutionname = equipment.get_institutionname();
        this->m_Institutionaddress = equipment.get_Institutionaddress();
        this->m_stationname = equipment.get_stationname();
        this->m_institutionaleepartmentname = equipment.get_institutionaleepartmentname();
        this->m_manufacturermodelname = equipment.get_manufacturermodelname();
        this->m_deviceserialnumber = equipment.get_deviceserialnumber();
        this->m_gantryid = equipment.get_gantryid();
        this->m_spatialresolution = equipment.get_spatialresolution();
        this->m_dateoflastcalibration = equipment.get_dateoflastcalibration();
        this->m_timeoflastcalibration = equipment.get_timeoflastcalibration();
        this->m_pixelpaddingvalue = equipment.get_pixelpaddingvalue();
        this->m_softwareversion = equipment.get_softwareversion();
    }
    return *this;
}

RtEquipmentImp::~RtEquipmentImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtEquipment::RtEquipment(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtEquipmentImp(bGeneraterUid);
    set_flags(EQUIPMENT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_EQUIPMENT_FIELD_NULL);
}

RtEquipment::RtEquipment(const RtEquipment& equipment): RtDatabaseObject(equipment),
   m_pImp(new RtEquipmentImp(*equipment.m_pImp))
{
}

RtEquipment& RtEquipment::operator = (const RtEquipment& equipment)
{
    if(this != &equipment)
    {
        RtDatabaseObject::operator=(equipment);
        *this->m_pImp = *equipment.m_pImp;
    }
    return *this;
}

RtEquipment::~RtEquipment()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtEquipment::get_uid() const { return m_pImp->get_uid();}
void RtEquipment::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(EQUIPMENT_UID);
    setdirty_field(EQUIPMENT_UID, true);
}

//manufacturer
std::string RtEquipment::get_manufacturer() const { return m_pImp->get_manufacturer();}
void RtEquipment::set_manufacturer(const std::string& manufacturer)
{
    m_pImp->set_manufacturer(manufacturer);
    enable_field(EQUIPMENT_MANUFACTURER);
    setdirty_field(EQUIPMENT_MANUFACTURER, true);
}

//institutionname
std::string RtEquipment::get_institutionname() const { return m_pImp->get_institutionname();}
void RtEquipment::set_institutionname(const std::string& institutionname)
{
    m_pImp->set_institutionname(institutionname);
    enable_field(EQUIPMENT_INSTITUTIONNAME);
    setdirty_field(EQUIPMENT_INSTITUTIONNAME, true);
}

//Institutionaddress
std::string RtEquipment::get_Institutionaddress() const { return m_pImp->get_Institutionaddress();}
void RtEquipment::set_Institutionaddress(const std::string& Institutionaddress)
{
    m_pImp->set_Institutionaddress(Institutionaddress);
    enable_field(EQUIPMENT_INSTITUTIONADDRESS);
    setdirty_field(EQUIPMENT_INSTITUTIONADDRESS, true);
}

//stationname
std::string RtEquipment::get_stationname() const { return m_pImp->get_stationname();}
void RtEquipment::set_stationname(const std::string& stationname)
{
    m_pImp->set_stationname(stationname);
    enable_field(EQUIPMENT_STATIONNAME);
    setdirty_field(EQUIPMENT_STATIONNAME, true);
}

//institutionaleepartmentname
std::string RtEquipment::get_institutionaleepartmentname() const { return m_pImp->get_institutionaleepartmentname();}
void RtEquipment::set_institutionaleepartmentname(const std::string& institutionaleepartmentname)
{
    m_pImp->set_institutionaleepartmentname(institutionaleepartmentname);
    enable_field(EQUIPMENT_INSTITUTIONALEEPARTMENTNAME);
    setdirty_field(EQUIPMENT_INSTITUTIONALEEPARTMENTNAME, true);
}

//manufacturermodelname
std::string RtEquipment::get_manufacturermodelname() const { return m_pImp->get_manufacturermodelname();}
void RtEquipment::set_manufacturermodelname(const std::string& manufacturermodelname)
{
    m_pImp->set_manufacturermodelname(manufacturermodelname);
    enable_field(EQUIPMENT_MANUFACTURERMODELNAME);
    setdirty_field(EQUIPMENT_MANUFACTURERMODELNAME, true);
}

//deviceserialnumber
std::string RtEquipment::get_deviceserialnumber() const { return m_pImp->get_deviceserialnumber();}
void RtEquipment::set_deviceserialnumber(const std::string& deviceserialnumber)
{
    m_pImp->set_deviceserialnumber(deviceserialnumber);
    enable_field(EQUIPMENT_DEVICESERIALNUMBER);
    setdirty_field(EQUIPMENT_DEVICESERIALNUMBER, true);
}

//gantryid
std::string RtEquipment::get_gantryid() const { return m_pImp->get_gantryid();}
void RtEquipment::set_gantryid(const std::string& gantryid)
{
    m_pImp->set_gantryid(gantryid);
    enable_field(EQUIPMENT_GANTRYID);
    setdirty_field(EQUIPMENT_GANTRYID, true);
}

//spatialresolution
double RtEquipment::get_spatialresolution() const { return m_pImp->get_spatialresolution();}
void RtEquipment::set_spatialresolution(const double& spatialresolution)
{
    m_pImp->set_spatialresolution(spatialresolution);
    enable_field(EQUIPMENT_SPATIALRESOLUTION);
    setdirty_field(EQUIPMENT_SPATIALRESOLUTION, true);
}

//dateoflastcalibration
DATE_BOOST RtEquipment::get_dateoflastcalibration() const { return m_pImp->get_dateoflastcalibration();}
void RtEquipment::set_dateoflastcalibration(const DATE_BOOST& dateoflastcalibration)
{
    m_pImp->set_dateoflastcalibration(dateoflastcalibration);
    enable_field(EQUIPMENT_DATEOFLASTCALIBRATION);
    setdirty_field(EQUIPMENT_DATEOFLASTCALIBRATION, true);
}

//timeoflastcalibration
TIME_BOOST RtEquipment::get_timeoflastcalibration() const { return m_pImp->get_timeoflastcalibration();}
void RtEquipment::set_timeoflastcalibration(const TIME_BOOST& timeoflastcalibration)
{
    m_pImp->set_timeoflastcalibration(timeoflastcalibration);
    enable_field(EQUIPMENT_TIMEOFLASTCALIBRATION);
    setdirty_field(EQUIPMENT_TIMEOFLASTCALIBRATION, true);
}

//pixelpaddingvalue
int RtEquipment::get_pixelpaddingvalue() const { return m_pImp->get_pixelpaddingvalue();}
void RtEquipment::set_pixelpaddingvalue(const int& pixelpaddingvalue)
{
    m_pImp->set_pixelpaddingvalue(pixelpaddingvalue);
    enable_field(EQUIPMENT_PIXELPADDINGVALUE);
    setdirty_field(EQUIPMENT_PIXELPADDINGVALUE, true);
}

//softwareversion
std::string RtEquipment::get_softwareversion() const { return m_pImp->get_softwareversion();}
void RtEquipment::set_softwareversion(const std::string& softwareversion)
{
    m_pImp->set_softwareversion(softwareversion);
    enable_field(EQUIPMENT_SOFTWAREVERSION);
    setdirty_field(EQUIPMENT_SOFTWAREVERSION, true);
}

RT_TPS_DATABASE_END_NAMESPACE