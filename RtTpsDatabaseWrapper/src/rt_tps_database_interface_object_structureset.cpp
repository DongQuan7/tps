//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_structureset.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_structureset.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtStructuresetImp::RtStructuresetImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_tpsequipmentuid(""),
    m_seriesuid(""),
    m_sopinstanceuid(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtStructuresetImp::RtStructuresetImp(const RtStructuresetImp& structureset):
    m_uid(structureset.get_uid()),
    m_tpsequipmentuid(structureset.get_tpsequipmentuid()),
    m_seriesuid(structureset.get_seriesuid()),
    m_sopinstanceuid(structureset.get_sopinstanceuid()),
    m_updatetime(structureset.get_updatetime())
{
}

RtStructuresetImp& RtStructuresetImp::operator=(const RtStructuresetImp& structureset)
{
    if (this != &structureset){
        this->m_uid = structureset.get_uid();
        this->m_tpsequipmentuid = structureset.get_tpsequipmentuid();
        this->m_seriesuid = structureset.get_seriesuid();
        this->m_sopinstanceuid = structureset.get_sopinstanceuid();
        this->m_updatetime = structureset.get_updatetime();
    }
    return *this;
}

RtStructuresetImp::~RtStructuresetImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtStructureset::RtStructureset(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtStructuresetImp(bGeneraterUid);
    set_flags(STRUCTURESET_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_STRUCTURESET_FIELD_NULL);
}

RtStructureset::RtStructureset(const RtStructureset& structureset): RtDatabaseObject(structureset),
   m_pImp(new RtStructuresetImp(*structureset.m_pImp))
{
}

RtStructureset& RtStructureset::operator = (const RtStructureset& structureset)
{
    if(this != &structureset)
    {
        RtDatabaseObject::operator=(structureset);
        *this->m_pImp = *structureset.m_pImp;
    }
    return *this;
}

RtStructureset::~RtStructureset()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtStructureset::get_uid() const { return m_pImp->get_uid();}
void RtStructureset::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(STRUCTURESET_UID);
    setdirty_field(STRUCTURESET_UID, true);
}

//tpsequipmentuid
std::string RtStructureset::get_tpsequipmentuid() const { return m_pImp->get_tpsequipmentuid();}
void RtStructureset::set_tpsequipmentuid(const std::string& tpsequipmentuid)
{
    m_pImp->set_tpsequipmentuid(tpsequipmentuid);
    enable_field(STRUCTURESET_TPSEQUIPMENTUID);
    setdirty_field(STRUCTURESET_TPSEQUIPMENTUID, true);
}

//seriesuid
std::string RtStructureset::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtStructureset::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(STRUCTURESET_SERIESUID);
    setdirty_field(STRUCTURESET_SERIESUID, true);
}

//sopinstanceuid
std::string RtStructureset::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtStructureset::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(STRUCTURESET_SOPINSTANCEUID);
    setdirty_field(STRUCTURESET_SOPINSTANCEUID, true);
}

//updatetime
DATETIME_BOOST RtStructureset::get_updatetime() const { return m_pImp->get_updatetime();}
void RtStructureset::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(STRUCTURESET_UPDATETIME);
    setdirty_field(STRUCTURESET_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE