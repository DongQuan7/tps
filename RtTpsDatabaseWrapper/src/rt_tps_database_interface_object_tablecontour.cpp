//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_tablecontour.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_tablecontour.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtTablecontourImp::RtTablecontourImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_tablename(""),
    m_slicenum(0),
    m_contourid(0),
    m_thickness(0.),
    m_tableuid(""),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtTablecontourImp::RtTablecontourImp(const RtTablecontourImp& tablecontour):
    m_uid(tablecontour.get_uid()),
    m_tablename(tablecontour.get_tablename()),
    m_slicenum(tablecontour.get_slicenum()),
    m_contourid(tablecontour.get_contourid()),
    m_points(tablecontour.get_points()),
    m_thickness(tablecontour.get_thickness()),
    m_tableuid(tablecontour.get_tableuid()),
    m_updatetime(tablecontour.get_updatetime())
{
}

RtTablecontourImp& RtTablecontourImp::operator=(const RtTablecontourImp& tablecontour)
{
    if (this != &tablecontour){
        this->m_uid = tablecontour.get_uid();
        this->m_tablename = tablecontour.get_tablename();
        this->m_slicenum = tablecontour.get_slicenum();
        this->m_contourid = tablecontour.get_contourid();
        this->m_points = tablecontour.get_points();
        this->m_thickness = tablecontour.get_thickness();
        this->m_tableuid = tablecontour.get_tableuid();
        this->m_updatetime = tablecontour.get_updatetime();
    }
    return *this;
}

RtTablecontourImp::~RtTablecontourImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtTablecontour::RtTablecontour(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtTablecontourImp(bGeneraterUid);
    set_flags(TABLECONTOUR_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_TABLECONTOUR_FIELD_NULL);
}

RtTablecontour::RtTablecontour(const RtTablecontour& tablecontour): RtDatabaseObject(tablecontour),
   m_pImp(new RtTablecontourImp(*tablecontour.m_pImp))
{
}

RtTablecontour& RtTablecontour::operator = (const RtTablecontour& tablecontour)
{
    if(this != &tablecontour)
    {
        RtDatabaseObject::operator=(tablecontour);
        *this->m_pImp = *tablecontour.m_pImp;
    }
    return *this;
}

RtTablecontour::~RtTablecontour()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtTablecontour::get_uid() const { return m_pImp->get_uid();}
void RtTablecontour::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(TABLECONTOUR_UID);
    setdirty_field(TABLECONTOUR_UID, true);
}

//tablename
std::string RtTablecontour::get_tablename() const { return m_pImp->get_tablename();}
void RtTablecontour::set_tablename(const std::string& tablename)
{
    m_pImp->set_tablename(tablename);
    enable_field(TABLECONTOUR_TABLENAME);
    setdirty_field(TABLECONTOUR_TABLENAME, true);
}

//slicenum
int RtTablecontour::get_slicenum() const { return m_pImp->get_slicenum();}
void RtTablecontour::set_slicenum(const int& slicenum)
{
    m_pImp->set_slicenum(slicenum);
    enable_field(TABLECONTOUR_SLICENUM);
    setdirty_field(TABLECONTOUR_SLICENUM, true);
}

//contourid
int RtTablecontour::get_contourid() const { return m_pImp->get_contourid();}
void RtTablecontour::set_contourid(const int& contourid)
{
    m_pImp->set_contourid(contourid);
    enable_field(TABLECONTOUR_CONTOURID);
    setdirty_field(TABLECONTOUR_CONTOURID, true);
}

//points
std::vector<db_Point3d> RtTablecontour::get_points() const{ return m_pImp->get_points();}
std::vector<db_Point3d> RtTablecontour::get_points() { return m_pImp->get_points();}
void RtTablecontour::set_points(const std::vector<db_Point3d>& vPoints)
{ 
    m_pImp->set_points(vPoints);
    enable_field(TABLECONTOUR_POINTS);
    setdirty_field(TABLECONTOUR_POINTS, true);
}

//thickness
double RtTablecontour::get_thickness() const { return m_pImp->get_thickness();}
void RtTablecontour::set_thickness(const double& thickness)
{
    m_pImp->set_thickness(thickness);
    enable_field(TABLECONTOUR_THICKNESS);
    setdirty_field(TABLECONTOUR_THICKNESS, true);
}

//tableuid
std::string RtTablecontour::get_tableuid() const { return m_pImp->get_tableuid();}
void RtTablecontour::set_tableuid(const std::string& tableuid)
{
    m_pImp->set_tableuid(tableuid);
    enable_field(TABLECONTOUR_TABLEUID);
    setdirty_field(TABLECONTOUR_TABLEUID, true);
}

//updatetime
DATETIME_BOOST RtTablecontour::get_updatetime() const { return m_pImp->get_updatetime();}
void RtTablecontour::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(TABLECONTOUR_UPDATETIME);
    setdirty_field(TABLECONTOUR_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE