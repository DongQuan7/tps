//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_imagetransformation.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.2
///
///  \version 1.0
///  \date    2/21/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_imagetransformation.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtImagetransformationImp::RtImagetransformationImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_originalseriesuid(""),
    m_transfomationseriesuid(""),
    //m_registrationmatrix(""),
    m_description(""),
    m_registrationmethod(0),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtImagetransformationImp::RtImagetransformationImp(const RtImagetransformationImp& imagetransformation):
    m_uid(imagetransformation.get_uid()),
    m_originalseriesuid(imagetransformation.get_originalseriesuid()),
    m_transfomationseriesuid(imagetransformation.get_transfomationseriesuid()),
    //m_registrationmatrix(imagetransformation.get_registrationmatrix()),
    m_description(imagetransformation.get_description()),
    m_registrationmethod(imagetransformation.get_registrationmethod()),
    m_updatetime(imagetransformation.get_updatetime())
{
     this->set_registrationmatrix(imagetransformation.get_registrationmatrix());
}

RtImagetransformationImp& RtImagetransformationImp::operator=(const RtImagetransformationImp& imagetransformation)
{
    if (this != &imagetransformation){
        this->m_uid = imagetransformation.get_uid();
        this->m_originalseriesuid = imagetransformation.get_originalseriesuid();
        this->m_transfomationseriesuid = imagetransformation.get_transfomationseriesuid();
        //this->m_registrationmatrix = imagetransformation.get_registrationmatrix();  
        this->set_registrationmatrix(imagetransformation.get_registrationmatrix());
        this->m_description = imagetransformation.get_description();
        this->m_registrationmethod = imagetransformation.get_registrationmethod();
        this->m_updatetime = imagetransformation.get_updatetime();
    }
    return *this;
}

RtImagetransformationImp::~RtImagetransformationImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtImagetransformation::RtImagetransformation(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtImagetransformationImp(bGeneraterUid);
    set_flags(IMAGETRANSFORMATION_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_IMAGETRANSFORMATION_FIELD_NULL);
}

RtImagetransformation::RtImagetransformation(const RtImagetransformation& imagetransformation): RtDatabaseObject(imagetransformation),
   m_pImp(new RtImagetransformationImp(*imagetransformation.m_pImp))
{
}

RtImagetransformation& RtImagetransformation::operator = (const RtImagetransformation& imagetransformation)
{
    if(this != &imagetransformation)
    {
        RtDatabaseObject::operator=(imagetransformation);
        *this->m_pImp = *imagetransformation.m_pImp;
    }
    return *this;
}

RtImagetransformation::~RtImagetransformation()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtImagetransformation::get_uid() const { return m_pImp->get_uid();}
void RtImagetransformation::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(IMAGETRANSFORMATION_UID);
    setdirty_field(IMAGETRANSFORMATION_UID, true);
}

//originalseriesuid
std::string RtImagetransformation::get_originalseriesuid() const { return m_pImp->get_originalseriesuid();}
void RtImagetransformation::set_originalseriesuid(const std::string& originalseriesuid)
{
    m_pImp->set_originalseriesuid(originalseriesuid);
    enable_field(IMAGETRANSFORMATION_ORIGINALSERIESUID);
    setdirty_field(IMAGETRANSFORMATION_ORIGINALSERIESUID, true);
}

//transfomationseriesuid
std::string RtImagetransformation::get_transfomationseriesuid() const { return m_pImp->get_transfomationseriesuid();}
void RtImagetransformation::set_transfomationseriesuid(const std::string& transfomationseriesuid)
{
    m_pImp->set_transfomationseriesuid(transfomationseriesuid);
    enable_field(IMAGETRANSFORMATION_TRANSFOMATIONSERIESUID);
    setdirty_field(IMAGETRANSFORMATION_TRANSFOMATIONSERIESUID, true);
}

//registrationmatrix
//std::string RtImagetransformation::get_registrationmatrix() const { return m_pImp->get_registrationmatrix();}
//void RtImagetransformation::set_registrationmatrix(const std::string& registrationmatrix)
//{
//    m_pImp->set_registrationmatrix(registrationmatrix);
//    enable_field(IMAGETRANSFORMATION_REGISTRATIONMATRIX);
//    setdirty_field(IMAGETRANSFORMATION_REGISTRATIONMATRIX, true);
//}

//registrationmatrix
const float* RtImagetransformation::get_registrationmatrix() const { return m_pImp->get_registrationmatrix();}
void RtImagetransformation::set_registrationmatrix(const float* registrationmatrix) 
{
    m_pImp->set_registrationmatrix(registrationmatrix);
    enable_field(IMAGETRANSFORMATION_REGISTRATIONMATRIX);
    setdirty_field(IMAGETRANSFORMATION_REGISTRATIONMATRIX, true);
}


//description
std::string RtImagetransformation::get_description() const { return m_pImp->get_description();}
void RtImagetransformation::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(IMAGETRANSFORMATION_DESCRIPTION);
    setdirty_field(IMAGETRANSFORMATION_DESCRIPTION, true);
}

//registrationmethod
int RtImagetransformation::get_registrationmethod() const { return m_pImp->get_registrationmethod();}
void RtImagetransformation::set_registrationmethod(const int& registrationmethod)
{
    m_pImp->set_registrationmethod(registrationmethod);
    enable_field(IMAGETRANSFORMATION_REGISTRATIONMETHOD);
    setdirty_field(IMAGETRANSFORMATION_REGISTRATIONMETHOD, true);
}

//updatetime
DATETIME_BOOST RtImagetransformation::get_updatetime() const { return m_pImp->get_updatetime();}
void RtImagetransformation::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(IMAGETRANSFORMATION_UPDATETIME);
    setdirty_field(IMAGETRANSFORMATION_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE