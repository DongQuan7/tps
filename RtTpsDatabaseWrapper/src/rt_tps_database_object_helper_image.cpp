//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_image.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_image.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtImage& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //63 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < IMAGE_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_IMAGE_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsimage SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < IMAGE_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_IMAGE_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsimage (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_sopinstanceuid = "";
    std::string	data_seriesuid = "";
    std::string	data_dcmfilepath = "";
    int			data_instancenumber = 0;
    std::string	data_sopclassuid = "";
    std::string	data_patientorientation = "";
    std::string	data_imagetype = "";
    int			data_acquisitionnumber = 0;
    MYSQL_TIME	data_acquisitiondatetime;
    MYSQL_TIME	data_contentdate;
    MYSQL_TIME	data_contenttime;
    MYSQL_TIME	data_instancecreationdate;
    MYSQL_TIME	data_instancecreationtime;
    std::string	data_qualitycontrolimage = "";
    int			data_rows = 0;
    int			data_columns = 0;
    int			data_bitsallocated = 0;
    std::string	data_windowwidth = "";
    std::string	data_windowcenter = "";
    std::string	data_exposureindex = "";
    std::string	data_targetexposureindex = "";
    std::string	data_deviationindex = "";
    int			data_imagesinacquisition = 0;
    std::string	data_imagecomments = "";
    std::string	data_lossyimagecompression = "";
    std::string	data_lossyimagecompressionratio = "";
    std::string	data_pixelspacing = "";
    std::string	data_imageorientationpatient = "";
    std::string	data_imagepositionpatient = "";
    std::string	data_slicethickness = "";
    std::string	data_slicelocation = "";
    std::string	data_printstatus = "";
    std::string	data_archivestatus = "";
    int			data_imageconfirmstatus = 0;
    std::string	data_imagerejectreason = "";
    MYSQL_TIME	data_imageconfirmdatetime;
    std::string	data_imagesendstatus = "";
    std::string	data_imagestoredindvd = "";
    std::string	data_imagestoredinusb = "";
    std::string	data_imagemark = "";
    std::string	data_imageprotect = "";
    bool		data_imageiscached = false;
    std::string	data_acquisitionfov = "";
    std::string	data_acquisitionmatrixinterpolated = "";
    std::string	data_imageorientationlabel = "";
    int			data_tableofposition = 0;
    int			data_isfreecassete = 0;
    std::string	data_photometricinterpretation = "";
    std::string	data_numberofframes = "";
    int			data_samplesperpixel = 0;
    int			data_pixelrepresentation = 0;
    std::string	data_rescaleslope = "";
    std::string	data_rescaleintercept = "";
    std::string	data_imagereserved0 = "";
    std::string	data_imagereserved1 = "";
    int			data_bitsstored = 0;
    int			data_highbit = 0;
    double		data_kvp = 0.;
    float		data_couchsagoffset = 0.f;
    float		data_endposition = 0.f;
    float		data_startposition = 0.f;
    MYSQL_TIME	data_updatetime;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < IMAGE_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//sopinstanceuid varchar
            {
                data_sopinstanceuid = src.get_sopinstanceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sopinstanceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sopinstanceuid.size();
            }
            break;
        case 2: 	//seriesuid varchar
            {
                data_seriesuid = src.get_seriesuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesuid.size();
            }
            break;
        case 3: 	//dcmfilepath varchar
            {
                data_dcmfilepath = src.get_dcmfilepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_dcmfilepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_dcmfilepath.size();
            }
            break;
        case 4: 	//instancenumber int
            {
                data_instancenumber = src.get_instancenumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_instancenumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 5: 	//sopclassuid varchar
            {
                data_sopclassuid = src.get_sopclassuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sopclassuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sopclassuid.size();
            }
            break;
        case 6: 	//patientorientation varchar
            {
                data_patientorientation = src.get_patientorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientorientation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientorientation.size();
            }
            break;
        case 7: 	//imagetype varchar
            {
                data_imagetype = src.get_imagetype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagetype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagetype.size();
            }
            break;
        case 8: 	//acquisitionnumber int
            {
                data_acquisitionnumber = src.get_acquisitionnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_acquisitionnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 9: 	//acquisitiondatetime datetime
            {
                ConvertDateTime2DB(src.get_acquisitiondatetime(), &data_acquisitiondatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_acquisitiondatetime;
                if (src.get_acquisitiondatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 10: 	//contentdate date
            {
                ConvertDateTime2DB(src.get_contentdate(), &data_contentdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_contentdate;
                if (src.get_contentdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 11: 	//contenttime time
            {
                ConvertDateTime2DB(src.get_contenttime(), &data_contenttime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_contenttime;
                if (src.get_contenttime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 12: 	//instancecreationdate date
            {
                ConvertDateTime2DB(src.get_instancecreationdate(), &data_instancecreationdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_instancecreationdate;
                if (src.get_instancecreationdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 13: 	//instancecreationtime time
            {
                ConvertDateTime2DB(src.get_instancecreationtime(), &data_instancecreationtime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_instancecreationtime;
                if (src.get_instancecreationtime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 14: 	//qualitycontrolimage varchar
            {
                data_qualitycontrolimage = src.get_qualitycontrolimage();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_qualitycontrolimage.c_str();
                bind[iCount].buffer_length = (unsigned long)data_qualitycontrolimage.size();
            }
            break;
        case 15: 	//rows int
            {
                data_rows = src.get_rows();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_rows;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 16: 	//columns int
            {
                data_columns = src.get_columns();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_columns;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 17: 	//bitsallocated int
            {
                data_bitsallocated = src.get_bitsallocated();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_bitsallocated;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 18: 	//windowwidth varchar
            {
                data_windowwidth = src.get_windowwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_windowwidth.c_str();
                bind[iCount].buffer_length = (unsigned long)data_windowwidth.size();
            }
            break;
        case 19: 	//windowcenter varchar
            {
                data_windowcenter = src.get_windowcenter();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_windowcenter.c_str();
                bind[iCount].buffer_length = (unsigned long)data_windowcenter.size();
            }
            break;
        case 20: 	//exposureindex varchar
            {
                data_exposureindex = src.get_exposureindex();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_exposureindex.c_str();
                bind[iCount].buffer_length = (unsigned long)data_exposureindex.size();
            }
            break;
        case 21: 	//targetexposureindex varchar
            {
                data_targetexposureindex = src.get_targetexposureindex();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_targetexposureindex.c_str();
                bind[iCount].buffer_length = (unsigned long)data_targetexposureindex.size();
            }
            break;
        case 22: 	//deviationindex varchar
            {
                data_deviationindex = src.get_deviationindex();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_deviationindex.c_str();
                bind[iCount].buffer_length = (unsigned long)data_deviationindex.size();
            }
            break;
        case 23: 	//imagesinacquisition int
            {
                data_imagesinacquisition = src.get_imagesinacquisition();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_imagesinacquisition;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 24: 	//imagecomments varchar
            {
                data_imagecomments = src.get_imagecomments();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagecomments.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagecomments.size();
            }
            break;
        case 25: 	//lossyimagecompression varchar
            {
                data_lossyimagecompression = src.get_lossyimagecompression();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_lossyimagecompression.c_str();
                bind[iCount].buffer_length = (unsigned long)data_lossyimagecompression.size();
            }
            break;
        case 26: 	//lossyimagecompressionratio varchar
            {
                data_lossyimagecompressionratio = src.get_lossyimagecompressionratio();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_lossyimagecompressionratio.c_str();
                bind[iCount].buffer_length = (unsigned long)data_lossyimagecompressionratio.size();
            }
            break;
        case 27: 	//pixelspacing varchar
            {
                data_pixelspacing = src.get_pixelspacing();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_pixelspacing.c_str();
                bind[iCount].buffer_length = (unsigned long)data_pixelspacing.size();
            }
            break;
        case 28: 	//imageorientationpatient varchar
            {
                data_imageorientationpatient = src.get_imageorientationpatient();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imageorientationpatient.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imageorientationpatient.size();
            }
            break;
        case 29: 	//imagepositionpatient varchar
            {
                data_imagepositionpatient = src.get_imagepositionpatient();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagepositionpatient.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagepositionpatient.size();
            }
            break;
        case 30: 	//slicethickness varchar
            {
                data_slicethickness = src.get_slicethickness();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_slicethickness.c_str();
                bind[iCount].buffer_length = (unsigned long)data_slicethickness.size();
            }
            break;
        case 31: 	//slicelocation varchar
            {
                data_slicelocation = src.get_slicelocation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_slicelocation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_slicelocation.size();
            }
            break;
        case 32: 	//printstatus varchar
            {
                data_printstatus = src.get_printstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_printstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_printstatus.size();
            }
            break;
        case 33: 	//archivestatus varchar
            {
                data_archivestatus = src.get_archivestatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_archivestatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_archivestatus.size();
            }
            break;
        case 34: 	//imageconfirmstatus int
            {
                data_imageconfirmstatus = src.get_imageconfirmstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_imageconfirmstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 35: 	//imagerejectreason varchar
            {
                data_imagerejectreason = src.get_imagerejectreason();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagerejectreason.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagerejectreason.size();
            }
            break;
        case 36: 	//imageconfirmdatetime datetime
            {
                ConvertDateTime2DB(src.get_imageconfirmdatetime(), &data_imageconfirmdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_imageconfirmdatetime;
                if (src.get_imageconfirmdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 37: 	//imagesendstatus varchar
            {
                data_imagesendstatus = src.get_imagesendstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagesendstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagesendstatus.size();
            }
            break;
        case 38: 	//imagestoredindvd varchar
            {
                data_imagestoredindvd = src.get_imagestoredindvd();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagestoredindvd.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagestoredindvd.size();
            }
            break;
        case 39: 	//imagestoredinusb varchar
            {
                data_imagestoredinusb = src.get_imagestoredinusb();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagestoredinusb.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagestoredinusb.size();
            }
            break;
        case 40: 	//imagemark varchar
            {
                data_imagemark = src.get_imagemark();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagemark.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagemark.size();
            }
            break;
        case 41: 	//imageprotect varchar
            {
                data_imageprotect = src.get_imageprotect();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imageprotect.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imageprotect.size();
            }
            break;
        case 42: 	//imageiscached tinyint
            {
                data_imageiscached = src.get_imageiscached();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_imageiscached;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 43: 	//acquisitionfov varchar
            {
                data_acquisitionfov = src.get_acquisitionfov();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_acquisitionfov.c_str();
                bind[iCount].buffer_length = (unsigned long)data_acquisitionfov.size();
            }
            break;
        case 44: 	//acquisitionmatrixinterpolated varchar
            {
                data_acquisitionmatrixinterpolated = src.get_acquisitionmatrixinterpolated();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_acquisitionmatrixinterpolated.c_str();
                bind[iCount].buffer_length = (unsigned long)data_acquisitionmatrixinterpolated.size();
            }
            break;
        case 45: 	//imageorientationlabel varchar
            {
                data_imageorientationlabel = src.get_imageorientationlabel();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imageorientationlabel.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imageorientationlabel.size();
            }
            break;
        case 46: 	//tableofposition int
            {
                data_tableofposition = src.get_tableofposition();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_tableofposition;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 47: 	//isfreecassete int
            {
                data_isfreecassete = src.get_isfreecassete();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_isfreecassete;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 48: 	//photometricinterpretation varchar
            {
                data_photometricinterpretation = src.get_photometricinterpretation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_photometricinterpretation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_photometricinterpretation.size();
            }
            break;
        case 49: 	//numberofframes varchar
            {
                data_numberofframes = src.get_numberofframes();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_numberofframes.c_str();
                bind[iCount].buffer_length = (unsigned long)data_numberofframes.size();
            }
            break;
        case 50: 	//samplesperpixel int
            {
                data_samplesperpixel = src.get_samplesperpixel();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_samplesperpixel;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 51: 	//pixelrepresentation int
            {
                data_pixelrepresentation = src.get_pixelrepresentation();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_pixelrepresentation;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 52: 	//rescaleslope varchar
            {
                data_rescaleslope = src.get_rescaleslope();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_rescaleslope.c_str();
                bind[iCount].buffer_length = (unsigned long)data_rescaleslope.size();
            }
            break;
        case 53: 	//rescaleintercept varchar
            {
                data_rescaleintercept = src.get_rescaleintercept();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_rescaleintercept.c_str();
                bind[iCount].buffer_length = (unsigned long)data_rescaleintercept.size();
            }
            break;
        case 54: 	//imagereserved0 varchar
            {
                data_imagereserved0 = src.get_imagereserved0();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagereserved0.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagereserved0.size();
            }
            break;
        case 55: 	//imagereserved1 varchar
            {
                data_imagereserved1 = src.get_imagereserved1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagereserved1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagereserved1.size();
            }
            break;
        case 56: 	//bitsstored int
            {
                data_bitsstored = src.get_bitsstored();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_bitsstored;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 57: 	//highbit int
            {
                data_highbit = src.get_highbit();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_highbit;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 58: 	//kvp double
            {
                data_kvp = src.get_kvp();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_kvp;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 59: 	//couchsagoffset float
            {
                data_couchsagoffset = src.get_couchsagoffset();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_couchsagoffset;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 60: 	//endposition float
            {
                data_endposition = src.get_endposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_endposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 61: 	//startposition float
            {
                data_startposition = src.get_startposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_startposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 62: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtImage*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtImage*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsimage    63 parameters
    const int field_num = IMAGE_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 64;
    MAX_LENGTH[3] = 1024;
    MAX_LENGTH[4] = 0;
    MAX_LENGTH[5] = 64;
    MAX_LENGTH[6] = 33;
    MAX_LENGTH[7] = 135;
    MAX_LENGTH[8] = 0;
    MAX_LENGTH[9] = 0;
    MAX_LENGTH[10] = 0;
    MAX_LENGTH[11] = 0;
    MAX_LENGTH[12] = 0;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 16;
    MAX_LENGTH[15] = 0;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 135;
    MAX_LENGTH[19] = 135;
    MAX_LENGTH[20] = 16;
    MAX_LENGTH[21] = 16;
    MAX_LENGTH[22] = 16;
    MAX_LENGTH[23] = 0;
    MAX_LENGTH[24] = 10240;
    MAX_LENGTH[25] = 16;
    MAX_LENGTH[26] = 271;
    MAX_LENGTH[27] = 33;
    MAX_LENGTH[28] = 101;
    MAX_LENGTH[29] = 50;
    MAX_LENGTH[30] = 16;
    MAX_LENGTH[31] = 16;
    MAX_LENGTH[32] = 4;
    MAX_LENGTH[33] = 4;
    MAX_LENGTH[34] = 0;
    MAX_LENGTH[35] = 255;
    MAX_LENGTH[36] = 0;
    MAX_LENGTH[37] = 4;
    MAX_LENGTH[38] = 4;
    MAX_LENGTH[39] = 4;
    MAX_LENGTH[40] = 16;
    MAX_LENGTH[41] = 4;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 64;
    MAX_LENGTH[44] = 64;
    MAX_LENGTH[45] = 64;
    MAX_LENGTH[46] = 0;
    MAX_LENGTH[47] = 0;
    MAX_LENGTH[48] = 16;
    MAX_LENGTH[49] = 12;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 0;
    MAX_LENGTH[52] = 16;
    MAX_LENGTH[53] = 16;
    MAX_LENGTH[54] = 64;
    MAX_LENGTH[55] = 64;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 0;
    MAX_LENGTH[58] = 0;
    MAX_LENGTH[59] = 0;
    MAX_LENGTH[60] = 0;
    MAX_LENGTH[61] = 0;
    MAX_LENGTH[62] = 0;

    //std::string	data_uid
    //std::string	data_sopinstanceuid
    //std::string	data_seriesuid
    //std::string	data_dcmfilepath
    int	data_instancenumber = 0;
    //std::string	data_sopclassuid
    //std::string	data_patientorientation
    //std::string	data_imagetype
    int	data_acquisitionnumber = 0;
    MYSQL_TIME	data_acquisitiondatetime;
    MYSQL_TIME	data_contentdate;
    MYSQL_TIME	data_contenttime;
    MYSQL_TIME	data_instancecreationdate;
    MYSQL_TIME	data_instancecreationtime;
    //std::string	data_qualitycontrolimage
    int	data_rows = 0;
    int	data_columns = 0;
    int	data_bitsallocated = 0;
    //std::string	data_windowwidth
    //std::string	data_windowcenter
    //std::string	data_exposureindex
    //std::string	data_targetexposureindex
    //std::string	data_deviationindex
    int	data_imagesinacquisition = 0;
    //std::string	data_imagecomments
    //std::string	data_lossyimagecompression
    //std::string	data_lossyimagecompressionratio
    //std::string	data_pixelspacing
    //std::string	data_imageorientationpatient
    //std::string	data_imagepositionpatient
    //std::string	data_slicethickness
    //std::string	data_slicelocation
    //std::string	data_printstatus
    //std::string	data_archivestatus
    int	data_imageconfirmstatus = 0;
    //std::string	data_imagerejectreason
    MYSQL_TIME	data_imageconfirmdatetime;
    //std::string	data_imagesendstatus
    //std::string	data_imagestoredindvd
    //std::string	data_imagestoredinusb
    //std::string	data_imagemark
    //std::string	data_imageprotect
    bool	data_imageiscached = false;
    //std::string	data_acquisitionfov
    //std::string	data_acquisitionmatrixinterpolated
    //std::string	data_imageorientationlabel
    int	data_tableofposition = 0;
    int	data_isfreecassete = 0;
    //std::string	data_photometricinterpretation
    //std::string	data_numberofframes
    int	data_samplesperpixel = 0;
    int	data_pixelrepresentation = 0;
    //std::string	data_rescaleslope
    //std::string	data_rescaleintercept
    //std::string	data_imagereserved0
    //std::string	data_imagereserved1
    int	data_bitsstored = 0;
    int	data_highbit = 0;
    double	data_kvp = 0.;
    float	data_couchsagoffset = 0.f;
    float	data_endposition = 0.f;
    float	data_startposition = 0.f;
    MYSQL_TIME	data_updatetime;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 4: 	//instancenumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_instancenumber;
            break;
        case 8: 	//acquisitionnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_acquisitionnumber;
            break;
        case 9: 	//acquisitiondatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_acquisitiondatetime;
            break;
        case 10: 	//contentdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_contentdate;
            break;
        case 11: 	//contenttime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_contenttime;
            break;
        case 12: 	//instancecreationdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_instancecreationdate;
            break;
        case 13: 	//instancecreationtime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_instancecreationtime;
            break;
        case 15: 	//rows int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_rows;
            break;
        case 16: 	//columns int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_columns;
            break;
        case 17: 	//bitsallocated int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_bitsallocated;
            break;
        case 23: 	//imagesinacquisition int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_imagesinacquisition;
            break;
        case 34: 	//imageconfirmstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_imageconfirmstatus;
            break;
        case 36: 	//imageconfirmdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_imageconfirmdatetime;
            break;
        case 42: 	//imageiscached tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_imageiscached;
            break;
        case 46: 	//tableofposition int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_tableofposition;
            break;
        case 47: 	//isfreecassete int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_isfreecassete;
            break;
        case 50: 	//samplesperpixel int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_samplesperpixel;
            break;
        case 51: 	//pixelrepresentation int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_pixelrepresentation;
            break;
        case 56: 	//bitsstored int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_bitsstored;
            break;
        case 57: 	//highbit int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_highbit;
            break;
        case 58: 	//kvp double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_kvp;
            break;
        case 59: 	//couchsagoffset float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_couchsagoffset;
            break;
        case 60: 	//endposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_endposition;
            break;
        case 61: 	//startposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_startposition;
            break;
        case 62: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtImage* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtImage();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//sopinstanceuid varchar
                pDis->set_sopinstanceuid((char *)bind[i].buffer);
                break;
            case 2: 	//seriesuid varchar
                pDis->set_seriesuid((char *)bind[i].buffer);
                break;
            case 3: 	//dcmfilepath varchar
                pDis->set_dcmfilepath((char *)bind[i].buffer);
                break;
            case 4: 	//instancenumber int
                pDis->set_instancenumber(data_instancenumber);
                break;
            case 5: 	//sopclassuid varchar
                pDis->set_sopclassuid((char *)bind[i].buffer);
                break;
            case 6: 	//patientorientation varchar
                pDis->set_patientorientation((char *)bind[i].buffer);
                break;
            case 7: 	//imagetype varchar
                pDis->set_imagetype((char *)bind[i].buffer);
                break;
            case 8: 	//acquisitionnumber int
                pDis->set_acquisitionnumber(data_acquisitionnumber);
                break;
            case 9: 	//acquisitiondatetime datetime
                {
                    DATETIME_BOOST acquisitiondatetime;
                    ConvertDateTime2Boost(data_acquisitiondatetime, &acquisitiondatetime);
                    pDis->set_acquisitiondatetime(acquisitiondatetime);
                }
                break;
            case 10: 	//contentdate date
                {
                    DATE_BOOST contentdate;
                    ConvertDateTime2Boost(data_contentdate, &contentdate);
                    pDis->set_contentdate(contentdate);
                }
                break;
            case 11: 	//contenttime time
                {
                    TIME_BOOST contenttime;
                    ConvertDateTime2Boost(data_contenttime, &contenttime);
                    pDis->set_contenttime(contenttime);
                }
                break;
            case 12: 	//instancecreationdate date
                {
                    DATE_BOOST instancecreationdate;
                    ConvertDateTime2Boost(data_instancecreationdate, &instancecreationdate);
                    pDis->set_instancecreationdate(instancecreationdate);
                }
                break;
            case 13: 	//instancecreationtime time
                {
                    TIME_BOOST instancecreationtime;
                    ConvertDateTime2Boost(data_instancecreationtime, &instancecreationtime);
                    pDis->set_instancecreationtime(instancecreationtime);
                }
                break;
            case 14: 	//qualitycontrolimage varchar
                pDis->set_qualitycontrolimage((char *)bind[i].buffer);
                break;
            case 15: 	//rows int
                pDis->set_rows(data_rows);
                break;
            case 16: 	//columns int
                pDis->set_columns(data_columns);
                break;
            case 17: 	//bitsallocated int
                pDis->set_bitsallocated(data_bitsallocated);
                break;
            case 18: 	//windowwidth varchar
                pDis->set_windowwidth((char *)bind[i].buffer);
                break;
            case 19: 	//windowcenter varchar
                pDis->set_windowcenter((char *)bind[i].buffer);
                break;
            case 20: 	//exposureindex varchar
                pDis->set_exposureindex((char *)bind[i].buffer);
                break;
            case 21: 	//targetexposureindex varchar
                pDis->set_targetexposureindex((char *)bind[i].buffer);
                break;
            case 22: 	//deviationindex varchar
                pDis->set_deviationindex((char *)bind[i].buffer);
                break;
            case 23: 	//imagesinacquisition int
                pDis->set_imagesinacquisition(data_imagesinacquisition);
                break;
            case 24: 	//imagecomments varchar
                pDis->set_imagecomments((char *)bind[i].buffer);
                break;
            case 25: 	//lossyimagecompression varchar
                pDis->set_lossyimagecompression((char *)bind[i].buffer);
                break;
            case 26: 	//lossyimagecompressionratio varchar
                pDis->set_lossyimagecompressionratio((char *)bind[i].buffer);
                break;
            case 27: 	//pixelspacing varchar
                pDis->set_pixelspacing((char *)bind[i].buffer);
                break;
            case 28: 	//imageorientationpatient varchar
                pDis->set_imageorientationpatient((char *)bind[i].buffer);
                break;
            case 29: 	//imagepositionpatient varchar
                pDis->set_imagepositionpatient((char *)bind[i].buffer);
                break;
            case 30: 	//slicethickness varchar
                pDis->set_slicethickness((char *)bind[i].buffer);
                break;
            case 31: 	//slicelocation varchar
                pDis->set_slicelocation((char *)bind[i].buffer);
                break;
            case 32: 	//printstatus varchar
                pDis->set_printstatus((char *)bind[i].buffer);
                break;
            case 33: 	//archivestatus varchar
                pDis->set_archivestatus((char *)bind[i].buffer);
                break;
            case 34: 	//imageconfirmstatus int
                pDis->set_imageconfirmstatus(data_imageconfirmstatus);
                break;
            case 35: 	//imagerejectreason varchar
                pDis->set_imagerejectreason((char *)bind[i].buffer);
                break;
            case 36: 	//imageconfirmdatetime datetime
                {
                    DATETIME_BOOST imageconfirmdatetime;
                    ConvertDateTime2Boost(data_imageconfirmdatetime, &imageconfirmdatetime);
                    pDis->set_imageconfirmdatetime(imageconfirmdatetime);
                }
                break;
            case 37: 	//imagesendstatus varchar
                pDis->set_imagesendstatus((char *)bind[i].buffer);
                break;
            case 38: 	//imagestoredindvd varchar
                pDis->set_imagestoredindvd((char *)bind[i].buffer);
                break;
            case 39: 	//imagestoredinusb varchar
                pDis->set_imagestoredinusb((char *)bind[i].buffer);
                break;
            case 40: 	//imagemark varchar
                pDis->set_imagemark((char *)bind[i].buffer);
                break;
            case 41: 	//imageprotect varchar
                pDis->set_imageprotect((char *)bind[i].buffer);
                break;
            case 42: 	//imageiscached tinyint
                pDis->set_imageiscached(data_imageiscached);
                break;
            case 43: 	//acquisitionfov varchar
                pDis->set_acquisitionfov((char *)bind[i].buffer);
                break;
            case 44: 	//acquisitionmatrixinterpolated varchar
                pDis->set_acquisitionmatrixinterpolated((char *)bind[i].buffer);
                break;
            case 45: 	//imageorientationlabel varchar
                pDis->set_imageorientationlabel((char *)bind[i].buffer);
                break;
            case 46: 	//tableofposition int
                pDis->set_tableofposition(data_tableofposition);
                break;
            case 47: 	//isfreecassete int
                pDis->set_isfreecassete(data_isfreecassete);
                break;
            case 48: 	//photometricinterpretation varchar
                pDis->set_photometricinterpretation((char *)bind[i].buffer);
                break;
            case 49: 	//numberofframes varchar
                pDis->set_numberofframes((char *)bind[i].buffer);
                break;
            case 50: 	//samplesperpixel int
                pDis->set_samplesperpixel(data_samplesperpixel);
                break;
            case 51: 	//pixelrepresentation int
                pDis->set_pixelrepresentation(data_pixelrepresentation);
                break;
            case 52: 	//rescaleslope varchar
                pDis->set_rescaleslope((char *)bind[i].buffer);
                break;
            case 53: 	//rescaleintercept varchar
                pDis->set_rescaleintercept((char *)bind[i].buffer);
                break;
            case 54: 	//imagereserved0 varchar
                pDis->set_imagereserved0((char *)bind[i].buffer);
                break;
            case 55: 	//imagereserved1 varchar
                pDis->set_imagereserved1((char *)bind[i].buffer);
                break;
            case 56: 	//bitsstored int
                pDis->set_bitsstored(data_bitsstored);
                break;
            case 57: 	//highbit int
                pDis->set_highbit(data_highbit);
                break;
            case 58: 	//kvp double
                pDis->set_kvp(data_kvp);
                break;
            case 59: 	//couchsagoffset float
                pDis->set_couchsagoffset(data_couchsagoffset);
                break;
            case 60: 	//endposition float
                pDis->set_endposition(data_endposition);
                break;
            case 61: 	//startposition float
                pDis->set_startposition(data_startposition);
                break;
            case 62: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE