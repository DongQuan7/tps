//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_doseoptgoalbase.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.0
///
///  \version 1.0
///  \date    12/29/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_doseoptgoalbase.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDoseoptgoalbaseImp::RtDoseoptgoalbaseImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_id(0),
    m_normgroupuid(""),
    m_voiuid(""),
    m_doseoptgoaltype(0),
    m_ishardlimit(0),
    m_voiweight(0.f),
    m_isjoined(false),
    m_eud(0.f),
    m_a(0.f),
    m_maxdose(0.f),
    m_mindose(0.f),
    m_dose(0.f),
    m_dvhdose(0.f),
    m_volume(0.f),
    m_islowerbound(false),
    m_eudresult(0.f),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDoseoptgoalbaseImp::RtDoseoptgoalbaseImp(const RtDoseoptgoalbaseImp& doseoptgoalbase):
    m_uid(doseoptgoalbase.get_uid()),
    m_id(doseoptgoalbase.get_id()),
    m_normgroupuid(doseoptgoalbase.get_normgroupuid()),
    m_voiuid(doseoptgoalbase.get_voiuid()),
    m_doseoptgoaltype(doseoptgoalbase.get_doseoptgoaltype()),
    m_ishardlimit(doseoptgoalbase.get_ishardlimit()),
    m_voiweight(doseoptgoalbase.get_voiweight()),
    m_isjoined(doseoptgoalbase.get_isjoined()),
    m_eud(doseoptgoalbase.get_eud()),
    m_a(doseoptgoalbase.get_a()),
    m_maxdose(doseoptgoalbase.get_maxdose()),
    m_mindose(doseoptgoalbase.get_mindose()),
    m_dose(doseoptgoalbase.get_dose()),
    m_dvhdose(doseoptgoalbase.get_dvhdose()),
    m_volume(doseoptgoalbase.get_volume()),
    m_islowerbound(doseoptgoalbase.get_islowerbound()),
    m_eudresult(doseoptgoalbase.get_eudresult()),
    m_updatetime(doseoptgoalbase.get_updatetime())
{
}

RtDoseoptgoalbaseImp& RtDoseoptgoalbaseImp::operator=(const RtDoseoptgoalbaseImp& doseoptgoalbase)
{
    if (this != &doseoptgoalbase){
        this->m_uid = doseoptgoalbase.get_uid();
        this->m_id = doseoptgoalbase.get_id();
        this->m_normgroupuid = doseoptgoalbase.get_normgroupuid();
        this->m_voiuid = doseoptgoalbase.get_voiuid();
        this->m_doseoptgoaltype = doseoptgoalbase.get_doseoptgoaltype();
        this->m_ishardlimit = doseoptgoalbase.get_ishardlimit();
        this->m_voiweight = doseoptgoalbase.get_voiweight();
        this->m_isjoined = doseoptgoalbase.get_isjoined();
        this->m_eud = doseoptgoalbase.get_eud();
        this->m_a = doseoptgoalbase.get_a();
        this->m_maxdose = doseoptgoalbase.get_maxdose();
        this->m_mindose = doseoptgoalbase.get_mindose();
        this->m_dose = doseoptgoalbase.get_dose();
        this->m_dvhdose = doseoptgoalbase.get_dvhdose();
        this->m_volume = doseoptgoalbase.get_volume();
        this->m_islowerbound = doseoptgoalbase.get_islowerbound();
        this->m_eudresult = doseoptgoalbase.get_eudresult();
        this->m_updatetime = doseoptgoalbase.get_updatetime();
    }
    return *this;
}

RtDoseoptgoalbaseImp::~RtDoseoptgoalbaseImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDoseoptgoalbase::RtDoseoptgoalbase(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDoseoptgoalbaseImp(bGeneraterUid);
    set_flags(DOSEOPTGOALBASE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DOSEOPTGOALBASE_FIELD_NULL);
}

RtDoseoptgoalbase::RtDoseoptgoalbase(const RtDoseoptgoalbase& doseoptgoalbase): RtDatabaseObject(doseoptgoalbase),
   m_pImp(new RtDoseoptgoalbaseImp(*doseoptgoalbase.m_pImp))
{
}

RtDoseoptgoalbase& RtDoseoptgoalbase::operator = (const RtDoseoptgoalbase& doseoptgoalbase)
{
    if(this != &doseoptgoalbase)
    {
        RtDatabaseObject::operator=(doseoptgoalbase);
        *this->m_pImp = *doseoptgoalbase.m_pImp;
    }
    return *this;
}

RtDoseoptgoalbase::~RtDoseoptgoalbase()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDoseoptgoalbase::get_uid() const { return m_pImp->get_uid();}
void RtDoseoptgoalbase::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DOSEOPTGOALBASE_UID);
    setdirty_field(DOSEOPTGOALBASE_UID, true);
}

//id
int RtDoseoptgoalbase::get_id() const { return m_pImp->get_id();}
void RtDoseoptgoalbase::set_id(const int& id)
{
    m_pImp->set_id(id);
    enable_field(DOSEOPTGOALBASE_ID);
    setdirty_field(DOSEOPTGOALBASE_ID, true);
}

//normgroupuid
std::string RtDoseoptgoalbase::get_normgroupuid() const { return m_pImp->get_normgroupuid();}
void RtDoseoptgoalbase::set_normgroupuid(const std::string& normgroupuid)
{
    m_pImp->set_normgroupuid(normgroupuid);
    enable_field(DOSEOPTGOALBASE_NORMGROUPUID);
    setdirty_field(DOSEOPTGOALBASE_NORMGROUPUID, true);
}

//voiuid
std::string RtDoseoptgoalbase::get_voiuid() const { return m_pImp->get_voiuid();}
void RtDoseoptgoalbase::set_voiuid(const std::string& voiuid)
{
    m_pImp->set_voiuid(voiuid);
    enable_field(DOSEOPTGOALBASE_VOIUID);
    setdirty_field(DOSEOPTGOALBASE_VOIUID, true);
}

//doseoptgoaltype
int RtDoseoptgoalbase::get_doseoptgoaltype() const { return m_pImp->get_doseoptgoaltype();}
void RtDoseoptgoalbase::set_doseoptgoaltype(const int& doseoptgoaltype)
{
    m_pImp->set_doseoptgoaltype(doseoptgoaltype);
    enable_field(DOSEOPTGOALBASE_DOSEOPTGOALTYPE);
    setdirty_field(DOSEOPTGOALBASE_DOSEOPTGOALTYPE, true);
}

//ishardlimit
int RtDoseoptgoalbase::get_ishardlimit() const { return m_pImp->get_ishardlimit();}
void RtDoseoptgoalbase::set_ishardlimit(const int& ishardlimit)
{
    m_pImp->set_ishardlimit(ishardlimit);
    enable_field(DOSEOPTGOALBASE_ISHARDLIMIT);
    setdirty_field(DOSEOPTGOALBASE_ISHARDLIMIT, true);
}

//voiweight
float RtDoseoptgoalbase::get_voiweight() const { return m_pImp->get_voiweight();}
void RtDoseoptgoalbase::set_voiweight(const float& voiweight)
{
    m_pImp->set_voiweight(voiweight);
    enable_field(DOSEOPTGOALBASE_VOIWEIGHT);
    setdirty_field(DOSEOPTGOALBASE_VOIWEIGHT, true);
}

//isjoined
bool RtDoseoptgoalbase::get_isjoined() const { return m_pImp->get_isjoined();}
void RtDoseoptgoalbase::set_isjoined(const bool& isjoined)
{
    m_pImp->set_isjoined(isjoined);
    enable_field(DOSEOPTGOALBASE_ISJOINED);
    setdirty_field(DOSEOPTGOALBASE_ISJOINED, true);
}

//eud
float RtDoseoptgoalbase::get_eud() const { return m_pImp->get_eud();}
void RtDoseoptgoalbase::set_eud(const float& eud)
{
    m_pImp->set_eud(eud);
    enable_field(DOSEOPTGOALBASE_EUD);
    setdirty_field(DOSEOPTGOALBASE_EUD, true);
}

//a
float RtDoseoptgoalbase::get_a() const { return m_pImp->get_a();}
void RtDoseoptgoalbase::set_a(const float& a)
{
    m_pImp->set_a(a);
    enable_field(DOSEOPTGOALBASE_A);
    setdirty_field(DOSEOPTGOALBASE_A, true);
}

//maxdose
float RtDoseoptgoalbase::get_maxdose() const { return m_pImp->get_maxdose();}
void RtDoseoptgoalbase::set_maxdose(const float& maxdose)
{
    m_pImp->set_maxdose(maxdose);
    enable_field(DOSEOPTGOALBASE_MAXDOSE);
    setdirty_field(DOSEOPTGOALBASE_MAXDOSE, true);
}

//mindose
float RtDoseoptgoalbase::get_mindose() const { return m_pImp->get_mindose();}
void RtDoseoptgoalbase::set_mindose(const float& mindose)
{
    m_pImp->set_mindose(mindose);
    enable_field(DOSEOPTGOALBASE_MINDOSE);
    setdirty_field(DOSEOPTGOALBASE_MINDOSE, true);
}

//dose
float RtDoseoptgoalbase::get_dose() const { return m_pImp->get_dose();}
void RtDoseoptgoalbase::set_dose(const float& dose)
{
    m_pImp->set_dose(dose);
    enable_field(DOSEOPTGOALBASE_DOSE);
    setdirty_field(DOSEOPTGOALBASE_DOSE, true);
}

//dvhdose
float RtDoseoptgoalbase::get_dvhdose() const { return m_pImp->get_dvhdose();}
void RtDoseoptgoalbase::set_dvhdose(const float& dvhdose)
{
    m_pImp->set_dvhdose(dvhdose);
    enable_field(DOSEOPTGOALBASE_DVHDOSE);
    setdirty_field(DOSEOPTGOALBASE_DVHDOSE, true);
}

//volume
float RtDoseoptgoalbase::get_volume() const { return m_pImp->get_volume();}
void RtDoseoptgoalbase::set_volume(const float& volume)
{
    m_pImp->set_volume(volume);
    enable_field(DOSEOPTGOALBASE_VOLUME);
    setdirty_field(DOSEOPTGOALBASE_VOLUME, true);
}

//islowerbound
bool RtDoseoptgoalbase::get_islowerbound() const { return m_pImp->get_islowerbound();}
void RtDoseoptgoalbase::set_islowerbound(const bool& islowerbound)
{
    m_pImp->set_islowerbound(islowerbound);
    enable_field(DOSEOPTGOALBASE_ISLOWERBOUND);
    setdirty_field(DOSEOPTGOALBASE_ISLOWERBOUND, true);
}

//eudresult
float RtDoseoptgoalbase::get_eudresult() const { return m_pImp->get_eudresult();}
void RtDoseoptgoalbase::set_eudresult(const float& eudresult)
{
    m_pImp->set_eudresult(eudresult);
    enable_field(DOSEOPTGOALBASE_EUDRESULT);
    setdirty_field(DOSEOPTGOALBASE_EUDRESULT, true);
}

//updatetime
DATETIME_BOOST RtDoseoptgoalbase::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDoseoptgoalbase::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DOSEOPTGOALBASE_UPDATETIME);
    setdirty_field(DOSEOPTGOALBASE_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE