//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_commissionedunit.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_commissionedunit.h"
#include "boost/algorithm/string/split.hpp"
#include "boost/algorithm/string/classification.hpp"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtCommissionedunit& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //131 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < COMMISSIONEDUNIT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_COMMISSIONEDUNIT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmscommissionedunit SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < COMMISSIONEDUNIT_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_COMMISSIONEDUNIT_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmscommissionedunit (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_machineuid = "";
    std::string	data_kerneldatalistuid = "";
    float		data_energy = 0.f;
    int			data_radiationtype = 0;
    float		data_maximumdoserate_muperminute = 0.f;
    float		data_doserate = 0.f;
    MYSQL_TIME	data_calibrationdate;
    float		data_decayconstant = 0.f;
    float		data_cal_dist = 0.f;
    float		data_cal_depth = 0.f;
    float		data_endeffect = 0.f;
    int			data_timeunits = 0;
    int			data_scxcount = 0;
    int			data_scycount = 0;
    std::string	data_scxpositions = "";
    std::string	data_scypositions = "";
    std::string	data_sc = "";
    int			data_type = 0;
    int			data_version = 0;
    float		data_tran = 0.f;
    int			data_flatnessdepthcount = 0;
    int			data_flatnessradiuscount = 0;
    std::string	data_flatnessdepthvec = "";
    std::string	data_flatnessradiusvec = "";
    int			data_depthcount = 0;
    int			data_radiuscount = 0;
    std::string	data_depthvec = "";
    std::string	data_radiusvec = "";
    std::string	data_sar = "";
    int			data_tar0depthcount = 0;
    std::string	data_tar0_depth_vec = "";
    std::string	data_flatness = "";
    std::string	data_tar0 = "";
    std::string	data_sp = "";
    float		data_sp0 = 0.f;
    std::string	data_sp_prime = "";
    int			data_hidden = 0;
    std::string	data_name = "";
    float		data_dmax = 0.f;
    float		data_sad = 0.f;
    float		data_psd = 0.f;
    float		data_srcdiam1 = 0.f;
    float		data_srcdiam2 = 0.f;
    float		data_srcdiam3 = 0.f;
    float		data_srcratio1 = 0.f;
    float		data_srcratio3 = 0.f;
    float		data_eeqdiam = 0.f;
    int			data_xjawcount = 0;
    int			data_yjawcount = 0;
    int			data_xjawtype = 0;
    int			data_yjawtype = 0;
    float		data_xsdd = 0.f;
    float		data_ysdd = 0.f;
    int			data_gantrysense = 0;
    float		data_gantryoffset = 0.f;
    int			data_tablesense = 0;
    float		data_tableoffset = 0.f;
    int			data_collimatorsense = 0;
    float		data_collimatoroffset = 0.f;
    float		data_referencefluence = 0.f;
    float		data_referencedose = 0.f;
    float		data_diam1 = 0.f;
    float		data_diam2 = 0.f;
    float		data_ratio1 = 0.f;
    float		data_transmission = 0.f;
    float		data_mu = 0.f;
    float		data_dmu_dx = 0.f;
    float		data_dmu_dr = 0.f;
    std::string	data_offaxisdatax = "";
    std::string	data_offaxisdatay = "";
    std::string	data_mudatax = "";
    std::string	data_mudatay = "";
    std::string	data_dmudatay = "";
    std::string	data_outputmuy = "";
    float		data_src_d = 0.f;
    float		data_src_atten = 0.f;
    float		data_norm_10x10 = 0.f;
    int			data_ion = 0;
    float		data_dm = 0.f;
    float		data_c1 = 0.f;
    float		data_c2 = 0.f;
    float		data_c3 = 0.f;
    float		data_ffs10 = 0.f;
    float		data_k = 0.f;
    float		data_a = 0.f;
    float		data_df = 0.f;
    float		data_sf = 0.f;
    bool		data_allowcontinuousdoserate = false;
    std::string	data_discretedoserate = "";
    std::string	data_commissionunitname = "";
    bool		data_isflattened = false;
    bool		data_isconvolutionsupport = false;
    bool		data_ispencilebeamsupport = false;
    bool		data_ismontecarlosupport = false;
    std::string	data_availablephotonplantype = "";
    std::string	data_availableelectronplantype = "";
    std::string	data_datatemplatetypename = "";
    float		data_calibrationfsx = 0.f;
    float		data_calibrationfsy = 0.f;
    float		data_ssd = 0.f;
    float		data_phantomsizelateral = 0.f;
    float		data_phantomsizedepth = 0.f;
    float		data_viewcustomizedepth = 0.f;
    float		data_blocktraypenumbra = 0.f;
    float		data_blockattenfactor = 0.f;
    bool		data_viewhalfprofile = false;
    float		data_convdatastruct_sdd1 = 0.f;
    float		data_convdatastruct_sdd2 = 0.f;
    float		data_convdatastruct_psd = 0.f;
    float		data_commissionedunit_dmax = 0.f;
    int			data_datatype = 0;
    float		data_normalizeddose = 0.f;
    float		data_xjawfactor = 0.f;
    float		data_yjawfactor = 0.f;
    float		data_mlcfactor = 0.f;
    std::string	data_ddmudr = "";
    int			data_defaultdoserateindex = 0;
    bool		data_calcmode = false;
    MYSQL_TIME	data_updatetime;
    float		data_cctonguewidth = 0.f;
    float		data_ccgroovewidth = 0.f;
    float		data_ccleaftipwidth = 0.f;
    std::string	data_reservecc = "";
    float		data_pbtonguewidth = 0.f;
    float		data_pbgroovewidth = 0.f;
    float		data_pbleaftipwidth = 0.f;
    std::string	data_reservepb = "";
    float		data_cctransmission = 0.f;
    float		data_pbtransmission = 0.f;
    float		data_mindoserate_mupermin = 0.f;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < COMMISSIONEDUNIT_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//machineuid varchar
            {
                data_machineuid = src.get_machineuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_machineuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_machineuid.size();
            }
            break;
        case 2: 	//kerneldatalistuid varchar
            {
                data_kerneldatalistuid = src.get_kerneldatalistuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_kerneldatalistuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_kerneldatalistuid.size();
            }
            break;
        case 3: 	//energy float
            {
                data_energy = src.get_energy();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_energy;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 4: 	//radiationtype int
            {
                data_radiationtype = src.get_radiationtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_radiationtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 5: 	//maximumdoserate_muperminute float
            {
                data_maximumdoserate_muperminute = src.get_maximumdoserate_muperminute();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_maximumdoserate_muperminute;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 6: 	//doserate float
            {
                data_doserate = src.get_doserate();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_doserate;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 7: 	//calibrationdate date
            {
                ConvertDateTime2DB(src.get_calibrationdate(), &data_calibrationdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_calibrationdate;
                if (src.get_calibrationdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 8: 	//decayconstant float
            {
                data_decayconstant = src.get_decayconstant();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_decayconstant;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 9: 	//cal_dist float
            {
                data_cal_dist = src.get_cal_dist();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_cal_dist;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 10: 	//cal_depth float
            {
                data_cal_depth = src.get_cal_depth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_cal_depth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 11: 	//endeffect float
            {
                data_endeffect = src.get_endeffect();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_endeffect;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 12: 	//timeunits int
            {
                data_timeunits = src.get_timeunits();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_timeunits;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 13: 	//scxcount int
            {
                data_scxcount = src.get_scxcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_scxcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 14: 	//scycount int
            {
                data_scycount = src.get_scycount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_scycount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 15: 	//scxpositions varchar
            {
                data_scxpositions = src.get_scxpositions();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_scxpositions.c_str();
                bind[iCount].buffer_length = (unsigned long)data_scxpositions.size();
            }
            break;
        case 16: 	//scypositions varchar
            {
                data_scypositions = src.get_scypositions();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_scypositions.c_str();
                bind[iCount].buffer_length = (unsigned long)data_scypositions.size();
            }
            break;
        case 17: 	//sc blob
            {
                data_sc = src.get_sc();
                if(data_sc.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_sc.c_str();
                bind[iCount].buffer_length= (unsigned long)data_sc.size();
            }
            break;
        case 18: 	//type int
            {
                data_type = src.get_type();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_type;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 19: 	//version int
            {
                data_version = src.get_version();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_version;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 20: 	//tran float
            {
                data_tran = src.get_tran();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_tran;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 21: 	//flatnessdepthcount int
            {
                data_flatnessdepthcount = src.get_flatnessdepthcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_flatnessdepthcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 22: 	//flatnessradiuscount int
            {
                data_flatnessradiuscount = src.get_flatnessradiuscount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_flatnessradiuscount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 23: 	//flatnessdepthvec varchar
            {
                data_flatnessdepthvec = src.get_flatnessdepthvec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_flatnessdepthvec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_flatnessdepthvec.size();
            }
            break;
        case 24: 	//flatnessradiusvec varchar
            {
                data_flatnessradiusvec = src.get_flatnessradiusvec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_flatnessradiusvec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_flatnessradiusvec.size();
            }
            break;
        case 25: 	//depthcount int
            {
                data_depthcount = src.get_depthcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_depthcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 26: 	//radiuscount int
            {
                data_radiuscount = src.get_radiuscount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_radiuscount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 27: 	//depthvec varchar
            {
                data_depthvec = src.get_depthvec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_depthvec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_depthvec.size();
            }
            break;
        case 28: 	//radiusvec varchar
            {
                data_radiusvec = src.get_radiusvec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_radiusvec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_radiusvec.size();
            }
            break;
        case 29: 	//sar blob
            {
                data_sar = src.get_sar();
                if(data_sar.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_sar.c_str();
                bind[iCount].buffer_length= (unsigned long)data_sar.size();
            }
            break;
        case 30: 	//tar0depthcount int
            {
                data_tar0depthcount = src.get_tar0depthcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_tar0depthcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 31: 	//tar0_depth_vec varchar
            {
                data_tar0_depth_vec = src.get_tar0_depth_vec();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_tar0_depth_vec.c_str();
                bind[iCount].buffer_length = (unsigned long)data_tar0_depth_vec.size();
            }
            break;
        case 32: 	//flatness blob
            {
                data_flatness = src.get_flatness();
                if(data_flatness.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_flatness.c_str();
                bind[iCount].buffer_length= (unsigned long)data_flatness.size();
            }
            break;
        case 33: 	//tar0 varchar
            {
                data_tar0 = src.get_tar0();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_tar0.c_str();
                bind[iCount].buffer_length = (unsigned long)data_tar0.size();
            }
            break;
        case 34: 	//sp varchar
            {
                data_sp = src.get_sp();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sp.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sp.size();
            }
            break;
        case 35: 	//sp0 float
            {
                data_sp0 = src.get_sp0();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sp0;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 36: 	//sp_prime varchar
            {
                data_sp_prime = src.get_sp_prime();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sp_prime.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sp_prime.size();
            }
            break;
        case 37: 	//hidden int
            {
                data_hidden = src.get_hidden();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_hidden;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 38: 	//name varchar
            {
                data_name = src.get_name();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name.size();
            }
            break;
        case 39: 	//dmax float
            {
                data_dmax = src.get_dmax();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_dmax;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 40: 	//sad float
            {
                data_sad = src.get_sad();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sad;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 41: 	//psd float
            {
                data_psd = src.get_psd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_psd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 42: 	//srcdiam1 float
            {
                data_srcdiam1 = src.get_srcdiam1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_srcdiam1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 43: 	//srcdiam2 float
            {
                data_srcdiam2 = src.get_srcdiam2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_srcdiam2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 44: 	//srcdiam3 float
            {
                data_srcdiam3 = src.get_srcdiam3();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_srcdiam3;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 45: 	//srcratio1 float
            {
                data_srcratio1 = src.get_srcratio1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_srcratio1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 46: 	//srcratio3 float
            {
                data_srcratio3 = src.get_srcratio3();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_srcratio3;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 47: 	//eeqdiam float
            {
                data_eeqdiam = src.get_eeqdiam();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_eeqdiam;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 48: 	//xjawcount int
            {
                data_xjawcount = src.get_xjawcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_xjawcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 49: 	//yjawcount int
            {
                data_yjawcount = src.get_yjawcount();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_yjawcount;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 50: 	//xjawtype int
            {
                data_xjawtype = src.get_xjawtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_xjawtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 51: 	//yjawtype int
            {
                data_yjawtype = src.get_yjawtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_yjawtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 52: 	//xsdd float
            {
                data_xsdd = src.get_xsdd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_xsdd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 53: 	//ysdd float
            {
                data_ysdd = src.get_ysdd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ysdd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 54: 	//gantrysense int
            {
                data_gantrysense = src.get_gantrysense();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_gantrysense;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 55: 	//gantryoffset float
            {
                data_gantryoffset = src.get_gantryoffset();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_gantryoffset;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 56: 	//tablesense int
            {
                data_tablesense = src.get_tablesense();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_tablesense;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 57: 	//tableoffset float
            {
                data_tableoffset = src.get_tableoffset();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_tableoffset;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 58: 	//collimatorsense int
            {
                data_collimatorsense = src.get_collimatorsense();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_collimatorsense;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 59: 	//collimatoroffset float
            {
                data_collimatoroffset = src.get_collimatoroffset();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_collimatoroffset;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 60: 	//referencefluence float
            {
                data_referencefluence = src.get_referencefluence();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_referencefluence;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 61: 	//referencedose float
            {
                data_referencedose = src.get_referencedose();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_referencedose;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 62: 	//diam1 float
            {
                data_diam1 = src.get_diam1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_diam1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 63: 	//diam2 float
            {
                data_diam2 = src.get_diam2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_diam2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 64: 	//ratio1 float
            {
                data_ratio1 = src.get_ratio1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ratio1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 65: 	//transmission float
            {
                data_transmission = src.get_transmission();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_transmission;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 66: 	//mu float
            {
                data_mu = src.get_mu();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mu;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 67: 	//dmu_dx float
            {
                data_dmu_dx = src.get_dmu_dx();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_dmu_dx;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 68: 	//dmu_dr float
            {
                data_dmu_dr = src.get_dmu_dr();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_dmu_dr;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 69: 	//offaxisdatax varchar
            {
                data_offaxisdatax = src.get_offaxisdatax();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_offaxisdatax.c_str();
                bind[iCount].buffer_length = (unsigned long)data_offaxisdatax.size();
            }
            break;
        case 70: 	//offaxisdatay varchar
            {
                data_offaxisdatay = src.get_offaxisdatay();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_offaxisdatay.c_str();
                bind[iCount].buffer_length = (unsigned long)data_offaxisdatay.size();
            }
            break;
        case 71: 	//mudatax varchar
            {
                data_mudatax = src.get_mudatax();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mudatax.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mudatax.size();
            }
            break;
        case 72: 	//mudatay varchar
            {
                data_mudatay = src.get_mudatay();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_mudatay.c_str();
                bind[iCount].buffer_length = (unsigned long)data_mudatay.size();
            }
            break;
        case 73: 	//dmudatay varchar
            {
                data_dmudatay = src.get_dmudatay();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_dmudatay.c_str();
                bind[iCount].buffer_length = (unsigned long)data_dmudatay.size();
            }
            break;
        case 74: 	//outputmuy blob
            {
                data_outputmuy = src.get_outputmuy();
                if(data_outputmuy.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_outputmuy.c_str();
                bind[iCount].buffer_length= (unsigned long)data_outputmuy.size();
            }
            break;
        case 75: 	//src_d float
            {
                data_src_d = src.get_src_d();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_src_d;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 76: 	//src_atten float
            {
                data_src_atten = src.get_src_atten();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_src_atten;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 77: 	//norm_10x10 float
            {
                data_norm_10x10 = src.get_norm_10x10();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_norm_10x10;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 78: 	//ion int
            {
                data_ion = src.get_ion();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_ion;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 79: 	//dm float
            {
                data_dm = src.get_dm();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_dm;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 80: 	//c1 float
            {
                data_c1 = src.get_c1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_c1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 81: 	//c2 float
            {
                data_c2 = src.get_c2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_c2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 82: 	//c3 float
            {
                data_c3 = src.get_c3();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_c3;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 83: 	//ffs10 float
            {
                data_ffs10 = src.get_ffs10();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ffs10;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 84: 	//k float
            {
                data_k = src.get_k();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_k;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 85: 	//a float
            {
                data_a = src.get_a();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_a;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 86: 	//df float
            {
                data_df = src.get_df();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_df;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 87: 	//sf float
            {
                data_sf = src.get_sf();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sf;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 88: 	//allowcontinuousdoserate tinyint
            {
                data_allowcontinuousdoserate = src.get_allowcontinuousdoserate();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_allowcontinuousdoserate;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 89: 	//discretedoserate varchar
            {
                std::vector<float> discretedoserate = src.get_discretedoserate();
                if(discretedoserate.empty()) bind[iCount].is_null = &isnull;
                const size_t vSize = discretedoserate.size();
                if (vSize > 0){
                    data_discretedoserate += std::to_string((long double)(discretedoserate[0]));
                    for (int x(1); x<vSize; ++x){
                        data_discretedoserate += "," + std::to_string((long double)(discretedoserate[x]));
                    }
                }
                bind[iCount].buffer_type= MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer= (void *)data_discretedoserate.c_str();
                bind[iCount].buffer_length= (unsigned long)data_discretedoserate.size();
            }
            break;
        case 90: 	//commissionunitname varchar
            {
                data_commissionunitname = src.get_commissionunitname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_commissionunitname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_commissionunitname.size();
            }
            break;
        case 91: 	//isflattened tinyint
            {
                data_isflattened = src.get_isflattened();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isflattened;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 92: 	//isconvolutionsupport tinyint
            {
                data_isconvolutionsupport = src.get_isconvolutionsupport();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isconvolutionsupport;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 93: 	//ispencilebeamsupport tinyint
            {
                data_ispencilebeamsupport = src.get_ispencilebeamsupport();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_ispencilebeamsupport;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 94: 	//ismontecarlosupport tinyint
            {
                data_ismontecarlosupport = src.get_ismontecarlosupport();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_ismontecarlosupport;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 95: 	//availablephotonplantype varchar
            {
                data_availablephotonplantype = src.get_availablephotonplantype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_availablephotonplantype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_availablephotonplantype.size();
            }
            break;
        case 96: 	//availableelectronplantype varchar
            {
                data_availableelectronplantype = src.get_availableelectronplantype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_availableelectronplantype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_availableelectronplantype.size();
            }
            break;
        case 97: 	//datatemplatetypename varchar
            {
                data_datatemplatetypename = src.get_datatemplatetypename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_datatemplatetypename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_datatemplatetypename.size();
            }
            break;
        case 98: 	//calibrationfsx float
            {
                data_calibrationfsx = src.get_calibrationfsx();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_calibrationfsx;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 99: 	//calibrationfsy float
            {
                data_calibrationfsy = src.get_calibrationfsy();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_calibrationfsy;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 100: 	//ssd float
            {
                data_ssd = src.get_ssd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ssd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 101: 	//phantomsizelateral float
            {
                data_phantomsizelateral = src.get_phantomsizelateral();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_phantomsizelateral;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 102: 	//phantomsizedepth float
            {
                data_phantomsizedepth = src.get_phantomsizedepth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_phantomsizedepth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 103: 	//viewcustomizedepth float
            {
                data_viewcustomizedepth = src.get_viewcustomizedepth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_viewcustomizedepth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 104: 	//blocktraypenumbra float
            {
                data_blocktraypenumbra = src.get_blocktraypenumbra();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_blocktraypenumbra;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 105: 	//blockattenfactor float
            {
                data_blockattenfactor = src.get_blockattenfactor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_blockattenfactor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 106: 	//viewhalfprofile tinyint
            {
                data_viewhalfprofile = src.get_viewhalfprofile();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_viewhalfprofile;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 107: 	//convdatastruct_sdd1 float
            {
                data_convdatastruct_sdd1 = src.get_convdatastruct_sdd1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_convdatastruct_sdd1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 108: 	//convdatastruct_sdd2 float
            {
                data_convdatastruct_sdd2 = src.get_convdatastruct_sdd2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_convdatastruct_sdd2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 109: 	//convdatastruct_psd float
            {
                data_convdatastruct_psd = src.get_convdatastruct_psd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_convdatastruct_psd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 110: 	//commissionedunit_dmax float
            {
                data_commissionedunit_dmax = src.get_commissionedunit_dmax();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_commissionedunit_dmax;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 111: 	//datatype int
            {
                data_datatype = src.get_datatype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_datatype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 112: 	//normalizeddose float
            {
                data_normalizeddose = src.get_normalizeddose();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_normalizeddose;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 113: 	//xjawfactor float
            {
                data_xjawfactor = src.get_xjawfactor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_xjawfactor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 114: 	//yjawfactor float
            {
                data_yjawfactor = src.get_yjawfactor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_yjawfactor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 115: 	//mlcfactor float
            {
                data_mlcfactor = src.get_mlcfactor();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mlcfactor;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 116: 	//ddmudr varchar
            {
                data_ddmudr = src.get_ddmudr();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_ddmudr.c_str();
                bind[iCount].buffer_length = (unsigned long)data_ddmudr.size();
            }
            break;
        case 117: 	//defaultdoserateindex int
            {
                data_defaultdoserateindex = src.get_defaultdoserateindex();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_defaultdoserateindex;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 118: 	//calcmode tinyint
            {
                data_calcmode = src.get_calcmode();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_calcmode;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 119: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 120: 	//cctonguewidth float
            {
                data_cctonguewidth = src.get_cctonguewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_cctonguewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 121: 	//ccgroovewidth float
            {
                data_ccgroovewidth = src.get_ccgroovewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ccgroovewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 122: 	//ccleaftipwidth float
            {
                data_ccleaftipwidth = src.get_ccleaftipwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ccleaftipwidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 123: 	//reservecc varchar
            {
                data_reservecc = src.get_reservecc();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_reservecc.c_str();
                bind[iCount].buffer_length = (unsigned long)data_reservecc.size();
            }
            break;
        case 124: 	//pbtonguewidth float
            {
                data_pbtonguewidth = src.get_pbtonguewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_pbtonguewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 125: 	//pbgroovewidth float
            {
                data_pbgroovewidth = src.get_pbgroovewidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_pbgroovewidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 126: 	//pbleaftipwidth float
            {
                data_pbleaftipwidth = src.get_pbleaftipwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_pbleaftipwidth;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 127: 	//reservepb varchar
            {
                data_reservepb = src.get_reservepb();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_reservepb.c_str();
                bind[iCount].buffer_length = (unsigned long)data_reservepb.size();
            }
            break;
        case 128: 	//cctransmission float
            {
                data_cctransmission = src.get_cctransmission();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_cctransmission;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 129: 	//pbtransmission float
            {
                data_pbtransmission = src.get_pbtransmission();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_pbtransmission;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 130: 	//mindoserate_mupermin float
            {
                data_mindoserate_mupermin = src.get_mindoserate_mupermin();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_mindoserate_mupermin;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtCommissionedunit*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtCommissionedunit*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmscommissionedunit    131 parameters
    const int field_num = COMMISSIONEDUNIT_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 64;
    MAX_LENGTH[3] = 0;
    MAX_LENGTH[4] = 0;
    MAX_LENGTH[5] = 0;
    MAX_LENGTH[6] = 0;
    MAX_LENGTH[7] = 0;
    MAX_LENGTH[8] = 0;
    MAX_LENGTH[9] = 0;
    MAX_LENGTH[10] = 0;
    MAX_LENGTH[11] = 0;
    MAX_LENGTH[12] = 0;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 0;
    MAX_LENGTH[15] = 1024;
    MAX_LENGTH[16] = 1024;
    MAX_LENGTH[17] = 65535;
    MAX_LENGTH[18] = 0;
    MAX_LENGTH[19] = 0;
    MAX_LENGTH[20] = 0;
    MAX_LENGTH[21] = 0;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 256;
    MAX_LENGTH[24] = 1024;
    MAX_LENGTH[25] = 0;
    MAX_LENGTH[26] = 0;
    MAX_LENGTH[27] = 1024;
    MAX_LENGTH[28] = 1024;
    MAX_LENGTH[29] = 65535;
    MAX_LENGTH[30] = 0;
    MAX_LENGTH[31] = 2048;
    MAX_LENGTH[32] = 65535;
    MAX_LENGTH[33] = 1024;
    MAX_LENGTH[34] = 1024;
    MAX_LENGTH[35] = 0;
    MAX_LENGTH[36] = 1024;
    MAX_LENGTH[37] = 0;
    MAX_LENGTH[38] = 512;
    MAX_LENGTH[39] = 0;
    MAX_LENGTH[40] = 0;
    MAX_LENGTH[41] = 0;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 0;
    MAX_LENGTH[44] = 0;
    MAX_LENGTH[45] = 0;
    MAX_LENGTH[46] = 0;
    MAX_LENGTH[47] = 0;
    MAX_LENGTH[48] = 0;
    MAX_LENGTH[49] = 0;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 0;
    MAX_LENGTH[52] = 0;
    MAX_LENGTH[53] = 0;
    MAX_LENGTH[54] = 0;
    MAX_LENGTH[55] = 0;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 0;
    MAX_LENGTH[58] = 0;
    MAX_LENGTH[59] = 0;
    MAX_LENGTH[60] = 0;
    MAX_LENGTH[61] = 0;
    MAX_LENGTH[62] = 0;
    MAX_LENGTH[63] = 0;
    MAX_LENGTH[64] = 0;
    MAX_LENGTH[65] = 0;
    MAX_LENGTH[66] = 0;
    MAX_LENGTH[67] = 0;
    MAX_LENGTH[68] = 0;
    MAX_LENGTH[69] = 512;
    MAX_LENGTH[70] = 512;
    MAX_LENGTH[71] = 512;
    MAX_LENGTH[72] = 512;
    MAX_LENGTH[73] = 512;
    MAX_LENGTH[74] = 65535;
    MAX_LENGTH[75] = 0;
    MAX_LENGTH[76] = 0;
    MAX_LENGTH[77] = 0;
    MAX_LENGTH[78] = 0;
    MAX_LENGTH[79] = 0;
    MAX_LENGTH[80] = 0;
    MAX_LENGTH[81] = 0;
    MAX_LENGTH[82] = 0;
    MAX_LENGTH[83] = 0;
    MAX_LENGTH[84] = 0;
    MAX_LENGTH[85] = 0;
    MAX_LENGTH[86] = 0;
    MAX_LENGTH[87] = 0;
    MAX_LENGTH[88] = 0;
    MAX_LENGTH[89] = 512;
    MAX_LENGTH[90] = 512;
    MAX_LENGTH[91] = 0;
    MAX_LENGTH[92] = 0;
    MAX_LENGTH[93] = 0;
    MAX_LENGTH[94] = 0;
    MAX_LENGTH[95] = 1024;
    MAX_LENGTH[96] = 1024;
    MAX_LENGTH[97] = 64;
    MAX_LENGTH[98] = 0;
    MAX_LENGTH[99] = 0;
    MAX_LENGTH[100] = 0;
    MAX_LENGTH[101] = 0;
    MAX_LENGTH[102] = 0;
    MAX_LENGTH[103] = 0;
    MAX_LENGTH[104] = 0;
    MAX_LENGTH[105] = 0;
    MAX_LENGTH[106] = 0;
    MAX_LENGTH[107] = 0;
    MAX_LENGTH[108] = 0;
    MAX_LENGTH[109] = 0;
    MAX_LENGTH[110] = 0;
    MAX_LENGTH[111] = 0;
    MAX_LENGTH[112] = 0;
    MAX_LENGTH[113] = 0;
    MAX_LENGTH[114] = 0;
    MAX_LENGTH[115] = 0;
    MAX_LENGTH[116] = 512;
    MAX_LENGTH[117] = 0;
    MAX_LENGTH[118] = 0;
    MAX_LENGTH[119] = 0;
    MAX_LENGTH[120] = 0;
    MAX_LENGTH[121] = 0;
    MAX_LENGTH[122] = 0;
    MAX_LENGTH[123] = 1024;
    MAX_LENGTH[124] = 0;
    MAX_LENGTH[125] = 0;
    MAX_LENGTH[126] = 0;
    MAX_LENGTH[127] = 1024;
    MAX_LENGTH[128] = 0;
    MAX_LENGTH[129] = 0;
    MAX_LENGTH[130] = 0;

    //std::string	data_uid
    //std::string	data_machineuid
    //std::string	data_kerneldatalistuid
    float	data_energy = 0.f;
    int	data_radiationtype = 0;
    float	data_maximumdoserate_muperminute = 0.f;
    float	data_doserate = 0.f;
    MYSQL_TIME	data_calibrationdate;
    float	data_decayconstant = 0.f;
    float	data_cal_dist = 0.f;
    float	data_cal_depth = 0.f;
    float	data_endeffect = 0.f;
    int	data_timeunits = 0;
    int	data_scxcount = 0;
    int	data_scycount = 0;
    //std::string	data_scxpositions
    //std::string	data_scypositions
    //std::string	data_sc;
    int	data_type = 0;
    int	data_version = 0;
    float	data_tran = 0.f;
    int	data_flatnessdepthcount = 0;
    int	data_flatnessradiuscount = 0;
    //std::string	data_flatnessdepthvec
    //std::string	data_flatnessradiusvec
    int	data_depthcount = 0;
    int	data_radiuscount = 0;
    //std::string	data_depthvec
    //std::string	data_radiusvec
    //std::string	data_sar;
    int	data_tar0depthcount = 0;
    //std::string	data_tar0_depth_vec
    //std::string	data_flatness;
    //std::string	data_tar0
    //std::string	data_sp
    float	data_sp0 = 0.f;
    //std::string	data_sp_prime
    int	data_hidden = 0;
    //std::string	data_name
    float	data_dmax = 0.f;
    float	data_sad = 0.f;
    float	data_psd = 0.f;
    float	data_srcdiam1 = 0.f;
    float	data_srcdiam2 = 0.f;
    float	data_srcdiam3 = 0.f;
    float	data_srcratio1 = 0.f;
    float	data_srcratio3 = 0.f;
    float	data_eeqdiam = 0.f;
    int	data_xjawcount = 0;
    int	data_yjawcount = 0;
    int	data_xjawtype = 0;
    int	data_yjawtype = 0;
    float	data_xsdd = 0.f;
    float	data_ysdd = 0.f;
    int	data_gantrysense = 0;
    float	data_gantryoffset = 0.f;
    int	data_tablesense = 0;
    float	data_tableoffset = 0.f;
    int	data_collimatorsense = 0;
    float	data_collimatoroffset = 0.f;
    float	data_referencefluence = 0.f;
    float	data_referencedose = 0.f;
    float	data_diam1 = 0.f;
    float	data_diam2 = 0.f;
    float	data_ratio1 = 0.f;
    float	data_transmission = 0.f;
    float	data_mu = 0.f;
    float	data_dmu_dx = 0.f;
    float	data_dmu_dr = 0.f;
    //std::string	data_offaxisdatax
    //std::string	data_offaxisdatay
    //std::string	data_mudatax
    //std::string	data_mudatay
    //std::string	data_dmudatay
    //std::string	data_outputmuy;
    float	data_src_d = 0.f;
    float	data_src_atten = 0.f;
    float	data_norm_10x10 = 0.f;
    int	data_ion = 0;
    float	data_dm = 0.f;
    float	data_c1 = 0.f;
    float	data_c2 = 0.f;
    float	data_c3 = 0.f;
    float	data_ffs10 = 0.f;
    float	data_k = 0.f;
    float	data_a = 0.f;
    float	data_df = 0.f;
    float	data_sf = 0.f;
    bool	data_allowcontinuousdoserate = false;
    //std::vector<float>	data_discretedoserate
    //std::string	data_commissionunitname
    bool	data_isflattened = false;
    bool	data_isconvolutionsupport = false;
    bool	data_ispencilebeamsupport = false;
    bool	data_ismontecarlosupport = false;
    //std::string	data_availablephotonplantype
    //std::string	data_availableelectronplantype
    //std::string	data_datatemplatetypename
    float	data_calibrationfsx = 0.f;
    float	data_calibrationfsy = 0.f;
    float	data_ssd = 0.f;
    float	data_phantomsizelateral = 0.f;
    float	data_phantomsizedepth = 0.f;
    float	data_viewcustomizedepth = 0.f;
    float	data_blocktraypenumbra = 0.f;
    float	data_blockattenfactor = 0.f;
    bool	data_viewhalfprofile = false;
    float	data_convdatastruct_sdd1 = 0.f;
    float	data_convdatastruct_sdd2 = 0.f;
    float	data_convdatastruct_psd = 0.f;
    float	data_commissionedunit_dmax = 0.f;
    int	data_datatype = 0;
    float	data_normalizeddose = 0.f;
    float	data_xjawfactor = 0.f;
    float	data_yjawfactor = 0.f;
    float	data_mlcfactor = 0.f;
    //std::string	data_ddmudr
    int	data_defaultdoserateindex = 0;
    bool	data_calcmode = false;
    MYSQL_TIME	data_updatetime;
    float	data_cctonguewidth = 0.f;
    float	data_ccgroovewidth = 0.f;
    float	data_ccleaftipwidth = 0.f;
    //std::string	data_reservecc
    float	data_pbtonguewidth = 0.f;
    float	data_pbgroovewidth = 0.f;
    float	data_pbleaftipwidth = 0.f;
    //std::string	data_reservepb
    float	data_cctransmission = 0.f;
    float	data_pbtransmission = 0.f;
    float	data_mindoserate_mupermin = 0.f;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 3: 	//energy float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_energy;
            break;
        case 4: 	//radiationtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_radiationtype;
            break;
        case 5: 	//maximumdoserate_muperminute float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_maximumdoserate_muperminute;
            break;
        case 6: 	//doserate float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_doserate;
            break;
        case 7: 	//calibrationdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_calibrationdate;
            break;
        case 8: 	//decayconstant float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_decayconstant;
            break;
        case 9: 	//cal_dist float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_cal_dist;
            break;
        case 10: 	//cal_depth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_cal_depth;
            break;
        case 11: 	//endeffect float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_endeffect;
            break;
        case 12: 	//timeunits int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_timeunits;
            break;
        case 13: 	//scxcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_scxcount;
            break;
        case 14: 	//scycount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_scycount;
            break;
        case 17: 	//sc blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 18: 	//type int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_type;
            break;
        case 19: 	//version int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_version;
            break;
        case 20: 	//tran float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_tran;
            break;
        case 21: 	//flatnessdepthcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_flatnessdepthcount;
            break;
        case 22: 	//flatnessradiuscount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_flatnessradiuscount;
            break;
        case 25: 	//depthcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_depthcount;
            break;
        case 26: 	//radiuscount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_radiuscount;
            break;
        case 29: 	//sar blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 30: 	//tar0depthcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_tar0depthcount;
            break;
        case 32: 	//flatness blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 35: 	//sp0 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sp0;
            break;
        case 37: 	//hidden int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_hidden;
            break;
        case 39: 	//dmax float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_dmax;
            break;
        case 40: 	//sad float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sad;
            break;
        case 41: 	//psd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_psd;
            break;
        case 42: 	//srcdiam1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_srcdiam1;
            break;
        case 43: 	//srcdiam2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_srcdiam2;
            break;
        case 44: 	//srcdiam3 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_srcdiam3;
            break;
        case 45: 	//srcratio1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_srcratio1;
            break;
        case 46: 	//srcratio3 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_srcratio3;
            break;
        case 47: 	//eeqdiam float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_eeqdiam;
            break;
        case 48: 	//xjawcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_xjawcount;
            break;
        case 49: 	//yjawcount int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_yjawcount;
            break;
        case 50: 	//xjawtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_xjawtype;
            break;
        case 51: 	//yjawtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_yjawtype;
            break;
        case 52: 	//xsdd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_xsdd;
            break;
        case 53: 	//ysdd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ysdd;
            break;
        case 54: 	//gantrysense int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_gantrysense;
            break;
        case 55: 	//gantryoffset float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_gantryoffset;
            break;
        case 56: 	//tablesense int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_tablesense;
            break;
        case 57: 	//tableoffset float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_tableoffset;
            break;
        case 58: 	//collimatorsense int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_collimatorsense;
            break;
        case 59: 	//collimatoroffset float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_collimatoroffset;
            break;
        case 60: 	//referencefluence float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_referencefluence;
            break;
        case 61: 	//referencedose float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_referencedose;
            break;
        case 62: 	//diam1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_diam1;
            break;
        case 63: 	//diam2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_diam2;
            break;
        case 64: 	//ratio1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ratio1;
            break;
        case 65: 	//transmission float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_transmission;
            break;
        case 66: 	//mu float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mu;
            break;
        case 67: 	//dmu_dx float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_dmu_dx;
            break;
        case 68: 	//dmu_dr float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_dmu_dr;
            break;
        case 74: 	//outputmuy blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 75: 	//src_d float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_src_d;
            break;
        case 76: 	//src_atten float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_src_atten;
            break;
        case 77: 	//norm_10x10 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_norm_10x10;
            break;
        case 78: 	//ion int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_ion;
            break;
        case 79: 	//dm float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_dm;
            break;
        case 80: 	//c1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_c1;
            break;
        case 81: 	//c2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_c2;
            break;
        case 82: 	//c3 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_c3;
            break;
        case 83: 	//ffs10 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ffs10;
            break;
        case 84: 	//k float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_k;
            break;
        case 85: 	//a float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_a;
            break;
        case 86: 	//df float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_df;
            break;
        case 87: 	//sf float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sf;
            break;
        case 88: 	//allowcontinuousdoserate tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_allowcontinuousdoserate;
            break;
        case 91: 	//isflattened tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isflattened;
            break;
        case 92: 	//isconvolutionsupport tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isconvolutionsupport;
            break;
        case 93: 	//ispencilebeamsupport tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_ispencilebeamsupport;
            break;
        case 94: 	//ismontecarlosupport tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_ismontecarlosupport;
            break;
        case 98: 	//calibrationfsx float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_calibrationfsx;
            break;
        case 99: 	//calibrationfsy float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_calibrationfsy;
            break;
        case 100: 	//ssd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ssd;
            break;
        case 101: 	//phantomsizelateral float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_phantomsizelateral;
            break;
        case 102: 	//phantomsizedepth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_phantomsizedepth;
            break;
        case 103: 	//viewcustomizedepth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_viewcustomizedepth;
            break;
        case 104: 	//blocktraypenumbra float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_blocktraypenumbra;
            break;
        case 105: 	//blockattenfactor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_blockattenfactor;
            break;
        case 106: 	//viewhalfprofile tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_viewhalfprofile;
            break;
        case 107: 	//convdatastruct_sdd1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_convdatastruct_sdd1;
            break;
        case 108: 	//convdatastruct_sdd2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_convdatastruct_sdd2;
            break;
        case 109: 	//convdatastruct_psd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_convdatastruct_psd;
            break;
        case 110: 	//commissionedunit_dmax float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_commissionedunit_dmax;
            break;
        case 111: 	//datatype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_datatype;
            break;
        case 112: 	//normalizeddose float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_normalizeddose;
            break;
        case 113: 	//xjawfactor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_xjawfactor;
            break;
        case 114: 	//yjawfactor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_yjawfactor;
            break;
        case 115: 	//mlcfactor float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mlcfactor;
            break;
        case 117: 	//defaultdoserateindex int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_defaultdoserateindex;
            break;
        case 118: 	//calcmode tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_calcmode;
            break;
        case 119: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        case 120: 	//cctonguewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_cctonguewidth;
            break;
        case 121: 	//ccgroovewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ccgroovewidth;
            break;
        case 122: 	//ccleaftipwidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ccleaftipwidth;
            break;
        case 124: 	//pbtonguewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_pbtonguewidth;
            break;
        case 125: 	//pbgroovewidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_pbgroovewidth;
            break;
        case 126: 	//pbleaftipwidth float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_pbleaftipwidth;
            break;
        case 128: 	//cctransmission float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_cctransmission;
            break;
        case 129: 	//pbtransmission float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_pbtransmission;
            break;
        case 130: 	//mindoserate_mupermin float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_mindoserate_mupermin;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtCommissionedunit* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtCommissionedunit();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//machineuid varchar
                pDis->set_machineuid((char *)bind[i].buffer);
                break;
            case 2: 	//kerneldatalistuid varchar
                pDis->set_kerneldatalistuid((char *)bind[i].buffer);
                break;
            case 3: 	//energy float
                pDis->set_energy(data_energy);
                break;
            case 4: 	//radiationtype int
                pDis->set_radiationtype(data_radiationtype);
                break;
            case 5: 	//maximumdoserate_muperminute float
                pDis->set_maximumdoserate_muperminute(data_maximumdoserate_muperminute);
                break;
            case 6: 	//doserate float
                pDis->set_doserate(data_doserate);
                break;
            case 7: 	//calibrationdate date
                {
                    DATE_BOOST calibrationdate;
                    ConvertDateTime2Boost(data_calibrationdate, &calibrationdate);
                    pDis->set_calibrationdate(calibrationdate);
                }
                break;
            case 8: 	//decayconstant float
                pDis->set_decayconstant(data_decayconstant);
                break;
            case 9: 	//cal_dist float
                pDis->set_cal_dist(data_cal_dist);
                break;
            case 10: 	//cal_depth float
                pDis->set_cal_depth(data_cal_depth);
                break;
            case 11: 	//endeffect float
                pDis->set_endeffect(data_endeffect);
                break;
            case 12: 	//timeunits int
                pDis->set_timeunits(data_timeunits);
                break;
            case 13: 	//scxcount int
                pDis->set_scxcount(data_scxcount);
                break;
            case 14: 	//scycount int
                pDis->set_scycount(data_scycount);
                break;
            case 15: 	//scxpositions varchar
                pDis->set_scxpositions((char *)bind[i].buffer);
                break;
            case 16: 	//scypositions varchar
                pDis->set_scypositions((char *)bind[i].buffer);
                break;
            case 17: 	//sc blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_sc(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 18: 	//type int
                pDis->set_type(data_type);
                break;
            case 19: 	//version int
                pDis->set_version(data_version);
                break;
            case 20: 	//tran float
                pDis->set_tran(data_tran);
                break;
            case 21: 	//flatnessdepthcount int
                pDis->set_flatnessdepthcount(data_flatnessdepthcount);
                break;
            case 22: 	//flatnessradiuscount int
                pDis->set_flatnessradiuscount(data_flatnessradiuscount);
                break;
            case 23: 	//flatnessdepthvec varchar
                pDis->set_flatnessdepthvec((char *)bind[i].buffer);
                break;
            case 24: 	//flatnessradiusvec varchar
                pDis->set_flatnessradiusvec((char *)bind[i].buffer);
                break;
            case 25: 	//depthcount int
                pDis->set_depthcount(data_depthcount);
                break;
            case 26: 	//radiuscount int
                pDis->set_radiuscount(data_radiuscount);
                break;
            case 27: 	//depthvec varchar
                pDis->set_depthvec((char *)bind[i].buffer);
                break;
            case 28: 	//radiusvec varchar
                pDis->set_radiusvec((char *)bind[i].buffer);
                break;
            case 29: 	//sar blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_sar(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 30: 	//tar0depthcount int
                pDis->set_tar0depthcount(data_tar0depthcount);
                break;
            case 31: 	//tar0_depth_vec varchar
                pDis->set_tar0_depth_vec((char *)bind[i].buffer);
                break;
            case 32: 	//flatness blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_flatness(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 33: 	//tar0 varchar
                pDis->set_tar0((char *)bind[i].buffer);
                break;
            case 34: 	//sp varchar
                pDis->set_sp((char *)bind[i].buffer);
                break;
            case 35: 	//sp0 float
                pDis->set_sp0(data_sp0);
                break;
            case 36: 	//sp_prime varchar
                pDis->set_sp_prime((char *)bind[i].buffer);
                break;
            case 37: 	//hidden int
                pDis->set_hidden(data_hidden);
                break;
            case 38: 	//name varchar
                pDis->set_name((char *)bind[i].buffer);
                break;
            case 39: 	//dmax float
                pDis->set_dmax(data_dmax);
                break;
            case 40: 	//sad float
                pDis->set_sad(data_sad);
                break;
            case 41: 	//psd float
                pDis->set_psd(data_psd);
                break;
            case 42: 	//srcdiam1 float
                pDis->set_srcdiam1(data_srcdiam1);
                break;
            case 43: 	//srcdiam2 float
                pDis->set_srcdiam2(data_srcdiam2);
                break;
            case 44: 	//srcdiam3 float
                pDis->set_srcdiam3(data_srcdiam3);
                break;
            case 45: 	//srcratio1 float
                pDis->set_srcratio1(data_srcratio1);
                break;
            case 46: 	//srcratio3 float
                pDis->set_srcratio3(data_srcratio3);
                break;
            case 47: 	//eeqdiam float
                pDis->set_eeqdiam(data_eeqdiam);
                break;
            case 48: 	//xjawcount int
                pDis->set_xjawcount(data_xjawcount);
                break;
            case 49: 	//yjawcount int
                pDis->set_yjawcount(data_yjawcount);
                break;
            case 50: 	//xjawtype int
                pDis->set_xjawtype(data_xjawtype);
                break;
            case 51: 	//yjawtype int
                pDis->set_yjawtype(data_yjawtype);
                break;
            case 52: 	//xsdd float
                pDis->set_xsdd(data_xsdd);
                break;
            case 53: 	//ysdd float
                pDis->set_ysdd(data_ysdd);
                break;
            case 54: 	//gantrysense int
                pDis->set_gantrysense(data_gantrysense);
                break;
            case 55: 	//gantryoffset float
                pDis->set_gantryoffset(data_gantryoffset);
                break;
            case 56: 	//tablesense int
                pDis->set_tablesense(data_tablesense);
                break;
            case 57: 	//tableoffset float
                pDis->set_tableoffset(data_tableoffset);
                break;
            case 58: 	//collimatorsense int
                pDis->set_collimatorsense(data_collimatorsense);
                break;
            case 59: 	//collimatoroffset float
                pDis->set_collimatoroffset(data_collimatoroffset);
                break;
            case 60: 	//referencefluence float
                pDis->set_referencefluence(data_referencefluence);
                break;
            case 61: 	//referencedose float
                pDis->set_referencedose(data_referencedose);
                break;
            case 62: 	//diam1 float
                pDis->set_diam1(data_diam1);
                break;
            case 63: 	//diam2 float
                pDis->set_diam2(data_diam2);
                break;
            case 64: 	//ratio1 float
                pDis->set_ratio1(data_ratio1);
                break;
            case 65: 	//transmission float
                pDis->set_transmission(data_transmission);
                break;
            case 66: 	//mu float
                pDis->set_mu(data_mu);
                break;
            case 67: 	//dmu_dx float
                pDis->set_dmu_dx(data_dmu_dx);
                break;
            case 68: 	//dmu_dr float
                pDis->set_dmu_dr(data_dmu_dr);
                break;
            case 69: 	//offaxisdatax varchar
                pDis->set_offaxisdatax((char *)bind[i].buffer);
                break;
            case 70: 	//offaxisdatay varchar
                pDis->set_offaxisdatay((char *)bind[i].buffer);
                break;
            case 71: 	//mudatax varchar
                pDis->set_mudatax((char *)bind[i].buffer);
                break;
            case 72: 	//mudatay varchar
                pDis->set_mudatay((char *)bind[i].buffer);
                break;
            case 73: 	//dmudatay varchar
                pDis->set_dmudatay((char *)bind[i].buffer);
                break;
            case 74: 	//outputmuy blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_outputmuy(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 75: 	//src_d float
                pDis->set_src_d(data_src_d);
                break;
            case 76: 	//src_atten float
                pDis->set_src_atten(data_src_atten);
                break;
            case 77: 	//norm_10x10 float
                pDis->set_norm_10x10(data_norm_10x10);
                break;
            case 78: 	//ion int
                pDis->set_ion(data_ion);
                break;
            case 79: 	//dm float
                pDis->set_dm(data_dm);
                break;
            case 80: 	//c1 float
                pDis->set_c1(data_c1);
                break;
            case 81: 	//c2 float
                pDis->set_c2(data_c2);
                break;
            case 82: 	//c3 float
                pDis->set_c3(data_c3);
                break;
            case 83: 	//ffs10 float
                pDis->set_ffs10(data_ffs10);
                break;
            case 84: 	//k float
                pDis->set_k(data_k);
                break;
            case 85: 	//a float
                pDis->set_a(data_a);
                break;
            case 86: 	//df float
                pDis->set_df(data_df);
                break;
            case 87: 	//sf float
                pDis->set_sf(data_sf);
                break;
            case 88: 	//allowcontinuousdoserate tinyint
                pDis->set_allowcontinuousdoserate(data_allowcontinuousdoserate);
                break;
            case 89: 	//discretedoserate varchar
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret)
                    {
                        std::vector<std::string> vecDoserateString;
                        (void)boost::split(vecDoserateString, buf, boost::is_any_of(","));
                        std::vector<float> vecDoserateFloat;
                        for (auto itStr=vecDoserateString.begin(); itStr!=vecDoserateString.end(); ++itStr)
                        {
                            float bound = (*itStr).empty() ? 0.f : (float)atof((*itStr).c_str());
                            vecDoserateFloat.push_back(bound);
                        }
                        pDis->set_discretedoserate(vecDoserateFloat);
                    }
                    DEL_ARRAY(buf);
                }
                break;
            case 90: 	//commissionunitname varchar
                pDis->set_commissionunitname((char *)bind[i].buffer);
                break;
            case 91: 	//isflattened tinyint
                pDis->set_isflattened(data_isflattened);
                break;
            case 92: 	//isconvolutionsupport tinyint
                pDis->set_isconvolutionsupport(data_isconvolutionsupport);
                break;
            case 93: 	//ispencilebeamsupport tinyint
                pDis->set_ispencilebeamsupport(data_ispencilebeamsupport);
                break;
            case 94: 	//ismontecarlosupport tinyint
                pDis->set_ismontecarlosupport(data_ismontecarlosupport);
                break;
            case 95: 	//availablephotonplantype varchar
                pDis->set_availablephotonplantype((char *)bind[i].buffer);
                break;
            case 96: 	//availableelectronplantype varchar
                pDis->set_availableelectronplantype((char *)bind[i].buffer);
                break;
            case 97: 	//datatemplatetypename varchar
                pDis->set_datatemplatetypename((char *)bind[i].buffer);
                break;
            case 98: 	//calibrationfsx float
                pDis->set_calibrationfsx(data_calibrationfsx);
                break;
            case 99: 	//calibrationfsy float
                pDis->set_calibrationfsy(data_calibrationfsy);
                break;
            case 100: 	//ssd float
                pDis->set_ssd(data_ssd);
                break;
            case 101: 	//phantomsizelateral float
                pDis->set_phantomsizelateral(data_phantomsizelateral);
                break;
            case 102: 	//phantomsizedepth float
                pDis->set_phantomsizedepth(data_phantomsizedepth);
                break;
            case 103: 	//viewcustomizedepth float
                pDis->set_viewcustomizedepth(data_viewcustomizedepth);
                break;
            case 104: 	//blocktraypenumbra float
                pDis->set_blocktraypenumbra(data_blocktraypenumbra);
                break;
            case 105: 	//blockattenfactor float
                pDis->set_blockattenfactor(data_blockattenfactor);
                break;
            case 106: 	//viewhalfprofile tinyint
                pDis->set_viewhalfprofile(data_viewhalfprofile);
                break;
            case 107: 	//convdatastruct_sdd1 float
                pDis->set_convdatastruct_sdd1(data_convdatastruct_sdd1);
                break;
            case 108: 	//convdatastruct_sdd2 float
                pDis->set_convdatastruct_sdd2(data_convdatastruct_sdd2);
                break;
            case 109: 	//convdatastruct_psd float
                pDis->set_convdatastruct_psd(data_convdatastruct_psd);
                break;
            case 110: 	//commissionedunit_dmax float
                pDis->set_commissionedunit_dmax(data_commissionedunit_dmax);
                break;
            case 111: 	//datatype int
                pDis->set_datatype(data_datatype);
                break;
            case 112: 	//normalizeddose float
                pDis->set_normalizeddose(data_normalizeddose);
                break;
            case 113: 	//xjawfactor float
                pDis->set_xjawfactor(data_xjawfactor);
                break;
            case 114: 	//yjawfactor float
                pDis->set_yjawfactor(data_yjawfactor);
                break;
            case 115: 	//mlcfactor float
                pDis->set_mlcfactor(data_mlcfactor);
                break;
            case 116: 	//ddmudr varchar
                pDis->set_ddmudr((char *)bind[i].buffer);
                break;
            case 117: 	//defaultdoserateindex int
                pDis->set_defaultdoserateindex(data_defaultdoserateindex);
                break;
            case 118: 	//calcmode tinyint
                pDis->set_calcmode(data_calcmode);
                break;
            case 119: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            case 120: 	//cctonguewidth float
                pDis->set_cctonguewidth(data_cctonguewidth);
                break;
            case 121: 	//ccgroovewidth float
                pDis->set_ccgroovewidth(data_ccgroovewidth);
                break;
            case 122: 	//ccleaftipwidth float
                pDis->set_ccleaftipwidth(data_ccleaftipwidth);
                break;
            case 123: 	//reservecc varchar
                pDis->set_reservecc((char *)bind[i].buffer);
                break;
            case 124: 	//pbtonguewidth float
                pDis->set_pbtonguewidth(data_pbtonguewidth);
                break;
            case 125: 	//pbgroovewidth float
                pDis->set_pbgroovewidth(data_pbgroovewidth);
                break;
            case 126: 	//pbleaftipwidth float
                pDis->set_pbleaftipwidth(data_pbleaftipwidth);
                break;
            case 127: 	//reservepb varchar
                pDis->set_reservepb((char *)bind[i].buffer);
                break;
            case 128: 	//cctransmission float
                pDis->set_cctransmission(data_cctransmission);
                break;
            case 129: 	//pbtransmission float
                pDis->set_pbtransmission(data_pbtransmission);
                break;
            case 130: 	//mindoserate_mupermin float
                pDis->set_mindoserate_mupermin(data_mindoserate_mupermin);
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE