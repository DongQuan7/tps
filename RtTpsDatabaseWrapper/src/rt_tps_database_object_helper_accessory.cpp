//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_accessory.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_accessory.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtAccessory& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //31 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < ACCESSORY_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_ACCESSORY_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsaccessory SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < ACCESSORY_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_ACCESSORY_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsaccessory (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_machineuid = "";
    std::string	data_name = "";
    std::string	data_code = "";
    int			data_accessorytype = 0;
    int			data_wedgeorientation = 0;
    int			data_independent_jaw1 = 0;
    float		data_min1_jaw1 = 0.f;
    float		data_max1_jaw1 = 0.f;
    float		data_min2_jaw1 = 0.f;
    float		data_max2_jaw1 = 0.f;
    float		data_minw_jaw1 = 0.f;
    float		data_maxw_jaw1 = 0.f;
    float		data_sdd_jaw1 = 0.f;
    std::string	data_name1_jaw1 = "";
    std::string	data_name2_jaw1 = "";
    float		data_min1_jaw2 = 0.f;
    float		data_max1_jaw2 = 0.f;
    float		data_min2_jaw2 = 0.f;
    float		data_max2_jaw2 = 0.f;
    float		data_minw_jaw2 = 0.f;
    float		data_maxw_jaw2 = 0.f;
    float		data_sdd_jaw2 = 0.f;
    std::string	data_name1_jaw2 = "";
    std::string	data_name2_jaw2 = "";
    std::string	data_filtertobeam = "";
    std::string	data_beamtofilter = "";
    float		data_wedgeangle = 0.f;
    int			data_datatype = 0;
    std::string	data_crc = "";
    MYSQL_TIME	data_updatetime;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < ACCESSORY_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//machineuid varchar
            {
                data_machineuid = src.get_machineuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_machineuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_machineuid.size();
            }
            break;
        case 2: 	//name varchar
            {
                data_name = src.get_name();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name.size();
            }
            break;
        case 3: 	//code varchar
            {
                data_code = src.get_code();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_code.c_str();
                bind[iCount].buffer_length = (unsigned long)data_code.size();
            }
            break;
        case 4: 	//accessorytype int
            {
                data_accessorytype = src.get_accessorytype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_accessorytype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 5: 	//wedgeorientation int
            {
                data_wedgeorientation = src.get_wedgeorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_wedgeorientation;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 6: 	//independent_jaw1 int
            {
                data_independent_jaw1 = src.get_independent_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_independent_jaw1;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 7: 	//min1_jaw1 float
            {
                data_min1_jaw1 = src.get_min1_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_min1_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 8: 	//max1_jaw1 float
            {
                data_max1_jaw1 = src.get_max1_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_max1_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 9: 	//min2_jaw1 float
            {
                data_min2_jaw1 = src.get_min2_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_min2_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 10: 	//max2_jaw1 float
            {
                data_max2_jaw1 = src.get_max2_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_max2_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 11: 	//minw_jaw1 float
            {
                data_minw_jaw1 = src.get_minw_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_minw_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 12: 	//maxw_jaw1 float
            {
                data_maxw_jaw1 = src.get_maxw_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_maxw_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 13: 	//sdd_jaw1 float
            {
                data_sdd_jaw1 = src.get_sdd_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sdd_jaw1;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 14: 	//name1_jaw1 varchar
            {
                data_name1_jaw1 = src.get_name1_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name1_jaw1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name1_jaw1.size();
            }
            break;
        case 15: 	//name2_jaw1 varchar
            {
                data_name2_jaw1 = src.get_name2_jaw1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name2_jaw1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name2_jaw1.size();
            }
            break;
        case 16: 	//min1_jaw2 float
            {
                data_min1_jaw2 = src.get_min1_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_min1_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 17: 	//max1_jaw2 float
            {
                data_max1_jaw2 = src.get_max1_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_max1_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 18: 	//min2_jaw2 float
            {
                data_min2_jaw2 = src.get_min2_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_min2_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 19: 	//max2_jaw2 float
            {
                data_max2_jaw2 = src.get_max2_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_max2_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 20: 	//minw_jaw2 float
            {
                data_minw_jaw2 = src.get_minw_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_minw_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 21: 	//maxw_jaw2 float
            {
                data_maxw_jaw2 = src.get_maxw_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_maxw_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 22: 	//sdd_jaw2 float
            {
                data_sdd_jaw2 = src.get_sdd_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sdd_jaw2;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 23: 	//name1_jaw2 varchar
            {
                data_name1_jaw2 = src.get_name1_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name1_jaw2.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name1_jaw2.size();
            }
            break;
        case 24: 	//name2_jaw2 varchar
            {
                data_name2_jaw2 = src.get_name2_jaw2();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name2_jaw2.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name2_jaw2.size();
            }
            break;
        case 25: 	//filtertobeam varchar
            {
                data_filtertobeam = src.get_filtertobeam();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_filtertobeam.c_str();
                bind[iCount].buffer_length = (unsigned long)data_filtertobeam.size();
            }
            break;
        case 26: 	//beamtofilter varchar
            {
                data_beamtofilter = src.get_beamtofilter();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_beamtofilter.c_str();
                bind[iCount].buffer_length = (unsigned long)data_beamtofilter.size();
            }
            break;
        case 27: 	//wedgeangle float
            {
                data_wedgeangle = src.get_wedgeangle();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_wedgeangle;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 28: 	//datatype int
            {
                data_datatype = src.get_datatype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_datatype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 29: 	//crc varchar
            {
                data_crc = src.get_crc();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_crc.c_str();
                bind[iCount].buffer_length = (unsigned long)data_crc.size();
            }
            break;
        case 30: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtAccessory*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtAccessory*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsaccessory    31 parameters
    const int field_num = ACCESSORY_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 1024;
    MAX_LENGTH[3] = 8;
    MAX_LENGTH[4] = 0;
    MAX_LENGTH[5] = 0;
    MAX_LENGTH[6] = 0;
    MAX_LENGTH[7] = 0;
    MAX_LENGTH[8] = 0;
    MAX_LENGTH[9] = 0;
    MAX_LENGTH[10] = 0;
    MAX_LENGTH[11] = 0;
    MAX_LENGTH[12] = 0;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 64;
    MAX_LENGTH[15] = 64;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 0;
    MAX_LENGTH[19] = 0;
    MAX_LENGTH[20] = 0;
    MAX_LENGTH[21] = 0;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 64;
    MAX_LENGTH[24] = 64;
    MAX_LENGTH[25] = 1024;
    MAX_LENGTH[26] = 1024;
    MAX_LENGTH[27] = 0;
    MAX_LENGTH[28] = 0;
    MAX_LENGTH[29] = 64;
    MAX_LENGTH[30] = 0;

    //std::string	data_uid
    //std::string	data_machineuid
    //std::string	data_name
    //std::string	data_code
    int	data_accessorytype = 0;
    int	data_wedgeorientation = 0;
    int	data_independent_jaw1 = 0;
    float	data_min1_jaw1 = 0.f;
    float	data_max1_jaw1 = 0.f;
    float	data_min2_jaw1 = 0.f;
    float	data_max2_jaw1 = 0.f;
    float	data_minw_jaw1 = 0.f;
    float	data_maxw_jaw1 = 0.f;
    float	data_sdd_jaw1 = 0.f;
    //std::string	data_name1_jaw1
    //std::string	data_name2_jaw1
    float	data_min1_jaw2 = 0.f;
    float	data_max1_jaw2 = 0.f;
    float	data_min2_jaw2 = 0.f;
    float	data_max2_jaw2 = 0.f;
    float	data_minw_jaw2 = 0.f;
    float	data_maxw_jaw2 = 0.f;
    float	data_sdd_jaw2 = 0.f;
    //std::string	data_name1_jaw2
    //std::string	data_name2_jaw2
    //std::string	data_filtertobeam
    //std::string	data_beamtofilter
    float	data_wedgeangle = 0.f;
    int	data_datatype = 0;
    //std::string	data_crc
    MYSQL_TIME	data_updatetime;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 4: 	//accessorytype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_accessorytype;
            break;
        case 5: 	//wedgeorientation int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_wedgeorientation;
            break;
        case 6: 	//independent_jaw1 int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_independent_jaw1;
            break;
        case 7: 	//min1_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_min1_jaw1;
            break;
        case 8: 	//max1_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_max1_jaw1;
            break;
        case 9: 	//min2_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_min2_jaw1;
            break;
        case 10: 	//max2_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_max2_jaw1;
            break;
        case 11: 	//minw_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_minw_jaw1;
            break;
        case 12: 	//maxw_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_maxw_jaw1;
            break;
        case 13: 	//sdd_jaw1 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sdd_jaw1;
            break;
        case 16: 	//min1_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_min1_jaw2;
            break;
        case 17: 	//max1_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_max1_jaw2;
            break;
        case 18: 	//min2_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_min2_jaw2;
            break;
        case 19: 	//max2_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_max2_jaw2;
            break;
        case 20: 	//minw_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_minw_jaw2;
            break;
        case 21: 	//maxw_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_maxw_jaw2;
            break;
        case 22: 	//sdd_jaw2 float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sdd_jaw2;
            break;
        case 27: 	//wedgeangle float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_wedgeangle;
            break;
        case 28: 	//datatype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_datatype;
            break;
        case 30: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtAccessory* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtAccessory();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//machineuid varchar
                pDis->set_machineuid((char *)bind[i].buffer);
                break;
            case 2: 	//name varchar
                pDis->set_name((char *)bind[i].buffer);
                break;
            case 3: 	//code varchar
                pDis->set_code((char *)bind[i].buffer);
                break;
            case 4: 	//accessorytype int
                pDis->set_accessorytype(data_accessorytype);
                break;
            case 5: 	//wedgeorientation int
                pDis->set_wedgeorientation(data_wedgeorientation);
                break;
            case 6: 	//independent_jaw1 int
                pDis->set_independent_jaw1(data_independent_jaw1);
                break;
            case 7: 	//min1_jaw1 float
                pDis->set_min1_jaw1(data_min1_jaw1);
                break;
            case 8: 	//max1_jaw1 float
                pDis->set_max1_jaw1(data_max1_jaw1);
                break;
            case 9: 	//min2_jaw1 float
                pDis->set_min2_jaw1(data_min2_jaw1);
                break;
            case 10: 	//max2_jaw1 float
                pDis->set_max2_jaw1(data_max2_jaw1);
                break;
            case 11: 	//minw_jaw1 float
                pDis->set_minw_jaw1(data_minw_jaw1);
                break;
            case 12: 	//maxw_jaw1 float
                pDis->set_maxw_jaw1(data_maxw_jaw1);
                break;
            case 13: 	//sdd_jaw1 float
                pDis->set_sdd_jaw1(data_sdd_jaw1);
                break;
            case 14: 	//name1_jaw1 varchar
                pDis->set_name1_jaw1((char *)bind[i].buffer);
                break;
            case 15: 	//name2_jaw1 varchar
                pDis->set_name2_jaw1((char *)bind[i].buffer);
                break;
            case 16: 	//min1_jaw2 float
                pDis->set_min1_jaw2(data_min1_jaw2);
                break;
            case 17: 	//max1_jaw2 float
                pDis->set_max1_jaw2(data_max1_jaw2);
                break;
            case 18: 	//min2_jaw2 float
                pDis->set_min2_jaw2(data_min2_jaw2);
                break;
            case 19: 	//max2_jaw2 float
                pDis->set_max2_jaw2(data_max2_jaw2);
                break;
            case 20: 	//minw_jaw2 float
                pDis->set_minw_jaw2(data_minw_jaw2);
                break;
            case 21: 	//maxw_jaw2 float
                pDis->set_maxw_jaw2(data_maxw_jaw2);
                break;
            case 22: 	//sdd_jaw2 float
                pDis->set_sdd_jaw2(data_sdd_jaw2);
                break;
            case 23: 	//name1_jaw2 varchar
                pDis->set_name1_jaw2((char *)bind[i].buffer);
                break;
            case 24: 	//name2_jaw2 varchar
                pDis->set_name2_jaw2((char *)bind[i].buffer);
                break;
            case 25: 	//filtertobeam varchar
                pDis->set_filtertobeam((char *)bind[i].buffer);
                break;
            case 26: 	//beamtofilter varchar
                pDis->set_beamtofilter((char *)bind[i].buffer);
                break;
            case 27: 	//wedgeangle float
                pDis->set_wedgeangle(data_wedgeangle);
                break;
            case 28: 	//datatype int
                pDis->set_datatype(data_datatype);
                break;
            case 29: 	//crc varchar
                pDis->set_crc((char *)bind[i].buffer);
                break;
            case 30: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE