//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_seriestable.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.5
///
///  \version 1.0
///  \date    4/18/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_seriestable.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtSeriestableImp::RtSeriestableImp():
    m_seriesuid(""),
    m_tableuid(""),
    m_offsetx(0.),
    m_offsety(0.),
    m_offsetz(0.),
    m_anglex(0.),
    m_angley(0.),
    m_anglez(0.),
    m_updatetime(boost::date_time::not_a_date_time),
    m_averagedensity(0.f),
    m_isactive(false),
    m_overrideedensity(0.f)
{
}

RtSeriestableImp::RtSeriestableImp(const RtSeriestableImp& seriestable):
    m_seriesuid(seriestable.get_seriesuid()),
    m_tableuid(seriestable.get_tableuid()),
    m_offsetx(seriestable.get_offsetx()),
    m_offsety(seriestable.get_offsety()),
    m_offsetz(seriestable.get_offsetz()),
    m_anglex(seriestable.get_anglex()),
    m_angley(seriestable.get_angley()),
    m_anglez(seriestable.get_anglez()),
    m_updatetime(seriestable.get_updatetime()),
    m_averagedensity(seriestable.get_averagedensity()),
    m_isactive(seriestable.get_isactive()),
    m_overrideedensity(seriestable.get_overrideedensity())
{
}

RtSeriestableImp& RtSeriestableImp::operator=(const RtSeriestableImp& seriestable)
{
    if (this != &seriestable){
        this->m_seriesuid = seriestable.get_seriesuid();
        this->m_tableuid = seriestable.get_tableuid();
        this->m_offsetx = seriestable.get_offsetx();
        this->m_offsety = seriestable.get_offsety();
        this->m_offsetz = seriestable.get_offsetz();
        this->m_anglex = seriestable.get_anglex();
        this->m_angley = seriestable.get_angley();
        this->m_anglez = seriestable.get_anglez();
        this->m_updatetime = seriestable.get_updatetime();
        this->m_averagedensity = seriestable.get_averagedensity();
        this->m_isactive = seriestable.get_isactive();
        this->m_overrideedensity = seriestable.get_overrideedensity();
    }
    return *this;
}

RtSeriestableImp::~RtSeriestableImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtSeriestable::RtSeriestable()
{
    m_pImp = new RtSeriestableImp();
    set_flags(SERIESTABLE_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_SERIESTABLE_FIELD_NULL);
}

RtSeriestable::RtSeriestable(const RtSeriestable& seriestable): RtDatabaseObject(seriestable),
   m_pImp(new RtSeriestableImp(*seriestable.m_pImp))
{
}

RtSeriestable& RtSeriestable::operator = (const RtSeriestable& seriestable)
{
    if(this != &seriestable)
    {
        RtDatabaseObject::operator=(seriestable);
        *this->m_pImp = *seriestable.m_pImp;
    }
    return *this;
}

RtSeriestable::~RtSeriestable()
{
    DEL_PTR(m_pImp);
}

//seriesuid
std::string RtSeriestable::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtSeriestable::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(SERIESTABLE_SERIESUID);
    setdirty_field(SERIESTABLE_SERIESUID, true);
}

//tableuid
std::string RtSeriestable::get_tableuid() const { return m_pImp->get_tableuid();}
void RtSeriestable::set_tableuid(const std::string& tableuid)
{
    m_pImp->set_tableuid(tableuid);
    enable_field(SERIESTABLE_TABLEUID);
    setdirty_field(SERIESTABLE_TABLEUID, true);
}

//offsetx
double RtSeriestable::get_offsetx() const { return m_pImp->get_offsetx();}
void RtSeriestable::set_offsetx(const double& offsetx)
{
    m_pImp->set_offsetx(offsetx);
    enable_field(SERIESTABLE_OFFSETX);
    setdirty_field(SERIESTABLE_OFFSETX, true);
}

//offsety
double RtSeriestable::get_offsety() const { return m_pImp->get_offsety();}
void RtSeriestable::set_offsety(const double& offsety)
{
    m_pImp->set_offsety(offsety);
    enable_field(SERIESTABLE_OFFSETY);
    setdirty_field(SERIESTABLE_OFFSETY, true);
}

//offsetz
double RtSeriestable::get_offsetz() const { return m_pImp->get_offsetz();}
void RtSeriestable::set_offsetz(const double& offsetz)
{
    m_pImp->set_offsetz(offsetz);
    enable_field(SERIESTABLE_OFFSETZ);
    setdirty_field(SERIESTABLE_OFFSETZ, true);
}

//anglex
double RtSeriestable::get_anglex() const { return m_pImp->get_anglex();}
void RtSeriestable::set_anglex(const double& anglex)
{
    m_pImp->set_anglex(anglex);
    enable_field(SERIESTABLE_ANGLEX);
    setdirty_field(SERIESTABLE_ANGLEX, true);
}

//angley
double RtSeriestable::get_angley() const { return m_pImp->get_angley();}
void RtSeriestable::set_angley(const double& angley)
{
    m_pImp->set_angley(angley);
    enable_field(SERIESTABLE_ANGLEY);
    setdirty_field(SERIESTABLE_ANGLEY, true);
}

//anglez
double RtSeriestable::get_anglez() const { return m_pImp->get_anglez();}
void RtSeriestable::set_anglez(const double& anglez)
{
    m_pImp->set_anglez(anglez);
    enable_field(SERIESTABLE_ANGLEZ);
    setdirty_field(SERIESTABLE_ANGLEZ, true);
}

//updatetime
DATETIME_BOOST RtSeriestable::get_updatetime() const { return m_pImp->get_updatetime();}
void RtSeriestable::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(SERIESTABLE_UPDATETIME);
    setdirty_field(SERIESTABLE_UPDATETIME, true);
}

//averagedensity
float RtSeriestable::get_averagedensity() const { return m_pImp->get_averagedensity();}
void RtSeriestable::set_averagedensity(const float& averagedensity)
{
    m_pImp->set_averagedensity(averagedensity);
    enable_field(SERIESTABLE_AVERAGEDENSITY);
    setdirty_field(SERIESTABLE_AVERAGEDENSITY, true);
}

//isactive
bool RtSeriestable::get_isactive() const { return m_pImp->get_isactive();}
void RtSeriestable::set_isactive(const bool& isactive)
{
    m_pImp->set_isactive(isactive);
    enable_field(SERIESTABLE_ISACTIVE);
    setdirty_field(SERIESTABLE_ISACTIVE, true);
}

//overrideedensity
float RtSeriestable::get_overrideedensity() const { return m_pImp->get_overrideedensity();}
void RtSeriestable::set_overrideedensity(const float& overrideedensity)
{
    m_pImp->set_overrideedensity(overrideedensity);
    enable_field(SERIESTABLE_OVERRIDEEDENSITY);
    setdirty_field(SERIESTABLE_OVERRIDEEDENSITY, true);
}

RT_TPS_DATABASE_END_NAMESPACE