//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_accessorychunk.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_accessorychunk.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtAccessorychunkImp::RtAccessorychunkImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_accessoryuid(""),
    m_commissionedunituid(""),
    m_mu(0.f),
    m_mu_dx(0.f),
    m_mu_dr(0.f),
    m_mu_da(0.f),
    m_mu_dv(0.f),
    m_hvl_slope(0.f),
    m_density(0.f),
    m_datatype(0),
    m_mcphoparam1(""),
    m_mcphoparam2(""),
    m_mcphoparam3(""),
    m_mcphoparam4(""),
    m_mcphoparam5(""),
    m_mcphoparam6(""),
    m_mcphooffaxisvec(""),
    m_algorithmtype(0),
    m_crc(""),
    m_updatetime(boost::date_time::not_a_date_time),
	m_contouruid("")
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtAccessorychunkImp::RtAccessorychunkImp(const RtAccessorychunkImp& accessorychunk):
    m_uid(accessorychunk.get_uid()),
    m_accessoryuid(accessorychunk.get_accessoryuid()),
    m_commissionedunituid(accessorychunk.get_commissionedunituid()),
    m_mu(accessorychunk.get_mu()),
    m_mu_dx(accessorychunk.get_mu_dx()),
    m_mu_dr(accessorychunk.get_mu_dr()),
    m_mu_da(accessorychunk.get_mu_da()),
    m_mu_dv(accessorychunk.get_mu_dv()),
    m_hvl_slope(accessorychunk.get_hvl_slope()),
    m_density(accessorychunk.get_density()),
    m_datatype(accessorychunk.get_datatype()),
    m_mcphoparam1(accessorychunk.get_mcphoparam1()),
    m_mcphoparam2(accessorychunk.get_mcphoparam2()),
    m_mcphoparam3(accessorychunk.get_mcphoparam3()),
    m_mcphoparam4(accessorychunk.get_mcphoparam4()),
    m_mcphoparam5(accessorychunk.get_mcphoparam5()),
    m_mcphoparam6(accessorychunk.get_mcphoparam6()),
    m_mcphooffaxisvec(accessorychunk.get_mcphooffaxisvec()),
    m_algorithmtype(accessorychunk.get_algorithmtype()),
    m_crc(accessorychunk.get_crc()),
    m_updatetime(accessorychunk.get_updatetime()),
	m_contouruid(accessorychunk.get_contouruid())
{
}

RtAccessorychunkImp& RtAccessorychunkImp::operator=(const RtAccessorychunkImp& accessorychunk)
{
    if (this != &accessorychunk){
        this->m_uid = accessorychunk.get_uid();
        this->m_accessoryuid = accessorychunk.get_accessoryuid();
        this->m_commissionedunituid = accessorychunk.get_commissionedunituid();
        this->m_mu = accessorychunk.get_mu();
        this->m_mu_dx = accessorychunk.get_mu_dx();
        this->m_mu_dr = accessorychunk.get_mu_dr();
        this->m_mu_da = accessorychunk.get_mu_da();
        this->m_mu_dv = accessorychunk.get_mu_dv();
        this->m_hvl_slope = accessorychunk.get_hvl_slope();
        this->m_density = accessorychunk.get_density();
        this->m_datatype = accessorychunk.get_datatype();
        this->m_mcphoparam1 = accessorychunk.get_mcphoparam1();
        this->m_mcphoparam2 = accessorychunk.get_mcphoparam2();
        this->m_mcphoparam3 = accessorychunk.get_mcphoparam3();
        this->m_mcphoparam4 = accessorychunk.get_mcphoparam4();
        this->m_mcphoparam5 = accessorychunk.get_mcphoparam5();
        this->m_mcphoparam6 = accessorychunk.get_mcphoparam6();
        this->m_mcphooffaxisvec = accessorychunk.get_mcphooffaxisvec();
        this->m_algorithmtype = accessorychunk.get_algorithmtype();
        this->m_crc = accessorychunk.get_crc();
        this->m_updatetime = accessorychunk.get_updatetime();
		this->m_contouruid = accessorychunk.get_contouruid();
    }
    return *this;
}

RtAccessorychunkImp::~RtAccessorychunkImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtAccessorychunk::RtAccessorychunk(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtAccessorychunkImp(bGeneraterUid);
    set_flags(ACCESSORYCHUNK_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_ACCESSORYCHUNK_FIELD_NULL);
}

RtAccessorychunk::RtAccessorychunk(const RtAccessorychunk& accessorychunk): RtDatabaseObject(accessorychunk),
   m_pImp(new RtAccessorychunkImp(*accessorychunk.m_pImp))
{
}

RtAccessorychunk& RtAccessorychunk::operator = (const RtAccessorychunk& accessorychunk)
{
    if(this != &accessorychunk)
    {
        RtDatabaseObject::operator=(accessorychunk);
        *this->m_pImp = *accessorychunk.m_pImp;
    }
    return *this;
}

RtAccessorychunk::~RtAccessorychunk()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtAccessorychunk::get_uid() const { return m_pImp->get_uid();}
void RtAccessorychunk::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(ACCESSORYCHUNK_UID);
    setdirty_field(ACCESSORYCHUNK_UID, true);
}

//accessoryuid
std::string RtAccessorychunk::get_accessoryuid() const { return m_pImp->get_accessoryuid();}
void RtAccessorychunk::set_accessoryuid(const std::string& accessoryuid)
{
    m_pImp->set_accessoryuid(accessoryuid);
    enable_field(ACCESSORYCHUNK_ACCESSORYUID);
    setdirty_field(ACCESSORYCHUNK_ACCESSORYUID, true);
}

//commissionedunituid
std::string RtAccessorychunk::get_commissionedunituid() const { return m_pImp->get_commissionedunituid();}
void RtAccessorychunk::set_commissionedunituid(const std::string& commissionedunituid)
{
    m_pImp->set_commissionedunituid(commissionedunituid);
    enable_field(ACCESSORYCHUNK_COMMISSIONEDUNITUID);
    setdirty_field(ACCESSORYCHUNK_COMMISSIONEDUNITUID, true);
}

//mu
float RtAccessorychunk::get_mu() const { return m_pImp->get_mu();}
void RtAccessorychunk::set_mu(const float& mu)
{
    m_pImp->set_mu(mu);
    enable_field(ACCESSORYCHUNK_MU);
    setdirty_field(ACCESSORYCHUNK_MU, true);
}

//mu_dx
float RtAccessorychunk::get_mu_dx() const { return m_pImp->get_mu_dx();}
void RtAccessorychunk::set_mu_dx(const float& mu_dx)
{
    m_pImp->set_mu_dx(mu_dx);
    enable_field(ACCESSORYCHUNK_MU_DX);
    setdirty_field(ACCESSORYCHUNK_MU_DX, true);
}

//mu_dr
float RtAccessorychunk::get_mu_dr() const { return m_pImp->get_mu_dr();}
void RtAccessorychunk::set_mu_dr(const float& mu_dr)
{
    m_pImp->set_mu_dr(mu_dr);
    enable_field(ACCESSORYCHUNK_MU_DR);
    setdirty_field(ACCESSORYCHUNK_MU_DR, true);
}

//mu_da
float RtAccessorychunk::get_mu_da() const { return m_pImp->get_mu_da();}
void RtAccessorychunk::set_mu_da(const float& mu_da)
{
    m_pImp->set_mu_da(mu_da);
    enable_field(ACCESSORYCHUNK_MU_DA);
    setdirty_field(ACCESSORYCHUNK_MU_DA, true);
}

//mu_dv
float RtAccessorychunk::get_mu_dv() const { return m_pImp->get_mu_dv();}
void RtAccessorychunk::set_mu_dv(const float& mu_dv)
{
    m_pImp->set_mu_dv(mu_dv);
    enable_field(ACCESSORYCHUNK_MU_DV);
    setdirty_field(ACCESSORYCHUNK_MU_DV, true);
}

//hvl_slope
float RtAccessorychunk::get_hvl_slope() const { return m_pImp->get_hvl_slope();}
void RtAccessorychunk::set_hvl_slope(const float& hvl_slope)
{
    m_pImp->set_hvl_slope(hvl_slope);
    enable_field(ACCESSORYCHUNK_HVL_SLOPE);
    setdirty_field(ACCESSORYCHUNK_HVL_SLOPE, true);
}

//density
float RtAccessorychunk::get_density() const { return m_pImp->get_density();}
void RtAccessorychunk::set_density(const float& density)
{
    m_pImp->set_density(density);
    enable_field(ACCESSORYCHUNK_DENSITY);
    setdirty_field(ACCESSORYCHUNK_DENSITY, true);
}

//datatype
int RtAccessorychunk::get_datatype() const { return m_pImp->get_datatype();}
void RtAccessorychunk::set_datatype(const int& datatype)
{
    m_pImp->set_datatype(datatype);
    enable_field(ACCESSORYCHUNK_DATATYPE);
    setdirty_field(ACCESSORYCHUNK_DATATYPE, true);
}

//mcphoparam1
std::string RtAccessorychunk::get_mcphoparam1() const { return m_pImp->get_mcphoparam1();}
void RtAccessorychunk::set_mcphoparam1(const std::string& mcphoparam1)
{
    m_pImp->set_mcphoparam1(mcphoparam1);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM1);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM1, true);
}

//mcphoparam2
std::string RtAccessorychunk::get_mcphoparam2() const { return m_pImp->get_mcphoparam2();}
void RtAccessorychunk::set_mcphoparam2(const std::string& mcphoparam2)
{
    m_pImp->set_mcphoparam2(mcphoparam2);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM2);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM2, true);
}

//mcphoparam3
std::string RtAccessorychunk::get_mcphoparam3() const { return m_pImp->get_mcphoparam3();}
void RtAccessorychunk::set_mcphoparam3(const std::string& mcphoparam3)
{
    m_pImp->set_mcphoparam3(mcphoparam3);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM3);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM3, true);
}

//mcphoparam4
std::string RtAccessorychunk::get_mcphoparam4() const { return m_pImp->get_mcphoparam4();}
void RtAccessorychunk::set_mcphoparam4(const std::string& mcphoparam4)
{
    m_pImp->set_mcphoparam4(mcphoparam4);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM4);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM4, true);
}

//mcphoparam5
std::string RtAccessorychunk::get_mcphoparam5() const { return m_pImp->get_mcphoparam5();}
void RtAccessorychunk::set_mcphoparam5(const std::string& mcphoparam5)
{
    m_pImp->set_mcphoparam5(mcphoparam5);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM5);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM5, true);
}

//mcphoparam6
std::string RtAccessorychunk::get_mcphoparam6() const { return m_pImp->get_mcphoparam6();}
void RtAccessorychunk::set_mcphoparam6(const std::string& mcphoparam6)
{
    m_pImp->set_mcphoparam6(mcphoparam6);
    enable_field(ACCESSORYCHUNK_MCPHOPARAM6);
    setdirty_field(ACCESSORYCHUNK_MCPHOPARAM6, true);
}

//mcphooffaxisvec
std::string RtAccessorychunk::get_mcphooffaxisvec() const { return m_pImp->get_mcphooffaxisvec();}
void RtAccessorychunk::set_mcphooffaxisvec(const std::string& mcphooffaxisvec)
{
    m_pImp->set_mcphooffaxisvec(mcphooffaxisvec);
    enable_field(ACCESSORYCHUNK_MCPHOOFFAXISVEC);
    setdirty_field(ACCESSORYCHUNK_MCPHOOFFAXISVEC, true);
}

//algorithmtype
int RtAccessorychunk::get_algorithmtype() const { return m_pImp->get_algorithmtype();}
void RtAccessorychunk::set_algorithmtype(const int& algorithmtype)
{
    m_pImp->set_algorithmtype(algorithmtype);
    enable_field(ACCESSORYCHUNK_ALGORITHMTYPE);
    setdirty_field(ACCESSORYCHUNK_ALGORITHMTYPE, true);
}

//crc
std::string RtAccessorychunk::get_crc() const { return m_pImp->get_crc();}
void RtAccessorychunk::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(ACCESSORYCHUNK_CRC);
    setdirty_field(ACCESSORYCHUNK_CRC, true);
}

//updatetime
DATETIME_BOOST RtAccessorychunk::get_updatetime() const { return m_pImp->get_updatetime();}
void RtAccessorychunk::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(ACCESSORYCHUNK_UPDATETIME);
    setdirty_field(ACCESSORYCHUNK_UPDATETIME, true);
}

//contouruid
std::string RtAccessorychunk::get_contouruid() const { return m_pImp->get_contouruid();}
void RtAccessorychunk::set_contouruid(const std::string& contouruid) { m_pImp->set_contouruid(contouruid);}

RT_TPS_DATABASE_END_NAMESPACE