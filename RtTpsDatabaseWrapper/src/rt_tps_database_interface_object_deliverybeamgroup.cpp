//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_deliverybeamgroup.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.8
///
///  \version 1.0
///  \date    6/20/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_deliverybeamgroup.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtDeliverybeamgroupImp::RtDeliverybeamgroupImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_setupuid(""),
    m_machineuid(""),
    m_voiuid(""),
    m_seriesuid(""),
    m_sopinstanceuid(""),
    m_prescriptionuid(""),
    m_normalpointpoiuid(""),
    m_referenceddeliverybeamgroupuid(""),
    m_relatednormgroupuid(""),
    m_plantype(0),
    m_name(""),
    m_planlabel(""),
    m_plandate(boost::date_time::not_a_date_time),
    m_plantime(boost::date_time::not_a_date_time),
    m_fraction(0),
    m_doseperfraction(0.),
    m_isclockwise(false),
    m_rtplangeometry(0),
    m_startdate(boost::date_time::not_a_date_time),
    m_ismondayselected(false),
    m_istuesdayselected(false),
    m_iswednesdayselected(false),
    m_isthursdayselected(false),
    m_isfridayselected(false),
    m_issaturdayselected(false),
    m_issundayselected(false),
    m_isincludeholiday(false),
    m_timesperday(0),
    m_intervalhour(0.f),
    m_rotationtype(0),
    m_estimatedtime(boost::date_time::not_a_date_time),
    m_istotaltimeused(false),
    m_totaltime(boost::date_time::not_a_date_time),
    m_sourcetype(0),
    m_crc(""),
    m_isgating(false),
    m_inactive(false),
    m_isintervaloptional(false),
    m_binmode(0),
    m_beamonrangestart(0.),
    m_beamonrangeend(0.),
    m_description(""),
    m_activeinactivereason(""),
    m_radiationtype(0),
    m_toleranceuid(""),
    m_isqa(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtDeliverybeamgroupImp::RtDeliverybeamgroupImp(const RtDeliverybeamgroupImp& deliverybeamgroup):
    m_uid(deliverybeamgroup.get_uid()),
    m_setupuid(deliverybeamgroup.get_setupuid()),
    m_machineuid(deliverybeamgroup.get_machineuid()),
    m_voiuid(deliverybeamgroup.get_voiuid()),
    m_seriesuid(deliverybeamgroup.get_seriesuid()),
    m_sopinstanceuid(deliverybeamgroup.get_sopinstanceuid()),
    m_prescriptionuid(deliverybeamgroup.get_prescriptionuid()),
    m_normalpointpoiuid(deliverybeamgroup.get_normalpointpoiuid()),
    m_referenceddeliverybeamgroupuid(deliverybeamgroup.get_referenceddeliverybeamgroupuid()),
    m_relatednormgroupuid(deliverybeamgroup.get_relatednormgroupuid()),
    m_plantype(deliverybeamgroup.get_plantype()),
    m_name(deliverybeamgroup.get_name()),
    m_planlabel(deliverybeamgroup.get_planlabel()),
    m_plandate(deliverybeamgroup.get_plandate()),
    m_plantime(deliverybeamgroup.get_plantime()),
    m_fraction(deliverybeamgroup.get_fraction()),
    m_doseperfraction(deliverybeamgroup.get_doseperfraction()),
    m_isclockwise(deliverybeamgroup.get_isclockwise()),
    m_rtplangeometry(deliverybeamgroup.get_rtplangeometry()),
    m_startdate(deliverybeamgroup.get_startdate()),
    m_ismondayselected(deliverybeamgroup.get_ismondayselected()),
    m_istuesdayselected(deliverybeamgroup.get_istuesdayselected()),
    m_iswednesdayselected(deliverybeamgroup.get_iswednesdayselected()),
    m_isthursdayselected(deliverybeamgroup.get_isthursdayselected()),
    m_isfridayselected(deliverybeamgroup.get_isfridayselected()),
    m_issaturdayselected(deliverybeamgroup.get_issaturdayselected()),
    m_issundayselected(deliverybeamgroup.get_issundayselected()),
    m_isincludeholiday(deliverybeamgroup.get_isincludeholiday()),
    m_timesperday(deliverybeamgroup.get_timesperday()),
    m_intervalhour(deliverybeamgroup.get_intervalhour()),
    m_rotationtype(deliverybeamgroup.get_rotationtype()),
    m_estimatedtime(deliverybeamgroup.get_estimatedtime()),
    m_istotaltimeused(deliverybeamgroup.get_istotaltimeused()),
    m_totaltime(deliverybeamgroup.get_totaltime()),
    m_sourcetype(deliverybeamgroup.get_sourcetype()),
    m_crc(deliverybeamgroup.get_crc()),
    m_isgating(deliverybeamgroup.get_isgating()),
    m_inactive(deliverybeamgroup.get_inactive()),
    m_isintervaloptional(deliverybeamgroup.get_isintervaloptional()),
    m_binmode(deliverybeamgroup.get_binmode()),
    m_beamonrangestart(deliverybeamgroup.get_beamonrangestart()),
    m_beamonrangeend(deliverybeamgroup.get_beamonrangeend()),
    m_description(deliverybeamgroup.get_description()),
    m_activeinactivereason(deliverybeamgroup.get_activeinactivereason()),
    m_radiationtype(deliverybeamgroup.get_radiationtype()),
    m_toleranceuid(deliverybeamgroup.get_toleranceuid()),
    m_isqa(deliverybeamgroup.get_isqa()),
    m_updatetime(deliverybeamgroup.get_updatetime())
{
}

RtDeliverybeamgroupImp& RtDeliverybeamgroupImp::operator=(const RtDeliverybeamgroupImp& deliverybeamgroup)
{
    if (this != &deliverybeamgroup){
        this->m_uid = deliverybeamgroup.get_uid();
        this->m_setupuid = deliverybeamgroup.get_setupuid();
        this->m_machineuid = deliverybeamgroup.get_machineuid();
        this->m_voiuid = deliverybeamgroup.get_voiuid();
        this->m_seriesuid = deliverybeamgroup.get_seriesuid();
        this->m_sopinstanceuid = deliverybeamgroup.get_sopinstanceuid();
        this->m_prescriptionuid = deliverybeamgroup.get_prescriptionuid();
        this->m_normalpointpoiuid = deliverybeamgroup.get_normalpointpoiuid();
        this->m_referenceddeliverybeamgroupuid = deliverybeamgroup.get_referenceddeliverybeamgroupuid();
        this->m_relatednormgroupuid = deliverybeamgroup.get_relatednormgroupuid();
        this->m_plantype = deliverybeamgroup.get_plantype();
        this->m_name = deliverybeamgroup.get_name();
        this->m_planlabel = deliverybeamgroup.get_planlabel();
        this->m_plandate = deliverybeamgroup.get_plandate();
        this->m_plantime = deliverybeamgroup.get_plantime();
        this->m_fraction = deliverybeamgroup.get_fraction();
        this->m_doseperfraction = deliverybeamgroup.get_doseperfraction();
        this->m_isclockwise = deliverybeamgroup.get_isclockwise();
        this->m_rtplangeometry = deliverybeamgroup.get_rtplangeometry();
        this->m_startdate = deliverybeamgroup.get_startdate();
        this->m_ismondayselected = deliverybeamgroup.get_ismondayselected();
        this->m_istuesdayselected = deliverybeamgroup.get_istuesdayselected();
        this->m_iswednesdayselected = deliverybeamgroup.get_iswednesdayselected();
        this->m_isthursdayselected = deliverybeamgroup.get_isthursdayselected();
        this->m_isfridayselected = deliverybeamgroup.get_isfridayselected();
        this->m_issaturdayselected = deliverybeamgroup.get_issaturdayselected();
        this->m_issundayselected = deliverybeamgroup.get_issundayselected();
        this->m_isincludeholiday = deliverybeamgroup.get_isincludeholiday();
        this->m_timesperday = deliverybeamgroup.get_timesperday();
        this->m_intervalhour = deliverybeamgroup.get_intervalhour();
        this->m_rotationtype = deliverybeamgroup.get_rotationtype();
        this->m_estimatedtime = deliverybeamgroup.get_estimatedtime();
        this->m_istotaltimeused = deliverybeamgroup.get_istotaltimeused();
        this->m_totaltime = deliverybeamgroup.get_totaltime();
        this->m_sourcetype = deliverybeamgroup.get_sourcetype();
        this->m_crc = deliverybeamgroup.get_crc();
        this->m_isgating = deliverybeamgroup.get_isgating();
        this->m_inactive = deliverybeamgroup.get_inactive();
        this->m_isintervaloptional = deliverybeamgroup.get_isintervaloptional();
        this->m_binmode = deliverybeamgroup.get_binmode();
        this->m_beamonrangestart = deliverybeamgroup.get_beamonrangestart();
        this->m_beamonrangeend = deliverybeamgroup.get_beamonrangeend();
        this->m_description = deliverybeamgroup.get_description();
        this->m_activeinactivereason = deliverybeamgroup.get_activeinactivereason();
        this->m_radiationtype = deliverybeamgroup.get_radiationtype();
        this->m_toleranceuid = deliverybeamgroup.get_toleranceuid();
        this->m_isqa = deliverybeamgroup.get_isqa();
        this->m_updatetime = deliverybeamgroup.get_updatetime();
    }
    return *this;
}

RtDeliverybeamgroupImp::~RtDeliverybeamgroupImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtDeliverybeamgroup::RtDeliverybeamgroup(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtDeliverybeamgroupImp(bGeneraterUid);
    set_flags(DELIVERYBEAMGROUP_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_DELIVERYBEAMGROUP_FIELD_NULL);
}

RtDeliverybeamgroup::RtDeliverybeamgroup(const RtDeliverybeamgroup& deliverybeamgroup): RtDatabaseObject(deliverybeamgroup),
   m_pImp(new RtDeliverybeamgroupImp(*deliverybeamgroup.m_pImp))
{
}

RtDeliverybeamgroup& RtDeliverybeamgroup::operator = (const RtDeliverybeamgroup& deliverybeamgroup)
{
    if(this != &deliverybeamgroup)
    {
        RtDatabaseObject::operator=(deliverybeamgroup);
        *this->m_pImp = *deliverybeamgroup.m_pImp;
    }
    return *this;
}

RtDeliverybeamgroup::~RtDeliverybeamgroup()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtDeliverybeamgroup::get_uid() const { return m_pImp->get_uid();}
void RtDeliverybeamgroup::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(DELIVERYBEAMGROUP_UID);
    setdirty_field(DELIVERYBEAMGROUP_UID, true);
}

//setupuid
std::string RtDeliverybeamgroup::get_setupuid() const { return m_pImp->get_setupuid();}
void RtDeliverybeamgroup::set_setupuid(const std::string& setupuid)
{
    m_pImp->set_setupuid(setupuid);
    enable_field(DELIVERYBEAMGROUP_SETUPUID);
    setdirty_field(DELIVERYBEAMGROUP_SETUPUID, true);
}

//machineuid
std::string RtDeliverybeamgroup::get_machineuid() const { return m_pImp->get_machineuid();}
void RtDeliverybeamgroup::set_machineuid(const std::string& machineuid)
{
    m_pImp->set_machineuid(machineuid);
    enable_field(DELIVERYBEAMGROUP_MACHINEUID);
    setdirty_field(DELIVERYBEAMGROUP_MACHINEUID, true);
}

//voiuid
std::string RtDeliverybeamgroup::get_voiuid() const { return m_pImp->get_voiuid();}
void RtDeliverybeamgroup::set_voiuid(const std::string& voiuid)
{
    m_pImp->set_voiuid(voiuid);
    enable_field(DELIVERYBEAMGROUP_VOIUID);
    setdirty_field(DELIVERYBEAMGROUP_VOIUID, true);
}

//seriesuid
std::string RtDeliverybeamgroup::get_seriesuid() const { return m_pImp->get_seriesuid();}
void RtDeliverybeamgroup::set_seriesuid(const std::string& seriesuid)
{
    m_pImp->set_seriesuid(seriesuid);
    enable_field(DELIVERYBEAMGROUP_SERIESUID);
    setdirty_field(DELIVERYBEAMGROUP_SERIESUID, true);
}

//sopinstanceuid
std::string RtDeliverybeamgroup::get_sopinstanceuid() const { return m_pImp->get_sopinstanceuid();}
void RtDeliverybeamgroup::set_sopinstanceuid(const std::string& sopinstanceuid)
{
    m_pImp->set_sopinstanceuid(sopinstanceuid);
    enable_field(DELIVERYBEAMGROUP_SOPINSTANCEUID);
    setdirty_field(DELIVERYBEAMGROUP_SOPINSTANCEUID, true);
}

//prescriptionuid
std::string RtDeliverybeamgroup::get_prescriptionuid() const { return m_pImp->get_prescriptionuid();}
void RtDeliverybeamgroup::set_prescriptionuid(const std::string& prescriptionuid)
{
    m_pImp->set_prescriptionuid(prescriptionuid);
    enable_field(DELIVERYBEAMGROUP_PRESCRIPTIONUID);
    setdirty_field(DELIVERYBEAMGROUP_PRESCRIPTIONUID, true);
}

//normalpointpoiuid
std::string RtDeliverybeamgroup::get_normalpointpoiuid() const { return m_pImp->get_normalpointpoiuid();}
void RtDeliverybeamgroup::set_normalpointpoiuid(const std::string& normalpointpoiuid)
{
    m_pImp->set_normalpointpoiuid(normalpointpoiuid);
    enable_field(DELIVERYBEAMGROUP_NORMALPOINTPOIUID);
    setdirty_field(DELIVERYBEAMGROUP_NORMALPOINTPOIUID, true);
}

//referenceddeliverybeamgroupuid
std::string RtDeliverybeamgroup::get_referenceddeliverybeamgroupuid() const { return m_pImp->get_referenceddeliverybeamgroupuid();}
void RtDeliverybeamgroup::set_referenceddeliverybeamgroupuid(const std::string& referenceddeliverybeamgroupuid)
{
    m_pImp->set_referenceddeliverybeamgroupuid(referenceddeliverybeamgroupuid);
    enable_field(DELIVERYBEAMGROUP_REFERENCEDDELIVERYBEAMGROUPUID);
    setdirty_field(DELIVERYBEAMGROUP_REFERENCEDDELIVERYBEAMGROUPUID, true);
}

//relatednormgroupuid
std::string RtDeliverybeamgroup::get_relatednormgroupuid() const { return m_pImp->get_relatednormgroupuid();}
void RtDeliverybeamgroup::set_relatednormgroupuid(const std::string& relatednormgroupuid)
{
    m_pImp->set_relatednormgroupuid(relatednormgroupuid);
    enable_field(DELIVERYBEAMGROUP_RELATEDNORMGROUPUID);
    setdirty_field(DELIVERYBEAMGROUP_RELATEDNORMGROUPUID, true);
}

//plantype
int RtDeliverybeamgroup::get_plantype() const { return m_pImp->get_plantype();}
void RtDeliverybeamgroup::set_plantype(const int& plantype)
{
    m_pImp->set_plantype(plantype);
    enable_field(DELIVERYBEAMGROUP_PLANTYPE);
    setdirty_field(DELIVERYBEAMGROUP_PLANTYPE, true);
}

//name
std::string RtDeliverybeamgroup::get_name() const { return m_pImp->get_name();}
void RtDeliverybeamgroup::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(DELIVERYBEAMGROUP_NAME);
    setdirty_field(DELIVERYBEAMGROUP_NAME, true);
}

//planlabel
std::string RtDeliverybeamgroup::get_planlabel() const { return m_pImp->get_planlabel();}
void RtDeliverybeamgroup::set_planlabel(const std::string& planlabel)
{
    m_pImp->set_planlabel(planlabel);
    enable_field(DELIVERYBEAMGROUP_PLANLABEL);
    setdirty_field(DELIVERYBEAMGROUP_PLANLABEL, true);
}

//plandate
DATE_BOOST RtDeliverybeamgroup::get_plandate() const { return m_pImp->get_plandate();}
void RtDeliverybeamgroup::set_plandate(const DATE_BOOST& plandate)
{
    m_pImp->set_plandate(plandate);
    enable_field(DELIVERYBEAMGROUP_PLANDATE);
    setdirty_field(DELIVERYBEAMGROUP_PLANDATE, true);
}

//plantime
TIME_BOOST RtDeliverybeamgroup::get_plantime() const { return m_pImp->get_plantime();}
void RtDeliverybeamgroup::set_plantime(const TIME_BOOST& plantime)
{
    m_pImp->set_plantime(plantime);
    enable_field(DELIVERYBEAMGROUP_PLANTIME);
    setdirty_field(DELIVERYBEAMGROUP_PLANTIME, true);
}

//fraction
int RtDeliverybeamgroup::get_fraction() const { return m_pImp->get_fraction();}
void RtDeliverybeamgroup::set_fraction(const int& fraction)
{
    m_pImp->set_fraction(fraction);
    enable_field(DELIVERYBEAMGROUP_FRACTION);
    setdirty_field(DELIVERYBEAMGROUP_FRACTION, true);
}

//doseperfraction
double RtDeliverybeamgroup::get_doseperfraction() const { return m_pImp->get_doseperfraction();}
void RtDeliverybeamgroup::set_doseperfraction(const double& doseperfraction)
{
    m_pImp->set_doseperfraction(doseperfraction);
    enable_field(DELIVERYBEAMGROUP_DOSEPERFRACTION);
    setdirty_field(DELIVERYBEAMGROUP_DOSEPERFRACTION, true);
}

//isclockwise
bool RtDeliverybeamgroup::get_isclockwise() const { return m_pImp->get_isclockwise();}
void RtDeliverybeamgroup::set_isclockwise(const bool& isclockwise)
{
    m_pImp->set_isclockwise(isclockwise);
    enable_field(DELIVERYBEAMGROUP_ISCLOCKWISE);
    setdirty_field(DELIVERYBEAMGROUP_ISCLOCKWISE, true);
}

//rtplangeometry
int RtDeliverybeamgroup::get_rtplangeometry() const { return m_pImp->get_rtplangeometry();}
void RtDeliverybeamgroup::set_rtplangeometry(const int& rtplangeometry)
{
    m_pImp->set_rtplangeometry(rtplangeometry);
    enable_field(DELIVERYBEAMGROUP_RTPLANGEOMETRY);
    setdirty_field(DELIVERYBEAMGROUP_RTPLANGEOMETRY, true);
}

//startdate
DATE_BOOST RtDeliverybeamgroup::get_startdate() const { return m_pImp->get_startdate();}
void RtDeliverybeamgroup::set_startdate(const DATE_BOOST& startdate)
{
    m_pImp->set_startdate(startdate);
    enable_field(DELIVERYBEAMGROUP_STARTDATE);
    setdirty_field(DELIVERYBEAMGROUP_STARTDATE, true);
}

//ismondayselected
bool RtDeliverybeamgroup::get_ismondayselected() const { return m_pImp->get_ismondayselected();}
void RtDeliverybeamgroup::set_ismondayselected(const bool& ismondayselected)
{
    m_pImp->set_ismondayselected(ismondayselected);
    enable_field(DELIVERYBEAMGROUP_ISMONDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISMONDAYSELECTED, true);
}

//istuesdayselected
bool RtDeliverybeamgroup::get_istuesdayselected() const { return m_pImp->get_istuesdayselected();}
void RtDeliverybeamgroup::set_istuesdayselected(const bool& istuesdayselected)
{
    m_pImp->set_istuesdayselected(istuesdayselected);
    enable_field(DELIVERYBEAMGROUP_ISTUESDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISTUESDAYSELECTED, true);
}

//iswednesdayselected
bool RtDeliverybeamgroup::get_iswednesdayselected() const { return m_pImp->get_iswednesdayselected();}
void RtDeliverybeamgroup::set_iswednesdayselected(const bool& iswednesdayselected)
{
    m_pImp->set_iswednesdayselected(iswednesdayselected);
    enable_field(DELIVERYBEAMGROUP_ISWEDNESDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISWEDNESDAYSELECTED, true);
}

//isthursdayselected
bool RtDeliverybeamgroup::get_isthursdayselected() const { return m_pImp->get_isthursdayselected();}
void RtDeliverybeamgroup::set_isthursdayselected(const bool& isthursdayselected)
{
    m_pImp->set_isthursdayselected(isthursdayselected);
    enable_field(DELIVERYBEAMGROUP_ISTHURSDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISTHURSDAYSELECTED, true);
}

//isfridayselected
bool RtDeliverybeamgroup::get_isfridayselected() const { return m_pImp->get_isfridayselected();}
void RtDeliverybeamgroup::set_isfridayselected(const bool& isfridayselected)
{
    m_pImp->set_isfridayselected(isfridayselected);
    enable_field(DELIVERYBEAMGROUP_ISFRIDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISFRIDAYSELECTED, true);
}

//issaturdayselected
bool RtDeliverybeamgroup::get_issaturdayselected() const { return m_pImp->get_issaturdayselected();}
void RtDeliverybeamgroup::set_issaturdayselected(const bool& issaturdayselected)
{
    m_pImp->set_issaturdayselected(issaturdayselected);
    enable_field(DELIVERYBEAMGROUP_ISSATURDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISSATURDAYSELECTED, true);
}

//issundayselected
bool RtDeliverybeamgroup::get_issundayselected() const { return m_pImp->get_issundayselected();}
void RtDeliverybeamgroup::set_issundayselected(const bool& issundayselected)
{
    m_pImp->set_issundayselected(issundayselected);
    enable_field(DELIVERYBEAMGROUP_ISSUNDAYSELECTED);
    setdirty_field(DELIVERYBEAMGROUP_ISSUNDAYSELECTED, true);
}

//isincludeholiday
bool RtDeliverybeamgroup::get_isincludeholiday() const { return m_pImp->get_isincludeholiday();}
void RtDeliverybeamgroup::set_isincludeholiday(const bool& isincludeholiday)
{
    m_pImp->set_isincludeholiday(isincludeholiday);
    enable_field(DELIVERYBEAMGROUP_ISINCLUDEHOLIDAY);
    setdirty_field(DELIVERYBEAMGROUP_ISINCLUDEHOLIDAY, true);
}

//timesperday
int RtDeliverybeamgroup::get_timesperday() const { return m_pImp->get_timesperday();}
void RtDeliverybeamgroup::set_timesperday(const int& timesperday)
{
    m_pImp->set_timesperday(timesperday);
    enable_field(DELIVERYBEAMGROUP_TIMESPERDAY);
    setdirty_field(DELIVERYBEAMGROUP_TIMESPERDAY, true);
}

//intervalhour
float RtDeliverybeamgroup::get_intervalhour() const { return m_pImp->get_intervalhour();}
void RtDeliverybeamgroup::set_intervalhour(const float& intervalhour)
{
    m_pImp->set_intervalhour(intervalhour);
    enable_field(DELIVERYBEAMGROUP_INTERVALHOUR);
    setdirty_field(DELIVERYBEAMGROUP_INTERVALHOUR, true);
}

//rotationtype
int RtDeliverybeamgroup::get_rotationtype() const { return m_pImp->get_rotationtype();}
void RtDeliverybeamgroup::set_rotationtype(const int& rotationtype)
{
    m_pImp->set_rotationtype(rotationtype);
    enable_field(DELIVERYBEAMGROUP_ROTATIONTYPE);
    setdirty_field(DELIVERYBEAMGROUP_ROTATIONTYPE, true);
}

//estimatedtime
TIME_BOOST RtDeliverybeamgroup::get_estimatedtime() const { return m_pImp->get_estimatedtime();}
void RtDeliverybeamgroup::set_estimatedtime(const TIME_BOOST& estimatedtime)
{
    m_pImp->set_estimatedtime(estimatedtime);
    enable_field(DELIVERYBEAMGROUP_ESTIMATEDTIME);
    setdirty_field(DELIVERYBEAMGROUP_ESTIMATEDTIME, true);
}

//istotaltimeused
bool RtDeliverybeamgroup::get_istotaltimeused() const { return m_pImp->get_istotaltimeused();}
void RtDeliverybeamgroup::set_istotaltimeused(const bool& istotaltimeused)
{
    m_pImp->set_istotaltimeused(istotaltimeused);
    enable_field(DELIVERYBEAMGROUP_ISTOTALTIMEUSED);
    setdirty_field(DELIVERYBEAMGROUP_ISTOTALTIMEUSED, true);
}

//totaltime
TIME_BOOST RtDeliverybeamgroup::get_totaltime() const { return m_pImp->get_totaltime();}
void RtDeliverybeamgroup::set_totaltime(const TIME_BOOST& totaltime)
{
    m_pImp->set_totaltime(totaltime);
    enable_field(DELIVERYBEAMGROUP_TOTALTIME);
    setdirty_field(DELIVERYBEAMGROUP_TOTALTIME, true);
}

//sourcetype
int RtDeliverybeamgroup::get_sourcetype() const { return m_pImp->get_sourcetype();}
void RtDeliverybeamgroup::set_sourcetype(const int& sourcetype)
{
    m_pImp->set_sourcetype(sourcetype);
    enable_field(DELIVERYBEAMGROUP_SOURCETYPE);
    setdirty_field(DELIVERYBEAMGROUP_SOURCETYPE, true);
}

//crc
std::string RtDeliverybeamgroup::get_crc() const { return m_pImp->get_crc();}
void RtDeliverybeamgroup::set_crc(const std::string& crc)
{
    m_pImp->set_crc(crc);
    enable_field(DELIVERYBEAMGROUP_CRC);
    setdirty_field(DELIVERYBEAMGROUP_CRC, true);
}

//isgating
bool RtDeliverybeamgroup::get_isgating() const { return m_pImp->get_isgating();}
void RtDeliverybeamgroup::set_isgating(const bool& isgating)
{
    m_pImp->set_isgating(isgating);
    enable_field(DELIVERYBEAMGROUP_ISGATING);
    setdirty_field(DELIVERYBEAMGROUP_ISGATING, true);
}

//inactive
bool RtDeliverybeamgroup::get_inactive() const { return m_pImp->get_inactive();}
void RtDeliverybeamgroup::set_inactive(const bool& inactive)
{
    m_pImp->set_inactive(inactive);
    enable_field(DELIVERYBEAMGROUP_INACTIVE);
    setdirty_field(DELIVERYBEAMGROUP_INACTIVE, true);
}

//isintervaloptional
bool RtDeliverybeamgroup::get_isintervaloptional() const { return m_pImp->get_isintervaloptional();}
void RtDeliverybeamgroup::set_isintervaloptional(const bool& isintervaloptional)
{
    m_pImp->set_isintervaloptional(isintervaloptional);
    enable_field(DELIVERYBEAMGROUP_ISINTERVALOPTIONAL);
    setdirty_field(DELIVERYBEAMGROUP_ISINTERVALOPTIONAL, true);
}

//binmode
int RtDeliverybeamgroup::get_binmode() const { return m_pImp->get_binmode();}
void RtDeliverybeamgroup::set_binmode(const int& binmode)
{
    m_pImp->set_binmode(binmode);
    enable_field(DELIVERYBEAMGROUP_BINMODE);
    setdirty_field(DELIVERYBEAMGROUP_BINMODE, true);
}

//beamonrangestart
double RtDeliverybeamgroup::get_beamonrangestart() const { return m_pImp->get_beamonrangestart();}
void RtDeliverybeamgroup::set_beamonrangestart(const double& beamonrangestart)
{
    m_pImp->set_beamonrangestart(beamonrangestart);
    enable_field(DELIVERYBEAMGROUP_BEAMONRANGESTART);
    setdirty_field(DELIVERYBEAMGROUP_BEAMONRANGESTART, true);
}

//beamonrangeend
double RtDeliverybeamgroup::get_beamonrangeend() const { return m_pImp->get_beamonrangeend();}
void RtDeliverybeamgroup::set_beamonrangeend(const double& beamonrangeend)
{
    m_pImp->set_beamonrangeend(beamonrangeend);
    enable_field(DELIVERYBEAMGROUP_BEAMONRANGEEND);
    setdirty_field(DELIVERYBEAMGROUP_BEAMONRANGEEND, true);
}

//description
std::string RtDeliverybeamgroup::get_description() const { return m_pImp->get_description();}
void RtDeliverybeamgroup::set_description(const std::string& description)
{
    m_pImp->set_description(description);
    enable_field(DELIVERYBEAMGROUP_DESCRIPTION);
    setdirty_field(DELIVERYBEAMGROUP_DESCRIPTION, true);
}

//activeinactivereason
std::string RtDeliverybeamgroup::get_activeinactivereason() const { return m_pImp->get_activeinactivereason();}
void RtDeliverybeamgroup::set_activeinactivereason(const std::string& activeinactivereason)
{
    m_pImp->set_activeinactivereason(activeinactivereason);
    enable_field(DELIVERYBEAMGROUP_ACTIVEINACTIVEREASON);
    setdirty_field(DELIVERYBEAMGROUP_ACTIVEINACTIVEREASON, true);
}

//radiationtype
int RtDeliverybeamgroup::get_radiationtype() const { return m_pImp->get_radiationtype();}
void RtDeliverybeamgroup::set_radiationtype(const int& radiationtype)
{
    m_pImp->set_radiationtype(radiationtype);
    enable_field(DELIVERYBEAMGROUP_RADIATIONTYPE);
    setdirty_field(DELIVERYBEAMGROUP_RADIATIONTYPE, true);
}

//toleranceuid
std::string RtDeliverybeamgroup::get_toleranceuid() const { return m_pImp->get_toleranceuid();}
void RtDeliverybeamgroup::set_toleranceuid(const std::string& toleranceuid)
{
    m_pImp->set_toleranceuid(toleranceuid);
    enable_field(DELIVERYBEAMGROUP_TOLERANCEUID);
    setdirty_field(DELIVERYBEAMGROUP_TOLERANCEUID, true);
}

//isqa
bool RtDeliverybeamgroup::get_isqa() const { return m_pImp->get_isqa();}
void RtDeliverybeamgroup::set_isqa(const bool& isqa)
{
    m_pImp->set_isqa(isqa);
    enable_field(DELIVERYBEAMGROUP_ISQA);
    setdirty_field(DELIVERYBEAMGROUP_ISQA, true);
}

//updatetime
DATETIME_BOOST RtDeliverybeamgroup::get_updatetime() const { return m_pImp->get_updatetime();}
void RtDeliverybeamgroup::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(DELIVERYBEAMGROUP_UPDATETIME);
    setdirty_field(DELIVERYBEAMGROUP_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE