//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_series.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_series.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtSeries& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //94 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < SERIES_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_SERIES_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsseries SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < SERIES_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_SERIES_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsseries (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_sopinstanceuid = "";
    std::string	data_studyuid = "";
    std::string	data_seriesgroupuid = "";
    std::string	data_courseuid = "";
    std::string	data_ct2densityuid = "";
    std::string	data_modality = "";
    std::string	data_relatedcbctuid = "";
    std::string	data_relatedfbctuid = "";
    std::string	data_sessionuid = "";
    std::string	data_seriesname = "";
    std::string	data_seriespixeldatafilepath = "";
    int			data_seriesnumber = 0;
    std::string	data_imagelaterality = "";
    MYSQL_TIME	data_seriesdate;
    MYSQL_TIME	data_seriestime;
    std::string	data_performingphysicianname = "";
    std::string	data_protocolname = "";
    std::string	data_seriesdescription = "";
    std::string	data_operatorsname = "";
    std::string	data_bodypartexamined = "";
    std::string	data_patientposition = "";
    std::string	data_manufacturer = "";
    std::string	data_institutionname = "";
    int			data_smallestpixelvalueinseries = 0;
    int			data_largestpixelvalueinseries = 0;
    std::string	data_laterality = "";
    MYSQL_TIME	data_performedprocedurestepstartdate;
    MYSQL_TIME	data_performedprocedurestepstarttime;
    std::string	data_performedprocedurestepid = "";
    std::string	data_performedprocedurestepdescription = "";
    std::string	data_seriestype = "";
    std::string	data_sourceisotopename = "";
    std::string	data_radionuclidetotaldose = "";
    MYSQL_TIME	data_radiopharmaceuticalstartdatetime;
    std::string	data_radiopharmaceutical = "";
    std::string	data_seriesprintstatus = "";
    std::string	data_seriessendstatus = "";
    std::string	data_seriesstoredindvd = "";
    std::string	data_seriesstoredinusb = "";
    std::string	data_seriespatientagegroup = "";
    std::string	data_seriesprotect = "";
    int			data_seriesconfirmstatus = 0;
    std::string	data_seriesrejectreason = "";
    MYSQL_TIME	data_seriesconfirmdatetime;
    std::string	data_resolution = "";
    std::string	data_recincrement = "";
    std::string	data_scantype = "";
    std::string	data_presentationintenttype = "";
    std::string	data_seriesscanid = "";
    std::string	data_seriesaprid = "";
    std::string	data_seriesaprgroupname = "";
    std::string	data_seriesaprgroupid = "";
    std::string	data_seriesisfavourite = "";
    int			data_isfreecassette = 0;
    std::string	data_seriesexamplefigurepath = "";
    std::string	data_seriespsasid = "";
    std::string	data_seriespatienttypeid = "";
    int			data_seriesissecondcaptured = 0;
    int			data_seriesisexamed = 0;
    int			data_rawdataacquisitionnumber = 0;
    MYSQL_TIME	data_rawdataacquisitiondate;
    MYSQL_TIME	data_rawdataacquisitiontime;
    std::string	data_rawdatainstanceuid = "";
    int			data_reconresult = 0;
    std::string	data_seriesthumbnail = "";
    std::string	data_seriescomments = "";
    std::string	data_protocolid = "";
    std::string	data_procedurename = "";
    std::string	data_protocollink = "";
    int			data_imagetype = 0;
    std::string	data_seriesreserved0 = "";
    std::string	data_seriesreserved1 = "";
    std::string	data_patientname = "";
    std::string	data_manufacturermodelname = "";
    MYSQL_TIME	data_acquisitiontime;
    std::string	data_frameofreferenceuid = "";
    bool		data_isphantom = false;
    float		data_tabletopposition = 0.f;
    int			data_phase = 0;
    bool		data_ismainphase = false;
    std::string	data_relatedwavedatafilepath = "";
    bool		data_isselected = false;
    int			data_gatingtype = 0;
    int			data_binscope = 0;
    std::string	data_currentbininfo = "";
    int			data_respiratorytype = 0;
    float		data_breathrate = 0.f;
    int			data_binmode = 0;
    int			data_totalbinnumber = 0;
    int			data_binimagetotalnumber = 0;
    bool		data_isqa = false;
    std::string	data_convolutionkernal = "";
    MYSQL_TIME	data_updatetime;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < SERIES_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//sopinstanceuid varchar
            {
                data_sopinstanceuid = src.get_sopinstanceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sopinstanceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sopinstanceuid.size();
            }
            break;
        case 2: 	//studyuid varchar
            {
                data_studyuid = src.get_studyuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_studyuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_studyuid.size();
            }
            break;
        case 3: 	//seriesgroupuid varchar
            {
                data_seriesgroupuid = src.get_seriesgroupuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesgroupuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesgroupuid.size();
            }
            break;
        case 4: 	//courseuid varchar
            {
                data_courseuid = src.get_courseuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_courseuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_courseuid.size();
            }
            break;
        case 5: 	//ct2densityuid varchar
            {
                data_ct2densityuid = src.get_ct2densityuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_ct2densityuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_ct2densityuid.size();
            }
            break;
        case 6: 	//modality varchar
            {
                data_modality = src.get_modality();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_modality.c_str();
                bind[iCount].buffer_length = (unsigned long)data_modality.size();
            }
            break;
        case 7: 	//relatedcbctuid varchar
            {
                data_relatedcbctuid = src.get_relatedcbctuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_relatedcbctuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_relatedcbctuid.size();
            }
            break;
        case 8: 	//relatedfbctuid varchar
            {
                data_relatedfbctuid = src.get_relatedfbctuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_relatedfbctuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_relatedfbctuid.size();
            }
            break;
        case 9: 	//sessionuid varchar
            {
                data_sessionuid = src.get_sessionuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sessionuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sessionuid.size();
            }
            break;
        case 10: 	//seriesname varchar
            {
                data_seriesname = src.get_seriesname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesname.size();
            }
            break;
        case 11: 	//seriespixeldatafilepath varchar
            {
                data_seriespixeldatafilepath = src.get_seriespixeldatafilepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriespixeldatafilepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriespixeldatafilepath.size();
            }
            break;
        case 12: 	//seriesnumber int
            {
                data_seriesnumber = src.get_seriesnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_seriesnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 13: 	//imagelaterality varchar
            {
                data_imagelaterality = src.get_imagelaterality();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagelaterality.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagelaterality.size();
            }
            break;
        case 14: 	//seriesdate date
            {
                ConvertDateTime2DB(src.get_seriesdate(), &data_seriesdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_seriesdate;
                if (src.get_seriesdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 15: 	//seriestime time
            {
                ConvertDateTime2DB(src.get_seriestime(), &data_seriestime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_seriestime;
                if (src.get_seriestime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 16: 	//performingphysicianname varchar
            {
                data_performingphysicianname = src.get_performingphysicianname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performingphysicianname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performingphysicianname.size();
            }
            break;
        case 17: 	//protocolname varchar
            {
                data_protocolname = src.get_protocolname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_protocolname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_protocolname.size();
            }
            break;
        case 18: 	//seriesdescription varchar
            {
                data_seriesdescription = src.get_seriesdescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesdescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesdescription.size();
            }
            break;
        case 19: 	//operatorsname varchar
            {
                data_operatorsname = src.get_operatorsname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_operatorsname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_operatorsname.size();
            }
            break;
        case 20: 	//bodypartexamined varchar
            {
                data_bodypartexamined = src.get_bodypartexamined();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_bodypartexamined.c_str();
                bind[iCount].buffer_length = (unsigned long)data_bodypartexamined.size();
            }
            break;
        case 21: 	//patientposition varchar
            {
                data_patientposition = src.get_patientposition();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientposition.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientposition.size();
            }
            break;
        case 22: 	//manufacturer varchar
            {
                data_manufacturer = src.get_manufacturer();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_manufacturer.c_str();
                bind[iCount].buffer_length = (unsigned long)data_manufacturer.size();
            }
            break;
        case 23: 	//institutionname varchar
            {
                data_institutionname = src.get_institutionname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_institutionname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_institutionname.size();
            }
            break;
        case 24: 	//smallestpixelvalueinseries int
            {
                data_smallestpixelvalueinseries = src.get_smallestpixelvalueinseries();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_smallestpixelvalueinseries;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 25: 	//largestpixelvalueinseries int
            {
                data_largestpixelvalueinseries = src.get_largestpixelvalueinseries();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_largestpixelvalueinseries;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 26: 	//laterality varchar
            {
                data_laterality = src.get_laterality();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_laterality.c_str();
                bind[iCount].buffer_length = (unsigned long)data_laterality.size();
            }
            break;
        case 27: 	//performedprocedurestepstartdate date
            {
                ConvertDateTime2DB(src.get_performedprocedurestepstartdate(), &data_performedprocedurestepstartdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_performedprocedurestepstartdate;
                if (src.get_performedprocedurestepstartdate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 28: 	//performedprocedurestepstarttime time
            {
                ConvertDateTime2DB(src.get_performedprocedurestepstarttime(), &data_performedprocedurestepstarttime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_performedprocedurestepstarttime;
                if (src.get_performedprocedurestepstarttime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 29: 	//performedprocedurestepid varchar
            {
                data_performedprocedurestepid = src.get_performedprocedurestepid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performedprocedurestepid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performedprocedurestepid.size();
            }
            break;
        case 30: 	//performedprocedurestepdescription varchar
            {
                data_performedprocedurestepdescription = src.get_performedprocedurestepdescription();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_performedprocedurestepdescription.c_str();
                bind[iCount].buffer_length = (unsigned long)data_performedprocedurestepdescription.size();
            }
            break;
        case 31: 	//seriestype varchar
            {
                data_seriestype = src.get_seriestype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriestype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriestype.size();
            }
            break;
        case 32: 	//sourceisotopename varchar
            {
                data_sourceisotopename = src.get_sourceisotopename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sourceisotopename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sourceisotopename.size();
            }
            break;
        case 33: 	//radionuclidetotaldose varchar
            {
                data_radionuclidetotaldose = src.get_radionuclidetotaldose();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_radionuclidetotaldose.c_str();
                bind[iCount].buffer_length = (unsigned long)data_radionuclidetotaldose.size();
            }
            break;
        case 34: 	//radiopharmaceuticalstartdatetime datetime
            {
                ConvertDateTime2DB(src.get_radiopharmaceuticalstartdatetime(), &data_radiopharmaceuticalstartdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_radiopharmaceuticalstartdatetime;
                if (src.get_radiopharmaceuticalstartdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 35: 	//radiopharmaceutical varchar
            {
                data_radiopharmaceutical = src.get_radiopharmaceutical();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_radiopharmaceutical.c_str();
                bind[iCount].buffer_length = (unsigned long)data_radiopharmaceutical.size();
            }
            break;
        case 36: 	//seriesprintstatus varchar
            {
                data_seriesprintstatus = src.get_seriesprintstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesprintstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesprintstatus.size();
            }
            break;
        case 37: 	//seriessendstatus varchar
            {
                data_seriessendstatus = src.get_seriessendstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriessendstatus.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriessendstatus.size();
            }
            break;
        case 38: 	//seriesstoredindvd varchar
            {
                data_seriesstoredindvd = src.get_seriesstoredindvd();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesstoredindvd.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesstoredindvd.size();
            }
            break;
        case 39: 	//seriesstoredinusb varchar
            {
                data_seriesstoredinusb = src.get_seriesstoredinusb();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesstoredinusb.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesstoredinusb.size();
            }
            break;
        case 40: 	//seriespatientagegroup varchar
            {
                data_seriespatientagegroup = src.get_seriespatientagegroup();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriespatientagegroup.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriespatientagegroup.size();
            }
            break;
        case 41: 	//seriesprotect varchar
            {
                data_seriesprotect = src.get_seriesprotect();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesprotect.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesprotect.size();
            }
            break;
        case 42: 	//seriesconfirmstatus int
            {
                data_seriesconfirmstatus = src.get_seriesconfirmstatus();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_seriesconfirmstatus;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 43: 	//seriesrejectreason varchar
            {
                data_seriesrejectreason = src.get_seriesrejectreason();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesrejectreason.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesrejectreason.size();
            }
            break;
        case 44: 	//seriesconfirmdatetime datetime
            {
                ConvertDateTime2DB(src.get_seriesconfirmdatetime(), &data_seriesconfirmdatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_seriesconfirmdatetime;
                if (src.get_seriesconfirmdatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 45: 	//resolution varchar
            {
                data_resolution = src.get_resolution();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_resolution.c_str();
                bind[iCount].buffer_length = (unsigned long)data_resolution.size();
            }
            break;
        case 46: 	//recincrement varchar
            {
                data_recincrement = src.get_recincrement();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_recincrement.c_str();
                bind[iCount].buffer_length = (unsigned long)data_recincrement.size();
            }
            break;
        case 47: 	//scantype varchar
            {
                data_scantype = src.get_scantype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_scantype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_scantype.size();
            }
            break;
        case 48: 	//presentationintenttype varchar
            {
                data_presentationintenttype = src.get_presentationintenttype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_presentationintenttype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_presentationintenttype.size();
            }
            break;
        case 49: 	//seriesscanid varchar
            {
                data_seriesscanid = src.get_seriesscanid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesscanid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesscanid.size();
            }
            break;
        case 50: 	//seriesaprid varchar
            {
                data_seriesaprid = src.get_seriesaprid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesaprid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesaprid.size();
            }
            break;
        case 51: 	//seriesaprgroupname varchar
            {
                data_seriesaprgroupname = src.get_seriesaprgroupname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesaprgroupname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesaprgroupname.size();
            }
            break;
        case 52: 	//seriesaprgroupid varchar
            {
                data_seriesaprgroupid = src.get_seriesaprgroupid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesaprgroupid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesaprgroupid.size();
            }
            break;
        case 53: 	//seriesisfavourite varchar
            {
                data_seriesisfavourite = src.get_seriesisfavourite();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesisfavourite.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesisfavourite.size();
            }
            break;
        case 54: 	//isfreecassette int
            {
                data_isfreecassette = src.get_isfreecassette();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_isfreecassette;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 55: 	//seriesexamplefigurepath varchar
            {
                data_seriesexamplefigurepath = src.get_seriesexamplefigurepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesexamplefigurepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesexamplefigurepath.size();
            }
            break;
        case 56: 	//seriespsasid varchar
            {
                data_seriespsasid = src.get_seriespsasid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriespsasid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriespsasid.size();
            }
            break;
        case 57: 	//seriespatienttypeid varchar
            {
                data_seriespatienttypeid = src.get_seriespatienttypeid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriespatienttypeid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriespatienttypeid.size();
            }
            break;
        case 58: 	//seriesissecondcaptured int
            {
                data_seriesissecondcaptured = src.get_seriesissecondcaptured();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_seriesissecondcaptured;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 59: 	//seriesisexamed int
            {
                data_seriesisexamed = src.get_seriesisexamed();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_seriesisexamed;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 60: 	//rawdataacquisitionnumber int
            {
                data_rawdataacquisitionnumber = src.get_rawdataacquisitionnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_rawdataacquisitionnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 61: 	//rawdataacquisitiondate date
            {
                ConvertDateTime2DB(src.get_rawdataacquisitiondate(), &data_rawdataacquisitiondate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATE;
                bind[iCount].buffer = (void*)&data_rawdataacquisitiondate;
                if (src.get_rawdataacquisitiondate().is_not_a_date()) bind[iCount].is_null = &isnull;
            }
            break;
        case 62: 	//rawdataacquisitiontime time
            {
                ConvertDateTime2DB(src.get_rawdataacquisitiontime(), &data_rawdataacquisitiontime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIME;
                bind[iCount].buffer = (void*)&data_rawdataacquisitiontime;
                if (src.get_rawdataacquisitiontime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 63: 	//rawdatainstanceuid varchar
            {
                data_rawdatainstanceuid = src.get_rawdatainstanceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_rawdatainstanceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_rawdatainstanceuid.size();
            }
            break;
        case 64: 	//reconresult int
            {
                data_reconresult = src.get_reconresult();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_reconresult;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 65: 	//seriesthumbnail blob
            {
                data_seriesthumbnail = src.get_seriesthumbnail();
                if(data_seriesthumbnail.empty()) bind[iCount].is_null = &isnull;
                bind[iCount].buffer_type= MYSQL_TYPE_BLOB;
                bind[iCount].buffer= (void *)data_seriesthumbnail.c_str();
                bind[iCount].buffer_length= (unsigned long)data_seriesthumbnail.size();
            }
            break;
        case 66: 	//seriescomments varchar
            {
                data_seriescomments = src.get_seriescomments();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriescomments.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriescomments.size();
            }
            break;
        case 67: 	//protocolid varchar
            {
                data_protocolid = src.get_protocolid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_protocolid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_protocolid.size();
            }
            break;
        case 68: 	//procedurename varchar
            {
                data_procedurename = src.get_procedurename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_procedurename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_procedurename.size();
            }
            break;
        case 69: 	//protocollink varchar
            {
                data_protocollink = src.get_protocollink();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_protocollink.c_str();
                bind[iCount].buffer_length = (unsigned long)data_protocollink.size();
            }
            break;
        case 70: 	//imagetype int
            {
                data_imagetype = src.get_imagetype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_imagetype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 71: 	//seriesreserved0 varchar
            {
                data_seriesreserved0 = src.get_seriesreserved0();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesreserved0.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesreserved0.size();
            }
            break;
        case 72: 	//seriesreserved1 varchar
            {
                data_seriesreserved1 = src.get_seriesreserved1();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesreserved1.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesreserved1.size();
            }
            break;
        case 73: 	//patientname varchar
            {
                data_patientname = src.get_patientname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientname.size();
            }
            break;
        case 74: 	//manufacturermodelname varchar
            {
                data_manufacturermodelname = src.get_manufacturermodelname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_manufacturermodelname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_manufacturermodelname.size();
            }
            break;
        case 75: 	//acquisitiontime datetime
            {
                ConvertDateTime2DB(src.get_acquisitiontime(), &data_acquisitiontime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_acquisitiontime;
                if (src.get_acquisitiontime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 76: 	//frameofreferenceuid varchar
            {
                data_frameofreferenceuid = src.get_frameofreferenceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_frameofreferenceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_frameofreferenceuid.size();
            }
            break;
        case 77: 	//isphantom tinyint
            {
                data_isphantom = src.get_isphantom();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isphantom;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 78: 	//tabletopposition float
            {
                data_tabletopposition = src.get_tabletopposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_tabletopposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 79: 	//phase int
            {
                data_phase = src.get_phase();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_phase;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 80: 	//ismainphase tinyint
            {
                data_ismainphase = src.get_ismainphase();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_ismainphase;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 81: 	//relatedwavedatafilepath varchar
            {
                data_relatedwavedatafilepath = src.get_relatedwavedatafilepath();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_relatedwavedatafilepath.c_str();
                bind[iCount].buffer_length = (unsigned long)data_relatedwavedatafilepath.size();
            }
            break;
        case 82: 	//isselected tinyint
            {
                data_isselected = src.get_isselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 83: 	//gatingtype int
            {
                data_gatingtype = src.get_gatingtype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_gatingtype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 84: 	//binscope int
            {
                data_binscope = src.get_binscope();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_binscope;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 85: 	//currentbininfo varchar
            {
                data_currentbininfo = src.get_currentbininfo();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_currentbininfo.c_str();
                bind[iCount].buffer_length = (unsigned long)data_currentbininfo.size();
            }
            break;
        case 86: 	//respiratorytype int
            {
                data_respiratorytype = src.get_respiratorytype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_respiratorytype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 87: 	//breathrate float
            {
                data_breathrate = src.get_breathrate();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_breathrate;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 88: 	//binmode int
            {
                data_binmode = src.get_binmode();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_binmode;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 89: 	//totalbinnumber int
            {
                data_totalbinnumber = src.get_totalbinnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_totalbinnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 90: 	//binimagetotalnumber int
            {
                data_binimagetotalnumber = src.get_binimagetotalnumber();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_binimagetotalnumber;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 91: 	//isqa tinyint
            {
                data_isqa = src.get_isqa();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isqa;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 92: 	//convolutionkernal varchar
            {
                data_convolutionkernal = src.get_convolutionkernal();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_convolutionkernal.c_str();
                bind[iCount].buffer_length = (unsigned long)data_convolutionkernal.size();
            }
            break;
        case 93: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtSeries*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtSeries*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsseries    94 parameters
    const int field_num = SERIES_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 64;
    MAX_LENGTH[3] = 64;
    MAX_LENGTH[4] = 64;
    MAX_LENGTH[5] = 64;
    MAX_LENGTH[6] = 16;
    MAX_LENGTH[7] = 64;
    MAX_LENGTH[8] = 64;
    MAX_LENGTH[9] = 64;
    MAX_LENGTH[10] = 64;
    MAX_LENGTH[11] = 1024;
    MAX_LENGTH[12] = 0;
    MAX_LENGTH[13] = 16;
    MAX_LENGTH[14] = 0;
    MAX_LENGTH[15] = 0;
    MAX_LENGTH[16] = 259;
    MAX_LENGTH[17] = 64;
    MAX_LENGTH[18] = 64;
    MAX_LENGTH[19] = 259;
    MAX_LENGTH[20] = 16;
    MAX_LENGTH[21] = 16;
    MAX_LENGTH[22] = 64;
    MAX_LENGTH[23] = 64;
    MAX_LENGTH[24] = 0;
    MAX_LENGTH[25] = 0;
    MAX_LENGTH[26] = 16;
    MAX_LENGTH[27] = 0;
    MAX_LENGTH[28] = 0;
    MAX_LENGTH[29] = 16;
    MAX_LENGTH[30] = 64;
    MAX_LENGTH[31] = 33;
    MAX_LENGTH[32] = 64;
    MAX_LENGTH[33] = 16;
    MAX_LENGTH[34] = 0;
    MAX_LENGTH[35] = 64;
    MAX_LENGTH[36] = 4;
    MAX_LENGTH[37] = 4;
    MAX_LENGTH[38] = 4;
    MAX_LENGTH[39] = 4;
    MAX_LENGTH[40] = 4;
    MAX_LENGTH[41] = 4;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 255;
    MAX_LENGTH[44] = 0;
    MAX_LENGTH[45] = 64;
    MAX_LENGTH[46] = 64;
    MAX_LENGTH[47] = 64;
    MAX_LENGTH[48] = 16;
    MAX_LENGTH[49] = 16;
    MAX_LENGTH[50] = 16;
    MAX_LENGTH[51] = 16;
    MAX_LENGTH[52] = 16;
    MAX_LENGTH[53] = 16;
    MAX_LENGTH[54] = 0;
    MAX_LENGTH[55] = 255;
    MAX_LENGTH[56] = 16;
    MAX_LENGTH[57] = 16;
    MAX_LENGTH[58] = 0;
    MAX_LENGTH[59] = 0;
    MAX_LENGTH[60] = 0;
    MAX_LENGTH[61] = 0;
    MAX_LENGTH[62] = 0;
    MAX_LENGTH[63] = 64;
    MAX_LENGTH[64] = 0;
    MAX_LENGTH[65] = 65535;
    MAX_LENGTH[66] = 1024;
    MAX_LENGTH[67] = 16;
    MAX_LENGTH[68] = 16;
    MAX_LENGTH[69] = 64;
    MAX_LENGTH[70] = 0;
    MAX_LENGTH[71] = 64;
    MAX_LENGTH[72] = 64;
    MAX_LENGTH[73] = 64;
    MAX_LENGTH[74] = 64;
    MAX_LENGTH[75] = 0;
    MAX_LENGTH[76] = 64;
    MAX_LENGTH[77] = 0;
    MAX_LENGTH[78] = 0;
    MAX_LENGTH[79] = 0;
    MAX_LENGTH[80] = 0;
    MAX_LENGTH[81] = 1000;
    MAX_LENGTH[82] = 0;
    MAX_LENGTH[83] = 0;
    MAX_LENGTH[84] = 0;
    MAX_LENGTH[85] = 1024;
    MAX_LENGTH[86] = 0;
    MAX_LENGTH[87] = 0;
    MAX_LENGTH[88] = 0;
    MAX_LENGTH[89] = 0;
    MAX_LENGTH[90] = 0;
    MAX_LENGTH[91] = 0;
    MAX_LENGTH[92] = 64;
    MAX_LENGTH[93] = 0;

    //std::string	data_uid
    //std::string	data_sopinstanceuid
    //std::string	data_studyuid
    //std::string	data_seriesgroupuid
    //std::string	data_courseuid
    //std::string	data_ct2densityuid
    //std::string	data_modality
    //std::string	data_relatedcbctuid
    //std::string	data_relatedfbctuid
    //std::string	data_sessionuid
    //std::string	data_seriesname
    //std::string	data_seriespixeldatafilepath
    int	data_seriesnumber = 0;
    //std::string	data_imagelaterality
    MYSQL_TIME	data_seriesdate;
    MYSQL_TIME	data_seriestime;
    //std::string	data_performingphysicianname
    //std::string	data_protocolname
    //std::string	data_seriesdescription
    //std::string	data_operatorsname
    //std::string	data_bodypartexamined
    //std::string	data_patientposition
    //std::string	data_manufacturer
    //std::string	data_institutionname
    int	data_smallestpixelvalueinseries = 0;
    int	data_largestpixelvalueinseries = 0;
    //std::string	data_laterality
    MYSQL_TIME	data_performedprocedurestepstartdate;
    MYSQL_TIME	data_performedprocedurestepstarttime;
    //std::string	data_performedprocedurestepid
    //std::string	data_performedprocedurestepdescription
    //std::string	data_seriestype
    //std::string	data_sourceisotopename
    //std::string	data_radionuclidetotaldose
    MYSQL_TIME	data_radiopharmaceuticalstartdatetime;
    //std::string	data_radiopharmaceutical
    //std::string	data_seriesprintstatus
    //std::string	data_seriessendstatus
    //std::string	data_seriesstoredindvd
    //std::string	data_seriesstoredinusb
    //std::string	data_seriespatientagegroup
    //std::string	data_seriesprotect
    int	data_seriesconfirmstatus = 0;
    //std::string	data_seriesrejectreason
    MYSQL_TIME	data_seriesconfirmdatetime;
    //std::string	data_resolution
    //std::string	data_recincrement
    //std::string	data_scantype
    //std::string	data_presentationintenttype
    //std::string	data_seriesscanid
    //std::string	data_seriesaprid
    //std::string	data_seriesaprgroupname
    //std::string	data_seriesaprgroupid
    //std::string	data_seriesisfavourite
    int	data_isfreecassette = 0;
    //std::string	data_seriesexamplefigurepath
    //std::string	data_seriespsasid
    //std::string	data_seriespatienttypeid
    int	data_seriesissecondcaptured = 0;
    int	data_seriesisexamed = 0;
    int	data_rawdataacquisitionnumber = 0;
    MYSQL_TIME	data_rawdataacquisitiondate;
    MYSQL_TIME	data_rawdataacquisitiontime;
    //std::string	data_rawdatainstanceuid
    int	data_reconresult = 0;
    //std::string	data_seriesthumbnail;
    //std::string	data_seriescomments
    //std::string	data_protocolid
    //std::string	data_procedurename
    //std::string	data_protocollink
    int	data_imagetype = 0;
    //std::string	data_seriesreserved0
    //std::string	data_seriesreserved1
    //std::string	data_patientname
    //std::string	data_manufacturermodelname
    MYSQL_TIME	data_acquisitiontime;
    //std::string	data_frameofreferenceuid
    bool	data_isphantom = false;
    float	data_tabletopposition = 0.f;
    int	data_phase = 0;
    bool	data_ismainphase = false;
    //std::string	data_relatedwavedatafilepath
    bool	data_isselected = false;
    int	data_gatingtype = 0;
    int	data_binscope = 0;
    //std::string	data_currentbininfo
    int	data_respiratorytype = 0;
    float	data_breathrate = 0.f;
    int	data_binmode = 0;
    int	data_totalbinnumber = 0;
    int	data_binimagetotalnumber = 0;
    bool	data_isqa = false;
    //std::string	data_convolutionkernal
    MYSQL_TIME	data_updatetime;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 12: 	//seriesnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_seriesnumber;
            break;
        case 14: 	//seriesdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_seriesdate;
            break;
        case 15: 	//seriestime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_seriestime;
            break;
        case 24: 	//smallestpixelvalueinseries int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_smallestpixelvalueinseries;
            break;
        case 25: 	//largestpixelvalueinseries int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_largestpixelvalueinseries;
            break;
        case 27: 	//performedprocedurestepstartdate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_performedprocedurestepstartdate;
            break;
        case 28: 	//performedprocedurestepstarttime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_performedprocedurestepstarttime;
            break;
        case 34: 	//radiopharmaceuticalstartdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_radiopharmaceuticalstartdatetime;
            break;
        case 42: 	//seriesconfirmstatus int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_seriesconfirmstatus;
            break;
        case 44: 	//seriesconfirmdatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_seriesconfirmdatetime;
            break;
        case 54: 	//isfreecassette int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_isfreecassette;
            break;
        case 58: 	//seriesissecondcaptured int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_seriesissecondcaptured;
            break;
        case 59: 	//seriesisexamed int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_seriesisexamed;
            break;
        case 60: 	//rawdataacquisitionnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_rawdataacquisitionnumber;
            break;
        case 61: 	//rawdataacquisitiondate date
            bind[i].buffer_type= MYSQL_TYPE_DATE;
            bind[i].buffer= (char *)&data_rawdataacquisitiondate;
            break;
        case 62: 	//rawdataacquisitiontime time
            bind[i].buffer_type= MYSQL_TYPE_TIME;
            bind[i].buffer= (char *)&data_rawdataacquisitiontime;
            break;
        case 64: 	//reconresult int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_reconresult;
            break;
        case 65: 	//seriesthumbnail blob
            bind[i].buffer_type= MYSQL_TYPE_BLOB;
            break;
        case 70: 	//imagetype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_imagetype;
            break;
        case 75: 	//acquisitiontime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_acquisitiontime;
            break;
        case 77: 	//isphantom tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isphantom;
            break;
        case 78: 	//tabletopposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_tabletopposition;
            break;
        case 79: 	//phase int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_phase;
            break;
        case 80: 	//ismainphase tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_ismainphase;
            break;
        case 82: 	//isselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isselected;
            break;
        case 83: 	//gatingtype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_gatingtype;
            break;
        case 84: 	//binscope int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_binscope;
            break;
        case 86: 	//respiratorytype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_respiratorytype;
            break;
        case 87: 	//breathrate float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_breathrate;
            break;
        case 88: 	//binmode int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_binmode;
            break;
        case 89: 	//totalbinnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_totalbinnumber;
            break;
        case 90: 	//binimagetotalnumber int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_binimagetotalnumber;
            break;
        case 91: 	//isqa tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isqa;
            break;
        case 93: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtSeries* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtSeries();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//sopinstanceuid varchar
                pDis->set_sopinstanceuid((char *)bind[i].buffer);
                break;
            case 2: 	//studyuid varchar
                pDis->set_studyuid((char *)bind[i].buffer);
                break;
            case 3: 	//seriesgroupuid varchar
                pDis->set_seriesgroupuid((char *)bind[i].buffer);
                break;
            case 4: 	//courseuid varchar
                pDis->set_courseuid((char *)bind[i].buffer);
                break;
            case 5: 	//ct2densityuid varchar
                pDis->set_ct2densityuid((char *)bind[i].buffer);
                break;
            case 6: 	//modality varchar
                pDis->set_modality((char *)bind[i].buffer);
                break;
            case 7: 	//relatedcbctuid varchar
                pDis->set_relatedcbctuid((char *)bind[i].buffer);
                break;
            case 8: 	//relatedfbctuid varchar
                pDis->set_relatedfbctuid((char *)bind[i].buffer);
                break;
            case 9: 	//sessionuid varchar
                pDis->set_sessionuid((char *)bind[i].buffer);
                break;
            case 10: 	//seriesname varchar
                pDis->set_seriesname((char *)bind[i].buffer);
                break;
            case 11: 	//seriespixeldatafilepath varchar
                pDis->set_seriespixeldatafilepath((char *)bind[i].buffer);
                break;
            case 12: 	//seriesnumber int
                pDis->set_seriesnumber(data_seriesnumber);
                break;
            case 13: 	//imagelaterality varchar
                pDis->set_imagelaterality((char *)bind[i].buffer);
                break;
            case 14: 	//seriesdate date
                {
                    DATE_BOOST seriesdate;
                    ConvertDateTime2Boost(data_seriesdate, &seriesdate);
                    pDis->set_seriesdate(seriesdate);
                }
                break;
            case 15: 	//seriestime time
                {
                    TIME_BOOST seriestime;
                    ConvertDateTime2Boost(data_seriestime, &seriestime);
                    pDis->set_seriestime(seriestime);
                }
                break;
            case 16: 	//performingphysicianname varchar
                pDis->set_performingphysicianname((char *)bind[i].buffer);
                break;
            case 17: 	//protocolname varchar
                pDis->set_protocolname((char *)bind[i].buffer);
                break;
            case 18: 	//seriesdescription varchar
                pDis->set_seriesdescription((char *)bind[i].buffer);
                break;
            case 19: 	//operatorsname varchar
                pDis->set_operatorsname((char *)bind[i].buffer);
                break;
            case 20: 	//bodypartexamined varchar
                pDis->set_bodypartexamined((char *)bind[i].buffer);
                break;
            case 21: 	//patientposition varchar
                pDis->set_patientposition((char *)bind[i].buffer);
                break;
            case 22: 	//manufacturer varchar
                pDis->set_manufacturer((char *)bind[i].buffer);
                break;
            case 23: 	//institutionname varchar
                pDis->set_institutionname((char *)bind[i].buffer);
                break;
            case 24: 	//smallestpixelvalueinseries int
                pDis->set_smallestpixelvalueinseries(data_smallestpixelvalueinseries);
                break;
            case 25: 	//largestpixelvalueinseries int
                pDis->set_largestpixelvalueinseries(data_largestpixelvalueinseries);
                break;
            case 26: 	//laterality varchar
                pDis->set_laterality((char *)bind[i].buffer);
                break;
            case 27: 	//performedprocedurestepstartdate date
                {
                    DATE_BOOST performedprocedurestepstartdate;
                    ConvertDateTime2Boost(data_performedprocedurestepstartdate, &performedprocedurestepstartdate);
                    pDis->set_performedprocedurestepstartdate(performedprocedurestepstartdate);
                }
                break;
            case 28: 	//performedprocedurestepstarttime time
                {
                    TIME_BOOST performedprocedurestepstarttime;
                    ConvertDateTime2Boost(data_performedprocedurestepstarttime, &performedprocedurestepstarttime);
                    pDis->set_performedprocedurestepstarttime(performedprocedurestepstarttime);
                }
                break;
            case 29: 	//performedprocedurestepid varchar
                pDis->set_performedprocedurestepid((char *)bind[i].buffer);
                break;
            case 30: 	//performedprocedurestepdescription varchar
                pDis->set_performedprocedurestepdescription((char *)bind[i].buffer);
                break;
            case 31: 	//seriestype varchar
                pDis->set_seriestype((char *)bind[i].buffer);
                break;
            case 32: 	//sourceisotopename varchar
                pDis->set_sourceisotopename((char *)bind[i].buffer);
                break;
            case 33: 	//radionuclidetotaldose varchar
                pDis->set_radionuclidetotaldose((char *)bind[i].buffer);
                break;
            case 34: 	//radiopharmaceuticalstartdatetime datetime
                {
                    DATETIME_BOOST radiopharmaceuticalstartdatetime;
                    ConvertDateTime2Boost(data_radiopharmaceuticalstartdatetime, &radiopharmaceuticalstartdatetime);
                    pDis->set_radiopharmaceuticalstartdatetime(radiopharmaceuticalstartdatetime);
                }
                break;
            case 35: 	//radiopharmaceutical varchar
                pDis->set_radiopharmaceutical((char *)bind[i].buffer);
                break;
            case 36: 	//seriesprintstatus varchar
                pDis->set_seriesprintstatus((char *)bind[i].buffer);
                break;
            case 37: 	//seriessendstatus varchar
                pDis->set_seriessendstatus((char *)bind[i].buffer);
                break;
            case 38: 	//seriesstoredindvd varchar
                pDis->set_seriesstoredindvd((char *)bind[i].buffer);
                break;
            case 39: 	//seriesstoredinusb varchar
                pDis->set_seriesstoredinusb((char *)bind[i].buffer);
                break;
            case 40: 	//seriespatientagegroup varchar
                pDis->set_seriespatientagegroup((char *)bind[i].buffer);
                break;
            case 41: 	//seriesprotect varchar
                pDis->set_seriesprotect((char *)bind[i].buffer);
                break;
            case 42: 	//seriesconfirmstatus int
                pDis->set_seriesconfirmstatus(data_seriesconfirmstatus);
                break;
            case 43: 	//seriesrejectreason varchar
                pDis->set_seriesrejectreason((char *)bind[i].buffer);
                break;
            case 44: 	//seriesconfirmdatetime datetime
                {
                    DATETIME_BOOST seriesconfirmdatetime;
                    ConvertDateTime2Boost(data_seriesconfirmdatetime, &seriesconfirmdatetime);
                    pDis->set_seriesconfirmdatetime(seriesconfirmdatetime);
                }
                break;
            case 45: 	//resolution varchar
                pDis->set_resolution((char *)bind[i].buffer);
                break;
            case 46: 	//recincrement varchar
                pDis->set_recincrement((char *)bind[i].buffer);
                break;
            case 47: 	//scantype varchar
                pDis->set_scantype((char *)bind[i].buffer);
                break;
            case 48: 	//presentationintenttype varchar
                pDis->set_presentationintenttype((char *)bind[i].buffer);
                break;
            case 49: 	//seriesscanid varchar
                pDis->set_seriesscanid((char *)bind[i].buffer);
                break;
            case 50: 	//seriesaprid varchar
                pDis->set_seriesaprid((char *)bind[i].buffer);
                break;
            case 51: 	//seriesaprgroupname varchar
                pDis->set_seriesaprgroupname((char *)bind[i].buffer);
                break;
            case 52: 	//seriesaprgroupid varchar
                pDis->set_seriesaprgroupid((char *)bind[i].buffer);
                break;
            case 53: 	//seriesisfavourite varchar
                pDis->set_seriesisfavourite((char *)bind[i].buffer);
                break;
            case 54: 	//isfreecassette int
                pDis->set_isfreecassette(data_isfreecassette);
                break;
            case 55: 	//seriesexamplefigurepath varchar
                pDis->set_seriesexamplefigurepath((char *)bind[i].buffer);
                break;
            case 56: 	//seriespsasid varchar
                pDis->set_seriespsasid((char *)bind[i].buffer);
                break;
            case 57: 	//seriespatienttypeid varchar
                pDis->set_seriespatienttypeid((char *)bind[i].buffer);
                break;
            case 58: 	//seriesissecondcaptured int
                pDis->set_seriesissecondcaptured(data_seriesissecondcaptured);
                break;
            case 59: 	//seriesisexamed int
                pDis->set_seriesisexamed(data_seriesisexamed);
                break;
            case 60: 	//rawdataacquisitionnumber int
                pDis->set_rawdataacquisitionnumber(data_rawdataacquisitionnumber);
                break;
            case 61: 	//rawdataacquisitiondate date
                {
                    DATE_BOOST rawdataacquisitiondate;
                    ConvertDateTime2Boost(data_rawdataacquisitiondate, &rawdataacquisitiondate);
                    pDis->set_rawdataacquisitiondate(rawdataacquisitiondate);
                }
                break;
            case 62: 	//rawdataacquisitiontime time
                {
                    TIME_BOOST rawdataacquisitiontime;
                    ConvertDateTime2Boost(data_rawdataacquisitiontime, &rawdataacquisitiontime);
                    pDis->set_rawdataacquisitiontime(rawdataacquisitiontime);
                }
                break;
            case 63: 	//rawdatainstanceuid varchar
                pDis->set_rawdatainstanceuid((char *)bind[i].buffer);
                break;
            case 64: 	//reconresult int
                pDis->set_reconresult(data_reconresult);
                break;
            case 65: 	//seriesthumbnail blob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_seriesthumbnail(buf);
                    DEL_ARRAY(buf);
                }
                break;
            case 66: 	//seriescomments varchar
                pDis->set_seriescomments((char *)bind[i].buffer);
                break;
            case 67: 	//protocolid varchar
                pDis->set_protocolid((char *)bind[i].buffer);
                break;
            case 68: 	//procedurename varchar
                pDis->set_procedurename((char *)bind[i].buffer);
                break;
            case 69: 	//protocollink varchar
                pDis->set_protocollink((char *)bind[i].buffer);
                break;
            case 70: 	//imagetype int
                pDis->set_imagetype(data_imagetype);
                break;
            case 71: 	//seriesreserved0 varchar
                pDis->set_seriesreserved0((char *)bind[i].buffer);
                break;
            case 72: 	//seriesreserved1 varchar
                pDis->set_seriesreserved1((char *)bind[i].buffer);
                break;
            case 73: 	//patientname varchar
                pDis->set_patientname((char *)bind[i].buffer);
                break;
            case 74: 	//manufacturermodelname varchar
                pDis->set_manufacturermodelname((char *)bind[i].buffer);
                break;
            case 75: 	//acquisitiontime datetime
                {
                    DATETIME_BOOST acquisitiontime;
                    ConvertDateTime2Boost(data_acquisitiontime, &acquisitiontime);
                    pDis->set_acquisitiontime(acquisitiontime);
                }
                break;
            case 76: 	//frameofreferenceuid varchar
                pDis->set_frameofreferenceuid((char *)bind[i].buffer);
                break;
            case 77: 	//isphantom tinyint
                pDis->set_isphantom(data_isphantom);
                break;
            case 78: 	//tabletopposition float
                pDis->set_tabletopposition(data_tabletopposition);
                break;
            case 79: 	//phase int
                pDis->set_phase(data_phase);
                break;
            case 80: 	//ismainphase tinyint
                pDis->set_ismainphase(data_ismainphase);
                break;
            case 81: 	//relatedwavedatafilepath varchar
                pDis->set_relatedwavedatafilepath((char *)bind[i].buffer);
                break;
            case 82: 	//isselected tinyint
                pDis->set_isselected(data_isselected);
                break;
            case 83: 	//gatingtype int
                pDis->set_gatingtype(data_gatingtype);
                break;
            case 84: 	//binscope int
                pDis->set_binscope(data_binscope);
                break;
            case 85: 	//currentbininfo varchar
                pDis->set_currentbininfo((char *)bind[i].buffer);
                break;
            case 86: 	//respiratorytype int
                pDis->set_respiratorytype(data_respiratorytype);
                break;
            case 87: 	//breathrate float
                pDis->set_breathrate(data_breathrate);
                break;
            case 88: 	//binmode int
                pDis->set_binmode(data_binmode);
                break;
            case 89: 	//totalbinnumber int
                pDis->set_totalbinnumber(data_totalbinnumber);
                break;
            case 90: 	//binimagetotalnumber int
                pDis->set_binimagetotalnumber(data_binimagetotalnumber);
                break;
            case 91: 	//isqa tinyint
                pDis->set_isqa(data_isqa);
                break;
            case 92: 	//convolutionkernal varchar
                pDis->set_convolutionkernal((char *)bind[i].buffer);
                break;
            case 93: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE