//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_norm_voi.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-8-15 14:37:11
///
///  \version 1.0
///  \date    9/2/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_norm_voi.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtNorm_voiImp::RtNorm_voiImp():
    m_normgroupuid(""),
    m_voiuid(""),
    m_mindosecontribution(0.f),
    m_meandosecontribution(0.f),
    m_maxdosecontribution(0.f),
    m_iscare(false),
    m_updatetime(boost::date_time::not_a_date_time)
{
}

RtNorm_voiImp::RtNorm_voiImp(const RtNorm_voiImp& norm_voi):
    m_normgroupuid(norm_voi.get_normgroupuid()),
    m_voiuid(norm_voi.get_voiuid()),
    m_mindosecontribution(norm_voi.get_mindosecontribution()),
    m_meandosecontribution(norm_voi.get_meandosecontribution()),
    m_maxdosecontribution(norm_voi.get_maxdosecontribution()),
    m_iscare(norm_voi.get_iscare()),
    m_updatetime(norm_voi.get_updatetime())
{
}

RtNorm_voiImp& RtNorm_voiImp::operator=(const RtNorm_voiImp& norm_voi)
{
    if (this != &norm_voi){
        this->m_normgroupuid = norm_voi.get_normgroupuid();
        this->m_voiuid = norm_voi.get_voiuid();
        this->m_mindosecontribution = norm_voi.get_mindosecontribution();
        this->m_meandosecontribution = norm_voi.get_meandosecontribution();
        this->m_maxdosecontribution = norm_voi.get_maxdosecontribution();
        this->m_iscare = norm_voi.get_iscare();
        this->m_updatetime = norm_voi.get_updatetime();
    }
    return *this;
}

RtNorm_voiImp::~RtNorm_voiImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtNorm_voi::RtNorm_voi()
{
    m_pImp = new RtNorm_voiImp();
}

RtNorm_voi::RtNorm_voi(const RtNorm_voi& norm_voi):
   m_pImp(new RtNorm_voiImp(*norm_voi.m_pImp))
{
}

RtNorm_voi& RtNorm_voi::operator = (const RtNorm_voi& norm_voi)
{
    if(this != &norm_voi) *this->m_pImp = *norm_voi.m_pImp;
    return *this;
}

RtNorm_voi::~RtNorm_voi()
{
    DEL_PTR(m_pImp);
}

//normgroupuid
std::string RtNorm_voi::get_normgroupuid() const { return m_pImp->get_normgroupuid();}
void RtNorm_voi::set_normgroupuid(const std::string& normgroupuid) { m_pImp->set_normgroupuid(normgroupuid);}

//voiuid
std::string RtNorm_voi::get_voiuid() const { return m_pImp->get_voiuid();}
void RtNorm_voi::set_voiuid(const std::string& voiuid) { m_pImp->set_voiuid(voiuid);}

//mindosecontribution
float RtNorm_voi::get_mindosecontribution() const { return m_pImp->get_mindosecontribution();}
void RtNorm_voi::set_mindosecontribution(const float& mindosecontribution) { m_pImp->set_mindosecontribution(mindosecontribution);}

//meandosecontribution
float RtNorm_voi::get_meandosecontribution() const { return m_pImp->get_meandosecontribution();}
void RtNorm_voi::set_meandosecontribution(const float& meandosecontribution) { m_pImp->set_meandosecontribution(meandosecontribution);}

//maxdosecontribution
float RtNorm_voi::get_maxdosecontribution() const { return m_pImp->get_maxdosecontribution();}
void RtNorm_voi::set_maxdosecontribution(const float& maxdosecontribution) { m_pImp->set_maxdosecontribution(maxdosecontribution);}

//iscare
bool RtNorm_voi::get_iscare() const { return m_pImp->get_iscare();}
void RtNorm_voi::set_iscare(const bool& iscare) { m_pImp->set_iscare(iscare);}

//updatetime
DATETIME_BOOST RtNorm_voi::get_updatetime() const { return m_pImp->get_updatetime();}
void RtNorm_voi::set_updatetime(const DATETIME_BOOST& updatetime) { m_pImp->set_updatetime(updatetime);}

RT_TPS_DATABASE_END_NAMESPACE