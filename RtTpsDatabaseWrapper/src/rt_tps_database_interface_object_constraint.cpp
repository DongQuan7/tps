//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_interface_object_constraint.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 2016-9-2 16:01:15
///
///  \version 1.0
///  \date    10/13/2016
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_constraint.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_uid_generater.h"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

//////////////////////////////////////////////////////////////////////////

RtConstraintImp::RtConstraintImp(bool bGeneraterUid /*= false*/):
    m_uid(""),
    m_prescriptionuid(""),
    m_dosevolume(0.f),
    m_name(""),
    m_maxdvh(""),
    m_mindvh(""),
    m_comments(""),
    m_csg(""),
    m_ingrid(0.f),
    m_isachieved(false),
    m_dosetype(0),
    m_dose(0.),
    m_tendencytype(0),
    m_updatetime(boost::date_time::not_a_date_time)
{
    //create uid
    m_uid = bGeneraterUid ? RtUidGenerater::GeneraterUid() : "";
}

RtConstraintImp::RtConstraintImp(const RtConstraintImp& constraint):
    m_uid(constraint.get_uid()),
    m_prescriptionuid(constraint.get_prescriptionuid()),
    m_dosevolume(constraint.get_dosevolume()),
    m_name(constraint.get_name()),
    m_maxdvh(constraint.get_maxdvh()),
    m_mindvh(constraint.get_mindvh()),
    m_comments(constraint.get_comments()),
    m_csg(constraint.get_csg()),
    m_ingrid(constraint.get_ingrid()),
    m_isachieved(constraint.get_isachieved()),
    m_dosetype(constraint.get_dosetype()),
    m_dose(constraint.get_dose()),
    m_tendencytype(constraint.get_tendencytype()),
    m_updatetime(constraint.get_updatetime())
{
}

RtConstraintImp& RtConstraintImp::operator=(const RtConstraintImp& constraint)
{
    if (this != &constraint){
        this->m_uid = constraint.get_uid();
        this->m_prescriptionuid = constraint.get_prescriptionuid();
        this->m_dosevolume = constraint.get_dosevolume();
        this->m_name = constraint.get_name();
        this->m_maxdvh = constraint.get_maxdvh();
        this->m_mindvh = constraint.get_mindvh();
        this->m_comments = constraint.get_comments();
        this->m_csg = constraint.get_csg();
        this->m_ingrid = constraint.get_ingrid();
        this->m_isachieved = constraint.get_isachieved();
        this->m_dosetype = constraint.get_dosetype();
        this->m_dose = constraint.get_dose();
        this->m_tendencytype = constraint.get_tendencytype();
        this->m_updatetime = constraint.get_updatetime();
    }
    return *this;
}

RtConstraintImp::~RtConstraintImp()
{
}


//////////////////////////////////////////////////////////////////////////
RtConstraint::RtConstraint(bool bGeneraterUid /*= false*/)
{
    m_pImp = new RtConstraintImp(bGeneraterUid);
    set_flags(CONSTRAINT_FIELD_MAX);
    set_field_null((char*)ENUM2STRING_CONSTRAINT_FIELD_NULL);
}

RtConstraint::RtConstraint(const RtConstraint& constraint): RtDatabaseObject(constraint),
   m_pImp(new RtConstraintImp(*constraint.m_pImp))
{
}

RtConstraint& RtConstraint::operator = (const RtConstraint& constraint)
{
    if(this != &constraint)
    {
        RtDatabaseObject::operator=(constraint);
        *this->m_pImp = *constraint.m_pImp;
    }
    return *this;
}

RtConstraint::~RtConstraint()
{
    DEL_PTR(m_pImp);
}

//uid
std::string RtConstraint::get_uid() const { return m_pImp->get_uid();}
void RtConstraint::set_uid(const std::string& uid)
{
    m_pImp->set_uid(uid);
    enable_field(CONSTRAINT_UID);
    setdirty_field(CONSTRAINT_UID, true);
}

//prescriptionuid
std::string RtConstraint::get_prescriptionuid() const { return m_pImp->get_prescriptionuid();}
void RtConstraint::set_prescriptionuid(const std::string& prescriptionuid)
{
    m_pImp->set_prescriptionuid(prescriptionuid);
    enable_field(CONSTRAINT_PRESCRIPTIONUID);
    setdirty_field(CONSTRAINT_PRESCRIPTIONUID, true);
}

//dosevolume
float RtConstraint::get_dosevolume() const { return m_pImp->get_dosevolume();}
void RtConstraint::set_dosevolume(const float& dosevolume)
{
    m_pImp->set_dosevolume(dosevolume);
    enable_field(CONSTRAINT_DOSEVOLUME);
    setdirty_field(CONSTRAINT_DOSEVOLUME, true);
}

//name
std::string RtConstraint::get_name() const { return m_pImp->get_name();}
void RtConstraint::set_name(const std::string& name)
{
    m_pImp->set_name(name);
    enable_field(CONSTRAINT_NAME);
    setdirty_field(CONSTRAINT_NAME, true);
}

//maxdvh
std::string RtConstraint::get_maxdvh() const { return m_pImp->get_maxdvh();}
void RtConstraint::set_maxdvh(const std::string& maxdvh)
{
    m_pImp->set_maxdvh(maxdvh);
    enable_field(CONSTRAINT_MAXDVH);
    setdirty_field(CONSTRAINT_MAXDVH, true);
}

//mindvh
std::string RtConstraint::get_mindvh() const { return m_pImp->get_mindvh();}
void RtConstraint::set_mindvh(const std::string& mindvh)
{
    m_pImp->set_mindvh(mindvh);
    enable_field(CONSTRAINT_MINDVH);
    setdirty_field(CONSTRAINT_MINDVH, true);
}

//comments
std::string RtConstraint::get_comments() const { return m_pImp->get_comments();}
void RtConstraint::set_comments(const std::string& comments)
{
    m_pImp->set_comments(comments);
    enable_field(CONSTRAINT_COMMENTS);
    setdirty_field(CONSTRAINT_COMMENTS, true);
}

//csg
std::string RtConstraint::get_csg() const { return m_pImp->get_csg();}
void RtConstraint::set_csg(const std::string& csg)
{
    m_pImp->set_csg(csg);
    enable_field(CONSTRAINT_CSG);
    setdirty_field(CONSTRAINT_CSG, true);
}

//ingrid
float RtConstraint::get_ingrid() const { return m_pImp->get_ingrid();}
void RtConstraint::set_ingrid(const float& ingrid)
{
    m_pImp->set_ingrid(ingrid);
    enable_field(CONSTRAINT_INGRID);
    setdirty_field(CONSTRAINT_INGRID, true);
}

//isachieved
bool RtConstraint::get_isachieved() const { return m_pImp->get_isachieved();}
void RtConstraint::set_isachieved(const bool& isachieved)
{
    m_pImp->set_isachieved(isachieved);
    enable_field(CONSTRAINT_ISACHIEVED);
    setdirty_field(CONSTRAINT_ISACHIEVED, true);
}

//dosetype
int RtConstraint::get_dosetype() const { return m_pImp->get_dosetype();}
void RtConstraint::set_dosetype(const int& dosetype)
{
    m_pImp->set_dosetype(dosetype);
    enable_field(CONSTRAINT_DOSETYPE);
    setdirty_field(CONSTRAINT_DOSETYPE, true);
}

//dose
double RtConstraint::get_dose() const { return m_pImp->get_dose();}
void RtConstraint::set_dose(const double& dose)
{
    m_pImp->set_dose(dose);
    enable_field(CONSTRAINT_DOSE);
    setdirty_field(CONSTRAINT_DOSE, true);
}

//tendencytype
int RtConstraint::get_tendencytype() const { return m_pImp->get_tendencytype();}
void RtConstraint::set_tendencytype(const int& tendencytype)
{
    m_pImp->set_tendencytype(tendencytype);
    enable_field(CONSTRAINT_TENDENCYTYPE);
    setdirty_field(CONSTRAINT_TENDENCYTYPE, true);
}

//updatetime
DATETIME_BOOST RtConstraint::get_updatetime() const { return m_pImp->get_updatetime();}
void RtConstraint::set_updatetime(const DATETIME_BOOST& updatetime)
{
    m_pImp->set_updatetime(updatetime);
    enable_field(CONSTRAINT_UPDATETIME);
    setdirty_field(CONSTRAINT_UPDATETIME, true);
}

RT_TPS_DATABASE_END_NAMESPACE