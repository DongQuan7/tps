//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper_rtimage.cpp
///  \brief     This file was generated by CodeGenerater.exe 
///             From database version: 1.1.11
///
///  \version 1.0
///  \date    8/8/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#include "StdAfx.h"
#include "rt_tps_database_object_helper.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_interface_object_rtimage.h"
#include "boost/date_time/posix_time/time_parsers.hpp"
typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;

RT_TPS_DATABASE_BEGIN_NAMESPACE;

bool RtDatabaseHelper::InsertUpdateDBFromObject(const RtRtimage& src, bool bInsert)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }
    //64 parameters
    unsigned int field_num = 0;
    std::string sSql("");
    std::string sName("");
    if (!bInsert)
    {
        for (unsigned int i(0); i < RTIMAGE_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_RTIMAGE_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name) + "=?";
            }
            else
            {
                sName += "," + std::string(file_name) + "=?";
            }
            ++field_num;
        }
        sSql = "UPDATE tmsrtimage SET " + sName + " WHERE uid='" + src.get_uid() + "'";
    }
    else
    {
        std::string sValues("");
        for (unsigned int i(0); i < RTIMAGE_FIELD_MAX; ++i)
        {
            if (!src.is_dirty(i)) continue;
            const char* file_name = ENUM2STRING_RTIMAGE_FIELD[i];
            if (sName.empty())
            {
                sName += std::string(file_name);
                sValues += "?";
            }
            else
            {
                sName += "," + std::string(file_name);
                sValues += ",?";
            }
            ++field_num;
        }
        sSql = "INSERT INTO tmsrtimage (" + sName + ") VALUES (" + sValues + ")";
    }
    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)sSql.size()))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_prepare(), failed %s\n", mysql_stmt_error(stmt));
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[field_num];
    memset(bind, 0, sizeof(MYSQL_BIND)*field_num);
    my_bool     isnull = true;
    std::string	data_uid = "";
    std::string	data_sopinstanceuid = "";
    std::string	data_courseuid = "";
    std::string	data_isocenteruid = "";
    std::string	data_seriesuid = "";
    std::string	data_drrsettinguid = "";
    std::string	data_planuid = "";
    std::string	data_beamuid = "";
    std::string	data_treatmentbeamuid = "";
    std::string	data_sessionuid = "";
    std::string	data_fbctuid = "";
    std::string	data_imagebeamuid = "";
    std::string	data_portimagebeamuid = "";
    int			data_samplesperpixel = 0;
    std::string	data_photometricinterpretation = "";
    int			data_bitsallocated = 0;
    int			data_bitsstored = 0;
    int			data_highbit = 0;
    std::string	data_pixelrepresentation = "";
    std::string	data_name = "";
    std::string	data_rtimagelabel = "";
    std::string	data_description = "";
    int			data_imagetype = 0;
    int			data_conversiontype = 0;
    int			data_rtimageplane = 0;
    double		data_xrimagereceptorangle = 0.;
    float		data_firstimageplanepixelspacing = 0.f;
    float		data_secondimageplanepixelspacing = 0.f;
    float		data_firstrtimageposition = 0.f;
    float		data_secondrtimageposition = 0.f;
    std::string	data_machinename = "";
    std::string	data_primarydosimeterunit = "";
    float		data_sad = 0.f;
    float		data_ssd = 0.f;
    float		data_sid = 0.f;
    int			data_rows = 0;
    int			data_columns = 0;
    int			data_frame = 0;
    char*		data_pixeldata = nullptr;
    float		data_ximagexorientation = 0.f;
    float		data_yimagexorientation = 0.f;
    float		data_zimagexorientation = 0.f;
    float		data_ximageyorientation = 0.f;
    float		data_yimageyorientation = 0.f;
    float		data_zimageyorientation = 0.f;
    float		data_angle = 0.f;
    double		data_windowwidth = 0.;
    double		data_windowcenter = 0.;
    MYSQL_TIME	data_acquisitiondatetime;
    double		data_rescaleintercept = 0.;
    double		data_rescaleslope = 0.;
    float		data_xrayimagereceptortranslationx = 0.f;
    float		data_xrayimagereceptortranslationy = 0.f;
    float		data_xrayimagereceptortranslationz = 0.f;
    bool		data_isselected = false;
    double		data_collimatorangle = 0.;
    MYSQL_TIME	data_updatetime;
    std::string	data_patientname = "";
    std::string	data_patientid = "";
    int			data_patientsex = 0;
    MYSQL_TIME	data_patientbirthdate;
    int			data_patientage = 0;
    std::string	data_dicomimagetype = "";
    int			data_patientposition = 0;

    unsigned int iCount = 0;
    for (unsigned int i(0); i < RTIMAGE_FIELD_MAX; ++i)
    {
        if (!src.is_dirty(i)) continue;
        if(!src.has_field(i))
        {
            bind[iCount].is_null = &isnull;
            ++iCount;
            continue;
        }
        switch (i)
        {
        case 0: 	//uid varchar
            {
                data_uid = src.get_uid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_uid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_uid.size();
            }
            break;
        case 1: 	//sopinstanceuid varchar
            {
                data_sopinstanceuid = src.get_sopinstanceuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sopinstanceuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sopinstanceuid.size();
            }
            break;
        case 2: 	//courseuid varchar
            {
                data_courseuid = src.get_courseuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_courseuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_courseuid.size();
            }
            break;
        case 3: 	//isocenteruid varchar
            {
                data_isocenteruid = src.get_isocenteruid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_isocenteruid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_isocenteruid.size();
            }
            break;
        case 4: 	//seriesuid varchar
            {
                data_seriesuid = src.get_seriesuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_seriesuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_seriesuid.size();
            }
            break;
        case 5: 	//drrsettinguid varchar
            {
                data_drrsettinguid = src.get_drrsettinguid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_drrsettinguid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_drrsettinguid.size();
            }
            break;
        case 6: 	//planuid varchar
            {
                data_planuid = src.get_planuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_planuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_planuid.size();
            }
            break;
        case 7: 	//beamuid varchar
            {
                data_beamuid = src.get_beamuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_beamuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_beamuid.size();
            }
            break;
        case 8: 	//treatmentbeamuid varchar
            {
                data_treatmentbeamuid = src.get_treatmentbeamuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_treatmentbeamuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_treatmentbeamuid.size();
            }
            break;
        case 9: 	//sessionuid varchar
            {
                data_sessionuid = src.get_sessionuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_sessionuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_sessionuid.size();
            }
            break;
        case 10: 	//fbctuid varchar
            {
                data_fbctuid = src.get_fbctuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_fbctuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_fbctuid.size();
            }
            break;
        case 11: 	//imagebeamuid varchar
            {
                data_imagebeamuid = src.get_imagebeamuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_imagebeamuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_imagebeamuid.size();
            }
            break;
        case 12: 	//portimagebeamuid varchar
            {
                data_portimagebeamuid = src.get_portimagebeamuid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_portimagebeamuid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_portimagebeamuid.size();
            }
            break;
        case 13: 	//samplesperpixel int
            {
                data_samplesperpixel = src.get_samplesperpixel();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_samplesperpixel;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 14: 	//photometricinterpretation varchar
            {
                data_photometricinterpretation = src.get_photometricinterpretation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_photometricinterpretation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_photometricinterpretation.size();
            }
            break;
        case 15: 	//bitsallocated int
            {
                data_bitsallocated = src.get_bitsallocated();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_bitsallocated;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 16: 	//bitsstored int
            {
                data_bitsstored = src.get_bitsstored();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_bitsstored;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 17: 	//highbit int
            {
                data_highbit = src.get_highbit();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_highbit;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 18: 	//pixelrepresentation varchar
            {
                data_pixelrepresentation = src.get_pixelrepresentation();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_pixelrepresentation.c_str();
                bind[iCount].buffer_length = (unsigned long)data_pixelrepresentation.size();
            }
            break;
        case 19: 	//name varchar
            {
                data_name = src.get_name();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_name.c_str();
                bind[iCount].buffer_length = (unsigned long)data_name.size();
            }
            break;
        case 20: 	//rtimagelabel varchar
            {
                data_rtimagelabel = src.get_rtimagelabel();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_rtimagelabel.c_str();
                bind[iCount].buffer_length = (unsigned long)data_rtimagelabel.size();
            }
            break;
        case 21: 	//description varchar
            {
                data_description = src.get_description();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_description.c_str();
                bind[iCount].buffer_length = (unsigned long)data_description.size();
            }
            break;
        case 22: 	//imagetype int
            {
                data_imagetype = src.get_imagetype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_imagetype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 23: 	//conversiontype int
            {
                data_conversiontype = src.get_conversiontype();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_conversiontype;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 24: 	//rtimageplane int
            {
                data_rtimageplane = src.get_rtimageplane();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_rtimageplane;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 25: 	//xrimagereceptorangle double
            {
                data_xrimagereceptorangle = src.get_xrimagereceptorangle();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_xrimagereceptorangle;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 26: 	//firstimageplanepixelspacing float
            {
                data_firstimageplanepixelspacing = src.get_firstimageplanepixelspacing();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_firstimageplanepixelspacing;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 27: 	//secondimageplanepixelspacing float
            {
                data_secondimageplanepixelspacing = src.get_secondimageplanepixelspacing();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_secondimageplanepixelspacing;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 28: 	//firstrtimageposition float
            {
                data_firstrtimageposition = src.get_firstrtimageposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_firstrtimageposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 29: 	//secondrtimageposition float
            {
                data_secondrtimageposition = src.get_secondrtimageposition();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_secondrtimageposition;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 30: 	//machinename varchar
            {
                data_machinename = src.get_machinename();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_machinename.c_str();
                bind[iCount].buffer_length = (unsigned long)data_machinename.size();
            }
            break;
        case 31: 	//primarydosimeterunit varchar
            {
                data_primarydosimeterunit = src.get_primarydosimeterunit();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_primarydosimeterunit.c_str();
                bind[iCount].buffer_length = (unsigned long)data_primarydosimeterunit.size();
            }
            break;
        case 32: 	//sad float
            {
                data_sad = src.get_sad();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sad;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 33: 	//ssd float
            {
                data_ssd = src.get_ssd();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ssd;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 34: 	//sid float
            {
                data_sid = src.get_sid();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_sid;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 35: 	//rows int
            {
                data_rows = src.get_rows();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_rows;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 36: 	//columns int
            {
                data_columns = src.get_columns();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_columns;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 37: 	//frame int
            {
                data_frame = src.get_frame();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_frame;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 38: 	//pixeldata mediumblob
            {
                unsigned long ulSize;
                data_pixeldata = src.get_pixel_data_buffer(&ulSize);
                if(nullptr == data_pixeldata || ulSize < 1){
                    bind[iCount].is_null = &isnull;
                    break;
                }
                bind[iCount].buffer_type= MYSQL_TYPE_MEDIUM_BLOB;
                bind[iCount].buffer= (void *)data_pixeldata;
                bind[iCount].buffer_length= (unsigned long)(ulSize*sizeof(char));
            }
            break;
        case 39: 	//ximagexorientation float
            {
                data_ximagexorientation = src.get_ximagexorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ximagexorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 40: 	//yimagexorientation float
            {
                data_yimagexorientation = src.get_yimagexorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_yimagexorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 41: 	//zimagexorientation float
            {
                data_zimagexorientation = src.get_zimagexorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_zimagexorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 42: 	//ximageyorientation float
            {
                data_ximageyorientation = src.get_ximageyorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_ximageyorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 43: 	//yimageyorientation float
            {
                data_yimageyorientation = src.get_yimageyorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_yimageyorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 44: 	//zimageyorientation float
            {
                data_zimageyorientation = src.get_zimageyorientation();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_zimageyorientation;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 45: 	//angle float
            {
                data_angle = src.get_angle();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_angle;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 46: 	//windowwidth double
            {
                data_windowwidth = src.get_windowwidth();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_windowwidth;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 47: 	//windowcenter double
            {
                data_windowcenter = src.get_windowcenter();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_windowcenter;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 48: 	//acquisitiondatetime datetime
            {
                ConvertDateTime2DB(src.get_acquisitiondatetime(), &data_acquisitiondatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_acquisitiondatetime;
                if (src.get_acquisitiondatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 49: 	//rescaleintercept double
            {
                data_rescaleintercept = src.get_rescaleintercept();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_rescaleintercept;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 50: 	//rescaleslope double
            {
                data_rescaleslope = src.get_rescaleslope();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_rescaleslope;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 51: 	//xrayimagereceptortranslationx float
            {
                data_xrayimagereceptortranslationx = src.get_xrayimagereceptortranslationx();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_xrayimagereceptortranslationx;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 52: 	//xrayimagereceptortranslationy float
            {
                data_xrayimagereceptortranslationy = src.get_xrayimagereceptortranslationy();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_xrayimagereceptortranslationy;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 53: 	//xrayimagereceptortranslationz float
            {
                data_xrayimagereceptortranslationz = src.get_xrayimagereceptortranslationz();
                bind[iCount].buffer_type = MYSQL_TYPE_FLOAT;
                bind[iCount].buffer = (void*)&data_xrayimagereceptortranslationz;
                bind[iCount].buffer_length = sizeof(float);
            }
            break;
        case 54: 	//isselected tinyint
            {
                data_isselected = src.get_isselected();
                bind[iCount].buffer_type = MYSQL_TYPE_TINY;
                bind[iCount].buffer = (void*)&data_isselected;
                bind[iCount].buffer_length = sizeof(bool);
            }
            break;
        case 55: 	//collimatorangle double
            {
                data_collimatorangle = src.get_collimatorangle();
                bind[iCount].buffer_type = MYSQL_TYPE_DOUBLE;
                bind[iCount].buffer = (void*)&data_collimatorangle;
                bind[iCount].buffer_length = sizeof(double);
            }
            break;
        case 56: 	//updatetime timestamp
            {
                ConvertDateTime2DB(src.get_updatetime(), &data_updatetime);
                bind[iCount].buffer_type = MYSQL_TYPE_TIMESTAMP;
                bind[iCount].buffer = (void*)&data_updatetime;
                if (src.get_updatetime().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 57: 	//patientname varchar
            {
                data_patientname = src.get_patientname();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientname.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientname.size();
            }
            break;
        case 58: 	//patientid varchar
            {
                data_patientid = src.get_patientid();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_patientid.c_str();
                bind[iCount].buffer_length = (unsigned long)data_patientid.size();
            }
            break;
        case 59: 	//patientsex int
            {
                data_patientsex = src.get_patientsex();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientsex;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 60: 	//patientbirthdate datetime
            {
                ConvertDateTime2DB(src.get_patientbirthdate(), &data_patientbirthdate);
                bind[iCount].buffer_type = MYSQL_TYPE_DATETIME;
                bind[iCount].buffer = (void*)&data_patientbirthdate;
                if (src.get_patientbirthdate().is_not_a_date_time()) bind[iCount].is_null = &isnull;
            }
            break;
        case 61: 	//patientage int
            {
                data_patientage = src.get_patientage();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientage;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        case 62: 	//dicomimagetype varchar
            {
                data_dicomimagetype = src.get_dicomimagetype();
                bind[iCount].buffer_type = MYSQL_TYPE_VAR_STRING;
                bind[iCount].buffer = (void*)data_dicomimagetype.c_str();
                bind[iCount].buffer_length = (unsigned long)data_dicomimagetype.size();
            }
            break;
        case 63: 	//patientposition int
            {
                data_patientposition = src.get_patientposition();
                bind[iCount].buffer_type = MYSQL_TYPE_LONG;
                bind[iCount].buffer = (void*)&data_patientposition;
                bind[iCount].buffer_length = sizeof(int);
            }
            break;
        default:
            break;
        }

        ++iCount;
    }
    if (mysql_stmt_bind_param(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_param(), failed "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed "<< mysql_stmt_error(stmt);
        TPS_PRINTF_DEBUG("mysql_stmt_execute(), failed %s\n", mysql_stmt_error(stmt));
        DEL_ARRAY(bind);
        return false;
    }
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement "<< mysql_stmt_error(stmt);
        DEL_ARRAY(bind);
        return false;
    }
	DEL_ARRAY(bind);
	RtDatabaseObject* rtDatabaseObject = const_cast<RtRtimage*>(&src);
	rtDatabaseObject->setdirty_all_fields(false);
    return true;
}

bool RtDatabaseHelper::FetchDataFromDB(const std::string& sSql, std::vector<RtRtimage*>& vList)
{
    MYSQL_STMT* stmt = mysql_stmt_init(m_pMySql);
    if (!stmt)
    {
        TPS_LOG_DEV_ERROR<<"mysql_stmt_init(), out of memory";
        return false;
    }

    MYSQL_RES  *prepare_meta_result = nullptr;
    //tmsrtimage    64 parameters
    const int field_num = RTIMAGE_FIELD_MAX;
    unsigned long MAX_LENGTH[field_num] = {0};
    MAX_LENGTH[0] = 64;
    MAX_LENGTH[1] = 64;
    MAX_LENGTH[2] = 64;
    MAX_LENGTH[3] = 64;
    MAX_LENGTH[4] = 64;
    MAX_LENGTH[5] = 64;
    MAX_LENGTH[6] = 64;
    MAX_LENGTH[7] = 64;
    MAX_LENGTH[8] = 64;
    MAX_LENGTH[9] = 64;
    MAX_LENGTH[10] = 64;
    MAX_LENGTH[11] = 64;
    MAX_LENGTH[12] = 64;
    MAX_LENGTH[13] = 0;
    MAX_LENGTH[14] = 1024;
    MAX_LENGTH[15] = 0;
    MAX_LENGTH[16] = 0;
    MAX_LENGTH[17] = 0;
    MAX_LENGTH[18] = 1024;
    MAX_LENGTH[19] = 1024;
    MAX_LENGTH[20] = 1024;
    MAX_LENGTH[21] = 1024;
    MAX_LENGTH[22] = 0;
    MAX_LENGTH[23] = 0;
    MAX_LENGTH[24] = 0;
    MAX_LENGTH[25] = 0;
    MAX_LENGTH[26] = 0;
    MAX_LENGTH[27] = 0;
    MAX_LENGTH[28] = 0;
    MAX_LENGTH[29] = 0;
    MAX_LENGTH[30] = 1024;
    MAX_LENGTH[31] = 1024;
    MAX_LENGTH[32] = 0;
    MAX_LENGTH[33] = 0;
    MAX_LENGTH[34] = 0;
    MAX_LENGTH[35] = 0;
    MAX_LENGTH[36] = 0;
    MAX_LENGTH[37] = 0;
    MAX_LENGTH[38] = 16777215;
    MAX_LENGTH[39] = 0;
    MAX_LENGTH[40] = 0;
    MAX_LENGTH[41] = 0;
    MAX_LENGTH[42] = 0;
    MAX_LENGTH[43] = 0;
    MAX_LENGTH[44] = 0;
    MAX_LENGTH[45] = 0;
    MAX_LENGTH[46] = 0;
    MAX_LENGTH[47] = 0;
    MAX_LENGTH[48] = 0;
    MAX_LENGTH[49] = 0;
    MAX_LENGTH[50] = 0;
    MAX_LENGTH[51] = 0;
    MAX_LENGTH[52] = 0;
    MAX_LENGTH[53] = 0;
    MAX_LENGTH[54] = 0;
    MAX_LENGTH[55] = 0;
    MAX_LENGTH[56] = 0;
    MAX_LENGTH[57] = 64;
    MAX_LENGTH[58] = 64;
    MAX_LENGTH[59] = 0;
    MAX_LENGTH[60] = 0;
    MAX_LENGTH[61] = 0;
    MAX_LENGTH[62] = 64;
    MAX_LENGTH[63] = 0;

    //std::string	data_uid
    //std::string	data_sopinstanceuid
    //std::string	data_courseuid
    //std::string	data_isocenteruid
    //std::string	data_seriesuid
    //std::string	data_drrsettinguid
    //std::string	data_planuid
    //std::string	data_beamuid
    //std::string	data_treatmentbeamuid
    //std::string	data_sessionuid
    //std::string	data_fbctuid
    //std::string	data_imagebeamuid
    //std::string	data_portimagebeamuid
    int	data_samplesperpixel = 0;
    //std::string	data_photometricinterpretation
    int	data_bitsallocated = 0;
    int	data_bitsstored = 0;
    int	data_highbit = 0;
    //std::string	data_pixelrepresentation
    //std::string	data_name
    //std::string	data_rtimagelabel
    //std::string	data_description
    int	data_imagetype = 0;
    int	data_conversiontype = 0;
    int	data_rtimageplane = 0;
    double	data_xrimagereceptorangle = 0.;
    float	data_firstimageplanepixelspacing = 0.f;
    float	data_secondimageplanepixelspacing = 0.f;
    float	data_firstrtimageposition = 0.f;
    float	data_secondrtimageposition = 0.f;
    //std::string	data_machinename
    //std::string	data_primarydosimeterunit
    float	data_sad = 0.f;
    float	data_ssd = 0.f;
    float	data_sid = 0.f;
    int	data_rows = 0;
    int	data_columns = 0;
    int	data_frame = 0;
    //char*	data_pixeldata;
    float	data_ximagexorientation = 0.f;
    float	data_yimagexorientation = 0.f;
    float	data_zimagexorientation = 0.f;
    float	data_ximageyorientation = 0.f;
    float	data_yimageyorientation = 0.f;
    float	data_zimageyorientation = 0.f;
    float	data_angle = 0.f;
    double	data_windowwidth = 0.;
    double	data_windowcenter = 0.;
    MYSQL_TIME	data_acquisitiondatetime;
    double	data_rescaleintercept = 0.;
    double	data_rescaleslope = 0.;
    float	data_xrayimagereceptortranslationx = 0.f;
    float	data_xrayimagereceptortranslationy = 0.f;
    float	data_xrayimagereceptortranslationz = 0.f;
    bool	data_isselected = false;
    double	data_collimatorangle = 0.;
    MYSQL_TIME	data_updatetime;
    //std::string	data_patientname
    //std::string	data_patientid
    int	data_patientsex = 0;
    MYSQL_TIME	data_patientbirthdate;
    int	data_patientage = 0;
    //std::string	data_dicomimagetype
    int	data_patientposition = 0;

    if (mysql_stmt_prepare(stmt, sSql.c_str(), (unsigned long)strlen(sSql.c_str())))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_prepare(), SELECT failed."<<mysql_stmt_error(stmt);
        return false;
    }

    //Fetch result set meta information
    prepare_meta_result = mysql_stmt_result_metadata(stmt);
    if (!prepare_meta_result) 
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_result_metadata(), returned no meta information "<<mysql_stmt_error(stmt);
        return false;
    }

    // Get total columns in the query and validate column count
    const unsigned int column_count= mysql_num_fields(prepare_meta_result);
    if (column_count != field_num)
    {
        TPS_LOG_DEV_ERROR<<"invalid column count returned by MySQL";
        return false;
    }

    MYSQL_BIND* bind = new MYSQL_BIND[column_count];
    memset(bind, 0, sizeof(MYSQL_BIND)*column_count);
    unsigned long* length = new unsigned long[column_count];
    memset(length, 0, sizeof(unsigned long) * column_count);
    my_bool* is_null = new my_bool[column_count];
    memset(is_null, 0, sizeof(my_bool) * column_count);
    //Execute the SELECT query
    char* data_string[field_num];
    for (int i=0; i<field_num; ++i)
    {
        const unsigned long ulSize = MAX_LENGTH[i] + 1;// + 1 for string's \0 
        data_string[i] = new char[ulSize];
        memset(data_string[i], 0, ulSize*sizeof(char));
    }
    if (mysql_stmt_execute(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_execute(), failed"<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    for (unsigned int i(0); i<column_count; ++i)
    {
        bind[i].is_null= &is_null[i];
        bind[i].length= &length[i];
        switch (i)
        {
        case 13: 	//samplesperpixel int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_samplesperpixel;
            break;
        case 15: 	//bitsallocated int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_bitsallocated;
            break;
        case 16: 	//bitsstored int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_bitsstored;
            break;
        case 17: 	//highbit int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_highbit;
            break;
        case 22: 	//imagetype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_imagetype;
            break;
        case 23: 	//conversiontype int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_conversiontype;
            break;
        case 24: 	//rtimageplane int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_rtimageplane;
            break;
        case 25: 	//xrimagereceptorangle double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_xrimagereceptorangle;
            break;
        case 26: 	//firstimageplanepixelspacing float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_firstimageplanepixelspacing;
            break;
        case 27: 	//secondimageplanepixelspacing float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_secondimageplanepixelspacing;
            break;
        case 28: 	//firstrtimageposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_firstrtimageposition;
            break;
        case 29: 	//secondrtimageposition float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_secondrtimageposition;
            break;
        case 32: 	//sad float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sad;
            break;
        case 33: 	//ssd float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ssd;
            break;
        case 34: 	//sid float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_sid;
            break;
        case 35: 	//rows int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_rows;
            break;
        case 36: 	//columns int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_columns;
            break;
        case 37: 	//frame int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_frame;
            break;
        case 38: 	//pixeldata mediumblob
            bind[i].buffer_type= MYSQL_TYPE_MEDIUM_BLOB;
            break;
        case 39: 	//ximagexorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ximagexorientation;
            break;
        case 40: 	//yimagexorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_yimagexorientation;
            break;
        case 41: 	//zimagexorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_zimagexorientation;
            break;
        case 42: 	//ximageyorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_ximageyorientation;
            break;
        case 43: 	//yimageyorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_yimageyorientation;
            break;
        case 44: 	//zimageyorientation float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_zimageyorientation;
            break;
        case 45: 	//angle float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_angle;
            break;
        case 46: 	//windowwidth double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_windowwidth;
            break;
        case 47: 	//windowcenter double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_windowcenter;
            break;
        case 48: 	//acquisitiondatetime datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_acquisitiondatetime;
            break;
        case 49: 	//rescaleintercept double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_rescaleintercept;
            break;
        case 50: 	//rescaleslope double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_rescaleslope;
            break;
        case 51: 	//xrayimagereceptortranslationx float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_xrayimagereceptortranslationx;
            break;
        case 52: 	//xrayimagereceptortranslationy float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_xrayimagereceptortranslationy;
            break;
        case 53: 	//xrayimagereceptortranslationz float
            bind[i].buffer_type= MYSQL_TYPE_FLOAT;
            bind[i].buffer= (char *)&data_xrayimagereceptortranslationz;
            break;
        case 54: 	//isselected tinyint
            bind[i].buffer_type= MYSQL_TYPE_TINY;
            bind[i].buffer= (char *)&data_isselected;
            break;
        case 55: 	//collimatorangle double
            bind[i].buffer_type= MYSQL_TYPE_DOUBLE;
            bind[i].buffer= (char *)&data_collimatorangle;
            break;
        case 56: 	//updatetime timestamp
            bind[i].buffer_type= MYSQL_TYPE_TIMESTAMP;
            bind[i].buffer= (char *)&data_updatetime;
            break;
        case 59: 	//patientsex int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientsex;
            break;
        case 60: 	//patientbirthdate datetime
            bind[i].buffer_type= MYSQL_TYPE_DATETIME;
            bind[i].buffer= (char *)&data_patientbirthdate;
            break;
        case 61: 	//patientage int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientage;
            break;
        case 63: 	//patientposition int
            bind[i].buffer_type= MYSQL_TYPE_LONG;
            bind[i].buffer= (char *)&data_patientposition;
            break;
        default:
            bind[i].buffer_type= MYSQL_TYPE_STRING;
            bind[i].buffer= (char *)data_string[i];
            bind[i].buffer_length= MAX_LENGTH[i];
            break;
        }
    }

    // Bind the result buffers
    if (mysql_stmt_bind_result(stmt, bind))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_bind_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    //Now buffer all results to client
    if (mysql_stmt_store_result(stmt))
    {
        TPS_LOG_DEV_ERROR<<" mysql_stmt_store_result() failed "<<mysql_stmt_error(stmt);
        for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
        DEL_ARRAY(bind);
        DEL_ARRAY(length);
        DEL_ARRAY(is_null);
        return false;
    }

    // Fetch all rows 
    int ret(1);
    RtRtimage* pDis = nullptr;
    while(true)
    {
        ret = mysql_stmt_fetch(stmt);
        if (ret!=0 && ret!=MYSQL_DATA_TRUNCATED) break;
        pDis = new RtRtimage();
        for (unsigned int i(0); i<column_count; ++i)
        {
            if (is_null[i]) continue;
            switch (i)
            {
            case 0: 	//uid varchar
                pDis->set_uid((char *)bind[i].buffer);
                break;
            case 1: 	//sopinstanceuid varchar
                pDis->set_sopinstanceuid((char *)bind[i].buffer);
                break;
            case 2: 	//courseuid varchar
                pDis->set_courseuid((char *)bind[i].buffer);
                break;
            case 3: 	//isocenteruid varchar
                pDis->set_isocenteruid((char *)bind[i].buffer);
                break;
            case 4: 	//seriesuid varchar
                pDis->set_seriesuid((char *)bind[i].buffer);
                break;
            case 5: 	//drrsettinguid varchar
                pDis->set_drrsettinguid((char *)bind[i].buffer);
                break;
            case 6: 	//planuid varchar
                pDis->set_planuid((char *)bind[i].buffer);
                break;
            case 7: 	//beamuid varchar
                pDis->set_beamuid((char *)bind[i].buffer);
                break;
            case 8: 	//treatmentbeamuid varchar
                pDis->set_treatmentbeamuid((char *)bind[i].buffer);
                break;
            case 9: 	//sessionuid varchar
                pDis->set_sessionuid((char *)bind[i].buffer);
                break;
            case 10: 	//fbctuid varchar
                pDis->set_fbctuid((char *)bind[i].buffer);
                break;
            case 11: 	//imagebeamuid varchar
                pDis->set_imagebeamuid((char *)bind[i].buffer);
                break;
            case 12: 	//portimagebeamuid varchar
                pDis->set_portimagebeamuid((char *)bind[i].buffer);
                break;
            case 13: 	//samplesperpixel int
                pDis->set_samplesperpixel(data_samplesperpixel);
                break;
            case 14: 	//photometricinterpretation varchar
                pDis->set_photometricinterpretation((char *)bind[i].buffer);
                break;
            case 15: 	//bitsallocated int
                pDis->set_bitsallocated(data_bitsallocated);
                break;
            case 16: 	//bitsstored int
                pDis->set_bitsstored(data_bitsstored);
                break;
            case 17: 	//highbit int
                pDis->set_highbit(data_highbit);
                break;
            case 18: 	//pixelrepresentation varchar
                pDis->set_pixelrepresentation((char *)bind[i].buffer);
                break;
            case 19: 	//name varchar
                pDis->set_name((char *)bind[i].buffer);
                break;
            case 20: 	//rtimagelabel varchar
                pDis->set_rtimagelabel((char *)bind[i].buffer);
                break;
            case 21: 	//description varchar
                pDis->set_description((char *)bind[i].buffer);
                break;
            case 22: 	//imagetype int
                pDis->set_imagetype(data_imagetype);
                break;
            case 23: 	//conversiontype int
                pDis->set_conversiontype(data_conversiontype);
                break;
            case 24: 	//rtimageplane int
                pDis->set_rtimageplane(data_rtimageplane);
                break;
            case 25: 	//xrimagereceptorangle double
                pDis->set_xrimagereceptorangle(data_xrimagereceptorangle);
                break;
            case 26: 	//firstimageplanepixelspacing float
                pDis->set_firstimageplanepixelspacing(data_firstimageplanepixelspacing);
                break;
            case 27: 	//secondimageplanepixelspacing float
                pDis->set_secondimageplanepixelspacing(data_secondimageplanepixelspacing);
                break;
            case 28: 	//firstrtimageposition float
                pDis->set_firstrtimageposition(data_firstrtimageposition);
                break;
            case 29: 	//secondrtimageposition float
                pDis->set_secondrtimageposition(data_secondrtimageposition);
                break;
            case 30: 	//machinename varchar
                pDis->set_machinename((char *)bind[i].buffer);
                break;
            case 31: 	//primarydosimeterunit varchar
                pDis->set_primarydosimeterunit((char *)bind[i].buffer);
                break;
            case 32: 	//sad float
                pDis->set_sad(data_sad);
                break;
            case 33: 	//ssd float
                pDis->set_ssd(data_ssd);
                break;
            case 34: 	//sid float
                pDis->set_sid(data_sid);
                break;
            case 35: 	//rows int
                pDis->set_rows(data_rows);
                break;
            case 36: 	//columns int
                pDis->set_columns(data_columns);
                break;
            case 37: 	//frame int
                pDis->set_frame(data_frame);
                break;
            case 38: 	//pixeldata mediumblob
                {
                    const int total_length = length[i];
                    if (total_length < 1) break;
                    char *buf = new char[total_length + 1];
                    memset(buf, 0, sizeof(char) * total_length + 1);
                    bind[i].buffer = buf;
                    bind[i].buffer_length = total_length;
                    ret = mysql_stmt_fetch_column(stmt, &bind[i], i, 0);
                    if (0 == ret) pDis->set_pixel_data_buffer(buf, total_length);
                    DEL_ARRAY(buf);
                }
                break;
            case 39: 	//ximagexorientation float
                pDis->set_ximagexorientation(data_ximagexorientation);
                break;
            case 40: 	//yimagexorientation float
                pDis->set_yimagexorientation(data_yimagexorientation);
                break;
            case 41: 	//zimagexorientation float
                pDis->set_zimagexorientation(data_zimagexorientation);
                break;
            case 42: 	//ximageyorientation float
                pDis->set_ximageyorientation(data_ximageyorientation);
                break;
            case 43: 	//yimageyorientation float
                pDis->set_yimageyorientation(data_yimageyorientation);
                break;
            case 44: 	//zimageyorientation float
                pDis->set_zimageyorientation(data_zimageyorientation);
                break;
            case 45: 	//angle float
                pDis->set_angle(data_angle);
                break;
            case 46: 	//windowwidth double
                pDis->set_windowwidth(data_windowwidth);
                break;
            case 47: 	//windowcenter double
                pDis->set_windowcenter(data_windowcenter);
                break;
            case 48: 	//acquisitiondatetime datetime
                {
                    DATETIME_BOOST acquisitiondatetime;
                    ConvertDateTime2Boost(data_acquisitiondatetime, &acquisitiondatetime);
                    pDis->set_acquisitiondatetime(acquisitiondatetime);
                }
                break;
            case 49: 	//rescaleintercept double
                pDis->set_rescaleintercept(data_rescaleintercept);
                break;
            case 50: 	//rescaleslope double
                pDis->set_rescaleslope(data_rescaleslope);
                break;
            case 51: 	//xrayimagereceptortranslationx float
                pDis->set_xrayimagereceptortranslationx(data_xrayimagereceptortranslationx);
                break;
            case 52: 	//xrayimagereceptortranslationy float
                pDis->set_xrayimagereceptortranslationy(data_xrayimagereceptortranslationy);
                break;
            case 53: 	//xrayimagereceptortranslationz float
                pDis->set_xrayimagereceptortranslationz(data_xrayimagereceptortranslationz);
                break;
            case 54: 	//isselected tinyint
                pDis->set_isselected(data_isselected);
                break;
            case 55: 	//collimatorangle double
                pDis->set_collimatorangle(data_collimatorangle);
                break;
            case 56: 	//updatetime timestamp
                {
                    DATETIME_BOOST updatetime;
                    ConvertDateTime2Boost(data_updatetime, &updatetime);
                    pDis->set_updatetime(updatetime);
                }
                break;
            case 57: 	//patientname varchar
                pDis->set_patientname((char *)bind[i].buffer);
                break;
            case 58: 	//patientid varchar
                pDis->set_patientid((char *)bind[i].buffer);
                break;
            case 59: 	//patientsex int
                pDis->set_patientsex(data_patientsex);
                break;
            case 60: 	//patientbirthdate datetime
                {
                    DATETIME_BOOST patientbirthdate;
                    ConvertDateTime2Boost(data_patientbirthdate, &patientbirthdate);
                    pDis->set_patientbirthdate(patientbirthdate);
                }
                break;
            case 61: 	//patientage int
                pDis->set_patientage(data_patientage);
                break;
            case 62: 	//dicomimagetype varchar
                pDis->set_dicomimagetype((char *)bind[i].buffer);
                break;
            case 63: 	//patientposition int
                pDis->set_patientposition(data_patientposition);
                break;
            default:
                break;
            }
        }
        pDis->setdirty_all_fields(false);
        vList.push_back(pDis);
    }
    for (int i=0; i<field_num; ++i) DEL_ARRAY(data_string[i]);
    DEL_ARRAY(bind);
    DEL_ARRAY(length);
    DEL_ARRAY(is_null);

    // Free the prepared result metadata
    mysql_free_result(prepare_meta_result);

    // Close the statement
    if (mysql_stmt_close(stmt))
    {
        TPS_LOG_DEV_ERROR<<" failed while closing the statement " << mysql_stmt_error(stmt);
        return false;
    }

    return true;
}

RT_TPS_DATABASE_END_NAMESPACE