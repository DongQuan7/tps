//////////////////////////////////////////////////////////////////////////
/// \defgroup Radio Therapy Business Unit
///  Copyright, (c) Shanghai United Imaging Healthcare Inc., 2016
///  All rights reserved.
///
///  \author  ZHOU qiangqiang  mailto:qiangqiang.zhou@united-imaging.com
///
///  \file      rt_tps_database_object_helper.h
///  \brief     This file was generated by CodeGenerater.exe 
///              From database version: 1.1.8
///
///  \version 1.0
///  \date    6/20/2017
///  \{
//////////////////////////////////////////////////////////////////////////

#ifndef RT_TPS_DATABASE_OBJECT_HELPER_H_
#define RT_TPS_DATABASE_OBJECT_HELPER_H_

#include "RtTpsDatabaseWrapper/rt_tps_database_defs.h"
#include "RtTpsDatabaseWrapper/rt_tps_database_common_enums.h"
#include "boost/date_time/gregorian/gregorian_types.hpp"
#include "boost/date_time/posix_time/posix_time_types.hpp"

RT_TPS_DATABASE_BEGIN_NAMESPACE;

#define START_TRANSACTION "START TRANSACTION"
#define SELECT_FROM "SELECT * FROM "
#define GET_DBVERSION "select version from tmsdbversion limit 1"

#define TABLE_ACCESSORY " tmsaccessory " 
#define TABLE_ACCESSORYCHUNK " tmsaccessorychunk " 
#define TABLE_APPLICATOR " tmsapplicator " 
#define TABLE_APPROVERECORD " tmsapproverecord " 
#define TABLE_BEAM " tmsbeam " 
#define TABLE_BEAM_ACCESSORY " tmsbeam_accessory " 
#define TABLE_BEAM_POI " tmsbeam_poi " 
#define TABLE_BEAM_SESSION " tmsbeam_session " 
#define TABLE_BEAM_VOI " tmsbeam_voi " 
#define TABLE_BEAMRECORD " tmsbeamrecord " 
#define TABLE_BEAMSEGMENT " tmsbeamsegment " 
#define TABLE_BIOROLE " tmsbiorole " 
#define TABLE_BLOCK " tmsblock " 
#define TABLE_CBCTINFO " tmscbctinfo " 
#define TABLE_CHECKSUM " tmschecksum " 
#define TABLE_CLINICAL " tmsclinical " 
#define TABLE_COMMISSIONEDUNIT " tmscommissionedunit " 
#define TABLE_COMMISSIONEDUNIT_TRAY " tmscommissionedunit_tray " 
#define TABLE_CONSTRAINT " tmsconstraint " 
#define TABLE_CONSTRAINTTEMPLATE " tmsconstrainttemplate " 
#define TABLE_CONTOUR " tmscontour " 
#define TABLE_CONTROLPOINT " tmscontrolpoint " 
#define TABLE_CONTROLPOINTRECORD " tmscontrolpointrecord " 
#define TABLE_COURSE " tmscourse " 
#define TABLE_CT2DENSITY " tmsct2density " 
#define TABLE_CURVERESULANANLYSE " tmscurveresulananlyse " 
#define TABLE_DBVERSION " tmsdbversion " 
#define TABLE_DELIVERYBEAMGROUP " tmsdeliverybeamgroup " 
#define TABLE_DELIVERYBEAMGROUP_POI " tmsdeliverybeamgroup_poi " 
#define TABLE_DELIVERYBEAMGROUP_SESSION " tmsdeliverybeamgroup_session " 
#define TABLE_DELIVERYBEAMGROUP_VOI " tmsdeliverybeamgroup_voi " 
#define TABLE_DOSEGRID " tmsdosegrid " 
#define TABLE_DOSELINE " tmsdoseline " 
#define TABLE_DOSEOPTENDCRITERIONBYINTERATION " tmsdoseoptendcriterionbyinteration " 
#define TABLE_DOSEOPTENDCRITERIONBYTIME " tmsdoseoptendcriterionbytime " 
#define TABLE_DOSEOPTGOALBASE " tmsdoseoptgoalbase " 
#define TABLE_DRRSETTING " tmsdrrsetting " 
#define TABLE_DRYRUN " tmsdryrun " 
#define TABLE_EQUIPMENT " tmsequipment " 
#define TABLE_EVENTRECORD " tmseventrecord " 
#define TABLE_FBCT " tmsfbct " 
#define TABLE_FBCT_SESSION " tmsfbct_session " 
#define TABLE_GATINGCHANGEHISTORY " tmsgatingchangehistory " 
#define TABLE_GLOBALCONFIG " tmsglobalconfig " 
#define TABLE_GOLDENSTT " tmsgoldenstt " 
#define TABLE_HOLIDAY " tmsholiday " 
#define TABLE_ICD " tmsicd " 
#define TABLE_ICD_SITE " tmsicd_site " 
#define TABLE_IMAGE " tmsimage " 
#define TABLE_IMAGEBEAM " tmsimagebeam " 
#define TABLE_IMAGEBEAM_SESSION " tmsimagebeam_session " 
#define TABLE_IMAGETRANSFORMATION " tmsimagetransformation " 
#define TABLE_IMMOBILIZATION " tmsimmobilization " 
#define TABLE_KERNELDATA " tmskerneldata " 
#define TABLE_KERNELDATALIST " tmskerneldatalist " 
#define TABLE_KERNELDATALIST_KERNELDATA " tmskerneldatalist_kerneldata " 
#define TABLE_KERNELWEIGHT " tmskernelweight " 
#define TABLE_LOCK " tmslock " 
#define TABLE_MACHINE " tmsmachine " 
#define TABLE_MACHINE_CLINICAL " tmsmachine_clinical " 
#define TABLE_MACHINEQA " tmsmachineqa " 
#define TABLE_MC3DDOSE " tmsmc3ddose " 
#define TABLE_MCELECTRONMONOENERGYWEIGHT " tmsmcelectronmonoenergyweight " 
#define TABLE_MCPHOCOMMISSIONEDUNIT " tmsmcphocommissionedunit " 
#define TABLE_MCPHOMONOENERGYWEIGHT " tmsmcphomonoenergyweight " 
#define TABLE_MEASUREDDATA " tmsmeasureddata " 
#define TABLE_MEASUREDPROFILE " tmsmeasuredprofile " 
#define TABLE_MESSAGE " tmsmessage " 
#define TABLE_MESSAGE_RECEIVER " tmsmessage_receiver " 
#define TABLE_MLCSHAPE " tmsmlcshape " 
#define TABLE_MONOCOMPRESSEDPHASESPACEDATA " tmsmonocompressedphasespacedata " 
#define TABLE_MONOPHASESPACEDATA " tmsmonophasespacedata " 
#define TABLE_NORM_POI " tmsnorm_poi " 
#define TABLE_NORM_VOI " tmsnorm_voi " 
#define TABLE_NORMGROUP " tmsnormgroup " 
#define TABLE_NORMGROUP_VOI " tmsnormgroup_voi " 
#define TABLE_NORMGROUPOPTSETTING " tmsnormgroupoptsetting " 
#define TABLE_NTCP " tmsntcp " 
#define TABLE_OPERATIONRECORD " tmsoperationrecord " 
#define TABLE_PATIENT " tmspatient " 
#define TABLE_PATIENTIMAGE " tmspatientimage " 
#define TABLE_PATIENTPOSITIONIMAGE " tmspatientpositionimage " 
#define TABLE_PHASESPACEDATA " tmsphasespacedata " 
#define TABLE_PLAN " tmsplan " 
#define TABLE_PLAN_POI " tmsplan_poi " 
#define TABLE_PLAN_POI_COPY " tmsplan_poi_copy " 
#define TABLE_PLAN_VOI " tmsplan_voi " 
#define TABLE_PLAN_VOI_COPY " tmsplan_voi_copy " 
#define TABLE_PORTIMAGEBEAM " tmsportimagebeam " 
#define TABLE_PRESCRIPTION " tmsprescription " 
#define TABLE_PROTOCOLTEMPLATE " tmsprotocoltemplate " 
#define TABLE_REPORTDOCUMENTS " tmsreportdocuments " 
#define TABLE_ROLE " tmsrole " 
#define TABLE_ROLEPERMISSION " tmsrolepermission " 
#define TABLE_RTIMAGE " tmsrtimage " 
#define TABLE_SERIES " tmsseries " 
#define TABLE_SERIESGROUP " tmsseriesgroup " 
#define TABLE_SERIESTABLE " tmsseriestable " 
#define TABLE_SETUP " tmssetup " 
#define TABLE_SETUPOFFSETRECORD " tmssetupoffsetrecord " 
#define TABLE_SHAPEELEMENT " tmsshapeelement " 
#define TABLE_SITE " tmssite " 
#define TABLE_SITE_IMMOBILIZATION " tmssite_immobilization " 
#define TABLE_SITETEMPLATE " tmssitetemplate " 
#define TABLE_STAGE " tmsstage " 
#define TABLE_STEP " tmsstep " 
#define TABLE_STRUCTURESET " tmsstructureset " 
#define TABLE_STUDY " tmsstudy " 
#define TABLE_SYSTEMDEFAULTCONFIG " tmssystemdefaultconfig " 
#define TABLE_TABLECONTOUR " tmstablecontour " 
#define TABLE_TCP " tmstcp " 
#define TABLE_TEMPLATE " tmstemplate " 
#define TABLE_TOLERANCE " tmstolerance " 
#define TABLE_TRAY " tmstray " 
#define TABLE_TREATMENTBEAM " tmstreatmentbeam " 
#define TABLE_TREATMENTBEAM_ACCESSORY " tmstreatmentbeam_accessory " 
#define TABLE_TREATMENTBEAM_POI " tmstreatmentbeam_poi " 
#define TABLE_TREATMENTBEAM_VOI " tmstreatmentbeam_voi " 
#define TABLE_TREATMENTSESSION " tmstreatmentsession " 
#define TABLE_USER " tmsuser " 
#define TABLE_USER_CLINIC " tmsuser_clinic " 
#define TABLE_USER_ROLE " tmsuser_role " 
#define TABLE_USERCONFIG " tmsuserconfig " 
#define TABLE_USERSESSION " tmsusersession " 
#define TABLE_VOI " tmsvoi " 
#define TABLE_VOISETTING " tmsvoisetting " 
#define TABLE_WEDGEFACTOR " tmswedgefactor " 
#define TABLE_TPSPOI " tpspoi " 
#define TABLE_ASOVERRIDE " v_hasoverride " 
#define TABLE_ACHINESESSIONVIEW " v_machinesessionview " 

#define SELECT_TABLE_ACCESSORY "SELECT * FROM tmsaccessory " 
#define SELECT_TABLE_ACCESSORYCHUNK "SELECT * FROM tmsaccessorychunk " 
#define SELECT_TABLE_APPLICATOR "SELECT * FROM tmsapplicator " 
#define SELECT_TABLE_APPROVERECORD "SELECT * FROM tmsapproverecord " 
#define SELECT_TABLE_BEAM "SELECT * FROM tmsbeam " 
#define SELECT_TABLE_BEAM_ACCESSORY "SELECT * FROM tmsbeam_accessory " 
#define SELECT_TABLE_BEAM_POI "SELECT * FROM tmsbeam_poi " 
#define SELECT_TABLE_BEAM_SESSION "SELECT * FROM tmsbeam_session " 
#define SELECT_TABLE_BEAM_VOI "SELECT * FROM tmsbeam_voi " 
#define SELECT_TABLE_BEAMRECORD "SELECT * FROM tmsbeamrecord " 
#define SELECT_TABLE_BEAMSEGMENT "SELECT * FROM tmsbeamsegment " 
#define SELECT_TABLE_BIOROLE "SELECT * FROM tmsbiorole " 
#define SELECT_TABLE_BLOCK "SELECT * FROM tmsblock " 
#define SELECT_TABLE_CBCTINFO "SELECT * FROM tmscbctinfo " 
#define SELECT_TABLE_CHECKSUM "SELECT * FROM tmschecksum " 
#define SELECT_TABLE_CLINICAL "SELECT * FROM tmsclinical " 
#define SELECT_TABLE_COMMISSIONEDUNIT "SELECT * FROM tmscommissionedunit " 
#define SELECT_TABLE_COMMISSIONEDUNIT_TRAY "SELECT * FROM tmscommissionedunit_tray " 
#define SELECT_TABLE_CONSTRAINT "SELECT * FROM tmsconstraint " 
#define SELECT_TABLE_CONSTRAINTTEMPLATE "SELECT * FROM tmsconstrainttemplate " 
#define SELECT_TABLE_CONTOUR "SELECT * FROM tmscontour " 
#define SELECT_TABLE_CONTROLPOINT "SELECT * FROM tmscontrolpoint " 
#define SELECT_TABLE_CONTROLPOINTRECORD "SELECT * FROM tmscontrolpointrecord " 
#define SELECT_TABLE_COURSE "SELECT * FROM tmscourse " 
#define SELECT_TABLE_CT2DENSITY "SELECT * FROM tmsct2density " 
#define SELECT_TABLE_CURVERESULANANLYSE "SELECT * FROM tmscurveresulananlyse " 
#define SELECT_TABLE_DBVERSION "SELECT * FROM tmsdbversion " 
#define SELECT_TABLE_DELIVERYBEAMGROUP "SELECT * FROM tmsdeliverybeamgroup " 
#define SELECT_TABLE_DELIVERYBEAMGROUP_POI "SELECT * FROM tmsdeliverybeamgroup_poi " 
#define SELECT_TABLE_DELIVERYBEAMGROUP_SESSION "SELECT * FROM tmsdeliverybeamgroup_session " 
#define SELECT_TABLE_DELIVERYBEAMGROUP_VOI "SELECT * FROM tmsdeliverybeamgroup_voi " 
#define SELECT_TABLE_DOSEGRID "SELECT * FROM tmsdosegrid " 
#define SELECT_TABLE_DOSELINE "SELECT * FROM tmsdoseline " 
#define SELECT_TABLE_DOSEOPTENDCRITERIONBYINTERATION "SELECT * FROM tmsdoseoptendcriterionbyinteration " 
#define SELECT_TABLE_DOSEOPTENDCRITERIONBYTIME "SELECT * FROM tmsdoseoptendcriterionbytime " 
#define SELECT_TABLE_DOSEOPTGOALBASE "SELECT * FROM tmsdoseoptgoalbase " 
#define SELECT_TABLE_DRRSETTING "SELECT * FROM tmsdrrsetting " 
#define SELECT_TABLE_DRYRUN "SELECT * FROM tmsdryrun " 
#define SELECT_TABLE_EQUIPMENT "SELECT * FROM tmsequipment " 
#define SELECT_TABLE_EVENTRECORD "SELECT * FROM tmseventrecord " 
#define SELECT_TABLE_FBCT "SELECT * FROM tmsfbct " 
#define SELECT_TABLE_FBCT_SESSION "SELECT * FROM tmsfbct_session " 
#define SELECT_TABLE_GATINGCHANGEHISTORY "SELECT * FROM tmsgatingchangehistory " 
#define SELECT_TABLE_GLOBALCONFIG "SELECT * FROM tmsglobalconfig " 
#define SELECT_TABLE_GOLDENSTT "SELECT * FROM tmsgoldenstt " 
#define SELECT_TABLE_HOLIDAY "SELECT * FROM tmsholiday " 
#define SELECT_TABLE_ICD "SELECT * FROM tmsicd " 
#define SELECT_TABLE_ICD_SITE "SELECT * FROM tmsicd_site " 
#define SELECT_TABLE_IMAGE "SELECT * FROM tmsimage " 
#define SELECT_TABLE_IMAGEBEAM "SELECT * FROM tmsimagebeam " 
#define SELECT_TABLE_IMAGEBEAM_SESSION "SELECT * FROM tmsimagebeam_session " 
#define SELECT_TABLE_IMAGETRANSFORMATION "SELECT * FROM tmsimagetransformation " 
#define SELECT_TABLE_IMMOBILIZATION "SELECT * FROM tmsimmobilization " 
#define SELECT_TABLE_KERNELDATA "SELECT * FROM tmskerneldata " 
#define SELECT_TABLE_KERNELDATALIST "SELECT * FROM tmskerneldatalist " 
#define SELECT_TABLE_KERNELDATALIST_KERNELDATA "SELECT * FROM tmskerneldatalist_kerneldata " 
#define SELECT_TABLE_KERNELWEIGHT "SELECT * FROM tmskernelweight " 
#define SELECT_TABLE_LOCK "SELECT * FROM tmslock " 
#define SELECT_TABLE_MACHINE "SELECT * FROM tmsmachine " 
#define SELECT_TABLE_MACHINE_CLINICAL "SELECT * FROM tmsmachine_clinical " 
#define SELECT_TABLE_MACHINEQA "SELECT * FROM tmsmachineqa " 
#define SELECT_TABLE_MC3DDOSE "SELECT * FROM tmsmc3ddose " 
#define SELECT_TABLE_MCELECTRONMONOENERGYWEIGHT "SELECT * FROM tmsmcelectronmonoenergyweight " 
#define SELECT_TABLE_MCPHOCOMMISSIONEDUNIT "SELECT * FROM tmsmcphocommissionedunit " 
#define SELECT_TABLE_MCPHOMONOENERGYWEIGHT "SELECT * FROM tmsmcphomonoenergyweight " 
#define SELECT_TABLE_MEASUREDDATA "SELECT * FROM tmsmeasureddata " 
#define SELECT_TABLE_MEASUREDPROFILE "SELECT * FROM tmsmeasuredprofile " 
#define SELECT_TABLE_MESSAGE "SELECT * FROM tmsmessage " 
#define SELECT_TABLE_MESSAGE_RECEIVER "SELECT * FROM tmsmessage_receiver " 
#define SELECT_TABLE_MLCSHAPE "SELECT * FROM tmsmlcshape " 
#define SELECT_TABLE_MONOCOMPRESSEDPHASESPACEDATA "SELECT * FROM tmsmonocompressedphasespacedata " 
#define SELECT_TABLE_MONOPHASESPACEDATA "SELECT * FROM tmsmonophasespacedata " 
#define SELECT_TABLE_NORM_POI "SELECT * FROM tmsnorm_poi " 
#define SELECT_TABLE_NORM_VOI "SELECT * FROM tmsnorm_voi " 
#define SELECT_TABLE_NORMGROUP "SELECT * FROM tmsnormgroup " 
#define SELECT_TABLE_NORMGROUP_VOI "SELECT * FROM tmsnormgroup_voi " 
#define SELECT_TABLE_NORMGROUPOPTSETTING "SELECT * FROM tmsnormgroupoptsetting " 
#define SELECT_TABLE_NTCP "SELECT * FROM tmsntcp " 
#define SELECT_TABLE_OPERATIONRECORD "SELECT * FROM tmsoperationrecord " 
#define SELECT_TABLE_PATIENT "SELECT * FROM tmspatient " 
#define SELECT_TABLE_PATIENTIMAGE "SELECT * FROM tmspatientimage " 
#define SELECT_TABLE_PATIENTPOSITIONIMAGE "SELECT * FROM tmspatientpositionimage " 
#define SELECT_TABLE_PHASESPACEDATA "SELECT * FROM tmsphasespacedata " 
#define SELECT_TABLE_PLAN "SELECT * FROM tmsplan " 
#define SELECT_TABLE_PLAN_POI "SELECT * FROM tmsplan_poi " 
#define SELECT_TABLE_PLAN_POI_COPY "SELECT * FROM tmsplan_poi_copy " 
#define SELECT_TABLE_PLAN_VOI "SELECT * FROM tmsplan_voi " 
#define SELECT_TABLE_PLAN_VOI_COPY "SELECT * FROM tmsplan_voi_copy " 
#define SELECT_TABLE_PORTIMAGEBEAM "SELECT * FROM tmsportimagebeam " 
#define SELECT_TABLE_PRESCRIPTION "SELECT * FROM tmsprescription " 
#define SELECT_TABLE_PROTOCOLTEMPLATE "SELECT * FROM tmsprotocoltemplate " 
#define SELECT_TABLE_REPORTDOCUMENTS "SELECT * FROM tmsreportdocuments " 
#define SELECT_TABLE_ROLE "SELECT * FROM tmsrole " 
#define SELECT_TABLE_ROLEPERMISSION "SELECT * FROM tmsrolepermission " 
#define SELECT_TABLE_RTIMAGE "SELECT * FROM tmsrtimage " 
#define SELECT_TABLE_SERIES "SELECT * FROM tmsseries " 
#define SELECT_TABLE_SERIESGROUP "SELECT * FROM tmsseriesgroup " 
#define SELECT_TABLE_SERIESTABLE "SELECT * FROM tmsseriestable " 
#define SELECT_TABLE_SETUP "SELECT * FROM tmssetup " 
#define SELECT_TABLE_SETUPOFFSETRECORD "SELECT * FROM tmssetupoffsetrecord " 
#define SELECT_TABLE_SHAPEELEMENT "SELECT * FROM tmsshapeelement " 
#define SELECT_TABLE_SITE "SELECT * FROM tmssite " 
#define SELECT_TABLE_SITE_IMMOBILIZATION "SELECT * FROM tmssite_immobilization " 
#define SELECT_TABLE_SITETEMPLATE "SELECT * FROM tmssitetemplate " 
#define SELECT_TABLE_STAGE "SELECT * FROM tmsstage " 
#define SELECT_TABLE_STEP "SELECT * FROM tmsstep " 
#define SELECT_TABLE_STRUCTURESET "SELECT * FROM tmsstructureset " 
#define SELECT_TABLE_STUDY "SELECT * FROM tmsstudy " 
#define SELECT_TABLE_SYSTEMDEFAULTCONFIG "SELECT * FROM tmssystemdefaultconfig " 
#define SELECT_TABLE_TABLECONTOUR "SELECT * FROM tmstablecontour " 
#define SELECT_TABLE_TCP "SELECT * FROM tmstcp " 
#define SELECT_TABLE_TEMPLATE "SELECT * FROM tmstemplate " 
#define SELECT_TABLE_TOLERANCE "SELECT * FROM tmstolerance " 
#define SELECT_TABLE_TRAY "SELECT * FROM tmstray " 
#define SELECT_TABLE_TREATMENTBEAM "SELECT * FROM tmstreatmentbeam " 
#define SELECT_TABLE_TREATMENTBEAM_ACCESSORY "SELECT * FROM tmstreatmentbeam_accessory " 
#define SELECT_TABLE_TREATMENTBEAM_POI "SELECT * FROM tmstreatmentbeam_poi " 
#define SELECT_TABLE_TREATMENTBEAM_VOI "SELECT * FROM tmstreatmentbeam_voi " 
#define SELECT_TABLE_TREATMENTSESSION "SELECT * FROM tmstreatmentsession " 
#define SELECT_TABLE_USER "SELECT * FROM tmsuser " 
#define SELECT_TABLE_USER_CLINIC "SELECT * FROM tmsuser_clinic " 
#define SELECT_TABLE_USER_ROLE "SELECT * FROM tmsuser_role " 
#define SELECT_TABLE_USERCONFIG "SELECT * FROM tmsuserconfig " 
#define SELECT_TABLE_USERSESSION "SELECT * FROM tmsusersession " 
#define SELECT_TABLE_VOI "SELECT * FROM tmsvoi " 
#define SELECT_TABLE_VOISETTING "SELECT * FROM tmsvoisetting " 
#define SELECT_TABLE_WEDGEFACTOR "SELECT * FROM tmswedgefactor " 
#define SELECT_TABLE_TPSPOI "SELECT * FROM tpspoi " 
#define SELECT_TABLE_ASOVERRIDE "SELECT * FROM v_hasoverride " 
#define SELECT_TABLE_ACHINESESSIONVIEW "SELECT * FROM v_machinesessionview " 

typedef boost::posix_time::ptime DATETIME_BOOST;
typedef boost::posix_time::time_duration TIME_BOOST;
typedef boost::gregorian::date DATE_BOOST;
class RtAccessory;
class RtAccessorychunk;
class RtApplicator;
class RtApproverecord;
class RtBeam;
class RtBeam_accessory;
class RtBeam_poi;
class RtBeam_session;
class RtBeam_voi;
class RtBeamrecord;
class RtBeamsegment;
class RtBiorole;
class RtBlock;
class RtCbctinfo;
class RtChecksum;
class RtClinical;
class RtCommissionedunit;
class RtCommissionedunit_tray;
class RtConstraint;
class RtConstrainttemplate;
class RtContour;
class RtControlpoint;
class RtControlpointrecord;
class RtCourse;
class RtCt2density;
class RtCurveresulananlyse;
class RtDbversion;
class RtDeliverybeamgroup;
class RtDeliverybeamgroup_poi;
class RtDeliverybeamgroup_session;
class RtDeliverybeamgroup_voi;
class RtDosegrid;
class RtDoseline;
class RtDoseoptendcriterionbyinteration;
class RtDoseoptendcriterionbytime;
class RtDoseoptgoalbase;
class RtDrrsetting;
class RtDryrun;
class RtEquipment;
class RtEventrecord;
class RtFbct;
class RtFbct_session;
class RtGatingchangehistory;
class RtGlobalconfig;
class RtGoldenstt;
class RtHoliday;
class RtIcd;
class RtIcd_site;
class RtImage;
class RtImagebeam;
class RtImagebeam_session;
class RtImagetransformation;
class RtImmobilization;
class RtKerneldata;
class RtKerneldatalist;
class RtKerneldatalist_kerneldata;
class RtKernelweight;
class RtLock;
class RtMachine;
class RtMachine_clinical;
class RtMachineqa;
class RtMc3ddose;
class RtMcelectronmonoenergyweight;
class RtMcphocommissionedunit;
class RtMcphomonoenergyweight;
class RtMeasureddata;
class RtMeasuredprofile;
class RtMessage;
class RtMessage_receiver;
class RtMlcshape;
class RtMonocompressedphasespacedata;
class RtMonophasespacedata;
class RtNorm_poi;
class RtNorm_voi;
class RtNormgroup;
class RtNormgroup_voi;
class RtNormgroupoptsetting;
class RtNtcp;
class RtOperationrecord;
class RtPatient;
class RtPatientimage;
class RtPatientpositionimage;
class RtPhasespacedata;
class RtPlan;
class RtPlan_poi;
class RtPlan_poi_copy;
class RtPlan_voi;
class RtPlan_voi_copy;
class RtPoi;
class RtPortimagebeam;
class RtPrescription;
class RtProtocoltemplate;
class RtReportdocuments;
class RtRole;
class RtRolepermission;
class RtRtimage;
class RtSeries;
class RtSeriesgroup;
class RtSeriestable;
class RtSetup;
class RtSetupoffsetrecord;
class RtShapeelement;
class RtSite;
class RtSite_immobilization;
class RtSitetemplate;
class RtStage;
class RtStep;
class RtStructureset;
class RtStudy;
class RtSystemdefaultconfig;
class RtTablecontour;
class RtTcp;
class RtTemplate;
class RtTolerance;
class RtTray;
class RtTreatmentbeam;
class RtTreatmentbeam_accessory;
class RtTreatmentbeam_poi;
class RtTreatmentbeam_voi;
class RtTreatmentsession;
class RtUser;
class RtUser_clinic;
class RtUser_role;
class RtUserconfig;
class RtUsersession;
class RtVoi;
class RtVoisetting;
class RtWedgefactor;
class RtAsoverride;
class RtAchinesessionview;

class RT_DB_EXPORT RtDatabaseHelper
{
public:
    RtDatabaseHelper(MYSQL* pMySql);
    ~RtDatabaseHelper();

    //common
    bool QueryDBInTable(const std::string& sUid, const std::string& sTable) const;
    bool QueryDBInTable(const std::string& sUid, RtDbDef::OBJECT_TYPE objType) const;
    bool QueryDBInTable(const std::string& sFirstUid, const std::string& sSecondUid, 
        RtDbDef::OBJECT_TYPE objType) const;
    bool QueryDBInTableViaSpecifiedKey(const std::string& key, const std::string& value, 
        RtDbDef::OBJECT_TYPE objType) const;
    bool QueryDBInPatient(const std::string& sPatientUID) const;
    bool MysqlRealQuery(const std::string& sSQL) const;
    DATETIME_BOOST GetUpdatetime(const std::string& sUid, RtDbDef::OBJECT_TYPE objType);

    std::string ConvertDateTime(const DATETIME_BOOST& datetime);
    std::string ConvertDateTime(const DATE_BOOST& date);
    std::string ConvertDateTime(const TIME_BOOST& time);
    void ConvertDateTime2DB(const DATETIME_BOOST& datetime, MYSQL_TIME* my_datetime);
    void ConvertDateTime2DB(const DATE_BOOST& date, MYSQL_TIME* my_datetime);
    void ConvertDateTime2DB(const TIME_BOOST& time, MYSQL_TIME* my_datetime);

    void ConvertDateTime2Boost(const MYSQL_TIME& my_datetime, DATETIME_BOOST* datetime);
    void ConvertDateTime2Boost(const MYSQL_TIME& my_datetime, DATE_BOOST* datetime);
    void ConvertDateTime2Boost(const MYSQL_TIME& my_datetime, TIME_BOOST* datetime);

    //RtAccessory
    bool InsertUpdateDBFromObject(const RtAccessory& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtAccessory*>& vList);

    //RtAccessorychunk
    bool InsertUpdateDBFromObject(const RtAccessorychunk& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtAccessorychunk*>& vList);

    //RtApplicator
    bool InsertUpdateDBFromObject(const RtApplicator& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtApplicator*>& vList);

    //RtApproverecord
    bool InsertUpdateDBFromObject(const RtApproverecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtApproverecord*>& vList);

    //RtBeam
    bool InsertUpdateDBFromObject(const RtBeam& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeam*>& vList);

    //RtBeam_accessory
    bool InsertUpdateDBFromObject(const RtBeam_accessory& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeam_accessory*>& vList);

    //RtBeam_poi
    bool InsertUpdateDBFromObject(const RtBeam_poi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeam_poi*>& vList);

    //RtBeam_session
    bool InsertUpdateDBFromObject(const RtBeam_session& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeam_session*>& vList);

    //RtBeam_voi
    bool InsertUpdateDBFromObject(const RtBeam_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeam_voi*>& vList);

    //RtBeamrecord
    bool InsertUpdateDBFromObject(const RtBeamrecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeamrecord*>& vList);

    //RtBeamsegment
    bool InsertUpdateDBFromObject(const RtBeamsegment& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBeamsegment*>& vList);

    //RtBiorole
    bool InsertUpdateDBFromObject(const RtBiorole& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBiorole*>& vList);

    //RtBlock
    bool InsertUpdateDBFromObject(const RtBlock& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtBlock*>& vList);

    //RtCbctinfo
    bool InsertUpdateDBFromObject(const RtCbctinfo& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCbctinfo*>& vList);

    //RtChecksum
    bool InsertUpdateDBFromObject(const RtChecksum& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtChecksum*>& vList);

    //RtClinical
    bool InsertUpdateDBFromObject(const RtClinical& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtClinical*>& vList);

    //RtCommissionedunit
    bool InsertUpdateDBFromObject(const RtCommissionedunit& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCommissionedunit*>& vList);

    //RtCommissionedunit_tray
    bool InsertUpdateDBFromObject(const RtCommissionedunit_tray& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCommissionedunit_tray*>& vList);

    //RtConstraint
    bool InsertUpdateDBFromObject(const RtConstraint& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtConstraint*>& vList);

    //RtConstrainttemplate
    bool InsertUpdateDBFromObject(const RtConstrainttemplate& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtConstrainttemplate*>& vList);

    //RtContour
    bool InsertUpdateDBFromObject(const RtContour& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtContour*>& vList);

    //RtControlpoint
    bool InsertUpdateDBFromObject(const RtControlpoint& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtControlpoint*>& vList);

    //RtControlpointrecord
    bool InsertUpdateDBFromObject(const RtControlpointrecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtControlpointrecord*>& vList);

    //RtCourse
    bool InsertUpdateDBFromObject(const RtCourse& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCourse*>& vList);

    //RtCt2density
    bool InsertUpdateDBFromObject(const RtCt2density& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCt2density*>& vList);

    //RtCurveresulananlyse
    bool InsertUpdateDBFromObject(const RtCurveresulananlyse& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtCurveresulananlyse*>& vList);

    //RtDbversion
    bool InsertUpdateDBFromObject(const RtDbversion& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDbversion*>& vList);

    //RtDeliverybeamgroup
    bool InsertUpdateDBFromObject(const RtDeliverybeamgroup& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDeliverybeamgroup*>& vList);

    //RtDeliverybeamgroup_poi
    bool InsertUpdateDBFromObject(const RtDeliverybeamgroup_poi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDeliverybeamgroup_poi*>& vList);

    //RtDeliverybeamgroup_session
    bool InsertUpdateDBFromObject(const RtDeliverybeamgroup_session& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDeliverybeamgroup_session*>& vList);

    //RtDeliverybeamgroup_voi
    bool InsertUpdateDBFromObject(const RtDeliverybeamgroup_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDeliverybeamgroup_voi*>& vList);

    //RtDosegrid
    bool InsertUpdateDBFromObject(const RtDosegrid& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDosegrid*>& vList);

    //RtDoseline
    bool InsertUpdateDBFromObject(const RtDoseline& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDoseline*>& vList);

    //RtDoseoptendcriterionbyinteration
    bool InsertUpdateDBFromObject(const RtDoseoptendcriterionbyinteration& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDoseoptendcriterionbyinteration*>& vList);

    //RtDoseoptendcriterionbytime
    bool InsertUpdateDBFromObject(const RtDoseoptendcriterionbytime& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDoseoptendcriterionbytime*>& vList);

    //RtDoseoptgoalbase
    bool InsertUpdateDBFromObject(const RtDoseoptgoalbase& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDoseoptgoalbase*>& vList);

    //RtDrrsetting
    bool InsertUpdateDBFromObject(const RtDrrsetting& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDrrsetting*>& vList);

    //RtDryrun
    bool InsertUpdateDBFromObject(const RtDryrun& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtDryrun*>& vList);

    //RtEquipment
    bool InsertUpdateDBFromObject(const RtEquipment& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtEquipment*>& vList);

    //RtEventrecord
    bool InsertUpdateDBFromObject(const RtEventrecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtEventrecord*>& vList);

    //RtFbct
    bool InsertUpdateDBFromObject(const RtFbct& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtFbct*>& vList);

    //RtFbct_session
    bool InsertUpdateDBFromObject(const RtFbct_session& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtFbct_session*>& vList);

    //RtGatingchangehistory
    bool InsertUpdateDBFromObject(const RtGatingchangehistory& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtGatingchangehistory*>& vList);

    //RtGlobalconfig
    bool InsertUpdateDBFromObject(const RtGlobalconfig& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtGlobalconfig*>& vList);

    //RtGoldenstt
    bool InsertUpdateDBFromObject(const RtGoldenstt& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtGoldenstt*>& vList);

    //RtHoliday
    bool InsertUpdateDBFromObject(const RtHoliday& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtHoliday*>& vList);

    //RtIcd
    bool InsertUpdateDBFromObject(const RtIcd& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtIcd*>& vList);

    //RtIcd_site
    bool InsertUpdateDBFromObject(const RtIcd_site& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtIcd_site*>& vList);

    //RtImage
    bool InsertUpdateDBFromObject(const RtImage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtImage*>& vList);

    //RtImagebeam
    bool InsertUpdateDBFromObject(const RtImagebeam& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtImagebeam*>& vList);

    //RtImagebeam_session
    bool InsertUpdateDBFromObject(const RtImagebeam_session& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtImagebeam_session*>& vList);

    //RtImagetransformation
    bool InsertUpdateDBFromObject(const RtImagetransformation& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtImagetransformation*>& vList);

    //RtImmobilization
    bool InsertUpdateDBFromObject(const RtImmobilization& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtImmobilization*>& vList);

    //RtKerneldata
    bool InsertUpdateDBFromObject(const RtKerneldata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtKerneldata*>& vList);

    //RtKerneldatalist
    bool InsertUpdateDBFromObject(const RtKerneldatalist& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtKerneldatalist*>& vList);

    //RtKerneldatalist_kerneldata
    bool InsertUpdateDBFromObject(const RtKerneldatalist_kerneldata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtKerneldatalist_kerneldata*>& vList);

    //RtKernelweight
    bool InsertUpdateDBFromObject(const RtKernelweight& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtKernelweight*>& vList);

    //RtLock
    bool InsertUpdateDBFromObject(const RtLock& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtLock*>& vList);

    //RtMachine
    bool InsertUpdateDBFromObject(const RtMachine& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMachine*>& vList);

    //RtMachine_clinical
    bool InsertUpdateDBFromObject(const RtMachine_clinical& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMachine_clinical*>& vList);

    //RtMachineqa
    bool InsertUpdateDBFromObject(const RtMachineqa& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMachineqa*>& vList);

    //RtMc3ddose
    bool InsertUpdateDBFromObject(const RtMc3ddose& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMc3ddose*>& vList);

    //RtMcelectronmonoenergyweight
    bool InsertUpdateDBFromObject(const RtMcelectronmonoenergyweight& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMcelectronmonoenergyweight*>& vList);

    //RtMcphocommissionedunit
    bool InsertUpdateDBFromObject(const RtMcphocommissionedunit& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMcphocommissionedunit*>& vList);

    //RtMcphomonoenergyweight
    bool InsertUpdateDBFromObject(const RtMcphomonoenergyweight& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMcphomonoenergyweight*>& vList);

    //RtMeasureddata
    bool InsertUpdateDBFromObject(const RtMeasureddata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMeasureddata*>& vList);

    //RtMeasuredprofile
    bool InsertUpdateDBFromObject(const RtMeasuredprofile& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMeasuredprofile*>& vList);

    //RtMessage
    bool InsertUpdateDBFromObject(const RtMessage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMessage*>& vList);

    //RtMessage_receiver
    bool InsertUpdateDBFromObject(const RtMessage_receiver& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMessage_receiver*>& vList);

    //RtMlcshape
    bool InsertUpdateDBFromObject(const RtMlcshape& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMlcshape*>& vList);

    //RtMonocompressedphasespacedata
    bool InsertUpdateDBFromObject(const RtMonocompressedphasespacedata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMonocompressedphasespacedata*>& vList);

    //RtMonophasespacedata
    bool InsertUpdateDBFromObject(const RtMonophasespacedata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtMonophasespacedata*>& vList);

    //RtNorm_poi
    bool InsertUpdateDBFromObject(const RtNorm_poi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNorm_poi*>& vList);

    //RtNorm_voi
    bool InsertUpdateDBFromObject(const RtNorm_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNorm_voi*>& vList);

    //RtNormgroup
    bool InsertUpdateDBFromObject(const RtNormgroup& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNormgroup*>& vList);

    //RtNormgroup_voi
    bool InsertUpdateDBFromObject(const RtNormgroup_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNormgroup_voi*>& vList);

    //RtNormgroupoptsetting
    bool InsertUpdateDBFromObject(const RtNormgroupoptsetting& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNormgroupoptsetting*>& vList);

    //RtNtcp
    bool InsertUpdateDBFromObject(const RtNtcp& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtNtcp*>& vList);

    //RtOperationrecord
    bool InsertUpdateDBFromObject(const RtOperationrecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtOperationrecord*>& vList);

    //RtPatient
    bool InsertUpdateDBFromObject(const RtPatient& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPatient*>& vList);

    //RtPatientimage
    bool InsertUpdateDBFromObject(const RtPatientimage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPatientimage*>& vList);

    //RtPatientpositionimage
    bool InsertUpdateDBFromObject(const RtPatientpositionimage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPatientpositionimage*>& vList);

    //RtPhasespacedata
    bool InsertUpdateDBFromObject(const RtPhasespacedata& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPhasespacedata*>& vList);

    //RtPlan
    bool InsertUpdateDBFromObject(const RtPlan& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPlan*>& vList);

    //RtPlan_poi
    bool InsertUpdateDBFromObject(const RtPlan_poi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPlan_poi*>& vList);

    //RtPlan_poi_copy
    bool InsertUpdateDBFromObject(const RtPlan_poi_copy& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPlan_poi_copy*>& vList);

    //RtPlan_voi
    bool InsertUpdateDBFromObject(const RtPlan_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPlan_voi*>& vList);

    //RtPlan_voi_copy
    bool InsertUpdateDBFromObject(const RtPlan_voi_copy& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPlan_voi_copy*>& vList);

    //RtPoi
    bool InsertUpdateDBFromObject(const RtPoi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPoi*>& vList);

    //RtPortimagebeam
    bool InsertUpdateDBFromObject(const RtPortimagebeam& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPortimagebeam*>& vList);

    //RtPrescription
    bool InsertUpdateDBFromObject(const RtPrescription& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtPrescription*>& vList);

    //RtProtocoltemplate
    bool InsertUpdateDBFromObject(const RtProtocoltemplate& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtProtocoltemplate*>& vList);

    //RtReportdocuments
    bool InsertUpdateDBFromObject(const RtReportdocuments& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtReportdocuments*>& vList);

    //RtRole
    bool InsertUpdateDBFromObject(const RtRole& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtRole*>& vList);

    //RtRolepermission
    bool InsertUpdateDBFromObject(const RtRolepermission& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtRolepermission*>& vList);

    //RtRtimage
    bool InsertUpdateDBFromObject(const RtRtimage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtRtimage*>& vList);

    //RtSeries
    bool InsertUpdateDBFromObject(const RtSeries& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSeries*>& vList);

    //RtSeriesgroup
    bool InsertUpdateDBFromObject(const RtSeriesgroup& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSeriesgroup*>& vList);

    //RtSeriestable
    bool InsertUpdateDBFromObject(const RtSeriestable& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSeriestable*>& vList);

    //RtSetup
    bool InsertUpdateDBFromObject(const RtSetup& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSetup*>& vList);

    //RtSetupoffsetrecord
    bool InsertUpdateDBFromObject(const RtSetupoffsetrecord& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSetupoffsetrecord*>& vList);

    //RtShapeelement
    bool InsertUpdateDBFromObject(const RtShapeelement& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtShapeelement*>& vList);

    //RtSite
    bool InsertUpdateDBFromObject(const RtSite& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSite*>& vList);

    //RtSite_immobilization
    bool InsertUpdateDBFromObject(const RtSite_immobilization& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSite_immobilization*>& vList);

    //RtSitetemplate
    bool InsertUpdateDBFromObject(const RtSitetemplate& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSitetemplate*>& vList);

    //RtStage
    bool InsertUpdateDBFromObject(const RtStage& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtStage*>& vList);

    //RtStep
    bool InsertUpdateDBFromObject(const RtStep& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtStep*>& vList);

    //RtStructureset
    bool InsertUpdateDBFromObject(const RtStructureset& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtStructureset*>& vList);

    //RtStudy
    bool InsertUpdateDBFromObject(const RtStudy& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtStudy*>& vList);

    //RtSystemdefaultconfig
    bool InsertUpdateDBFromObject(const RtSystemdefaultconfig& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtSystemdefaultconfig*>& vList);

    //RtTablecontour
    bool InsertUpdateDBFromObject(const RtTablecontour& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTablecontour*>& vList);

    //RtTcp
    bool InsertUpdateDBFromObject(const RtTcp& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTcp*>& vList);

    //RtTemplate
    bool InsertUpdateDBFromObject(const RtTemplate& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTemplate*>& vList);

    //RtTolerance
    bool InsertUpdateDBFromObject(const RtTolerance& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTolerance*>& vList);

    //RtTray
    bool InsertUpdateDBFromObject(const RtTray& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTray*>& vList);

    //RtTreatmentbeam
    bool InsertUpdateDBFromObject(const RtTreatmentbeam& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTreatmentbeam*>& vList);

    //RtTreatmentbeam_accessory
    bool InsertUpdateDBFromObject(const RtTreatmentbeam_accessory& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTreatmentbeam_accessory*>& vList);

    //RtTreatmentbeam_poi
    bool InsertUpdateDBFromObject(const RtTreatmentbeam_poi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTreatmentbeam_poi*>& vList);

    //RtTreatmentbeam_voi
    bool InsertUpdateDBFromObject(const RtTreatmentbeam_voi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTreatmentbeam_voi*>& vList);

    //RtTreatmentsession
    bool InsertUpdateDBFromObject(const RtTreatmentsession& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtTreatmentsession*>& vList);

    //RtUser
    bool InsertUpdateDBFromObject(const RtUser& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtUser*>& vList);

    //RtUser_clinic
    bool InsertUpdateDBFromObject(const RtUser_clinic& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtUser_clinic*>& vList);

    //RtUser_role
    bool InsertUpdateDBFromObject(const RtUser_role& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtUser_role*>& vList);

    //RtUserconfig
    bool InsertUpdateDBFromObject(const RtUserconfig& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtUserconfig*>& vList);

    //RtUsersession
    bool InsertUpdateDBFromObject(const RtUsersession& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtUsersession*>& vList);

    //RtVoi
    bool InsertUpdateDBFromObject(const RtVoi& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtVoi*>& vList);

    //RtVoisetting
    bool InsertUpdateDBFromObject(const RtVoisetting& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtVoisetting*>& vList);

    //RtWedgefactor
    bool InsertUpdateDBFromObject(const RtWedgefactor& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtWedgefactor*>& vList);

    //RtAsoverride
    bool InsertUpdateDBFromObject(const RtAsoverride& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtAsoverride*>& vList);

    //RtAchinesessionview
    bool InsertUpdateDBFromObject(const RtAchinesessionview& src, bool bInsert);
    bool FetchDataFromDB(const std::string& sSql, std::vector<RtAchinesessionview*>& vList);

    void CalcHash(const RtMachine& src, std::string* pHash);
    void CalcHash(const RtPatient& src, std::string* pHash);

private:

    template <typename T> 
    std::string ToString(T value)
    {
        //std::string str = boost::str(boost::format("%.3f") % value);
        char str[20]  = "";
        sprintf_s(str, "%.1f", value);
        std::string sTemp(str);
        size_t slength =strlen(str);
        for (size_t i = slength -1; i>0; --i)
        {
            //if ('0' == str[i])
            //{
            //    sTemp.erase(i);
            //}
            //else
            if('.' != str[i])
            {   
                sTemp.erase(i);    
            }
            else if('.' == str[i])//removed .
            {
                sTemp.erase(i);
                break;
            }
            else
            {
                break;
            }
        }
        return sTemp;
    }

    void RemoveSlash(std::string& str)
    {
        str.erase(std::remove(str.begin(), str.end(), '\\'), str.end());
    }
private:
    MYSQL*  m_pMySql;
};



RT_TPS_DATABASE_END_NAMESPACE
#endif
